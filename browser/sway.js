(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Sway = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _ = typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null;
var helpers = require('./lib/helpers');
var JsonRefs = typeof window !== "undefined" ? window['JsonRefs'] : typeof global !== "undefined" ? global['JsonRefs'] : null;
var SwaggerApi = require('./lib/types/api');
var YAML = typeof window !== "undefined" ? window['jsyaml'] : typeof global !== "undefined" ? global['jsyaml'] : null;

// Load promises polyfill if necessary
/* istanbul ignore if */
if (typeof Promise === 'undefined') {
  require('native-promise-only');
}

/**
 * A library for simpler [Swagger](http://swagger.io/) integrations.
 *
 * @module Sway
 */

/**
 * Callback used for validation.
 *
 * @typedef {function} ValidatorCallback
 *
 * @param {module:Sway~SwaggerApi} api - The Swagger API object
 *
 * @returns {module:Sway~ValidationResults} The validation results
 */

/**
 * Server response wrapper.
 *
 * Since the low level `http.ServerResponse` object is not always guaranteed and even if it is, there is no public way
 * to gather the necessary parts of the response to perform validation, this object encapsulates the required response
 * information to perform response validation.
 *
 * @typedef {object} ServerResponseWrapper
 *
 * @property {*} body - The response body
 * @property {string} [encoding] - The encoding of the body when the body is a `Buffer`
 * @property {object} headers - The response headers
 * @property {number|string} [statusCode=default] - The response status code
 */

/**
 * Validation error/warning object.
 *
 * When this object is created as a result of JSON Schema validation, this object is created by
 * [z-schema](https://github.com/zaggino/z-schema) and it owns the structure so there can be extra properties not
 * documented below.
 *
 * @typedef {object} ValidationEntry
 *
 * @property {string} code - The code used to identify the error/warning
 * @property {string} [error] - Whenever there is an upstream `Error` encountered, its message is here
 * @property {ValidationEntry[]} [errors] - The nested error(s) encountered during validation
 * @property {string[]} [lineage] - Contains the composition lineage for circular composition errors
 * @property {string} message - The human readable description of the error/warning
 * @property {string} [name] - The header name for header validation errors
 * @property {array} [params] - The parameters used when validation failed *(This is a z-schema construct and is only
 * set for JSON Schema validation errors.)*
 * @property {string[]} path - The path to the location in the document where the error/warning occurred
 * @property {string} [schemaId] - The schema id *(This is a z-schema construct and is only set for JSON Schema
 * validation errors and when its value is not `undefined`.)
 */

/**
 * Validation results object.
 *
 * @typedef {object} ValidationResults
 *
 * @property {module:Sway~ValidationEntry[]} errors - The validation errors
 * @property {module:Sway~ValidationEntry[]} warnings - The validation warnings
 */

/**
 * Creates a SwaggerApi object from its Swagger definition(s).
 *
 * @param {object} options - The options for loading the definition(s)
 * @param {object|string} options.definition - The Swagger definition location or structure
 * @param {object} [options.jsonRefs] - *(See [JsonRefs~JsonRefsOptions](https://github.com/whitlockjc/json-refs/blob/master/docs/API.md#module_JsonRefs..JsonRefsOptions))*
 * @param {module:Sway~ValidatorCallback[]} [options.customValidators] - The custom validators
 *
 * @returns {Promise} The promise
 *
 * @example
 * SwaggerApi.create({definition: 'http://petstore.swagger.io/v2/swagger.yaml'})
 *   .then(function (api) {
 *     console.log('Documentation URL: ', api.documentationUrl);
 *   }, function (err) {
 *     console.error(err.stack);
 *   });
 */
module.exports.create = function (options) {
  var allTasks = Promise.resolve();
  var cOptions;

  // Validate arguments
  allTasks = allTasks.then(function () {
    return new Promise(function (resolve) {
      if (_.isUndefined(options)) {
        throw new TypeError('options is required');
      } else if (!_.isPlainObject(options)) {
        throw new TypeError('options must be an object');
      } else if (_.isUndefined(options.definition)) {
        throw new TypeError('options.definition is required');
      } else if (!_.isPlainObject(options.definition) && !_.isString(options.definition)) {
        throw new TypeError('options.definition must be either an object or a string');
      } else if (!_.isUndefined(options.jsonRefs) && !_.isPlainObject(options.jsonRefs)) {
        throw new TypeError('options.jsonRefs must be an object');
      } else if (!_.isUndefined(options.customValidators) && !_.isArray(options.customValidators)) {
        throw new TypeError('options.customValidators must be an array');
      }

      _.forEach(options.customValidators, function (validator, index) {
        if (!_.isFunction(validator)) {
          throw new TypeError('options.customValidators at index ' + index + ' must be a function');
        }
      });

      resolve();
    });
  });

  // Make a copy of the input options so as not to alter them
  cOptions = _.cloneDeep(options);

  //
  allTasks = allTasks
  // Resolve relative/remote references
  .then(function () {
    // Prepare the json-refs options
    if (_.isUndefined(cOptions.jsonRefs)) {
      cOptions.jsonRefs = {};
    }

    // Include invalid reference information
    cOptions.jsonRefs.includeInvalid = true;

    // Resolve only relative/remote references
    cOptions.jsonRefs.filter = ['relative', 'remote'];

    // Update the json-refs options to process YAML
    if (_.isUndefined(cOptions.jsonRefs.loaderOptions)) {
      cOptions.jsonRefs.loaderOptions = {};
    }

    if (_.isUndefined(cOptions.jsonRefs.loaderOptions.processContent)) {
      cOptions.jsonRefs.loaderOptions.processContent = function (res, cb) {
        cb(undefined, YAML.safeLoad(res.text));
      };
    }

    // Call the appropriate json-refs API
    if (_.isString(cOptions.definition)) {
      return JsonRefs.resolveRefsAt(cOptions.definition, cOptions.jsonRefs);
    } else {
      return JsonRefs.resolveRefs(cOptions.definition, cOptions.jsonRefs);
    }
  })
  // Resolve local references and merge results
  .then(function (remoteResults) {
    // Resolve local references (Remote references should had already been resolved)
    cOptions.jsonRefs.filter = 'local';

    return JsonRefs.resolveRefs(remoteResults.resolved || cOptions.definition, cOptions.jsonRefs).then(function (results) {
      _.each(remoteResults.refs, function (refDetails, refPtr) {
        results.refs[refPtr] = refDetails;
      });

      return {
        // The original Swagger definition
        definition: _.isString(cOptions.definition) ? remoteResults.value : cOptions.definition,
        // The original Swagger definition with its remote references resolved
        definitionRemotesResolved: remoteResults.resolved,
        // The original Swagger definition with all its references resolved
        definitionFullyResolved: results.resolved,
        // Merge the local reference details with the remote reference details
        refs: results.refs
      };
    });
  })
  // Process the Swagger document and return the API
  .then(function (results) {
    // We need to remove all circular objects as z-schema does not work with them:
    //   https://github.com/zaggino/z-schema/issues/137
    helpers.removeCirculars(results.definition);
    helpers.removeCirculars(results.definitionRemotesResolved);
    helpers.removeCirculars(results.definitionFullyResolved);

    // Create object model
    return new SwaggerApi(results.definition, results.definitionRemotesResolved, results.definitionFullyResolved, results.refs, options);
  });

  return allTasks;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./lib/helpers":2,"./lib/types/api":3,"native-promise-only":213}],2:[function(require,module,exports){
(function (global){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _ = typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null;
var formatGenerators = require('./validation/format-generators');
var formatValidators = require('./validation/format-validators');
var ZSchema = typeof window !== "undefined" ? window['ZSchema'] : typeof global !== "undefined" ? global['ZSchema'] : null;

// full-date from http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14
var dateRegExp = new RegExp('^' + '\\d{4}' + // year
'-' + '([0]\\d|1[012])' + // month
'-' + '(0[1-9]|[12]\\d|3[01])' + // day
'$');

// date-time from http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14
var dateTimeRegExp = new RegExp('^' + '\\d{4}' + // year
'-' + '([0]\\d|1[012])' + // month
'-' + '(0[1-9]|[12]\\d|3[01])' + // day
'T' + '([01]\\d|2[0-3])' + // hour
':' + '[0-5]\\d' + // minute
':' + '[0-5]\\d' + // second
'(\\.\\d+)?' + // fractional seconds
'(Z|(\\+|-)([01]\\d|2[0-4]):[0-5]\\d)' + // Z or time offset
'$');

var collectionFormats = [undefined, 'csv', 'multi', 'pipes', 'ssv', 'tsv'];
var jsonMocker;
var jsonSchemaValidator = createJSONValidator();
// https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#parameter-object
var parameterSchemaProperties = ['allowEmptyValue', 'default', 'description', 'enum', 'exclusiveMaximum', 'exclusiveMinimum', 'format', 'items', 'maxItems', 'maxLength', 'maximum', 'minItems', 'minLength', 'minimum', 'multipleOf', 'pattern', 'type', 'uniqueItems'];
var types = ['array', 'boolean', 'integer', 'object', 'number', 'string'];

function createJSONMocker(mocker) {
  // Extend faker.js to only include the 'en' locale
  var fakerLocale = require('faker/locale/en_US');

  mocker.extend('faker', function () {
    return fakerLocale;
  });

  // Add the custom format generators
  _.each(formatGenerators, function (gen, name) {
    mocker.format(name, gen(mocker));
  });

  return mocker;
}

function registerFormat(name, validator) {
  ZSchema.registerFormat(name, validator);
}

function createJSONValidator() {
  var validator = new ZSchema({
    breakOnFirstError: false,
    ignoreUnknownFormats: true,
    reportPathAsArray: true
  });

  // Add the custom validators
  _.each(formatValidators, function (handler, name) {
    registerFormat(name, handler);
  });

  return validator;
}

function normalizeError(obj) {
  // Remove superfluous error details
  if (_.isUndefined(obj.schemaId)) {
    delete obj.schemaId;
  }

  if (obj.inner) {
    _.each(obj.inner, function (nObj) {
      normalizeError(nObj);
    });
  }
}

/**
 * Helper method to take a Swagger parameter definition and compute its schema.
 *
 * For non-body Swagger parameters, the definition itself is not suitable as a JSON Schema so we must compute it.
 *
 * @param {object} paramDef - The parameter definition
 *
 * @returns {object} The computed schema
 */
module.exports.computeParameterSchema = function (paramDef) {
  var schema;

  if (_.isUndefined(paramDef.schema)) {
    schema = {};

    // Build the schema from the schema-like parameter structure
    _.forEach(parameterSchemaProperties, function (name) {
      if (!_.isUndefined(paramDef[name])) {
        schema[name] = paramDef[name];
      }
    });
  } else {
    schema = paramDef.schema;
  }

  return schema;
};

/**
 * Converts a raw JavaScript value to a JSON Schema value based on its schema.
 *
 * @param {object} schema - The schema for the value
 * @param {object} options - The conversion options
 * @param {string} [options.collectionFormat] - The collection format
 * @param {string} [options.encoding] - The encoding if the raw value is a `Buffer`
 * @param {*} value - The value to convert
 *
 * @returns {*} The converted value
 *
 * @throws {TypeError} IF the `collectionFormat` or `type` is invalid for the `schema`, or if conversion fails
 */
var convertValue = module.exports.convertValue = function (schema, options, value) {
  var originalValue = value; // Used in error reporting for invalid values
  var type = _.isPlainObject(schema) ? schema.type : undefined;
  var pValue = value;
  var pType = typeof pValue === 'undefined' ? 'undefined' : _typeof(pValue);
  var err;
  var isDate;
  var isDateTime;

  // If there is an explicit type provided, make sure it's one of the supported ones
  if (_.has(schema, 'type') && types.indexOf(type) === -1) {
    throw new TypeError('Invalid \'type\' value: ' + type);
  }

  // Since JSON Schema allows you to not specify a type and it is treated as a wildcard of sorts, we should not do any
  // coercion for these types of values.
  if (_.isUndefined(type)) {
    return value;
  }

  // If there is no value, do not convert it
  if (_.isUndefined(value)) {
    return value;
  }

  // Convert Buffer value to String
  // (We use this type of check to identify Buffer objects.  The browser does not have a Buffer type and to avoid having
  //  import the browserify buffer module, we just do a simple check.  This is brittle but should work.)
  if (_.isFunction(value.readUInt8)) {
    value = value.toString(options.encoding);
    pValue = value;
    pType = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  }

  // If the value is empty and empty is allowed, use it
  if (schema.allowEmptyValue && value === '') {
    return value;
  }

  // Attempt to parse the string as JSON if the type is array or object
  if (['array', 'object'].indexOf(type) > -1 && _.isString(value)) {
    if (type === 'array' && value.indexOf('[') === 0 || type === 'object' && value.indexOf('{') === 0) {
      try {
        value = JSON.parse(value);
      } catch (err) {
        // Nothing to do here, just fall through
      }
    }
  }

  switch (type) {
    case 'array':
      if (_.isString(value)) {
        if (collectionFormats.indexOf(options.collectionFormat) === -1) {
          throw new TypeError('Invalid \'collectionFormat\' value: ' + options.collectionFormat);
        }

        switch (options.collectionFormat) {
          case 'csv':
          case undefined:
            value = value.split(',');
            break;
          case 'multi':
            value = [value];
            break;
          case 'pipes':
            value = value.split('|');
            break;
          case 'ssv':
            value = value.split(' ');
            break;
          case 'tsv':
            value = value.split('\t');
            break;

          // no default
        }
      }

      if (_.isArray(value)) {
        value = _.map(value, function (item, index) {
          return convertValue(_.isArray(schema.items) ? schema.items[index] : schema.items, options, item);
        });
      }

      break;
    case 'boolean':
      if (!_.isBoolean(value)) {
        if (value === 'true') {
          value = true;
        } else if (value === 'false') {
          value = false;
        } else {
          err = new TypeError('Not a valid boolean: ' + value);
        }
      }

      break;
    case 'integer':
      if (!_.isNumber(value)) {
        if (_.isString(value) && _.trim(value).length === 0) {
          value = NaN;
        }

        value = Number(value);

        if (_.isNaN(value)) {
          err = new TypeError('Not a valid integer: ' + originalValue);
        }
      }

      break;
    case 'number':
      if (!_.isNumber(value)) {
        if (_.isString(value) && _.trim(value).length === 0) {
          value = NaN;
        }

        value = Number(value);

        if (_.isNaN(value)) {
          err = new TypeError('Not a valid number: ' + originalValue);
        }
      }
      break;
    case 'string':
      if (['date', 'date-time'].indexOf(schema.format) > -1) {
        if (_.isString(value)) {
          isDate = schema.format === 'date' && dateRegExp.test(value);
          isDateTime = schema.format === 'date-time' && dateTimeRegExp.test(value);

          if (!isDate && !isDateTime) {
            err = new TypeError('Not a valid ' + schema.format + ' string: ' + originalValue);
            err.code = 'INVALID_FORMAT';
          } else {
            value = new Date(value);
          }
        }

        if (!_.isDate(value) || value.toString() === 'Invalid Date') {
          err = new TypeError('Not a valid ' + schema.format + ' string: ' + originalValue);

          err.code = 'INVALID_FORMAT';
        }
      } else if (!_.isString(value)) {
        err = new TypeError('Not a valid string: ' + value);
      }

      break;

    // no default
  }

  if (!_.isUndefined(err)) {
    // Convert the error to be more like a JSON Schema validation error
    if (_.isUndefined(err.code)) {
      err.code = 'INVALID_TYPE';
      err.message = 'Expected type ' + type + ' but found type ' + pType;
    } else {
      err.message = 'Object didn\'t pass validation for format ' + schema.format + ': ' + pValue;
    }

    // Format and type errors resemble JSON Schema validation errors
    err.failedValidation = true;
    err.path = [];

    throw err;
  }

  return value;
};

/**
 * Returns the provided content type or `application/octet-stream` if one is not provided.
 *
 * @see http://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html#sec7.2.1
 *
 * @param {object} headers - The headers to search
 *
 * @returns {string} The content type
 */
module.exports.getContentType = function (headers) {
  return getHeaderValue(headers, 'content-type') || 'application/octet-stream';
};

/**
 * Returns the header value regardless of the case of the provided/requested header name.
 *
 * @param {object} headers - The headers to search
 * @param {string} headerName - The header name
 *
 * @returns {string} The header value or `undefined` if it is not found
 */
var getHeaderValue = module.exports.getHeaderValue = function (headers, headerName) {
  // Default to an empty object
  headers = headers || {};

  var lcHeaderName = headerName.toLowerCase();
  var realHeaderName = _.find(Object.keys(headers), function (header) {
    return header.toLowerCase() === lcHeaderName;
  });

  return headers[realHeaderName];
};

/**
 * Returns a json-schema-faker mocker.
 *
 * @returns {object} The json-schema-faker mocker to use
 */
module.exports.getJSONSchemaMocker = function () {
  var mocker;

  if (!jsonMocker) {
    mocker = require('json-schema-faker/lib');
    jsonMocker = createJSONMocker(mocker);
  }
  return jsonMocker;
};
/**
 * Returns a z-schema validator.
 *
 * @returns {object} The z-schema validator to use
 */
module.exports.getJSONSchemaValidator = function () {
  return jsonSchemaValidator;
};

module.exports.parameterLocations = ['body', 'formData', 'header', 'path', 'query'];

/**
 * Registers a custom format.
 *
 * @param {string} name - The name of the format
 * @param {function} validator - The format validator *(See [ZSchema Custom Format](https://github.com/zaggino/z-schema#register-a-custom-format))*
 */
module.exports.registerFormat = registerFormat;

/**
 * Replaces the circular references in the provided object with an empty object.
 *
 * @param {object} obj - The JavaScript object
 */
module.exports.removeCirculars = function (obj) {
  walk(obj, function (node, path, ancestors) {
    // Replace circulars with {}
    if (ancestors.indexOf(node) > -1) {
      _.set(obj, path, {});
    }
  });
};

/**
 * Validates the provided value against the JSON Schema by name or value.
 *
 * @param {object} validator - The JSON Schema validator created via {@link #createJSONValidator}
 * @param {object} schema - The JSON Schema
 * @param {*} value - The value to validate
 *
 * @returns {object} Object containing the errors and warnings of the validation
 */
module.exports.validateAgainstSchema = function (validator, schema, value) {
  schema = _.cloneDeep(schema); // Clone the schema as z-schema alters the provided document

  var response = {
    errors: [],
    warnings: []
  };

  if (!validator.validate(value, schema)) {
    response.errors = _.map(validator.getLastErrors(), function (err) {
      normalizeError(err);

      return err;
    });
  }

  return response;
};

/**
 * Validates the content type.
 *
 * @param {string} contentType - The Content-Type value of the request/response
 * @param {string[]} supportedTypes - The supported (declared) Content-Type values for the request/response
 * @param {object} results - The results object to update in the event of an invalid content type
 */
module.exports.validateContentType = function (contentType, supportedTypes, results) {
  var rawContentType = contentType;

  if (!_.isUndefined(contentType)) {
    // http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17
    contentType = contentType.split(';')[0]; // Strip the parameter(s) from the content type
  }

  // Check for exact match or mime-type only match
  if (_.indexOf(supportedTypes, rawContentType) === -1 && _.indexOf(supportedTypes, contentType) === -1) {
    results.errors.push({
      code: 'INVALID_CONTENT_TYPE',
      message: 'Invalid Content-Type (' + contentType + ').  These are supported: ' + supportedTypes.join(', '),
      path: []
    });
  }
};

/**
 * Walk an object and invoke the provided function for each node.
 *
 * @param {*} obj - The object to walk
 * @param {function} [fn] - The function to invoke
 */
var walk = module.exports.walk = function (obj, fn) {
  var callFn = _.isFunction(fn);

  function doWalk(ancestors, node, path) {
    if (callFn) {
      fn(node, path, ancestors);
    }

    // We do not process circular objects again
    if (ancestors.indexOf(node) === -1) {
      ancestors.push(node);

      if (_.isArray(node) || _.isPlainObject(node)) {
        _.each(node, function (member, indexOrKey) {
          doWalk(ancestors, member, path.concat(indexOrKey.toString()));
        });
      }
    }

    ancestors.pop();
  }

  doWalk([], obj, []);
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./validation/format-generators":9,"./validation/format-validators":10,"faker/locale/en_US":151,"json-schema-faker/lib":190}],3:[function(require,module,exports){
(function (global){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _ = typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null;
var debug = require('debug')('sway:api');
var helpers = require('../helpers');
var parseUrl = require('url').parse;
var Path = require('./path');
var validators = require('../validation/validators');

/**
 * The Swagger API object.
 *
 * **Note:** Do not use directly.
 *
 * **Extra Properties:** Other than the documented properties, this object also exposes all properties of the definition
 *                       object.
 *
 * @param {object} definition - The original Swagger definition
 * @param {object} definitionRemotesResolved - The Swagger definition with all of its remote references resolved
 * @param {object} definitionFullyResolved - The Swagger definition with all of its references resolved
 * @param {object} references - The location and resolution of the resolved references in the Swagger definition
 * @param {object} options - The options passed to swaggerApi.create
 *
 * @property {object} customFormats - The key/value pair of custom formats *(The keys are the format name and the values
 *                                    are async functions.  See [ZSchema Custom Formats](https://github.com/zaggino/z-schema#register-a-custom-format))*
 * @property {module:Sway~ValidatorCallback[]} customValidators - The array of custom validators
 * @property {object} definition - The original Swagger definition
 * @property {object} definitionRemotesResolved - The Swagger definition with only its remote references resolved *(This
 *                                                means all references to external/remote documents are replaced with
 *                                                its dereferenced value but all local references are left unresolved.)*
 * @property {object} definitionFullyResolved - The Swagger definition with all of its resolvable references resolved
 *                                              *(This means that all resolvable references are replaced with their
 *                                              dereferenced value.)*
 * @property {string} documentationUrl - The URL to the Swagger documentation
 * @property {module:Sway~Path[]} pathObjects - The unique `Path` objects
 * @property {object} options - The options passed to the constructor
 * @property {object} references - The reference metadata *(See [JsonRefs~ResolvedRefDetails](https://github.com/whitlockjc/json-refs/blob/master/docs/API.md#module_JsonRefs..ResolvedRefDetails))*
 * @property {string} version - The Swagger API version
 *
 * @constructor
 */
function SwaggerApi(definition, definitionRemotesResolved, definitionFullyResolved, references, options) {
  var that = this;

  debug('Creating SwaggerApi from %s', _.isString(options.definition) ? options.definition : 'the provided document');

  // Assign this so other object can use it
  this._debug = debug;

  // Assign local properties
  this.customFormats = {};
  this.customValidators = [];
  this.definition = definition;
  this.definitionFullyResolved = definitionFullyResolved;
  this.definitionRemotesResolved = definitionRemotesResolved;
  this.documentationUrl = 'https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md';
  this.options = options;
  this.references = references;
  this.version = '2.0';

  // Assign local properties from the Swagger definition properties
  _.assign(this, definition);

  // Reguster custom formats
  _.each(options.customFormats, _.bind(SwaggerApi.prototype.registerFormat, this));

  // Register custom validators
  _.each(options.customValidators, _.bind(SwaggerApi.prototype.registerValidator, this));

  debug('  Paths:');

  // Create the Path objects
  this.pathObjects = _.map(definitionFullyResolved.paths, function (pathDef, path) {
    return new Path(that, path, _.get(definitionRemotesResolved, ['paths', path]), pathDef, ['paths', path]);
  });
}

/**
 * Returns the operation for the given path and operation.
 *
 * **Note:** Below is the list of properties used when `reqOrPath` is an `http.ClientRequest` *(or equivalent)*:
 *
 *   * `method`
 *   * `originalUrl`
 *   * `url`
 *
 * *(See: {@link https://nodejs.org/api/http.html#http_class_http_clientrequest})*
 *
 * @param {string|object} idOrPathOrReq - The Swagger opeartion id, path string or the http client request *(or
 *                                        equivalent)*
 * @param {string} [method] - The Swagger operation method _(not used when providing an operation id)_
 *
 * @returns {module:Sway~Operation} The `Operation` for the provided operation id, or path and method or `undefined` if
 *                                  there is no operation for that operation id, or path and method combination
 */
SwaggerApi.prototype.getOperation = function (idOrPathOrReq, method) {
  var pathObject;
  var operation;

  if (_.isObject(idOrPathOrReq)) {
    method = idOrPathOrReq.method;
  }

  if (!_.isUndefined(method)) {
    pathObject = this.getPath(idOrPathOrReq);

    if (!_.isUndefined(pathObject)) {
      operation = pathObject.getOperation(method);
    }
  } else {
    operation = _.find(this.getPaths(), function (path) {
      return path.getOperation(idOrPathOrReq);
    });
  }

  return operation;
};

/**
 * Returns all operations for the provided path or all operations in the API.
 *
 * @param {string} [path] - The Swagger path
 *
 * @returns {module:Sway~Operation[]} All `Operation` objects for the provided path or all API operations
 */
SwaggerApi.prototype.getOperations = function (path) {
  var operations = [];
  var pathObject;

  if (_.isUndefined(path)) {
    _.each(this.pathObjects, function (pObject) {
      operations.push.apply(operations, pObject.getOperations());
    });
  } else {
    pathObject = this.getPath(path);

    if (!_.isUndefined(pathObject)) {
      operations = pathObject.getOperations();
    }
  }

  return operations;
};

/**
 * Returns all operations for the provided tag.
 *
 * @param {string} [tag] - The Swagger tag
 *
 * @returns {module:Sway~Operation[]} All `Operation` objects for the provided tag
 */
SwaggerApi.prototype.getOperationsByTag = function (tag) {
  return _.reduce(this.pathObjects, function (operations, pathObject) {
    operations.push.apply(operations, pathObject.getOperationsByTag(tag));

    return operations;
  }, []);
};

/**
 * Returns the path object for the given path or request.
 *
 * **Note:** Below is the list of properties used when `reqOrPath` is an `http.ClientRequest` *(or equivalent)*:
 *
 *   * `originalUrl`
 *   * `url`
 *
 * *(See: {@link https://nodejs.org/api/http.html#http_class_http_clientrequest})*
 *
 * @param {string|object} pathOrReq - The Swagger path string or the http client request *(or equivalent)*
 *
 * @returns {module:Sway~Path} The corresponding `Path` object for the requested path or request
 */
SwaggerApi.prototype.getPath = function (pathOrReq) {
  var lastIndex = -1;
  var nextIndex = -1;
  var matches;
  var url;

  if (_.isObject(pathOrReq)) {
    url = parseUrl(pathOrReq.originalUrl || pathOrReq.url).pathname;

    // Find all matching paths
    matches = _.reduce(this.pathObjects, function (newMatches, pathObject, index) {
      var isMatch = _.isArray(pathObject.regexp.exec(url));

      if (isMatch) {
        newMatches.push({
          index: index,
          segments: pathObject.path.split('/')
        });
      }

      return newMatches;
    }, []);

    // TODO: Log all matches

    while (matches.length > 1) {
      matches = _.reduce(matches, function (newMatches, match) {
        var newIndex = _.findIndex(match.segments, function (segment) {
          return _.startsWith(segment, '{') && _.endsWith(segment, '}');
        }, lastIndex + 1);

        // Complete static match so use some value that can't be exceeded
        if (newIndex === -1) {
          newIndex = Infinity;
        }

        if (newIndex > nextIndex) {
          nextIndex = newIndex;
          newMatches = [match];
        } else if (newIndex === nextIndex) {
          newMatches.push(match);
        }

        return newMatches;
      }, []);

      // At this point we have tried to filter the matches but there are multiple matches that are identical and cannot
      // be filtered further.  The only choice is to choose the first match.
      if (lastIndex === nextIndex) {
        matches.splice(1);
      }

      lastIndex = nextIndex;
    }

    // TODO: Log match

    return matches.length > 0 ? this.pathObjects[matches[0].index] : undefined;
  } else {
    return _.find(this.pathObjects, function (pathObject) {
      return pathOrReq === pathObject.path;
    });
  }
};

/**
 * Returns all path objects for the Swagger API.
 *
 * @returns {module:Sway~Path[]} The `Path` objects
 */
SwaggerApi.prototype.getPaths = function () {
  return this.pathObjects;
};

/**
 * Registers a custom format.
 *
 * @param {string} name - The name of the format
 * @param {function} validator - The format validator *(See [ZSchema Custom Format](https://github.com/zaggino/z-schema#register-a-custom-format))*
 */
SwaggerApi.prototype.registerFormat = function (name, validator) {
  if (_.isUndefined(name)) {
    throw new TypeError('name is required');
  } else if (!_.isString(name)) {
    throw new TypeError('name must be a string');
  } else if (_.isUndefined(validator)) {
    throw new TypeError('validator is required');
  } else if (!_.isFunction(validator)) {
    throw new TypeError('validator must be a function');
  }

  this.customFormats[name] = validator;

  helpers.registerFormat(name, validator);
};

/**
 * Registers a custom validator.
 *
 * @param {module:Sway~ValidatorCallback} validator - The validator
 *
 * @throws {TypeError} If the validator is not a function
 */
SwaggerApi.prototype.registerValidator = function (validator) {
  if (_.isUndefined(validator)) {
    throw new TypeError('validator is required');
  } else if (!_.isFunction(validator)) {
    throw new TypeError('validator must be a function');
  }

  this.customValidators.push(validator);
};

/**
 * Performs validation of the Swagger API document(s).
 *
 * @returns {module:Sway~ValidationResults} The validation results
 */
SwaggerApi.prototype.validate = function () {
  var results = {
    errors: [],
    warnings: []
  };
  var self = this;

  function doValidation(validator) {
    var vResults = validator(self);

    if (vResults.errors.length > 0) {
      results.errors.push.apply(results.errors, vResults.errors);
    }

    if (vResults.warnings.length > 0) {
      results.warnings.push.apply(results.warnings, vResults.warnings);
    }
  }

  // Validate the document structurally
  doValidation(validators.jsonSchemaValidator);

  // Perform remaining validation only if the document is structurally valid
  if (results.errors.length === 0) {
    // Run plugin validators
    _.each(validators.semanticValidators, doValidation);

    // Run custom validators
    _.each(this.customValidators, doValidation);
  }

  return results;
};

module.exports = SwaggerApi;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../helpers":2,"../validation/validators":11,"./path":7,"debug":19,"url":248}],4:[function(require,module,exports){
(function (global){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _ = typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null;
var JsonRefs = typeof window !== "undefined" ? window['JsonRefs'] : typeof global !== "undefined" ? global['JsonRefs'] : null;
var Parameter = require('./parameter');
var Response = require('./response');
var helpers = require('../helpers');

/**
 * The Swagger Operation object.
 *
 * **Note:** Do not use directly.
 *
 * **Extra Properties:** Other than the documented properties, this object also exposes all properties of the definition
 *                       object.
 *
 * @param {module:Sway~Path} pathObject - The Path object
 * @param {string} method - The operation method
 * @param {object} definition - The operation definition *(The raw operation definition __after__ remote references were
 *                              resolved)*
 * @param {object} definitionFullyResolved - The operation definition with all of its resolvable references resolved
 * @param {string[]} pathToDefinition - The path segments to the operation definition
 *
 * @property {object} definition - The operation definition *(The raw operation definition __after__ remote references were
 *                                 resolved)*
 * @property {object} definitionFullyResolved - The operation definition with all of its resolvable references resolved
 * @property {string} method - The HTTP method for this operation
 * @property {module:Sway~Path} pathObject - The `Path` object
 * @property {string[]} pathToDefinition - The path segments to the operation definition
 * @property {module:Sway~Parameter[]} parameterObjects - The `Parameter` objects
 * @property {string} ptr - The JSON Pointer to the operation
 * @property {object} securityDefinitions - The security definitions used by this operation
 *
 * @constructor
 */
function Operation(pathObject, method, definition, definitionFullyResolved, pathToDefinition) {
  var seenParameters = [];
  var that = this;

  // Assign local properties
  this.consumes = definitionFullyResolved.consumes || pathObject.api.consumes || [];
  this.definition = _.cloneDeep(definition); // Clone so we do not alter the original
  this.definitionFullyResolved = _.cloneDeep(definitionFullyResolved); // Clone so we do not alter the original
  this.method = method;
  this.parameterObjects = []; // Computed below
  this.pathObject = pathObject;
  this.pathToDefinition = pathToDefinition;
  this.produces = definitionFullyResolved.produces || pathObject.api.produces || [];
  this.ptr = JsonRefs.pathToPtr(pathToDefinition);

  // Assign local properties from the Swagger definition properties
  _.assign(this, definitionFullyResolved);

  this._debug = this.pathObject.api._debug;

  // Add the Parameter objects from the Path object that were not redefined in the operation definition
  this.parameterObjects = _.map(pathObject.parameterObjects, function (parameterObject) {
    seenParameters.push(parameterObject.in + ':' + parameterObject.name);

    return parameterObject;
  });

  this._debug('        %s at %s', this.method.toUpperCase(), this.ptr);
  this._debug('          Consumes:');

  _.each(this.consumes, function (mimeType) {
    that._debug('            %s', mimeType);
  });

  this._debug('          Parameters:');

  // Create Parameter objects from parameters defined in the operation definition
  _.each(definitionFullyResolved.parameters, function (paramDef, index) {
    var key = paramDef.in + ':' + paramDef.name;
    var seenIndex = seenParameters.indexOf(key);
    var pPath = pathToDefinition.concat(['parameters', index.toString()]);
    var parameterObject = new Parameter(that, _.get(pathObject.api.definitionRemotesResolved, pPath), paramDef, pPath);

    if (seenIndex > -1) {
      that.parameterObjects[seenIndex] = parameterObject;
    } else {
      that.parameterObjects.push(parameterObject);

      seenParameters.push(key);
    }
  });

  this._debug('          Produces:');

  _.each(this.produces, function (mimeType) {
    that._debug('            %s', mimeType);
  });

  this._debug('          Responses:');

  // Create response objects from responses defined in the operation definition
  this.responseObjects = _.map(this.definitionFullyResolved.responses, function (responseDef, code) {
    var rPath = pathToDefinition.concat(['responses', code]);

    return new Response(that, code, _.get(that.pathObject.api.definitionRemotesResolved, rPath), responseDef, rPath);
  });

  this._debug('          Security:');

  // Bring in the security definitions for easier access

  // Override global security with locally defined
  var security = this.security || pathObject.api.definitionFullyResolved.security;

  this.securityDefinitions = _.reduce(security, function (defs, reqs) {
    _.each(reqs, function (req, name) {
      var def = pathObject.api.definitionFullyResolved.securityDefinitions ? pathObject.api.definitionFullyResolved.securityDefinitions[name] : undefined;

      if (!_.isUndefined(def)) {
        defs[name] = def;
      }

      that._debug('            %s (type: %s)', name, _.isUndefined(def) ? 'missing' : def.type);
    });

    return defs;
  }, {});
}

/**
 * Returns the parameter with the provided name and location when provided.
 *
 * @param {string} name - The name of the parameter
 * @param {string} [location] - The location *(`in`)* of the parameter *(Used for disambiguation)*
 *
 * @returns {module:Sway~Parameter} The `Parameter` matching the location and name combination or `undefined` if there is
 *                                  no match
 */
Operation.prototype.getParameter = function (name, location) {
  return _.find(this.parameterObjects, function (parameterObject) {
    return parameterObject.name === name && (_.isUndefined(location) ? true : parameterObject.in === location);
  });
};

/**
 * Returns all parameters for the operation.
 *
 * @returns {module:Sway~Parameter[]} All `Parameter` objects for the operation
 */
Operation.prototype.getParameters = function () {
  return this.parameterObjects;
};

/**
 * Returns the response for the requested status code or the default response *(if available)* if none is provided.
 *
 * @param {number|string} [statusCode='default'] - The status code
 *
 * @returns {module:Sway~Response} The `Response` or `undefined` if one cannot be found
 */
Operation.prototype.getResponse = function (statusCode) {
  if (_.isUndefined(statusCode)) {
    statusCode = 'default';
  } else if (_.isNumber(statusCode)) {
    statusCode = statusCode.toString();
  }

  return _.find(this.getResponses(), function (responseObject) {
    return responseObject.statusCode === statusCode;
  });
};

/**
 * Returns all responses for the operation.
 *
 * @returns {module:Sway~Response[]} All `Response` objects for the operation
 */
Operation.prototype.getResponses = function () {
  return this.responseObjects;
};

/**
 * Returns the composite security definitions for this operation.
 *
 * The difference between this API and `this.security` is that `this.security` is the raw `security` value for the
 * operation where as this API will return the global `security` value when available and this operation's security
 * is undefined.
 *
 * @returns {object[]} The security for this operation
 */
Operation.prototype.getSecurity = function () {
  return this.definitionFullyResolved.security || this.pathObject.api.definitionFullyResolved.security;
};

/**
 * Validates the request.
 *
 * **Note:** Below is the list of `req` properties used *(req should be an `http.ClientRequest` or equivalent)*:
 *
 *   * `body`: Used for `body` and `formData` parameters
 *   * `files`: Used for `formData` parameters whose `type` is `file`
 *   * `headers`: Used for `header` parameters and consumes
 *   * `originalUrl`: used for `path` parameters
 *   * `query`: Used for `query` parameters
 *   * `url`: used for `path` parameters
 *
 * For `path` parameters, we will use the operation's `regexp` property to parse out path parameters using the
 * `originalUrl` or `url` property.
 *
 * *(See: {@link https://nodejs.org/api/http.html#http_class_http_clientrequest})*
 *
 * @param {object} req - The http client request *(or equivalent)*
 *
 * @returns {module:Sway~ValidationResults} The validation results
 */
Operation.prototype.validateRequest = function (req) {
  var results = {
    errors: [],
    warnings: []
  };

  // Validate the Content-Type if there is a set of expected consumes
  if (this.consumes.length > 0) {
    helpers.validateContentType(helpers.getContentType(req.headers), this.consumes, results);
  }

  // Validate the parameters
  _.each(this.getParameters(), function (param) {
    var paramValue = param.getValue(req);
    var vErr;

    if (!paramValue.valid) {
      vErr = {
        code: 'INVALID_REQUEST_PARAMETER',
        errors: paramValue.error.errors || [{
          code: paramValue.error.code,
          message: paramValue.error.message,
          path: paramValue.error.path
        }],
        in: paramValue.parameterObject.in,
        // Report the actual error if there is only one error.  Otherwise, report a JSON Schema validation error.
        message: 'Invalid parameter (' + param.name + '): ' + ((paramValue.errors || []).length > 1 ? 'Value failed JSON Schema validation' : paramValue.error.message),
        name: paramValue.parameterObject.name,
        path: paramValue.error.path
      };

      results.errors.push(vErr);
    }
  });

  return results;
};

/**
 * Validates the response.
 *
 * @param {module:Sway~ServerResponseWrapper} res - The response or response like object
 *
 * @returns {module:Sway~ValidationResults} The validation results
 */
Operation.prototype.validateResponse = function (res) {
  var results = {
    errors: [],
    warnings: []
  };
  var realStatusCode = res ? res.statusCode : 'default';
  var response = this.getResponse(realStatusCode);

  if (_.isUndefined(response)) {
    // If there is no response for the requested status, use the default if there is one (This is Swagger's approach)
    response = this.getResponse('default');

    if (_.isUndefined(response)) {
      results.errors.push({
        code: 'INVALID_RESPONSE_CODE',
        message: 'This operation does not have a defined \'' + (realStatusCode === 'default' ? realStatusCode : realStatusCode + '\' or \'default') + '\' response code',
        path: []
      });
    }
  } else {
    results = response.validateResponse(res);
  }

  return results;
};

module.exports = Operation;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../helpers":2,"./parameter":6,"./response":8}],5:[function(require,module,exports){
(function (global){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _ = typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null;
var helpers = require('../helpers');
var JsonRefs = typeof window !== "undefined" ? window['JsonRefs'] : typeof global !== "undefined" ? global['JsonRefs'] : null;

/**
 * Object representing a parameter value.
 *
 * **Note:** Do not use directly.
 *
 * @param {module:Sway~Parameter} parameterObject - The `Parameter` object
 * @param {*} raw - The original/raw value
 *
 * @property {Error} error - The error(s) encountered during processing/validating the parameter value
 * @property {module:Sway~Parameter} parameterObject - The `Parameter` object
 * @property {*} raw - The original parameter value *(Does not take default values into account)*
 * @property {boolean} valid - Whether or not this parameter is valid based on its JSON Schema
 * @property {*} value - The processed value *(Takes default values into account and does type coercion when necessary
 *                       and possible)*.  This can the original value in the event that processing the value is
 *                       impossible *(missing schema type)* or `undefined` if processing the value failed *(invalid
 *                       types, etc.)*.
 *
 * @constructor
 */
function ParameterValue(parameterObject, raw) {
  var pPath = JsonRefs.pathFromPtr(parameterObject.ptr);
  var processed = false;
  var schema = parameterObject.schema;
  var error;
  var isValid;
  var processedValue;

  this.parameterObject = parameterObject;
  this.raw = raw;

  // Use Object.defineProperty for 'value' to allow for lazy processing of the raw value
  Object.defineProperties(this, {
    error: {
      enumerable: true,
      get: function get() {
        // Always call this.valid to ensure we validate the value prior to returning any values
        if (this.valid === true) {
          return undefined;
        } else {
          return error;
        }
      }
    },
    valid: {
      enumerable: true,
      get: function get() {
        var result = {
          errors: [],
          warnings: []
        };
        var skipValidation = false;
        var value;
        var vError;

        if (_.isUndefined(isValid)) {
          isValid = true;
          value = this.value;

          if (_.isUndefined(error)) {
            try {
              // Validate requiredness
              if (parameterObject.required === true && _.isUndefined(value)) {
                vError = new Error('Value is required but was not provided');

                vError.code = 'REQUIRED';

                throw vError;
              }

              // Cases we do not want to do schema validation:
              //
              //   * The schema explicitly allows empty values and the value is empty
              //   * The schema allow optional values and the value is undefined
              //   * The schema defines a file parameter
              //   * The schema is for a string type with date/date-time format and the value is a date
              //   * The schema is for a string type and the value is a Buffer
              if ((_.isUndefined(parameterObject.required) || parameterObject.required === false) && _.isUndefined(value)) {
                skipValidation = true;
              } else if (schema.allowEmptyValue === true && value === '') {
                skipValidation = true;
              } else if (parameterObject.type === 'file') {
                skipValidation = true;
              } else if (schema.type === 'string') {
                if (['date', 'date-time'].indexOf(schema.format) > -1 && _.isDate(value)) {
                  skipValidation = true;
                } else if (schema.type === 'string' && _.isFunction(value.readUInt8)) {
                  skipValidation = true;
                }
              }

              if (!skipValidation) {
                // Validate against JSON Schema
                result = helpers.validateAgainstSchema(helpers.getJSONSchemaValidator(), parameterObject.schema, value);
              }

              if (result.errors.length > 0) {
                vError = new Error('Value failed JSON Schema validation');

                vError.code = 'SCHEMA_VALIDATION_FAILED';
                vError.errors = result.errors;

                throw vError;
              }
            } catch (err) {
              err.failedValidation = true;
              err.path = pPath;

              error = err;
              isValid = false;
            }
          } else {
            isValid = false;
          }
        }

        return isValid;
      }
    },
    value: {
      enumerable: true,
      get: function get() {
        if (!processed) {
          if (schema.type === 'file') {
            processedValue = raw;
          } else {
            // Convert/Coerce the raw value from the request object
            try {
              processedValue = helpers.convertValue(schema, {
                collectionFormat: parameterObject.collectionFormat
              }, raw);
            } catch (err) {
              error = err;
            }

            // If there is still no value and there are no errors, use the default value if available (no coercion)
            if (_.isUndefined(processedValue) && _.isUndefined(error)) {
              if (schema.type === 'array') {
                if (_.isArray(schema.items)) {
                  processedValue = _.reduce(schema.items, function (items, item) {
                    items.push(item.default);

                    return items;
                  }, []);

                  // If none of the items have a default value reset the processed value to 'undefined'
                  if (_.every(processedValue, _.isUndefined)) {
                    processedValue = undefined;
                  }
                } else {
                  if (!_.isUndefined(schema.items) && !_.isUndefined(schema.items.default)) {
                    processedValue = [schema.items.default];
                  }
                }
              }

              // If the processed value is still undefined and if there's a global default set
              // for the array, we use it
              if (_.isUndefined(processedValue) && !_.isUndefined(schema.default)) {
                processedValue = schema.default;
              }
            }
          }

          processed = true;
        }

        return processedValue;
      }
    }
  });
}

module.exports = ParameterValue;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../helpers":2}],6:[function(require,module,exports){
(function (global){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _ = typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null;
var helpers = require('../helpers');
var JsonRefs = typeof window !== "undefined" ? window['JsonRefs'] : typeof global !== "undefined" ? global['JsonRefs'] : null;
var ParameterValue = require('./parameter-value');
var parseUrl = require('url').parse;

/**
 * The Swagger Parameter object.
 *
 * **Note:** Do not use directly.
 *
 * **Extra Properties:** Other than the documented properties, this object also exposes all properties of the definition
 * object.
 *
 * @param {module:Sway~Operation|module:Sway~Path} opOrPathObject - The `Operation` or `Path` object
 * @param {object} definition - The parameter definition *(The raw parameter definition __after__ remote references were
 *                              resolved)*
 * @param {object} definitionFullyResolved - The parameter definition with all of its resolvable references resolved
 * @param {string[]} pathToDefinition - The path segments to the parameter definition
 *
 * @property {object} definition - The parameter definition *(The raw parameter definition __after__ remote references
 *                                 were resolved)*
 * @property {object} definitionFullyResolved - The parameter definition with all of its resolvable references resolved
 * @property {module:Sway~Operation} operationObject - The `Operation` object the parameter belongs to *(Can be
 *                                                     `undefined` for path-level parameters)*
 * @property {module:Sway~Path} pathObject - The `Path` object the parameter belongs to
 * @property {string[]} pathToDefinition - The path segments to the parameter definition
 * @property {string} ptr - The JSON Pointer to the parameter definition
 * @property {object} schema - The JSON Schema for the parameter *(For non-body parameters, this is a computed value)*
 *
 * @constructor
 */
function Parameter(opOrPathObject, definition, definitionFullyResolved, pathToDefinition) {
  // Assign local properties
  this.definition = definition;
  this.definitionFullyResolved = definitionFullyResolved;
  this.pathToDefinition = pathToDefinition;
  this.ptr = JsonRefs.pathToPtr(pathToDefinition);

  if (_.has(opOrPathObject, 'consumes')) {
    this.operationObject = opOrPathObject;
    this.pathObject = opOrPathObject.pathObject;
  } else {
    this.operationObject = undefined;
    this.pathObject = opOrPathObject;
  }

  // Assign local properties from the Swagger definition properties
  _.assign(this, definitionFullyResolved);

  if (_.isUndefined(this.schema)) {
    this.schema = helpers.computeParameterSchema(definitionFullyResolved);
  }

  this.pathObject.api._debug('          %s%s (in: %s) at %s', _.isUndefined(this.operationObject) ? '' : '  ', definitionFullyResolved.name, definitionFullyResolved.in, this.ptr);
}

/**
 * Returns a sample value for the parameter based on its schema;
 *
 * @returns {*} The sample value
 */
Parameter.prototype.getSample = function () {
  return helpers.getJSONSchemaMocker()(this.schema);
};

/**
 * Returns the parameter value from the request.
 *
 * **Note:** Below is the list of `req` properties used *(req should be an `http.ClientRequest` or equivalent)*:
 *
 *   * `body`: Used for `body` and `formData` parameters
 *   * `files`: Used for `formData` parameters whose `type` is `file`
 *   * `headers`: Used for `header` parameters
 *   * `originalUrl`: used for `path` parameters
 *   * `query`: Used for `query` parameters
 *   * `url`: used for `path` parameters
 *
 * For `path` parameters, we will use the operation's `regexp` property to parse out path parameters using the
 * `originalUrl` or `url` property.
 *
 * *(See: {@link https://nodejs.org/api/http.html#http_class_http_clientrequest})*
 *
 * @param {object} req - The http client request *(or equivalent)*
 *
 * @returns {module:Sway~ParameterValue} The parameter value object
 *
 * @throws {Error} If the `in` value of the parameter's schema is not valid or if the `req` property to retrieve the parameter is missing
 */
Parameter.prototype.getValue = function (req) {
  if (_.isUndefined(req)) {
    throw new TypeError('req is required');
  } else if (helpers.parameterLocations.indexOf(this.in) === -1) {
    throw new Error('Invalid \'in\' value: ' + this.in);
  }

  // We do not need to explicitly check the type of req

  var that = this;
  var type = this.schema.type;
  var pathMatch;
  var value;

  switch (this.in) {
    case 'body':
      value = req.body;
      break;
    case 'formData':
      // For formData, either the value is a file or a property of req.body.  req.body as a whole can never be the
      // value since the JSON Schema for formData parameters does not allow a type of 'object'.
      if (type === 'file') {
        if (_.isUndefined(req.files)) {
          if (this.required) {
            throw new Error('req.files must be provided for \'formData\' parameters of type \'file\'');
          } else {
            break;
          }
        }

        value = req.files[this.name];
      } else {
        if (_.isUndefined(req.body)) {
          if (this.required) {
            throw new Error('req.body must be provided for \'formData\' parameters');
          } else {
            break;
          }
        }
        value = req.body[this.name];
      }
      break;
    case 'header':
      if (_.isUndefined(req.headers)) {
        if (this.required) {
          throw new Error('req.headers must be provided for \'header\' parameters');
        } else {
          break;
        }
      }

      value = helpers.getHeaderValue(req.headers, this.name);
      break;
    case 'path':
      if (_.isUndefined(req.originalUrl) && _.isUndefined(req.url)) {
        throw new Error('req.originalUrl or req.url must be provided for \'path\' parameters');
      }

      pathMatch = this.pathObject.regexp.exec(parseUrl(req.originalUrl || req.url).pathname);

      if (pathMatch) {
        // decode URI component here to avoid issues with encoded slashes
        value = decodeURIComponent(pathMatch[_.findIndex(this.pathObject.regexp.keys, function (key) {
          return key.name === that.name;
        }) + 1]);
      }
      break;
    case 'query':
      if (_.isUndefined(req.query)) {
        if (this.required) {
          throw new Error('req.query must be provided for \'query\' parameters');
        } else {
          break;
        }
      }

      value = _.get(req.query, this.name);

      break;

    // no default
  }

  return new ParameterValue(this, value);
};

module.exports = Parameter;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../helpers":2,"./parameter-value":5,"url":248}],7:[function(require,module,exports){
(function (global){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _ = typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null;
var JsonRefs = typeof window !== "undefined" ? window['JsonRefs'] : typeof global !== "undefined" ? global['JsonRefs'] : null;
var Operation = require('./operation');
var Parameter = require('./parameter');
var pathToRegexp = require('path-to-regexp');
var supportedHttpMethods = require('swagger-methods');

/**
 * The Path object.
 *
 * **Note:** Do not use directly.
 *
 * **Extra Properties:** Other than the documented properties, this object also exposes all properties of the
 *                       definition object.
 *
 * @param {module:Sway~SwaggerApi} api - The `SwaggerApi` object
 * @param {string} path - The path string
 * @param {object} definition - The path definition *(The raw path definition __after__ remote references were
 *                              resolved)*
 * @param {object} definitionFullyResolved - The path definition with all of its resolvable references resolved
 * @param {string[]} pathToDefinition - The path segments to the path definition
 *
 * @property {module:Sway~SwaggerApi} api - The `SwaggerApi` object
 * @property {object} definition - The path definition *(The raw path definition __after__ remote references were
 *                                 resolved)*
 * @property {object} definitionFullyResolved - The path definition with all of its resolvable references resolved
 * @property {module:Sway~Operation[]} operationObjects - The `Operation` objects
 * @property {module:Sway~Parameter[]} parameterObjects - The path-level `Parameter` objects
 * @property {string} path - The path string
 * @property {string[]} pathToDefinition - The path segments to the path definition
 * @property {ptr} ptr - The JSON Pointer to the path
 * @property {regexp} regexp - The `RegExp` used to match request paths against this path
 *
 * @constructor
 */
function Path(api, path, definition, definitionFullyResolved, pathToDefinition) {
  var basePathPrefix = api.definitionFullyResolved.basePath || '/';
  var that = this;

  // TODO: We could/should refactor this to use the path module

  // Remove trailing slash from the basePathPrefix so we do not end up with double slashes
  if (basePathPrefix.charAt(basePathPrefix.length - 1) === '/') {
    basePathPrefix = basePathPrefix.substring(0, basePathPrefix.length - 1);
  }

  // Assign local properties
  this.api = api;
  this.definition = definition;
  this.definitionFullyResolved = definitionFullyResolved;
  this.path = path;
  this.pathToDefinition = pathToDefinition;
  this.ptr = JsonRefs.pathToPtr(pathToDefinition);
  this.regexp = pathToRegexp(basePathPrefix + path.replace(/\{/g, ':').replace(/\}/g, ''), { sensitive: true });

  // Assign local properties from the Swagger definition properties
  _.assign(this, definitionFullyResolved);

  this._debug = this.api._debug;

  this._debug('    %s', this.path);

  this.parameterObjects = _.map(definitionFullyResolved.parameters, function (paramDef, index) {
    var pPath = pathToDefinition.concat(['parameters', index.toString()]);

    return new Parameter(that, _.get(api.definitionRemotesResolved, pPath), paramDef, pPath);
  });

  this._debug('      Operations:');

  this.operationObjects = _.reduce(definitionFullyResolved, function (operations, operationDef, method) {
    var oPath = pathToDefinition.concat(method);

    if (supportedHttpMethods.indexOf(method) > -1) {
      operations.push(new Operation(that, method, _.get(api.definitionRemotesResolved, oPath), operationDef, oPath));
    }

    return operations;
  }, []);
}

/**
 * Return the operation for this path and operation id or method.
 *
 * @param {string} idOrMethod - The operation id or method
 *
 * @returns {module:Sway~Operation[]} The `Operation` objects for this path and method or `undefined` if there is no
 *                                    operation for the provided method
 */
Path.prototype.getOperation = function (idOrMethod) {
  return _.find(this.operationObjects, function (operationObject) {
    return operationObject.operationId === idOrMethod || operationObject.method === idOrMethod.toLowerCase();
  });
};

/**
 * Return the operations for this path.
 *
 * @returns {module:Sway~Operation[]} The `Operation` objects for this path
 */
Path.prototype.getOperations = function () {
  return this.operationObjects;
};

/**
 * Return the operations for this path and tag.
 *
 * @param {string} tag - The tag
 *
 * @returns {module:Sway~Operation[]} The `Operation` objects for this path and tag
 */
Path.prototype.getOperationsByTag = function (tag) {
  return _.filter(this.operationObjects, function (operationObject) {
    return _.includes(operationObject.tags, tag);
  });
};

/**
 * Return the parameters for this path.
 *
 * @returns {module:Sway~Parameter[]} The `Parameter` objects for this path
 */
Path.prototype.getParameters = function () {
  return this.parameterObjects;
};

module.exports = Path;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./operation":4,"./parameter":6,"path-to-regexp":215,"swagger-methods":243}],8:[function(require,module,exports){
(function (global){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _ = typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null;
var helpers = require('../helpers');
var jsonValidator = helpers.getJSONSchemaValidator();
var JsonRefs = typeof window !== "undefined" ? window['JsonRefs'] : typeof global !== "undefined" ? global['JsonRefs'] : null;
var YAML = typeof window !== "undefined" ? window['jsyaml'] : typeof global !== "undefined" ? global['jsyaml'] : null;

/**
 * The Swagger Response object.
 *
 * **Note:** Do not use directly.
 *
 * **Extra Properties:** Other than the documented properties, this object also exposes all properties of the
 *                       definition object.
 *
 * @param {module:Sway~Operation} operationObject - The `Operation` object
 * @param {string} statusCode - The status code
 * @param {object} definition - The response definition *(The raw response definition __after__ remote references were
 *                              resolved)*
 * @param {object} definitionFullyResolved - The response definition with all of its resolvable references resolved
 * @param {string[]} pathToDefinition - The path segments to the path definition
 *
 * @property {object} definition - The response definition *(The raw responsedefinition __after__ remote references were
 *                                 resolved)*
 * @property {object} definitionFullyResolved - The response definition with all of its resolvable references resolved
 * @property {module:Sway~Operation} operationObject - The Operation object
 * @property {string[]} pathToDefinition - The path segments to the path definition
 * @property {string} ptr - The JSON Pointer to the response definition
 * @property {string} statusCode - The status code
 *
 * @constructor
 */
function Response(operationObject, statusCode, definition, definitionFullyResolved, pathToDefinition) {
  // Assign local properties
  this.definition = definition;
  this.definitionFullyResolved = definitionFullyResolved;
  this.operationObject = operationObject;
  this.pathToDefinition = pathToDefinition;
  this.ptr = JsonRefs.pathToPtr(pathToDefinition);
  this.statusCode = statusCode;

  // Assign local properties from the Swagger definition properties
  _.assign(this, definitionFullyResolved);

  this.operationObject.pathObject.api._debug('            %s at %s', statusCode, this.ptr);
}

/**
 * Returns the response example for the mime-type.
 *
 * @param {string} [mimeType] - The mime type
 *
 * @returns {string} The response example as a string or `undefined` if the response code and/or mime-type is missing
 */
Response.prototype.getExample = function (mimeType) {
  var example;

  if (_.isPlainObject(this.definitionFullyResolved.examples)) {
    example = this.definitionFullyResolved.examples[mimeType];
  }

  if (!_.isUndefined(example) && !_.isString(example)) {
    if (mimeType === 'application/json') {
      example = JSON.stringify(example, null, 2);
    } else if (mimeType === 'application/x-yaml') {
      example = YAML.safeDump(example, { indent: 2 });
    }
  }

  return example;
};

/**
 * Returns a sample value.
 *
 * @returns {*} The sample value for the response, which can be undefined if the response schema is not provided
 */
Response.prototype.getSample = function () {
  var sample;

  if (!_.isUndefined(this.definitionFullyResolved.schema)) {
    sample = helpers.getJSONSchemaMocker()(this.definitionFullyResolved.schema);
  }

  return sample;
};

/**
 * Validates the response.
 *
 * @param {module:Sway~ServerResponseWrapper} res - The response or response like object
 *
 * @returns {module:Sway~ValidationResults} The validation results
 */
Response.prototype.validateResponse = function (res) {
  var results = {
    errors: [],
    warnings: []
  };
  var bodyValue;
  var bvResults;

  // Set some default just in case
  if (_.isUndefined(res)) {
    res = {};
  }

  if (_.isUndefined(res.headers)) {
    res.headers = {};
  }

  // Validate the Content-Type except for void responses, 204 responses and 304 responses as they have no body
  if (!_.isUndefined(this.definitionFullyResolved.schema) && _.indexOf(['204', '304'], this.statusCode) === -1) {
    helpers.validateContentType(helpers.getContentType(res.headers), this.operationObject.produces, results);
  }

  // Validate the response headers
  _.forEach(this.headers, function (schema, name) {
    var headerValue;
    var hvResults;

    try {
      headerValue = helpers.convertValue(schema, {
        collectionFormat: schema.collectionFormat
      },
      // Overly cautious
      res.headers[name.toLowerCase()] || res.headers[name] || schema.default);
    } catch (err) {
      results.errors.push({
        code: 'INVALID_RESPONSE_HEADER',
        errors: err.errors || [{
          code: err.code,
          message: err.message,
          path: err.path
        }],
        message: 'Invalid header (' + name + '): ' + err.message,
        name: name,
        path: err.path
      });
    }

    // Due to ambiguity in the Swagger 2.0 Specification (https://github.com/swagger-api/swagger-spec/issues/321), it
    // is probably not a good idea to do requiredness checks for response headers.  This means we will validate
    // existing headers but will not throw an error if a header is defined in a response schema but not in the response.
    //
    // We also do not want to validate date objects because it is redundant.  If we have already converted the value
    // from a string+format to a date, we know it passes schema validation.
    if (!_.isUndefined(headerValue) && !_.isDate(headerValue)) {
      hvResults = helpers.validateAgainstSchema(jsonValidator, schema, headerValue);

      if (hvResults.errors.length > 0) {
        results.errors.push({
          code: 'INVALID_RESPONSE_HEADER',
          errors: hvResults.errors,
          // Report the actual error if there is only one error.  Otherwise, report a JSON Schema
          // validation error.
          message: 'Invalid header (' + name + '): ' + (hvResults.errors.length > 1 ? 'Value failed JSON Schema validation' : hvResults.errors[0].message),
          name: name,
          path: []
        });
      }
    }
  });

  // Validate response for non-void responses
  if (!_.isUndefined(this.definitionFullyResolved.schema) && _.indexOf(['204', '304'], this.statusCode) === -1) {
    try {
      bodyValue = helpers.convertValue(this.definitionFullyResolved.schema, {
        encoding: res.encoding
      }, res.body);
      bvResults = helpers.validateAgainstSchema(jsonValidator, this.definitionFullyResolved.schema, bodyValue);
    } catch (err) {
      bvResults = {
        errors: [{
          code: err.code,
          message: err.message,
          path: err.path
        }]
      };
    }

    if (bvResults.errors.length > 0) {
      results.errors.push({
        code: 'INVALID_RESPONSE_BODY',
        errors: bvResults.errors,
        message: 'Invalid body: ' + (bvResults.errors.length > 1 ? 'Value failed JSON Schema validation' : bvResults.errors[0].message),
        path: []
      });
    }
  }

  return results;
};

module.exports = Response;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../helpers":2}],9:[function(require,module,exports){
(function (global){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _ = typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null;
var Base64 = typeof window !== "undefined" ? window['Base64'] : typeof global !== "undefined" ? global['Base64'] : null;

// Due to the differences in how node.js and the browser use js-base64, we need this hack
if (typeof Base64.Base64 !== 'undefined') {
  Base64 = Base64.Base64;
}

/**
 * We have to filter the schema to avoid a maximum callstack issue by deleting the format property.
 *
 * @param {object} schema - The JSON Schema object
 *
 * @returns {object} The filtered schema
 */
function filterSchema(schema) {
  var cSchema = _.cloneDeep(schema);

  delete cSchema.format;

  return cSchema;
}

// Build the list of custom JSON Schema generator formats
module.exports.byte = function (mocker) {
  return function (schema) {
    return Base64.encode(mocker(filterSchema(schema)));
  };
};

module.exports.password = function (mocker) {
  return function (schema) {
    return mocker(filterSchema(schema));
  };
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],10:[function(require,module,exports){
(function (global){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _ = typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null;

function returnTrue() {
  return true;
}

module.exports.int32 = module.exports.int64 = function (val) {
  // z-schema seems to continue processing the format even when the type is known to be invalid so we must do a type
  // check prior to validating this format.
  return _.isNumber(val) && val % 1 === 0;
};

// These format validators will always return 'true' because they are already type valid and there are no constraints
// on the format that would produce an invalid value.
module.exports.byte = returnTrue;
module.exports.double = returnTrue;
module.exports.float = returnTrue;
module.exports.password = returnTrue;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],11:[function(require,module,exports){
(function (global){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _ = typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null;
var helpers = require('../helpers');
var JsonRefs = typeof window !== "undefined" ? window['JsonRefs'] : typeof global !== "undefined" ? global['JsonRefs'] : null;
var supportedHttpMethods = require('swagger-methods');
var swaggerSchema = require('swagger-schema-official/schema');

function getSchemaProperties(schema) {
  var properties = _.keys(schema.properties); // Start with the defined properties

  // Add properties defined in the parent
  _.forEach(schema.allOf, function (parent) {
    _.forEach(getSchemaProperties(parent), function (property) {
      if (_.indexOf(properties, property) === -1) {
        properties.push(property);
      }
    });
  });

  return properties;
}

function walkSchema(api, blacklist, schema, path, handlers, response) {
  var type = schema.type || 'object';

  function shouldSkip(cPath) {
    return _.indexOf(blacklist, JsonRefs.pathToPtr(cPath)) > -1;
  }

  // Do not process items in the blacklist as they've been processed already
  if (shouldSkip(path)) {
    return;
  }

  function walker(pSchema, pPath) {
    // Do not process items in the blacklist as they've been processed already
    if (shouldSkip(pPath)) {
      return;
    }

    _.forEach(pSchema, function (item, name) {
      if (_.isNumber(name)) {
        name = name.toString();
      }

      walkSchema(api, blacklist, item, pPath.concat(name), handlers, response);
    });
  }

  if (!_.isUndefined(schema.schema)) {
    walkSchema(api, blacklist, schema.schema, path.concat('schema'), handlers, response);
  } else if (type === 'array' && !_.isUndefined(schema.items)) {
    if (_.isArray(schema.items)) {
      walker(schema.items, path.concat('items'));
    } else {
      walkSchema(api, blacklist, schema.items, path.concat('items'), handlers, response);
    }
  } else if (type === 'object') {
    if (!_.isUndefined(schema.additionalProperties)) {
      walkSchema(api, blacklist, schema.additionalProperties, path.concat('additionalProperties'), handlers, response);
    }

    _.forEach(['allOf', 'properties'], function (propName) {
      if (!_.isUndefined(schema[propName])) {
        walker(schema[propName], path.concat(propName));
      }
    });
  }

  _.forEach(handlers, function (handler) {
    handler(api, response, schema, path);
  });
}

/**
 * Validates the resolved Swagger document against the Swagger 2.0 JSON Schema.
 *
 * @param {SwaggerApi} api - The SwaggerApi object
 *
 * @returns {object} Object containing the errors and warnings of the validation
 */
function validateStructure(api) {
  var results = helpers.validateAgainstSchema(helpers.getJSONSchemaValidator(), swaggerSchema, api.definitionFullyResolved);

  // Make complex JSON Schema validation errors easier to understand (Issue 15)
  results.errors = results.errors.map(function (error) {
    var defType = ['additionalProperties', 'items'].indexOf(error.path[error.path.length - 1]) > -1 ? 'schema' : error.path[error.path.length - 2];

    if (['ANY_OF_MISSING', 'ONE_OF_MISSING'].indexOf(error.code) > -1) {
      switch (defType) {
        case 'parameters':
          defType = 'parameter';
          break;

        case 'responses':
          defType = 'response';
          break;

        case 'schema':
          defType += ' ' + error.path[error.path.length - 1];

        // no default
      }

      error.message = 'Not a valid ' + defType + ' definition';
    }

    return error;
  });

  // Treat invalid/missing references as structural errors
  _.each(api.references, function (refDetails, refPtr) {
    var refPath = JsonRefs.pathFromPtr(refPtr);
    var err;

    if (refDetails.missing) {
      err = {
        code: 'UNRESOLVABLE_REFERENCE',
        message: 'Reference could not be resolved: ' + refDetails.uri,
        path: refPath.concat('$ref')
      };

      if (_.has(refDetails, 'error')) {
        err.error = refDetails.error;
      }

      results.errors.push(err);
    } else if (refDetails.type === 'invalid') {
      results.errors.push({
        code: 'INVALID_REFERENCE',
        message: refDetails.error || 'Invalid JSON Reference',
        path: refPath.concat('$ref')
      });
    } else if (_.has(refDetails, 'warning')) {
      // json-refs only creates warnings for JSON References with superfluous properties which will be ignored
      results.warnings.push({
        code: 'EXTRA_REFERENCE_PROPERTIES',
        message: refDetails.warning,
        path: refPath
      });
    }
  });

  return results;
}

/* Schema Object Validators */

function validateArrayTypeItemsExistence(api, response, schema, path) {
  if (schema.type === 'array' && _.isUndefined(schema.items)) {
    response.errors.push({
      code: 'OBJECT_MISSING_REQUIRED_PROPERTY',
      message: 'Missing required property: items',
      path: path
    });
  }
}

function validateDefaultValue(api, response, schema, path) {
  var result;

  if (!_.isUndefined(schema.default)) {
    result = helpers.validateAgainstSchema(helpers.getJSONSchemaValidator(), schema, schema.default);

    _.forEach(result.errors, function (error) {
      error.path = path.concat(error.path.concat('default'));

      response.errors.push(error);
    });

    _.forEach(result.warnings, function (warning) {
      warning.path = path.concat(warning.path.push('default'));

      response.warnings.push(warning);
    });
  }
}

function validateSchemaProperties(api, response, schema, path) {
  _.forEach(_.difference(schema.required || [], getSchemaProperties(schema)), function (name) {
    response.errors.push({
      code: 'OBJECT_MISSING_REQUIRED_PROPERTY_DEFINITION',
      message: 'Missing required property definition: ' + name,
      path: path
    });
  });
}

/**
 * Validates all references.
 *
 * * Identifies circular inheritance references
 * * Identifies unreferenced referenceable definitions
 * * Identifies unresolvable references
 *
 * @param {SwaggerApi} api - The SwaggerApi object
 *
 * @returns {object} Object containing the errors and warnings of the validation
 */
function validateReferences(api) {
  var inheritanceDetails = {};
  var referenceable = [];
  var references = {};
  var response = {
    errors: [],
    warnings: []
  };

  function addAncestor(dsc, anc) {
    if (!_.has(inheritanceDetails, dsc)) {
      inheritanceDetails[dsc] = {
        lineage: [],
        parents: [anc]
      };
    } else {
      inheritanceDetails[dsc].parents.push(anc);
    }
  }

  function addReference(ref, ptr) {
    if (_.indexOf(references, ref) === -1) {
      if (_.isUndefined(references[ref])) {
        references[ref] = [];
      }

      // Add references to ancestors
      if (ref.indexOf('allOf') > -1) {
        addReference(ref.substring(0, ref.lastIndexOf('/allOf')));
      }

      references[ref].push(ptr);
    }
  }

  function createSecurityProcessor(path) {
    return function (security, index) {
      _.forEach(security, function (scopes, name) {
        var sdPath = ['securityDefinitions', name];
        var sdPtr = JsonRefs.pathToPtr(sdPath);
        var srPath = path.concat([index.toString(), name]);

        // Identify missing reference to the security definition
        if (_.indexOf(referenceable, sdPtr) === -1) {
          response.errors.push({
            code: 'UNRESOLVABLE_REFERENCE',
            message: 'Security definition could not be resolved: ' + name,
            path: srPath
          });
        } else {
          addReference(sdPtr, JsonRefs.pathToPtr(srPath));

          _.forEach(scopes, function (scope, sIndex) {
            var ssrPath = srPath.concat(sIndex.toString());
            var ssrPtr = JsonRefs.pathToPtr(sdPath.concat(['scopes', scope]));

            if (_.indexOf(referenceable, ssrPtr) === -1) {
              response.errors.push({
                code: 'UNRESOLVABLE_REFERENCE',
                message: 'Security scope definition could not be resolved: ' + scope,
                path: ssrPath
              });
            } else {
              addReference(JsonRefs.pathToPtr(sdPath.concat(['scopes', scope])), ssrPtr);
            }
          });
        }
      });
    };
  }

  function walkLineage(root, id, lineage) {
    var details = inheritanceDetails[id || root];

    if (details) {
      _.each(details.parents, function (parent) {
        lineage.push(parent);

        if (root !== parent) {
          walkLineage(root, parent, lineage);
        }
      });
    }
  }

  // Identify referenceable definitions
  _.forEach(api.definitionFullyResolved.definitions, function (def, name) {
    referenceable.push(JsonRefs.pathToPtr(['definitions', name]));
  });

  _.forEach(api.definitionFullyResolved.parameters, function (def, name) {
    referenceable.push(JsonRefs.pathToPtr(['parameters', name]));
  });

  _.forEach(api.definitionFullyResolved.responses, function (def, name) {
    referenceable.push(JsonRefs.pathToPtr(['responses', name]));
  });

  _.forEach(api.definitionFullyResolved.securityDefinitions, function (def, name) {
    var sPath = ['securityDefinitions', name];

    referenceable.push(JsonRefs.pathToPtr(sPath));

    _.forEach(def.scopes, function (description, scope) {
      var ptr = JsonRefs.pathToPtr(sPath.concat(['scopes', scope]));

      if (_.indexOf(referenceable, ptr) === -1) {
        referenceable.push(ptr);
      }
    });
  });

  // Identify references and build inheritance model
  _.forEach(api.references, function (metadata, ptr) {
    var ptrPath = JsonRefs.pathFromPtr(ptr);

    if (!_.has(metadata, 'missing')) {
      addReference(metadata.uri, ptr);

      if (ptrPath[ptrPath.length - 2] === 'allOf') {
        addAncestor(JsonRefs.pathToPtr(ptrPath.slice(0, ptrPath.length - 2)), metadata.uri);
      }
    }
  });

  // Identify circular inheritance
  _.forEach(inheritanceDetails, function (details, ptr) {
    walkLineage(ptr, undefined, details.lineage);

    if (details.lineage.length > 1 && details.lineage[details.lineage.length - 1] === ptr || details.parents[0] === ptr) {
      response.errors.push({
        code: 'CIRCULAR_INHERITANCE',
        lineage: [ptr].concat(details.lineage),
        message: 'Schema object inherits from itself: ' + ptr,
        path: JsonRefs.pathFromPtr(ptr)
      });
    }
  });

  // Identify references and validate missing references for non-JSON References (security)
  _.forEach(api.definitionFullyResolved.security, createSecurityProcessor(['security']));

  _.forEach(api.definitionFullyResolved.paths, function (pathDef, name) {
    var pPath = ['paths', name];

    _.forEach(pathDef.security, createSecurityProcessor(pPath.concat('security')));

    _.forEach(pathDef, function (operationDef, method) {
      // Do not process non-operations
      if (_.indexOf(supportedHttpMethods, method) === -1) {
        return;
      }

      _.forEach(operationDef.security, createSecurityProcessor(pPath.concat([method, 'security'])));
    });
  });

  // Identify unused references (missing references are already handled above)
  _.forEach(_.difference(referenceable, Object.keys(references)), function (ptr) {
    response.warnings.push({
      code: 'UNUSED_DEFINITION',
      message: 'Definition is not used: ' + ptr,
      path: JsonRefs.pathFromPtr(ptr)
    });
  });

  return response;
}

/**
 * Validates all schema objects and schema-like objects (non-body path parameters).
 *
 * * Validates circular references related to composition/inheritance
 * * Validates that all array types have their required items property
 *     (@see {@link https://github.com/swagger-api/swagger-spec/issues/174})
 * * Validates that all default values are valid based on its respective schema
 *
 * @param {SwaggerApi} api - The SwaggerApi object
 *
 * @returns {object} Object containing the errors and warnings of the validation
 */
function validateSchemaObjects(api) {
  // Build a blacklist to avoid cascading errors/warnings
  var blacklist = _.reduce(api.references, function (list, metadata, ptr) {
    var refPath = JsonRefs.pathFromPtr(ptr);

    list.push(JsonRefs.pathToPtr(refPath));

    return list;
  }, []);
  var response = {
    errors: [],
    warnings: []
  };
  var validators = [validateArrayTypeItemsExistence, validateDefaultValue, validateSchemaProperties];

  function validateParameters(parameters, path) {
    _.forEach(parameters, function (parameterDef, name) {
      var pPath;

      if (_.isNumber(name)) {
        name = name.toString();
      }

      pPath = path.concat(name);

      // Create JSON Schema for non-body parameters
      if (parameterDef.in !== 'body') {
        parameterDef = helpers.computeParameterSchema(parameterDef);
      }

      walkSchema(api, blacklist, parameterDef, pPath, validators, response);
    });
  }

  function validateResponses(responses, path) {
    _.forEach(responses, function (responseDef, name) {
      var rPath = path.concat(name);

      _.forEach(responseDef.headers, function (header, hName) {
        walkSchema(api, blacklist, header, rPath.concat(['headers', hName]), validators, response);
      });

      if (!_.isUndefined(responseDef.schema)) {
        walkSchema(api, blacklist, responseDef.schema, rPath.concat('schema'), validators, response);
      }
    });
  }

  // Validate definitions
  _.forEach(api.definitionFullyResolved.definitions, function (definitionDef, name) {
    walkSchema(api, blacklist, definitionDef, ['definitions', name], validators, response);
  });

  // Validate global parameter definitions
  validateParameters(api.definitionFullyResolved.parameters, ['parameters']);

  // Validate global response definitions
  validateResponses(api.definitionFullyResolved.responses, ['responses']);

  // Validate paths and operations
  _.forEach(api.definitionFullyResolved.paths, function (pathDef, path) {
    var pPath = ['paths', path];

    // Validate path-level parameter definitions
    validateParameters(pathDef.parameters, pPath.concat('parameters'));

    _.forEach(pathDef, function (operationDef, method) {
      var oPath = pPath.concat(method);

      // Do not process non-operations
      if (_.indexOf(supportedHttpMethods, method) === -1) {
        return;
      }

      // Validate operation parameter definitions
      validateParameters(operationDef.parameters, oPath.concat('parameters'));

      // Validate operation response definitions
      validateResponses(operationDef.responses, oPath.concat('responses'));
    });
  });

  return response;
}

/**
 * Validates paths and operations (Written as one validator to avoid multiple passes)
 *
 * * Ensure that path parameters are defined for each path parameter declaration
 * * Ensure that defined path parameters match a declared path parameter
 * * Ensure that paths are functionally different
 * * Ensure that an operation only has one body parameter
 * * Ensure that an operation has only a body or formData parameter but not both
 * * Ensure that all operation parameters are unique (in + name)
 * * Ensure that all operation ids are unique
 * * Ensure that path parameters have a name
 *
 * @param {SwaggerApi} api - The SwaggerApi object
 *
 * @returns {object} Object containing the errors and warnings of the validation
 */
function validatePathsAndOperations(api) {
  var response = {
    errors: [],
    warnings: []
  };

  function validateDuplicateParameter(seenParameters, parameter, path) {
    var pName = parameter.in + ':' + parameter.name;

    // Identify duplicate parameter names
    if (_.indexOf(seenParameters, pName) > -1) {
      response.errors.push({
        code: 'DUPLICATE_PARAMETER',
        message: 'Operation cannot have duplicate parameters: ' + JsonRefs.pathToPtr(path),
        path: path
      });
    } else {
      seenParameters.push(pName);
    }

    return seenParameters;
  }

  _.reduce(api.definitionFullyResolved.paths, function (metadata, pathDef, path) {
    var declaredPathParameters = [];
    var normalizedPath = path;
    var pPath = ['paths', path];

    _.forEach(path.match(/\{(.*?)\}/g), function (arg, index) {
      // Record the path parameter name
      declaredPathParameters.push(arg.replace(/[{}]/g, ''));

      // Update the normalized path
      normalizedPath = normalizedPath.replace(arg, 'arg' + index);
    });

    // Identify paths with empty parameter declarations
    if (declaredPathParameters.indexOf('') > -1) {
      response.errors.push({
        code: 'EMPTY_PATH_PARAMETER_DECLARATION',
        message: 'Path parameter declaration cannot be empty: ' + path,
        path: ['paths', path]
      });
    }

    // Idenfity paths that are functionally the same
    if (_.indexOf(metadata.paths, normalizedPath) > -1) {
      response.errors.push({
        code: 'EQUIVALENT_PATH',
        message: 'Equivalent path already exists: ' + path,
        path: pPath
      });
    } else {
      metadata.paths.push(normalizedPath);
    }

    // Identify duplicate path-level parameters (We do this manually since SwaggerApi#getOperation consolidates them)
    _.reduce(pathDef.parameters, function (seenParameters, parameter, index) {
      return validateDuplicateParameter(seenParameters, parameter, pPath.concat(['parameters', index.toString()]));
    }, []);

    _.forEach(pathDef, function (operationDef, method) {
      var definedPathParameters = {};
      var oPath = pPath.concat(method);
      var operationId = operationDef.operationId;
      var pathMetadata;
      var parameters;

      // Do not process non-operations
      if (_.indexOf(supportedHttpMethods, method) === -1) {
        return;
      }

      // Identify duplicate operationIds
      if (!_.isUndefined(operationId)) {
        if (_.indexOf(metadata.operationIds, operationId) !== -1) {
          response.errors.push({
            code: 'DUPLICATE_OPERATIONID',
            message: 'Cannot have multiple operations with the same operationId: ' + operationId,
            path: oPath.concat(['operationId'])
          });
        } else {
          metadata.operationIds.push(operationId);
        }
      }

      // Identify duplicate operation-level parameters (We do this manually for the same reasons above)
      _.reduce(operationDef.parameters, function (seenParameters, parameter, index) {
        return validateDuplicateParameter(seenParameters, parameter, oPath.concat(['parameters', index.toString()]));
      }, []);

      // Use SwaggerApi#getOperation to avoid having to consolidate parameters
      parameters = api.getOperation(path, method).getParameters();

      pathMetadata = _.reduce(parameters, function (pMetadata, parameter) {
        // Record path parameters
        if (parameter.in === 'path') {
          definedPathParameters[parameter.name] = parameter.ptr;
        } else if (parameter.in === 'body') {
          pMetadata.bodyParameteters += 1;
        } else if (parameter.in === 'formData') {
          pMetadata.formParameters += 1;
        }

        return pMetadata;
      }, { bodyParameteters: 0, formParameters: 0 });

      // Identify multiple body parameters
      if (pathMetadata.bodyParameteters > 1) {
        response.errors.push({
          code: 'MULTIPLE_BODY_PARAMETERS',
          message: 'Operation cannot have multiple body parameters',
          path: oPath
        });
      }

      // Identify having both a body and a form parameter
      if (pathMetadata.bodyParameteters > 0 && pathMetadata.formParameters > 0) {
        response.errors.push({
          code: 'INVALID_PARAMETER_COMBINATION',
          message: 'Operation cannot have a body parameter and a formData parameter',
          path: oPath
        });
      }

      // Identify undefined path parameters
      _.forEach(_.difference(declaredPathParameters, _.keys(definedPathParameters)), function (name) {
        response.errors.push({
          code: 'MISSING_PATH_PARAMETER_DEFINITION',
          message: 'Path parameter is declared but is not defined: ' + name,
          path: oPath
        });
      });

      // Identify undeclared path parameters
      _.forEach(_.difference(_.keys(definedPathParameters), declaredPathParameters), function (name) {
        response.errors.push({
          code: 'MISSING_PATH_PARAMETER_DECLARATION',
          message: 'Path parameter is defined but is not declared: ' + name,
          path: JsonRefs.pathFromPtr(definedPathParameters[name])
        });
      });
    });

    return metadata;
  }, { paths: [], operationIds: [] });

  return response;
}

module.exports = {
  jsonSchemaValidator: validateStructure,
  semanticValidators: [validateReferences, validateSchemaObjects, validatePathsAndOperations]
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../helpers":2,"swagger-methods":243,"swagger-schema-official/schema":244}],12:[function(require,module,exports){
'use strict';

exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;

  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;

  return [validLen, placeHoldersLen];
}

// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

  var curByte = 0;

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

  for (var i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

},{}],13:[function(require,module,exports){
"use strict";

},{}],14:[function(require,module,exports){
(function (global){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function (root) {

	/** Detect free variables */
	var freeExports = (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
	var freeModule = (typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;
	var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
		root = freeGlobal;
	}

	/**
  * The `punycode` object.
  * @name punycode
  * @type Object
  */
	var punycode,


	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647,
	    // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	    tMin = 1,
	    tMax = 26,
	    skew = 38,
	    damp = 700,
	    initialBias = 72,
	    initialN = 128,
	    // 0x80
	delimiter = '-',
	    // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	    regexNonASCII = /[^\x20-\x7E]/,
	    // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
	    // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},


	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	    floor = Math.floor,
	    stringFromCharCode = String.fromCharCode,


	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
  * A generic error utility function.
  * @private
  * @param {String} type The error type.
  * @returns {Error} Throws a `RangeError` with the applicable error message.
  */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
  * A generic `Array#map` utility function.
  * @private
  * @param {Array} array The array to iterate over.
  * @param {Function} callback The function that gets called for every array
  * item.
  * @returns {Array} A new array of values returned by the callback function.
  */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
  * A simple `Array#map`-like wrapper to work with domain name strings or email
  * addresses.
  * @private
  * @param {String} domain The domain name or email address.
  * @param {Function} callback The function that gets called for every
  * character.
  * @returns {Array} A new string of characters returned by the callback
  * function.
  */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
  * Creates an array containing the numeric code points of each Unicode
  * character in the string. While JavaScript uses UCS-2 internally,
  * this function will convert a pair of surrogate halves (each of which
  * UCS-2 exposes as separate characters) into a single code point,
  * matching UTF-16.
  * @see `punycode.ucs2.encode`
  * @see <https://mathiasbynens.be/notes/javascript-encoding>
  * @memberOf punycode.ucs2
  * @name decode
  * @param {String} string The Unicode input string (UCS-2).
  * @returns {Array} The new array of code points.
  */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) {
					// low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
  * Creates a string based on an array of numeric code points.
  * @see `punycode.ucs2.decode`
  * @memberOf punycode.ucs2
  * @name encode
  * @param {Array} codePoints The array of numeric code points.
  * @returns {String} The new Unicode string (UCS-2).
  */
	function ucs2encode(array) {
		return map(array, function (value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
  * Converts a basic code point into a digit/integer.
  * @see `digitToBasic()`
  * @private
  * @param {Number} codePoint The basic numeric code point value.
  * @returns {Number} The numeric value of a basic code point (for use in
  * representing integers) in the range `0` to `base - 1`, or `base` if
  * the code point does not represent a value.
  */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
  * Converts a digit/integer into a basic code point.
  * @see `basicToDigit()`
  * @private
  * @param {Number} digit The numeric value of a basic code point.
  * @returns {Number} The basic code point whose value (when used for
  * representing integers) is `digit`, which needs to be in the range
  * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
  * used; else, the lowercase form is used. The behavior is undefined
  * if `flag` is non-zero and `digit` has no uppercase form.
  */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
  * Bias adaptation function as per section 3.4 of RFC 3492.
  * https://tools.ietf.org/html/rfc3492#section-3.4
  * @private
  */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
  * Converts a Punycode string of ASCII-only symbols to a string of Unicode
  * symbols.
  * @memberOf punycode
  * @param {String} input The Punycode string of ASCII-only symbols.
  * @returns {String} The resulting string of Unicode symbols.
  */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,

		/** Cached calculation results */
		baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base;; /* no condition */k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;
			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);
		}

		return ucs2encode(output);
	}

	/**
  * Converts a string of Unicode symbols (e.g. a domain name label) to a
  * Punycode string of ASCII-only symbols.
  * @memberOf punycode
  * @param {String} input The string of Unicode symbols.
  * @returns {String} The resulting Punycode string of ASCII-only symbols.
  */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],

		/** `inputLength` will hold the number of code points in `input`. */
		inputLength,

		/** Cached calculation results */
		handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base;; /* no condition */k += base) {
						t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;
		}
		return output.join('');
	}

	/**
  * Converts a Punycode string representing a domain name or an email address
  * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
  * it doesn't matter if you call it on a string that has already been
  * converted to Unicode.
  * @memberOf punycode
  * @param {String} input The Punycoded domain name or email address to
  * convert to Unicode.
  * @returns {String} The Unicode representation of the given Punycode
  * string.
  */
	function toUnicode(input) {
		return mapDomain(input, function (string) {
			return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
		});
	}

	/**
  * Converts a Unicode string representing a domain name or an email address to
  * Punycode. Only the non-ASCII parts of the domain name will be converted,
  * i.e. it doesn't matter if you call it with a domain that's already in
  * ASCII.
  * @memberOf punycode
  * @param {String} input The domain name or email address to convert, as a
  * Unicode string.
  * @returns {String} The Punycode representation of the given domain name or
  * email address.
  */
	function toASCII(input) {
		return mapDomain(input, function (string) {
			return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
   * A string representing the current Punycode.js version number.
   * @memberOf punycode
   * @type String
   */
		'version': '1.4.1',
		/**
   * An object of methods to convert from JavaScript's internal character
   * representation (UCS-2) to Unicode code points, and back.
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode
   * @type Object
   */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (typeof define == 'function' && _typeof(define.amd) == 'object' && define.amd) {
		define('punycode', function () {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}
})(undefined);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],15:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict';

var base64 = require('base64-js');
var ieee754 = require('ieee754');

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;

var K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
  console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
}

function typedArraySupport() {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function foo() {
        return 42;
      } };
    return arr.foo() === 42;
  } catch (e) {
    return false;
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  get: function get() {
    if (!(this instanceof Buffer)) {
      return undefined;
    }
    return this.buffer;
  }
});

Object.defineProperty(Buffer.prototype, 'offset', {
  get: function get() {
    if (!(this instanceof Buffer)) {
      return undefined;
    }
    return this.byteOffset;
  }
});

function createBuffer(length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length');
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length);
  buf.__proto__ = Buffer.prototype;
  return buf;
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer(arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }
    return allocUnsafe(arg);
  }
  return from(arg, encodingOrOffset, length);
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  });
}

Buffer.poolSize = 8192; // not used by this implementation

function from(value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (isArrayBuffer(value) || value && isArrayBuffer(value.buffer)) {
    return fromArrayBuffer(value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset);
  }

  return fromObject(value);
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length);
};

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype;
Buffer.__proto__ = Uint8Array;

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(size);
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
  }
  return createBuffer(size);
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding);
};

function allocUnsafe(size) {
  assertSize(size);
  return createBuffer(size < 0 ? 0 : checked(size) | 0);
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size);
};

function fromString(string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding);
  }

  var length = byteLength(string, encoding) | 0;
  var buf = createBuffer(length);

  var actual = buf.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
  }

  return buf;
}

function fromArrayLike(array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  var buf = createBuffer(length);
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255;
  }
  return buf;
}

function fromArrayBuffer(array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds');
  }

  var buf;
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array);
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset);
  } else {
    buf = new Uint8Array(array, byteOffset, length);
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype;
  return buf;
}

function fromObject(obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    var buf = createBuffer(len);

    if (buf.length === 0) {
      return buf;
    }

    obj.copy(buf, 0, 0, len);
    return buf;
  }

  if (obj) {
    if (ArrayBuffer.isView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0);
      }
      return fromArrayLike(obj);
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data);
    }
  }

  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.');
}

function checked(length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
  }
  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return b != null && b._isBuffer === true;
};

Buffer.compare = function compare(a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;
    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (ArrayBuffer.isView(buf)) {
      buf = Buffer.from(buf);
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }
  if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {
    return string.byteLength;
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0;

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;
      case 'hex':
        return len >>> 1;
      case 'base64':
        return base64ToBytes(string).length;
      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.toLocaleString = Buffer.prototype.toString;

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0;

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1;

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset; // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }
      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  var strLen = string.length;

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (numberIsNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }
  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
    // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0;
    if (isFinite(length)) {
      length = length >>> 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }
  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  var newBuf = this.subarray(start, end);
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype;
  return newBuf;
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = value >>> 8;
  this[offset + 1] = value & 0xff;
  return offset + 2;
};

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset + 3] = value >>> 24;
  this[offset + 2] = value >>> 16;
  this[offset + 1] = value >>> 8;
  this[offset] = value & 0xff;
  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset] = value >>> 24;
  this[offset + 1] = value >>> 16;
  this[offset + 2] = value >>> 8;
  this[offset + 3] = value & 0xff;
  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  this[offset] = value >>> 8;
  this[offset + 1] = value & 0xff;
  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  this[offset + 2] = value >>> 16;
  this[offset + 3] = value >>> 24;
  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  this[offset] = value >>> 24;
  this[offset + 1] = value >>> 16;
  this[offset + 2] = value >>> 8;
  this[offset + 3] = value & 0xff;
  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0;

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
  if (end < 0) throw new RangeError('sourceEnd out of bounds');

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
  }

  return len;
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code;
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : new Buffer(val, encoding);
    var len = bytes.length;
    if (len === 0) {
      throw new TypeError('The value "' + val + '" is invalid for argument "value"');
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0];
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return '';
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str;
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        }

        // valid lead
        leadSurrogate = codePoint;

        continue;
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer(obj) {
  return obj instanceof ArrayBuffer || obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' && typeof obj.byteLength === 'number';
}

function numberIsNaN(obj) {
  return obj !== obj; // eslint-disable-line no-self-compare
}

},{"base64-js":12,"ieee754":156}],16:[function(require,module,exports){
"use strict";

module.exports = {
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "208": "Already Reported",
  "226": "IM Used",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Payload Too Large",
  "414": "URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "421": "Misdirected Request",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Unordered Collection",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "451": "Unavailable For Legal Reasons",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "508": "Loop Detected",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
};

},{}],17:[function(require,module,exports){
(function (process,global){
"use strict";

var next = global.process && process.nextTick || global.setImmediate || function (f) {
  setTimeout(f, 0);
};

module.exports = function maybe(cb, promise) {
  if (cb) {
    promise.then(function (result) {
      next(function () {
        cb(null, result);
      });
    }, function (err) {
      next(function () {
        cb(err);
      });
    });
    return undefined;
  } else {
    return promise;
  }
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":218}],18:[function(require,module,exports){
(function (Buffer){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return objectToString(e) === '[object Error]' || e instanceof Error;
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})

},{"../../is-buffer/index.js":158}],19:[function(require,module,exports){
(function (process){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();

/**
 * Colors.
 */

exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||
  // is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) ||
  // is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 ||
  // double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit');

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === (typeof console === 'undefined' ? 'undefined' : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch (e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch (e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

}).call(this,require('_process'))

},{"./debug":20,"_process":218}],20:[function(require,module,exports){
'use strict';

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * Active `debug` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0,
      i;

  for (i in namespace) {
    hash = (hash << 5) - hash + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy() {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":212}],21:[function(require,module,exports){
(function (Buffer){
/*!
 * @description Recursive object extending
 * @author Viacheslav Lotsmanov <lotsmanov89@gmail.com>
 * @license MIT
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2013-2018 Viacheslav Lotsmanov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function isSpecificValue(val) {
	return val instanceof Buffer || val instanceof Date || val instanceof RegExp ? true : false;
}

function cloneSpecificValue(val) {
	if (val instanceof Buffer) {
		var x = Buffer.alloc ? Buffer.alloc(val.length) : new Buffer(val.length);
		val.copy(x);
		return x;
	} else if (val instanceof Date) {
		return new Date(val.getTime());
	} else if (val instanceof RegExp) {
		return new RegExp(val);
	} else {
		throw new Error('Unexpected situation');
	}
}

/**
 * Recursive cloning array.
 */
function deepCloneArray(arr) {
	var clone = [];
	arr.forEach(function (item, index) {
		if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object' && item !== null) {
			if (Array.isArray(item)) {
				clone[index] = deepCloneArray(item);
			} else if (isSpecificValue(item)) {
				clone[index] = cloneSpecificValue(item);
			} else {
				clone[index] = deepExtend({}, item);
			}
		} else {
			clone[index] = item;
		}
	});
	return clone;
}

function safeGetProperty(object, property) {
	return property === '__proto__' ? undefined : object[property];
}

/**
 * Extening object that entered in first argument.
 *
 * Returns extended object or false if have no target object or incorrect type.
 *
 * If you wish to clone source object (without modify it), just use empty new
 * object as first argument, like this:
 *   deepExtend({}, yourObj_1, [yourObj_N]);
 */
var deepExtend = module.exports = function () /*obj_1, [obj_2], [obj_N]*/{
	if (arguments.length < 1 || _typeof(arguments[0]) !== 'object') {
		return false;
	}

	if (arguments.length < 2) {
		return arguments[0];
	}

	var target = arguments[0];

	// convert arguments to array and cut off target object
	var args = Array.prototype.slice.call(arguments, 1);

	var val, src, clone;

	args.forEach(function (obj) {
		// skip argument if isn't an object, is null, or is an array
		if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj === null || Array.isArray(obj)) {
			return;
		}

		Object.keys(obj).forEach(function (key) {
			src = safeGetProperty(target, key); // source value
			val = safeGetProperty(obj, key); // new value

			// recursion prevention
			if (val === target) {
				return;

				/**
     * if new value isn't object then just overwrite by new value
     * instead of extending.
     */
			} else if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) !== 'object' || val === null) {
				target[key] = val;
				return;

				// just clone arrays (and recursive clone objects inside)
			} else if (Array.isArray(val)) {
				target[key] = deepCloneArray(val);
				return;

				// custom cloning and overwrite for specific objects
			} else if (isSpecificValue(val)) {
				target[key] = cloneSpecificValue(val);
				return;

				// overwrite by new value if source isn't object or array
			} else if ((typeof src === 'undefined' ? 'undefined' : _typeof(src)) !== 'object' || src === null || Array.isArray(src)) {
				target[key] = deepExtend({}, val);
				return;

				// source value and new value is objects both, extending...
			} else {
				target[key] = deepExtend(src, val);
				return;
			}
		});
	});

	return target;
};

}).call(this,require("buffer").Buffer)

},{"buffer":15}],22:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var $ = require('./util/helpers');

$.findByRef = require('./util/find-reference');
$.resolveSchema = require('./util/resolve-schema');
$.normalizeSchema = require('./util/normalize-schema');

var instance = module.exports = function (f) {
  function $ref(fakeroot, schema, refs, ex) {
    if ((typeof fakeroot === 'undefined' ? 'undefined' : _typeof(fakeroot)) === 'object') {
      ex = refs;
      refs = schema;
      schema = fakeroot;
      fakeroot = undefined;
    }

    if ((typeof schema === 'undefined' ? 'undefined' : _typeof(schema)) !== 'object') {
      throw new Error('schema must be an object');
    }

    if ((typeof refs === 'undefined' ? 'undefined' : _typeof(refs)) === 'object' && refs !== null) {
      var aux = refs;

      refs = [];

      for (var k in aux) {
        aux[k].id = aux[k].id || k;
        refs.push(aux[k]);
      }
    }

    if (typeof refs !== 'undefined' && !Array.isArray(refs)) {
      ex = !!refs;
      refs = [];
    }

    function push(ref) {
      if (typeof ref.id === 'string') {
        var id = $.resolveURL(fakeroot, ref.id).replace(/\/#?$/, '');

        if (id.indexOf('#') > -1) {
          var parts = id.split('#');

          if (parts[1].charAt() === '/') {
            id = parts[0];
          } else {
            id = parts[1] || parts[0];
          }
        }

        if (!$ref.refs[id]) {
          $ref.refs[id] = ref;
        }
      }
    }

    (refs || []).concat([schema]).forEach(function (ref) {
      schema = $.normalizeSchema(fakeroot, ref, push);
      push(schema);
    });

    return $.resolveSchema(schema, $ref.refs, ex, f);
  }

  $ref.refs = {};
  $ref.util = $;

  return $ref;
};

instance.util = $;

},{"./util/find-reference":24,"./util/helpers":25,"./util/normalize-schema":26,"./util/resolve-schema":27}],23:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var clone = module.exports = function (obj, seen) {
  seen = seen || [];

  if (seen.indexOf(obj) > -1) {
    throw new Error('unable dereference circular structures');
  }

  if (!obj || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
    return obj;
  }

  seen = seen.concat([obj]);

  var target = Array.isArray(obj) ? [] : {};

  function copy(key, value) {
    target[key] = clone(value, seen);
  }

  if (Array.isArray(target)) {
    obj.forEach(function (value, key) {
      copy(key, value);
    });
  } else if (Object.prototype.toString.call(obj) === '[object Object]') {
    Object.keys(obj).forEach(function (key) {
      copy(key, obj[key]);
    });
  }

  return target;
};

},{}],24:[function(require,module,exports){
'use strict';

var $ = require('./helpers');

function get(obj, path) {
  var hash = path.split('#')[1];

  var parts = hash.split('/').slice(1);

  while (parts.length) {
    var key = decodeURIComponent(parts.shift()).replace(/~1/g, '/').replace(/~0/g, '~');

    if (typeof obj[key] === 'undefined') {
      throw new Error('JSON pointer not found: ' + path);
    }

    obj = obj[key];
  }

  return obj;
}

var find = module.exports = function (id, refs, filter) {
  var target = refs[id] || refs[id.split('#')[1]] || refs[$.getDocumentURI(id)];

  try {
    if (target) {
      target = id.indexOf('#/') > -1 ? get(target, id) : target;
    } else {
      for (var key in refs) {
        if ($.resolveURL(refs[key].id, id) === refs[key].id) {
          target = refs[key];
          break;
        }
      }
    }
  } catch (e) {
    if (typeof filter === 'function') {
      target = filter(id, refs);
    } else {
      throw e;
    }
  }

  if (!target) {
    throw new Error('Reference not found: ' + id);
  }

  while (target.$ref) {
    target = find(target.$ref, refs);
  }

  return target;
};

},{"./helpers":25}],25:[function(require,module,exports){
'use strict';

// https://gist.github.com/pjt33/efb2f1134bab986113fd

function URLUtils(url, baseURL) {
  // remove leading ./
  url = url.replace(/^\.\//, '');

  var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(?:\/\/(?:([^:@]*)(?::([^:@]*))?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
  if (!m) {
    throw new RangeError();
  }
  var href = m[0] || '';
  var protocol = m[1] || '';
  var username = m[2] || '';
  var password = m[3] || '';
  var host = m[4] || '';
  var hostname = m[5] || '';
  var port = m[6] || '';
  var pathname = m[7] || '';
  var search = m[8] || '';
  var hash = m[9] || '';
  if (baseURL !== undefined) {
    var base = new URLUtils(baseURL);
    var flag = protocol === '' && host === '' && username === '';
    if (flag && pathname === '' && search === '') {
      search = base.search;
    }
    if (flag && pathname.charAt(0) !== '/') {
      pathname = pathname !== '' ? base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + pathname : base.pathname;
    }
    // dot segments removal
    var output = [];

    pathname.replace(/\/?[^\/]+/g, function (p) {
      if (p === '/..') {
        output.pop();
      } else {
        output.push(p);
      }
    });

    pathname = output.join('') || '/';

    if (flag) {
      port = base.port;
      hostname = base.hostname;
      host = base.host;
      password = base.password;
      username = base.username;
    }
    if (protocol === '') {
      protocol = base.protocol;
    }
    href = protocol + (host !== '' ? '//' : '') + (username !== '' ? username + (password !== '' ? ':' + password : '') + '@' : '') + host + pathname + search + hash;
  }
  this.href = href;
  this.origin = protocol + (host !== '' ? '//' + host : '');
  this.protocol = protocol;
  this.username = username;
  this.password = password;
  this.host = host;
  this.hostname = hostname;
  this.port = port;
  this.pathname = pathname;
  this.search = search;
  this.hash = hash;
}

function isURL(path) {
  if (typeof path === 'string' && /^\w+:\/\//.test(path)) {
    return true;
  }
}

function parseURI(href, base) {
  return new URLUtils(href, base);
}

function resolveURL(base, href) {
  base = base || 'http://json-schema.org/schema#';

  href = parseURI(href, base);
  base = parseURI(base);

  if (base.hash && !href.hash) {
    return href.href + base.hash;
  }

  return href.href;
}

function getDocumentURI(uri) {
  return typeof uri === 'string' && uri.split('#')[0];
}

function isKeyword(prop) {
  return prop === 'enum' || prop === 'default' || prop === 'required';
}

module.exports = {
  isURL: isURL,
  parseURI: parseURI,
  isKeyword: isKeyword,
  resolveURL: resolveURL,
  getDocumentURI: getDocumentURI
};

},{}],26:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var $ = require('./helpers');

var cloneObj = require('./clone-obj');

var SCHEMA_URI = ['http://json-schema.org/schema#', 'http://json-schema.org/schema', 'http://json-schema.org/draft-04/schema#', 'http://json-schema.org/draft-04/schema'];

function expand(obj, parent, callback) {
  if (obj) {
    var id = typeof obj.id === 'string' ? obj.id : '#';

    if (!$.isURL(id)) {
      id = $.resolveURL(parent === id ? null : parent, id);
    }

    if (typeof obj.$ref === 'string' && !$.isURL(obj.$ref)) {
      obj.$ref = $.resolveURL(id, obj.$ref);
    }

    if (typeof obj.id === 'string') {
      obj.id = parent = id;
    }
  }

  for (var key in obj) {
    var value = obj[key];

    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value !== null && !$.isKeyword(key)) {
      expand(value, parent, callback);
    }
  }

  if (typeof callback === 'function') {
    callback(obj);
  }
}

module.exports = function (fakeroot, schema, push) {
  if ((typeof fakeroot === 'undefined' ? 'undefined' : _typeof(fakeroot)) === 'object') {
    push = schema;
    schema = fakeroot;
    fakeroot = null;
  }

  var base = fakeroot || '',
      copy = cloneObj(schema);

  if (copy.$schema && SCHEMA_URI.indexOf(copy.$schema) === -1) {
    throw new Error('Unsupported schema version (v4 only)');
  }

  base = $.resolveURL(copy.$schema || SCHEMA_URI[0], base);

  expand(copy, $.resolveURL(copy.id || '#', base), push);

  copy.id = copy.id || base;

  return copy;
};

},{"./clone-obj":23,"./helpers":25}],27:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var $ = require('./helpers');

var find = require('./find-reference');

var deepExtend = require('deep-extend');

function copy(_, obj, refs, parent, resolve, callback) {
  var target = Array.isArray(obj) ? [] : {};

  if (typeof obj.$ref === 'string') {
    var id = obj.$ref;
    var base = $.getDocumentURI(id);
    var local = id.indexOf('#/') > -1;

    if (local || resolve && base !== parent) {
      var fixed = find(id, refs, callback);

      deepExtend(obj, fixed);

      delete obj.$ref;
      delete obj.id;
    }

    if (_[id] > 10) {
      return obj;
    }

    if (_[id]) {
      _[id] += 1;
    } else {
      _[id] = 1;
    }
  }

  for (var prop in obj) {

    if (_typeof(obj[prop]) === 'object' && obj[prop] !== null && !$.isKeyword(prop)) {
      target[prop] = copy(_, obj[prop], refs, parent, resolve, callback);
    } else {
      target[prop] = obj[prop];
    }
  }

  return target;
}

module.exports = function (obj, refs, resolve, callback) {
  var fixedId = $.resolveURL(obj.$schema, obj.id),
      parent = $.getDocumentURI(fixedId);

  return copy({}, obj, refs, parent, resolve, callback);
};

},{"./find-reference":24,"./helpers":25,"deep-extend":21}],28:[function(require,module,exports){
'use strict';
/* eslint indent: 4 */

// Private helper class

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SubRange = function () {
    function SubRange(low, high) {
        _classCallCheck(this, SubRange);

        this.low = low;
        this.high = high;
        this.length = 1 + high - low;
    }

    _createClass(SubRange, [{
        key: 'overlaps',
        value: function overlaps(range) {
            return !(this.high < range.low || this.low > range.high);
        }
    }, {
        key: 'touches',
        value: function touches(range) {
            return !(this.high + 1 < range.low || this.low - 1 > range.high);
        }

        // Returns inclusive combination of SubRanges as a SubRange.

    }, {
        key: 'add',
        value: function add(range) {
            return new SubRange(Math.min(this.low, range.low), Math.max(this.high, range.high));
        }

        // Returns subtraction of SubRanges as an array of SubRanges.
        // (There's a case where subtraction divides it in 2)

    }, {
        key: 'subtract',
        value: function subtract(range) {
            if (range.low <= this.low && range.high >= this.high) {
                return [];
            } else if (range.low > this.low && range.high < this.high) {
                return [new SubRange(this.low, range.low - 1), new SubRange(range.high + 1, this.high)];
            } else if (range.low <= this.low) {
                return [new SubRange(range.high + 1, this.high)];
            } else {
                return [new SubRange(this.low, range.low - 1)];
            }
        }
    }, {
        key: 'toString',
        value: function toString() {
            return this.low == this.high ? this.low.toString() : this.low + '-' + this.high;
        }
    }]);

    return SubRange;
}();

var DRange = function () {
    function DRange(a, b) {
        _classCallCheck(this, DRange);

        this.ranges = [];
        this.length = 0;
        if (a != null) this.add(a, b);
    }

    _createClass(DRange, [{
        key: '_update_length',
        value: function _update_length() {
            this.length = this.ranges.reduce(function (previous, range) {
                return previous + range.length;
            }, 0);
        }
    }, {
        key: 'add',
        value: function add(a, b) {
            var _this = this;

            var _add = function _add(subrange) {
                var i = 0;
                while (i < _this.ranges.length && !subrange.touches(_this.ranges[i])) {
                    i++;
                }
                var newRanges = _this.ranges.slice(0, i);
                while (i < _this.ranges.length && subrange.touches(_this.ranges[i])) {
                    subrange = subrange.add(_this.ranges[i]);
                    i++;
                }
                newRanges.push(subrange);
                _this.ranges = newRanges.concat(_this.ranges.slice(i));
                _this._update_length();
            };

            if (a instanceof DRange) {
                a.ranges.forEach(_add);
            } else {
                if (b == null) b = a;
                _add(new SubRange(a, b));
            }
            return this;
        }
    }, {
        key: 'subtract',
        value: function subtract(a, b) {
            var _this2 = this;

            var _subtract = function _subtract(subrange) {
                var i = 0;
                while (i < _this2.ranges.length && !subrange.overlaps(_this2.ranges[i])) {
                    i++;
                }
                var newRanges = _this2.ranges.slice(0, i);
                while (i < _this2.ranges.length && subrange.overlaps(_this2.ranges[i])) {
                    newRanges = newRanges.concat(_this2.ranges[i].subtract(subrange));
                    i++;
                }
                _this2.ranges = newRanges.concat(_this2.ranges.slice(i));
                _this2._update_length();
            };

            if (a instanceof DRange) {
                a.ranges.forEach(_subtract);
            } else {
                if (b == null) b = a;
                _subtract(new SubRange(a, b));
            }
            return this;
        }
    }, {
        key: 'intersect',
        value: function intersect(a, b) {
            var _this3 = this;

            var newRanges = [];
            var _intersect = function _intersect(subrange) {
                var i = 0;
                while (i < _this3.ranges.length && !subrange.overlaps(_this3.ranges[i])) {
                    i++;
                }
                while (i < _this3.ranges.length && subrange.overlaps(_this3.ranges[i])) {
                    var low = Math.max(_this3.ranges[i].low, subrange.low);
                    var high = Math.min(_this3.ranges[i].high, subrange.high);
                    newRanges.push(new SubRange(low, high));
                    i++;
                }
            };

            if (a instanceof DRange) {
                a.ranges.forEach(_intersect);
            } else {
                if (b == null) b = a;
                _intersect(new SubRange(a, b));
            }
            this.ranges = newRanges;
            this._update_length();
            return this;
        }
    }, {
        key: 'index',
        value: function index(_index) {
            var i = 0;
            while (i < this.ranges.length && this.ranges[i].length <= _index) {
                _index -= this.ranges[i].length;
                i++;
            }
            return this.ranges[i].low + _index;
        }
    }, {
        key: 'toString',
        value: function toString() {
            return '[ ' + this.ranges.join(', ') + ' ]';
        }
    }, {
        key: 'clone',
        value: function clone() {
            return new DRange(this);
        }
    }]);

    return DRange;
}();

module.exports = DRange;

},{}],29:[function(require,module,exports){
(function (process,global){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.4+314e4831
 */

(function (global, factory) {
  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.ES6Promise = factory();
})(undefined, function () {
  'use strict';

  function objectOrFunction(x) {
    var type = typeof x === 'undefined' ? 'undefined' : _typeof(x);
    return x !== null && (type === 'object' || type === 'function');
  }

  function isFunction(x) {
    return typeof x === 'function';
  }

  var _isArray = void 0;
  if (Array.isArray) {
    _isArray = Array.isArray;
  } else {
    _isArray = function _isArray(x) {
      return Object.prototype.toString.call(x) === '[object Array]';
    };
  }

  var isArray = _isArray;

  var len = 0;
  var vertxNext = void 0;
  var customSchedulerFn = void 0;

  var asap = function asap(callback, arg) {
    queue[len] = callback;
    queue[len + 1] = arg;
    len += 2;
    if (len === 2) {
      // If len is 2, that means that we need to schedule an async flush.
      // If additional callbacks are queued before the queue is flushed, they
      // will be processed by this flush that we are scheduling.
      if (customSchedulerFn) {
        customSchedulerFn(flush);
      } else {
        scheduleFlush();
      }
    }
  };

  function setScheduler(scheduleFn) {
    customSchedulerFn = scheduleFn;
  }

  function setAsap(asapFn) {
    asap = asapFn;
  }

  var browserWindow = typeof window !== 'undefined' ? window : undefined;
  var browserGlobal = browserWindow || {};
  var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
  var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

  // test for web worker but not in IE10
  var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

  // node
  function useNextTick() {
    // node version 0.10.x displays a deprecation warning when nextTick is used recursively
    // see https://github.com/cujojs/when/issues/410 for details
    return function () {
      return process.nextTick(flush);
    };
  }

  // vertx
  function useVertxTimer() {
    if (typeof vertxNext !== 'undefined') {
      return function () {
        vertxNext(flush);
      };
    }

    return useSetTimeout();
  }

  function useMutationObserver() {
    var iterations = 0;
    var observer = new BrowserMutationObserver(flush);
    var node = document.createTextNode('');
    observer.observe(node, { characterData: true });

    return function () {
      node.data = iterations = ++iterations % 2;
    };
  }

  // web worker
  function useMessageChannel() {
    var channel = new MessageChannel();
    channel.port1.onmessage = flush;
    return function () {
      return channel.port2.postMessage(0);
    };
  }

  function useSetTimeout() {
    // Store setTimeout reference so es6-promise will be unaffected by
    // other code modifying setTimeout (like sinon.useFakeTimers())
    var globalSetTimeout = setTimeout;
    return function () {
      return globalSetTimeout(flush, 1);
    };
  }

  var queue = new Array(1000);
  function flush() {
    for (var i = 0; i < len; i += 2) {
      var callback = queue[i];
      var arg = queue[i + 1];

      callback(arg);

      queue[i] = undefined;
      queue[i + 1] = undefined;
    }

    len = 0;
  }

  function attemptVertx() {
    try {
      var vertx = Function('return this')().require('vertx');
      vertxNext = vertx.runOnLoop || vertx.runOnContext;
      return useVertxTimer();
    } catch (e) {
      return useSetTimeout();
    }
  }

  var scheduleFlush = void 0;
  // Decide what async method to use to triggering processing of queued callbacks:
  if (isNode) {
    scheduleFlush = useNextTick();
  } else if (BrowserMutationObserver) {
    scheduleFlush = useMutationObserver();
  } else if (isWorker) {
    scheduleFlush = useMessageChannel();
  } else if (browserWindow === undefined && typeof require === 'function') {
    scheduleFlush = attemptVertx();
  } else {
    scheduleFlush = useSetTimeout();
  }

  function then(onFulfillment, onRejection) {
    var parent = this;

    var child = new this.constructor(noop);

    if (child[PROMISE_ID] === undefined) {
      makePromise(child);
    }

    var _state = parent._state;

    if (_state) {
      var callback = arguments[_state - 1];
      asap(function () {
        return invokeCallback(_state, child, callback, parent._result);
      });
    } else {
      subscribe(parent, child, onFulfillment, onRejection);
    }

    return child;
  }

  /**
    `Promise.resolve` returns a promise that will become resolved with the
    passed `value`. It is shorthand for the following:
  
    ```javascript
    let promise = new Promise(function(resolve, reject){
      resolve(1);
    });
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    let promise = Promise.resolve(1);
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    @method resolve
    @static
    @param {Any} value value that the returned promise will be resolved with
    Useful for tooling.
    @return {Promise} a promise that will become fulfilled with the given
    `value`
  */
  function resolve$1(object) {
    /*jshint validthis:true */
    var Constructor = this;

    if (object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object.constructor === Constructor) {
      return object;
    }

    var promise = new Constructor(noop);
    resolve(promise, object);
    return promise;
  }

  var PROMISE_ID = Math.random().toString(36).substring(2);

  function noop() {}

  var PENDING = void 0;
  var FULFILLED = 1;
  var REJECTED = 2;

  var TRY_CATCH_ERROR = { error: null };

  function selfFulfillment() {
    return new TypeError("You cannot resolve a promise with itself");
  }

  function cannotReturnOwn() {
    return new TypeError('A promises callback cannot return that same promise.');
  }

  function getThen(promise) {
    try {
      return promise.then;
    } catch (error) {
      TRY_CATCH_ERROR.error = error;
      return TRY_CATCH_ERROR;
    }
  }

  function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
    try {
      then$$1.call(value, fulfillmentHandler, rejectionHandler);
    } catch (e) {
      return e;
    }
  }

  function handleForeignThenable(promise, thenable, then$$1) {
    asap(function (promise) {
      var sealed = false;
      var error = tryThen(then$$1, thenable, function (value) {
        if (sealed) {
          return;
        }
        sealed = true;
        if (thenable !== value) {
          resolve(promise, value);
        } else {
          fulfill(promise, value);
        }
      }, function (reason) {
        if (sealed) {
          return;
        }
        sealed = true;

        reject(promise, reason);
      }, 'Settle: ' + (promise._label || ' unknown promise'));

      if (!sealed && error) {
        sealed = true;
        reject(promise, error);
      }
    }, promise);
  }

  function handleOwnThenable(promise, thenable) {
    if (thenable._state === FULFILLED) {
      fulfill(promise, thenable._result);
    } else if (thenable._state === REJECTED) {
      reject(promise, thenable._result);
    } else {
      subscribe(thenable, undefined, function (value) {
        return resolve(promise, value);
      }, function (reason) {
        return reject(promise, reason);
      });
    }
  }

  function handleMaybeThenable(promise, maybeThenable, then$$1) {
    if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
      handleOwnThenable(promise, maybeThenable);
    } else {
      if (then$$1 === TRY_CATCH_ERROR) {
        reject(promise, TRY_CATCH_ERROR.error);
        TRY_CATCH_ERROR.error = null;
      } else if (then$$1 === undefined) {
        fulfill(promise, maybeThenable);
      } else if (isFunction(then$$1)) {
        handleForeignThenable(promise, maybeThenable, then$$1);
      } else {
        fulfill(promise, maybeThenable);
      }
    }
  }

  function resolve(promise, value) {
    if (promise === value) {
      reject(promise, selfFulfillment());
    } else if (objectOrFunction(value)) {
      handleMaybeThenable(promise, value, getThen(value));
    } else {
      fulfill(promise, value);
    }
  }

  function publishRejection(promise) {
    if (promise._onerror) {
      promise._onerror(promise._result);
    }

    publish(promise);
  }

  function fulfill(promise, value) {
    if (promise._state !== PENDING) {
      return;
    }

    promise._result = value;
    promise._state = FULFILLED;

    if (promise._subscribers.length !== 0) {
      asap(publish, promise);
    }
  }

  function reject(promise, reason) {
    if (promise._state !== PENDING) {
      return;
    }
    promise._state = REJECTED;
    promise._result = reason;

    asap(publishRejection, promise);
  }

  function subscribe(parent, child, onFulfillment, onRejection) {
    var _subscribers = parent._subscribers;
    var length = _subscribers.length;

    parent._onerror = null;

    _subscribers[length] = child;
    _subscribers[length + FULFILLED] = onFulfillment;
    _subscribers[length + REJECTED] = onRejection;

    if (length === 0 && parent._state) {
      asap(publish, parent);
    }
  }

  function publish(promise) {
    var subscribers = promise._subscribers;
    var settled = promise._state;

    if (subscribers.length === 0) {
      return;
    }

    var child = void 0,
        callback = void 0,
        detail = promise._result;

    for (var i = 0; i < subscribers.length; i += 3) {
      child = subscribers[i];
      callback = subscribers[i + settled];

      if (child) {
        invokeCallback(settled, child, callback, detail);
      } else {
        callback(detail);
      }
    }

    promise._subscribers.length = 0;
  }

  function tryCatch(callback, detail) {
    try {
      return callback(detail);
    } catch (e) {
      TRY_CATCH_ERROR.error = e;
      return TRY_CATCH_ERROR;
    }
  }

  function invokeCallback(settled, promise, callback, detail) {
    var hasCallback = isFunction(callback),
        value = void 0,
        error = void 0,
        succeeded = void 0,
        failed = void 0;

    if (hasCallback) {
      value = tryCatch(callback, detail);

      if (value === TRY_CATCH_ERROR) {
        failed = true;
        error = value.error;
        value.error = null;
      } else {
        succeeded = true;
      }

      if (promise === value) {
        reject(promise, cannotReturnOwn());
        return;
      }
    } else {
      value = detail;
      succeeded = true;
    }

    if (promise._state !== PENDING) {
      // noop
    } else if (hasCallback && succeeded) {
      resolve(promise, value);
    } else if (failed) {
      reject(promise, error);
    } else if (settled === FULFILLED) {
      fulfill(promise, value);
    } else if (settled === REJECTED) {
      reject(promise, value);
    }
  }

  function initializePromise(promise, resolver) {
    try {
      resolver(function resolvePromise(value) {
        resolve(promise, value);
      }, function rejectPromise(reason) {
        reject(promise, reason);
      });
    } catch (e) {
      reject(promise, e);
    }
  }

  var id = 0;
  function nextId() {
    return id++;
  }

  function makePromise(promise) {
    promise[PROMISE_ID] = id++;
    promise._state = undefined;
    promise._result = undefined;
    promise._subscribers = [];
  }

  function validationError() {
    return new Error('Array Methods must be provided an Array');
  }

  var Enumerator = function () {
    function Enumerator(Constructor, input) {
      this._instanceConstructor = Constructor;
      this.promise = new Constructor(noop);

      if (!this.promise[PROMISE_ID]) {
        makePromise(this.promise);
      }

      if (isArray(input)) {
        this.length = input.length;
        this._remaining = input.length;

        this._result = new Array(this.length);

        if (this.length === 0) {
          fulfill(this.promise, this._result);
        } else {
          this.length = this.length || 0;
          this._enumerate(input);
          if (this._remaining === 0) {
            fulfill(this.promise, this._result);
          }
        }
      } else {
        reject(this.promise, validationError());
      }
    }

    Enumerator.prototype._enumerate = function _enumerate(input) {
      for (var i = 0; this._state === PENDING && i < input.length; i++) {
        this._eachEntry(input[i], i);
      }
    };

    Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
      var c = this._instanceConstructor;
      var resolve$$1 = c.resolve;

      if (resolve$$1 === resolve$1) {
        var _then = getThen(entry);

        if (_then === then && entry._state !== PENDING) {
          this._settledAt(entry._state, i, entry._result);
        } else if (typeof _then !== 'function') {
          this._remaining--;
          this._result[i] = entry;
        } else if (c === Promise$1) {
          var promise = new c(noop);
          handleMaybeThenable(promise, entry, _then);
          this._willSettleAt(promise, i);
        } else {
          this._willSettleAt(new c(function (resolve$$1) {
            return resolve$$1(entry);
          }), i);
        }
      } else {
        this._willSettleAt(resolve$$1(entry), i);
      }
    };

    Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
      var promise = this.promise;

      if (promise._state === PENDING) {
        this._remaining--;

        if (state === REJECTED) {
          reject(promise, value);
        } else {
          this._result[i] = value;
        }
      }

      if (this._remaining === 0) {
        fulfill(promise, this._result);
      }
    };

    Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
      var enumerator = this;

      subscribe(promise, undefined, function (value) {
        return enumerator._settledAt(FULFILLED, i, value);
      }, function (reason) {
        return enumerator._settledAt(REJECTED, i, reason);
      });
    };

    return Enumerator;
  }();

  /**
    `Promise.all` accepts an array of promises, and returns a new promise which
    is fulfilled with an array of fulfillment values for the passed promises, or
    rejected with the reason of the first passed promise to be rejected. It casts all
    elements of the passed iterable to promises as it runs this algorithm.
  
    Example:
  
    ```javascript
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
    let promises = [ promise1, promise2, promise3 ];
  
    Promise.all(promises).then(function(array){
      // The array here would be [ 1, 2, 3 ];
    });
    ```
  
    If any of the `promises` given to `all` are rejected, the first promise
    that is rejected will be given as an argument to the returned promises's
    rejection handler. For example:
  
    Example:
  
    ```javascript
    let promise1 = resolve(1);
    let promise2 = reject(new Error("2"));
    let promise3 = reject(new Error("3"));
    let promises = [ promise1, promise2, promise3 ];
  
    Promise.all(promises).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(error) {
      // error.message === "2"
    });
    ```
  
    @method all
    @static
    @param {Array} entries array of promises
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when all `promises` have been
    fulfilled, or rejected if any of them become rejected.
    @static
  */
  function all(entries) {
    return new Enumerator(this, entries).promise;
  }

  /**
    `Promise.race` returns a new promise which is settled in the same way as the
    first passed promise to settle.
  
    Example:
  
    ```javascript
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 2');
      }, 100);
    });
  
    Promise.race([promise1, promise2]).then(function(result){
      // result === 'promise 2' because it was resolved before promise1
      // was resolved.
    });
    ```
  
    `Promise.race` is deterministic in that only the state of the first
    settled promise matters. For example, even if other promises given to the
    `promises` array argument are resolved, but the first settled promise has
    become rejected before the other promises became fulfilled, the returned
    promise will become rejected:
  
    ```javascript
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        reject(new Error('promise 2'));
      }, 100);
    });
  
    Promise.race([promise1, promise2]).then(function(result){
      // Code here never runs
    }, function(reason){
      // reason.message === 'promise 2' because promise 2 became rejected before
      // promise 1 became fulfilled
    });
    ```
  
    An example real-world use case is implementing timeouts:
  
    ```javascript
    Promise.race([ajax('foo.json'), timeout(5000)])
    ```
  
    @method race
    @static
    @param {Array} promises array of promises to observe
    Useful for tooling.
    @return {Promise} a promise which settles in the same way as the first passed
    promise to settle.
  */
  function race(entries) {
    /*jshint validthis:true */
    var Constructor = this;

    if (!isArray(entries)) {
      return new Constructor(function (_, reject) {
        return reject(new TypeError('You must pass an array to race.'));
      });
    } else {
      return new Constructor(function (resolve, reject) {
        var length = entries.length;
        for (var i = 0; i < length; i++) {
          Constructor.resolve(entries[i]).then(resolve, reject);
        }
      });
    }
  }

  /**
    `Promise.reject` returns a promise rejected with the passed `reason`.
    It is shorthand for the following:
  
    ```javascript
    let promise = new Promise(function(resolve, reject){
      reject(new Error('WHOOPS'));
    });
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    let promise = Promise.reject(new Error('WHOOPS'));
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    @method reject
    @static
    @param {Any} reason value that the returned promise will be rejected with.
    Useful for tooling.
    @return {Promise} a promise rejected with the given `reason`.
  */
  function reject$1(reason) {
    /*jshint validthis:true */
    var Constructor = this;
    var promise = new Constructor(noop);
    reject(promise, reason);
    return promise;
  }

  function needsResolver() {
    throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
  }

  function needsNew() {
    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
  }

  /**
    Promise objects represent the eventual result of an asynchronous operation. The
    primary way of interacting with a promise is through its `then` method, which
    registers callbacks to receive either a promise's eventual value or the reason
    why the promise cannot be fulfilled.
  
    Terminology
    -----------
  
    - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
    - `thenable` is an object or function that defines a `then` method.
    - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
    - `exception` is a value that is thrown using the throw statement.
    - `reason` is a value that indicates why a promise was rejected.
    - `settled` the final resting state of a promise, fulfilled or rejected.
  
    A promise can be in one of three states: pending, fulfilled, or rejected.
  
    Promises that are fulfilled have a fulfillment value and are in the fulfilled
    state.  Promises that are rejected have a rejection reason and are in the
    rejected state.  A fulfillment value is never a thenable.
  
    Promises can also be said to *resolve* a value.  If this value is also a
    promise, then the original promise's settled state will match the value's
    settled state.  So a promise that *resolves* a promise that rejects will
    itself reject, and a promise that *resolves* a promise that fulfills will
    itself fulfill.
  
  
    Basic Usage:
    ------------
  
    ```js
    let promise = new Promise(function(resolve, reject) {
      // on success
      resolve(value);
  
      // on failure
      reject(reason);
    });
  
    promise.then(function(value) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Advanced Usage:
    ---------------
  
    Promises shine when abstracting away asynchronous interactions such as
    `XMLHttpRequest`s.
  
    ```js
    function getJSON(url) {
      return new Promise(function(resolve, reject){
        let xhr = new XMLHttpRequest();
  
        xhr.open('GET', url);
        xhr.onreadystatechange = handler;
        xhr.responseType = 'json';
        xhr.setRequestHeader('Accept', 'application/json');
        xhr.send();
  
        function handler() {
          if (this.readyState === this.DONE) {
            if (this.status === 200) {
              resolve(this.response);
            } else {
              reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
            }
          }
        };
      });
    }
  
    getJSON('/posts.json').then(function(json) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Unlike callbacks, promises are great composable primitives.
  
    ```js
    Promise.all([
      getJSON('/posts'),
      getJSON('/comments')
    ]).then(function(values){
      values[0] // => postsJSON
      values[1] // => commentsJSON
  
      return values;
    });
    ```
  
    @class Promise
    @param {Function} resolver
    Useful for tooling.
    @constructor
  */

  var Promise$1 = function () {
    function Promise(resolver) {
      this[PROMISE_ID] = nextId();
      this._result = this._state = undefined;
      this._subscribers = [];

      if (noop !== resolver) {
        typeof resolver !== 'function' && needsResolver();
        this instanceof Promise ? initializePromise(this, resolver) : needsNew();
      }
    }

    /**
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.
     ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```
     Chaining
    --------
     The return value of `then` is itself a promise.  This second, 'downstream'
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.
     ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return 'default name';
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `'default name'`
    });
     findUser().then(function (user) {
      throw new Error('Found user, but still unhappy');
    }, function (reason) {
      throw new Error('`findUser` rejected and we're unhappy');
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
     ```js
    findUser().then(function (user) {
      throw new PedagogicalException('Upstream error');
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```
     Assimilation
    ------------
     Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.
     ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```
     If the assimliated promise rejects, then the downstream promise will also reject.
     ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```
     Simple Example
    --------------
     Synchronous Example
     ```javascript
    let result;
     try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```
     Errback Example
     ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```
     Promise Example;
     ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```
     Advanced Example
    --------------
     Synchronous Example
     ```javascript
    let author, books;
     try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```
     Errback Example
     ```js
     function foundBooks(books) {
     }
     function failure(reason) {
     }
     findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```
     Promise Example;
     ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    }).catch(function(reason){
      // something went wrong
    });
    ```
     @method then
    @param {Function} onFulfilled
    @param {Function} onRejected
    Useful for tooling.
    @return {Promise}
    */

    /**
    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
    as the catch block of a try/catch statement.
    ```js
    function findAuthor(){
    throw new Error('couldn't find that author');
    }
    // synchronous
    try {
    findAuthor();
    } catch(reason) {
    // something went wrong
    }
    // async with promises
    findAuthor().catch(function(reason){
    // something went wrong
    });
    ```
    @method catch
    @param {Function} onRejection
    Useful for tooling.
    @return {Promise}
    */

    Promise.prototype.catch = function _catch(onRejection) {
      return this.then(null, onRejection);
    };

    /**
      `finally` will be invoked regardless of the promise's fate just as native
      try/catch/finally behaves
    
      Synchronous example:
    
      ```js
      findAuthor() {
        if (Math.random() > 0.5) {
          throw new Error();
        }
        return new Author();
      }
    
      try {
        return findAuthor(); // succeed or fail
      } catch(error) {
        return findOtherAuther();
      } finally {
        // always runs
        // doesn't affect the return value
      }
      ```
    
      Asynchronous example:
    
      ```js
      findAuthor().catch(function(reason){
        return findOtherAuther();
      }).finally(function(){
        // author was either found, or not
      });
      ```
    
      @method finally
      @param {Function} callback
      @return {Promise}
    */

    Promise.prototype.finally = function _finally(callback) {
      var promise = this;
      var constructor = promise.constructor;

      return promise.then(function (value) {
        return constructor.resolve(callback()).then(function () {
          return value;
        });
      }, function (reason) {
        return constructor.resolve(callback()).then(function () {
          throw reason;
        });
      });
    };

    return Promise;
  }();

  Promise$1.prototype.then = then;
  Promise$1.all = all;
  Promise$1.race = race;
  Promise$1.resolve = resolve$1;
  Promise$1.reject = reject$1;
  Promise$1._setScheduler = setScheduler;
  Promise$1._setAsap = setAsap;
  Promise$1._asap = asap;

  /*global self*/
  function polyfill() {
    var local = void 0;

    if (typeof global !== 'undefined') {
      local = global;
    } else if (typeof self !== 'undefined') {
      local = self;
    } else {
      try {
        local = Function('return this')();
      } catch (e) {
        throw new Error('polyfill failed because global object is unavailable in this environment');
      }
    }

    var P = local.Promise;

    if (P) {
      var promiseToString = null;
      try {
        promiseToString = Object.prototype.toString.call(P.resolve());
      } catch (e) {
        // silently ignored
      }

      if (promiseToString === '[object Promise]' && !P.cast) {
        return;
      }
    }

    local.Promise = Promise$1;
  }

  // Strange compat..
  Promise$1.polyfill = polyfill;
  Promise$1.Promise = Promise$1;

  return Promise$1;
});



}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":218}],30:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill;
var objectKeys = Object.keys || objectKeysPolyfill;
var bind = Function.prototype.bind || functionBindPolyfill;

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) {
  hasDefineProperty = false;
}
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function get() {
      return defaultMaxListeners;
    },
    set: function set(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg) throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n)) throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn) handler.call(self);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) {
      listeners[i].call(self);
    }
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn) handler.call(self, arg1);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) {
      listeners[i].call(self, arg1);
    }
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn) handler.call(self, arg1, arg2);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) {
      listeners[i].call(self, arg1, arg2);
    }
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn) handler.call(self, arg1, arg2, arg3);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) {
      listeners[i].call(self, arg1, arg2, arg3);
    }
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn) handler.apply(self, args);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) {
      listeners[i].apply(self, args);
    }
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = type === 'error';

  events = this._events;
  if (events) doError = doError && events.error == null;else if (!doError) return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1) er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler) return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
    // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
    // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++) {
        args[i - 1] = arguments[i];
      }emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' "' + String(type) + '" listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if ((typeof console === 'undefined' ? 'undefined' : _typeof(console)) === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1], arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i) {
          args[i] = arguments[i];
        }this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
};

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;

  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');

  events = this._events;
  if (!events) return this;

  list = events[type];
  if (!list) return this;

  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = objectCreate(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;

    if (position === 0) list.shift();else spliceOne(list, position);

    if (list.length === 1) events[type] = list[0];

    if (events.removeListener) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;

  events = this._events;
  if (!events) return this;

  // not listening for removeListener, no need to emit
  if (!events.removeListener) {
    if (arguments.length === 0) {
      this._events = objectCreate(null);
      this._eventsCount = 0;
    } else if (events[type]) {
      if (--this._eventsCount === 0) this._events = objectCreate(null);else delete events[type];
    }
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    var keys = objectKeys(events);
    var key;
    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = objectCreate(null);
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }

  return this;
};

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events) return [];

  var evlistener = events[type];
  if (!evlistener) return [];

  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i) {
    copy[i] = arr[i];
  }return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function F() {};
  F.prototype = proto;
  return new F();
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, k)) {
      keys.push(k);
    }
  }return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],31:[function(require,module,exports){
'use strict';

/**
 *
 * @namespace faker.address
 */
function Address(faker) {
    var f = faker.fake,
        Helpers = faker.helpers;

    /**
     * Generates random zipcode from format. If format is not specified, the
     * locale's zip format is used.
     *
     * @method faker.address.zipCode
     * @param {String} format
     */
    this.zipCode = function (format) {
        // if zip format is not specified, use the zip format defined for the locale
        if (typeof format === 'undefined') {
            var localeFormat = faker.definitions.address.postcode;
            if (typeof localeFormat === 'string') {
                format = localeFormat;
            } else {
                format = faker.random.arrayElement(localeFormat);
            }
        }
        return Helpers.replaceSymbols(format);
    };

    /**
     * Generates a random localized city name. The format string can contain any
     * method provided by faker wrapped in `{{}}`, e.g. `{{name.firstName}}` in
     * order to build the city name.
     *
     * If no format string is provided one of the following is randomly used:
     * 
     * * `{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}`
     * * `{{address.cityPrefix}} {{name.firstName}}`
     * * `{{name.firstName}}{{address.citySuffix}}`
     * * `{{name.lastName}}{{address.citySuffix}}`
     *
     * @method faker.address.city
     * @param {String} format
     */
    this.city = function (format) {
        var formats = ['{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}', '{{address.cityPrefix}} {{name.firstName}}', '{{name.firstName}}{{address.citySuffix}}', '{{name.lastName}}{{address.citySuffix}}'];

        if (typeof format !== "number") {
            format = faker.random.number(formats.length - 1);
        }

        return f(formats[format]);
    };

    /**
     * Return a random localized city prefix
     * @method faker.address.cityPrefix
     */
    this.cityPrefix = function () {
        return faker.random.arrayElement(faker.definitions.address.city_prefix);
    };

    /**
     * Return a random localized city suffix
     *
     * @method faker.address.citySuffix
     */
    this.citySuffix = function () {
        return faker.random.arrayElement(faker.definitions.address.city_suffix);
    };

    /**
     * Returns a random localized street name
     *
     * @method faker.address.streetName
     */
    this.streetName = function () {
        var result;
        var suffix = faker.address.streetSuffix();
        if (suffix !== "") {
            suffix = " " + suffix;
        }

        switch (faker.random.number(1)) {
            case 0:
                result = faker.name.lastName() + suffix;
                break;
            case 1:
                result = faker.name.firstName() + suffix;
                break;
        }
        return result;
    };

    //
    // TODO: change all these methods that accept a boolean to instead accept an options hash.
    //
    /**
     * Returns a random localized street address
     *
     * @method faker.address.streetAddress
     * @param {Boolean} useFullAddress
     */
    this.streetAddress = function (useFullAddress) {
        if (useFullAddress === undefined) {
            useFullAddress = false;
        }
        var address = "";
        switch (faker.random.number(2)) {
            case 0:
                address = Helpers.replaceSymbolWithNumber("#####") + " " + faker.address.streetName();
                break;
            case 1:
                address = Helpers.replaceSymbolWithNumber("####") + " " + faker.address.streetName();
                break;
            case 2:
                address = Helpers.replaceSymbolWithNumber("###") + " " + faker.address.streetName();
                break;
        }
        return useFullAddress ? address + " " + faker.address.secondaryAddress() : address;
    };

    /**
     * streetSuffix
     *
     * @method faker.address.streetSuffix
     */
    this.streetSuffix = function () {
        return faker.random.arrayElement(faker.definitions.address.street_suffix);
    };

    /**
     * streetPrefix
     *
     * @method faker.address.streetPrefix
     */
    this.streetPrefix = function () {
        return faker.random.arrayElement(faker.definitions.address.street_prefix);
    };

    /**
     * secondaryAddress
     *
     * @method faker.address.secondaryAddress
     */
    this.secondaryAddress = function () {
        return Helpers.replaceSymbolWithNumber(faker.random.arrayElement(['Apt. ###', 'Suite ###']));
    };

    /**
     * county
     *
     * @method faker.address.county
     */
    this.county = function () {
        return faker.random.arrayElement(faker.definitions.address.county);
    };

    /**
     * country
     *
     * @method faker.address.country
     */
    this.country = function () {
        return faker.random.arrayElement(faker.definitions.address.country);
    };

    /**
     * countryCode
     *
     * @method faker.address.countryCode
     */
    this.countryCode = function () {
        return faker.random.arrayElement(faker.definitions.address.country_code);
    };

    /**
     * state
     *
     * @method faker.address.state
     * @param {Boolean} useAbbr
     */
    this.state = function (useAbbr) {
        return faker.random.arrayElement(faker.definitions.address.state);
    };

    /**
     * stateAbbr
     *
     * @method faker.address.stateAbbr
     */
    this.stateAbbr = function () {
        return faker.random.arrayElement(faker.definitions.address.state_abbr);
    };

    /**
     * latitude
     *
     * @method faker.address.latitude
     */
    this.latitude = function () {
        return (faker.random.number(180 * 10000) / 10000.0 - 90.0).toFixed(4);
    };

    /**
     * longitude
     *
     * @method faker.address.longitude
     */
    this.longitude = function () {
        return (faker.random.number(360 * 10000) / 10000.0 - 180.0).toFixed(4);
    };

    return this;
}

module.exports = Address;

},{}],32:[function(require,module,exports){
"use strict";

/**
 *
 * @namespace faker.commerce
 */
var Commerce = function Commerce(faker) {
    var self = this;

    /**
     * color
     *
     * @method faker.commerce.color
     */
    self.color = function () {
        return faker.random.arrayElement(faker.definitions.commerce.color);
    };

    /**
     * department
     *
     * @method faker.commerce.department
     */
    self.department = function () {
        return faker.random.arrayElement(faker.definitions.commerce.department);
    };

    /**
     * productName
     *
     * @method faker.commerce.productName
     */
    self.productName = function () {
        return faker.commerce.productAdjective() + " " + faker.commerce.productMaterial() + " " + faker.commerce.product();
    };

    /**
     * price
     *
     * @method faker.commerce.price
     * @param {number} min
     * @param {number} max
     * @param {number} dec
     * @param {string} symbol
     *
     * @return {string}
     */
    self.price = function (min, max, dec, symbol) {
        min = min || 0;
        max = max || 1000;
        dec = dec === undefined ? 2 : dec;
        symbol = symbol || '';

        if (min < 0 || max < 0) {
            return symbol + 0.00;
        }

        var randValue = faker.random.number({ max: max, min: min });

        return symbol + (Math.round(randValue * Math.pow(10, dec)) / Math.pow(10, dec)).toFixed(dec);
    };

    /*
    self.categories = function(num) {
        var categories = [];
         do {
            var category = faker.random.arrayElement(faker.definitions.commerce.department);
            if(categories.indexOf(category) === -1) {
                categories.push(category);
            }
        } while(categories.length < num);
         return categories;
    };
     */
    /*
    self.mergeCategories = function(categories) {
        var separator = faker.definitions.separator || " &";
        // TODO: find undefined here
        categories = categories || faker.definitions.commerce.categories;
        var commaSeparated = categories.slice(0, -1).join(', ');
         return [commaSeparated, categories[categories.length - 1]].join(separator + " ");
    };
    */

    /**
     * productAdjective
     *
     * @method faker.commerce.productAdjective
     */
    self.productAdjective = function () {
        return faker.random.arrayElement(faker.definitions.commerce.product_name.adjective);
    };

    /**
     * productMaterial
     *
     * @method faker.commerce.productMaterial
     */
    self.productMaterial = function () {
        return faker.random.arrayElement(faker.definitions.commerce.product_name.material);
    };

    /**
     * product
     *
     * @method faker.commerce.product
     */
    self.product = function () {
        return faker.random.arrayElement(faker.definitions.commerce.product_name.product);
    };

    return self;
};

module['exports'] = Commerce;

},{}],33:[function(require,module,exports){
'use strict';

/**
 *
 * @namespace faker.company
 */
var Company = function Company(faker) {

  var self = this;
  var f = faker.fake;

  /**
   * suffixes
   *
   * @method faker.company.suffixes
   */
  this.suffixes = function () {
    // Don't want the source array exposed to modification, so return a copy
    return faker.definitions.company.suffix.slice(0);
  };

  /**
   * companyName
   *
   * @method faker.company.companyName
   * @param {string} format
   */
  this.companyName = function (format) {

    var formats = ['{{name.lastName}} {{company.companySuffix}}', '{{name.lastName}} - {{name.lastName}}', '{{name.lastName}}, {{name.lastName}} and {{name.lastName}}'];

    if (typeof format !== "number") {
      format = faker.random.number(formats.length - 1);
    }

    return f(formats[format]);
  };

  /**
   * companySuffix
   *
   * @method faker.company.companySuffix
   */
  this.companySuffix = function () {
    return faker.random.arrayElement(faker.company.suffixes());
  };

  /**
   * catchPhrase
   *
   * @method faker.company.catchPhrase
   */
  this.catchPhrase = function () {
    return f('{{company.catchPhraseAdjective}} {{company.catchPhraseDescriptor}} {{company.catchPhraseNoun}}');
  };

  /**
   * bs
   *
   * @method faker.company.bs
   */
  this.bs = function () {
    return f('{{company.bsAdjective}} {{company.bsBuzz}} {{company.bsNoun}}');
  };

  /**
   * catchPhraseAdjective
   *
   * @method faker.company.catchPhraseAdjective
   */
  this.catchPhraseAdjective = function () {
    return faker.random.arrayElement(faker.definitions.company.adjective);
  };

  /**
   * catchPhraseDescriptor
   *
   * @method faker.company.catchPhraseDescriptor
   */
  this.catchPhraseDescriptor = function () {
    return faker.random.arrayElement(faker.definitions.company.descriptor);
  };

  /**
   * catchPhraseNoun
   *
   * @method faker.company.catchPhraseNoun
   */
  this.catchPhraseNoun = function () {
    return faker.random.arrayElement(faker.definitions.company.noun);
  };

  /**
   * bsAdjective
   *
   * @method faker.company.bsAdjective
   */
  this.bsAdjective = function () {
    return faker.random.arrayElement(faker.definitions.company.bs_adjective);
  };

  /**
   * bsBuzz
   *
   * @method faker.company.bsBuzz
   */
  this.bsBuzz = function () {
    return faker.random.arrayElement(faker.definitions.company.bs_verb);
  };

  /**
   * bsNoun
   *
   * @method faker.company.bsNoun
   */
  this.bsNoun = function () {
    return faker.random.arrayElement(faker.definitions.company.bs_noun);
  };
};

module['exports'] = Company;

},{}],34:[function(require,module,exports){
"use strict";

/**
 *
 * @namespace faker.database
 */
var Database = function Database(faker) {
  var self = this;
  /**
   * column
   *
   * @method faker.database.column
   */
  self.column = function () {
    return faker.random.arrayElement(faker.definitions.database.column);
  };

  self.column.schema = {
    "description": "Generates a column name.",
    "sampleResults": ["id", "title", "createdAt"]
  };

  /**
   * type
   *
   * @method faker.database.type
   */
  self.type = function () {
    return faker.random.arrayElement(faker.definitions.database.type);
  };

  self.type.schema = {
    "description": "Generates a column type.",
    "sampleResults": ["byte", "int", "varchar", "timestamp"]
  };

  /**
   * collation
   *
   * @method faker.database.collation
   */
  self.collation = function () {
    return faker.random.arrayElement(faker.definitions.database.collation);
  };

  self.collation.schema = {
    "description": "Generates a collation.",
    "sampleResults": ["utf8_unicode_ci", "utf8_bin"]
  };

  /**
   * engine
   *
   * @method faker.database.engine
   */
  self.engine = function () {
    return faker.random.arrayElement(faker.definitions.database.engine);
  };

  self.engine.schema = {
    "description": "Generates a storage engine.",
    "sampleResults": ["MyISAM", "InnoDB"]
  };
};

module["exports"] = Database;

},{}],35:[function(require,module,exports){
'use strict';

/**
 *
 * @namespace faker.date
 */
var _Date = function _Date(faker) {
    var self = this;
    /**
     * past
     *
     * @method faker.date.past
     * @param {number} years
     * @param {date} refDate
     */
    self.past = function (years, refDate) {
        var date = refDate ? new Date(Date.parse(refDate)) : new Date();
        var range = {
            min: 1000,
            max: (years || 1) * 365 * 24 * 3600 * 1000
        };

        var past = date.getTime();
        past -= faker.random.number(range); // some time from now to N years ago, in milliseconds
        date.setTime(past);

        return date;
    };

    /**
     * future
     *
     * @method faker.date.future
     * @param {number} years
     * @param {date} refDate
     */
    self.future = function (years, refDate) {
        var date = refDate ? new Date(Date.parse(refDate)) : new Date();
        var range = {
            min: 1000,
            max: (years || 1) * 365 * 24 * 3600 * 1000
        };

        var future = date.getTime();
        future += faker.random.number(range); // some time from now to N years later, in milliseconds
        date.setTime(future);

        return date;
    };

    /**
     * between
     *
     * @method faker.date.between
     * @param {date} from
     * @param {date} to
     */
    self.between = function (from, to) {
        var fromMilli = Date.parse(from);
        var dateOffset = faker.random.number(Date.parse(to) - fromMilli);

        var newDate = new Date(fromMilli + dateOffset);

        return newDate;
    };

    /**
     * recent
     *
     * @method faker.date.recent
     * @param {number} days
     */
    self.recent = function (days) {
        var date = new Date();
        var range = {
            min: 1000,
            max: (days || 1) * 24 * 3600 * 1000
        };

        var future = date.getTime();
        future -= faker.random.number(range); // some time from now to N days ago, in milliseconds
        date.setTime(future);

        return date;
    };

    /**
     * month
     *
     * @method faker.date.month
     * @param {object} options
     */
    self.month = function (options) {
        options = options || {};

        var type = 'wide';
        if (options.abbr) {
            type = 'abbr';
        }
        if (options.context && typeof faker.definitions.date.month[type + '_context'] !== 'undefined') {
            type += '_context';
        }

        var source = faker.definitions.date.month[type];

        return faker.random.arrayElement(source);
    };

    /**
     * weekday
     *
     * @param {object} options
     * @method faker.date.weekday
     */
    self.weekday = function (options) {
        options = options || {};

        var type = 'wide';
        if (options.abbr) {
            type = 'abbr';
        }
        if (options.context && typeof faker.definitions.date.weekday[type + '_context'] !== 'undefined') {
            type += '_context';
        }

        var source = faker.definitions.date.weekday[type];

        return faker.random.arrayElement(source);
    };

    return self;
};

module['exports'] = _Date;

},{}],36:[function(require,module,exports){
'use strict';

/*
  fake.js - generator method for combining faker methods based on string input

*/

function Fake(faker) {

  /**
   * Generator method for combining faker methods based on string input
   *
   * __Example:__
   *
   * ```
   * console.log(faker.fake('{{name.lastName}}, {{name.firstName}} {{name.suffix}}'));
   * //outputs: "Marks, Dean Sr."
   * ```
   *
   * This will interpolate the format string with the value of methods
   * [name.lastName]{@link faker.name.lastName}, [name.firstName]{@link faker.name.firstName},
   * and [name.suffix]{@link faker.name.suffix}
   *
   * @method faker.fake
   * @param {string} str
   */
  this.fake = function fake(str) {
    // setup default response as empty string
    var res = '';

    // if incoming str parameter is not provided, return error message
    if (typeof str !== 'string' || str.length === 0) {
      res = 'string parameter is required!';
      return res;
    }

    // find first matching {{ and }}
    var start = str.search('{{');
    var end = str.search('}}');

    // if no {{ and }} is found, we are done
    if (start === -1 && end === -1) {
      return str;
    }

    // console.log('attempting to parse', str);

    // extract method name from between the {{ }} that we found
    // for example: {{name.firstName}}
    var token = str.substr(start + 2, end - start - 2);
    var method = token.replace('}}', '').replace('{{', '');

    // console.log('method', method)

    // extract method parameters
    var regExp = /\(([^)]+)\)/;
    var matches = regExp.exec(method);
    var parameters = '';
    if (matches) {
      method = method.replace(regExp, '');
      parameters = matches[1];
    }

    // split the method into module and function
    var parts = method.split('.');

    if (typeof faker[parts[0]] === "undefined") {
      throw new Error('Invalid module: ' + parts[0]);
    }

    if (typeof faker[parts[0]][parts[1]] === "undefined") {
      throw new Error('Invalid method: ' + parts[0] + "." + parts[1]);
    }

    // assign the function from the module.function namespace
    var fn = faker[parts[0]][parts[1]];

    // If parameters are populated here, they are always going to be of string type
    // since we might actually be dealing with an object or array,
    // we always attempt to the parse the incoming parameters into JSON
    var params;
    // Note: we experience a small performance hit here due to JSON.parse try / catch
    // If anyone actually needs to optimize this specific code path, please open a support issue on github
    try {
      params = JSON.parse(parameters);
    } catch (err) {
      // since JSON.parse threw an error, assume parameters was actually a string
      params = parameters;
    }

    var result;
    if (typeof params === "string" && params.length === 0) {
      result = fn.call(this);
    } else {
      result = fn.call(this, params);
    }

    // replace the found tag with the returned fake value
    res = str.replace('{{' + token + '}}', result);

    // return the response recursively until we are done finding all tags
    return fake(res);
  };

  return this;
}

module['exports'] = Fake;

},{}],37:[function(require,module,exports){
'use strict';

/**
 * @namespace faker.finance
 */
var Finance = function Finance(faker) {
    var ibanLib = require("./iban");
    var Helpers = faker.helpers,
        self = this;

    /**
     * account
     *
     * @method faker.finance.account
     * @param {number} length
     */
    self.account = function (length) {

        length = length || 8;

        var template = '';

        for (var i = 0; i < length; i++) {
            template = template + '#';
        }
        length = null;
        return Helpers.replaceSymbolWithNumber(template);
    };

    /**
     * accountName
     *
     * @method faker.finance.accountName
     */
    self.accountName = function () {

        return [Helpers.randomize(faker.definitions.finance.account_type), 'Account'].join(' ');
    };

    /**
     * mask
     *
     * @method faker.finance.mask
     * @param {number} length
     * @param {boolean} parens
     * @param {boolean} ellipsis
     */
    self.mask = function (length, parens, ellipsis) {

        //set defaults
        length = length == 0 || !length || typeof length == 'undefined' ? 4 : length;
        parens = parens === null ? true : parens;
        ellipsis = ellipsis === null ? true : ellipsis;

        //create a template for length
        var template = '';

        for (var i = 0; i < length; i++) {
            template = template + '#';
        }

        //prefix with ellipsis
        template = ellipsis ? ['...', template].join('') : template;

        template = parens ? ['(', template, ')'].join('') : template;

        //generate random numbers
        template = Helpers.replaceSymbolWithNumber(template);

        return template;
    };

    //min and max take in minimum and maximum amounts, dec is the decimal place you want rounded to, symbol is $, €, £, etc
    //NOTE: this returns a string representation of the value, if you want a number use parseFloat and no symbol

    /**
     * amount
     *
     * @method faker.finance.amount
     * @param {number} min
     * @param {number} max
     * @param {number} dec
     * @param {string} symbol
     *
     * @return {string}
     */
    self.amount = function (min, max, dec, symbol) {

        min = min || 0;
        max = max || 1000;
        dec = dec === undefined ? 2 : dec;
        symbol = symbol || '';
        var randValue = faker.random.number({ max: max, min: min, precision: Math.pow(10, -dec) });

        return symbol + randValue.toFixed(dec);
    };

    /**
     * transactionType
     *
     * @method faker.finance.transactionType
     */
    self.transactionType = function () {
        return Helpers.randomize(faker.definitions.finance.transaction_type);
    };

    /**
     * currencyCode
     *
     * @method faker.finance.currencyCode
     */
    self.currencyCode = function () {
        return faker.random.objectElement(faker.definitions.finance.currency)['code'];
    };

    /**
     * currencyName
     *
     * @method faker.finance.currencyName
     */
    self.currencyName = function () {
        return faker.random.objectElement(faker.definitions.finance.currency, 'key');
    };

    /**
     * currencySymbol
     *
     * @method faker.finance.currencySymbol
     */
    self.currencySymbol = function () {
        var symbol;

        while (!symbol) {
            symbol = faker.random.objectElement(faker.definitions.finance.currency)['symbol'];
        }
        return symbol;
    };

    /**
     * bitcoinAddress
     *
     * @method  faker.finance.bitcoinAddress
     */
    self.bitcoinAddress = function () {
        var addressLength = faker.random.number({ min: 27, max: 34 });

        var address = faker.random.arrayElement(['1', '3']);

        for (var i = 0; i < addressLength - 1; i++) {
            address += faker.random.alphaNumeric().toUpperCase();
        }return address;
    };

    /**
     * iban
     *
     * @method  faker.finance.iban
     */
    self.iban = function (formatted) {
        var ibanFormat = faker.random.arrayElement(ibanLib.formats);
        var s = "";
        var count = 0;
        for (var b = 0; b < ibanFormat.bban.length; b++) {
            var bban = ibanFormat.bban[b];
            var c = bban.count;
            count += bban.count;
            while (c > 0) {
                if (bban.type == "a") {
                    s += faker.random.arrayElement(ibanLib.alpha);
                } else if (bban.type == "c") {
                    if (faker.random.number(100) < 80) {
                        s += faker.random.number(9);
                    } else {
                        s += faker.random.arrayElement(ibanLib.alpha);
                    }
                } else {
                    if (c >= 3 && faker.random.number(100) < 30) {
                        if (faker.random.boolean()) {
                            s += faker.random.arrayElement(ibanLib.pattern100);
                            c -= 2;
                        } else {
                            s += faker.random.arrayElement(ibanLib.pattern10);
                            c--;
                        }
                    } else {
                        s += faker.random.number(9);
                    }
                }
                c--;
            }
            s = s.substring(0, count);
        }
        var checksum = 98 - ibanLib.mod97(ibanLib.toDigitString(s + ibanFormat.country + "00"));
        if (checksum < 10) {
            checksum = "0" + checksum;
        }
        var iban = ibanFormat.country + checksum + s;
        return formatted ? iban.match(/.{1,4}/g).join(" ") : iban;
    };

    /**
     * bic
     *
     * @method  faker.finance.bic
     */
    self.bic = function () {
        var vowels = ["A", "E", "I", "O", "U"];
        var prob = faker.random.number(100);
        return Helpers.replaceSymbols("???") + faker.random.arrayElement(vowels) + faker.random.arrayElement(ibanLib.iso3166) + Helpers.replaceSymbols("?") + "1" + (prob < 10 ? Helpers.replaceSymbols("?" + faker.random.arrayElement(vowels) + "?") : prob < 40 ? Helpers.replaceSymbols("###") : "");
    };
};

module['exports'] = Finance;

},{"./iban":40}],38:[function(require,module,exports){
"use strict";

/**
 *
 * @namespace faker.hacker
 */
var Hacker = function Hacker(faker) {
  var self = this;

  /**
   * abbreviation
   *
   * @method faker.hacker.abbreviation
   */
  self.abbreviation = function () {
    return faker.random.arrayElement(faker.definitions.hacker.abbreviation);
  };

  /**
   * adjective
   *
   * @method faker.hacker.adjective
   */
  self.adjective = function () {
    return faker.random.arrayElement(faker.definitions.hacker.adjective);
  };

  /**
   * noun
   *
   * @method faker.hacker.noun
   */
  self.noun = function () {
    return faker.random.arrayElement(faker.definitions.hacker.noun);
  };

  /**
   * verb
   *
   * @method faker.hacker.verb
   */
  self.verb = function () {
    return faker.random.arrayElement(faker.definitions.hacker.verb);
  };

  /**
   * ingverb
   *
   * @method faker.hacker.ingverb
   */
  self.ingverb = function () {
    return faker.random.arrayElement(faker.definitions.hacker.ingverb);
  };

  /**
   * phrase
   *
   * @method faker.hacker.phrase
   */
  self.phrase = function () {

    var data = {
      abbreviation: self.abbreviation,
      adjective: self.adjective,
      ingverb: self.ingverb,
      noun: self.noun,
      verb: self.verb
    };

    var phrase = faker.random.arrayElement(["If we {{verb}} the {{noun}}, we can get to the {{abbreviation}} {{noun}} through the {{adjective}} {{abbreviation}} {{noun}}!", "We need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!", "Try to {{verb}} the {{abbreviation}} {{noun}}, maybe it will {{verb}} the {{adjective}} {{noun}}!", "You can't {{verb}} the {{noun}} without {{ingverb}} the {{adjective}} {{abbreviation}} {{noun}}!", "Use the {{adjective}} {{abbreviation}} {{noun}}, then you can {{verb}} the {{adjective}} {{noun}}!", "The {{abbreviation}} {{noun}} is down, {{verb}} the {{adjective}} {{noun}} so we can {{verb}} the {{abbreviation}} {{noun}}!", "{{ingverb}} the {{noun}} won't do anything, we need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!", "I'll {{verb}} the {{adjective}} {{abbreviation}} {{noun}}, that should {{noun}} the {{abbreviation}} {{noun}}!"]);

    return faker.helpers.mustache(phrase, data);
  };

  return self;
};

module['exports'] = Hacker;

},{}],39:[function(require,module,exports){
"use strict";

/**
 *
 * @namespace faker.helpers
 */
var Helpers = function Helpers(faker) {

    var self = this;

    /**
     * backword-compatibility
     *
     * @method faker.helpers.randomize
     * @param {array} array
     */
    self.randomize = function (array) {
        array = array || ["a", "b", "c"];
        return faker.random.arrayElement(array);
    };

    /**
     * slugifies string
     *
     * @method faker.helpers.slugify
     * @param {string} string
     */
    self.slugify = function (string) {
        string = string || "";
        return string.replace(/ /g, '-').replace(/[^\w\.\-]+/g, '');
    };

    /**
     * parses string for a symbol and replace it with a random number from 1-10
     *
     * @method faker.helpers.replaceSymbolWithNumber
     * @param {string} string
     * @param {string} symbol defaults to `"#"`
     */
    self.replaceSymbolWithNumber = function (string, symbol) {
        string = string || "";
        // default symbol is '#'
        if (symbol === undefined) {
            symbol = '#';
        }

        var str = '';
        for (var i = 0; i < string.length; i++) {
            if (string.charAt(i) == symbol) {
                str += faker.random.number(9);
            } else {
                str += string.charAt(i);
            }
        }
        return str;
    };

    /**
     * parses string for symbols (numbers or letters) and replaces them appropriately
     *
     * @method faker.helpers.replaceSymbols
     * @param {string} string
     */
    self.replaceSymbols = function (string) {
        string = string || "";
        var alpha = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
        var str = '';

        for (var i = 0; i < string.length; i++) {
            if (string.charAt(i) == "#") {
                str += faker.random.number(9);
            } else if (string.charAt(i) == "?") {
                str += faker.random.arrayElement(alpha);
            } else {
                str += string.charAt(i);
            }
        }
        return str;
    };

    /**
     * takes an array and returns it randomized
     *
     * @method faker.helpers.shuffle
     * @param {array} o
     */
    self.shuffle = function (o) {
        if (typeof o === 'undefined' || o.length === 0) {
            return [];
        }
        o = o || ["a", "b", "c"];
        for (var j, x, i = o.length - 1; i; j = faker.random.number(i), x = o[--i], o[i] = o[j], o[j] = x) {}
        return o;
    };

    /**
     * mustache
     *
     * @method faker.helpers.mustache
     * @param {string} str
     * @param {object} data
     */
    self.mustache = function (str, data) {
        if (typeof str === 'undefined') {
            return '';
        }
        for (var p in data) {
            var re = new RegExp('{{' + p + '}}', 'g');
            str = str.replace(re, data[p]);
        }
        return str;
    };

    /**
     * createCard
     *
     * @method faker.helpers.createCard
     */
    self.createCard = function () {
        return {
            "name": faker.name.findName(),
            "username": faker.internet.userName(),
            "email": faker.internet.email(),
            "address": {
                "streetA": faker.address.streetName(),
                "streetB": faker.address.streetAddress(),
                "streetC": faker.address.streetAddress(true),
                "streetD": faker.address.secondaryAddress(),
                "city": faker.address.city(),
                "state": faker.address.state(),
                "country": faker.address.country(),
                "zipcode": faker.address.zipCode(),
                "geo": {
                    "lat": faker.address.latitude(),
                    "lng": faker.address.longitude()
                }
            },
            "phone": faker.phone.phoneNumber(),
            "website": faker.internet.domainName(),
            "company": {
                "name": faker.company.companyName(),
                "catchPhrase": faker.company.catchPhrase(),
                "bs": faker.company.bs()
            },
            "posts": [{
                "words": faker.lorem.words(),
                "sentence": faker.lorem.sentence(),
                "sentences": faker.lorem.sentences(),
                "paragraph": faker.lorem.paragraph()
            }, {
                "words": faker.lorem.words(),
                "sentence": faker.lorem.sentence(),
                "sentences": faker.lorem.sentences(),
                "paragraph": faker.lorem.paragraph()
            }, {
                "words": faker.lorem.words(),
                "sentence": faker.lorem.sentence(),
                "sentences": faker.lorem.sentences(),
                "paragraph": faker.lorem.paragraph()
            }],
            "accountHistory": [faker.helpers.createTransaction(), faker.helpers.createTransaction(), faker.helpers.createTransaction()]
        };
    };

    /**
     * contextualCard
     *
     * @method faker.helpers.contextualCard
     */
    self.contextualCard = function () {
        var name = faker.name.firstName(),
            userName = faker.internet.userName(name);
        return {
            "name": name,
            "username": userName,
            "avatar": faker.internet.avatar(),
            "email": faker.internet.email(userName),
            "dob": faker.date.past(50, new Date("Sat Sep 20 1992 21:35:02 GMT+0200 (CEST)")),
            "phone": faker.phone.phoneNumber(),
            "address": {
                "street": faker.address.streetName(true),
                "suite": faker.address.secondaryAddress(),
                "city": faker.address.city(),
                "zipcode": faker.address.zipCode(),
                "geo": {
                    "lat": faker.address.latitude(),
                    "lng": faker.address.longitude()
                }
            },
            "website": faker.internet.domainName(),
            "company": {
                "name": faker.company.companyName(),
                "catchPhrase": faker.company.catchPhrase(),
                "bs": faker.company.bs()
            }
        };
    };

    /**
     * userCard
     *
     * @method faker.helpers.userCard
     */
    self.userCard = function () {
        return {
            "name": faker.name.findName(),
            "username": faker.internet.userName(),
            "email": faker.internet.email(),
            "address": {
                "street": faker.address.streetName(true),
                "suite": faker.address.secondaryAddress(),
                "city": faker.address.city(),
                "zipcode": faker.address.zipCode(),
                "geo": {
                    "lat": faker.address.latitude(),
                    "lng": faker.address.longitude()
                }
            },
            "phone": faker.phone.phoneNumber(),
            "website": faker.internet.domainName(),
            "company": {
                "name": faker.company.companyName(),
                "catchPhrase": faker.company.catchPhrase(),
                "bs": faker.company.bs()
            }
        };
    };

    /**
     * createTransaction
     *
     * @method faker.helpers.createTransaction
     */
    self.createTransaction = function () {
        return {
            "amount": faker.finance.amount(),
            "date": new Date(2012, 1, 2), //TODO: add a ranged date method
            "business": faker.company.companyName(),
            "name": [faker.finance.accountName(), faker.finance.mask()].join(' '),
            "type": self.randomize(faker.definitions.finance.transaction_type),
            "account": faker.finance.account()
        };
    };

    return self;
};

/*
String.prototype.capitalize = function () { //v1.0
    return this.replace(/\w+/g, function (a) {
        return a.charAt(0).toUpperCase() + a.substr(1).toLowerCase();
    });
};
*/

module['exports'] = Helpers;

},{}],40:[function(require,module,exports){
'use strict';

module["exports"] = {
  alpha: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],
  pattern10: ["01", "02", "03", "04", "05", "06", "07", "08", "09"],
  pattern100: ["001", "002", "003", "004", "005", "006", "007", "008", "009"],
  toDigitString: function toDigitString(str) {
    return str.replace(/[A-Z]/gi, function (match) {
      return match.toUpperCase().charCodeAt(0) - 55;
    });
  },
  mod97: function mod97(digitStr) {
    var m = 0;
    for (var i = 0; i < digitStr.length; i++) {
      m = (m * 10 + (digitStr[i] | 0)) % 97;
    }
    return m;
  },
  formats: [{
    country: "AL",
    total: 28,
    bban: [{
      type: "n",
      count: 8
    }, {
      type: "c",
      count: 16
    }],
    format: "ALkk bbbs sssx cccc cccc cccc cccc"
  }, {
    country: "AD",
    total: 24,
    bban: [{
      type: "n",
      count: 8
    }, {
      type: "c",
      count: 12
    }],
    format: "ADkk bbbb ssss cccc cccc cccc"
  }, {
    country: "AT",
    total: 20,
    bban: [{
      type: "n",
      count: 5
    }, {
      type: "n",
      count: 11
    }],
    format: "ATkk bbbb bccc cccc cccc"
  }, {
    country: "AZ",
    total: 28,
    bban: [{
      type: "c",
      count: 4
    }, {
      type: "n",
      count: 20
    }],
    format: "AZkk bbbb cccc cccc cccc cccc cccc"
  }, {
    country: "BH",
    total: 22,
    bban: [{
      type: "a",
      count: 4
    }, {
      type: "c",
      count: 14
    }],
    format: "BHkk bbbb cccc cccc cccc cc"
  }, {
    country: "BE",
    total: 16,
    bban: [{
      type: "n",
      count: 3
    }, {
      type: "n",
      count: 9
    }],
    format: "BEkk bbbc cccc ccxx"
  }, {
    country: "BA",
    total: 20,
    bban: [{
      type: "n",
      count: 6
    }, {
      type: "n",
      count: 10
    }],
    format: "BAkk bbbs sscc cccc ccxx"
  }, {
    country: "BR",
    total: 29,
    bban: [{
      type: "n",
      count: 13
    }, {
      type: "n",
      count: 10
    }, {
      type: "a",
      count: 1
    }, {
      type: "c",
      count: 1
    }],
    format: "BRkk bbbb bbbb ssss sccc cccc ccct n"
  }, {
    country: "BG",
    total: 22,
    bban: [{
      type: "a",
      count: 4
    }, {
      type: "n",
      count: 6
    }, {
      type: "c",
      count: 8
    }],
    format: "BGkk bbbb ssss ddcc cccc cc"
  }, {
    country: "CR",
    total: 21,
    bban: [{
      type: "n",
      count: 3
    }, {
      type: "n",
      count: 14
    }],
    format: "CRkk bbbc cccc cccc cccc c"
  }, {
    country: "HR",
    total: 21,
    bban: [{
      type: "n",
      count: 7
    }, {
      type: "n",
      count: 10
    }],
    format: "HRkk bbbb bbbc cccc cccc c"
  }, {
    country: "CY",
    total: 28,
    bban: [{
      type: "n",
      count: 8
    }, {
      type: "c",
      count: 16
    }],
    format: "CYkk bbbs ssss cccc cccc cccc cccc"
  }, {
    country: "CZ",
    total: 24,
    bban: [{
      type: "n",
      count: 10
    }, {
      type: "n",
      count: 10
    }],
    format: "CZkk bbbb ssss sscc cccc cccc"
  }, {
    country: "DK",
    total: 18,
    bban: [{
      type: "n",
      count: 4
    }, {
      type: "n",
      count: 10
    }],
    format: "DKkk bbbb cccc cccc cc"
  }, {
    country: "DO",
    total: 28,
    bban: [{
      type: "a",
      count: 4
    }, {
      type: "n",
      count: 20
    }],
    format: "DOkk bbbb cccc cccc cccc cccc cccc"
  }, {
    country: "TL",
    total: 23,
    bban: [{
      type: "n",
      count: 3
    }, {
      type: "n",
      count: 16
    }],
    format: "TLkk bbbc cccc cccc cccc cxx"
  }, {
    country: "EE",
    total: 20,
    bban: [{
      type: "n",
      count: 4
    }, {
      type: "n",
      count: 12
    }],
    format: "EEkk bbss cccc cccc cccx"
  }, {
    country: "FO",
    total: 18,
    bban: [{
      type: "n",
      count: 4
    }, {
      type: "n",
      count: 10
    }],
    format: "FOkk bbbb cccc cccc cx"
  }, {
    country: "FI",
    total: 18,
    bban: [{
      type: "n",
      count: 6
    }, {
      type: "n",
      count: 8
    }],
    format: "FIkk bbbb bbcc cccc cx"
  }, {
    country: "FR",
    total: 27,
    bban: [{
      type: "n",
      count: 10
    }, {
      type: "c",
      count: 11
    }, {
      type: "n",
      count: 2
    }],
    format: "FRkk bbbb bggg ggcc cccc cccc cxx"
  }, {
    country: "GE",
    total: 22,
    bban: [{
      type: "c",
      count: 2
    }, {
      type: "n",
      count: 16
    }],
    format: "GEkk bbcc cccc cccc cccc cc"
  }, {
    country: "DE",
    total: 22,
    bban: [{
      type: "n",
      count: 8
    }, {
      type: "n",
      count: 10
    }],
    format: "DEkk bbbb bbbb cccc cccc cc"
  }, {
    country: "GI",
    total: 23,
    bban: [{
      type: "a",
      count: 4
    }, {
      type: "c",
      count: 15
    }],
    format: "GIkk bbbb cccc cccc cccc ccc"
  }, {
    country: "GR",
    total: 27,
    bban: [{
      type: "n",
      count: 7
    }, {
      type: "c",
      count: 16
    }],
    format: "GRkk bbbs sssc cccc cccc cccc ccc"
  }, {
    country: "GL",
    total: 18,
    bban: [{
      type: "n",
      count: 4
    }, {
      type: "n",
      count: 10
    }],
    format: "GLkk bbbb cccc cccc cc"
  }, {
    country: "GT",
    total: 28,
    bban: [{
      type: "c",
      count: 4
    }, {
      type: "c",
      count: 4
    }, {
      type: "c",
      count: 16
    }],
    format: "GTkk bbbb mmtt cccc cccc cccc cccc"
  }, {
    country: "HU",
    total: 28,
    bban: [{
      type: "n",
      count: 8
    }, {
      type: "n",
      count: 16
    }],
    format: "HUkk bbbs sssk cccc cccc cccc cccx"
  }, {
    country: "IS",
    total: 26,
    bban: [{
      type: "n",
      count: 6
    }, {
      type: "n",
      count: 16
    }],
    format: "ISkk bbbb sscc cccc iiii iiii ii"
  }, {
    country: "IE",
    total: 22,
    bban: [{
      type: "c",
      count: 4
    }, {
      type: "n",
      count: 6
    }, {
      type: "n",
      count: 8
    }],
    format: "IEkk aaaa bbbb bbcc cccc cc"
  }, {
    country: "IL",
    total: 23,
    bban: [{
      type: "n",
      count: 6
    }, {
      type: "n",
      count: 13
    }],
    format: "ILkk bbbn nncc cccc cccc ccc"
  }, {
    country: "IT",
    total: 27,
    bban: [{
      type: "a",
      count: 1
    }, {
      type: "n",
      count: 10
    }, {
      type: "c",
      count: 12
    }],
    format: "ITkk xaaa aabb bbbc cccc cccc ccc"
  }, {
    country: "JO",
    total: 30,
    bban: [{
      type: "a",
      count: 4
    }, {
      type: "n",
      count: 4
    }, {
      type: "n",
      count: 18
    }],
    format: "JOkk bbbb nnnn cccc cccc cccc cccc cc"
  }, {
    country: "KZ",
    total: 20,
    bban: [{
      type: "n",
      count: 3
    }, {
      type: "c",
      count: 13
    }],
    format: "KZkk bbbc cccc cccc cccc"
  }, {
    country: "XK",
    total: 20,
    bban: [{
      type: "n",
      count: 4
    }, {
      type: "n",
      count: 12
    }],
    format: "XKkk bbbb cccc cccc cccc"
  }, {
    country: "KW",
    total: 30,
    bban: [{
      type: "a",
      count: 4
    }, {
      type: "c",
      count: 22
    }],
    format: "KWkk bbbb cccc cccc cccc cccc cccc cc"
  }, {
    country: "LV",
    total: 21,
    bban: [{
      type: "a",
      count: 4
    }, {
      type: "c",
      count: 13
    }],
    format: "LVkk bbbb cccc cccc cccc c"
  }, {
    country: "LB",
    total: 28,
    bban: [{
      type: "n",
      count: 4
    }, {
      type: "c",
      count: 20
    }],
    format: "LBkk bbbb cccc cccc cccc cccc cccc"
  }, {
    country: "LI",
    total: 21,
    bban: [{
      type: "n",
      count: 5
    }, {
      type: "c",
      count: 12
    }],
    format: "LIkk bbbb bccc cccc cccc c"
  }, {
    country: "LT",
    total: 20,
    bban: [{
      type: "n",
      count: 5
    }, {
      type: "n",
      count: 11
    }],
    format: "LTkk bbbb bccc cccc cccc"
  }, {
    country: "LU",
    total: 20,
    bban: [{
      type: "n",
      count: 3
    }, {
      type: "c",
      count: 13
    }],
    format: "LUkk bbbc cccc cccc cccc"
  }, {
    country: "MK",
    total: 19,
    bban: [{
      type: "n",
      count: 3
    }, {
      type: "c",
      count: 10
    }, {
      type: "n",
      count: 2
    }],
    format: "MKkk bbbc cccc cccc cxx"
  }, {
    country: "MT",
    total: 31,
    bban: [{
      type: "a",
      count: 4
    }, {
      type: "n",
      count: 5
    }, {
      type: "c",
      count: 18
    }],
    format: "MTkk bbbb ssss sccc cccc cccc cccc ccc"
  }, {
    country: "MR",
    total: 27,
    bban: [{
      type: "n",
      count: 10
    }, {
      type: "n",
      count: 13
    }],
    format: "MRkk bbbb bsss sscc cccc cccc cxx"
  }, {
    country: "MU",
    total: 30,
    bban: [{
      type: "a",
      count: 4
    }, {
      type: "n",
      count: 4
    }, {
      type: "n",
      count: 15
    }, {
      type: "a",
      count: 3
    }],
    format: "MUkk bbbb bbss cccc cccc cccc 000d dd"
  }, {
    country: "MC",
    total: 27,
    bban: [{
      type: "n",
      count: 10
    }, {
      type: "c",
      count: 11
    }, {
      type: "n",
      count: 2
    }],
    format: "MCkk bbbb bsss sscc cccc cccc cxx"
  }, {
    country: "MD",
    total: 24,
    bban: [{
      type: "c",
      count: 2
    }, {
      type: "c",
      count: 18
    }],
    format: "MDkk bbcc cccc cccc cccc cccc"
  }, {
    country: "ME",
    total: 22,
    bban: [{
      type: "n",
      count: 3
    }, {
      type: "n",
      count: 15
    }],
    format: "MEkk bbbc cccc cccc cccc xx"
  }, {
    country: "NL",
    total: 18,
    bban: [{
      type: "a",
      count: 4
    }, {
      type: "n",
      count: 10
    }],
    format: "NLkk bbbb cccc cccc cc"
  }, {
    country: "NO",
    total: 15,
    bban: [{
      type: "n",
      count: 4
    }, {
      type: "n",
      count: 7
    }],
    format: "NOkk bbbb cccc ccx"
  }, {
    country: "PK",
    total: 24,
    bban: [{
      type: "c",
      count: 4
    }, {
      type: "n",
      count: 16
    }],
    format: "PKkk bbbb cccc cccc cccc cccc"
  }, {
    country: "PS",
    total: 29,
    bban: [{
      type: "c",
      count: 4
    }, {
      type: "n",
      count: 9
    }, {
      type: "n",
      count: 12
    }],
    format: "PSkk bbbb xxxx xxxx xccc cccc cccc c"
  }, {
    country: "PL",
    total: 28,
    bban: [{
      type: "n",
      count: 8
    }, {
      type: "n",
      count: 16
    }],
    format: "PLkk bbbs sssx cccc cccc cccc cccc"
  }, {
    country: "PT",
    total: 25,
    bban: [{
      type: "n",
      count: 8
    }, {
      type: "n",
      count: 13
    }],
    format: "PTkk bbbb ssss cccc cccc cccx x"
  }, {
    country: "QA",
    total: 29,
    bban: [{
      type: "a",
      count: 4
    }, {
      type: "c",
      count: 21
    }],
    format: "QAkk bbbb cccc cccc cccc cccc cccc c"
  }, {
    country: "RO",
    total: 24,
    bban: [{
      type: "a",
      count: 4
    }, {
      type: "c",
      count: 16
    }],
    format: "ROkk bbbb cccc cccc cccc cccc"
  }, {
    country: "SM",
    total: 27,
    bban: [{
      type: "a",
      count: 1
    }, {
      type: "n",
      count: 10
    }, {
      type: "c",
      count: 12
    }],
    format: "SMkk xaaa aabb bbbc cccc cccc ccc"
  }, {
    country: "SA",
    total: 24,
    bban: [{
      type: "n",
      count: 2
    }, {
      type: "c",
      count: 18
    }],
    format: "SAkk bbcc cccc cccc cccc cccc"
  }, {
    country: "RS",
    total: 22,
    bban: [{
      type: "n",
      count: 3
    }, {
      type: "n",
      count: 15
    }],
    format: "RSkk bbbc cccc cccc cccc xx"
  }, {
    country: "SK",
    total: 24,
    bban: [{
      type: "n",
      count: 10
    }, {
      type: "n",
      count: 10
    }],
    format: "SKkk bbbb ssss sscc cccc cccc"
  }, {
    country: "SI",
    total: 19,
    bban: [{
      type: "n",
      count: 5
    }, {
      type: "n",
      count: 10
    }],
    format: "SIkk bbss sccc cccc cxx"
  }, {
    country: "ES",
    total: 24,
    bban: [{
      type: "n",
      count: 10
    }, {
      type: "n",
      count: 10
    }],
    format: "ESkk bbbb gggg xxcc cccc cccc"
  }, {
    country: "SE",
    total: 24,
    bban: [{
      type: "n",
      count: 3
    }, {
      type: "n",
      count: 17
    }],
    format: "SEkk bbbc cccc cccc cccc cccc"
  }, {
    country: "CH",
    total: 21,
    bban: [{
      type: "n",
      count: 5
    }, {
      type: "c",
      count: 12
    }],
    format: "CHkk bbbb bccc cccc cccc c"
  }, {
    country: "TN",
    total: 24,
    bban: [{
      type: "n",
      count: 5
    }, {
      type: "n",
      count: 15
    }],
    format: "TNkk bbss sccc cccc cccc cccc"
  }, {
    country: "TR",
    total: 26,
    bban: [{
      type: "n",
      count: 5
    }, {
      type: "c",
      count: 1
    }, {
      type: "c",
      count: 16
    }],
    format: "TRkk bbbb bxcc cccc cccc cccc cc"
  }, {
    country: "AE",
    total: 23,
    bban: [{
      type: "n",
      count: 3
    }, {
      type: "n",
      count: 16
    }],
    format: "AEkk bbbc cccc cccc cccc ccc"
  }, {
    country: "GB",
    total: 22,
    bban: [{
      type: "a",
      count: 4
    }, {
      type: "n",
      count: 6
    }, {
      type: "n",
      count: 8
    }],
    format: "GBkk bbbb ssss sscc cccc cc"
  }, {
    country: "VG",
    total: 24,
    bban: [{
      type: "c",
      count: 4
    }, {
      type: "n",
      count: 16
    }],
    format: "VGkk bbbb cccc cccc cccc cccc"
  }],
  iso3166: ["AC", "AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BU", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CE", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CP", "CR", "CS", "CS", "CU", "CV", "CW", "CX", "CY", "CZ", "DD", "DE", "DG", "DJ", "DK", "DM", "DO", "DZ", "EA", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "EU", "FI", "FJ", "FK", "FM", "FO", "FR", "FX", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "IC", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NT", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SU", "SV", "SX", "SY", "SZ", "TA", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "YU", "ZA", "ZM", "ZR", "ZW"]
};

},{}],41:[function(require,module,exports){
"use strict";

/**
 *
 * @namespace faker.image
 */
var Image = function Image(faker) {

  var self = this;

  /**
   * image
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.image
   */
  self.image = function (width, height, randomize) {
    var categories = ["abstract", "animals", "business", "cats", "city", "food", "nightlife", "fashion", "people", "nature", "sports", "technics", "transport"];
    return self[faker.random.arrayElement(categories)](width, height, randomize);
  };
  /**
   * avatar
   *
   * @method faker.image.avatar
   */
  self.avatar = function () {
    return faker.internet.avatar();
  };
  /**
   * imageUrl
   *
   * @param {number} width
   * @param {number} height
   * @param {string} category
   * @param {boolean} randomize
   * @method faker.image.imageUrl
   */
  self.imageUrl = function (width, height, category, randomize, https) {
    var width = width || 640;
    var height = height || 480;
    var protocol = 'http://';
    if (typeof https !== 'undefined' && https === true) {
      protocol = 'https://';
    }
    var url = protocol + 'lorempixel.com/' + width + '/' + height;
    if (typeof category !== 'undefined') {
      url += '/' + category;
    }

    if (randomize) {
      url += '?' + faker.random.number();
    }

    return url;
  };
  /**
   * abstract
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.abstract
   */
  self.abstract = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'abstract', randomize);
  };
  /**
   * animals
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.animals
   */
  self.animals = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'animals', randomize);
  };
  /**
   * business
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.business
   */
  self.business = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'business', randomize);
  };
  /**
   * cats
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.cats
   */
  self.cats = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'cats', randomize);
  };
  /**
   * city
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.city
   */
  self.city = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'city', randomize);
  };
  /**
   * food
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.food
   */
  self.food = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'food', randomize);
  };
  /**
   * nightlife
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.nightlife
   */
  self.nightlife = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'nightlife', randomize);
  };
  /**
   * fashion
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.fashion
   */
  self.fashion = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'fashion', randomize);
  };
  /**
   * people
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.people
   */
  self.people = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'people', randomize);
  };
  /**
   * nature
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.nature
   */
  self.nature = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'nature', randomize);
  };
  /**
   * sports
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.sports
   */
  self.sports = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'sports', randomize);
  };
  /**
   * technics
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.technics
   */
  self.technics = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'technics', randomize);
  };
  /**
   * transport
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.transport
   */
  self.transport = function (width, height, randomize) {
    return faker.image.imageUrl(width, height, 'transport', randomize);
  };
  /**
   * dataUri
   *
   * @param {number} width
   * @param {number} height
   * @method faker.image.dataurl
   */
  self.dataUri = function (width, height) {
    var rawPrefix = 'data:image/svg+xml;charset=UTF-8,';
    var svgString = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1" baseProfile="full" width="' + width + '" height="' + height + '"> <rect width="100%" height="100%" fill="grey"/>  <text x="0" y="20" font-size="20" text-anchor="start" fill="white">' + width + 'x' + height + '</text> </svg>';
    return rawPrefix + encodeURIComponent(svgString);
  };
};

module["exports"] = Image;

},{}],42:[function(require,module,exports){
"use strict";

/*

   this index.js file is used for including the faker library as a CommonJS module, instead of a bundle

   you can include the faker library into your existing node.js application by requiring the entire /faker directory

    var faker = require(./faker);
    var randomName = faker.name.findName();

   you can also simply include the "faker.js" file which is the auto-generated bundled version of the faker library

    var faker = require(./customAppPath/faker);
    var randomName = faker.name.findName();


  if you plan on modifying the faker library you should be performing your changes in the /lib/ directory

*/

/**
 *
 * @namespace faker
 */
function Faker(opts) {

  var self = this;

  opts = opts || {};

  // assign options
  var locales = self.locales || opts.locales || {};
  var locale = self.locale || opts.locale || "en";
  var localeFallback = self.localeFallback || opts.localeFallback || "en";

  self.locales = locales;
  self.locale = locale;
  self.localeFallback = localeFallback;

  self.definitions = {};

  function bindAll(obj) {
    Object.keys(obj).forEach(function (meth) {
      if (typeof obj[meth] === 'function') {
        obj[meth] = obj[meth].bind(obj);
      }
    });
    return obj;
  }

  var Fake = require('./fake');
  self.fake = new Fake(self).fake;

  var Random = require('./random');
  self.random = bindAll(new Random(self));

  var Helpers = require('./helpers');
  self.helpers = new Helpers(self);

  var Name = require('./name');
  self.name = bindAll(new Name(self));

  var Address = require('./address');
  self.address = bindAll(new Address(self));

  var Company = require('./company');
  self.company = bindAll(new Company(self));

  var Finance = require('./finance');
  self.finance = bindAll(new Finance(self));

  var Image = require('./image');
  self.image = bindAll(new Image(self));

  var Lorem = require('./lorem');
  self.lorem = bindAll(new Lorem(self));

  var Hacker = require('./hacker');
  self.hacker = bindAll(new Hacker(self));

  var Internet = require('./internet');
  self.internet = bindAll(new Internet(self));

  var Database = require('./database');
  self.database = bindAll(new Database(self));

  var Phone = require('./phone_number');
  self.phone = bindAll(new Phone(self));

  var _Date = require('./date');
  self.date = bindAll(new _Date(self));

  var Commerce = require('./commerce');
  self.commerce = bindAll(new Commerce(self));

  var System = require('./system');
  self.system = bindAll(new System(self));

  var _definitions = {
    "name": ["first_name", "last_name", "prefix", "suffix", "title", "male_first_name", "female_first_name", "male_middle_name", "female_middle_name", "male_last_name", "female_last_name"],
    "address": ["city_prefix", "city_suffix", "street_suffix", "county", "country", "country_code", "state", "state_abbr", "street_prefix", "postcode"],
    "company": ["adjective", "noun", "descriptor", "bs_adjective", "bs_noun", "bs_verb", "suffix"],
    "lorem": ["words"],
    "hacker": ["abbreviation", "adjective", "noun", "verb", "ingverb"],
    "phone_number": ["formats"],
    "finance": ["account_type", "transaction_type", "currency", "iban"],
    "internet": ["avatar_uri", "domain_suffix", "free_email", "example_email", "password"],
    "commerce": ["color", "department", "product_name", "price", "categories"],
    "database": ["collation", "column", "engine", "type"],
    "system": ["mimeTypes"],
    "date": ["month", "weekday"],
    "title": "",
    "separator": ""
  };

  // Create a Getter for all definitions.foo.bar properties
  Object.keys(_definitions).forEach(function (d) {
    if (typeof self.definitions[d] === "undefined") {
      self.definitions[d] = {};
    }

    if (typeof _definitions[d] === "string") {
      self.definitions[d] = _definitions[d];
      return;
    }

    _definitions[d].forEach(function (p) {
      Object.defineProperty(self.definitions[d], p, {
        get: function get() {
          if (typeof self.locales[self.locale][d] === "undefined" || typeof self.locales[self.locale][d][p] === "undefined") {
            // certain localization sets contain less data then others.
            // in the case of a missing definition, use the default localeFallback to substitute the missing set data
            // throw new Error('unknown property ' + d + p)
            return self.locales[localeFallback][d][p];
          } else {
            // return localized data
            return self.locales[self.locale][d][p];
          }
        }
      });
    });
  });
};

Faker.prototype.seed = function (value) {
  var Random = require('./random');
  this.seedValue = value;
  this.random = new Random(this, this.seedValue);
};
module['exports'] = Faker;

},{"./address":31,"./commerce":32,"./company":33,"./database":34,"./date":35,"./fake":36,"./finance":37,"./hacker":38,"./helpers":39,"./image":41,"./internet":43,"./lorem":146,"./name":147,"./phone_number":148,"./random":149,"./system":150}],43:[function(require,module,exports){
"use strict";

var random_ua = require('../vendor/user-agent');

/**
 *
 * @namespace faker.internet
 */
var Internet = function Internet(faker) {
  var self = this;
  /**
   * avatar
   *
   * @method faker.internet.avatar
   */
  self.avatar = function () {
    return faker.random.arrayElement(faker.definitions.internet.avatar_uri);
  };

  self.avatar.schema = {
    "description": "Generates a URL for an avatar.",
    "sampleResults": ["https://s3.amazonaws.com/uifaces/faces/twitter/igorgarybaldi/128.jpg"]
  };

  /**
   * email
   *
   * @method faker.internet.email
   * @param {string} firstName
   * @param {string} lastName
   * @param {string} provider
   */
  self.email = function (firstName, lastName, provider) {
    provider = provider || faker.random.arrayElement(faker.definitions.internet.free_email);
    return faker.helpers.slugify(faker.internet.userName(firstName, lastName)) + "@" + provider;
  };

  self.email.schema = {
    "description": "Generates a valid email address based on optional input criteria",
    "sampleResults": ["foo.bar@gmail.com"],
    "properties": {
      "firstName": {
        "type": "string",
        "required": false,
        "description": "The first name of the user"
      },
      "lastName": {
        "type": "string",
        "required": false,
        "description": "The last name of the user"
      },
      "provider": {
        "type": "string",
        "required": false,
        "description": "The domain of the user"
      }
    }
  };
  /**
   * exampleEmail
   *
   * @method faker.internet.exampleEmail
   * @param {string} firstName
   * @param {string} lastName
   */
  self.exampleEmail = function (firstName, lastName) {
    var provider = faker.random.arrayElement(faker.definitions.internet.example_email);
    return self.email(firstName, lastName, provider);
  };

  /**
   * userName
   *
   * @method faker.internet.userName
   * @param {string} firstName
   * @param {string} lastName
   */
  self.userName = function (firstName, lastName) {
    var result;
    firstName = firstName || faker.name.firstName();
    lastName = lastName || faker.name.lastName();
    switch (faker.random.number(2)) {
      case 0:
        result = firstName + faker.random.number(99);
        break;
      case 1:
        result = firstName + faker.random.arrayElement([".", "_"]) + lastName;
        break;
      case 2:
        result = firstName + faker.random.arrayElement([".", "_"]) + lastName + faker.random.number(99);
        break;
    }
    result = result.toString().replace(/'/g, "");
    result = result.replace(/ /g, "");
    return result;
  };

  self.userName.schema = {
    "description": "Generates a username based on one of several patterns. The pattern is chosen randomly.",
    "sampleResults": ["Kirstin39", "Kirstin.Smith", "Kirstin.Smith39", "KirstinSmith", "KirstinSmith39"],
    "properties": {
      "firstName": {
        "type": "string",
        "required": false,
        "description": "The first name of the user"
      },
      "lastName": {
        "type": "string",
        "required": false,
        "description": "The last name of the user"
      }
    }
  };

  /**
   * protocol
   *
   * @method faker.internet.protocol
   */
  self.protocol = function () {
    var protocols = ['http', 'https'];
    return faker.random.arrayElement(protocols);
  };

  self.protocol.schema = {
    "description": "Randomly generates http or https",
    "sampleResults": ["https", "http"]
  };

  /**
   * url
   *
   * @method faker.internet.url
   */
  self.url = function () {
    return faker.internet.protocol() + '://' + faker.internet.domainName();
  };

  self.url.schema = {
    "description": "Generates a random URL. The URL could be secure or insecure.",
    "sampleResults": ["http://rashawn.name", "https://rashawn.name"]
  };

  /**
   * domainName
   *
   * @method faker.internet.domainName
   */
  self.domainName = function () {
    return faker.internet.domainWord() + "." + faker.internet.domainSuffix();
  };

  self.domainName.schema = {
    "description": "Generates a random domain name.",
    "sampleResults": ["marvin.org"]
  };

  /**
   * domainSuffix
   *
   * @method faker.internet.domainSuffix
   */
  self.domainSuffix = function () {
    return faker.random.arrayElement(faker.definitions.internet.domain_suffix);
  };

  self.domainSuffix.schema = {
    "description": "Generates a random domain suffix.",
    "sampleResults": ["net"]
  };

  /**
   * domainWord
   *
   * @method faker.internet.domainWord
   */
  self.domainWord = function () {
    return faker.name.firstName().replace(/([\\~#&*{}/:<>?|\"'])/ig, '').toLowerCase();
  };

  self.domainWord.schema = {
    "description": "Generates a random domain word.",
    "sampleResults": ["alyce"]
  };

  /**
   * ip
   *
   * @method faker.internet.ip
   */
  self.ip = function () {
    var randNum = function randNum() {
      return faker.random.number(255).toFixed(0);
    };

    var result = [];
    for (var i = 0; i < 4; i++) {
      result[i] = randNum();
    }

    return result.join(".");
  };

  self.ip.schema = {
    "description": "Generates a random IP.",
    "sampleResults": ["97.238.241.11"]
  };

  /**
   * ipv6
   *
   * @method faker.internet.ipv6
   */
  self.ipv6 = function () {
    var randHash = function randHash() {
      var result = "";
      for (var i = 0; i < 4; i++) {
        result += faker.random.arrayElement(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"]);
      }
      return result;
    };

    var result = [];
    for (var i = 0; i < 8; i++) {
      result[i] = randHash();
    }
    return result.join(":");
  };

  self.ipv6.schema = {
    "description": "Generates a random IPv6 address.",
    "sampleResults": ["2001:0db8:6276:b1a7:5213:22f1:25df:c8a0"]
  };

  /**
   * userAgent
   *
   * @method faker.internet.userAgent
   */
  self.userAgent = function () {
    return random_ua.generate();
  };

  self.userAgent.schema = {
    "description": "Generates a random user agent.",
    "sampleResults": ["Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_7_5 rv:6.0; SL) AppleWebKit/532.0.1 (KHTML, like Gecko) Version/7.1.6 Safari/532.0.1"]
  };

  /**
   * color
   *
   * @method faker.internet.color
   * @param {number} baseRed255
   * @param {number} baseGreen255
   * @param {number} baseBlue255
   */
  self.color = function (baseRed255, baseGreen255, baseBlue255) {
    baseRed255 = baseRed255 || 0;
    baseGreen255 = baseGreen255 || 0;
    baseBlue255 = baseBlue255 || 0;
    // based on awesome response : http://stackoverflow.com/questions/43044/algorithm-to-randomly-generate-an-aesthetically-pleasing-color-palette
    var red = Math.floor((faker.random.number(256) + baseRed255) / 2);
    var green = Math.floor((faker.random.number(256) + baseGreen255) / 2);
    var blue = Math.floor((faker.random.number(256) + baseBlue255) / 2);
    var redStr = red.toString(16);
    var greenStr = green.toString(16);
    var blueStr = blue.toString(16);
    return '#' + (redStr.length === 1 ? '0' : '') + redStr + (greenStr.length === 1 ? '0' : '') + greenStr + (blueStr.length === 1 ? '0' : '') + blueStr;
  };

  self.color.schema = {
    "description": "Generates a random hexadecimal color.",
    "sampleResults": ["#06267f"],
    "properties": {
      "baseRed255": {
        "type": "number",
        "required": false,
        "description": "The red value. Valid values are 0 - 255."
      },
      "baseGreen255": {
        "type": "number",
        "required": false,
        "description": "The green value. Valid values are 0 - 255."
      },
      "baseBlue255": {
        "type": "number",
        "required": false,
        "description": "The blue value. Valid values are 0 - 255."
      }
    }
  };

  /**
   * mac
   *
   * @method faker.internet.mac
   */
  self.mac = function () {
    var i,
        mac = "";
    for (i = 0; i < 12; i++) {
      mac += faker.random.number(15).toString(16);
      if (i % 2 == 1 && i != 11) {
        mac += ":";
      }
    }
    return mac;
  };

  self.mac.schema = {
    "description": "Generates a random mac address.",
    "sampleResults": ["78:06:cc:ae:b3:81"]
  };

  /**
   * password
   *
   * @method faker.internet.password
   * @param {number} len
   * @param {boolean} memorable
   * @param {string} pattern
   * @param {string} prefix
   */
  self.password = function (len, memorable, pattern, prefix) {
    len = len || 15;
    if (typeof memorable === "undefined") {
      memorable = false;
    }
    /*
     * password-generator ( function )
     * Copyright(c) 2011-2013 Bermi Ferrer <bermi@bermilabs.com>
     * MIT Licensed
     */
    var consonant, letter, password, vowel;
    letter = /[a-zA-Z]$/;
    vowel = /[aeiouAEIOU]$/;
    consonant = /[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$/;
    var _password = function _password(length, memorable, pattern, prefix) {
      var char, n;
      if (length == null) {
        length = 10;
      }
      if (memorable == null) {
        memorable = true;
      }
      if (pattern == null) {
        pattern = /\w/;
      }
      if (prefix == null) {
        prefix = '';
      }
      if (prefix.length >= length) {
        return prefix;
      }
      if (memorable) {
        if (prefix.match(consonant)) {
          pattern = vowel;
        } else {
          pattern = consonant;
        }
      }
      n = faker.random.number(94) + 33;
      char = String.fromCharCode(n);
      if (memorable) {
        char = char.toLowerCase();
      }
      if (!char.match(pattern)) {
        return _password(length, memorable, pattern, prefix);
      }
      return _password(length, memorable, pattern, "" + prefix + char);
    };
    return _password(len, memorable, pattern, prefix);
  };

  self.password.schema = {
    "description": "Generates a random password.",
    "sampleResults": ["AM7zl6Mg", "susejofe"],
    "properties": {
      "length": {
        "type": "number",
        "required": false,
        "description": "The number of characters in the password."
      },
      "memorable": {
        "type": "boolean",
        "required": false,
        "description": "Whether a password should be easy to remember."
      },
      "pattern": {
        "type": "regex",
        "required": false,
        "description": "A regex to match each character of the password against. This parameter will be negated if the memorable setting is turned on."
      },
      "prefix": {
        "type": "string",
        "required": false,
        "description": "A value to prepend to the generated password. The prefix counts towards the length of the password."
      }
    }
  };
};

module["exports"] = Internet;

},{"../vendor/user-agent":153}],44:[function(require,module,exports){
"use strict";

module["exports"] = ["#####", "####", "###"];

},{}],45:[function(require,module,exports){
"use strict";

module["exports"] = ["#{city_prefix} #{Name.first_name}#{city_suffix}", "#{city_prefix} #{Name.first_name}", "#{Name.first_name}#{city_suffix}", "#{Name.last_name}#{city_suffix}"];

},{}],46:[function(require,module,exports){
"use strict";

module["exports"] = ["North", "East", "West", "South", "New", "Lake", "Port"];

},{}],47:[function(require,module,exports){
"use strict";

module["exports"] = ["town", "ton", "land", "ville", "berg", "burgh", "borough", "bury", "view", "port", "mouth", "stad", "furt", "chester", "mouth", "fort", "haven", "side", "shire"];

},{}],48:[function(require,module,exports){
"use strict";

module["exports"] = ["Afghanistan", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antarctica (the territory South of 60 deg S)", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", "Bouvet Island (Bouvetoya)", "Brazil", "British Indian Ocean Territory (Chagos Archipelago)", "Brunei Darussalam", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Congo", "Cook Islands", "Costa Rica", "Cote d'Ivoire", "Croatia", "Cuba", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Faroe Islands", "Falkland Islands (Malvinas)", "Fiji", "Finland", "France", "French Guiana", "French Polynesia", "French Southern Territories", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guernsey", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard Island and McDonald Islands", "Holy See (Vatican City State)", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Isle of Man", "Israel", "Italy", "Jamaica", "Japan", "Jersey", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Democratic People's Republic of Korea", "Republic of Korea", "Kuwait", "Kyrgyz Republic", "Lao People's Democratic Republic", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libyan Arab Jamahiriya", "Liechtenstein", "Lithuania", "Luxembourg", "Macao", "Macedonia", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands Antilles", "Netherlands", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Palestinian Territory", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn Islands", "Poland", "Portugal", "Puerto Rico", "Qatar", "Reunion", "Romania", "Russian Federation", "Rwanda", "Saint Barthelemy", "Saint Helena", "Saint Kitts and Nevis", "Saint Lucia", "Saint Martin", "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Slovakia (Slovak Republic)", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Georgia and the South Sandwich Islands", "Spain", "Sri Lanka", "Sudan", "Suriname", "Svalbard & Jan Mayen Islands", "Swaziland", "Sweden", "Switzerland", "Syrian Arab Republic", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "Timor-Leste", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States of America", "United States Minor Outlying Islands", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Virgin Islands, British", "Virgin Islands, U.S.", "Wallis and Futuna", "Western Sahara", "Yemen", "Zambia", "Zimbabwe"];

},{}],49:[function(require,module,exports){
"use strict";

module["exports"] = ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"];

},{}],50:[function(require,module,exports){
"use strict";

module["exports"] = ["Avon", "Bedfordshire", "Berkshire", "Borders", "Buckinghamshire", "Cambridgeshire"];

},{}],51:[function(require,module,exports){
"use strict";

module["exports"] = ["United States of America"];

},{}],52:[function(require,module,exports){
"use strict";

var address = {};
module['exports'] = address;
address.city_prefix = require("./city_prefix");
address.city_suffix = require("./city_suffix");
address.county = require("./county");
address.country = require("./country");
address.country_code = require("./country_code");
address.building_number = require("./building_number");
address.street_suffix = require("./street_suffix");
address.secondary_address = require("./secondary_address");
address.postcode = require("./postcode");
address.postcode_by_state = require("./postcode_by_state");
address.state = require("./state");
address.state_abbr = require("./state_abbr");
address.time_zone = require("./time_zone");
address.city = require("./city");
address.street_name = require("./street_name");
address.street_address = require("./street_address");
address.default_country = require("./default_country");

},{"./building_number":44,"./city":45,"./city_prefix":46,"./city_suffix":47,"./country":48,"./country_code":49,"./county":50,"./default_country":51,"./postcode":53,"./postcode_by_state":54,"./secondary_address":55,"./state":56,"./state_abbr":57,"./street_address":58,"./street_name":59,"./street_suffix":60,"./time_zone":61}],53:[function(require,module,exports){
"use strict";

module["exports"] = ["#####", "#####-####"];

},{}],54:[function(require,module,exports){
"use strict";

module["exports"] = ["#####", "#####-####"];

},{}],55:[function(require,module,exports){
"use strict";

module["exports"] = ["Apt. ###", "Suite ###"];

},{}],56:[function(require,module,exports){
"use strict";

module["exports"] = ["Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming"];

},{}],57:[function(require,module,exports){
"use strict";

module["exports"] = ["AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"];

},{}],58:[function(require,module,exports){
"use strict";

module["exports"] = ["#{building_number} #{street_name}"];

},{}],59:[function(require,module,exports){
"use strict";

module["exports"] = ["#{Name.first_name} #{street_suffix}", "#{Name.last_name} #{street_suffix}"];

},{}],60:[function(require,module,exports){
"use strict";

module["exports"] = ["Alley", "Avenue", "Branch", "Bridge", "Brook", "Brooks", "Burg", "Burgs", "Bypass", "Camp", "Canyon", "Cape", "Causeway", "Center", "Centers", "Circle", "Circles", "Cliff", "Cliffs", "Club", "Common", "Corner", "Corners", "Course", "Court", "Courts", "Cove", "Coves", "Creek", "Crescent", "Crest", "Crossing", "Crossroad", "Curve", "Dale", "Dam", "Divide", "Drive", "Drive", "Drives", "Estate", "Estates", "Expressway", "Extension", "Extensions", "Fall", "Falls", "Ferry", "Field", "Fields", "Flat", "Flats", "Ford", "Fords", "Forest", "Forge", "Forges", "Fork", "Forks", "Fort", "Freeway", "Garden", "Gardens", "Gateway", "Glen", "Glens", "Green", "Greens", "Grove", "Groves", "Harbor", "Harbors", "Haven", "Heights", "Highway", "Hill", "Hills", "Hollow", "Inlet", "Inlet", "Island", "Island", "Islands", "Islands", "Isle", "Isle", "Junction", "Junctions", "Key", "Keys", "Knoll", "Knolls", "Lake", "Lakes", "Land", "Landing", "Lane", "Light", "Lights", "Loaf", "Lock", "Locks", "Locks", "Lodge", "Lodge", "Loop", "Mall", "Manor", "Manors", "Meadow", "Meadows", "Mews", "Mill", "Mills", "Mission", "Mission", "Motorway", "Mount", "Mountain", "Mountain", "Mountains", "Mountains", "Neck", "Orchard", "Oval", "Overpass", "Park", "Parks", "Parkway", "Parkways", "Pass", "Passage", "Path", "Pike", "Pine", "Pines", "Place", "Plain", "Plains", "Plains", "Plaza", "Plaza", "Point", "Points", "Port", "Port", "Ports", "Ports", "Prairie", "Prairie", "Radial", "Ramp", "Ranch", "Rapid", "Rapids", "Rest", "Ridge", "Ridges", "River", "Road", "Road", "Roads", "Roads", "Route", "Row", "Rue", "Run", "Shoal", "Shoals", "Shore", "Shores", "Skyway", "Spring", "Springs", "Springs", "Spur", "Spurs", "Square", "Square", "Squares", "Squares", "Station", "Station", "Stravenue", "Stravenue", "Stream", "Stream", "Street", "Street", "Streets", "Summit", "Summit", "Terrace", "Throughway", "Trace", "Track", "Trafficway", "Trail", "Trail", "Tunnel", "Tunnel", "Turnpike", "Turnpike", "Underpass", "Union", "Unions", "Valley", "Valleys", "Via", "Viaduct", "View", "Views", "Village", "Village", "Villages", "Ville", "Vista", "Vista", "Walk", "Walks", "Wall", "Way", "Ways", "Well", "Wells"];

},{}],61:[function(require,module,exports){
"use strict";

module["exports"] = ["Pacific/Midway", "Pacific/Pago_Pago", "Pacific/Honolulu", "America/Juneau", "America/Los_Angeles", "America/Tijuana", "America/Denver", "America/Phoenix", "America/Chihuahua", "America/Mazatlan", "America/Chicago", "America/Regina", "America/Mexico_City", "America/Mexico_City", "America/Monterrey", "America/Guatemala", "America/New_York", "America/Indiana/Indianapolis", "America/Bogota", "America/Lima", "America/Lima", "America/Halifax", "America/Caracas", "America/La_Paz", "America/Santiago", "America/St_Johns", "America/Sao_Paulo", "America/Argentina/Buenos_Aires", "America/Guyana", "America/Godthab", "Atlantic/South_Georgia", "Atlantic/Azores", "Atlantic/Cape_Verde", "Europe/Dublin", "Europe/London", "Europe/Lisbon", "Europe/London", "Africa/Casablanca", "Africa/Monrovia", "Etc/UTC", "Europe/Belgrade", "Europe/Bratislava", "Europe/Budapest", "Europe/Ljubljana", "Europe/Prague", "Europe/Sarajevo", "Europe/Skopje", "Europe/Warsaw", "Europe/Zagreb", "Europe/Brussels", "Europe/Copenhagen", "Europe/Madrid", "Europe/Paris", "Europe/Amsterdam", "Europe/Berlin", "Europe/Berlin", "Europe/Rome", "Europe/Stockholm", "Europe/Vienna", "Africa/Algiers", "Europe/Bucharest", "Africa/Cairo", "Europe/Helsinki", "Europe/Kiev", "Europe/Riga", "Europe/Sofia", "Europe/Tallinn", "Europe/Vilnius", "Europe/Athens", "Europe/Istanbul", "Europe/Minsk", "Asia/Jerusalem", "Africa/Harare", "Africa/Johannesburg", "Europe/Moscow", "Europe/Moscow", "Europe/Moscow", "Asia/Kuwait", "Asia/Riyadh", "Africa/Nairobi", "Asia/Baghdad", "Asia/Tehran", "Asia/Muscat", "Asia/Muscat", "Asia/Baku", "Asia/Tbilisi", "Asia/Yerevan", "Asia/Kabul", "Asia/Yekaterinburg", "Asia/Karachi", "Asia/Karachi", "Asia/Tashkent", "Asia/Kolkata", "Asia/Kolkata", "Asia/Kolkata", "Asia/Kolkata", "Asia/Kathmandu", "Asia/Dhaka", "Asia/Dhaka", "Asia/Colombo", "Asia/Almaty", "Asia/Novosibirsk", "Asia/Rangoon", "Asia/Bangkok", "Asia/Bangkok", "Asia/Jakarta", "Asia/Krasnoyarsk", "Asia/Shanghai", "Asia/Chongqing", "Asia/Hong_Kong", "Asia/Urumqi", "Asia/Kuala_Lumpur", "Asia/Singapore", "Asia/Taipei", "Australia/Perth", "Asia/Irkutsk", "Asia/Ulaanbaatar", "Asia/Seoul", "Asia/Tokyo", "Asia/Tokyo", "Asia/Tokyo", "Asia/Yakutsk", "Australia/Darwin", "Australia/Adelaide", "Australia/Melbourne", "Australia/Melbourne", "Australia/Sydney", "Australia/Brisbane", "Australia/Hobart", "Asia/Vladivostok", "Pacific/Guam", "Pacific/Port_Moresby", "Asia/Magadan", "Asia/Magadan", "Pacific/Noumea", "Pacific/Fiji", "Asia/Kamchatka", "Pacific/Majuro", "Pacific/Auckland", "Pacific/Auckland", "Pacific/Tongatapu", "Pacific/Fakaofo", "Pacific/Apia"];

},{}],62:[function(require,module,exports){
"use strict";

module["exports"] = ["#{Name.name}", "#{Company.name}"];

},{}],63:[function(require,module,exports){
"use strict";

var app = {};
module['exports'] = app;
app.name = require("./name");
app.version = require("./version");
app.author = require("./author");

},{"./author":62,"./name":64,"./version":65}],64:[function(require,module,exports){
"use strict";

module["exports"] = ["Redhold", "Treeflex", "Trippledex", "Kanlam", "Bigtax", "Daltfresh", "Toughjoyfax", "Mat Lam Tam", "Otcom", "Tres-Zap", "Y-Solowarm", "Tresom", "Voltsillam", "Biodex", "Greenlam", "Viva", "Matsoft", "Temp", "Zoolab", "Subin", "Rank", "Job", "Stringtough", "Tin", "It", "Home Ing", "Zamit", "Sonsing", "Konklab", "Alpha", "Latlux", "Voyatouch", "Alphazap", "Holdlamis", "Zaam-Dox", "Sub-Ex", "Quo Lux", "Bamity", "Ventosanzap", "Lotstring", "Hatity", "Tempsoft", "Overhold", "Fixflex", "Konklux", "Zontrax", "Tampflex", "Span", "Namfix", "Transcof", "Stim", "Fix San", "Sonair", "Stronghold", "Fintone", "Y-find", "Opela", "Lotlux", "Ronstring", "Zathin", "Duobam", "Keylex"];

},{}],65:[function(require,module,exports){
"use strict";

module["exports"] = ["0.#.#", "0.##", "#.##", "#.#", "#.#.#"];

},{}],66:[function(require,module,exports){
"use strict";

module["exports"] = ["2011-10-12", "2012-11-12", "2015-11-11", "2013-9-12"];

},{}],67:[function(require,module,exports){
"use strict";

module["exports"] = ["1234-2121-1221-1211", "1212-1221-1121-1234", "1211-1221-1234-2201", "1228-1221-1221-1431"];

},{}],68:[function(require,module,exports){
"use strict";

module["exports"] = ["visa", "mastercard", "americanexpress", "discover"];

},{}],69:[function(require,module,exports){
"use strict";

var business = {};
module['exports'] = business;
business.credit_card_numbers = require("./credit_card_numbers");
business.credit_card_expiry_dates = require("./credit_card_expiry_dates");
business.credit_card_types = require("./credit_card_types");

},{"./credit_card_expiry_dates":66,"./credit_card_numbers":67,"./credit_card_types":68}],70:[function(require,module,exports){
"use strict";

module["exports"] = ["###-###-####", "(###) ###-####", "1-###-###-####", "###.###.####"];

},{}],71:[function(require,module,exports){
"use strict";

var cell_phone = {};
module['exports'] = cell_phone;
cell_phone.formats = require("./formats");

},{"./formats":70}],72:[function(require,module,exports){
"use strict";

module["exports"] = ["red", "green", "blue", "yellow", "purple", "mint green", "teal", "white", "black", "orange", "pink", "grey", "maroon", "violet", "turquoise", "tan", "sky blue", "salmon", "plum", "orchid", "olive", "magenta", "lime", "ivory", "indigo", "gold", "fuchsia", "cyan", "azure", "lavender", "silver"];

},{}],73:[function(require,module,exports){
"use strict";

module["exports"] = ["Books", "Movies", "Music", "Games", "Electronics", "Computers", "Home", "Garden", "Tools", "Grocery", "Health", "Beauty", "Toys", "Kids", "Baby", "Clothing", "Shoes", "Jewelery", "Sports", "Outdoors", "Automotive", "Industrial"];

},{}],74:[function(require,module,exports){
"use strict";

var commerce = {};
module['exports'] = commerce;
commerce.color = require("./color");
commerce.department = require("./department");
commerce.product_name = require("./product_name");

},{"./color":72,"./department":73,"./product_name":75}],75:[function(require,module,exports){
"use strict";

module["exports"] = {
  "adjective": ["Small", "Ergonomic", "Rustic", "Intelligent", "Gorgeous", "Incredible", "Fantastic", "Practical", "Sleek", "Awesome", "Generic", "Handcrafted", "Handmade", "Licensed", "Refined", "Unbranded", "Tasty"],
  "material": ["Steel", "Wooden", "Concrete", "Plastic", "Cotton", "Granite", "Rubber", "Metal", "Soft", "Fresh", "Frozen"],
  "product": ["Chair", "Car", "Computer", "Keyboard", "Mouse", "Bike", "Ball", "Gloves", "Pants", "Shirt", "Table", "Shoes", "Hat", "Towels", "Soap", "Tuna", "Chicken", "Fish", "Cheese", "Bacon", "Pizza", "Salad", "Sausages", "Chips"]
};

},{}],76:[function(require,module,exports){
"use strict";

module["exports"] = ["Adaptive", "Advanced", "Ameliorated", "Assimilated", "Automated", "Balanced", "Business-focused", "Centralized", "Cloned", "Compatible", "Configurable", "Cross-group", "Cross-platform", "Customer-focused", "Customizable", "Decentralized", "De-engineered", "Devolved", "Digitized", "Distributed", "Diverse", "Down-sized", "Enhanced", "Enterprise-wide", "Ergonomic", "Exclusive", "Expanded", "Extended", "Face to face", "Focused", "Front-line", "Fully-configurable", "Function-based", "Fundamental", "Future-proofed", "Grass-roots", "Horizontal", "Implemented", "Innovative", "Integrated", "Intuitive", "Inverse", "Managed", "Mandatory", "Monitored", "Multi-channelled", "Multi-lateral", "Multi-layered", "Multi-tiered", "Networked", "Object-based", "Open-architected", "Open-source", "Operative", "Optimized", "Optional", "Organic", "Organized", "Persevering", "Persistent", "Phased", "Polarised", "Pre-emptive", "Proactive", "Profit-focused", "Profound", "Programmable", "Progressive", "Public-key", "Quality-focused", "Reactive", "Realigned", "Re-contextualized", "Re-engineered", "Reduced", "Reverse-engineered", "Right-sized", "Robust", "Seamless", "Secured", "Self-enabling", "Sharable", "Stand-alone", "Streamlined", "Switchable", "Synchronised", "Synergistic", "Synergized", "Team-oriented", "Total", "Triple-buffered", "Universal", "Up-sized", "Upgradable", "User-centric", "User-friendly", "Versatile", "Virtual", "Visionary", "Vision-oriented"];

},{}],77:[function(require,module,exports){
"use strict";

module["exports"] = ["clicks-and-mortar", "value-added", "vertical", "proactive", "robust", "revolutionary", "scalable", "leading-edge", "innovative", "intuitive", "strategic", "e-business", "mission-critical", "sticky", "one-to-one", "24/7", "end-to-end", "global", "B2B", "B2C", "granular", "frictionless", "virtual", "viral", "dynamic", "24/365", "best-of-breed", "killer", "magnetic", "bleeding-edge", "web-enabled", "interactive", "dot-com", "sexy", "back-end", "real-time", "efficient", "front-end", "distributed", "seamless", "extensible", "turn-key", "world-class", "open-source", "cross-platform", "cross-media", "synergistic", "bricks-and-clicks", "out-of-the-box", "enterprise", "integrated", "impactful", "wireless", "transparent", "next-generation", "cutting-edge", "user-centric", "visionary", "customized", "ubiquitous", "plug-and-play", "collaborative", "compelling", "holistic", "rich"];

},{}],78:[function(require,module,exports){
"use strict";

module["exports"] = ["synergies", "web-readiness", "paradigms", "markets", "partnerships", "infrastructures", "platforms", "initiatives", "channels", "eyeballs", "communities", "ROI", "solutions", "e-tailers", "e-services", "action-items", "portals", "niches", "technologies", "content", "vortals", "supply-chains", "convergence", "relationships", "architectures", "interfaces", "e-markets", "e-commerce", "systems", "bandwidth", "infomediaries", "models", "mindshare", "deliverables", "users", "schemas", "networks", "applications", "metrics", "e-business", "functionalities", "experiences", "web services", "methodologies"];

},{}],79:[function(require,module,exports){
"use strict";

module["exports"] = ["implement", "utilize", "integrate", "streamline", "optimize", "evolve", "transform", "embrace", "enable", "orchestrate", "leverage", "reinvent", "aggregate", "architect", "enhance", "incentivize", "morph", "empower", "envisioneer", "monetize", "harness", "facilitate", "seize", "disintermediate", "synergize", "strategize", "deploy", "brand", "grow", "target", "syndicate", "synthesize", "deliver", "mesh", "incubate", "engage", "maximize", "benchmark", "expedite", "reintermediate", "whiteboard", "visualize", "repurpose", "innovate", "scale", "unleash", "drive", "extend", "engineer", "revolutionize", "generate", "exploit", "transition", "e-enable", "iterate", "cultivate", "matrix", "productize", "redefine", "recontextualize"];

},{}],80:[function(require,module,exports){
"use strict";

module["exports"] = ["24 hour", "24/7", "3rd generation", "4th generation", "5th generation", "6th generation", "actuating", "analyzing", "asymmetric", "asynchronous", "attitude-oriented", "background", "bandwidth-monitored", "bi-directional", "bifurcated", "bottom-line", "clear-thinking", "client-driven", "client-server", "coherent", "cohesive", "composite", "context-sensitive", "contextually-based", "content-based", "dedicated", "demand-driven", "didactic", "directional", "discrete", "disintermediate", "dynamic", "eco-centric", "empowering", "encompassing", "even-keeled", "executive", "explicit", "exuding", "fault-tolerant", "foreground", "fresh-thinking", "full-range", "global", "grid-enabled", "heuristic", "high-level", "holistic", "homogeneous", "human-resource", "hybrid", "impactful", "incremental", "intangible", "interactive", "intermediate", "leading edge", "local", "logistical", "maximized", "methodical", "mission-critical", "mobile", "modular", "motivating", "multimedia", "multi-state", "multi-tasking", "national", "needs-based", "neutral", "next generation", "non-volatile", "object-oriented", "optimal", "optimizing", "radical", "real-time", "reciprocal", "regional", "responsive", "scalable", "secondary", "solution-oriented", "stable", "static", "systematic", "systemic", "system-worthy", "tangible", "tertiary", "transitional", "uniform", "upward-trending", "user-facing", "value-added", "web-enabled", "well-modulated", "zero administration", "zero defect", "zero tolerance"];

},{}],81:[function(require,module,exports){
"use strict";

var company = {};
module['exports'] = company;
company.suffix = require("./suffix");
company.adjective = require("./adjective");
company.descriptor = require("./descriptor");
company.noun = require("./noun");
company.bs_verb = require("./bs_verb");
company.bs_adjective = require("./bs_adjective");
company.bs_noun = require("./bs_noun");
company.name = require("./name");

},{"./adjective":76,"./bs_adjective":77,"./bs_noun":78,"./bs_verb":79,"./descriptor":80,"./name":82,"./noun":83,"./suffix":84}],82:[function(require,module,exports){
"use strict";

module["exports"] = ["#{Name.last_name} #{suffix}", "#{Name.last_name}-#{Name.last_name}", "#{Name.last_name}, #{Name.last_name} and #{Name.last_name}"];

},{}],83:[function(require,module,exports){
"use strict";

module["exports"] = ["ability", "access", "adapter", "algorithm", "alliance", "analyzer", "application", "approach", "architecture", "archive", "artificial intelligence", "array", "attitude", "benchmark", "budgetary management", "capability", "capacity", "challenge", "circuit", "collaboration", "complexity", "concept", "conglomeration", "contingency", "core", "customer loyalty", "database", "data-warehouse", "definition", "emulation", "encoding", "encryption", "extranet", "firmware", "flexibility", "focus group", "forecast", "frame", "framework", "function", "functionalities", "Graphic Interface", "groupware", "Graphical User Interface", "hardware", "help-desk", "hierarchy", "hub", "implementation", "info-mediaries", "infrastructure", "initiative", "installation", "instruction set", "interface", "internet solution", "intranet", "knowledge user", "knowledge base", "local area network", "leverage", "matrices", "matrix", "methodology", "middleware", "migration", "model", "moderator", "monitoring", "moratorium", "neural-net", "open architecture", "open system", "orchestration", "paradigm", "parallelism", "policy", "portal", "pricing structure", "process improvement", "product", "productivity", "project", "projection", "protocol", "secured line", "service-desk", "software", "solution", "standardization", "strategy", "structure", "success", "superstructure", "support", "synergy", "system engine", "task-force", "throughput", "time-frame", "toolset", "utilisation", "website", "workforce"];

},{}],84:[function(require,module,exports){
"use strict";

module["exports"] = ["Inc", "and Sons", "LLC", "Group"];

},{}],85:[function(require,module,exports){
"use strict";

module["exports"] = ["/34##-######-####L/", "/37##-######-####L/"];

},{}],86:[function(require,module,exports){
"use strict";

module["exports"] = ["/30[0-5]#-######-###L/", "/368#-######-###L/"];

},{}],87:[function(require,module,exports){
"use strict";

module["exports"] = ["/6011-####-####-###L/", "/65##-####-####-###L/", "/64[4-9]#-####-####-###L/", "/6011-62##-####-####-###L/", "/65##-62##-####-####-###L/", "/64[4-9]#-62##-####-####-###L/"];

},{}],88:[function(require,module,exports){
"use strict";

var credit_card = {};
module['exports'] = credit_card;
credit_card.visa = require("./visa");
credit_card.mastercard = require("./mastercard");
credit_card.discover = require("./discover");
credit_card.american_express = require("./american_express");
credit_card.diners_club = require("./diners_club");
credit_card.jcb = require("./jcb");
credit_card.switch = require("./switch");
credit_card.solo = require("./solo");
credit_card.maestro = require("./maestro");
credit_card.laser = require("./laser");

},{"./american_express":85,"./diners_club":86,"./discover":87,"./jcb":89,"./laser":90,"./maestro":91,"./mastercard":92,"./solo":93,"./switch":94,"./visa":95}],89:[function(require,module,exports){
"use strict";

module["exports"] = ["/3528-####-####-###L/", "/3529-####-####-###L/", "/35[3-8]#-####-####-###L/"];

},{}],90:[function(require,module,exports){
"use strict";

module["exports"] = ["/6304###########L/", "/6706###########L/", "/6771###########L/", "/6709###########L/", "/6304#########{5,6}L/", "/6706#########{5,6}L/", "/6771#########{5,6}L/", "/6709#########{5,6}L/"];

},{}],91:[function(require,module,exports){
"use strict";

module["exports"] = ["/50#{9,16}L/", "/5[6-8]#{9,16}L/", "/56##{9,16}L/"];

},{}],92:[function(require,module,exports){
"use strict";

module["exports"] = ["/5[1-5]##-####-####-###L/", "/6771-89##-####-###L/"];

},{}],93:[function(require,module,exports){
"use strict";

module["exports"] = ["/6767-####-####-###L/", "/6767-####-####-####-#L/", "/6767-####-####-####-##L/"];

},{}],94:[function(require,module,exports){
"use strict";

module["exports"] = ["/6759-####-####-###L/", "/6759-####-####-####-#L/", "/6759-####-####-####-##L/"];

},{}],95:[function(require,module,exports){
"use strict";

module["exports"] = ["/4###########L/", "/4###-####-####-###L/"];

},{}],96:[function(require,module,exports){
"use strict";

module["exports"] = ["utf8_unicode_ci", "utf8_general_ci", "utf8_bin", "ascii_bin", "ascii_general_ci", "cp1250_bin", "cp1250_general_ci"];

},{}],97:[function(require,module,exports){
"use strict";

module["exports"] = ["id", "title", "name", "email", "phone", "token", "group", "category", "password", "comment", "avatar", "status", "createdAt", "updatedAt"];

},{}],98:[function(require,module,exports){
"use strict";

module["exports"] = ["InnoDB", "MyISAM", "MEMORY", "CSV", "BLACKHOLE", "ARCHIVE"];

},{}],99:[function(require,module,exports){
"use strict";

var database = {};
module['exports'] = database;
database.collation = require("./collation");
database.column = require("./column");
database.engine = require("./engine");
database.type = require("./type");

},{"./collation":96,"./column":97,"./engine":98,"./type":100}],100:[function(require,module,exports){
"use strict";

module["exports"] = ["int", "varchar", "text", "date", "datetime", "tinyint", "time", "timestamp", "smallint", "mediumint", "bigint", "decimal", "float", "double", "real", "bit", "boolean", "serial", "blob", "binary", "enum", "set", "geometry", "point"];

},{}],101:[function(require,module,exports){
"use strict";

var date = {};
module["exports"] = date;
date.month = require("./month");
date.weekday = require("./weekday");

},{"./month":102,"./weekday":103}],102:[function(require,module,exports){
"use strict";

// Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1799
module["exports"] = {
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  // Property "wide_context" is optional, if not set then "wide" will be used instead
  // It is used to specify a word in context, which may differ from a stand-alone word
  wide_context: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  abbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  // Property "abbr_context" is optional, if not set then "abbr" will be used instead
  // It is used to specify a word in context, which may differ from a stand-alone word
  abbr_context: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
};

},{}],103:[function(require,module,exports){
"use strict";

// Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1847
module["exports"] = {
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  // Property "wide_context" is optional, if not set then "wide" will be used instead
  // It is used to specify a word in context, which may differ from a stand-alone word
  wide_context: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  abbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  // Property "abbr_context" is optional, if not set then "abbr" will be used instead
  // It is used to specify a word in context, which may differ from a stand-alone word
  abbr_context: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
};

},{}],104:[function(require,module,exports){
"use strict";

module["exports"] = ["Checking", "Savings", "Money Market", "Investment", "Home Loan", "Credit Card", "Auto Loan", "Personal Loan"];

},{}],105:[function(require,module,exports){
"use strict";

module["exports"] = {
  "UAE Dirham": {
    "code": "AED",
    "symbol": ""
  },
  "Afghani": {
    "code": "AFN",
    "symbol": "؋"
  },
  "Lek": {
    "code": "ALL",
    "symbol": "Lek"
  },
  "Armenian Dram": {
    "code": "AMD",
    "symbol": ""
  },
  "Netherlands Antillian Guilder": {
    "code": "ANG",
    "symbol": "ƒ"
  },
  "Kwanza": {
    "code": "AOA",
    "symbol": ""
  },
  "Argentine Peso": {
    "code": "ARS",
    "symbol": "$"
  },
  "Australian Dollar": {
    "code": "AUD",
    "symbol": "$"
  },
  "Aruban Guilder": {
    "code": "AWG",
    "symbol": "ƒ"
  },
  "Azerbaijanian Manat": {
    "code": "AZN",
    "symbol": "ман"
  },
  "Convertible Marks": {
    "code": "BAM",
    "symbol": "KM"
  },
  "Barbados Dollar": {
    "code": "BBD",
    "symbol": "$"
  },
  "Taka": {
    "code": "BDT",
    "symbol": ""
  },
  "Bulgarian Lev": {
    "code": "BGN",
    "symbol": "лв"
  },
  "Bahraini Dinar": {
    "code": "BHD",
    "symbol": ""
  },
  "Burundi Franc": {
    "code": "BIF",
    "symbol": ""
  },
  "Bermudian Dollar (customarily known as Bermuda Dollar)": {
    "code": "BMD",
    "symbol": "$"
  },
  "Brunei Dollar": {
    "code": "BND",
    "symbol": "$"
  },
  "Boliviano Mvdol": {
    "code": "BOB BOV",
    "symbol": "$b"
  },
  "Brazilian Real": {
    "code": "BRL",
    "symbol": "R$"
  },
  "Bahamian Dollar": {
    "code": "BSD",
    "symbol": "$"
  },
  "Pula": {
    "code": "BWP",
    "symbol": "P"
  },
  "Belarussian Ruble": {
    "code": "BYR",
    "symbol": "p."
  },
  "Belize Dollar": {
    "code": "BZD",
    "symbol": "BZ$"
  },
  "Canadian Dollar": {
    "code": "CAD",
    "symbol": "$"
  },
  "Congolese Franc": {
    "code": "CDF",
    "symbol": ""
  },
  "Swiss Franc": {
    "code": "CHF",
    "symbol": "CHF"
  },
  "Chilean Peso Unidades de fomento": {
    "code": "CLP CLF",
    "symbol": "$"
  },
  "Yuan Renminbi": {
    "code": "CNY",
    "symbol": "¥"
  },
  "Colombian Peso Unidad de Valor Real": {
    "code": "COP COU",
    "symbol": "$"
  },
  "Costa Rican Colon": {
    "code": "CRC",
    "symbol": "₡"
  },
  "Cuban Peso Peso Convertible": {
    "code": "CUP CUC",
    "symbol": "₱"
  },
  "Cape Verde Escudo": {
    "code": "CVE",
    "symbol": ""
  },
  "Czech Koruna": {
    "code": "CZK",
    "symbol": "Kč"
  },
  "Djibouti Franc": {
    "code": "DJF",
    "symbol": ""
  },
  "Danish Krone": {
    "code": "DKK",
    "symbol": "kr"
  },
  "Dominican Peso": {
    "code": "DOP",
    "symbol": "RD$"
  },
  "Algerian Dinar": {
    "code": "DZD",
    "symbol": ""
  },
  "Kroon": {
    "code": "EEK",
    "symbol": ""
  },
  "Egyptian Pound": {
    "code": "EGP",
    "symbol": "£"
  },
  "Nakfa": {
    "code": "ERN",
    "symbol": ""
  },
  "Ethiopian Birr": {
    "code": "ETB",
    "symbol": ""
  },
  "Euro": {
    "code": "EUR",
    "symbol": "€"
  },
  "Fiji Dollar": {
    "code": "FJD",
    "symbol": "$"
  },
  "Falkland Islands Pound": {
    "code": "FKP",
    "symbol": "£"
  },
  "Pound Sterling": {
    "code": "GBP",
    "symbol": "£"
  },
  "Lari": {
    "code": "GEL",
    "symbol": ""
  },
  "Cedi": {
    "code": "GHS",
    "symbol": ""
  },
  "Gibraltar Pound": {
    "code": "GIP",
    "symbol": "£"
  },
  "Dalasi": {
    "code": "GMD",
    "symbol": ""
  },
  "Guinea Franc": {
    "code": "GNF",
    "symbol": ""
  },
  "Quetzal": {
    "code": "GTQ",
    "symbol": "Q"
  },
  "Guyana Dollar": {
    "code": "GYD",
    "symbol": "$"
  },
  "Hong Kong Dollar": {
    "code": "HKD",
    "symbol": "$"
  },
  "Lempira": {
    "code": "HNL",
    "symbol": "L"
  },
  "Croatian Kuna": {
    "code": "HRK",
    "symbol": "kn"
  },
  "Gourde US Dollar": {
    "code": "HTG USD",
    "symbol": ""
  },
  "Forint": {
    "code": "HUF",
    "symbol": "Ft"
  },
  "Rupiah": {
    "code": "IDR",
    "symbol": "Rp"
  },
  "New Israeli Sheqel": {
    "code": "ILS",
    "symbol": "₪"
  },
  "Indian Rupee": {
    "code": "INR",
    "symbol": ""
  },
  "Indian Rupee Ngultrum": {
    "code": "INR BTN",
    "symbol": ""
  },
  "Iraqi Dinar": {
    "code": "IQD",
    "symbol": ""
  },
  "Iranian Rial": {
    "code": "IRR",
    "symbol": "﷼"
  },
  "Iceland Krona": {
    "code": "ISK",
    "symbol": "kr"
  },
  "Jamaican Dollar": {
    "code": "JMD",
    "symbol": "J$"
  },
  "Jordanian Dinar": {
    "code": "JOD",
    "symbol": ""
  },
  "Yen": {
    "code": "JPY",
    "symbol": "¥"
  },
  "Kenyan Shilling": {
    "code": "KES",
    "symbol": ""
  },
  "Som": {
    "code": "KGS",
    "symbol": "лв"
  },
  "Riel": {
    "code": "KHR",
    "symbol": "៛"
  },
  "Comoro Franc": {
    "code": "KMF",
    "symbol": ""
  },
  "North Korean Won": {
    "code": "KPW",
    "symbol": "₩"
  },
  "Won": {
    "code": "KRW",
    "symbol": "₩"
  },
  "Kuwaiti Dinar": {
    "code": "KWD",
    "symbol": ""
  },
  "Cayman Islands Dollar": {
    "code": "KYD",
    "symbol": "$"
  },
  "Tenge": {
    "code": "KZT",
    "symbol": "лв"
  },
  "Kip": {
    "code": "LAK",
    "symbol": "₭"
  },
  "Lebanese Pound": {
    "code": "LBP",
    "symbol": "£"
  },
  "Sri Lanka Rupee": {
    "code": "LKR",
    "symbol": "₨"
  },
  "Liberian Dollar": {
    "code": "LRD",
    "symbol": "$"
  },
  "Lithuanian Litas": {
    "code": "LTL",
    "symbol": "Lt"
  },
  "Latvian Lats": {
    "code": "LVL",
    "symbol": "Ls"
  },
  "Libyan Dinar": {
    "code": "LYD",
    "symbol": ""
  },
  "Moroccan Dirham": {
    "code": "MAD",
    "symbol": ""
  },
  "Moldovan Leu": {
    "code": "MDL",
    "symbol": ""
  },
  "Malagasy Ariary": {
    "code": "MGA",
    "symbol": ""
  },
  "Denar": {
    "code": "MKD",
    "symbol": "ден"
  },
  "Kyat": {
    "code": "MMK",
    "symbol": ""
  },
  "Tugrik": {
    "code": "MNT",
    "symbol": "₮"
  },
  "Pataca": {
    "code": "MOP",
    "symbol": ""
  },
  "Ouguiya": {
    "code": "MRO",
    "symbol": ""
  },
  "Mauritius Rupee": {
    "code": "MUR",
    "symbol": "₨"
  },
  "Rufiyaa": {
    "code": "MVR",
    "symbol": ""
  },
  "Kwacha": {
    "code": "MWK",
    "symbol": ""
  },
  "Mexican Peso Mexican Unidad de Inversion (UDI)": {
    "code": "MXN MXV",
    "symbol": "$"
  },
  "Malaysian Ringgit": {
    "code": "MYR",
    "symbol": "RM"
  },
  "Metical": {
    "code": "MZN",
    "symbol": "MT"
  },
  "Naira": {
    "code": "NGN",
    "symbol": "₦"
  },
  "Cordoba Oro": {
    "code": "NIO",
    "symbol": "C$"
  },
  "Norwegian Krone": {
    "code": "NOK",
    "symbol": "kr"
  },
  "Nepalese Rupee": {
    "code": "NPR",
    "symbol": "₨"
  },
  "New Zealand Dollar": {
    "code": "NZD",
    "symbol": "$"
  },
  "Rial Omani": {
    "code": "OMR",
    "symbol": "﷼"
  },
  "Balboa US Dollar": {
    "code": "PAB USD",
    "symbol": "B/."
  },
  "Nuevo Sol": {
    "code": "PEN",
    "symbol": "S/."
  },
  "Kina": {
    "code": "PGK",
    "symbol": ""
  },
  "Philippine Peso": {
    "code": "PHP",
    "symbol": "Php"
  },
  "Pakistan Rupee": {
    "code": "PKR",
    "symbol": "₨"
  },
  "Zloty": {
    "code": "PLN",
    "symbol": "zł"
  },
  "Guarani": {
    "code": "PYG",
    "symbol": "Gs"
  },
  "Qatari Rial": {
    "code": "QAR",
    "symbol": "﷼"
  },
  "New Leu": {
    "code": "RON",
    "symbol": "lei"
  },
  "Serbian Dinar": {
    "code": "RSD",
    "symbol": "Дин."
  },
  "Russian Ruble": {
    "code": "RUB",
    "symbol": "руб"
  },
  "Rwanda Franc": {
    "code": "RWF",
    "symbol": ""
  },
  "Saudi Riyal": {
    "code": "SAR",
    "symbol": "﷼"
  },
  "Solomon Islands Dollar": {
    "code": "SBD",
    "symbol": "$"
  },
  "Seychelles Rupee": {
    "code": "SCR",
    "symbol": "₨"
  },
  "Sudanese Pound": {
    "code": "SDG",
    "symbol": ""
  },
  "Swedish Krona": {
    "code": "SEK",
    "symbol": "kr"
  },
  "Singapore Dollar": {
    "code": "SGD",
    "symbol": "$"
  },
  "Saint Helena Pound": {
    "code": "SHP",
    "symbol": "£"
  },
  "Leone": {
    "code": "SLL",
    "symbol": ""
  },
  "Somali Shilling": {
    "code": "SOS",
    "symbol": "S"
  },
  "Surinam Dollar": {
    "code": "SRD",
    "symbol": "$"
  },
  "Dobra": {
    "code": "STD",
    "symbol": ""
  },
  "El Salvador Colon US Dollar": {
    "code": "SVC USD",
    "symbol": "$"
  },
  "Syrian Pound": {
    "code": "SYP",
    "symbol": "£"
  },
  "Lilangeni": {
    "code": "SZL",
    "symbol": ""
  },
  "Baht": {
    "code": "THB",
    "symbol": "฿"
  },
  "Somoni": {
    "code": "TJS",
    "symbol": ""
  },
  "Manat": {
    "code": "TMT",
    "symbol": ""
  },
  "Tunisian Dinar": {
    "code": "TND",
    "symbol": ""
  },
  "Pa'anga": {
    "code": "TOP",
    "symbol": ""
  },
  "Turkish Lira": {
    "code": "TRY",
    "symbol": "TL"
  },
  "Trinidad and Tobago Dollar": {
    "code": "TTD",
    "symbol": "TT$"
  },
  "New Taiwan Dollar": {
    "code": "TWD",
    "symbol": "NT$"
  },
  "Tanzanian Shilling": {
    "code": "TZS",
    "symbol": ""
  },
  "Hryvnia": {
    "code": "UAH",
    "symbol": "₴"
  },
  "Uganda Shilling": {
    "code": "UGX",
    "symbol": ""
  },
  "US Dollar": {
    "code": "USD",
    "symbol": "$"
  },
  "Peso Uruguayo Uruguay Peso en Unidades Indexadas": {
    "code": "UYU UYI",
    "symbol": "$U"
  },
  "Uzbekistan Sum": {
    "code": "UZS",
    "symbol": "лв"
  },
  "Bolivar Fuerte": {
    "code": "VEF",
    "symbol": "Bs"
  },
  "Dong": {
    "code": "VND",
    "symbol": "₫"
  },
  "Vatu": {
    "code": "VUV",
    "symbol": ""
  },
  "Tala": {
    "code": "WST",
    "symbol": ""
  },
  "CFA Franc BEAC": {
    "code": "XAF",
    "symbol": ""
  },
  "Silver": {
    "code": "XAG",
    "symbol": ""
  },
  "Gold": {
    "code": "XAU",
    "symbol": ""
  },
  "Bond Markets Units European Composite Unit (EURCO)": {
    "code": "XBA",
    "symbol": ""
  },
  "European Monetary Unit (E.M.U.-6)": {
    "code": "XBB",
    "symbol": ""
  },
  "European Unit of Account 9(E.U.A.-9)": {
    "code": "XBC",
    "symbol": ""
  },
  "European Unit of Account 17(E.U.A.-17)": {
    "code": "XBD",
    "symbol": ""
  },
  "East Caribbean Dollar": {
    "code": "XCD",
    "symbol": "$"
  },
  "SDR": {
    "code": "XDR",
    "symbol": ""
  },
  "UIC-Franc": {
    "code": "XFU",
    "symbol": ""
  },
  "CFA Franc BCEAO": {
    "code": "XOF",
    "symbol": ""
  },
  "Palladium": {
    "code": "XPD",
    "symbol": ""
  },
  "CFP Franc": {
    "code": "XPF",
    "symbol": ""
  },
  "Platinum": {
    "code": "XPT",
    "symbol": ""
  },
  "Codes specifically reserved for testing purposes": {
    "code": "XTS",
    "symbol": ""
  },
  "Yemeni Rial": {
    "code": "YER",
    "symbol": "﷼"
  },
  "Rand": {
    "code": "ZAR",
    "symbol": "R"
  },
  "Rand Loti": {
    "code": "ZAR LSL",
    "symbol": ""
  },
  "Rand Namibia Dollar": {
    "code": "ZAR NAD",
    "symbol": ""
  },
  "Zambian Kwacha": {
    "code": "ZMK",
    "symbol": ""
  },
  "Zimbabwe Dollar": {
    "code": "ZWL",
    "symbol": ""
  }
};

},{}],106:[function(require,module,exports){
"use strict";

var finance = {};
module['exports'] = finance;
finance.account_type = require("./account_type");
finance.transaction_type = require("./transaction_type");
finance.currency = require("./currency");

},{"./account_type":104,"./currency":105,"./transaction_type":107}],107:[function(require,module,exports){
"use strict";

module["exports"] = ["deposit", "withdrawal", "payment", "invoice"];

},{}],108:[function(require,module,exports){
"use strict";

module["exports"] = ["TCP", "HTTP", "SDD", "RAM", "GB", "CSS", "SSL", "AGP", "SQL", "FTP", "PCI", "AI", "ADP", "RSS", "XML", "EXE", "COM", "HDD", "THX", "SMTP", "SMS", "USB", "PNG", "SAS", "IB", "SCSI", "JSON", "XSS", "JBOD"];

},{}],109:[function(require,module,exports){
"use strict";

module["exports"] = ["auxiliary", "primary", "back-end", "digital", "open-source", "virtual", "cross-platform", "redundant", "online", "haptic", "multi-byte", "bluetooth", "wireless", "1080p", "neural", "optical", "solid state", "mobile"];

},{}],110:[function(require,module,exports){
"use strict";

var hacker = {};
module['exports'] = hacker;
hacker.abbreviation = require("./abbreviation");
hacker.adjective = require("./adjective");
hacker.noun = require("./noun");
hacker.verb = require("./verb");
hacker.ingverb = require("./ingverb");

},{"./abbreviation":108,"./adjective":109,"./ingverb":111,"./noun":112,"./verb":113}],111:[function(require,module,exports){
"use strict";

module["exports"] = ["backing up", "bypassing", "hacking", "overriding", "compressing", "copying", "navigating", "indexing", "connecting", "generating", "quantifying", "calculating", "synthesizing", "transmitting", "programming", "parsing"];

},{}],112:[function(require,module,exports){
"use strict";

module["exports"] = ["driver", "protocol", "bandwidth", "panel", "microchip", "program", "port", "card", "array", "interface", "system", "sensor", "firewall", "hard drive", "pixel", "alarm", "feed", "monitor", "application", "transmitter", "bus", "circuit", "capacitor", "matrix"];

},{}],113:[function(require,module,exports){
"use strict";

module["exports"] = ["back up", "bypass", "hack", "override", "compress", "copy", "navigate", "index", "connect", "generate", "quantify", "calculate", "synthesize", "input", "transmit", "program", "reboot", "parse"];

},{}],114:[function(require,module,exports){
"use strict";

var en = {};
module['exports'] = en;
en.title = "English";
en.separator = " & ";
en.address = require("./address");
en.credit_card = require("./credit_card");
en.company = require("./company");
en.internet = require("./internet");
en.database = require("./database");
en.lorem = require("./lorem");
en.name = require("./name");
en.phone_number = require("./phone_number");
en.cell_phone = require("./cell_phone");
en.business = require("./business");
en.commerce = require("./commerce");
en.team = require("./team");
en.hacker = require("./hacker");
en.app = require("./app");
en.finance = require("./finance");
en.date = require("./date");
en.system = require("./system");

},{"./address":52,"./app":63,"./business":69,"./cell_phone":71,"./commerce":74,"./company":81,"./credit_card":88,"./database":99,"./date":101,"./finance":106,"./hacker":110,"./internet":119,"./lorem":120,"./name":124,"./phone_number":131,"./system":132,"./team":135}],115:[function(require,module,exports){
"use strict";

module["exports"] = ["https://s3.amazonaws.com/uifaces/faces/twitter/jarjan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mahdif/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sprayaga/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ruzinav/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/Skyhartman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/moscoz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kurafire/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/91bilal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/igorgarybaldi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/malykhinv/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joelhelin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kushsolitary/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/coreyweb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/snowshade/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/areus/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/holdenweb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/heyimjuani/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/envex/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/unterdreht/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/collegeman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/peejfancher/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andyisonline/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ultragex/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/fuck_you_two/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ateneupopular/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ahmetalpbalkan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/Stievius/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kerem/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/osvaldas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/angelceballos/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thierrykoblentz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/peterlandt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/catarino/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/weglov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/brandclay/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ahmetsulek/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nicolasfolliot/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jayrobinson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/victorerixon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kolage/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/michzen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/markjenkins/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nicolai_larsen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/noxdzine/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alagoon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/idiot/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mizko/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chadengle/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mutlu82/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/simobenso/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vocino/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/guiiipontes/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/soyjavi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joshaustin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tomaslau/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/VinThomas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ManikRathee/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/langate/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cemshid/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/leemunroe/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_shahedk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/enda/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/BillSKenney/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/divya/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joshhemsley/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sindresorhus/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/soffes/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/9lessons/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/linux29/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/Chakintosh/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/anaami/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joreira/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/shadeed9/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/scottkclark/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jedbridges/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/salleedesign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marakasina/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ariil/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/BrianPurkiss/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/michaelmartinho/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bublienko/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/devankoshal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ZacharyZorbas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/timmillwood/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joshuasortino/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/damenleeturks/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tomas_janousek/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/herrhaase/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/RussellBishop/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/brajeshwar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cbracco/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bermonpainter/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/abdullindenis/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/isacosta/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/suprb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/yalozhkin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chandlervdw/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/iamgarth/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_victa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/commadelimited/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/roybarberuk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/axel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ffbel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/syropian/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ankitind/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/traneblow/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/flashmurphy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ChrisFarina78/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/baliomega/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/saschamt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jm_denis/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/anoff/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kennyadr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chatyrko/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dingyi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mds/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/terryxlife/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aaroni/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kinday/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/prrstn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/eduardostuart/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dhilipsiva/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/GavicoInd/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/baires/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rohixx/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bigmancho/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/blakesimkins/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/leeiio/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tjrus/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/uberschizo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kylefoundry/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/claudioguglieri/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ripplemdk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/exentrich/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jakemoore/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joaoedumedeiros/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/poormini/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tereshenkov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/keryilmaz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/haydn_woods/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rude/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/llun/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sgaurav_baghel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jamiebrittain/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/badlittleduck/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/pifagor/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/agromov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/benefritz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/erwanhesry/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/diesellaws/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jeremiaha/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/koridhandy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chaensel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andrewcohen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/smaczny/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gonzalorobaina/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nandini_m/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sydlawrence/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cdharrison/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tgerken/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lewisainslie/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/charliecwaite/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/robbschiller/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/flexrs/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mattdetails/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/raquelwilson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/karsh/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mrmartineau/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/opnsrce/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hgharrygo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/maximseshuk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/uxalex/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/samihah/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chanpory/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sharvin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/josemarques/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jefffis/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/krystalfister/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lokesh_coder/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thedamianhdez/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dpmachado/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/funwatercat/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/timothycd/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ivanfilipovbg/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/picard102/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marcobarbosa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/krasnoukhov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/g3d/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ademilter/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rickdt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/operatino/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bungiwan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hugomano/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/logorado/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dc_user/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/horaciobella/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/SlaapMe/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/teeragit/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/iqonicd/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ilya_pestov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andrewarrow/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ssiskind/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/HenryHoffman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rdsaunders/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adamsxu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/curiousoffice/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/themadray/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/michigangraham/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kohette/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nickfratter/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/runningskull/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/madysondesigns/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/brenton_clarke/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jennyshen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bradenhamm/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kurtinc/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/amanruzaini/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/coreyhaggard/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/Karimmove/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aaronalfred/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/wtrsld/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jitachi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/therealmarvin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/pmeissner/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ooomz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chacky14/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jesseddy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/shanehudson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/akmur/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/IsaryAmairani/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/arthurholcombe1/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/boxmodel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ehsandiary/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/LucasPerdidao/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/shalt0ni/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/swaplord/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kaelifa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/plbabin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/guillemboti/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/arindam_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/renbyrd/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thiagovernetti/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jmillspaysbills/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mikemai2awesome/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jervo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mekal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sta1ex/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/robergd/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/felipecsl/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andrea211087/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/garand/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dhooyenga/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/abovefunction/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/pcridesagain/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/randomlies/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/BryanHorsey/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/heykenneth/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dahparra/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/allthingssmitty/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/danvernon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/beweinreich/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/increase/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/falvarad/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alxndrustinov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/souuf/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/orkuncaylar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/AM_Kn2/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gearpixels/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bassamology/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vimarethomas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kosmar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/SULiik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mrjamesnoble/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/silvanmuhlemann/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/shaneIxD/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nacho/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/yigitpinarbasi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/buzzusborne/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aaronkwhite/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rmlewisuk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/giancarlon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nbirckel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/d_nny_m_cher/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sdidonato/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/atariboy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/abotap/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/karalek/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/psdesignuk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ludwiczakpawel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nemanjaivanovic/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/baluli/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ahmadajmi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vovkasolovev/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/samgrover/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/derienzo777/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jonathansimmons/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nelsonjoyce/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/S0ufi4n3/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/xtopherpaul/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/oaktreemedia/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nateschulte/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/findingjenny/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/namankreative/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/antonyzotov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/we_social/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/leehambley/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/solid_color/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/abelcabans/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mbilderbach/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kkusaa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jordyvdboom/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/carlosgavina/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/pechkinator/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vc27/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rdbannon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/croakx/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kerihenare/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/catadeleon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gcmorley/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/duivvv/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/saschadroste/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/victorDubugras/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/wintopia/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mattbilotti/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/taylorling/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/megdraws/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/meln1ks/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mahmoudmetwally/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/Silveredge9/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/derekebradley/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/happypeter1983/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/travis_arnold/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/artem_kostenko/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adobi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/daykiine/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alek_djuric/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/scips/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/miguelmendes/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/justinrhee/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alsobrooks/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/fronx/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mcflydesign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/santi_urso/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/allfordesign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stayuber/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bertboerland/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marosholly/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adamnac/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cynthiasavard/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/muringa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/danro/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hiemil/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jackiesaik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/iduuck/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/antjanus/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aroon_sharma/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dshster/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thehacker/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/michaelbrooksjr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ryanmclaughlin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/clubb3rry/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/taybenlor/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/xripunov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/myastro/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adityasutomo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/digitalmaverick/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hjartstrorn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/itolmach/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vaughanmoffitt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/abdots/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/isnifer/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sergeysafonov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/maz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/scrapdnb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chrismj83/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vitorleal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sokaniwaal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/zaki3d/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/illyzoren/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mocabyte/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/osmanince/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/djsherman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/davidhemphill/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/waghner/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/necodymiconer/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/praveen_vijaya/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/fabbrucci/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/travishines/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kuldarkalvik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/Elt_n/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/phillapier/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/okseanjay/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/id835559/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kudretkeskin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/anjhero/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/duck4fuck/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/scott_riley/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/noufalibrahim/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/h1brd/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/borges_marcos/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/devinhalladay/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ciaranr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stefooo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mikebeecham/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tonymillion/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joshuaraichur/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/irae/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/petrangr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dmitriychuta/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/charliegann/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/arashmanteghi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ainsleywagon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/svenlen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/faisalabid/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/beshur/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/carlyson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dutchnadia/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/teddyzetterlund/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/samuelkraft/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aoimedia/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/toddrew/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/codepoet_ru/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/artvavs/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/benoitboucart/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jomarmen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kolmarlopez/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/creartinc/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/homka/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gaborenton/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/robinclediere/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/maximsorokin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/plasticine/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/j2deme/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/peachananr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kapaluccio/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/de_ascanio/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rikas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dawidwu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marcoramires/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/angelcreative/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rpatey/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/popey/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rehatkathuria/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/the_purplebunny/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/1markiz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ajaxy_ru/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/brenmurrell/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dudestein/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/oskarlevinson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/victorstuber/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nehfy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vicivadeline/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/leandrovaranda/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/scottgallant/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/victor_haydin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sawrb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ryhanhassan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/amayvs/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/a_brixen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/karolkrakowiak_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/herkulano/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/geran7/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cggaurav/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chris_witko/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lososina/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/polarity/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mattlat/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/brandonburke/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/constantx/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/teylorfeliz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/craigelimeliah/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rachelreveley/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/reabo101/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rahmeen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ky/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rickyyean/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/j04ntoh/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/spbroma/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sebashton/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jpenico/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/francis_vega/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/oktayelipek/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kikillo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/fabbianz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/larrygerard/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/BroumiYoussef/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/0therplanet/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mbilalsiddique1/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ionuss/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/grrr_nl/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/liminha/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rawdiggie/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ryandownie/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sethlouey/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/pixage/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/arpitnj/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/switmer777/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/josevnclch/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kanickairaj/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/puzik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tbakdesigns/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/besbujupi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/supjoey/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lowie/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/linkibol/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/balintorosz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/imcoding/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/agustincruiz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gusoto/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thomasschrijer/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/superoutman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kalmerrautam/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gabrielizalo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gojeanyn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/davidbaldie/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_vojto/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/laurengray/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jydesign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mymyboy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nellleo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marciotoledo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ninjad3m0/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/to_soham/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hasslunsford/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/muridrahhal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/levisan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/grahamkennery/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lepetitogre/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/antongenkin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nessoila/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/amandabuzard/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/safrankov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cocolero/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dss49/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/matt3224/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bluesix/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/quailandquasar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/AlbertoCococi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lepinski/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sementiy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mhudobivnik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thibaut_re/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/olgary/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/shojberg/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mtolokonnikov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bereto/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/naupintos/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/wegotvices/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/xadhix/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/macxim/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rodnylobos/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/madcampos/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/madebyvadim/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bartoszdawydzik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/supervova/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/markretzloff/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vonachoo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/darylws/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stevedesigner/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mylesb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/herbigt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/depaulawagner/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/geshan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gizmeedevil1991/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_scottburgess/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lisovsky/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/davidsasda/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/artd_sign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/YoungCutlass/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mgonto/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/itstotallyamy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/victorquinn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/osmond/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/oksanafrewer/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/zauerkraut/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/iamkeithmason/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nitinhayaran/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lmjabreu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mandalareopens/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thinkleft/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ponchomendivil/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/juamperro/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/brunodesign1206/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/caseycavanagh/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/luxe/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dotgridline/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/spedwig/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/madewulf/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mattsapii/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/helderleal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chrisstumph/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jayphen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nsamoylov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chrisvanderkooi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/justme_timothyg/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/otozk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/prinzadi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gu5taf/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cyril_gaillard/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/d_kobelyatsky/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/daniloc/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nwdsha/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/romanbulah/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/skkirilov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dvdwinden/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dannol/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thekevinjones/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jwalter14/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/timgthomas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/buddhasource/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/uxpiper/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thatonetommy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/diansigitp/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adrienths/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/klimmka/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gkaam/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/derekcramer/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jennyyo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nerrsoft/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/xalionmalik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/edhenderson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/keyuri85/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/roxanejammet/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kimcool/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/edkf/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/matkins/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alessandroribe/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jacksonlatka/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lebronjennan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kostaspt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/karlkanall/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/moynihan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/danpliego/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/saulihirvi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/wesleytrankin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/fjaguero/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bowbrick/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mashaaaaal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/yassiryahya/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dparrelli/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/fotomagin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aka_james/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/denisepires/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/iqbalperkasa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/martinansty/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jarsen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/justinrob/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gabrielrosser/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/malgordon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/carlfairclough/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/michaelabehsera/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/pierrestoffe/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/enjoythetau/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/loganjlambert/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rpeezy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/coreyginnivan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/michalhron/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/msveet/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lingeswaran/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kolsvein/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/peter576/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/reideiredale/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joeymurdah/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/raphaelnikson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mvdheuvel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/maxlinderman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jimmuirhead/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/begreative/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/frankiefreesbie/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/robturlinckx/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/Talbi_ConSept/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/longlivemyword/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vanchesz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/maiklam/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hermanobrother/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rez___a/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gregsqueeb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/greenbes/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_ragzor/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/anthonysukow/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/fluidbrush/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dactrtr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jehnglynn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bergmartin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hugocornejo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_kkga/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dzantievm/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sawalazar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sovesove/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jonsgotwood/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/byryan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vytautas_a/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mizhgan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cicerobr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nilshelmersson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/d33pthought/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/davecraige/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nckjrvs/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alexandermayes/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jcubic/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/craigrcoles/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bagawarman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rob_thomas10/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cofla/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/maikelk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rtgibbons/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/russell_baylis/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mhesslow/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/codysanfilippo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/webtanya/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/madebybrenton/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dcalonaci/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/perfectflow/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jjsiii/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/saarabpreet/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kumarrajan12123/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/iamsteffen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/themikenagle/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ceekaytweet/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/larrybolt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/conspirator/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dallasbpeters/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/n3dmax/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/terpimost/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/byrnecore/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/j_drake_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/calebjoyce/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/russoedu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hoangloi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tobysaxon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gofrasdesign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dimaposnyy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tjisousa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/okandungel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/billyroshan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/oskamaya/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/motionthinks/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/knilob/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ashocka18/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marrimo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bartjo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/omnizya/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ernestsemerda/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andreas_pr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/edgarchris99/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thomasgeisen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gseguin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joannefournier/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/demersdesigns/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adammarsbar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nasirwd/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/n_tassone/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/javorszky/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/themrdave/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/yecidsm/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nicollerich/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/canapud/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nicoleglynn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/judzhin_miles/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/designervzm/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kianoshp/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/evandrix/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alterchuca/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dhrubo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ma_tiax/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ssbb_me/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dorphern/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mauriolg/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bruno_mart/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mactopus/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/the_winslet/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joemdesign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/Shriiiiimp/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jacobbennett/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nfedoroff/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/iamglimy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/allagringaus/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aiiaiiaii/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/olaolusoga/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/buryaknick/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/wim1k/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nicklacke/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/a1chapone/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/steynviljoen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/strikewan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ryankirkman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andrewabogado/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/doooon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jagan123/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ariffsetiawan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/elenadissi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mwarkentin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thierrymeier_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/r_garcia/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dmackerman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/borantula/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/konus/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/spacewood_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ryuchi311/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/evanshajed/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tristanlegros/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/shoaib253/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aislinnkelly/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/okcoker/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/timpetricola/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sunshinedgirl/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chadami/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aleclarsoniv/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nomidesigns/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/petebernardo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/scottiedude/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/millinet/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/imsoper/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/imammuht/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/benjamin_knight/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nepdud/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joki4/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lanceguyatt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bboy1895/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/amywebbb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rweve/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/haruintesettden/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ricburton/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nelshd/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/batsirai/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/primozcigler/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jffgrdnr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/8d3k/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/geneseleznev/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/al_li/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/souperphly/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mslarkina/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/2fockus/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cdavis565/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/xiel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/turkutuuli/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/uxward/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lebinoclard/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gauravjassal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/davidmerrique/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mdsisto/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andrewofficer/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kojourin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dnirmal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kevka/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mr_shiznit/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aluisio_azevedo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cloudstudio/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/danvierich/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alexivanichkin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/fran_mchamy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/perretmagali/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/betraydan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cadikkara/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/matbeedotcom/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jeremyworboys/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bpartridge/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/michaelkoper/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/silv3rgvn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alevizio/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/johnsmithagency/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lawlbwoy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vitor376/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/desastrozo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thimo_cz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jasonmarkjones/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lhausermann/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/xravil/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/guischmitt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vigobronx/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/panghal0/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/miguelkooreman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/surgeonist/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/christianoliff/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/caspergrl/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/iamkarna/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ipavelek/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/pierre_nel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/y2graphic/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sterlingrules/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/elbuscainfo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bennyjien/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stushona/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/estebanuribe/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/embrcecreations/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/danillos/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/elliotlewis/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/charlesrpratt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vladyn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/emmeffess/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/carlosblanco_eu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/leonfedotov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rangafangs/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chris_frees/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tgormtx/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bryan_topham/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jpscribbles/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mighty55/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/carbontwelve/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/isaacfifth/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/iamjdeleon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/snowwrite/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/barputro/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/drewbyreese/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sachacorazzi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bistrianiosip/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/magoo04/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/pehamondello/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/yayteejay/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/a_harris88/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/algunsanabria/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/zforrester/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ovall/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/carlosjgsousa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/geobikas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ah_lice/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/looneydoodle/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nerdgr8/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ddggccaa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/zackeeler/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/normanbox/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/el_fuertisimo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ismail_biltagi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/juangomezw/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jnmnrd/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/patrickcoombe/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ryanjohnson_me/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/markolschesky/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jeffgolenski/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kvasnic/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gauchomatt/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/afusinatto/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kevinoh/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/okansurreel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adamawesomeface/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/emileboudeling/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/arishi_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/juanmamartinez/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/wikiziner/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/danthms/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mkginfo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/terrorpixel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/curiousonaut/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/prheemo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/michaelcolenso/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/foczzi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/martip07/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thaodang17/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/johncafazza/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/robinlayfield/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/franciscoamk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/abdulhyeuk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marklamb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/edobene/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andresenfredrik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mikaeljorhult/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chrisslowik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vinciarts/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/meelford/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/elliotnolten/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/yehudab/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vijaykarthik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bfrohs/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/josep_martins/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/attacks/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sur4dye/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tumski/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/instalox/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mangosango/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/paulfarino/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kazaky999/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kiwiupover/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nvkznemo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tom_even/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ratbus/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/woodsman001/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joshmedeski/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thewillbeard/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/psaikali/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joe_black/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aleinadsays/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marcusgorillius/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hota_v/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jghyllebert/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/shinze/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/janpalounek/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jeremiespoken/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/her_ruu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dansowter/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/felipeapiress/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/magugzbrand2d/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/posterjob/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nathalie_fs/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bobbytwoshoes/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dreizle/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jeremymouton/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/elisabethkjaer/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/notbadart/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mohanrohith/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jlsolerdeltoro/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/itskawsar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/slowspock/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/zvchkelly/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/wiljanslofstra/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/craighenneberry/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/trubeatto/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/juaumlol/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/samscouto/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/BenouarradeM/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gipsy_raf/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/netonet_il/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/arkokoley/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/itsajimithing/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/smalonso/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/victordeanda/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_dwite_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/richardgarretts/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gregrwilkinson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/anatolinicolae/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lu4sh1i/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stefanotirloni/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ostirbu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/darcystonge/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/naitanamoreno/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/michaelcomiskey/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/adhiardana/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marcomano_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/davidcazalis/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/falconerie/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gregkilian/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bcrad/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bolzanmarco/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/low_res/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vlajki/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/petar_prog/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jonkspr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/akmalfikri/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mfacchinello/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/atanism/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/harry_sistalam/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/murrayswift/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bobwassermann/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gavr1l0/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/madshensel/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mr_subtle/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/deviljho_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/salimianoff/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joetruesdell/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/twittypork/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/airskylar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dnezkumar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dgajjar/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cherif_b/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/salvafc/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/louis_currie/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/deeenright/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cybind/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/eyronn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vickyshits/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sweetdelisa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/cboller1/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andresdjasso/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/melvindidit/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andysolomon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thaisselenator_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lvovenok/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/giuliusa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/belyaev_rs/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/overcloacked/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kamal_chaneman/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/incubo82/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hellofeverrrr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mhaligowski/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sunlandictwin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bu7921/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/andytlaw/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jeremery/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/finchjke/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/manigm/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/umurgdk/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/scottfeltham/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ganserene/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mutu_krish/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jodytaggart/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ntfblog/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tanveerrao/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hfalucas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alxleroydeval/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kucingbelang4/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bargaorobalo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/colgruv/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stalewine/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kylefrost/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/baumannzone/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/angelcolberg/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sachingawas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jjshaw14/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ramanathan_pdy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/johndezember/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nilshoenson/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/brandonmorreale/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nutzumi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/brandonflatsoda/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sergeyalmone/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/klefue/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kirangopal/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/baumann_alex/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/matthewkay_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jay_wilburn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/shesgared/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/apriendeau/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/johnriordan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/wake_gs/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aleksitappura/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/emsgulam/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/xilantra/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/imomenui/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sircalebgrove/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/newbrushes/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hsinyo23/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/m4rio/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/katiemdaly/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/s4f1/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ecommerceil/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marlinjayakody/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/swooshycueb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sangdth/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/coderdiaz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bluefx_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vivekprvr/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sasha_shestakov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/eugeneeweb/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dgclegg/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/n1ght_coder/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dixchen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/blakehawksworth/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/trueblood_33/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hai_ninh_nguyen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marclgonzales/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/yesmeck/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stephcoue/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/doronmalki/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ruehldesign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/anasnakawa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kijanmaharjan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/wearesavas/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stefvdham/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tweetubhai/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alecarpentier/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/fiterik/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/antonyryndya/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/d00maz/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/theonlyzeke/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/missaaamy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/carlosm/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/manekenthe/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/reetajayendra/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jeremyshimko/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/justinrgraham/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/stefanozoffoli/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/overra/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mrebay007/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/shvelo96/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/pyronite/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/thedjpetersen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/rtyukmaev/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_williamguerra/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/albertaugustin/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vikashpathak18/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kevinjohndayy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vj_demien/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/colirpixoil/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/goddardlewis/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/laasli/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jqiuss/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/heycamtaylor/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nastya_mane/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mastermindesign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ccinojasso1/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/nyancecom/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sandywoodruff/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/bighanddesign/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sbtransparent/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aviddayentonbay/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/richwild/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kaysix_dizzy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/tur8le/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/seyedhossein1/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/privetwagner/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/emmandenn/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dev_essentials/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jmfsocial/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_yardenoon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mateaodviteza/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/weavermedia/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mufaddal_mw/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hafeeskhan/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ashernatali/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sulaqo/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/eddiechen/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/josecarlospsh/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vm_f/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/enricocicconi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/danmartin70/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/gmourier/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/donjain/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mrxloka/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/_pedropinho/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/eitarafa/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/oscarowusu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ralph_lam/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/panchajanyag/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/woodydotmx/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/jerrybai1907/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/marshallchen_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/xamorep/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aio___/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/chaabane_wail/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/txcx/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/akashsharma39/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/falling_soul/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sainraja/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mugukamil/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/johannesneu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/markwienands/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/karthipanraj/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/balakayuriy/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/alan_zhang_/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/layerssss/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/kaspernordkvist/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/mirfanqureshi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/hanna_smi/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/VMilescu/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/aeon56/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/m_kalibry/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/sreejithexp/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dicesales/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/dhoot_amit/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/smenov/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/lonesomelemon/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vladimirdevic/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/joelcipriano/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/haligaliharun/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/buleswapnil/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/serefka/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/ifarafonow/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/vikasvinfotech/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/urrutimeoli/128.jpg", "https://s3.amazonaws.com/uifaces/faces/twitter/areandacom/128.jpg"];

},{}],116:[function(require,module,exports){
"use strict";

module["exports"] = ["com", "biz", "info", "name", "net", "org"];

},{}],117:[function(require,module,exports){
"use strict";

module["exports"] = ["example.org", "example.com", "example.net"];

},{}],118:[function(require,module,exports){
"use strict";

module["exports"] = ["gmail.com", "yahoo.com", "hotmail.com"];

},{}],119:[function(require,module,exports){
"use strict";

var internet = {};
module['exports'] = internet;
internet.free_email = require("./free_email");
internet.example_email = require("./example_email");
internet.domain_suffix = require("./domain_suffix");
internet.avatar_uri = require("./avatar_uri");

},{"./avatar_uri":115,"./domain_suffix":116,"./example_email":117,"./free_email":118}],120:[function(require,module,exports){
"use strict";

var lorem = {};
module['exports'] = lorem;
lorem.words = require("./words");
lorem.supplemental = require("./supplemental");

},{"./supplemental":121,"./words":122}],121:[function(require,module,exports){
"use strict";

module["exports"] = ["abbas", "abduco", "abeo", "abscido", "absconditus", "absens", "absorbeo", "absque", "abstergo", "absum", "abundans", "abutor", "accedo", "accendo", "acceptus", "accipio", "accommodo", "accusator", "acer", "acerbitas", "acervus", "acidus", "acies", "acquiro", "acsi", "adamo", "adaugeo", "addo", "adduco", "ademptio", "adeo", "adeptio", "adfectus", "adfero", "adficio", "adflicto", "adhaero", "adhuc", "adicio", "adimpleo", "adinventitias", "adipiscor", "adiuvo", "administratio", "admiratio", "admitto", "admoneo", "admoveo", "adnuo", "adopto", "adsidue", "adstringo", "adsuesco", "adsum", "adulatio", "adulescens", "adultus", "aduro", "advenio", "adversus", "advoco", "aedificium", "aeger", "aegre", "aegrotatio", "aegrus", "aeneus", "aequitas", "aequus", "aer", "aestas", "aestivus", "aestus", "aetas", "aeternus", "ager", "aggero", "aggredior", "agnitio", "agnosco", "ago", "ait", "aiunt", "alienus", "alii", "alioqui", "aliqua", "alius", "allatus", "alo", "alter", "altus", "alveus", "amaritudo", "ambitus", "ambulo", "amicitia", "amiculum", "amissio", "amita", "amitto", "amo", "amor", "amoveo", "amplexus", "amplitudo", "amplus", "ancilla", "angelus", "angulus", "angustus", "animadverto", "animi", "animus", "annus", "anser", "ante", "antea", "antepono", "antiquus", "aperio", "aperte", "apostolus", "apparatus", "appello", "appono", "appositus", "approbo", "apto", "aptus", "apud", "aqua", "ara", "aranea", "arbitro", "arbor", "arbustum", "arca", "arceo", "arcesso", "arcus", "argentum", "argumentum", "arguo", "arma", "armarium", "armo", "aro", "ars", "articulus", "artificiose", "arto", "arx", "ascisco", "ascit", "asper", "aspicio", "asporto", "assentator", "astrum", "atavus", "ater", "atqui", "atrocitas", "atrox", "attero", "attollo", "attonbitus", "auctor", "auctus", "audacia", "audax", "audentia", "audeo", "audio", "auditor", "aufero", "aureus", "auris", "aurum", "aut", "autem", "autus", "auxilium", "avaritia", "avarus", "aveho", "averto", "avoco", "baiulus", "balbus", "barba", "bardus", "basium", "beatus", "bellicus", "bellum", "bene", "beneficium", "benevolentia", "benigne", "bestia", "bibo", "bis", "blandior", "bonus", "bos", "brevis", "cado", "caecus", "caelestis", "caelum", "calamitas", "calcar", "calco", "calculus", "callide", "campana", "candidus", "canis", "canonicus", "canto", "capillus", "capio", "capitulus", "capto", "caput", "carbo", "carcer", "careo", "caries", "cariosus", "caritas", "carmen", "carpo", "carus", "casso", "caste", "casus", "catena", "caterva", "cattus", "cauda", "causa", "caute", "caveo", "cavus", "cedo", "celebrer", "celer", "celo", "cena", "cenaculum", "ceno", "censura", "centum", "cerno", "cernuus", "certe", "certo", "certus", "cervus", "cetera", "charisma", "chirographum", "cibo", "cibus", "cicuta", "cilicium", "cimentarius", "ciminatio", "cinis", "circumvenio", "cito", "civis", "civitas", "clam", "clamo", "claro", "clarus", "claudeo", "claustrum", "clementia", "clibanus", "coadunatio", "coaegresco", "coepi", "coerceo", "cogito", "cognatus", "cognomen", "cogo", "cohaero", "cohibeo", "cohors", "colligo", "colloco", "collum", "colo", "color", "coma", "combibo", "comburo", "comedo", "comes", "cometes", "comis", "comitatus", "commemoro", "comminor", "commodo", "communis", "comparo", "compello", "complectus", "compono", "comprehendo", "comptus", "conatus", "concedo", "concido", "conculco", "condico", "conduco", "confero", "confido", "conforto", "confugo", "congregatio", "conicio", "coniecto", "conitor", "coniuratio", "conor", "conqueror", "conscendo", "conservo", "considero", "conspergo", "constans", "consuasor", "contabesco", "contego", "contigo", "contra", "conturbo", "conventus", "convoco", "copia", "copiose", "cornu", "corona", "corpus", "correptius", "corrigo", "corroboro", "corrumpo", "coruscus", "cotidie", "crapula", "cras", "crastinus", "creator", "creber", "crebro", "credo", "creo", "creptio", "crepusculum", "cresco", "creta", "cribro", "crinis", "cruciamentum", "crudelis", "cruentus", "crur", "crustulum", "crux", "cubicularis", "cubitum", "cubo", "cui", "cuius", "culpa", "culpo", "cultellus", "cultura", "cum", "cunabula", "cunae", "cunctatio", "cupiditas", "cupio", "cuppedia", "cupressus", "cur", "cura", "curatio", "curia", "curiositas", "curis", "curo", "curriculum", "currus", "cursim", "curso", "cursus", "curto", "curtus", "curvo", "curvus", "custodia", "damnatio", "damno", "dapifer", "debeo", "debilito", "decens", "decerno", "decet", "decimus", "decipio", "decor", "decretum", "decumbo", "dedecor", "dedico", "deduco", "defaeco", "defendo", "defero", "defessus", "defetiscor", "deficio", "defigo", "defleo", "defluo", "defungo", "degenero", "degero", "degusto", "deinde", "delectatio", "delego", "deleo", "delibero", "delicate", "delinquo", "deludo", "demens", "demergo", "demitto", "demo", "demonstro", "demoror", "demulceo", "demum", "denego", "denique", "dens", "denuncio", "denuo", "deorsum", "depereo", "depono", "depopulo", "deporto", "depraedor", "deprecator", "deprimo", "depromo", "depulso", "deputo", "derelinquo", "derideo", "deripio", "desidero", "desino", "desipio", "desolo", "desparatus", "despecto", "despirmatio", "infit", "inflammatio", "paens", "patior", "patria", "patrocinor", "patruus", "pauci", "paulatim", "pauper", "pax", "peccatus", "pecco", "pecto", "pectus", "pecunia", "pecus", "peior", "pel", "ocer", "socius", "sodalitas", "sol", "soleo", "solio", "solitudo", "solium", "sollers", "sollicito", "solum", "solus", "solutio", "solvo", "somniculosus", "somnus", "sonitus", "sono", "sophismata", "sopor", "sordeo", "sortitus", "spargo", "speciosus", "spectaculum", "speculum", "sperno", "spero", "spes", "spiculum", "spiritus", "spoliatio", "sponte", "stabilis", "statim", "statua", "stella", "stillicidium", "stipes", "stips", "sto", "strenuus", "strues", "studio", "stultus", "suadeo", "suasoria", "sub", "subito", "subiungo", "sublime", "subnecto", "subseco", "substantia", "subvenio", "succedo", "succurro", "sufficio", "suffoco", "suffragium", "suggero", "sui", "sulum", "sum", "summa", "summisse", "summopere", "sumo", "sumptus", "supellex", "super", "suppellex", "supplanto", "suppono", "supra", "surculus", "surgo", "sursum", "suscipio", "suspendo", "sustineo", "suus", "synagoga", "tabella", "tabernus", "tabesco", "tabgo", "tabula", "taceo", "tactus", "taedium", "talio", "talis", "talus", "tam", "tamdiu", "tamen", "tametsi", "tamisium", "tamquam", "tandem", "tantillus", "tantum", "tardus", "tego", "temeritas", "temperantia", "templum", "temptatio", "tempus", "tenax", "tendo", "teneo", "tener", "tenuis", "tenus", "tepesco", "tepidus", "ter", "terebro", "teres", "terga", "tergeo", "tergiversatio", "tergo", "tergum", "termes", "terminatio", "tero", "terra", "terreo", "territo", "terror", "tersus", "tertius", "testimonium", "texo", "textilis", "textor", "textus", "thalassinus", "theatrum", "theca", "thema", "theologus", "thermae", "thesaurus", "thesis", "thorax", "thymbra", "thymum", "tibi", "timidus", "timor", "titulus", "tolero", "tollo", "tondeo", "tonsor", "torqueo", "torrens", "tot", "totidem", "toties", "totus", "tracto", "trado", "traho", "trans", "tredecim", "tremo", "trepide", "tres", "tribuo", "tricesimus", "triduana", "triginta", "tripudio", "tristis", "triumphus", "trucido", "truculenter", "tubineus", "tui", "tum", "tumultus", "tunc", "turba", "turbo", "turpe", "turpis", "tutamen", "tutis", "tyrannus", "uberrime", "ubi", "ulciscor", "ullus", "ulterius", "ultio", "ultra", "umbra", "umerus", "umquam", "una", "unde", "undique", "universe", "unus", "urbanus", "urbs", "uredo", "usitas", "usque", "ustilo", "ustulo", "usus", "uter", "uterque", "utilis", "utique", "utor", "utpote", "utrimque", "utroque", "utrum", "uxor", "vaco", "vacuus", "vado", "vae", "valde", "valens", "valeo", "valetudo", "validus", "vallum", "vapulus", "varietas", "varius", "vehemens", "vel", "velociter", "velum", "velut", "venia", "venio", "ventito", "ventosus", "ventus", "venustas", "ver", "verbera", "verbum", "vere", "verecundia", "vereor", "vergo", "veritas", "vero", "versus", "verto", "verumtamen", "verus", "vesco", "vesica", "vesper", "vespillo", "vester", "vestigium", "vestrum", "vetus", "via", "vicinus", "vicissitudo", "victoria", "victus", "videlicet", "video", "viduata", "viduo", "vigilo", "vigor", "vilicus", "vilis", "vilitas", "villa", "vinco", "vinculum", "vindico", "vinitor", "vinum", "vir", "virga", "virgo", "viridis", "viriliter", "virtus", "vis", "viscus", "vita", "vitiosus", "vitium", "vito", "vivo", "vix", "vobis", "vociferor", "voco", "volaticus", "volo", "volubilis", "voluntarius", "volup", "volutabrum", "volva", "vomer", "vomica", "vomito", "vorago", "vorax", "voro", "vos", "votum", "voveo", "vox", "vulariter", "vulgaris", "vulgivagus", "vulgo", "vulgus", "vulnero", "vulnus", "vulpes", "vulticulus", "vultuosus", "xiphias"];

},{}],122:[function(require,module,exports){
"use strict";

module["exports"] = ["alias", "consequatur", "aut", "perferendis", "sit", "voluptatem", "accusantium", "doloremque", "aperiam", "eaque", "ipsa", "quae", "ab", "illo", "inventore", "veritatis", "et", "quasi", "architecto", "beatae", "vitae", "dicta", "sunt", "explicabo", "aspernatur", "aut", "odit", "aut", "fugit", "sed", "quia", "consequuntur", "magni", "dolores", "eos", "qui", "ratione", "voluptatem", "sequi", "nesciunt", "neque", "dolorem", "ipsum", "quia", "dolor", "sit", "amet", "consectetur", "adipisci", "velit", "sed", "quia", "non", "numquam", "eius", "modi", "tempora", "incidunt", "ut", "labore", "et", "dolore", "magnam", "aliquam", "quaerat", "voluptatem", "ut", "enim", "ad", "minima", "veniam", "quis", "nostrum", "exercitationem", "ullam", "corporis", "nemo", "enim", "ipsam", "voluptatem", "quia", "voluptas", "sit", "suscipit", "laboriosam", "nisi", "ut", "aliquid", "ex", "ea", "commodi", "consequatur", "quis", "autem", "vel", "eum", "iure", "reprehenderit", "qui", "in", "ea", "voluptate", "velit", "esse", "quam", "nihil", "molestiae", "et", "iusto", "odio", "dignissimos", "ducimus", "qui", "blanditiis", "praesentium", "laudantium", "totam", "rem", "voluptatum", "deleniti", "atque", "corrupti", "quos", "dolores", "et", "quas", "molestias", "excepturi", "sint", "occaecati", "cupiditate", "non", "provident", "sed", "ut", "perspiciatis", "unde", "omnis", "iste", "natus", "error", "similique", "sunt", "in", "culpa", "qui", "officia", "deserunt", "mollitia", "animi", "id", "est", "laborum", "et", "dolorum", "fuga", "et", "harum", "quidem", "rerum", "facilis", "est", "et", "expedita", "distinctio", "nam", "libero", "tempore", "cum", "soluta", "nobis", "est", "eligendi", "optio", "cumque", "nihil", "impedit", "quo", "porro", "quisquam", "est", "qui", "minus", "id", "quod", "maxime", "placeat", "facere", "possimus", "omnis", "voluptas", "assumenda", "est", "omnis", "dolor", "repellendus", "temporibus", "autem", "quibusdam", "et", "aut", "consequatur", "vel", "illum", "qui", "dolorem", "eum", "fugiat", "quo", "voluptas", "nulla", "pariatur", "at", "vero", "eos", "et", "accusamus", "officiis", "debitis", "aut", "rerum", "necessitatibus", "saepe", "eveniet", "ut", "et", "voluptates", "repudiandae", "sint", "et", "molestiae", "non", "recusandae", "itaque", "earum", "rerum", "hic", "tenetur", "a", "sapiente", "delectus", "ut", "aut", "reiciendis", "voluptatibus", "maiores", "doloribus", "asperiores", "repellat"];

},{}],123:[function(require,module,exports){
"use strict";

module["exports"] = ["Aaliyah", "Aaron", "Abagail", "Abbey", "Abbie", "Abbigail", "Abby", "Abdiel", "Abdul", "Abdullah", "Abe", "Abel", "Abelardo", "Abigail", "Abigale", "Abigayle", "Abner", "Abraham", "Ada", "Adah", "Adalberto", "Adaline", "Adam", "Adan", "Addie", "Addison", "Adela", "Adelbert", "Adele", "Adelia", "Adeline", "Adell", "Adella", "Adelle", "Aditya", "Adolf", "Adolfo", "Adolph", "Adolphus", "Adonis", "Adrain", "Adrian", "Adriana", "Adrianna", "Adriel", "Adrien", "Adrienne", "Afton", "Aglae", "Agnes", "Agustin", "Agustina", "Ahmad", "Ahmed", "Aida", "Aidan", "Aiden", "Aileen", "Aimee", "Aisha", "Aiyana", "Akeem", "Al", "Alaina", "Alan", "Alana", "Alanis", "Alanna", "Alayna", "Alba", "Albert", "Alberta", "Albertha", "Alberto", "Albin", "Albina", "Alda", "Alden", "Alec", "Aleen", "Alejandra", "Alejandrin", "Alek", "Alena", "Alene", "Alessandra", "Alessandro", "Alessia", "Aletha", "Alex", "Alexa", "Alexander", "Alexandra", "Alexandre", "Alexandrea", "Alexandria", "Alexandrine", "Alexandro", "Alexane", "Alexanne", "Alexie", "Alexis", "Alexys", "Alexzander", "Alf", "Alfonso", "Alfonzo", "Alford", "Alfred", "Alfreda", "Alfredo", "Ali", "Alia", "Alice", "Alicia", "Alisa", "Alisha", "Alison", "Alivia", "Aliya", "Aliyah", "Aliza", "Alize", "Allan", "Allen", "Allene", "Allie", "Allison", "Ally", "Alphonso", "Alta", "Althea", "Alva", "Alvah", "Alvena", "Alvera", "Alverta", "Alvina", "Alvis", "Alyce", "Alycia", "Alysa", "Alysha", "Alyson", "Alysson", "Amalia", "Amanda", "Amani", "Amara", "Amari", "Amaya", "Amber", "Ambrose", "Amelia", "Amelie", "Amely", "America", "Americo", "Amie", "Amina", "Amir", "Amira", "Amiya", "Amos", "Amparo", "Amy", "Amya", "Ana", "Anabel", "Anabelle", "Anahi", "Anais", "Anastacio", "Anastasia", "Anderson", "Andre", "Andreane", "Andreanne", "Andres", "Andrew", "Andy", "Angel", "Angela", "Angelica", "Angelina", "Angeline", "Angelita", "Angelo", "Angie", "Angus", "Anibal", "Anika", "Anissa", "Anita", "Aniya", "Aniyah", "Anjali", "Anna", "Annabel", "Annabell", "Annabelle", "Annalise", "Annamae", "Annamarie", "Anne", "Annetta", "Annette", "Annie", "Ansel", "Ansley", "Anthony", "Antoinette", "Antone", "Antonetta", "Antonette", "Antonia", "Antonietta", "Antonina", "Antonio", "Antwan", "Antwon", "Anya", "April", "Ara", "Araceli", "Aracely", "Arch", "Archibald", "Ardella", "Arden", "Ardith", "Arely", "Ari", "Ariane", "Arianna", "Aric", "Ariel", "Arielle", "Arjun", "Arlene", "Arlie", "Arlo", "Armand", "Armando", "Armani", "Arnaldo", "Arne", "Arno", "Arnold", "Arnoldo", "Arnulfo", "Aron", "Art", "Arthur", "Arturo", "Arvel", "Arvid", "Arvilla", "Aryanna", "Asa", "Asha", "Ashlee", "Ashleigh", "Ashley", "Ashly", "Ashlynn", "Ashton", "Ashtyn", "Asia", "Assunta", "Astrid", "Athena", "Aubree", "Aubrey", "Audie", "Audra", "Audreanne", "Audrey", "August", "Augusta", "Augustine", "Augustus", "Aurelia", "Aurelie", "Aurelio", "Aurore", "Austen", "Austin", "Austyn", "Autumn", "Ava", "Avery", "Avis", "Axel", "Ayana", "Ayden", "Ayla", "Aylin", "Baby", "Bailee", "Bailey", "Barbara", "Barney", "Baron", "Barrett", "Barry", "Bart", "Bartholome", "Barton", "Baylee", "Beatrice", "Beau", "Beaulah", "Bell", "Bella", "Belle", "Ben", "Benedict", "Benjamin", "Bennett", "Bennie", "Benny", "Benton", "Berenice", "Bernadette", "Bernadine", "Bernard", "Bernardo", "Berneice", "Bernhard", "Bernice", "Bernie", "Berniece", "Bernita", "Berry", "Bert", "Berta", "Bertha", "Bertram", "Bertrand", "Beryl", "Bessie", "Beth", "Bethany", "Bethel", "Betsy", "Bette", "Bettie", "Betty", "Bettye", "Beulah", "Beverly", "Bianka", "Bill", "Billie", "Billy", "Birdie", "Blair", "Blaise", "Blake", "Blanca", "Blanche", "Blaze", "Bo", "Bobbie", "Bobby", "Bonita", "Bonnie", "Boris", "Boyd", "Brad", "Braden", "Bradford", "Bradley", "Bradly", "Brady", "Braeden", "Brain", "Brandi", "Brando", "Brandon", "Brandt", "Brandy", "Brandyn", "Brannon", "Branson", "Brant", "Braulio", "Braxton", "Brayan", "Breana", "Breanna", "Breanne", "Brenda", "Brendan", "Brenden", "Brendon", "Brenna", "Brennan", "Brennon", "Brent", "Bret", "Brett", "Bria", "Brian", "Briana", "Brianne", "Brice", "Bridget", "Bridgette", "Bridie", "Brielle", "Brigitte", "Brionna", "Brisa", "Britney", "Brittany", "Brock", "Broderick", "Brody", "Brook", "Brooke", "Brooklyn", "Brooks", "Brown", "Bruce", "Bryana", "Bryce", "Brycen", "Bryon", "Buck", "Bud", "Buddy", "Buford", "Bulah", "Burdette", "Burley", "Burnice", "Buster", "Cade", "Caden", "Caesar", "Caitlyn", "Cale", "Caleb", "Caleigh", "Cali", "Calista", "Callie", "Camden", "Cameron", "Camila", "Camilla", "Camille", "Camren", "Camron", "Camryn", "Camylle", "Candace", "Candelario", "Candice", "Candida", "Candido", "Cara", "Carey", "Carissa", "Carlee", "Carleton", "Carley", "Carli", "Carlie", "Carlo", "Carlos", "Carlotta", "Carmel", "Carmela", "Carmella", "Carmelo", "Carmen", "Carmine", "Carol", "Carolanne", "Carole", "Carolina", "Caroline", "Carolyn", "Carolyne", "Carrie", "Carroll", "Carson", "Carter", "Cary", "Casandra", "Casey", "Casimer", "Casimir", "Casper", "Cassandra", "Cassandre", "Cassidy", "Cassie", "Catalina", "Caterina", "Catharine", "Catherine", "Cathrine", "Cathryn", "Cathy", "Cayla", "Ceasar", "Cecelia", "Cecil", "Cecile", "Cecilia", "Cedrick", "Celestine", "Celestino", "Celia", "Celine", "Cesar", "Chad", "Chadd", "Chadrick", "Chaim", "Chance", "Chandler", "Chanel", "Chanelle", "Charity", "Charlene", "Charles", "Charley", "Charlie", "Charlotte", "Chase", "Chasity", "Chauncey", "Chaya", "Chaz", "Chelsea", "Chelsey", "Chelsie", "Chesley", "Chester", "Chet", "Cheyanne", "Cheyenne", "Chloe", "Chris", "Christ", "Christa", "Christelle", "Christian", "Christiana", "Christina", "Christine", "Christop", "Christophe", "Christopher", "Christy", "Chyna", "Ciara", "Cicero", "Cielo", "Cierra", "Cindy", "Citlalli", "Clair", "Claire", "Clara", "Clarabelle", "Clare", "Clarissa", "Clark", "Claud", "Claude", "Claudia", "Claudie", "Claudine", "Clay", "Clemens", "Clement", "Clementina", "Clementine", "Clemmie", "Cleo", "Cleora", "Cleta", "Cletus", "Cleve", "Cleveland", "Clifford", "Clifton", "Clint", "Clinton", "Clotilde", "Clovis", "Cloyd", "Clyde", "Coby", "Cody", "Colby", "Cole", "Coleman", "Colin", "Colleen", "Collin", "Colt", "Colten", "Colton", "Columbus", "Concepcion", "Conner", "Connie", "Connor", "Conor", "Conrad", "Constance", "Constantin", "Consuelo", "Cooper", "Cora", "Coralie", "Corbin", "Cordelia", "Cordell", "Cordia", "Cordie", "Corene", "Corine", "Cornelius", "Cornell", "Corrine", "Cortez", "Cortney", "Cory", "Coty", "Courtney", "Coy", "Craig", "Crawford", "Creola", "Cristal", "Cristian", "Cristina", "Cristobal", "Cristopher", "Cruz", "Crystal", "Crystel", "Cullen", "Curt", "Curtis", "Cydney", "Cynthia", "Cyril", "Cyrus", "Dagmar", "Dahlia", "Daija", "Daisha", "Daisy", "Dakota", "Dale", "Dallas", "Dallin", "Dalton", "Damaris", "Dameon", "Damian", "Damien", "Damion", "Damon", "Dan", "Dana", "Dandre", "Dane", "D'angelo", "Dangelo", "Danial", "Daniela", "Daniella", "Danielle", "Danika", "Dannie", "Danny", "Dante", "Danyka", "Daphne", "Daphnee", "Daphney", "Darby", "Daren", "Darian", "Dariana", "Darien", "Dario", "Darion", "Darius", "Darlene", "Daron", "Darrel", "Darrell", "Darren", "Darrick", "Darrin", "Darrion", "Darron", "Darryl", "Darwin", "Daryl", "Dashawn", "Dasia", "Dave", "David", "Davin", "Davion", "Davon", "Davonte", "Dawn", "Dawson", "Dax", "Dayana", "Dayna", "Dayne", "Dayton", "Dean", "Deangelo", "Deanna", "Deborah", "Declan", "Dedric", "Dedrick", "Dee", "Deion", "Deja", "Dejah", "Dejon", "Dejuan", "Delaney", "Delbert", "Delfina", "Delia", "Delilah", "Dell", "Della", "Delmer", "Delores", "Delpha", "Delphia", "Delphine", "Delta", "Demarco", "Demarcus", "Demario", "Demetris", "Demetrius", "Demond", "Dena", "Denis", "Dennis", "Deon", "Deondre", "Deontae", "Deonte", "Dereck", "Derek", "Derick", "Deron", "Derrick", "Deshaun", "Deshawn", "Desiree", "Desmond", "Dessie", "Destany", "Destin", "Destinee", "Destiney", "Destini", "Destiny", "Devan", "Devante", "Deven", "Devin", "Devon", "Devonte", "Devyn", "Dewayne", "Dewitt", "Dexter", "Diamond", "Diana", "Dianna", "Diego", "Dillan", "Dillon", "Dimitri", "Dina", "Dino", "Dion", "Dixie", "Dock", "Dolly", "Dolores", "Domenic", "Domenica", "Domenick", "Domenico", "Domingo", "Dominic", "Dominique", "Don", "Donald", "Donato", "Donavon", "Donna", "Donnell", "Donnie", "Donny", "Dora", "Dorcas", "Dorian", "Doris", "Dorothea", "Dorothy", "Dorris", "Dortha", "Dorthy", "Doug", "Douglas", "Dovie", "Doyle", "Drake", "Drew", "Duane", "Dudley", "Dulce", "Duncan", "Durward", "Dustin", "Dusty", "Dwight", "Dylan", "Earl", "Earlene", "Earline", "Earnest", "Earnestine", "Easter", "Easton", "Ebba", "Ebony", "Ed", "Eda", "Edd", "Eddie", "Eden", "Edgar", "Edgardo", "Edison", "Edmond", "Edmund", "Edna", "Eduardo", "Edward", "Edwardo", "Edwin", "Edwina", "Edyth", "Edythe", "Effie", "Efrain", "Efren", "Eileen", "Einar", "Eino", "Eladio", "Elaina", "Elbert", "Elda", "Eldon", "Eldora", "Eldred", "Eldridge", "Eleanora", "Eleanore", "Eleazar", "Electa", "Elena", "Elenor", "Elenora", "Eleonore", "Elfrieda", "Eli", "Elian", "Eliane", "Elias", "Eliezer", "Elijah", "Elinor", "Elinore", "Elisa", "Elisabeth", "Elise", "Eliseo", "Elisha", "Elissa", "Eliza", "Elizabeth", "Ella", "Ellen", "Ellie", "Elliot", "Elliott", "Ellis", "Ellsworth", "Elmer", "Elmira", "Elmo", "Elmore", "Elna", "Elnora", "Elody", "Eloisa", "Eloise", "Elouise", "Eloy", "Elroy", "Elsa", "Else", "Elsie", "Elta", "Elton", "Elva", "Elvera", "Elvie", "Elvis", "Elwin", "Elwyn", "Elyse", "Elyssa", "Elza", "Emanuel", "Emelia", "Emelie", "Emely", "Emerald", "Emerson", "Emery", "Emie", "Emil", "Emile", "Emilia", "Emiliano", "Emilie", "Emilio", "Emily", "Emma", "Emmalee", "Emmanuel", "Emmanuelle", "Emmet", "Emmett", "Emmie", "Emmitt", "Emmy", "Emory", "Ena", "Enid", "Enoch", "Enola", "Enos", "Enrico", "Enrique", "Ephraim", "Era", "Eriberto", "Eric", "Erica", "Erich", "Erick", "Ericka", "Erik", "Erika", "Erin", "Erling", "Erna", "Ernest", "Ernestina", "Ernestine", "Ernesto", "Ernie", "Ervin", "Erwin", "Eryn", "Esmeralda", "Esperanza", "Esta", "Esteban", "Estefania", "Estel", "Estell", "Estella", "Estelle", "Estevan", "Esther", "Estrella", "Etha", "Ethan", "Ethel", "Ethelyn", "Ethyl", "Ettie", "Eudora", "Eugene", "Eugenia", "Eula", "Eulah", "Eulalia", "Euna", "Eunice", "Eusebio", "Eva", "Evalyn", "Evan", "Evangeline", "Evans", "Eve", "Eveline", "Evelyn", "Everardo", "Everett", "Everette", "Evert", "Evie", "Ewald", "Ewell", "Ezekiel", "Ezequiel", "Ezra", "Fabian", "Fabiola", "Fae", "Fannie", "Fanny", "Fatima", "Faustino", "Fausto", "Favian", "Fay", "Faye", "Federico", "Felicia", "Felicita", "Felicity", "Felipa", "Felipe", "Felix", "Felton", "Fermin", "Fern", "Fernando", "Ferne", "Fidel", "Filiberto", "Filomena", "Finn", "Fiona", "Flavie", "Flavio", "Fleta", "Fletcher", "Flo", "Florence", "Florencio", "Florian", "Florida", "Florine", "Flossie", "Floy", "Floyd", "Ford", "Forest", "Forrest", "Foster", "Frances", "Francesca", "Francesco", "Francis", "Francisca", "Francisco", "Franco", "Frank", "Frankie", "Franz", "Fred", "Freda", "Freddie", "Freddy", "Frederic", "Frederick", "Frederik", "Frederique", "Fredrick", "Fredy", "Freeda", "Freeman", "Freida", "Frida", "Frieda", "Friedrich", "Fritz", "Furman", "Gabe", "Gabriel", "Gabriella", "Gabrielle", "Gaetano", "Gage", "Gail", "Gardner", "Garett", "Garfield", "Garland", "Garnet", "Garnett", "Garret", "Garrett", "Garrick", "Garrison", "Garry", "Garth", "Gaston", "Gavin", "Gay", "Gayle", "Gaylord", "Gene", "General", "Genesis", "Genevieve", "Gennaro", "Genoveva", "Geo", "Geoffrey", "George", "Georgette", "Georgiana", "Georgianna", "Geovanni", "Geovanny", "Geovany", "Gerald", "Geraldine", "Gerard", "Gerardo", "Gerda", "Gerhard", "Germaine", "German", "Gerry", "Gerson", "Gertrude", "Gia", "Gianni", "Gideon", "Gilbert", "Gilberto", "Gilda", "Giles", "Gillian", "Gina", "Gino", "Giovani", "Giovanna", "Giovanni", "Giovanny", "Gisselle", "Giuseppe", "Gladyce", "Gladys", "Glen", "Glenda", "Glenna", "Glennie", "Gloria", "Godfrey", "Golda", "Golden", "Gonzalo", "Gordon", "Grace", "Gracie", "Graciela", "Grady", "Graham", "Grant", "Granville", "Grayce", "Grayson", "Green", "Greg", "Gregg", "Gregoria", "Gregorio", "Gregory", "Greta", "Gretchen", "Greyson", "Griffin", "Grover", "Guadalupe", "Gudrun", "Guido", "Guillermo", "Guiseppe", "Gunnar", "Gunner", "Gus", "Gussie", "Gust", "Gustave", "Guy", "Gwen", "Gwendolyn", "Hadley", "Hailee", "Hailey", "Hailie", "Hal", "Haleigh", "Haley", "Halie", "Halle", "Hallie", "Hank", "Hanna", "Hannah", "Hans", "Hardy", "Harley", "Harmon", "Harmony", "Harold", "Harrison", "Harry", "Harvey", "Haskell", "Hassan", "Hassie", "Hattie", "Haven", "Hayden", "Haylee", "Hayley", "Haylie", "Hazel", "Hazle", "Heath", "Heather", "Heaven", "Heber", "Hector", "Heidi", "Helen", "Helena", "Helene", "Helga", "Hellen", "Helmer", "Heloise", "Henderson", "Henri", "Henriette", "Henry", "Herbert", "Herman", "Hermann", "Hermina", "Herminia", "Herminio", "Hershel", "Herta", "Hertha", "Hester", "Hettie", "Hilario", "Hilbert", "Hilda", "Hildegard", "Hillard", "Hillary", "Hilma", "Hilton", "Hipolito", "Hiram", "Hobart", "Holden", "Hollie", "Hollis", "Holly", "Hope", "Horace", "Horacio", "Hortense", "Hosea", "Houston", "Howard", "Howell", "Hoyt", "Hubert", "Hudson", "Hugh", "Hulda", "Humberto", "Hunter", "Hyman", "Ian", "Ibrahim", "Icie", "Ida", "Idell", "Idella", "Ignacio", "Ignatius", "Ike", "Ila", "Ilene", "Iliana", "Ima", "Imani", "Imelda", "Immanuel", "Imogene", "Ines", "Irma", "Irving", "Irwin", "Isaac", "Isabel", "Isabell", "Isabella", "Isabelle", "Isac", "Isadore", "Isai", "Isaiah", "Isaias", "Isidro", "Ismael", "Isobel", "Isom", "Israel", "Issac", "Itzel", "Iva", "Ivah", "Ivory", "Ivy", "Izabella", "Izaiah", "Jabari", "Jace", "Jacey", "Jacinthe", "Jacinto", "Jack", "Jackeline", "Jackie", "Jacklyn", "Jackson", "Jacky", "Jaclyn", "Jacquelyn", "Jacques", "Jacynthe", "Jada", "Jade", "Jaden", "Jadon", "Jadyn", "Jaeden", "Jaida", "Jaiden", "Jailyn", "Jaime", "Jairo", "Jakayla", "Jake", "Jakob", "Jaleel", "Jalen", "Jalon", "Jalyn", "Jamaal", "Jamal", "Jamar", "Jamarcus", "Jamel", "Jameson", "Jamey", "Jamie", "Jamil", "Jamir", "Jamison", "Jammie", "Jan", "Jana", "Janae", "Jane", "Janelle", "Janessa", "Janet", "Janice", "Janick", "Janie", "Janis", "Janiya", "Jannie", "Jany", "Jaquan", "Jaquelin", "Jaqueline", "Jared", "Jaren", "Jarod", "Jaron", "Jarred", "Jarrell", "Jarret", "Jarrett", "Jarrod", "Jarvis", "Jasen", "Jasmin", "Jason", "Jasper", "Jaunita", "Javier", "Javon", "Javonte", "Jay", "Jayce", "Jaycee", "Jayda", "Jayde", "Jayden", "Jaydon", "Jaylan", "Jaylen", "Jaylin", "Jaylon", "Jayme", "Jayne", "Jayson", "Jazlyn", "Jazmin", "Jazmyn", "Jazmyne", "Jean", "Jeanette", "Jeanie", "Jeanne", "Jed", "Jedediah", "Jedidiah", "Jeff", "Jefferey", "Jeffery", "Jeffrey", "Jeffry", "Jena", "Jenifer", "Jennie", "Jennifer", "Jennings", "Jennyfer", "Jensen", "Jerad", "Jerald", "Jeramie", "Jeramy", "Jerel", "Jeremie", "Jeremy", "Jermain", "Jermaine", "Jermey", "Jerod", "Jerome", "Jeromy", "Jerrell", "Jerrod", "Jerrold", "Jerry", "Jess", "Jesse", "Jessica", "Jessie", "Jessika", "Jessy", "Jessyca", "Jesus", "Jett", "Jettie", "Jevon", "Jewel", "Jewell", "Jillian", "Jimmie", "Jimmy", "Jo", "Joan", "Joana", "Joanie", "Joanne", "Joannie", "Joanny", "Joany", "Joaquin", "Jocelyn", "Jodie", "Jody", "Joe", "Joel", "Joelle", "Joesph", "Joey", "Johan", "Johann", "Johanna", "Johathan", "John", "Johnathan", "Johnathon", "Johnnie", "Johnny", "Johnpaul", "Johnson", "Jolie", "Jon", "Jonas", "Jonatan", "Jonathan", "Jonathon", "Jordan", "Jordane", "Jordi", "Jordon", "Jordy", "Jordyn", "Jorge", "Jose", "Josefa", "Josefina", "Joseph", "Josephine", "Josh", "Joshua", "Joshuah", "Josiah", "Josiane", "Josianne", "Josie", "Josue", "Jovan", "Jovani", "Jovanny", "Jovany", "Joy", "Joyce", "Juana", "Juanita", "Judah", "Judd", "Jude", "Judge", "Judson", "Judy", "Jules", "Julia", "Julian", "Juliana", "Julianne", "Julie", "Julien", "Juliet", "Julio", "Julius", "June", "Junior", "Junius", "Justen", "Justice", "Justina", "Justine", "Juston", "Justus", "Justyn", "Juvenal", "Juwan", "Kacey", "Kaci", "Kacie", "Kade", "Kaden", "Kadin", "Kaela", "Kaelyn", "Kaia", "Kailee", "Kailey", "Kailyn", "Kaitlin", "Kaitlyn", "Kale", "Kaleb", "Kaleigh", "Kaley", "Kali", "Kallie", "Kameron", "Kamille", "Kamren", "Kamron", "Kamryn", "Kane", "Kara", "Kareem", "Karelle", "Karen", "Kari", "Kariane", "Karianne", "Karina", "Karine", "Karl", "Karlee", "Karley", "Karli", "Karlie", "Karolann", "Karson", "Kasandra", "Kasey", "Kassandra", "Katarina", "Katelin", "Katelyn", "Katelynn", "Katharina", "Katherine", "Katheryn", "Kathleen", "Kathlyn", "Kathryn", "Kathryne", "Katlyn", "Katlynn", "Katrina", "Katrine", "Kattie", "Kavon", "Kay", "Kaya", "Kaycee", "Kayden", "Kayla", "Kaylah", "Kaylee", "Kayleigh", "Kayley", "Kayli", "Kaylie", "Kaylin", "Keagan", "Keanu", "Keara", "Keaton", "Keegan", "Keeley", "Keely", "Keenan", "Keira", "Keith", "Kellen", "Kelley", "Kelli", "Kellie", "Kelly", "Kelsi", "Kelsie", "Kelton", "Kelvin", "Ken", "Kendall", "Kendra", "Kendrick", "Kenna", "Kennedi", "Kennedy", "Kenneth", "Kennith", "Kenny", "Kenton", "Kenya", "Kenyatta", "Kenyon", "Keon", "Keshaun", "Keshawn", "Keven", "Kevin", "Kevon", "Keyon", "Keyshawn", "Khalid", "Khalil", "Kian", "Kiana", "Kianna", "Kiara", "Kiarra", "Kiel", "Kiera", "Kieran", "Kiley", "Kim", "Kimberly", "King", "Kip", "Kira", "Kirk", "Kirsten", "Kirstin", "Kitty", "Kobe", "Koby", "Kody", "Kolby", "Kole", "Korbin", "Korey", "Kory", "Kraig", "Kris", "Krista", "Kristian", "Kristin", "Kristina", "Kristofer", "Kristoffer", "Kristopher", "Kristy", "Krystal", "Krystel", "Krystina", "Kurt", "Kurtis", "Kyla", "Kyle", "Kylee", "Kyleigh", "Kyler", "Kylie", "Kyra", "Lacey", "Lacy", "Ladarius", "Lafayette", "Laila", "Laisha", "Lamar", "Lambert", "Lamont", "Lance", "Landen", "Lane", "Laney", "Larissa", "Laron", "Larry", "Larue", "Laura", "Laurel", "Lauren", "Laurence", "Lauretta", "Lauriane", "Laurianne", "Laurie", "Laurine", "Laury", "Lauryn", "Lavada", "Lavern", "Laverna", "Laverne", "Lavina", "Lavinia", "Lavon", "Lavonne", "Lawrence", "Lawson", "Layla", "Layne", "Lazaro", "Lea", "Leann", "Leanna", "Leanne", "Leatha", "Leda", "Lee", "Leif", "Leila", "Leilani", "Lela", "Lelah", "Leland", "Lelia", "Lempi", "Lemuel", "Lenna", "Lennie", "Lenny", "Lenora", "Lenore", "Leo", "Leola", "Leon", "Leonard", "Leonardo", "Leone", "Leonel", "Leonie", "Leonor", "Leonora", "Leopold", "Leopoldo", "Leora", "Lera", "Lesley", "Leslie", "Lesly", "Lessie", "Lester", "Leta", "Letha", "Letitia", "Levi", "Lew", "Lewis", "Lexi", "Lexie", "Lexus", "Lia", "Liam", "Liana", "Libbie", "Libby", "Lila", "Lilian", "Liliana", "Liliane", "Lilla", "Lillian", "Lilliana", "Lillie", "Lilly", "Lily", "Lilyan", "Lina", "Lincoln", "Linda", "Lindsay", "Lindsey", "Linnea", "Linnie", "Linwood", "Lionel", "Lisa", "Lisandro", "Lisette", "Litzy", "Liza", "Lizeth", "Lizzie", "Llewellyn", "Lloyd", "Logan", "Lois", "Lola", "Lolita", "Loma", "Lon", "London", "Lonie", "Lonnie", "Lonny", "Lonzo", "Lora", "Loraine", "Loren", "Lorena", "Lorenz", "Lorenza", "Lorenzo", "Lori", "Lorine", "Lorna", "Lottie", "Lou", "Louie", "Louisa", "Lourdes", "Louvenia", "Lowell", "Loy", "Loyal", "Loyce", "Lucas", "Luciano", "Lucie", "Lucienne", "Lucile", "Lucinda", "Lucio", "Lucious", "Lucius", "Lucy", "Ludie", "Ludwig", "Lue", "Luella", "Luigi", "Luis", "Luisa", "Lukas", "Lula", "Lulu", "Luna", "Lupe", "Lura", "Lurline", "Luther", "Luz", "Lyda", "Lydia", "Lyla", "Lynn", "Lyric", "Lysanne", "Mabel", "Mabelle", "Mable", "Mac", "Macey", "Maci", "Macie", "Mack", "Mackenzie", "Macy", "Madaline", "Madalyn", "Maddison", "Madeline", "Madelyn", "Madelynn", "Madge", "Madie", "Madilyn", "Madisen", "Madison", "Madisyn", "Madonna", "Madyson", "Mae", "Maegan", "Maeve", "Mafalda", "Magali", "Magdalen", "Magdalena", "Maggie", "Magnolia", "Magnus", "Maia", "Maida", "Maiya", "Major", "Makayla", "Makenna", "Makenzie", "Malachi", "Malcolm", "Malika", "Malinda", "Mallie", "Mallory", "Malvina", "Mandy", "Manley", "Manuel", "Manuela", "Mara", "Marc", "Marcel", "Marcelina", "Marcelino", "Marcella", "Marcelle", "Marcellus", "Marcelo", "Marcia", "Marco", "Marcos", "Marcus", "Margaret", "Margarete", "Margarett", "Margaretta", "Margarette", "Margarita", "Marge", "Margie", "Margot", "Margret", "Marguerite", "Maria", "Mariah", "Mariam", "Marian", "Mariana", "Mariane", "Marianna", "Marianne", "Mariano", "Maribel", "Marie", "Mariela", "Marielle", "Marietta", "Marilie", "Marilou", "Marilyne", "Marina", "Mario", "Marion", "Marisa", "Marisol", "Maritza", "Marjolaine", "Marjorie", "Marjory", "Mark", "Markus", "Marlee", "Marlen", "Marlene", "Marley", "Marlin", "Marlon", "Marques", "Marquis", "Marquise", "Marshall", "Marta", "Martin", "Martina", "Martine", "Marty", "Marvin", "Mary", "Maryam", "Maryjane", "Maryse", "Mason", "Mateo", "Mathew", "Mathias", "Mathilde", "Matilda", "Matilde", "Matt", "Matteo", "Mattie", "Maud", "Maude", "Maudie", "Maureen", "Maurice", "Mauricio", "Maurine", "Maverick", "Mavis", "Max", "Maxie", "Maxime", "Maximilian", "Maximillia", "Maximillian", "Maximo", "Maximus", "Maxine", "Maxwell", "May", "Maya", "Maybell", "Maybelle", "Maye", "Maymie", "Maynard", "Mayra", "Mazie", "Mckayla", "Mckenna", "Mckenzie", "Meagan", "Meaghan", "Meda", "Megane", "Meggie", "Meghan", "Mekhi", "Melany", "Melba", "Melisa", "Melissa", "Mellie", "Melody", "Melvin", "Melvina", "Melyna", "Melyssa", "Mercedes", "Meredith", "Merl", "Merle", "Merlin", "Merritt", "Mertie", "Mervin", "Meta", "Mia", "Micaela", "Micah", "Michael", "Michaela", "Michale", "Micheal", "Michel", "Michele", "Michelle", "Miguel", "Mikayla", "Mike", "Mikel", "Milan", "Miles", "Milford", "Miller", "Millie", "Milo", "Milton", "Mina", "Minerva", "Minnie", "Miracle", "Mireille", "Mireya", "Misael", "Missouri", "Misty", "Mitchel", "Mitchell", "Mittie", "Modesta", "Modesto", "Mohamed", "Mohammad", "Mohammed", "Moises", "Mollie", "Molly", "Mona", "Monica", "Monique", "Monroe", "Monserrat", "Monserrate", "Montana", "Monte", "Monty", "Morgan", "Moriah", "Morris", "Mortimer", "Morton", "Mose", "Moses", "Moshe", "Mossie", "Mozell", "Mozelle", "Muhammad", "Muriel", "Murl", "Murphy", "Murray", "Mustafa", "Mya", "Myah", "Mylene", "Myles", "Myra", "Myriam", "Myrl", "Myrna", "Myron", "Myrtice", "Myrtie", "Myrtis", "Myrtle", "Nadia", "Nakia", "Name", "Nannie", "Naomi", "Naomie", "Napoleon", "Narciso", "Nash", "Nasir", "Nat", "Natalia", "Natalie", "Natasha", "Nathan", "Nathanael", "Nathanial", "Nathaniel", "Nathen", "Nayeli", "Neal", "Ned", "Nedra", "Neha", "Neil", "Nelda", "Nella", "Nelle", "Nellie", "Nels", "Nelson", "Neoma", "Nestor", "Nettie", "Neva", "Newell", "Newton", "Nia", "Nicholas", "Nicholaus", "Nichole", "Nick", "Nicklaus", "Nickolas", "Nico", "Nicola", "Nicolas", "Nicole", "Nicolette", "Nigel", "Nikita", "Nikki", "Nikko", "Niko", "Nikolas", "Nils", "Nina", "Noah", "Noble", "Noe", "Noel", "Noelia", "Noemi", "Noemie", "Noemy", "Nola", "Nolan", "Nona", "Nora", "Norbert", "Norberto", "Norene", "Norma", "Norris", "Norval", "Norwood", "Nova", "Novella", "Nya", "Nyah", "Nyasia", "Obie", "Oceane", "Ocie", "Octavia", "Oda", "Odell", "Odessa", "Odie", "Ofelia", "Okey", "Ola", "Olaf", "Ole", "Olen", "Oleta", "Olga", "Olin", "Oliver", "Ollie", "Oma", "Omari", "Omer", "Ona", "Onie", "Opal", "Ophelia", "Ora", "Oral", "Oran", "Oren", "Orie", "Orin", "Orion", "Orland", "Orlando", "Orlo", "Orpha", "Orrin", "Orval", "Orville", "Osbaldo", "Osborne", "Oscar", "Osvaldo", "Oswald", "Oswaldo", "Otha", "Otho", "Otilia", "Otis", "Ottilie", "Ottis", "Otto", "Ova", "Owen", "Ozella", "Pablo", "Paige", "Palma", "Pamela", "Pansy", "Paolo", "Paris", "Parker", "Pascale", "Pasquale", "Pat", "Patience", "Patricia", "Patrick", "Patsy", "Pattie", "Paul", "Paula", "Pauline", "Paxton", "Payton", "Pearl", "Pearlie", "Pearline", "Pedro", "Peggie", "Penelope", "Percival", "Percy", "Perry", "Pete", "Peter", "Petra", "Peyton", "Philip", "Phoebe", "Phyllis", "Pierce", "Pierre", "Pietro", "Pink", "Pinkie", "Piper", "Polly", "Porter", "Precious", "Presley", "Preston", "Price", "Prince", "Princess", "Priscilla", "Providenci", "Prudence", "Queen", "Queenie", "Quentin", "Quincy", "Quinn", "Quinten", "Quinton", "Rachael", "Rachel", "Rachelle", "Rae", "Raegan", "Rafael", "Rafaela", "Raheem", "Rahsaan", "Rahul", "Raina", "Raleigh", "Ralph", "Ramiro", "Ramon", "Ramona", "Randal", "Randall", "Randi", "Randy", "Ransom", "Raoul", "Raphael", "Raphaelle", "Raquel", "Rashad", "Rashawn", "Rasheed", "Raul", "Raven", "Ray", "Raymond", "Raymundo", "Reagan", "Reanna", "Reba", "Rebeca", "Rebecca", "Rebeka", "Rebekah", "Reece", "Reed", "Reese", "Regan", "Reggie", "Reginald", "Reid", "Reilly", "Reina", "Reinhold", "Remington", "Rene", "Renee", "Ressie", "Reta", "Retha", "Retta", "Reuben", "Reva", "Rex", "Rey", "Reyes", "Reymundo", "Reyna", "Reynold", "Rhea", "Rhett", "Rhianna", "Rhiannon", "Rhoda", "Ricardo", "Richard", "Richie", "Richmond", "Rick", "Rickey", "Rickie", "Ricky", "Rico", "Rigoberto", "Riley", "Rita", "River", "Robb", "Robbie", "Robert", "Roberta", "Roberto", "Robin", "Robyn", "Rocio", "Rocky", "Rod", "Roderick", "Rodger", "Rodolfo", "Rodrick", "Rodrigo", "Roel", "Rogelio", "Roger", "Rogers", "Rolando", "Rollin", "Roma", "Romaine", "Roman", "Ron", "Ronaldo", "Ronny", "Roosevelt", "Rory", "Rosa", "Rosalee", "Rosalia", "Rosalind", "Rosalinda", "Rosalyn", "Rosamond", "Rosanna", "Rosario", "Roscoe", "Rose", "Rosella", "Roselyn", "Rosemarie", "Rosemary", "Rosendo", "Rosetta", "Rosie", "Rosina", "Roslyn", "Ross", "Rossie", "Rowan", "Rowena", "Rowland", "Roxane", "Roxanne", "Roy", "Royal", "Royce", "Rozella", "Ruben", "Rubie", "Ruby", "Rubye", "Rudolph", "Rudy", "Rupert", "Russ", "Russel", "Russell", "Rusty", "Ruth", "Ruthe", "Ruthie", "Ryan", "Ryann", "Ryder", "Rylan", "Rylee", "Ryleigh", "Ryley", "Sabina", "Sabrina", "Sabryna", "Sadie", "Sadye", "Sage", "Saige", "Sallie", "Sally", "Salma", "Salvador", "Salvatore", "Sam", "Samanta", "Samantha", "Samara", "Samir", "Sammie", "Sammy", "Samson", "Sandra", "Sandrine", "Sandy", "Sanford", "Santa", "Santiago", "Santina", "Santino", "Santos", "Sarah", "Sarai", "Sarina", "Sasha", "Saul", "Savanah", "Savanna", "Savannah", "Savion", "Scarlett", "Schuyler", "Scot", "Scottie", "Scotty", "Seamus", "Sean", "Sebastian", "Sedrick", "Selena", "Selina", "Selmer", "Serena", "Serenity", "Seth", "Shad", "Shaina", "Shakira", "Shana", "Shane", "Shanel", "Shanelle", "Shania", "Shanie", "Shaniya", "Shanna", "Shannon", "Shanny", "Shanon", "Shany", "Sharon", "Shaun", "Shawn", "Shawna", "Shaylee", "Shayna", "Shayne", "Shea", "Sheila", "Sheldon", "Shemar", "Sheridan", "Sherman", "Sherwood", "Shirley", "Shyann", "Shyanne", "Sibyl", "Sid", "Sidney", "Sienna", "Sierra", "Sigmund", "Sigrid", "Sigurd", "Silas", "Sim", "Simeon", "Simone", "Sincere", "Sister", "Skye", "Skyla", "Skylar", "Sofia", "Soledad", "Solon", "Sonia", "Sonny", "Sonya", "Sophia", "Sophie", "Spencer", "Stacey", "Stacy", "Stan", "Stanford", "Stanley", "Stanton", "Stefan", "Stefanie", "Stella", "Stephan", "Stephania", "Stephanie", "Stephany", "Stephen", "Stephon", "Sterling", "Steve", "Stevie", "Stewart", "Stone", "Stuart", "Summer", "Sunny", "Susan", "Susana", "Susanna", "Susie", "Suzanne", "Sven", "Syble", "Sydnee", "Sydney", "Sydni", "Sydnie", "Sylvan", "Sylvester", "Sylvia", "Tabitha", "Tad", "Talia", "Talon", "Tamara", "Tamia", "Tania", "Tanner", "Tanya", "Tara", "Taryn", "Tate", "Tatum", "Tatyana", "Taurean", "Tavares", "Taya", "Taylor", "Teagan", "Ted", "Telly", "Terence", "Teresa", "Terrance", "Terrell", "Terrence", "Terrill", "Terry", "Tess", "Tessie", "Tevin", "Thad", "Thaddeus", "Thalia", "Thea", "Thelma", "Theo", "Theodora", "Theodore", "Theresa", "Therese", "Theresia", "Theron", "Thomas", "Thora", "Thurman", "Tia", "Tiana", "Tianna", "Tiara", "Tierra", "Tiffany", "Tillman", "Timmothy", "Timmy", "Timothy", "Tina", "Tito", "Titus", "Tobin", "Toby", "Tod", "Tom", "Tomas", "Tomasa", "Tommie", "Toney", "Toni", "Tony", "Torey", "Torrance", "Torrey", "Toy", "Trace", "Tracey", "Tracy", "Travis", "Travon", "Tre", "Tremaine", "Tremayne", "Trent", "Trenton", "Tressa", "Tressie", "Treva", "Trever", "Trevion", "Trevor", "Trey", "Trinity", "Trisha", "Tristian", "Tristin", "Triston", "Troy", "Trudie", "Trycia", "Trystan", "Turner", "Twila", "Tyler", "Tyra", "Tyree", "Tyreek", "Tyrel", "Tyrell", "Tyrese", "Tyrique", "Tyshawn", "Tyson", "Ubaldo", "Ulices", "Ulises", "Una", "Unique", "Urban", "Uriah", "Uriel", "Ursula", "Vada", "Valentin", "Valentina", "Valentine", "Valerie", "Vallie", "Van", "Vance", "Vanessa", "Vaughn", "Veda", "Velda", "Vella", "Velma", "Velva", "Vena", "Verda", "Verdie", "Vergie", "Verla", "Verlie", "Vern", "Verna", "Verner", "Vernice", "Vernie", "Vernon", "Verona", "Veronica", "Vesta", "Vicenta", "Vicente", "Vickie", "Vicky", "Victor", "Victoria", "Vida", "Vidal", "Vilma", "Vince", "Vincent", "Vincenza", "Vincenzo", "Vinnie", "Viola", "Violet", "Violette", "Virgie", "Virgil", "Virginia", "Virginie", "Vita", "Vito", "Viva", "Vivian", "Viviane", "Vivianne", "Vivien", "Vivienne", "Vladimir", "Wade", "Waino", "Waldo", "Walker", "Wallace", "Walter", "Walton", "Wanda", "Ward", "Warren", "Watson", "Wava", "Waylon", "Wayne", "Webster", "Weldon", "Wellington", "Wendell", "Wendy", "Werner", "Westley", "Weston", "Whitney", "Wilber", "Wilbert", "Wilburn", "Wiley", "Wilford", "Wilfred", "Wilfredo", "Wilfrid", "Wilhelm", "Wilhelmine", "Will", "Willa", "Willard", "William", "Willie", "Willis", "Willow", "Willy", "Wilma", "Wilmer", "Wilson", "Wilton", "Winfield", "Winifred", "Winnifred", "Winona", "Winston", "Woodrow", "Wyatt", "Wyman", "Xander", "Xavier", "Xzavier", "Yadira", "Yasmeen", "Yasmin", "Yasmine", "Yazmin", "Yesenia", "Yessenia", "Yolanda", "Yoshiko", "Yvette", "Yvonne", "Zachariah", "Zachary", "Zachery", "Zack", "Zackary", "Zackery", "Zakary", "Zander", "Zane", "Zaria", "Zechariah", "Zelda", "Zella", "Zelma", "Zena", "Zetta", "Zion", "Zita", "Zoe", "Zoey", "Zoie", "Zoila", "Zola", "Zora", "Zula"];

},{}],124:[function(require,module,exports){
"use strict";

var name = {};
module['exports'] = name;
name.first_name = require("./first_name");
name.last_name = require("./last_name");
name.prefix = require("./prefix");
name.suffix = require("./suffix");
name.title = require("./title");
name.name = require("./name");

},{"./first_name":123,"./last_name":125,"./name":126,"./prefix":127,"./suffix":128,"./title":129}],125:[function(require,module,exports){
"use strict";

module["exports"] = ["Abbott", "Abernathy", "Abshire", "Adams", "Altenwerth", "Anderson", "Ankunding", "Armstrong", "Auer", "Aufderhar", "Bahringer", "Bailey", "Balistreri", "Barrows", "Bartell", "Bartoletti", "Barton", "Bashirian", "Batz", "Bauch", "Baumbach", "Bayer", "Beahan", "Beatty", "Bechtelar", "Becker", "Bednar", "Beer", "Beier", "Berge", "Bergnaum", "Bergstrom", "Bernhard", "Bernier", "Bins", "Blanda", "Blick", "Block", "Bode", "Boehm", "Bogan", "Bogisich", "Borer", "Bosco", "Botsford", "Boyer", "Boyle", "Bradtke", "Brakus", "Braun", "Breitenberg", "Brekke", "Brown", "Bruen", "Buckridge", "Carroll", "Carter", "Cartwright", "Casper", "Cassin", "Champlin", "Christiansen", "Cole", "Collier", "Collins", "Conn", "Connelly", "Conroy", "Considine", "Corkery", "Cormier", "Corwin", "Cremin", "Crist", "Crona", "Cronin", "Crooks", "Cruickshank", "Cummerata", "Cummings", "Dach", "D'Amore", "Daniel", "Dare", "Daugherty", "Davis", "Deckow", "Denesik", "Dibbert", "Dickens", "Dicki", "Dickinson", "Dietrich", "Donnelly", "Dooley", "Douglas", "Doyle", "DuBuque", "Durgan", "Ebert", "Effertz", "Eichmann", "Emard", "Emmerich", "Erdman", "Ernser", "Fadel", "Fahey", "Farrell", "Fay", "Feeney", "Feest", "Feil", "Ferry", "Fisher", "Flatley", "Frami", "Franecki", "Friesen", "Fritsch", "Funk", "Gaylord", "Gerhold", "Gerlach", "Gibson", "Gislason", "Gleason", "Gleichner", "Glover", "Goldner", "Goodwin", "Gorczany", "Gottlieb", "Goyette", "Grady", "Graham", "Grant", "Green", "Greenfelder", "Greenholt", "Grimes", "Gulgowski", "Gusikowski", "Gutkowski", "Gutmann", "Haag", "Hackett", "Hagenes", "Hahn", "Haley", "Halvorson", "Hamill", "Hammes", "Hand", "Hane", "Hansen", "Harber", "Harris", "Hartmann", "Harvey", "Hauck", "Hayes", "Heaney", "Heathcote", "Hegmann", "Heidenreich", "Heller", "Herman", "Hermann", "Hermiston", "Herzog", "Hessel", "Hettinger", "Hickle", "Hilll", "Hills", "Hilpert", "Hintz", "Hirthe", "Hodkiewicz", "Hoeger", "Homenick", "Hoppe", "Howe", "Howell", "Hudson", "Huel", "Huels", "Hyatt", "Jacobi", "Jacobs", "Jacobson", "Jakubowski", "Jaskolski", "Jast", "Jenkins", "Jerde", "Johns", "Johnson", "Johnston", "Jones", "Kassulke", "Kautzer", "Keebler", "Keeling", "Kemmer", "Kerluke", "Kertzmann", "Kessler", "Kiehn", "Kihn", "Kilback", "King", "Kirlin", "Klein", "Kling", "Klocko", "Koch", "Koelpin", "Koepp", "Kohler", "Konopelski", "Koss", "Kovacek", "Kozey", "Krajcik", "Kreiger", "Kris", "Kshlerin", "Kub", "Kuhic", "Kuhlman", "Kuhn", "Kulas", "Kunde", "Kunze", "Kuphal", "Kutch", "Kuvalis", "Labadie", "Lakin", "Lang", "Langosh", "Langworth", "Larkin", "Larson", "Leannon", "Lebsack", "Ledner", "Leffler", "Legros", "Lehner", "Lemke", "Lesch", "Leuschke", "Lind", "Lindgren", "Littel", "Little", "Lockman", "Lowe", "Lubowitz", "Lueilwitz", "Luettgen", "Lynch", "Macejkovic", "MacGyver", "Maggio", "Mann", "Mante", "Marks", "Marquardt", "Marvin", "Mayer", "Mayert", "McClure", "McCullough", "McDermott", "McGlynn", "McKenzie", "McLaughlin", "Medhurst", "Mertz", "Metz", "Miller", "Mills", "Mitchell", "Moen", "Mohr", "Monahan", "Moore", "Morar", "Morissette", "Mosciski", "Mraz", "Mueller", "Muller", "Murazik", "Murphy", "Murray", "Nader", "Nicolas", "Nienow", "Nikolaus", "Nitzsche", "Nolan", "Oberbrunner", "O'Connell", "O'Conner", "O'Hara", "O'Keefe", "O'Kon", "Okuneva", "Olson", "Ondricka", "O'Reilly", "Orn", "Ortiz", "Osinski", "Pacocha", "Padberg", "Pagac", "Parisian", "Parker", "Paucek", "Pfannerstill", "Pfeffer", "Pollich", "Pouros", "Powlowski", "Predovic", "Price", "Prohaska", "Prosacco", "Purdy", "Quigley", "Quitzon", "Rath", "Ratke", "Rau", "Raynor", "Reichel", "Reichert", "Reilly", "Reinger", "Rempel", "Renner", "Reynolds", "Rice", "Rippin", "Ritchie", "Robel", "Roberts", "Rodriguez", "Rogahn", "Rohan", "Rolfson", "Romaguera", "Roob", "Rosenbaum", "Rowe", "Ruecker", "Runolfsdottir", "Runolfsson", "Runte", "Russel", "Rutherford", "Ryan", "Sanford", "Satterfield", "Sauer", "Sawayn", "Schaden", "Schaefer", "Schamberger", "Schiller", "Schimmel", "Schinner", "Schmeler", "Schmidt", "Schmitt", "Schneider", "Schoen", "Schowalter", "Schroeder", "Schulist", "Schultz", "Schumm", "Schuppe", "Schuster", "Senger", "Shanahan", "Shields", "Simonis", "Sipes", "Skiles", "Smith", "Smitham", "Spencer", "Spinka", "Sporer", "Stamm", "Stanton", "Stark", "Stehr", "Steuber", "Stiedemann", "Stokes", "Stoltenberg", "Stracke", "Streich", "Stroman", "Strosin", "Swaniawski", "Swift", "Terry", "Thiel", "Thompson", "Tillman", "Torp", "Torphy", "Towne", "Toy", "Trantow", "Tremblay", "Treutel", "Tromp", "Turcotte", "Turner", "Ullrich", "Upton", "Vandervort", "Veum", "Volkman", "Von", "VonRueden", "Waelchi", "Walker", "Walsh", "Walter", "Ward", "Waters", "Watsica", "Weber", "Wehner", "Weimann", "Weissnat", "Welch", "West", "White", "Wiegand", "Wilderman", "Wilkinson", "Will", "Williamson", "Willms", "Windler", "Wintheiser", "Wisoky", "Wisozk", "Witting", "Wiza", "Wolf", "Wolff", "Wuckert", "Wunsch", "Wyman", "Yost", "Yundt", "Zboncak", "Zemlak", "Ziemann", "Zieme", "Zulauf"];

},{}],126:[function(require,module,exports){
"use strict";

module["exports"] = ["#{prefix} #{first_name} #{last_name}", "#{first_name} #{last_name} #{suffix}", "#{first_name} #{last_name}", "#{first_name} #{last_name}", "#{first_name} #{last_name}", "#{first_name} #{last_name}"];

},{}],127:[function(require,module,exports){
"use strict";

module["exports"] = ["Mr.", "Mrs.", "Ms.", "Miss", "Dr."];

},{}],128:[function(require,module,exports){
"use strict";

module["exports"] = ["Jr.", "Sr.", "I", "II", "III", "IV", "V", "MD", "DDS", "PhD", "DVM"];

},{}],129:[function(require,module,exports){
"use strict";

module["exports"] = {
  "descriptor": ["Lead", "Senior", "Direct", "Corporate", "Dynamic", "Future", "Product", "National", "Regional", "District", "Central", "Global", "Customer", "Investor", "Dynamic", "International", "Legacy", "Forward", "Internal", "Human", "Chief", "Principal"],
  "level": ["Solutions", "Program", "Brand", "Security", "Research", "Marketing", "Directives", "Implementation", "Integration", "Functionality", "Response", "Paradigm", "Tactics", "Identity", "Markets", "Group", "Division", "Applications", "Optimization", "Operations", "Infrastructure", "Intranet", "Communications", "Web", "Branding", "Quality", "Assurance", "Mobility", "Accounts", "Data", "Creative", "Configuration", "Accountability", "Interactions", "Factors", "Usability", "Metrics"],
  "job": ["Supervisor", "Associate", "Executive", "Liaison", "Officer", "Manager", "Engineer", "Specialist", "Director", "Coordinator", "Administrator", "Architect", "Analyst", "Designer", "Planner", "Orchestrator", "Technician", "Developer", "Producer", "Consultant", "Assistant", "Facilitator", "Agent", "Representative", "Strategist"]
};

},{}],130:[function(require,module,exports){
"use strict";

module["exports"] = ["###-###-####", "(###) ###-####", "1-###-###-####", "###.###.####", "###-###-####", "(###) ###-####", "1-###-###-####", "###.###.####", "###-###-#### x###", "(###) ###-#### x###", "1-###-###-#### x###", "###.###.#### x###", "###-###-#### x####", "(###) ###-#### x####", "1-###-###-#### x####", "###.###.#### x####", "###-###-#### x#####", "(###) ###-#### x#####", "1-###-###-#### x#####", "###.###.#### x#####"];

},{}],131:[function(require,module,exports){
"use strict";

var phone_number = {};
module['exports'] = phone_number;
phone_number.formats = require("./formats");

},{"./formats":130}],132:[function(require,module,exports){
"use strict";

var system = {};
module['exports'] = system;
system.mimeTypes = require("./mimeTypes");

},{"./mimeTypes":133}],133:[function(require,module,exports){
"use strict";

/*

The MIT License (MIT)

Copyright (c) 2014 Jonathan Ong me@jongleberry.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

Definitions from mime-db v1.21.0
For updates check: https://github.com/jshttp/mime-db/blob/master/db.json

*/

module['exports'] = {
  "application/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "application/3gpdash-qoe-report+xml": {
    "source": "iana"
  },
  "application/3gpp-ims+xml": {
    "source": "iana"
  },
  "application/a2l": {
    "source": "iana"
  },
  "application/activemessage": {
    "source": "iana"
  },
  "application/alto-costmap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-costmapfilter+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-directory+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointcost+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointcostparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointprop+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-endpointpropparams+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-error+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-networkmap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/alto-networkmapfilter+json": {
    "source": "iana",
    "compressible": true
  },
  "application/aml": {
    "source": "iana"
  },
  "application/andrew-inset": {
    "source": "iana",
    "extensions": ["ez"]
  },
  "application/applefile": {
    "source": "iana"
  },
  "application/applixware": {
    "source": "apache",
    "extensions": ["aw"]
  },
  "application/atf": {
    "source": "iana"
  },
  "application/atfx": {
    "source": "iana"
  },
  "application/atom+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["atom"]
  },
  "application/atomcat+xml": {
    "source": "iana",
    "extensions": ["atomcat"]
  },
  "application/atomdeleted+xml": {
    "source": "iana"
  },
  "application/atomicmail": {
    "source": "iana"
  },
  "application/atomsvc+xml": {
    "source": "iana",
    "extensions": ["atomsvc"]
  },
  "application/atxml": {
    "source": "iana"
  },
  "application/auth-policy+xml": {
    "source": "iana"
  },
  "application/bacnet-xdd+zip": {
    "source": "iana"
  },
  "application/batch-smtp": {
    "source": "iana"
  },
  "application/bdoc": {
    "compressible": false,
    "extensions": ["bdoc"]
  },
  "application/beep+xml": {
    "source": "iana"
  },
  "application/calendar+json": {
    "source": "iana",
    "compressible": true
  },
  "application/calendar+xml": {
    "source": "iana"
  },
  "application/call-completion": {
    "source": "iana"
  },
  "application/cals-1840": {
    "source": "iana"
  },
  "application/cbor": {
    "source": "iana"
  },
  "application/ccmp+xml": {
    "source": "iana"
  },
  "application/ccxml+xml": {
    "source": "iana",
    "extensions": ["ccxml"]
  },
  "application/cdfx+xml": {
    "source": "iana"
  },
  "application/cdmi-capability": {
    "source": "iana",
    "extensions": ["cdmia"]
  },
  "application/cdmi-container": {
    "source": "iana",
    "extensions": ["cdmic"]
  },
  "application/cdmi-domain": {
    "source": "iana",
    "extensions": ["cdmid"]
  },
  "application/cdmi-object": {
    "source": "iana",
    "extensions": ["cdmio"]
  },
  "application/cdmi-queue": {
    "source": "iana",
    "extensions": ["cdmiq"]
  },
  "application/cdni": {
    "source": "iana"
  },
  "application/cea": {
    "source": "iana"
  },
  "application/cea-2018+xml": {
    "source": "iana"
  },
  "application/cellml+xml": {
    "source": "iana"
  },
  "application/cfw": {
    "source": "iana"
  },
  "application/cms": {
    "source": "iana"
  },
  "application/cnrp+xml": {
    "source": "iana"
  },
  "application/coap-group+json": {
    "source": "iana",
    "compressible": true
  },
  "application/commonground": {
    "source": "iana"
  },
  "application/conference-info+xml": {
    "source": "iana"
  },
  "application/cpl+xml": {
    "source": "iana"
  },
  "application/csrattrs": {
    "source": "iana"
  },
  "application/csta+xml": {
    "source": "iana"
  },
  "application/cstadata+xml": {
    "source": "iana"
  },
  "application/csvm+json": {
    "source": "iana",
    "compressible": true
  },
  "application/cu-seeme": {
    "source": "apache",
    "extensions": ["cu"]
  },
  "application/cybercash": {
    "source": "iana"
  },
  "application/dart": {
    "compressible": true
  },
  "application/dash+xml": {
    "source": "iana",
    "extensions": ["mdp"]
  },
  "application/dashdelta": {
    "source": "iana"
  },
  "application/davmount+xml": {
    "source": "iana",
    "extensions": ["davmount"]
  },
  "application/dca-rft": {
    "source": "iana"
  },
  "application/dcd": {
    "source": "iana"
  },
  "application/dec-dx": {
    "source": "iana"
  },
  "application/dialog-info+xml": {
    "source": "iana"
  },
  "application/dicom": {
    "source": "iana"
  },
  "application/dii": {
    "source": "iana"
  },
  "application/dit": {
    "source": "iana"
  },
  "application/dns": {
    "source": "iana"
  },
  "application/docbook+xml": {
    "source": "apache",
    "extensions": ["dbk"]
  },
  "application/dskpp+xml": {
    "source": "iana"
  },
  "application/dssc+der": {
    "source": "iana",
    "extensions": ["dssc"]
  },
  "application/dssc+xml": {
    "source": "iana",
    "extensions": ["xdssc"]
  },
  "application/dvcs": {
    "source": "iana"
  },
  "application/ecmascript": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ecma"]
  },
  "application/edi-consent": {
    "source": "iana"
  },
  "application/edi-x12": {
    "source": "iana",
    "compressible": false
  },
  "application/edifact": {
    "source": "iana",
    "compressible": false
  },
  "application/emergencycalldata.comment+xml": {
    "source": "iana"
  },
  "application/emergencycalldata.deviceinfo+xml": {
    "source": "iana"
  },
  "application/emergencycalldata.providerinfo+xml": {
    "source": "iana"
  },
  "application/emergencycalldata.serviceinfo+xml": {
    "source": "iana"
  },
  "application/emergencycalldata.subscriberinfo+xml": {
    "source": "iana"
  },
  "application/emma+xml": {
    "source": "iana",
    "extensions": ["emma"]
  },
  "application/emotionml+xml": {
    "source": "iana"
  },
  "application/encaprtp": {
    "source": "iana"
  },
  "application/epp+xml": {
    "source": "iana"
  },
  "application/epub+zip": {
    "source": "iana",
    "extensions": ["epub"]
  },
  "application/eshop": {
    "source": "iana"
  },
  "application/exi": {
    "source": "iana",
    "extensions": ["exi"]
  },
  "application/fastinfoset": {
    "source": "iana"
  },
  "application/fastsoap": {
    "source": "iana"
  },
  "application/fdt+xml": {
    "source": "iana"
  },
  "application/fits": {
    "source": "iana"
  },
  "application/font-sfnt": {
    "source": "iana"
  },
  "application/font-tdpfr": {
    "source": "iana",
    "extensions": ["pfr"]
  },
  "application/font-woff": {
    "source": "iana",
    "compressible": false,
    "extensions": ["woff"]
  },
  "application/font-woff2": {
    "compressible": false,
    "extensions": ["woff2"]
  },
  "application/framework-attributes+xml": {
    "source": "iana"
  },
  "application/gml+xml": {
    "source": "apache",
    "extensions": ["gml"]
  },
  "application/gpx+xml": {
    "source": "apache",
    "extensions": ["gpx"]
  },
  "application/gxf": {
    "source": "apache",
    "extensions": ["gxf"]
  },
  "application/gzip": {
    "source": "iana",
    "compressible": false
  },
  "application/h224": {
    "source": "iana"
  },
  "application/held+xml": {
    "source": "iana"
  },
  "application/http": {
    "source": "iana"
  },
  "application/hyperstudio": {
    "source": "iana",
    "extensions": ["stk"]
  },
  "application/ibe-key-request+xml": {
    "source": "iana"
  },
  "application/ibe-pkg-reply+xml": {
    "source": "iana"
  },
  "application/ibe-pp-data": {
    "source": "iana"
  },
  "application/iges": {
    "source": "iana"
  },
  "application/im-iscomposing+xml": {
    "source": "iana"
  },
  "application/index": {
    "source": "iana"
  },
  "application/index.cmd": {
    "source": "iana"
  },
  "application/index.obj": {
    "source": "iana"
  },
  "application/index.response": {
    "source": "iana"
  },
  "application/index.vnd": {
    "source": "iana"
  },
  "application/inkml+xml": {
    "source": "iana",
    "extensions": ["ink", "inkml"]
  },
  "application/iotp": {
    "source": "iana"
  },
  "application/ipfix": {
    "source": "iana",
    "extensions": ["ipfix"]
  },
  "application/ipp": {
    "source": "iana"
  },
  "application/isup": {
    "source": "iana"
  },
  "application/its+xml": {
    "source": "iana"
  },
  "application/java-archive": {
    "source": "apache",
    "compressible": false,
    "extensions": ["jar", "war", "ear"]
  },
  "application/java-serialized-object": {
    "source": "apache",
    "compressible": false,
    "extensions": ["ser"]
  },
  "application/java-vm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["class"]
  },
  "application/javascript": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["js"]
  },
  "application/jose": {
    "source": "iana"
  },
  "application/jose+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jrd+json": {
    "source": "iana",
    "compressible": true
  },
  "application/json": {
    "source": "iana",
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["json", "map"]
  },
  "application/json-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/json-seq": {
    "source": "iana"
  },
  "application/json5": {
    "extensions": ["json5"]
  },
  "application/jsonml+json": {
    "source": "apache",
    "compressible": true,
    "extensions": ["jsonml"]
  },
  "application/jwk+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jwk-set+json": {
    "source": "iana",
    "compressible": true
  },
  "application/jwt": {
    "source": "iana"
  },
  "application/kpml-request+xml": {
    "source": "iana"
  },
  "application/kpml-response+xml": {
    "source": "iana"
  },
  "application/ld+json": {
    "source": "iana",
    "compressible": true,
    "extensions": ["jsonld"]
  },
  "application/link-format": {
    "source": "iana"
  },
  "application/load-control+xml": {
    "source": "iana"
  },
  "application/lost+xml": {
    "source": "iana",
    "extensions": ["lostxml"]
  },
  "application/lostsync+xml": {
    "source": "iana"
  },
  "application/lxf": {
    "source": "iana"
  },
  "application/mac-binhex40": {
    "source": "iana",
    "extensions": ["hqx"]
  },
  "application/mac-compactpro": {
    "source": "apache",
    "extensions": ["cpt"]
  },
  "application/macwriteii": {
    "source": "iana"
  },
  "application/mads+xml": {
    "source": "iana",
    "extensions": ["mads"]
  },
  "application/manifest+json": {
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["webmanifest"]
  },
  "application/marc": {
    "source": "iana",
    "extensions": ["mrc"]
  },
  "application/marcxml+xml": {
    "source": "iana",
    "extensions": ["mrcx"]
  },
  "application/mathematica": {
    "source": "iana",
    "extensions": ["ma", "nb", "mb"]
  },
  "application/mathml+xml": {
    "source": "iana",
    "extensions": ["mathml"]
  },
  "application/mathml-content+xml": {
    "source": "iana"
  },
  "application/mathml-presentation+xml": {
    "source": "iana"
  },
  "application/mbms-associated-procedure-description+xml": {
    "source": "iana"
  },
  "application/mbms-deregister+xml": {
    "source": "iana"
  },
  "application/mbms-envelope+xml": {
    "source": "iana"
  },
  "application/mbms-msk+xml": {
    "source": "iana"
  },
  "application/mbms-msk-response+xml": {
    "source": "iana"
  },
  "application/mbms-protection-description+xml": {
    "source": "iana"
  },
  "application/mbms-reception-report+xml": {
    "source": "iana"
  },
  "application/mbms-register+xml": {
    "source": "iana"
  },
  "application/mbms-register-response+xml": {
    "source": "iana"
  },
  "application/mbms-schedule+xml": {
    "source": "iana"
  },
  "application/mbms-user-service-description+xml": {
    "source": "iana"
  },
  "application/mbox": {
    "source": "iana",
    "extensions": ["mbox"]
  },
  "application/media-policy-dataset+xml": {
    "source": "iana"
  },
  "application/media_control+xml": {
    "source": "iana"
  },
  "application/mediaservercontrol+xml": {
    "source": "iana",
    "extensions": ["mscml"]
  },
  "application/merge-patch+json": {
    "source": "iana",
    "compressible": true
  },
  "application/metalink+xml": {
    "source": "apache",
    "extensions": ["metalink"]
  },
  "application/metalink4+xml": {
    "source": "iana",
    "extensions": ["meta4"]
  },
  "application/mets+xml": {
    "source": "iana",
    "extensions": ["mets"]
  },
  "application/mf4": {
    "source": "iana"
  },
  "application/mikey": {
    "source": "iana"
  },
  "application/mods+xml": {
    "source": "iana",
    "extensions": ["mods"]
  },
  "application/moss-keys": {
    "source": "iana"
  },
  "application/moss-signature": {
    "source": "iana"
  },
  "application/mosskey-data": {
    "source": "iana"
  },
  "application/mosskey-request": {
    "source": "iana"
  },
  "application/mp21": {
    "source": "iana",
    "extensions": ["m21", "mp21"]
  },
  "application/mp4": {
    "source": "iana",
    "extensions": ["mp4s", "m4p"]
  },
  "application/mpeg4-generic": {
    "source": "iana"
  },
  "application/mpeg4-iod": {
    "source": "iana"
  },
  "application/mpeg4-iod-xmt": {
    "source": "iana"
  },
  "application/mrb-consumer+xml": {
    "source": "iana"
  },
  "application/mrb-publish+xml": {
    "source": "iana"
  },
  "application/msc-ivr+xml": {
    "source": "iana"
  },
  "application/msc-mixer+xml": {
    "source": "iana"
  },
  "application/msword": {
    "source": "iana",
    "compressible": false,
    "extensions": ["doc", "dot"]
  },
  "application/mxf": {
    "source": "iana",
    "extensions": ["mxf"]
  },
  "application/nasdata": {
    "source": "iana"
  },
  "application/news-checkgroups": {
    "source": "iana"
  },
  "application/news-groupinfo": {
    "source": "iana"
  },
  "application/news-transmission": {
    "source": "iana"
  },
  "application/nlsml+xml": {
    "source": "iana"
  },
  "application/nss": {
    "source": "iana"
  },
  "application/ocsp-request": {
    "source": "iana"
  },
  "application/ocsp-response": {
    "source": "iana"
  },
  "application/octet-stream": {
    "source": "iana",
    "compressible": false,
    "extensions": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
  },
  "application/oda": {
    "source": "iana",
    "extensions": ["oda"]
  },
  "application/odx": {
    "source": "iana"
  },
  "application/oebps-package+xml": {
    "source": "iana",
    "extensions": ["opf"]
  },
  "application/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ogx"]
  },
  "application/omdoc+xml": {
    "source": "apache",
    "extensions": ["omdoc"]
  },
  "application/onenote": {
    "source": "apache",
    "extensions": ["onetoc", "onetoc2", "onetmp", "onepkg"]
  },
  "application/oxps": {
    "source": "iana",
    "extensions": ["oxps"]
  },
  "application/p2p-overlay+xml": {
    "source": "iana"
  },
  "application/parityfec": {
    "source": "iana"
  },
  "application/patch-ops-error+xml": {
    "source": "iana",
    "extensions": ["xer"]
  },
  "application/pdf": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pdf"]
  },
  "application/pdx": {
    "source": "iana"
  },
  "application/pgp-encrypted": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pgp"]
  },
  "application/pgp-keys": {
    "source": "iana"
  },
  "application/pgp-signature": {
    "source": "iana",
    "extensions": ["asc", "sig"]
  },
  "application/pics-rules": {
    "source": "apache",
    "extensions": ["prf"]
  },
  "application/pidf+xml": {
    "source": "iana"
  },
  "application/pidf-diff+xml": {
    "source": "iana"
  },
  "application/pkcs10": {
    "source": "iana",
    "extensions": ["p10"]
  },
  "application/pkcs12": {
    "source": "iana"
  },
  "application/pkcs7-mime": {
    "source": "iana",
    "extensions": ["p7m", "p7c"]
  },
  "application/pkcs7-signature": {
    "source": "iana",
    "extensions": ["p7s"]
  },
  "application/pkcs8": {
    "source": "iana",
    "extensions": ["p8"]
  },
  "application/pkix-attr-cert": {
    "source": "iana",
    "extensions": ["ac"]
  },
  "application/pkix-cert": {
    "source": "iana",
    "extensions": ["cer"]
  },
  "application/pkix-crl": {
    "source": "iana",
    "extensions": ["crl"]
  },
  "application/pkix-pkipath": {
    "source": "iana",
    "extensions": ["pkipath"]
  },
  "application/pkixcmp": {
    "source": "iana",
    "extensions": ["pki"]
  },
  "application/pls+xml": {
    "source": "iana",
    "extensions": ["pls"]
  },
  "application/poc-settings+xml": {
    "source": "iana"
  },
  "application/postscript": {
    "source": "iana",
    "compressible": true,
    "extensions": ["ai", "eps", "ps"]
  },
  "application/provenance+xml": {
    "source": "iana"
  },
  "application/prs.alvestrand.titrax-sheet": {
    "source": "iana"
  },
  "application/prs.cww": {
    "source": "iana",
    "extensions": ["cww"]
  },
  "application/prs.hpub+zip": {
    "source": "iana"
  },
  "application/prs.nprend": {
    "source": "iana"
  },
  "application/prs.plucker": {
    "source": "iana"
  },
  "application/prs.rdf-xml-crypt": {
    "source": "iana"
  },
  "application/prs.xsf+xml": {
    "source": "iana"
  },
  "application/pskc+xml": {
    "source": "iana",
    "extensions": ["pskcxml"]
  },
  "application/qsig": {
    "source": "iana"
  },
  "application/raptorfec": {
    "source": "iana"
  },
  "application/rdap+json": {
    "source": "iana",
    "compressible": true
  },
  "application/rdf+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rdf"]
  },
  "application/reginfo+xml": {
    "source": "iana",
    "extensions": ["rif"]
  },
  "application/relax-ng-compact-syntax": {
    "source": "iana",
    "extensions": ["rnc"]
  },
  "application/remote-printing": {
    "source": "iana"
  },
  "application/reputon+json": {
    "source": "iana",
    "compressible": true
  },
  "application/resource-lists+xml": {
    "source": "iana",
    "extensions": ["rl"]
  },
  "application/resource-lists-diff+xml": {
    "source": "iana",
    "extensions": ["rld"]
  },
  "application/rfc+xml": {
    "source": "iana"
  },
  "application/riscos": {
    "source": "iana"
  },
  "application/rlmi+xml": {
    "source": "iana"
  },
  "application/rls-services+xml": {
    "source": "iana",
    "extensions": ["rs"]
  },
  "application/rpki-ghostbusters": {
    "source": "iana",
    "extensions": ["gbr"]
  },
  "application/rpki-manifest": {
    "source": "iana",
    "extensions": ["mft"]
  },
  "application/rpki-roa": {
    "source": "iana",
    "extensions": ["roa"]
  },
  "application/rpki-updown": {
    "source": "iana"
  },
  "application/rsd+xml": {
    "source": "apache",
    "extensions": ["rsd"]
  },
  "application/rss+xml": {
    "source": "apache",
    "compressible": true,
    "extensions": ["rss"]
  },
  "application/rtf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtf"]
  },
  "application/rtploopback": {
    "source": "iana"
  },
  "application/rtx": {
    "source": "iana"
  },
  "application/samlassertion+xml": {
    "source": "iana"
  },
  "application/samlmetadata+xml": {
    "source": "iana"
  },
  "application/sbml+xml": {
    "source": "iana",
    "extensions": ["sbml"]
  },
  "application/scaip+xml": {
    "source": "iana"
  },
  "application/scim+json": {
    "source": "iana",
    "compressible": true
  },
  "application/scvp-cv-request": {
    "source": "iana",
    "extensions": ["scq"]
  },
  "application/scvp-cv-response": {
    "source": "iana",
    "extensions": ["scs"]
  },
  "application/scvp-vp-request": {
    "source": "iana",
    "extensions": ["spq"]
  },
  "application/scvp-vp-response": {
    "source": "iana",
    "extensions": ["spp"]
  },
  "application/sdp": {
    "source": "iana",
    "extensions": ["sdp"]
  },
  "application/sep+xml": {
    "source": "iana"
  },
  "application/sep-exi": {
    "source": "iana"
  },
  "application/session-info": {
    "source": "iana"
  },
  "application/set-payment": {
    "source": "iana"
  },
  "application/set-payment-initiation": {
    "source": "iana",
    "extensions": ["setpay"]
  },
  "application/set-registration": {
    "source": "iana"
  },
  "application/set-registration-initiation": {
    "source": "iana",
    "extensions": ["setreg"]
  },
  "application/sgml": {
    "source": "iana"
  },
  "application/sgml-open-catalog": {
    "source": "iana"
  },
  "application/shf+xml": {
    "source": "iana",
    "extensions": ["shf"]
  },
  "application/sieve": {
    "source": "iana"
  },
  "application/simple-filter+xml": {
    "source": "iana"
  },
  "application/simple-message-summary": {
    "source": "iana"
  },
  "application/simplesymbolcontainer": {
    "source": "iana"
  },
  "application/slate": {
    "source": "iana"
  },
  "application/smil": {
    "source": "iana"
  },
  "application/smil+xml": {
    "source": "iana",
    "extensions": ["smi", "smil"]
  },
  "application/smpte336m": {
    "source": "iana"
  },
  "application/soap+fastinfoset": {
    "source": "iana"
  },
  "application/soap+xml": {
    "source": "iana",
    "compressible": true
  },
  "application/sparql-query": {
    "source": "iana",
    "extensions": ["rq"]
  },
  "application/sparql-results+xml": {
    "source": "iana",
    "extensions": ["srx"]
  },
  "application/spirits-event+xml": {
    "source": "iana"
  },
  "application/sql": {
    "source": "iana"
  },
  "application/srgs": {
    "source": "iana",
    "extensions": ["gram"]
  },
  "application/srgs+xml": {
    "source": "iana",
    "extensions": ["grxml"]
  },
  "application/sru+xml": {
    "source": "iana",
    "extensions": ["sru"]
  },
  "application/ssdl+xml": {
    "source": "apache",
    "extensions": ["ssdl"]
  },
  "application/ssml+xml": {
    "source": "iana",
    "extensions": ["ssml"]
  },
  "application/tamp-apex-update": {
    "source": "iana"
  },
  "application/tamp-apex-update-confirm": {
    "source": "iana"
  },
  "application/tamp-community-update": {
    "source": "iana"
  },
  "application/tamp-community-update-confirm": {
    "source": "iana"
  },
  "application/tamp-error": {
    "source": "iana"
  },
  "application/tamp-sequence-adjust": {
    "source": "iana"
  },
  "application/tamp-sequence-adjust-confirm": {
    "source": "iana"
  },
  "application/tamp-status-query": {
    "source": "iana"
  },
  "application/tamp-status-response": {
    "source": "iana"
  },
  "application/tamp-update": {
    "source": "iana"
  },
  "application/tamp-update-confirm": {
    "source": "iana"
  },
  "application/tar": {
    "compressible": true
  },
  "application/tei+xml": {
    "source": "iana",
    "extensions": ["tei", "teicorpus"]
  },
  "application/thraud+xml": {
    "source": "iana",
    "extensions": ["tfi"]
  },
  "application/timestamp-query": {
    "source": "iana"
  },
  "application/timestamp-reply": {
    "source": "iana"
  },
  "application/timestamped-data": {
    "source": "iana",
    "extensions": ["tsd"]
  },
  "application/ttml+xml": {
    "source": "iana"
  },
  "application/tve-trigger": {
    "source": "iana"
  },
  "application/ulpfec": {
    "source": "iana"
  },
  "application/urc-grpsheet+xml": {
    "source": "iana"
  },
  "application/urc-ressheet+xml": {
    "source": "iana"
  },
  "application/urc-targetdesc+xml": {
    "source": "iana"
  },
  "application/urc-uisocketdesc+xml": {
    "source": "iana"
  },
  "application/vcard+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vcard+xml": {
    "source": "iana"
  },
  "application/vemmi": {
    "source": "iana"
  },
  "application/vividence.scriptfile": {
    "source": "apache"
  },
  "application/vnd.3gpp-prose+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp-prose-pc3ch+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.access-transfer-events+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.bsf+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.mid-call+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.pic-bw-large": {
    "source": "iana",
    "extensions": ["plb"]
  },
  "application/vnd.3gpp.pic-bw-small": {
    "source": "iana",
    "extensions": ["psb"]
  },
  "application/vnd.3gpp.pic-bw-var": {
    "source": "iana",
    "extensions": ["pvb"]
  },
  "application/vnd.3gpp.sms": {
    "source": "iana"
  },
  "application/vnd.3gpp.srvcc-ext+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.srvcc-info+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.state-and-event-info+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp.ussd+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp2.bcmcsinfo+xml": {
    "source": "iana"
  },
  "application/vnd.3gpp2.sms": {
    "source": "iana"
  },
  "application/vnd.3gpp2.tcap": {
    "source": "iana",
    "extensions": ["tcap"]
  },
  "application/vnd.3m.post-it-notes": {
    "source": "iana",
    "extensions": ["pwn"]
  },
  "application/vnd.accpac.simply.aso": {
    "source": "iana",
    "extensions": ["aso"]
  },
  "application/vnd.accpac.simply.imp": {
    "source": "iana",
    "extensions": ["imp"]
  },
  "application/vnd.acucobol": {
    "source": "iana",
    "extensions": ["acu"]
  },
  "application/vnd.acucorp": {
    "source": "iana",
    "extensions": ["atc", "acutc"]
  },
  "application/vnd.adobe.air-application-installer-package+zip": {
    "source": "apache",
    "extensions": ["air"]
  },
  "application/vnd.adobe.flash.movie": {
    "source": "iana"
  },
  "application/vnd.adobe.formscentral.fcdt": {
    "source": "iana",
    "extensions": ["fcdt"]
  },
  "application/vnd.adobe.fxp": {
    "source": "iana",
    "extensions": ["fxp", "fxpl"]
  },
  "application/vnd.adobe.partial-upload": {
    "source": "iana"
  },
  "application/vnd.adobe.xdp+xml": {
    "source": "iana",
    "extensions": ["xdp"]
  },
  "application/vnd.adobe.xfdf": {
    "source": "iana",
    "extensions": ["xfdf"]
  },
  "application/vnd.aether.imp": {
    "source": "iana"
  },
  "application/vnd.ah-barcode": {
    "source": "iana"
  },
  "application/vnd.ahead.space": {
    "source": "iana",
    "extensions": ["ahead"]
  },
  "application/vnd.airzip.filesecure.azf": {
    "source": "iana",
    "extensions": ["azf"]
  },
  "application/vnd.airzip.filesecure.azs": {
    "source": "iana",
    "extensions": ["azs"]
  },
  "application/vnd.amazon.ebook": {
    "source": "apache",
    "extensions": ["azw"]
  },
  "application/vnd.americandynamics.acc": {
    "source": "iana",
    "extensions": ["acc"]
  },
  "application/vnd.amiga.ami": {
    "source": "iana",
    "extensions": ["ami"]
  },
  "application/vnd.amundsen.maze+xml": {
    "source": "iana"
  },
  "application/vnd.android.package-archive": {
    "source": "apache",
    "compressible": false,
    "extensions": ["apk"]
  },
  "application/vnd.anki": {
    "source": "iana"
  },
  "application/vnd.anser-web-certificate-issue-initiation": {
    "source": "iana",
    "extensions": ["cii"]
  },
  "application/vnd.anser-web-funds-transfer-initiation": {
    "source": "apache",
    "extensions": ["fti"]
  },
  "application/vnd.antix.game-component": {
    "source": "iana",
    "extensions": ["atx"]
  },
  "application/vnd.apache.thrift.binary": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.compact": {
    "source": "iana"
  },
  "application/vnd.apache.thrift.json": {
    "source": "iana"
  },
  "application/vnd.api+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.apple.installer+xml": {
    "source": "iana",
    "extensions": ["mpkg"]
  },
  "application/vnd.apple.mpegurl": {
    "source": "iana",
    "extensions": ["m3u8"]
  },
  "application/vnd.apple.pkpass": {
    "compressible": false,
    "extensions": ["pkpass"]
  },
  "application/vnd.arastra.swi": {
    "source": "iana"
  },
  "application/vnd.aristanetworks.swi": {
    "source": "iana",
    "extensions": ["swi"]
  },
  "application/vnd.artsquare": {
    "source": "iana"
  },
  "application/vnd.astraea-software.iota": {
    "source": "iana",
    "extensions": ["iota"]
  },
  "application/vnd.audiograph": {
    "source": "iana",
    "extensions": ["aep"]
  },
  "application/vnd.autopackage": {
    "source": "iana"
  },
  "application/vnd.avistar+xml": {
    "source": "iana"
  },
  "application/vnd.balsamiq.bmml+xml": {
    "source": "iana"
  },
  "application/vnd.balsamiq.bmpr": {
    "source": "iana"
  },
  "application/vnd.bekitzur-stech+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.biopax.rdf+xml": {
    "source": "iana"
  },
  "application/vnd.blueice.multipass": {
    "source": "iana",
    "extensions": ["mpm"]
  },
  "application/vnd.bluetooth.ep.oob": {
    "source": "iana"
  },
  "application/vnd.bluetooth.le.oob": {
    "source": "iana"
  },
  "application/vnd.bmi": {
    "source": "iana",
    "extensions": ["bmi"]
  },
  "application/vnd.businessobjects": {
    "source": "iana",
    "extensions": ["rep"]
  },
  "application/vnd.cab-jscript": {
    "source": "iana"
  },
  "application/vnd.canon-cpdl": {
    "source": "iana"
  },
  "application/vnd.canon-lips": {
    "source": "iana"
  },
  "application/vnd.cendio.thinlinc.clientconf": {
    "source": "iana"
  },
  "application/vnd.century-systems.tcp_stream": {
    "source": "iana"
  },
  "application/vnd.chemdraw+xml": {
    "source": "iana",
    "extensions": ["cdxml"]
  },
  "application/vnd.chipnuts.karaoke-mmd": {
    "source": "iana",
    "extensions": ["mmd"]
  },
  "application/vnd.cinderella": {
    "source": "iana",
    "extensions": ["cdy"]
  },
  "application/vnd.cirpack.isdn-ext": {
    "source": "iana"
  },
  "application/vnd.citationstyles.style+xml": {
    "source": "iana"
  },
  "application/vnd.claymore": {
    "source": "iana",
    "extensions": ["cla"]
  },
  "application/vnd.cloanto.rp9": {
    "source": "iana",
    "extensions": ["rp9"]
  },
  "application/vnd.clonk.c4group": {
    "source": "iana",
    "extensions": ["c4g", "c4d", "c4f", "c4p", "c4u"]
  },
  "application/vnd.cluetrust.cartomobile-config": {
    "source": "iana",
    "extensions": ["c11amc"]
  },
  "application/vnd.cluetrust.cartomobile-config-pkg": {
    "source": "iana",
    "extensions": ["c11amz"]
  },
  "application/vnd.coffeescript": {
    "source": "iana"
  },
  "application/vnd.collection+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.collection.doc+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.collection.next+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.commerce-battelle": {
    "source": "iana"
  },
  "application/vnd.commonspace": {
    "source": "iana",
    "extensions": ["csp"]
  },
  "application/vnd.contact.cmsg": {
    "source": "iana",
    "extensions": ["cdbcmsg"]
  },
  "application/vnd.cosmocaller": {
    "source": "iana",
    "extensions": ["cmc"]
  },
  "application/vnd.crick.clicker": {
    "source": "iana",
    "extensions": ["clkx"]
  },
  "application/vnd.crick.clicker.keyboard": {
    "source": "iana",
    "extensions": ["clkk"]
  },
  "application/vnd.crick.clicker.palette": {
    "source": "iana",
    "extensions": ["clkp"]
  },
  "application/vnd.crick.clicker.template": {
    "source": "iana",
    "extensions": ["clkt"]
  },
  "application/vnd.crick.clicker.wordbank": {
    "source": "iana",
    "extensions": ["clkw"]
  },
  "application/vnd.criticaltools.wbs+xml": {
    "source": "iana",
    "extensions": ["wbs"]
  },
  "application/vnd.ctc-posml": {
    "source": "iana",
    "extensions": ["pml"]
  },
  "application/vnd.ctct.ws+xml": {
    "source": "iana"
  },
  "application/vnd.cups-pdf": {
    "source": "iana"
  },
  "application/vnd.cups-postscript": {
    "source": "iana"
  },
  "application/vnd.cups-ppd": {
    "source": "iana",
    "extensions": ["ppd"]
  },
  "application/vnd.cups-raster": {
    "source": "iana"
  },
  "application/vnd.cups-raw": {
    "source": "iana"
  },
  "application/vnd.curl": {
    "source": "iana"
  },
  "application/vnd.curl.car": {
    "source": "apache",
    "extensions": ["car"]
  },
  "application/vnd.curl.pcurl": {
    "source": "apache",
    "extensions": ["pcurl"]
  },
  "application/vnd.cyan.dean.root+xml": {
    "source": "iana"
  },
  "application/vnd.cybank": {
    "source": "iana"
  },
  "application/vnd.dart": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dart"]
  },
  "application/vnd.data-vision.rdz": {
    "source": "iana",
    "extensions": ["rdz"]
  },
  "application/vnd.debian.binary-package": {
    "source": "iana"
  },
  "application/vnd.dece.data": {
    "source": "iana",
    "extensions": ["uvf", "uvvf", "uvd", "uvvd"]
  },
  "application/vnd.dece.ttml+xml": {
    "source": "iana",
    "extensions": ["uvt", "uvvt"]
  },
  "application/vnd.dece.unspecified": {
    "source": "iana",
    "extensions": ["uvx", "uvvx"]
  },
  "application/vnd.dece.zip": {
    "source": "iana",
    "extensions": ["uvz", "uvvz"]
  },
  "application/vnd.denovo.fcselayout-link": {
    "source": "iana",
    "extensions": ["fe_launch"]
  },
  "application/vnd.desmume-movie": {
    "source": "iana"
  },
  "application/vnd.dir-bi.plate-dl-nosuffix": {
    "source": "iana"
  },
  "application/vnd.dm.delegation+xml": {
    "source": "iana"
  },
  "application/vnd.dna": {
    "source": "iana",
    "extensions": ["dna"]
  },
  "application/vnd.document+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.dolby.mlp": {
    "source": "apache",
    "extensions": ["mlp"]
  },
  "application/vnd.dolby.mobile.1": {
    "source": "iana"
  },
  "application/vnd.dolby.mobile.2": {
    "source": "iana"
  },
  "application/vnd.doremir.scorecloud-binary-document": {
    "source": "iana"
  },
  "application/vnd.dpgraph": {
    "source": "iana",
    "extensions": ["dpg"]
  },
  "application/vnd.dreamfactory": {
    "source": "iana",
    "extensions": ["dfac"]
  },
  "application/vnd.drive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ds-keypoint": {
    "source": "apache",
    "extensions": ["kpxx"]
  },
  "application/vnd.dtg.local": {
    "source": "iana"
  },
  "application/vnd.dtg.local.flash": {
    "source": "iana"
  },
  "application/vnd.dtg.local.html": {
    "source": "iana"
  },
  "application/vnd.dvb.ait": {
    "source": "iana",
    "extensions": ["ait"]
  },
  "application/vnd.dvb.dvbj": {
    "source": "iana"
  },
  "application/vnd.dvb.esgcontainer": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcdftnotifaccess": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgaccess": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgaccess2": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcesgpdd": {
    "source": "iana"
  },
  "application/vnd.dvb.ipdcroaming": {
    "source": "iana"
  },
  "application/vnd.dvb.iptv.alfec-base": {
    "source": "iana"
  },
  "application/vnd.dvb.iptv.alfec-enhancement": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-aggregate-root+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-container+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-generic+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-ia-msglist+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-ia-registration-request+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-ia-registration-response+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.notif-init+xml": {
    "source": "iana"
  },
  "application/vnd.dvb.pfr": {
    "source": "iana"
  },
  "application/vnd.dvb.service": {
    "source": "iana",
    "extensions": ["svc"]
  },
  "application/vnd.dxr": {
    "source": "iana"
  },
  "application/vnd.dynageo": {
    "source": "iana",
    "extensions": ["geo"]
  },
  "application/vnd.dzr": {
    "source": "iana"
  },
  "application/vnd.easykaraoke.cdgdownload": {
    "source": "iana"
  },
  "application/vnd.ecdis-update": {
    "source": "iana"
  },
  "application/vnd.ecowin.chart": {
    "source": "iana",
    "extensions": ["mag"]
  },
  "application/vnd.ecowin.filerequest": {
    "source": "iana"
  },
  "application/vnd.ecowin.fileupdate": {
    "source": "iana"
  },
  "application/vnd.ecowin.series": {
    "source": "iana"
  },
  "application/vnd.ecowin.seriesrequest": {
    "source": "iana"
  },
  "application/vnd.ecowin.seriesupdate": {
    "source": "iana"
  },
  "application/vnd.emclient.accessrequest+xml": {
    "source": "iana"
  },
  "application/vnd.enliven": {
    "source": "iana",
    "extensions": ["nml"]
  },
  "application/vnd.enphase.envoy": {
    "source": "iana"
  },
  "application/vnd.eprints.data+xml": {
    "source": "iana"
  },
  "application/vnd.epson.esf": {
    "source": "iana",
    "extensions": ["esf"]
  },
  "application/vnd.epson.msf": {
    "source": "iana",
    "extensions": ["msf"]
  },
  "application/vnd.epson.quickanime": {
    "source": "iana",
    "extensions": ["qam"]
  },
  "application/vnd.epson.salt": {
    "source": "iana",
    "extensions": ["slt"]
  },
  "application/vnd.epson.ssf": {
    "source": "iana",
    "extensions": ["ssf"]
  },
  "application/vnd.ericsson.quickcall": {
    "source": "iana"
  },
  "application/vnd.eszigno3+xml": {
    "source": "iana",
    "extensions": ["es3", "et3"]
  },
  "application/vnd.etsi.aoc+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.asic-e+zip": {
    "source": "iana"
  },
  "application/vnd.etsi.asic-s+zip": {
    "source": "iana"
  },
  "application/vnd.etsi.cug+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvcommand+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvdiscovery+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvprofile+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvsad-bc+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvsad-cod+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvsad-npvr+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvservice+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvsync+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.iptvueprofile+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.mcid+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.mheg5": {
    "source": "iana"
  },
  "application/vnd.etsi.overload-control-policy-dataset+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.pstn+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.sci+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.simservs+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.timestamp-token": {
    "source": "iana"
  },
  "application/vnd.etsi.tsl+xml": {
    "source": "iana"
  },
  "application/vnd.etsi.tsl.der": {
    "source": "iana"
  },
  "application/vnd.eudora.data": {
    "source": "iana"
  },
  "application/vnd.ezpix-album": {
    "source": "iana",
    "extensions": ["ez2"]
  },
  "application/vnd.ezpix-package": {
    "source": "iana",
    "extensions": ["ez3"]
  },
  "application/vnd.f-secure.mobile": {
    "source": "iana"
  },
  "application/vnd.fastcopy-disk-image": {
    "source": "iana"
  },
  "application/vnd.fdf": {
    "source": "iana",
    "extensions": ["fdf"]
  },
  "application/vnd.fdsn.mseed": {
    "source": "iana",
    "extensions": ["mseed"]
  },
  "application/vnd.fdsn.seed": {
    "source": "iana",
    "extensions": ["seed", "dataless"]
  },
  "application/vnd.ffsns": {
    "source": "iana"
  },
  "application/vnd.filmit.zfc": {
    "source": "iana"
  },
  "application/vnd.fints": {
    "source": "iana"
  },
  "application/vnd.firemonkeys.cloudcell": {
    "source": "iana"
  },
  "application/vnd.flographit": {
    "source": "iana",
    "extensions": ["gph"]
  },
  "application/vnd.fluxtime.clip": {
    "source": "iana",
    "extensions": ["ftc"]
  },
  "application/vnd.font-fontforge-sfd": {
    "source": "iana"
  },
  "application/vnd.framemaker": {
    "source": "iana",
    "extensions": ["fm", "frame", "maker", "book"]
  },
  "application/vnd.frogans.fnc": {
    "source": "iana",
    "extensions": ["fnc"]
  },
  "application/vnd.frogans.ltf": {
    "source": "iana",
    "extensions": ["ltf"]
  },
  "application/vnd.fsc.weblaunch": {
    "source": "iana",
    "extensions": ["fsc"]
  },
  "application/vnd.fujitsu.oasys": {
    "source": "iana",
    "extensions": ["oas"]
  },
  "application/vnd.fujitsu.oasys2": {
    "source": "iana",
    "extensions": ["oa2"]
  },
  "application/vnd.fujitsu.oasys3": {
    "source": "iana",
    "extensions": ["oa3"]
  },
  "application/vnd.fujitsu.oasysgp": {
    "source": "iana",
    "extensions": ["fg5"]
  },
  "application/vnd.fujitsu.oasysprs": {
    "source": "iana",
    "extensions": ["bh2"]
  },
  "application/vnd.fujixerox.art-ex": {
    "source": "iana"
  },
  "application/vnd.fujixerox.art4": {
    "source": "iana"
  },
  "application/vnd.fujixerox.ddd": {
    "source": "iana",
    "extensions": ["ddd"]
  },
  "application/vnd.fujixerox.docuworks": {
    "source": "iana",
    "extensions": ["xdw"]
  },
  "application/vnd.fujixerox.docuworks.binder": {
    "source": "iana",
    "extensions": ["xbd"]
  },
  "application/vnd.fujixerox.docuworks.container": {
    "source": "iana"
  },
  "application/vnd.fujixerox.hbpl": {
    "source": "iana"
  },
  "application/vnd.fut-misnet": {
    "source": "iana"
  },
  "application/vnd.fuzzysheet": {
    "source": "iana",
    "extensions": ["fzs"]
  },
  "application/vnd.genomatix.tuxedo": {
    "source": "iana",
    "extensions": ["txd"]
  },
  "application/vnd.geo+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.geocube+xml": {
    "source": "iana"
  },
  "application/vnd.geogebra.file": {
    "source": "iana",
    "extensions": ["ggb"]
  },
  "application/vnd.geogebra.tool": {
    "source": "iana",
    "extensions": ["ggt"]
  },
  "application/vnd.geometry-explorer": {
    "source": "iana",
    "extensions": ["gex", "gre"]
  },
  "application/vnd.geonext": {
    "source": "iana",
    "extensions": ["gxt"]
  },
  "application/vnd.geoplan": {
    "source": "iana",
    "extensions": ["g2w"]
  },
  "application/vnd.geospace": {
    "source": "iana",
    "extensions": ["g3w"]
  },
  "application/vnd.gerber": {
    "source": "iana"
  },
  "application/vnd.globalplatform.card-content-mgt": {
    "source": "iana"
  },
  "application/vnd.globalplatform.card-content-mgt-response": {
    "source": "iana"
  },
  "application/vnd.gmx": {
    "source": "iana",
    "extensions": ["gmx"]
  },
  "application/vnd.google-apps.document": {
    "compressible": false,
    "extensions": ["gdoc"]
  },
  "application/vnd.google-apps.presentation": {
    "compressible": false,
    "extensions": ["gslides"]
  },
  "application/vnd.google-apps.spreadsheet": {
    "compressible": false,
    "extensions": ["gsheet"]
  },
  "application/vnd.google-earth.kml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["kml"]
  },
  "application/vnd.google-earth.kmz": {
    "source": "iana",
    "compressible": false,
    "extensions": ["kmz"]
  },
  "application/vnd.gov.sk.e-form+xml": {
    "source": "iana"
  },
  "application/vnd.gov.sk.e-form+zip": {
    "source": "iana"
  },
  "application/vnd.gov.sk.xmldatacontainer+xml": {
    "source": "iana"
  },
  "application/vnd.grafeq": {
    "source": "iana",
    "extensions": ["gqf", "gqs"]
  },
  "application/vnd.gridmp": {
    "source": "iana"
  },
  "application/vnd.groove-account": {
    "source": "iana",
    "extensions": ["gac"]
  },
  "application/vnd.groove-help": {
    "source": "iana",
    "extensions": ["ghf"]
  },
  "application/vnd.groove-identity-message": {
    "source": "iana",
    "extensions": ["gim"]
  },
  "application/vnd.groove-injector": {
    "source": "iana",
    "extensions": ["grv"]
  },
  "application/vnd.groove-tool-message": {
    "source": "iana",
    "extensions": ["gtm"]
  },
  "application/vnd.groove-tool-template": {
    "source": "iana",
    "extensions": ["tpl"]
  },
  "application/vnd.groove-vcard": {
    "source": "iana",
    "extensions": ["vcg"]
  },
  "application/vnd.hal+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hal+xml": {
    "source": "iana",
    "extensions": ["hal"]
  },
  "application/vnd.handheld-entertainment+xml": {
    "source": "iana",
    "extensions": ["zmm"]
  },
  "application/vnd.hbci": {
    "source": "iana",
    "extensions": ["hbci"]
  },
  "application/vnd.hcl-bireports": {
    "source": "iana"
  },
  "application/vnd.heroku+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hhe.lesson-player": {
    "source": "iana",
    "extensions": ["les"]
  },
  "application/vnd.hp-hpgl": {
    "source": "iana",
    "extensions": ["hpgl"]
  },
  "application/vnd.hp-hpid": {
    "source": "iana",
    "extensions": ["hpid"]
  },
  "application/vnd.hp-hps": {
    "source": "iana",
    "extensions": ["hps"]
  },
  "application/vnd.hp-jlyt": {
    "source": "iana",
    "extensions": ["jlt"]
  },
  "application/vnd.hp-pcl": {
    "source": "iana",
    "extensions": ["pcl"]
  },
  "application/vnd.hp-pclxl": {
    "source": "iana",
    "extensions": ["pclxl"]
  },
  "application/vnd.httphone": {
    "source": "iana"
  },
  "application/vnd.hydrostatix.sof-data": {
    "source": "iana",
    "extensions": ["sfd-hdstx"]
  },
  "application/vnd.hyperdrive+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.hzn-3d-crossword": {
    "source": "iana"
  },
  "application/vnd.ibm.afplinedata": {
    "source": "iana"
  },
  "application/vnd.ibm.electronic-media": {
    "source": "iana"
  },
  "application/vnd.ibm.minipay": {
    "source": "iana",
    "extensions": ["mpy"]
  },
  "application/vnd.ibm.modcap": {
    "source": "iana",
    "extensions": ["afp", "listafp", "list3820"]
  },
  "application/vnd.ibm.rights-management": {
    "source": "iana",
    "extensions": ["irm"]
  },
  "application/vnd.ibm.secure-container": {
    "source": "iana",
    "extensions": ["sc"]
  },
  "application/vnd.iccprofile": {
    "source": "iana",
    "extensions": ["icc", "icm"]
  },
  "application/vnd.ieee.1905": {
    "source": "iana"
  },
  "application/vnd.igloader": {
    "source": "iana",
    "extensions": ["igl"]
  },
  "application/vnd.immervision-ivp": {
    "source": "iana",
    "extensions": ["ivp"]
  },
  "application/vnd.immervision-ivu": {
    "source": "iana",
    "extensions": ["ivu"]
  },
  "application/vnd.ims.imsccv1p1": {
    "source": "iana"
  },
  "application/vnd.ims.imsccv1p2": {
    "source": "iana"
  },
  "application/vnd.ims.imsccv1p3": {
    "source": "iana"
  },
  "application/vnd.ims.lis.v2.result+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolproxy+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolproxy.id+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolsettings+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.ims.lti.v2.toolsettings.simple+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.informedcontrol.rms+xml": {
    "source": "iana"
  },
  "application/vnd.informix-visionary": {
    "source": "iana"
  },
  "application/vnd.infotech.project": {
    "source": "iana"
  },
  "application/vnd.infotech.project+xml": {
    "source": "iana"
  },
  "application/vnd.innopath.wamp.notification": {
    "source": "iana"
  },
  "application/vnd.insors.igm": {
    "source": "iana",
    "extensions": ["igm"]
  },
  "application/vnd.intercon.formnet": {
    "source": "iana",
    "extensions": ["xpw", "xpx"]
  },
  "application/vnd.intergeo": {
    "source": "iana",
    "extensions": ["i2g"]
  },
  "application/vnd.intertrust.digibox": {
    "source": "iana"
  },
  "application/vnd.intertrust.nncp": {
    "source": "iana"
  },
  "application/vnd.intu.qbo": {
    "source": "iana",
    "extensions": ["qbo"]
  },
  "application/vnd.intu.qfx": {
    "source": "iana",
    "extensions": ["qfx"]
  },
  "application/vnd.iptc.g2.catalogitem+xml": {
    "source": "iana"
  },
  "application/vnd.iptc.g2.conceptitem+xml": {
    "source": "iana"
  },
  "application/vnd.iptc.g2.knowledgeitem+xml": {
    "source": "iana"
  },
  "application/vnd.iptc.g2.newsitem+xml": {
    "source": "iana"
  },
  "application/vnd.iptc.g2.newsmessage+xml": {
    "source": "iana"
  },
  "application/vnd.iptc.g2.packageitem+xml": {
    "source": "iana"
  },
  "application/vnd.iptc.g2.planningitem+xml": {
    "source": "iana"
  },
  "application/vnd.ipunplugged.rcprofile": {
    "source": "iana",
    "extensions": ["rcprofile"]
  },
  "application/vnd.irepository.package+xml": {
    "source": "iana",
    "extensions": ["irp"]
  },
  "application/vnd.is-xpr": {
    "source": "iana",
    "extensions": ["xpr"]
  },
  "application/vnd.isac.fcs": {
    "source": "iana",
    "extensions": ["fcs"]
  },
  "application/vnd.jam": {
    "source": "iana",
    "extensions": ["jam"]
  },
  "application/vnd.japannet-directory-service": {
    "source": "iana"
  },
  "application/vnd.japannet-jpnstore-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-payment-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-registration": {
    "source": "iana"
  },
  "application/vnd.japannet-registration-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-setstore-wakeup": {
    "source": "iana"
  },
  "application/vnd.japannet-verification": {
    "source": "iana"
  },
  "application/vnd.japannet-verification-wakeup": {
    "source": "iana"
  },
  "application/vnd.jcp.javame.midlet-rms": {
    "source": "iana",
    "extensions": ["rms"]
  },
  "application/vnd.jisp": {
    "source": "iana",
    "extensions": ["jisp"]
  },
  "application/vnd.joost.joda-archive": {
    "source": "iana",
    "extensions": ["joda"]
  },
  "application/vnd.jsk.isdn-ngn": {
    "source": "iana"
  },
  "application/vnd.kahootz": {
    "source": "iana",
    "extensions": ["ktz", "ktr"]
  },
  "application/vnd.kde.karbon": {
    "source": "iana",
    "extensions": ["karbon"]
  },
  "application/vnd.kde.kchart": {
    "source": "iana",
    "extensions": ["chrt"]
  },
  "application/vnd.kde.kformula": {
    "source": "iana",
    "extensions": ["kfo"]
  },
  "application/vnd.kde.kivio": {
    "source": "iana",
    "extensions": ["flw"]
  },
  "application/vnd.kde.kontour": {
    "source": "iana",
    "extensions": ["kon"]
  },
  "application/vnd.kde.kpresenter": {
    "source": "iana",
    "extensions": ["kpr", "kpt"]
  },
  "application/vnd.kde.kspread": {
    "source": "iana",
    "extensions": ["ksp"]
  },
  "application/vnd.kde.kword": {
    "source": "iana",
    "extensions": ["kwd", "kwt"]
  },
  "application/vnd.kenameaapp": {
    "source": "iana",
    "extensions": ["htke"]
  },
  "application/vnd.kidspiration": {
    "source": "iana",
    "extensions": ["kia"]
  },
  "application/vnd.kinar": {
    "source": "iana",
    "extensions": ["kne", "knp"]
  },
  "application/vnd.koan": {
    "source": "iana",
    "extensions": ["skp", "skd", "skt", "skm"]
  },
  "application/vnd.kodak-descriptor": {
    "source": "iana",
    "extensions": ["sse"]
  },
  "application/vnd.las.las+xml": {
    "source": "iana",
    "extensions": ["lasxml"]
  },
  "application/vnd.liberty-request+xml": {
    "source": "iana"
  },
  "application/vnd.llamagraphics.life-balance.desktop": {
    "source": "iana",
    "extensions": ["lbd"]
  },
  "application/vnd.llamagraphics.life-balance.exchange+xml": {
    "source": "iana",
    "extensions": ["lbe"]
  },
  "application/vnd.lotus-1-2-3": {
    "source": "iana",
    "extensions": ["123"]
  },
  "application/vnd.lotus-approach": {
    "source": "iana",
    "extensions": ["apr"]
  },
  "application/vnd.lotus-freelance": {
    "source": "iana",
    "extensions": ["pre"]
  },
  "application/vnd.lotus-notes": {
    "source": "iana",
    "extensions": ["nsf"]
  },
  "application/vnd.lotus-organizer": {
    "source": "iana",
    "extensions": ["org"]
  },
  "application/vnd.lotus-screencam": {
    "source": "iana",
    "extensions": ["scm"]
  },
  "application/vnd.lotus-wordpro": {
    "source": "iana",
    "extensions": ["lwp"]
  },
  "application/vnd.macports.portpkg": {
    "source": "iana",
    "extensions": ["portpkg"]
  },
  "application/vnd.mapbox-vector-tile": {
    "source": "iana"
  },
  "application/vnd.marlin.drm.actiontoken+xml": {
    "source": "iana"
  },
  "application/vnd.marlin.drm.conftoken+xml": {
    "source": "iana"
  },
  "application/vnd.marlin.drm.license+xml": {
    "source": "iana"
  },
  "application/vnd.marlin.drm.mdcf": {
    "source": "iana"
  },
  "application/vnd.mason+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.maxmind.maxmind-db": {
    "source": "iana"
  },
  "application/vnd.mcd": {
    "source": "iana",
    "extensions": ["mcd"]
  },
  "application/vnd.medcalcdata": {
    "source": "iana",
    "extensions": ["mc1"]
  },
  "application/vnd.mediastation.cdkey": {
    "source": "iana",
    "extensions": ["cdkey"]
  },
  "application/vnd.meridian-slingshot": {
    "source": "iana"
  },
  "application/vnd.mfer": {
    "source": "iana",
    "extensions": ["mwf"]
  },
  "application/vnd.mfmp": {
    "source": "iana",
    "extensions": ["mfm"]
  },
  "application/vnd.micro+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.micrografx.flo": {
    "source": "iana",
    "extensions": ["flo"]
  },
  "application/vnd.micrografx.igx": {
    "source": "iana",
    "extensions": ["igx"]
  },
  "application/vnd.microsoft.portable-executable": {
    "source": "iana"
  },
  "application/vnd.miele+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.mif": {
    "source": "iana",
    "extensions": ["mif"]
  },
  "application/vnd.minisoft-hp3000-save": {
    "source": "iana"
  },
  "application/vnd.mitsubishi.misty-guard.trustweb": {
    "source": "iana"
  },
  "application/vnd.mobius.daf": {
    "source": "iana",
    "extensions": ["daf"]
  },
  "application/vnd.mobius.dis": {
    "source": "iana",
    "extensions": ["dis"]
  },
  "application/vnd.mobius.mbk": {
    "source": "iana",
    "extensions": ["mbk"]
  },
  "application/vnd.mobius.mqy": {
    "source": "iana",
    "extensions": ["mqy"]
  },
  "application/vnd.mobius.msl": {
    "source": "iana",
    "extensions": ["msl"]
  },
  "application/vnd.mobius.plc": {
    "source": "iana",
    "extensions": ["plc"]
  },
  "application/vnd.mobius.txf": {
    "source": "iana",
    "extensions": ["txf"]
  },
  "application/vnd.mophun.application": {
    "source": "iana",
    "extensions": ["mpn"]
  },
  "application/vnd.mophun.certificate": {
    "source": "iana",
    "extensions": ["mpc"]
  },
  "application/vnd.motorola.flexsuite": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.adsi": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.fis": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.gotap": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.kmr": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.ttc": {
    "source": "iana"
  },
  "application/vnd.motorola.flexsuite.wem": {
    "source": "iana"
  },
  "application/vnd.motorola.iprm": {
    "source": "iana"
  },
  "application/vnd.mozilla.xul+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xul"]
  },
  "application/vnd.ms-3mfdocument": {
    "source": "iana"
  },
  "application/vnd.ms-artgalry": {
    "source": "iana",
    "extensions": ["cil"]
  },
  "application/vnd.ms-asf": {
    "source": "iana"
  },
  "application/vnd.ms-cab-compressed": {
    "source": "iana",
    "extensions": ["cab"]
  },
  "application/vnd.ms-color.iccprofile": {
    "source": "apache"
  },
  "application/vnd.ms-excel": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
  },
  "application/vnd.ms-excel.addin.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlam"]
  },
  "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlsb"]
  },
  "application/vnd.ms-excel.sheet.macroenabled.12": {
    "source": "iana",
    "extensions": ["xlsm"]
  },
  "application/vnd.ms-excel.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["xltm"]
  },
  "application/vnd.ms-fontobject": {
    "source": "iana",
    "compressible": true,
    "extensions": ["eot"]
  },
  "application/vnd.ms-htmlhelp": {
    "source": "iana",
    "extensions": ["chm"]
  },
  "application/vnd.ms-ims": {
    "source": "iana",
    "extensions": ["ims"]
  },
  "application/vnd.ms-lrm": {
    "source": "iana",
    "extensions": ["lrm"]
  },
  "application/vnd.ms-office.activex+xml": {
    "source": "iana"
  },
  "application/vnd.ms-officetheme": {
    "source": "iana",
    "extensions": ["thmx"]
  },
  "application/vnd.ms-opentype": {
    "source": "apache",
    "compressible": true
  },
  "application/vnd.ms-package.obfuscated-opentype": {
    "source": "apache"
  },
  "application/vnd.ms-pki.seccat": {
    "source": "apache",
    "extensions": ["cat"]
  },
  "application/vnd.ms-pki.stl": {
    "source": "apache",
    "extensions": ["stl"]
  },
  "application/vnd.ms-playready.initiator+xml": {
    "source": "iana"
  },
  "application/vnd.ms-powerpoint": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ppt", "pps", "pot"]
  },
  "application/vnd.ms-powerpoint.addin.macroenabled.12": {
    "source": "iana",
    "extensions": ["ppam"]
  },
  "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
    "source": "iana",
    "extensions": ["pptm"]
  },
  "application/vnd.ms-powerpoint.slide.macroenabled.12": {
    "source": "iana",
    "extensions": ["sldm"]
  },
  "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
    "source": "iana",
    "extensions": ["ppsm"]
  },
  "application/vnd.ms-powerpoint.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["potm"]
  },
  "application/vnd.ms-printdevicecapabilities+xml": {
    "source": "iana"
  },
  "application/vnd.ms-printing.printticket+xml": {
    "source": "apache"
  },
  "application/vnd.ms-project": {
    "source": "iana",
    "extensions": ["mpp", "mpt"]
  },
  "application/vnd.ms-tnef": {
    "source": "iana"
  },
  "application/vnd.ms-windows.devicepairing": {
    "source": "iana"
  },
  "application/vnd.ms-windows.nwprinting.oob": {
    "source": "iana"
  },
  "application/vnd.ms-windows.printerpairing": {
    "source": "iana"
  },
  "application/vnd.ms-windows.wsd.oob": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.lic-chlg-req": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.lic-resp": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.meter-chlg-req": {
    "source": "iana"
  },
  "application/vnd.ms-wmdrm.meter-resp": {
    "source": "iana"
  },
  "application/vnd.ms-word.document.macroenabled.12": {
    "source": "iana",
    "extensions": ["docm"]
  },
  "application/vnd.ms-word.template.macroenabled.12": {
    "source": "iana",
    "extensions": ["dotm"]
  },
  "application/vnd.ms-works": {
    "source": "iana",
    "extensions": ["wps", "wks", "wcm", "wdb"]
  },
  "application/vnd.ms-wpl": {
    "source": "iana",
    "extensions": ["wpl"]
  },
  "application/vnd.ms-xpsdocument": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xps"]
  },
  "application/vnd.msa-disk-image": {
    "source": "iana"
  },
  "application/vnd.mseq": {
    "source": "iana",
    "extensions": ["mseq"]
  },
  "application/vnd.msign": {
    "source": "iana"
  },
  "application/vnd.multiad.creator": {
    "source": "iana"
  },
  "application/vnd.multiad.creator.cif": {
    "source": "iana"
  },
  "application/vnd.music-niff": {
    "source": "iana"
  },
  "application/vnd.musician": {
    "source": "iana",
    "extensions": ["mus"]
  },
  "application/vnd.muvee.style": {
    "source": "iana",
    "extensions": ["msty"]
  },
  "application/vnd.mynfc": {
    "source": "iana",
    "extensions": ["taglet"]
  },
  "application/vnd.ncd.control": {
    "source": "iana"
  },
  "application/vnd.ncd.reference": {
    "source": "iana"
  },
  "application/vnd.nervana": {
    "source": "iana"
  },
  "application/vnd.netfpx": {
    "source": "iana"
  },
  "application/vnd.neurolanguage.nlu": {
    "source": "iana",
    "extensions": ["nlu"]
  },
  "application/vnd.nintendo.nitro.rom": {
    "source": "iana"
  },
  "application/vnd.nintendo.snes.rom": {
    "source": "iana"
  },
  "application/vnd.nitf": {
    "source": "iana",
    "extensions": ["ntf", "nitf"]
  },
  "application/vnd.noblenet-directory": {
    "source": "iana",
    "extensions": ["nnd"]
  },
  "application/vnd.noblenet-sealer": {
    "source": "iana",
    "extensions": ["nns"]
  },
  "application/vnd.noblenet-web": {
    "source": "iana",
    "extensions": ["nnw"]
  },
  "application/vnd.nokia.catalogs": {
    "source": "iana"
  },
  "application/vnd.nokia.conml+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.conml+xml": {
    "source": "iana"
  },
  "application/vnd.nokia.iptv.config+xml": {
    "source": "iana"
  },
  "application/vnd.nokia.isds-radio-presets": {
    "source": "iana"
  },
  "application/vnd.nokia.landmark+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.landmark+xml": {
    "source": "iana"
  },
  "application/vnd.nokia.landmarkcollection+xml": {
    "source": "iana"
  },
  "application/vnd.nokia.n-gage.ac+xml": {
    "source": "iana"
  },
  "application/vnd.nokia.n-gage.data": {
    "source": "iana",
    "extensions": ["ngdat"]
  },
  "application/vnd.nokia.n-gage.symbian.install": {
    "source": "iana",
    "extensions": ["n-gage"]
  },
  "application/vnd.nokia.ncd": {
    "source": "iana"
  },
  "application/vnd.nokia.pcd+wbxml": {
    "source": "iana"
  },
  "application/vnd.nokia.pcd+xml": {
    "source": "iana"
  },
  "application/vnd.nokia.radio-preset": {
    "source": "iana",
    "extensions": ["rpst"]
  },
  "application/vnd.nokia.radio-presets": {
    "source": "iana",
    "extensions": ["rpss"]
  },
  "application/vnd.novadigm.edm": {
    "source": "iana",
    "extensions": ["edm"]
  },
  "application/vnd.novadigm.edx": {
    "source": "iana",
    "extensions": ["edx"]
  },
  "application/vnd.novadigm.ext": {
    "source": "iana",
    "extensions": ["ext"]
  },
  "application/vnd.ntt-local.content-share": {
    "source": "iana"
  },
  "application/vnd.ntt-local.file-transfer": {
    "source": "iana"
  },
  "application/vnd.ntt-local.ogw_remote-access": {
    "source": "iana"
  },
  "application/vnd.ntt-local.sip-ta_remote": {
    "source": "iana"
  },
  "application/vnd.ntt-local.sip-ta_tcp_stream": {
    "source": "iana"
  },
  "application/vnd.oasis.opendocument.chart": {
    "source": "iana",
    "extensions": ["odc"]
  },
  "application/vnd.oasis.opendocument.chart-template": {
    "source": "iana",
    "extensions": ["otc"]
  },
  "application/vnd.oasis.opendocument.database": {
    "source": "iana",
    "extensions": ["odb"]
  },
  "application/vnd.oasis.opendocument.formula": {
    "source": "iana",
    "extensions": ["odf"]
  },
  "application/vnd.oasis.opendocument.formula-template": {
    "source": "iana",
    "extensions": ["odft"]
  },
  "application/vnd.oasis.opendocument.graphics": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odg"]
  },
  "application/vnd.oasis.opendocument.graphics-template": {
    "source": "iana",
    "extensions": ["otg"]
  },
  "application/vnd.oasis.opendocument.image": {
    "source": "iana",
    "extensions": ["odi"]
  },
  "application/vnd.oasis.opendocument.image-template": {
    "source": "iana",
    "extensions": ["oti"]
  },
  "application/vnd.oasis.opendocument.presentation": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odp"]
  },
  "application/vnd.oasis.opendocument.presentation-template": {
    "source": "iana",
    "extensions": ["otp"]
  },
  "application/vnd.oasis.opendocument.spreadsheet": {
    "source": "iana",
    "compressible": false,
    "extensions": ["ods"]
  },
  "application/vnd.oasis.opendocument.spreadsheet-template": {
    "source": "iana",
    "extensions": ["ots"]
  },
  "application/vnd.oasis.opendocument.text": {
    "source": "iana",
    "compressible": false,
    "extensions": ["odt"]
  },
  "application/vnd.oasis.opendocument.text-master": {
    "source": "iana",
    "extensions": ["odm"]
  },
  "application/vnd.oasis.opendocument.text-template": {
    "source": "iana",
    "extensions": ["ott"]
  },
  "application/vnd.oasis.opendocument.text-web": {
    "source": "iana",
    "extensions": ["oth"]
  },
  "application/vnd.obn": {
    "source": "iana"
  },
  "application/vnd.oftn.l10n+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.oipf.contentaccessdownload+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.contentaccessstreaming+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.cspg-hexbinary": {
    "source": "iana"
  },
  "application/vnd.oipf.dae.svg+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.dae.xhtml+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.mippvcontrolmessage+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.pae.gem": {
    "source": "iana"
  },
  "application/vnd.oipf.spdiscovery+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.spdlist+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.ueprofile+xml": {
    "source": "iana"
  },
  "application/vnd.oipf.userprofile+xml": {
    "source": "iana"
  },
  "application/vnd.olpc-sugar": {
    "source": "iana",
    "extensions": ["xo"]
  },
  "application/vnd.oma-scws-config": {
    "source": "iana"
  },
  "application/vnd.oma-scws-http-request": {
    "source": "iana"
  },
  "application/vnd.oma-scws-http-response": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.drm-trigger+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.imd+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.ltkm": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.notification+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.provisioningtrigger": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgboot": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgdd+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sgdu": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.simple-symbol-container": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.smartcard-trigger+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.sprov+xml": {
    "source": "iana"
  },
  "application/vnd.oma.bcast.stkm": {
    "source": "iana"
  },
  "application/vnd.oma.cab-address-book+xml": {
    "source": "iana"
  },
  "application/vnd.oma.cab-feature-handler+xml": {
    "source": "iana"
  },
  "application/vnd.oma.cab-pcc+xml": {
    "source": "iana"
  },
  "application/vnd.oma.cab-subs-invite+xml": {
    "source": "iana"
  },
  "application/vnd.oma.cab-user-prefs+xml": {
    "source": "iana"
  },
  "application/vnd.oma.dcd": {
    "source": "iana"
  },
  "application/vnd.oma.dcdc": {
    "source": "iana"
  },
  "application/vnd.oma.dd2+xml": {
    "source": "iana",
    "extensions": ["dd2"]
  },
  "application/vnd.oma.drm.risd+xml": {
    "source": "iana"
  },
  "application/vnd.oma.group-usage-list+xml": {
    "source": "iana"
  },
  "application/vnd.oma.pal+xml": {
    "source": "iana"
  },
  "application/vnd.oma.poc.detailed-progress-report+xml": {
    "source": "iana"
  },
  "application/vnd.oma.poc.final-report+xml": {
    "source": "iana"
  },
  "application/vnd.oma.poc.groups+xml": {
    "source": "iana"
  },
  "application/vnd.oma.poc.invocation-descriptor+xml": {
    "source": "iana"
  },
  "application/vnd.oma.poc.optimized-progress-report+xml": {
    "source": "iana"
  },
  "application/vnd.oma.push": {
    "source": "iana"
  },
  "application/vnd.oma.scidm.messages+xml": {
    "source": "iana"
  },
  "application/vnd.oma.xcap-directory+xml": {
    "source": "iana"
  },
  "application/vnd.omads-email+xml": {
    "source": "iana"
  },
  "application/vnd.omads-file+xml": {
    "source": "iana"
  },
  "application/vnd.omads-folder+xml": {
    "source": "iana"
  },
  "application/vnd.omaloc-supl-init": {
    "source": "iana"
  },
  "application/vnd.openblox.game+xml": {
    "source": "iana"
  },
  "application/vnd.openblox.game-binary": {
    "source": "iana"
  },
  "application/vnd.openeye.oeb": {
    "source": "iana"
  },
  "application/vnd.openofficeorg.extension": {
    "source": "apache",
    "extensions": ["oxt"]
  },
  "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawing+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml-template": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
    "source": "iana",
    "compressible": false,
    "extensions": ["pptx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide": {
    "source": "iana",
    "extensions": ["sldx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
    "source": "iana",
    "extensions": ["ppsx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template": {
    "source": "apache",
    "extensions": ["potx"]
  },
  "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml-template": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
    "source": "iana",
    "compressible": false,
    "extensions": ["xlsx"]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
    "source": "apache",
    "extensions": ["xltx"]
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.theme+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.vmldrawing": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml-template": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
    "source": "iana",
    "compressible": false,
    "extensions": ["docx"]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
    "source": "apache",
    "extensions": ["dotx"]
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-package.core-properties+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
    "source": "iana"
  },
  "application/vnd.openxmlformats-package.relationships+xml": {
    "source": "iana"
  },
  "application/vnd.oracle.resource+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.orange.indata": {
    "source": "iana"
  },
  "application/vnd.osa.netdeploy": {
    "source": "iana"
  },
  "application/vnd.osgeo.mapguide.package": {
    "source": "iana",
    "extensions": ["mgp"]
  },
  "application/vnd.osgi.bundle": {
    "source": "iana"
  },
  "application/vnd.osgi.dp": {
    "source": "iana",
    "extensions": ["dp"]
  },
  "application/vnd.osgi.subsystem": {
    "source": "iana",
    "extensions": ["esa"]
  },
  "application/vnd.otps.ct-kip+xml": {
    "source": "iana"
  },
  "application/vnd.oxli.countgraph": {
    "source": "iana"
  },
  "application/vnd.pagerduty+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.palm": {
    "source": "iana",
    "extensions": ["pdb", "pqa", "oprc"]
  },
  "application/vnd.panoply": {
    "source": "iana"
  },
  "application/vnd.paos+xml": {
    "source": "iana"
  },
  "application/vnd.paos.xml": {
    "source": "apache"
  },
  "application/vnd.pawaafile": {
    "source": "iana",
    "extensions": ["paw"]
  },
  "application/vnd.pcos": {
    "source": "iana"
  },
  "application/vnd.pg.format": {
    "source": "iana",
    "extensions": ["str"]
  },
  "application/vnd.pg.osasli": {
    "source": "iana",
    "extensions": ["ei6"]
  },
  "application/vnd.piaccess.application-licence": {
    "source": "iana"
  },
  "application/vnd.picsel": {
    "source": "iana",
    "extensions": ["efif"]
  },
  "application/vnd.pmi.widget": {
    "source": "iana",
    "extensions": ["wg"]
  },
  "application/vnd.poc.group-advertisement+xml": {
    "source": "iana"
  },
  "application/vnd.pocketlearn": {
    "source": "iana",
    "extensions": ["plf"]
  },
  "application/vnd.powerbuilder6": {
    "source": "iana",
    "extensions": ["pbd"]
  },
  "application/vnd.powerbuilder6-s": {
    "source": "iana"
  },
  "application/vnd.powerbuilder7": {
    "source": "iana"
  },
  "application/vnd.powerbuilder7-s": {
    "source": "iana"
  },
  "application/vnd.powerbuilder75": {
    "source": "iana"
  },
  "application/vnd.powerbuilder75-s": {
    "source": "iana"
  },
  "application/vnd.preminet": {
    "source": "iana"
  },
  "application/vnd.previewsystems.box": {
    "source": "iana",
    "extensions": ["box"]
  },
  "application/vnd.proteus.magazine": {
    "source": "iana",
    "extensions": ["mgz"]
  },
  "application/vnd.publishare-delta-tree": {
    "source": "iana",
    "extensions": ["qps"]
  },
  "application/vnd.pvi.ptid1": {
    "source": "iana",
    "extensions": ["ptid"]
  },
  "application/vnd.pwg-multiplexed": {
    "source": "iana"
  },
  "application/vnd.pwg-xhtml-print+xml": {
    "source": "iana"
  },
  "application/vnd.qualcomm.brew-app-res": {
    "source": "iana"
  },
  "application/vnd.quark.quarkxpress": {
    "source": "iana",
    "extensions": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
  },
  "application/vnd.quobject-quoxdocument": {
    "source": "iana"
  },
  "application/vnd.radisys.moml+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-audit+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-audit-conf+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-audit-conn+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-audit-dialog+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-audit-stream+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-conf+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog-base+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog-group+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog-speech+xml": {
    "source": "iana"
  },
  "application/vnd.radisys.msml-dialog-transform+xml": {
    "source": "iana"
  },
  "application/vnd.rainstor.data": {
    "source": "iana"
  },
  "application/vnd.rapid": {
    "source": "iana"
  },
  "application/vnd.realvnc.bed": {
    "source": "iana",
    "extensions": ["bed"]
  },
  "application/vnd.recordare.musicxml": {
    "source": "iana",
    "extensions": ["mxl"]
  },
  "application/vnd.recordare.musicxml+xml": {
    "source": "iana",
    "extensions": ["musicxml"]
  },
  "application/vnd.renlearn.rlprint": {
    "source": "iana"
  },
  "application/vnd.rig.cryptonote": {
    "source": "iana",
    "extensions": ["cryptonote"]
  },
  "application/vnd.rim.cod": {
    "source": "apache",
    "extensions": ["cod"]
  },
  "application/vnd.rn-realmedia": {
    "source": "apache",
    "extensions": ["rm"]
  },
  "application/vnd.rn-realmedia-vbr": {
    "source": "apache",
    "extensions": ["rmvb"]
  },
  "application/vnd.route66.link66+xml": {
    "source": "iana",
    "extensions": ["link66"]
  },
  "application/vnd.rs-274x": {
    "source": "iana"
  },
  "application/vnd.ruckus.download": {
    "source": "iana"
  },
  "application/vnd.s3sms": {
    "source": "iana"
  },
  "application/vnd.sailingtracker.track": {
    "source": "iana",
    "extensions": ["st"]
  },
  "application/vnd.sbm.cid": {
    "source": "iana"
  },
  "application/vnd.sbm.mid2": {
    "source": "iana"
  },
  "application/vnd.scribus": {
    "source": "iana"
  },
  "application/vnd.sealed.3df": {
    "source": "iana"
  },
  "application/vnd.sealed.csf": {
    "source": "iana"
  },
  "application/vnd.sealed.doc": {
    "source": "iana"
  },
  "application/vnd.sealed.eml": {
    "source": "iana"
  },
  "application/vnd.sealed.mht": {
    "source": "iana"
  },
  "application/vnd.sealed.net": {
    "source": "iana"
  },
  "application/vnd.sealed.ppt": {
    "source": "iana"
  },
  "application/vnd.sealed.tiff": {
    "source": "iana"
  },
  "application/vnd.sealed.xls": {
    "source": "iana"
  },
  "application/vnd.sealedmedia.softseal.html": {
    "source": "iana"
  },
  "application/vnd.sealedmedia.softseal.pdf": {
    "source": "iana"
  },
  "application/vnd.seemail": {
    "source": "iana",
    "extensions": ["see"]
  },
  "application/vnd.sema": {
    "source": "iana",
    "extensions": ["sema"]
  },
  "application/vnd.semd": {
    "source": "iana",
    "extensions": ["semd"]
  },
  "application/vnd.semf": {
    "source": "iana",
    "extensions": ["semf"]
  },
  "application/vnd.shana.informed.formdata": {
    "source": "iana",
    "extensions": ["ifm"]
  },
  "application/vnd.shana.informed.formtemplate": {
    "source": "iana",
    "extensions": ["itp"]
  },
  "application/vnd.shana.informed.interchange": {
    "source": "iana",
    "extensions": ["iif"]
  },
  "application/vnd.shana.informed.package": {
    "source": "iana",
    "extensions": ["ipk"]
  },
  "application/vnd.simtech-mindmapper": {
    "source": "iana",
    "extensions": ["twd", "twds"]
  },
  "application/vnd.siren+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.smaf": {
    "source": "iana",
    "extensions": ["mmf"]
  },
  "application/vnd.smart.notebook": {
    "source": "iana"
  },
  "application/vnd.smart.teacher": {
    "source": "iana",
    "extensions": ["teacher"]
  },
  "application/vnd.software602.filler.form+xml": {
    "source": "iana"
  },
  "application/vnd.software602.filler.form-xml-zip": {
    "source": "iana"
  },
  "application/vnd.solent.sdkm+xml": {
    "source": "iana",
    "extensions": ["sdkm", "sdkd"]
  },
  "application/vnd.spotfire.dxp": {
    "source": "iana",
    "extensions": ["dxp"]
  },
  "application/vnd.spotfire.sfs": {
    "source": "iana",
    "extensions": ["sfs"]
  },
  "application/vnd.sss-cod": {
    "source": "iana"
  },
  "application/vnd.sss-dtf": {
    "source": "iana"
  },
  "application/vnd.sss-ntf": {
    "source": "iana"
  },
  "application/vnd.stardivision.calc": {
    "source": "apache",
    "extensions": ["sdc"]
  },
  "application/vnd.stardivision.draw": {
    "source": "apache",
    "extensions": ["sda"]
  },
  "application/vnd.stardivision.impress": {
    "source": "apache",
    "extensions": ["sdd"]
  },
  "application/vnd.stardivision.math": {
    "source": "apache",
    "extensions": ["smf"]
  },
  "application/vnd.stardivision.writer": {
    "source": "apache",
    "extensions": ["sdw", "vor"]
  },
  "application/vnd.stardivision.writer-global": {
    "source": "apache",
    "extensions": ["sgl"]
  },
  "application/vnd.stepmania.package": {
    "source": "iana",
    "extensions": ["smzip"]
  },
  "application/vnd.stepmania.stepchart": {
    "source": "iana",
    "extensions": ["sm"]
  },
  "application/vnd.street-stream": {
    "source": "iana"
  },
  "application/vnd.sun.wadl+xml": {
    "source": "iana"
  },
  "application/vnd.sun.xml.calc": {
    "source": "apache",
    "extensions": ["sxc"]
  },
  "application/vnd.sun.xml.calc.template": {
    "source": "apache",
    "extensions": ["stc"]
  },
  "application/vnd.sun.xml.draw": {
    "source": "apache",
    "extensions": ["sxd"]
  },
  "application/vnd.sun.xml.draw.template": {
    "source": "apache",
    "extensions": ["std"]
  },
  "application/vnd.sun.xml.impress": {
    "source": "apache",
    "extensions": ["sxi"]
  },
  "application/vnd.sun.xml.impress.template": {
    "source": "apache",
    "extensions": ["sti"]
  },
  "application/vnd.sun.xml.math": {
    "source": "apache",
    "extensions": ["sxm"]
  },
  "application/vnd.sun.xml.writer": {
    "source": "apache",
    "extensions": ["sxw"]
  },
  "application/vnd.sun.xml.writer.global": {
    "source": "apache",
    "extensions": ["sxg"]
  },
  "application/vnd.sun.xml.writer.template": {
    "source": "apache",
    "extensions": ["stw"]
  },
  "application/vnd.sus-calendar": {
    "source": "iana",
    "extensions": ["sus", "susp"]
  },
  "application/vnd.svd": {
    "source": "iana",
    "extensions": ["svd"]
  },
  "application/vnd.swiftview-ics": {
    "source": "iana"
  },
  "application/vnd.symbian.install": {
    "source": "apache",
    "extensions": ["sis", "sisx"]
  },
  "application/vnd.syncml+xml": {
    "source": "iana",
    "extensions": ["xsm"]
  },
  "application/vnd.syncml.dm+wbxml": {
    "source": "iana",
    "extensions": ["bdm"]
  },
  "application/vnd.syncml.dm+xml": {
    "source": "iana",
    "extensions": ["xdm"]
  },
  "application/vnd.syncml.dm.notification": {
    "source": "iana"
  },
  "application/vnd.syncml.dmddf+wbxml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmddf+xml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmtnds+wbxml": {
    "source": "iana"
  },
  "application/vnd.syncml.dmtnds+xml": {
    "source": "iana"
  },
  "application/vnd.syncml.ds.notification": {
    "source": "iana"
  },
  "application/vnd.tao.intent-module-archive": {
    "source": "iana",
    "extensions": ["tao"]
  },
  "application/vnd.tcpdump.pcap": {
    "source": "iana",
    "extensions": ["pcap", "cap", "dmp"]
  },
  "application/vnd.tmd.mediaflex.api+xml": {
    "source": "iana"
  },
  "application/vnd.tml": {
    "source": "iana"
  },
  "application/vnd.tmobile-livetv": {
    "source": "iana",
    "extensions": ["tmo"]
  },
  "application/vnd.trid.tpt": {
    "source": "iana",
    "extensions": ["tpt"]
  },
  "application/vnd.triscape.mxs": {
    "source": "iana",
    "extensions": ["mxs"]
  },
  "application/vnd.trueapp": {
    "source": "iana",
    "extensions": ["tra"]
  },
  "application/vnd.truedoc": {
    "source": "iana"
  },
  "application/vnd.ubisoft.webplayer": {
    "source": "iana"
  },
  "application/vnd.ufdl": {
    "source": "iana",
    "extensions": ["ufd", "ufdl"]
  },
  "application/vnd.uiq.theme": {
    "source": "iana",
    "extensions": ["utz"]
  },
  "application/vnd.umajin": {
    "source": "iana",
    "extensions": ["umj"]
  },
  "application/vnd.unity": {
    "source": "iana",
    "extensions": ["unityweb"]
  },
  "application/vnd.uoml+xml": {
    "source": "iana",
    "extensions": ["uoml"]
  },
  "application/vnd.uplanet.alert": {
    "source": "iana"
  },
  "application/vnd.uplanet.alert-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.bearer-choice": {
    "source": "iana"
  },
  "application/vnd.uplanet.bearer-choice-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.cacheop": {
    "source": "iana"
  },
  "application/vnd.uplanet.cacheop-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.channel": {
    "source": "iana"
  },
  "application/vnd.uplanet.channel-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.list": {
    "source": "iana"
  },
  "application/vnd.uplanet.list-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.listcmd": {
    "source": "iana"
  },
  "application/vnd.uplanet.listcmd-wbxml": {
    "source": "iana"
  },
  "application/vnd.uplanet.signal": {
    "source": "iana"
  },
  "application/vnd.uri-map": {
    "source": "iana"
  },
  "application/vnd.valve.source.material": {
    "source": "iana"
  },
  "application/vnd.vcx": {
    "source": "iana",
    "extensions": ["vcx"]
  },
  "application/vnd.vd-study": {
    "source": "iana"
  },
  "application/vnd.vectorworks": {
    "source": "iana"
  },
  "application/vnd.verimatrix.vcas": {
    "source": "iana"
  },
  "application/vnd.vidsoft.vidconference": {
    "source": "iana"
  },
  "application/vnd.visio": {
    "source": "iana",
    "extensions": ["vsd", "vst", "vss", "vsw"]
  },
  "application/vnd.visionary": {
    "source": "iana",
    "extensions": ["vis"]
  },
  "application/vnd.vividence.scriptfile": {
    "source": "iana"
  },
  "application/vnd.vsf": {
    "source": "iana",
    "extensions": ["vsf"]
  },
  "application/vnd.wap.sic": {
    "source": "iana"
  },
  "application/vnd.wap.slc": {
    "source": "iana"
  },
  "application/vnd.wap.wbxml": {
    "source": "iana",
    "extensions": ["wbxml"]
  },
  "application/vnd.wap.wmlc": {
    "source": "iana",
    "extensions": ["wmlc"]
  },
  "application/vnd.wap.wmlscriptc": {
    "source": "iana",
    "extensions": ["wmlsc"]
  },
  "application/vnd.webturbo": {
    "source": "iana",
    "extensions": ["wtb"]
  },
  "application/vnd.wfa.p2p": {
    "source": "iana"
  },
  "application/vnd.wfa.wsc": {
    "source": "iana"
  },
  "application/vnd.windows.devicepairing": {
    "source": "iana"
  },
  "application/vnd.wmc": {
    "source": "iana"
  },
  "application/vnd.wmf.bootstrap": {
    "source": "iana"
  },
  "application/vnd.wolfram.mathematica": {
    "source": "iana"
  },
  "application/vnd.wolfram.mathematica.package": {
    "source": "iana"
  },
  "application/vnd.wolfram.player": {
    "source": "iana",
    "extensions": ["nbp"]
  },
  "application/vnd.wordperfect": {
    "source": "iana",
    "extensions": ["wpd"]
  },
  "application/vnd.wqd": {
    "source": "iana",
    "extensions": ["wqd"]
  },
  "application/vnd.wrq-hp3000-labelled": {
    "source": "iana"
  },
  "application/vnd.wt.stf": {
    "source": "iana",
    "extensions": ["stf"]
  },
  "application/vnd.wv.csp+wbxml": {
    "source": "iana"
  },
  "application/vnd.wv.csp+xml": {
    "source": "iana"
  },
  "application/vnd.wv.ssp+xml": {
    "source": "iana"
  },
  "application/vnd.xacml+json": {
    "source": "iana",
    "compressible": true
  },
  "application/vnd.xara": {
    "source": "iana",
    "extensions": ["xar"]
  },
  "application/vnd.xfdl": {
    "source": "iana",
    "extensions": ["xfdl"]
  },
  "application/vnd.xfdl.webform": {
    "source": "iana"
  },
  "application/vnd.xmi+xml": {
    "source": "iana"
  },
  "application/vnd.xmpie.cpkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.dpkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.plan": {
    "source": "iana"
  },
  "application/vnd.xmpie.ppkg": {
    "source": "iana"
  },
  "application/vnd.xmpie.xlim": {
    "source": "iana"
  },
  "application/vnd.yamaha.hv-dic": {
    "source": "iana",
    "extensions": ["hvd"]
  },
  "application/vnd.yamaha.hv-script": {
    "source": "iana",
    "extensions": ["hvs"]
  },
  "application/vnd.yamaha.hv-voice": {
    "source": "iana",
    "extensions": ["hvp"]
  },
  "application/vnd.yamaha.openscoreformat": {
    "source": "iana",
    "extensions": ["osf"]
  },
  "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
    "source": "iana",
    "extensions": ["osfpvg"]
  },
  "application/vnd.yamaha.remote-setup": {
    "source": "iana"
  },
  "application/vnd.yamaha.smaf-audio": {
    "source": "iana",
    "extensions": ["saf"]
  },
  "application/vnd.yamaha.smaf-phrase": {
    "source": "iana",
    "extensions": ["spf"]
  },
  "application/vnd.yamaha.through-ngn": {
    "source": "iana"
  },
  "application/vnd.yamaha.tunnel-udpencap": {
    "source": "iana"
  },
  "application/vnd.yaoweme": {
    "source": "iana"
  },
  "application/vnd.yellowriver-custom-menu": {
    "source": "iana",
    "extensions": ["cmp"]
  },
  "application/vnd.zul": {
    "source": "iana",
    "extensions": ["zir", "zirz"]
  },
  "application/vnd.zzazz.deck+xml": {
    "source": "iana",
    "extensions": ["zaz"]
  },
  "application/voicexml+xml": {
    "source": "iana",
    "extensions": ["vxml"]
  },
  "application/vq-rtcpxr": {
    "source": "iana"
  },
  "application/watcherinfo+xml": {
    "source": "iana"
  },
  "application/whoispp-query": {
    "source": "iana"
  },
  "application/whoispp-response": {
    "source": "iana"
  },
  "application/widget": {
    "source": "iana",
    "extensions": ["wgt"]
  },
  "application/winhlp": {
    "source": "apache",
    "extensions": ["hlp"]
  },
  "application/wita": {
    "source": "iana"
  },
  "application/wordperfect5.1": {
    "source": "iana"
  },
  "application/wsdl+xml": {
    "source": "iana",
    "extensions": ["wsdl"]
  },
  "application/wspolicy+xml": {
    "source": "iana",
    "extensions": ["wspolicy"]
  },
  "application/x-7z-compressed": {
    "source": "apache",
    "compressible": false,
    "extensions": ["7z"]
  },
  "application/x-abiword": {
    "source": "apache",
    "extensions": ["abw"]
  },
  "application/x-ace-compressed": {
    "source": "apache",
    "extensions": ["ace"]
  },
  "application/x-amf": {
    "source": "apache"
  },
  "application/x-apple-diskimage": {
    "source": "apache",
    "extensions": ["dmg"]
  },
  "application/x-authorware-bin": {
    "source": "apache",
    "extensions": ["aab", "x32", "u32", "vox"]
  },
  "application/x-authorware-map": {
    "source": "apache",
    "extensions": ["aam"]
  },
  "application/x-authorware-seg": {
    "source": "apache",
    "extensions": ["aas"]
  },
  "application/x-bcpio": {
    "source": "apache",
    "extensions": ["bcpio"]
  },
  "application/x-bdoc": {
    "compressible": false,
    "extensions": ["bdoc"]
  },
  "application/x-bittorrent": {
    "source": "apache",
    "extensions": ["torrent"]
  },
  "application/x-blorb": {
    "source": "apache",
    "extensions": ["blb", "blorb"]
  },
  "application/x-bzip": {
    "source": "apache",
    "compressible": false,
    "extensions": ["bz"]
  },
  "application/x-bzip2": {
    "source": "apache",
    "compressible": false,
    "extensions": ["bz2", "boz"]
  },
  "application/x-cbr": {
    "source": "apache",
    "extensions": ["cbr", "cba", "cbt", "cbz", "cb7"]
  },
  "application/x-cdlink": {
    "source": "apache",
    "extensions": ["vcd"]
  },
  "application/x-cfs-compressed": {
    "source": "apache",
    "extensions": ["cfs"]
  },
  "application/x-chat": {
    "source": "apache",
    "extensions": ["chat"]
  },
  "application/x-chess-pgn": {
    "source": "apache",
    "extensions": ["pgn"]
  },
  "application/x-chrome-extension": {
    "extensions": ["crx"]
  },
  "application/x-cocoa": {
    "source": "nginx",
    "extensions": ["cco"]
  },
  "application/x-compress": {
    "source": "apache"
  },
  "application/x-conference": {
    "source": "apache",
    "extensions": ["nsc"]
  },
  "application/x-cpio": {
    "source": "apache",
    "extensions": ["cpio"]
  },
  "application/x-csh": {
    "source": "apache",
    "extensions": ["csh"]
  },
  "application/x-deb": {
    "compressible": false
  },
  "application/x-debian-package": {
    "source": "apache",
    "extensions": ["deb", "udeb"]
  },
  "application/x-dgc-compressed": {
    "source": "apache",
    "extensions": ["dgc"]
  },
  "application/x-director": {
    "source": "apache",
    "extensions": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
  },
  "application/x-doom": {
    "source": "apache",
    "extensions": ["wad"]
  },
  "application/x-dtbncx+xml": {
    "source": "apache",
    "extensions": ["ncx"]
  },
  "application/x-dtbook+xml": {
    "source": "apache",
    "extensions": ["dtb"]
  },
  "application/x-dtbresource+xml": {
    "source": "apache",
    "extensions": ["res"]
  },
  "application/x-dvi": {
    "source": "apache",
    "compressible": false,
    "extensions": ["dvi"]
  },
  "application/x-envoy": {
    "source": "apache",
    "extensions": ["evy"]
  },
  "application/x-eva": {
    "source": "apache",
    "extensions": ["eva"]
  },
  "application/x-font-bdf": {
    "source": "apache",
    "extensions": ["bdf"]
  },
  "application/x-font-dos": {
    "source": "apache"
  },
  "application/x-font-framemaker": {
    "source": "apache"
  },
  "application/x-font-ghostscript": {
    "source": "apache",
    "extensions": ["gsf"]
  },
  "application/x-font-libgrx": {
    "source": "apache"
  },
  "application/x-font-linux-psf": {
    "source": "apache",
    "extensions": ["psf"]
  },
  "application/x-font-otf": {
    "source": "apache",
    "compressible": true,
    "extensions": ["otf"]
  },
  "application/x-font-pcf": {
    "source": "apache",
    "extensions": ["pcf"]
  },
  "application/x-font-snf": {
    "source": "apache",
    "extensions": ["snf"]
  },
  "application/x-font-speedo": {
    "source": "apache"
  },
  "application/x-font-sunos-news": {
    "source": "apache"
  },
  "application/x-font-ttf": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ttf", "ttc"]
  },
  "application/x-font-type1": {
    "source": "apache",
    "extensions": ["pfa", "pfb", "pfm", "afm"]
  },
  "application/x-font-vfont": {
    "source": "apache"
  },
  "application/x-freearc": {
    "source": "apache",
    "extensions": ["arc"]
  },
  "application/x-futuresplash": {
    "source": "apache",
    "extensions": ["spl"]
  },
  "application/x-gca-compressed": {
    "source": "apache",
    "extensions": ["gca"]
  },
  "application/x-glulx": {
    "source": "apache",
    "extensions": ["ulx"]
  },
  "application/x-gnumeric": {
    "source": "apache",
    "extensions": ["gnumeric"]
  },
  "application/x-gramps-xml": {
    "source": "apache",
    "extensions": ["gramps"]
  },
  "application/x-gtar": {
    "source": "apache",
    "extensions": ["gtar"]
  },
  "application/x-gzip": {
    "source": "apache"
  },
  "application/x-hdf": {
    "source": "apache",
    "extensions": ["hdf"]
  },
  "application/x-httpd-php": {
    "compressible": true,
    "extensions": ["php"]
  },
  "application/x-install-instructions": {
    "source": "apache",
    "extensions": ["install"]
  },
  "application/x-iso9660-image": {
    "source": "apache",
    "extensions": ["iso"]
  },
  "application/x-java-archive-diff": {
    "source": "nginx",
    "extensions": ["jardiff"]
  },
  "application/x-java-jnlp-file": {
    "source": "apache",
    "compressible": false,
    "extensions": ["jnlp"]
  },
  "application/x-javascript": {
    "compressible": true
  },
  "application/x-latex": {
    "source": "apache",
    "compressible": false,
    "extensions": ["latex"]
  },
  "application/x-lua-bytecode": {
    "extensions": ["luac"]
  },
  "application/x-lzh-compressed": {
    "source": "apache",
    "extensions": ["lzh", "lha"]
  },
  "application/x-makeself": {
    "source": "nginx",
    "extensions": ["run"]
  },
  "application/x-mie": {
    "source": "apache",
    "extensions": ["mie"]
  },
  "application/x-mobipocket-ebook": {
    "source": "apache",
    "extensions": ["prc", "mobi"]
  },
  "application/x-mpegurl": {
    "compressible": false
  },
  "application/x-ms-application": {
    "source": "apache",
    "extensions": ["application"]
  },
  "application/x-ms-shortcut": {
    "source": "apache",
    "extensions": ["lnk"]
  },
  "application/x-ms-wmd": {
    "source": "apache",
    "extensions": ["wmd"]
  },
  "application/x-ms-wmz": {
    "source": "apache",
    "extensions": ["wmz"]
  },
  "application/x-ms-xbap": {
    "source": "apache",
    "extensions": ["xbap"]
  },
  "application/x-msaccess": {
    "source": "apache",
    "extensions": ["mdb"]
  },
  "application/x-msbinder": {
    "source": "apache",
    "extensions": ["obd"]
  },
  "application/x-mscardfile": {
    "source": "apache",
    "extensions": ["crd"]
  },
  "application/x-msclip": {
    "source": "apache",
    "extensions": ["clp"]
  },
  "application/x-msdos-program": {
    "extensions": ["exe"]
  },
  "application/x-msdownload": {
    "source": "apache",
    "extensions": ["exe", "dll", "com", "bat", "msi"]
  },
  "application/x-msmediaview": {
    "source": "apache",
    "extensions": ["mvb", "m13", "m14"]
  },
  "application/x-msmetafile": {
    "source": "apache",
    "extensions": ["wmf", "wmz", "emf", "emz"]
  },
  "application/x-msmoney": {
    "source": "apache",
    "extensions": ["mny"]
  },
  "application/x-mspublisher": {
    "source": "apache",
    "extensions": ["pub"]
  },
  "application/x-msschedule": {
    "source": "apache",
    "extensions": ["scd"]
  },
  "application/x-msterminal": {
    "source": "apache",
    "extensions": ["trm"]
  },
  "application/x-mswrite": {
    "source": "apache",
    "extensions": ["wri"]
  },
  "application/x-netcdf": {
    "source": "apache",
    "extensions": ["nc", "cdf"]
  },
  "application/x-ns-proxy-autoconfig": {
    "compressible": true,
    "extensions": ["pac"]
  },
  "application/x-nzb": {
    "source": "apache",
    "extensions": ["nzb"]
  },
  "application/x-perl": {
    "source": "nginx",
    "extensions": ["pl", "pm"]
  },
  "application/x-pilot": {
    "source": "nginx",
    "extensions": ["prc", "pdb"]
  },
  "application/x-pkcs12": {
    "source": "apache",
    "compressible": false,
    "extensions": ["p12", "pfx"]
  },
  "application/x-pkcs7-certificates": {
    "source": "apache",
    "extensions": ["p7b", "spc"]
  },
  "application/x-pkcs7-certreqresp": {
    "source": "apache",
    "extensions": ["p7r"]
  },
  "application/x-rar-compressed": {
    "source": "apache",
    "compressible": false,
    "extensions": ["rar"]
  },
  "application/x-redhat-package-manager": {
    "source": "nginx",
    "extensions": ["rpm"]
  },
  "application/x-research-info-systems": {
    "source": "apache",
    "extensions": ["ris"]
  },
  "application/x-sea": {
    "source": "nginx",
    "extensions": ["sea"]
  },
  "application/x-sh": {
    "source": "apache",
    "compressible": true,
    "extensions": ["sh"]
  },
  "application/x-shar": {
    "source": "apache",
    "extensions": ["shar"]
  },
  "application/x-shockwave-flash": {
    "source": "apache",
    "compressible": false,
    "extensions": ["swf"]
  },
  "application/x-silverlight-app": {
    "source": "apache",
    "extensions": ["xap"]
  },
  "application/x-sql": {
    "source": "apache",
    "extensions": ["sql"]
  },
  "application/x-stuffit": {
    "source": "apache",
    "compressible": false,
    "extensions": ["sit"]
  },
  "application/x-stuffitx": {
    "source": "apache",
    "extensions": ["sitx"]
  },
  "application/x-subrip": {
    "source": "apache",
    "extensions": ["srt"]
  },
  "application/x-sv4cpio": {
    "source": "apache",
    "extensions": ["sv4cpio"]
  },
  "application/x-sv4crc": {
    "source": "apache",
    "extensions": ["sv4crc"]
  },
  "application/x-t3vm-image": {
    "source": "apache",
    "extensions": ["t3"]
  },
  "application/x-tads": {
    "source": "apache",
    "extensions": ["gam"]
  },
  "application/x-tar": {
    "source": "apache",
    "compressible": true,
    "extensions": ["tar"]
  },
  "application/x-tcl": {
    "source": "apache",
    "extensions": ["tcl", "tk"]
  },
  "application/x-tex": {
    "source": "apache",
    "extensions": ["tex"]
  },
  "application/x-tex-tfm": {
    "source": "apache",
    "extensions": ["tfm"]
  },
  "application/x-texinfo": {
    "source": "apache",
    "extensions": ["texinfo", "texi"]
  },
  "application/x-tgif": {
    "source": "apache",
    "extensions": ["obj"]
  },
  "application/x-ustar": {
    "source": "apache",
    "extensions": ["ustar"]
  },
  "application/x-wais-source": {
    "source": "apache",
    "extensions": ["src"]
  },
  "application/x-web-app-manifest+json": {
    "compressible": true,
    "extensions": ["webapp"]
  },
  "application/x-www-form-urlencoded": {
    "source": "iana",
    "compressible": true
  },
  "application/x-x509-ca-cert": {
    "source": "apache",
    "extensions": ["der", "crt", "pem"]
  },
  "application/x-xfig": {
    "source": "apache",
    "extensions": ["fig"]
  },
  "application/x-xliff+xml": {
    "source": "apache",
    "extensions": ["xlf"]
  },
  "application/x-xpinstall": {
    "source": "apache",
    "compressible": false,
    "extensions": ["xpi"]
  },
  "application/x-xz": {
    "source": "apache",
    "extensions": ["xz"]
  },
  "application/x-zmachine": {
    "source": "apache",
    "extensions": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
  },
  "application/x400-bp": {
    "source": "iana"
  },
  "application/xacml+xml": {
    "source": "iana"
  },
  "application/xaml+xml": {
    "source": "apache",
    "extensions": ["xaml"]
  },
  "application/xcap-att+xml": {
    "source": "iana"
  },
  "application/xcap-caps+xml": {
    "source": "iana"
  },
  "application/xcap-diff+xml": {
    "source": "iana",
    "extensions": ["xdf"]
  },
  "application/xcap-el+xml": {
    "source": "iana"
  },
  "application/xcap-error+xml": {
    "source": "iana"
  },
  "application/xcap-ns+xml": {
    "source": "iana"
  },
  "application/xcon-conference-info+xml": {
    "source": "iana"
  },
  "application/xcon-conference-info-diff+xml": {
    "source": "iana"
  },
  "application/xenc+xml": {
    "source": "iana",
    "extensions": ["xenc"]
  },
  "application/xhtml+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xhtml", "xht"]
  },
  "application/xhtml-voice+xml": {
    "source": "apache"
  },
  "application/xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xml", "xsl", "xsd"]
  },
  "application/xml-dtd": {
    "source": "iana",
    "compressible": true,
    "extensions": ["dtd"]
  },
  "application/xml-external-parsed-entity": {
    "source": "iana"
  },
  "application/xml-patch+xml": {
    "source": "iana"
  },
  "application/xmpp+xml": {
    "source": "iana"
  },
  "application/xop+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xop"]
  },
  "application/xproc+xml": {
    "source": "apache",
    "extensions": ["xpl"]
  },
  "application/xslt+xml": {
    "source": "iana",
    "extensions": ["xslt"]
  },
  "application/xspf+xml": {
    "source": "apache",
    "extensions": ["xspf"]
  },
  "application/xv+xml": {
    "source": "iana",
    "extensions": ["mxml", "xhvml", "xvml", "xvm"]
  },
  "application/yang": {
    "source": "iana",
    "extensions": ["yang"]
  },
  "application/yin+xml": {
    "source": "iana",
    "extensions": ["yin"]
  },
  "application/zip": {
    "source": "iana",
    "compressible": false,
    "extensions": ["zip"]
  },
  "application/zlib": {
    "source": "iana"
  },
  "audio/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "audio/32kadpcm": {
    "source": "iana"
  },
  "audio/3gpp": {
    "source": "iana"
  },
  "audio/3gpp2": {
    "source": "iana"
  },
  "audio/ac3": {
    "source": "iana"
  },
  "audio/adpcm": {
    "source": "apache",
    "extensions": ["adp"]
  },
  "audio/amr": {
    "source": "iana"
  },
  "audio/amr-wb": {
    "source": "iana"
  },
  "audio/amr-wb+": {
    "source": "iana"
  },
  "audio/aptx": {
    "source": "iana"
  },
  "audio/asc": {
    "source": "iana"
  },
  "audio/atrac-advanced-lossless": {
    "source": "iana"
  },
  "audio/atrac-x": {
    "source": "iana"
  },
  "audio/atrac3": {
    "source": "iana"
  },
  "audio/basic": {
    "source": "iana",
    "compressible": false,
    "extensions": ["au", "snd"]
  },
  "audio/bv16": {
    "source": "iana"
  },
  "audio/bv32": {
    "source": "iana"
  },
  "audio/clearmode": {
    "source": "iana"
  },
  "audio/cn": {
    "source": "iana"
  },
  "audio/dat12": {
    "source": "iana"
  },
  "audio/dls": {
    "source": "iana"
  },
  "audio/dsr-es201108": {
    "source": "iana"
  },
  "audio/dsr-es202050": {
    "source": "iana"
  },
  "audio/dsr-es202211": {
    "source": "iana"
  },
  "audio/dsr-es202212": {
    "source": "iana"
  },
  "audio/dv": {
    "source": "iana"
  },
  "audio/dvi4": {
    "source": "iana"
  },
  "audio/eac3": {
    "source": "iana"
  },
  "audio/encaprtp": {
    "source": "iana"
  },
  "audio/evrc": {
    "source": "iana"
  },
  "audio/evrc-qcp": {
    "source": "iana"
  },
  "audio/evrc0": {
    "source": "iana"
  },
  "audio/evrc1": {
    "source": "iana"
  },
  "audio/evrcb": {
    "source": "iana"
  },
  "audio/evrcb0": {
    "source": "iana"
  },
  "audio/evrcb1": {
    "source": "iana"
  },
  "audio/evrcnw": {
    "source": "iana"
  },
  "audio/evrcnw0": {
    "source": "iana"
  },
  "audio/evrcnw1": {
    "source": "iana"
  },
  "audio/evrcwb": {
    "source": "iana"
  },
  "audio/evrcwb0": {
    "source": "iana"
  },
  "audio/evrcwb1": {
    "source": "iana"
  },
  "audio/evs": {
    "source": "iana"
  },
  "audio/fwdred": {
    "source": "iana"
  },
  "audio/g711-0": {
    "source": "iana"
  },
  "audio/g719": {
    "source": "iana"
  },
  "audio/g722": {
    "source": "iana"
  },
  "audio/g7221": {
    "source": "iana"
  },
  "audio/g723": {
    "source": "iana"
  },
  "audio/g726-16": {
    "source": "iana"
  },
  "audio/g726-24": {
    "source": "iana"
  },
  "audio/g726-32": {
    "source": "iana"
  },
  "audio/g726-40": {
    "source": "iana"
  },
  "audio/g728": {
    "source": "iana"
  },
  "audio/g729": {
    "source": "iana"
  },
  "audio/g7291": {
    "source": "iana"
  },
  "audio/g729d": {
    "source": "iana"
  },
  "audio/g729e": {
    "source": "iana"
  },
  "audio/gsm": {
    "source": "iana"
  },
  "audio/gsm-efr": {
    "source": "iana"
  },
  "audio/gsm-hr-08": {
    "source": "iana"
  },
  "audio/ilbc": {
    "source": "iana"
  },
  "audio/ip-mr_v2.5": {
    "source": "iana"
  },
  "audio/isac": {
    "source": "apache"
  },
  "audio/l16": {
    "source": "iana"
  },
  "audio/l20": {
    "source": "iana"
  },
  "audio/l24": {
    "source": "iana",
    "compressible": false
  },
  "audio/l8": {
    "source": "iana"
  },
  "audio/lpc": {
    "source": "iana"
  },
  "audio/midi": {
    "source": "apache",
    "extensions": ["mid", "midi", "kar", "rmi"]
  },
  "audio/mobile-xmf": {
    "source": "iana"
  },
  "audio/mp4": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mp4a", "m4a"]
  },
  "audio/mp4a-latm": {
    "source": "iana"
  },
  "audio/mpa": {
    "source": "iana"
  },
  "audio/mpa-robust": {
    "source": "iana"
  },
  "audio/mpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
  },
  "audio/mpeg4-generic": {
    "source": "iana"
  },
  "audio/musepack": {
    "source": "apache"
  },
  "audio/ogg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["oga", "ogg", "spx"]
  },
  "audio/opus": {
    "source": "iana"
  },
  "audio/parityfec": {
    "source": "iana"
  },
  "audio/pcma": {
    "source": "iana"
  },
  "audio/pcma-wb": {
    "source": "iana"
  },
  "audio/pcmu": {
    "source": "iana"
  },
  "audio/pcmu-wb": {
    "source": "iana"
  },
  "audio/prs.sid": {
    "source": "iana"
  },
  "audio/qcelp": {
    "source": "iana"
  },
  "audio/raptorfec": {
    "source": "iana"
  },
  "audio/red": {
    "source": "iana"
  },
  "audio/rtp-enc-aescm128": {
    "source": "iana"
  },
  "audio/rtp-midi": {
    "source": "iana"
  },
  "audio/rtploopback": {
    "source": "iana"
  },
  "audio/rtx": {
    "source": "iana"
  },
  "audio/s3m": {
    "source": "apache",
    "extensions": ["s3m"]
  },
  "audio/silk": {
    "source": "apache",
    "extensions": ["sil"]
  },
  "audio/smv": {
    "source": "iana"
  },
  "audio/smv-qcp": {
    "source": "iana"
  },
  "audio/smv0": {
    "source": "iana"
  },
  "audio/sp-midi": {
    "source": "iana"
  },
  "audio/speex": {
    "source": "iana"
  },
  "audio/t140c": {
    "source": "iana"
  },
  "audio/t38": {
    "source": "iana"
  },
  "audio/telephone-event": {
    "source": "iana"
  },
  "audio/tone": {
    "source": "iana"
  },
  "audio/uemclip": {
    "source": "iana"
  },
  "audio/ulpfec": {
    "source": "iana"
  },
  "audio/vdvi": {
    "source": "iana"
  },
  "audio/vmr-wb": {
    "source": "iana"
  },
  "audio/vnd.3gpp.iufp": {
    "source": "iana"
  },
  "audio/vnd.4sb": {
    "source": "iana"
  },
  "audio/vnd.audiokoz": {
    "source": "iana"
  },
  "audio/vnd.celp": {
    "source": "iana"
  },
  "audio/vnd.cisco.nse": {
    "source": "iana"
  },
  "audio/vnd.cmles.radio-events": {
    "source": "iana"
  },
  "audio/vnd.cns.anp1": {
    "source": "iana"
  },
  "audio/vnd.cns.inf1": {
    "source": "iana"
  },
  "audio/vnd.dece.audio": {
    "source": "iana",
    "extensions": ["uva", "uvva"]
  },
  "audio/vnd.digital-winds": {
    "source": "iana",
    "extensions": ["eol"]
  },
  "audio/vnd.dlna.adts": {
    "source": "iana"
  },
  "audio/vnd.dolby.heaac.1": {
    "source": "iana"
  },
  "audio/vnd.dolby.heaac.2": {
    "source": "iana"
  },
  "audio/vnd.dolby.mlp": {
    "source": "iana"
  },
  "audio/vnd.dolby.mps": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2x": {
    "source": "iana"
  },
  "audio/vnd.dolby.pl2z": {
    "source": "iana"
  },
  "audio/vnd.dolby.pulse.1": {
    "source": "iana"
  },
  "audio/vnd.dra": {
    "source": "iana",
    "extensions": ["dra"]
  },
  "audio/vnd.dts": {
    "source": "iana",
    "extensions": ["dts"]
  },
  "audio/vnd.dts.hd": {
    "source": "iana",
    "extensions": ["dtshd"]
  },
  "audio/vnd.dvb.file": {
    "source": "iana"
  },
  "audio/vnd.everad.plj": {
    "source": "iana"
  },
  "audio/vnd.hns.audio": {
    "source": "iana"
  },
  "audio/vnd.lucent.voice": {
    "source": "iana",
    "extensions": ["lvp"]
  },
  "audio/vnd.ms-playready.media.pya": {
    "source": "iana",
    "extensions": ["pya"]
  },
  "audio/vnd.nokia.mobile-xmf": {
    "source": "iana"
  },
  "audio/vnd.nortel.vbk": {
    "source": "iana"
  },
  "audio/vnd.nuera.ecelp4800": {
    "source": "iana",
    "extensions": ["ecelp4800"]
  },
  "audio/vnd.nuera.ecelp7470": {
    "source": "iana",
    "extensions": ["ecelp7470"]
  },
  "audio/vnd.nuera.ecelp9600": {
    "source": "iana",
    "extensions": ["ecelp9600"]
  },
  "audio/vnd.octel.sbc": {
    "source": "iana"
  },
  "audio/vnd.qcelp": {
    "source": "iana"
  },
  "audio/vnd.rhetorex.32kadpcm": {
    "source": "iana"
  },
  "audio/vnd.rip": {
    "source": "iana",
    "extensions": ["rip"]
  },
  "audio/vnd.rn-realaudio": {
    "compressible": false
  },
  "audio/vnd.sealedmedia.softseal.mpeg": {
    "source": "iana"
  },
  "audio/vnd.vmx.cvsd": {
    "source": "iana"
  },
  "audio/vnd.wave": {
    "compressible": false
  },
  "audio/vorbis": {
    "source": "iana",
    "compressible": false
  },
  "audio/vorbis-config": {
    "source": "iana"
  },
  "audio/wav": {
    "compressible": false,
    "extensions": ["wav"]
  },
  "audio/wave": {
    "compressible": false,
    "extensions": ["wav"]
  },
  "audio/webm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["weba"]
  },
  "audio/x-aac": {
    "source": "apache",
    "compressible": false,
    "extensions": ["aac"]
  },
  "audio/x-aiff": {
    "source": "apache",
    "extensions": ["aif", "aiff", "aifc"]
  },
  "audio/x-caf": {
    "source": "apache",
    "compressible": false,
    "extensions": ["caf"]
  },
  "audio/x-flac": {
    "source": "apache",
    "extensions": ["flac"]
  },
  "audio/x-m4a": {
    "source": "nginx",
    "extensions": ["m4a"]
  },
  "audio/x-matroska": {
    "source": "apache",
    "extensions": ["mka"]
  },
  "audio/x-mpegurl": {
    "source": "apache",
    "extensions": ["m3u"]
  },
  "audio/x-ms-wax": {
    "source": "apache",
    "extensions": ["wax"]
  },
  "audio/x-ms-wma": {
    "source": "apache",
    "extensions": ["wma"]
  },
  "audio/x-pn-realaudio": {
    "source": "apache",
    "extensions": ["ram", "ra"]
  },
  "audio/x-pn-realaudio-plugin": {
    "source": "apache",
    "extensions": ["rmp"]
  },
  "audio/x-realaudio": {
    "source": "nginx",
    "extensions": ["ra"]
  },
  "audio/x-tta": {
    "source": "apache"
  },
  "audio/x-wav": {
    "source": "apache",
    "extensions": ["wav"]
  },
  "audio/xm": {
    "source": "apache",
    "extensions": ["xm"]
  },
  "chemical/x-cdx": {
    "source": "apache",
    "extensions": ["cdx"]
  },
  "chemical/x-cif": {
    "source": "apache",
    "extensions": ["cif"]
  },
  "chemical/x-cmdf": {
    "source": "apache",
    "extensions": ["cmdf"]
  },
  "chemical/x-cml": {
    "source": "apache",
    "extensions": ["cml"]
  },
  "chemical/x-csml": {
    "source": "apache",
    "extensions": ["csml"]
  },
  "chemical/x-pdb": {
    "source": "apache"
  },
  "chemical/x-xyz": {
    "source": "apache",
    "extensions": ["xyz"]
  },
  "font/opentype": {
    "compressible": true,
    "extensions": ["otf"]
  },
  "image/bmp": {
    "source": "apache",
    "compressible": true,
    "extensions": ["bmp"]
  },
  "image/cgm": {
    "source": "iana",
    "extensions": ["cgm"]
  },
  "image/fits": {
    "source": "iana"
  },
  "image/g3fax": {
    "source": "iana",
    "extensions": ["g3"]
  },
  "image/gif": {
    "source": "iana",
    "compressible": false,
    "extensions": ["gif"]
  },
  "image/ief": {
    "source": "iana",
    "extensions": ["ief"]
  },
  "image/jp2": {
    "source": "iana"
  },
  "image/jpeg": {
    "source": "iana",
    "compressible": false,
    "extensions": ["jpeg", "jpg", "jpe"]
  },
  "image/jpm": {
    "source": "iana"
  },
  "image/jpx": {
    "source": "iana"
  },
  "image/ktx": {
    "source": "iana",
    "extensions": ["ktx"]
  },
  "image/naplps": {
    "source": "iana"
  },
  "image/pjpeg": {
    "compressible": false
  },
  "image/png": {
    "source": "iana",
    "compressible": false,
    "extensions": ["png"]
  },
  "image/prs.btif": {
    "source": "iana",
    "extensions": ["btif"]
  },
  "image/prs.pti": {
    "source": "iana"
  },
  "image/pwg-raster": {
    "source": "iana"
  },
  "image/sgi": {
    "source": "apache",
    "extensions": ["sgi"]
  },
  "image/svg+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["svg", "svgz"]
  },
  "image/t38": {
    "source": "iana"
  },
  "image/tiff": {
    "source": "iana",
    "compressible": false,
    "extensions": ["tiff", "tif"]
  },
  "image/tiff-fx": {
    "source": "iana"
  },
  "image/vnd.adobe.photoshop": {
    "source": "iana",
    "compressible": true,
    "extensions": ["psd"]
  },
  "image/vnd.airzip.accelerator.azv": {
    "source": "iana"
  },
  "image/vnd.cns.inf2": {
    "source": "iana"
  },
  "image/vnd.dece.graphic": {
    "source": "iana",
    "extensions": ["uvi", "uvvi", "uvg", "uvvg"]
  },
  "image/vnd.djvu": {
    "source": "iana",
    "extensions": ["djvu", "djv"]
  },
  "image/vnd.dvb.subtitle": {
    "source": "iana",
    "extensions": ["sub"]
  },
  "image/vnd.dwg": {
    "source": "iana",
    "extensions": ["dwg"]
  },
  "image/vnd.dxf": {
    "source": "iana",
    "extensions": ["dxf"]
  },
  "image/vnd.fastbidsheet": {
    "source": "iana",
    "extensions": ["fbs"]
  },
  "image/vnd.fpx": {
    "source": "iana",
    "extensions": ["fpx"]
  },
  "image/vnd.fst": {
    "source": "iana",
    "extensions": ["fst"]
  },
  "image/vnd.fujixerox.edmics-mmr": {
    "source": "iana",
    "extensions": ["mmr"]
  },
  "image/vnd.fujixerox.edmics-rlc": {
    "source": "iana",
    "extensions": ["rlc"]
  },
  "image/vnd.globalgraphics.pgb": {
    "source": "iana"
  },
  "image/vnd.microsoft.icon": {
    "source": "iana"
  },
  "image/vnd.mix": {
    "source": "iana"
  },
  "image/vnd.mozilla.apng": {
    "source": "iana"
  },
  "image/vnd.ms-modi": {
    "source": "iana",
    "extensions": ["mdi"]
  },
  "image/vnd.ms-photo": {
    "source": "apache",
    "extensions": ["wdp"]
  },
  "image/vnd.net-fpx": {
    "source": "iana",
    "extensions": ["npx"]
  },
  "image/vnd.radiance": {
    "source": "iana"
  },
  "image/vnd.sealed.png": {
    "source": "iana"
  },
  "image/vnd.sealedmedia.softseal.gif": {
    "source": "iana"
  },
  "image/vnd.sealedmedia.softseal.jpg": {
    "source": "iana"
  },
  "image/vnd.svf": {
    "source": "iana"
  },
  "image/vnd.tencent.tap": {
    "source": "iana"
  },
  "image/vnd.valve.source.texture": {
    "source": "iana"
  },
  "image/vnd.wap.wbmp": {
    "source": "iana",
    "extensions": ["wbmp"]
  },
  "image/vnd.xiff": {
    "source": "iana",
    "extensions": ["xif"]
  },
  "image/vnd.zbrush.pcx": {
    "source": "iana"
  },
  "image/webp": {
    "source": "apache",
    "extensions": ["webp"]
  },
  "image/x-3ds": {
    "source": "apache",
    "extensions": ["3ds"]
  },
  "image/x-cmu-raster": {
    "source": "apache",
    "extensions": ["ras"]
  },
  "image/x-cmx": {
    "source": "apache",
    "extensions": ["cmx"]
  },
  "image/x-freehand": {
    "source": "apache",
    "extensions": ["fh", "fhc", "fh4", "fh5", "fh7"]
  },
  "image/x-icon": {
    "source": "apache",
    "compressible": true,
    "extensions": ["ico"]
  },
  "image/x-jng": {
    "source": "nginx",
    "extensions": ["jng"]
  },
  "image/x-mrsid-image": {
    "source": "apache",
    "extensions": ["sid"]
  },
  "image/x-ms-bmp": {
    "source": "nginx",
    "compressible": true,
    "extensions": ["bmp"]
  },
  "image/x-pcx": {
    "source": "apache",
    "extensions": ["pcx"]
  },
  "image/x-pict": {
    "source": "apache",
    "extensions": ["pic", "pct"]
  },
  "image/x-portable-anymap": {
    "source": "apache",
    "extensions": ["pnm"]
  },
  "image/x-portable-bitmap": {
    "source": "apache",
    "extensions": ["pbm"]
  },
  "image/x-portable-graymap": {
    "source": "apache",
    "extensions": ["pgm"]
  },
  "image/x-portable-pixmap": {
    "source": "apache",
    "extensions": ["ppm"]
  },
  "image/x-rgb": {
    "source": "apache",
    "extensions": ["rgb"]
  },
  "image/x-tga": {
    "source": "apache",
    "extensions": ["tga"]
  },
  "image/x-xbitmap": {
    "source": "apache",
    "extensions": ["xbm"]
  },
  "image/x-xcf": {
    "compressible": false
  },
  "image/x-xpixmap": {
    "source": "apache",
    "extensions": ["xpm"]
  },
  "image/x-xwindowdump": {
    "source": "apache",
    "extensions": ["xwd"]
  },
  "message/cpim": {
    "source": "iana"
  },
  "message/delivery-status": {
    "source": "iana"
  },
  "message/disposition-notification": {
    "source": "iana"
  },
  "message/external-body": {
    "source": "iana"
  },
  "message/feedback-report": {
    "source": "iana"
  },
  "message/global": {
    "source": "iana"
  },
  "message/global-delivery-status": {
    "source": "iana"
  },
  "message/global-disposition-notification": {
    "source": "iana"
  },
  "message/global-headers": {
    "source": "iana"
  },
  "message/http": {
    "source": "iana",
    "compressible": false
  },
  "message/imdn+xml": {
    "source": "iana",
    "compressible": true
  },
  "message/news": {
    "source": "iana"
  },
  "message/partial": {
    "source": "iana",
    "compressible": false
  },
  "message/rfc822": {
    "source": "iana",
    "compressible": true,
    "extensions": ["eml", "mime"]
  },
  "message/s-http": {
    "source": "iana"
  },
  "message/sip": {
    "source": "iana"
  },
  "message/sipfrag": {
    "source": "iana"
  },
  "message/tracking-status": {
    "source": "iana"
  },
  "message/vnd.si.simp": {
    "source": "iana"
  },
  "message/vnd.wfa.wsc": {
    "source": "iana"
  },
  "model/iges": {
    "source": "iana",
    "compressible": false,
    "extensions": ["igs", "iges"]
  },
  "model/mesh": {
    "source": "iana",
    "compressible": false,
    "extensions": ["msh", "mesh", "silo"]
  },
  "model/vnd.collada+xml": {
    "source": "iana",
    "extensions": ["dae"]
  },
  "model/vnd.dwf": {
    "source": "iana",
    "extensions": ["dwf"]
  },
  "model/vnd.flatland.3dml": {
    "source": "iana"
  },
  "model/vnd.gdl": {
    "source": "iana",
    "extensions": ["gdl"]
  },
  "model/vnd.gs-gdl": {
    "source": "apache"
  },
  "model/vnd.gs.gdl": {
    "source": "iana"
  },
  "model/vnd.gtw": {
    "source": "iana",
    "extensions": ["gtw"]
  },
  "model/vnd.moml+xml": {
    "source": "iana"
  },
  "model/vnd.mts": {
    "source": "iana",
    "extensions": ["mts"]
  },
  "model/vnd.opengex": {
    "source": "iana"
  },
  "model/vnd.parasolid.transmit.binary": {
    "source": "iana"
  },
  "model/vnd.parasolid.transmit.text": {
    "source": "iana"
  },
  "model/vnd.valve.source.compiled-map": {
    "source": "iana"
  },
  "model/vnd.vtu": {
    "source": "iana",
    "extensions": ["vtu"]
  },
  "model/vrml": {
    "source": "iana",
    "compressible": false,
    "extensions": ["wrl", "vrml"]
  },
  "model/x3d+binary": {
    "source": "apache",
    "compressible": false,
    "extensions": ["x3db", "x3dbz"]
  },
  "model/x3d+fastinfoset": {
    "source": "iana"
  },
  "model/x3d+vrml": {
    "source": "apache",
    "compressible": false,
    "extensions": ["x3dv", "x3dvz"]
  },
  "model/x3d+xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["x3d", "x3dz"]
  },
  "model/x3d-vrml": {
    "source": "iana"
  },
  "multipart/alternative": {
    "source": "iana",
    "compressible": false
  },
  "multipart/appledouble": {
    "source": "iana"
  },
  "multipart/byteranges": {
    "source": "iana"
  },
  "multipart/digest": {
    "source": "iana"
  },
  "multipart/encrypted": {
    "source": "iana",
    "compressible": false
  },
  "multipart/form-data": {
    "source": "iana",
    "compressible": false
  },
  "multipart/header-set": {
    "source": "iana"
  },
  "multipart/mixed": {
    "source": "iana",
    "compressible": false
  },
  "multipart/parallel": {
    "source": "iana"
  },
  "multipart/related": {
    "source": "iana",
    "compressible": false
  },
  "multipart/report": {
    "source": "iana"
  },
  "multipart/signed": {
    "source": "iana",
    "compressible": false
  },
  "multipart/voice-message": {
    "source": "iana"
  },
  "multipart/x-mixed-replace": {
    "source": "iana"
  },
  "text/1d-interleaved-parityfec": {
    "source": "iana"
  },
  "text/cache-manifest": {
    "source": "iana",
    "compressible": true,
    "extensions": ["appcache", "manifest"]
  },
  "text/calendar": {
    "source": "iana",
    "extensions": ["ics", "ifb"]
  },
  "text/calender": {
    "compressible": true
  },
  "text/cmd": {
    "compressible": true
  },
  "text/coffeescript": {
    "extensions": ["coffee", "litcoffee"]
  },
  "text/css": {
    "source": "iana",
    "compressible": true,
    "extensions": ["css"]
  },
  "text/csv": {
    "source": "iana",
    "compressible": true,
    "extensions": ["csv"]
  },
  "text/csv-schema": {
    "source": "iana"
  },
  "text/directory": {
    "source": "iana"
  },
  "text/dns": {
    "source": "iana"
  },
  "text/ecmascript": {
    "source": "iana"
  },
  "text/encaprtp": {
    "source": "iana"
  },
  "text/enriched": {
    "source": "iana"
  },
  "text/fwdred": {
    "source": "iana"
  },
  "text/grammar-ref-list": {
    "source": "iana"
  },
  "text/hjson": {
    "extensions": ["hjson"]
  },
  "text/html": {
    "source": "iana",
    "compressible": true,
    "extensions": ["html", "htm", "shtml"]
  },
  "text/jade": {
    "extensions": ["jade"]
  },
  "text/javascript": {
    "source": "iana",
    "compressible": true
  },
  "text/jcr-cnd": {
    "source": "iana"
  },
  "text/jsx": {
    "compressible": true,
    "extensions": ["jsx"]
  },
  "text/less": {
    "extensions": ["less"]
  },
  "text/markdown": {
    "source": "iana"
  },
  "text/mathml": {
    "source": "nginx",
    "extensions": ["mml"]
  },
  "text/mizar": {
    "source": "iana"
  },
  "text/n3": {
    "source": "iana",
    "compressible": true,
    "extensions": ["n3"]
  },
  "text/parameters": {
    "source": "iana"
  },
  "text/parityfec": {
    "source": "iana"
  },
  "text/plain": {
    "source": "iana",
    "compressible": true,
    "extensions": ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
  },
  "text/provenance-notation": {
    "source": "iana"
  },
  "text/prs.fallenstein.rst": {
    "source": "iana"
  },
  "text/prs.lines.tag": {
    "source": "iana",
    "extensions": ["dsc"]
  },
  "text/raptorfec": {
    "source": "iana"
  },
  "text/red": {
    "source": "iana"
  },
  "text/rfc822-headers": {
    "source": "iana"
  },
  "text/richtext": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtx"]
  },
  "text/rtf": {
    "source": "iana",
    "compressible": true,
    "extensions": ["rtf"]
  },
  "text/rtp-enc-aescm128": {
    "source": "iana"
  },
  "text/rtploopback": {
    "source": "iana"
  },
  "text/rtx": {
    "source": "iana"
  },
  "text/sgml": {
    "source": "iana",
    "extensions": ["sgml", "sgm"]
  },
  "text/stylus": {
    "extensions": ["stylus", "styl"]
  },
  "text/t140": {
    "source": "iana"
  },
  "text/tab-separated-values": {
    "source": "iana",
    "compressible": true,
    "extensions": ["tsv"]
  },
  "text/troff": {
    "source": "iana",
    "extensions": ["t", "tr", "roff", "man", "me", "ms"]
  },
  "text/turtle": {
    "source": "iana",
    "extensions": ["ttl"]
  },
  "text/ulpfec": {
    "source": "iana"
  },
  "text/uri-list": {
    "source": "iana",
    "compressible": true,
    "extensions": ["uri", "uris", "urls"]
  },
  "text/vcard": {
    "source": "iana",
    "compressible": true,
    "extensions": ["vcard"]
  },
  "text/vnd.a": {
    "source": "iana"
  },
  "text/vnd.abc": {
    "source": "iana"
  },
  "text/vnd.curl": {
    "source": "iana",
    "extensions": ["curl"]
  },
  "text/vnd.curl.dcurl": {
    "source": "apache",
    "extensions": ["dcurl"]
  },
  "text/vnd.curl.mcurl": {
    "source": "apache",
    "extensions": ["mcurl"]
  },
  "text/vnd.curl.scurl": {
    "source": "apache",
    "extensions": ["scurl"]
  },
  "text/vnd.debian.copyright": {
    "source": "iana"
  },
  "text/vnd.dmclientscript": {
    "source": "iana"
  },
  "text/vnd.dvb.subtitle": {
    "source": "iana",
    "extensions": ["sub"]
  },
  "text/vnd.esmertec.theme-descriptor": {
    "source": "iana"
  },
  "text/vnd.fly": {
    "source": "iana",
    "extensions": ["fly"]
  },
  "text/vnd.fmi.flexstor": {
    "source": "iana",
    "extensions": ["flx"]
  },
  "text/vnd.graphviz": {
    "source": "iana",
    "extensions": ["gv"]
  },
  "text/vnd.in3d.3dml": {
    "source": "iana",
    "extensions": ["3dml"]
  },
  "text/vnd.in3d.spot": {
    "source": "iana",
    "extensions": ["spot"]
  },
  "text/vnd.iptc.newsml": {
    "source": "iana"
  },
  "text/vnd.iptc.nitf": {
    "source": "iana"
  },
  "text/vnd.latex-z": {
    "source": "iana"
  },
  "text/vnd.motorola.reflex": {
    "source": "iana"
  },
  "text/vnd.ms-mediapackage": {
    "source": "iana"
  },
  "text/vnd.net2phone.commcenter.command": {
    "source": "iana"
  },
  "text/vnd.radisys.msml-basic-layout": {
    "source": "iana"
  },
  "text/vnd.si.uricatalogue": {
    "source": "iana"
  },
  "text/vnd.sun.j2me.app-descriptor": {
    "source": "iana",
    "extensions": ["jad"]
  },
  "text/vnd.trolltech.linguist": {
    "source": "iana"
  },
  "text/vnd.wap.si": {
    "source": "iana"
  },
  "text/vnd.wap.sl": {
    "source": "iana"
  },
  "text/vnd.wap.wml": {
    "source": "iana",
    "extensions": ["wml"]
  },
  "text/vnd.wap.wmlscript": {
    "source": "iana",
    "extensions": ["wmls"]
  },
  "text/vtt": {
    "charset": "UTF-8",
    "compressible": true,
    "extensions": ["vtt"]
  },
  "text/x-asm": {
    "source": "apache",
    "extensions": ["s", "asm"]
  },
  "text/x-c": {
    "source": "apache",
    "extensions": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
  },
  "text/x-component": {
    "source": "nginx",
    "extensions": ["htc"]
  },
  "text/x-fortran": {
    "source": "apache",
    "extensions": ["f", "for", "f77", "f90"]
  },
  "text/x-gwt-rpc": {
    "compressible": true
  },
  "text/x-handlebars-template": {
    "extensions": ["hbs"]
  },
  "text/x-java-source": {
    "source": "apache",
    "extensions": ["java"]
  },
  "text/x-jquery-tmpl": {
    "compressible": true
  },
  "text/x-lua": {
    "extensions": ["lua"]
  },
  "text/x-markdown": {
    "compressible": true,
    "extensions": ["markdown", "md", "mkd"]
  },
  "text/x-nfo": {
    "source": "apache",
    "extensions": ["nfo"]
  },
  "text/x-opml": {
    "source": "apache",
    "extensions": ["opml"]
  },
  "text/x-pascal": {
    "source": "apache",
    "extensions": ["p", "pas"]
  },
  "text/x-processing": {
    "compressible": true,
    "extensions": ["pde"]
  },
  "text/x-sass": {
    "extensions": ["sass"]
  },
  "text/x-scss": {
    "extensions": ["scss"]
  },
  "text/x-setext": {
    "source": "apache",
    "extensions": ["etx"]
  },
  "text/x-sfv": {
    "source": "apache",
    "extensions": ["sfv"]
  },
  "text/x-suse-ymp": {
    "compressible": true,
    "extensions": ["ymp"]
  },
  "text/x-uuencode": {
    "source": "apache",
    "extensions": ["uu"]
  },
  "text/x-vcalendar": {
    "source": "apache",
    "extensions": ["vcs"]
  },
  "text/x-vcard": {
    "source": "apache",
    "extensions": ["vcf"]
  },
  "text/xml": {
    "source": "iana",
    "compressible": true,
    "extensions": ["xml"]
  },
  "text/xml-external-parsed-entity": {
    "source": "iana"
  },
  "text/yaml": {
    "extensions": ["yaml", "yml"]
  },
  "video/1d-interleaved-parityfec": {
    "source": "apache"
  },
  "video/3gpp": {
    "source": "apache",
    "extensions": ["3gp", "3gpp"]
  },
  "video/3gpp-tt": {
    "source": "apache"
  },
  "video/3gpp2": {
    "source": "apache",
    "extensions": ["3g2"]
  },
  "video/bmpeg": {
    "source": "apache"
  },
  "video/bt656": {
    "source": "apache"
  },
  "video/celb": {
    "source": "apache"
  },
  "video/dv": {
    "source": "apache"
  },
  "video/h261": {
    "source": "apache",
    "extensions": ["h261"]
  },
  "video/h263": {
    "source": "apache",
    "extensions": ["h263"]
  },
  "video/h263-1998": {
    "source": "apache"
  },
  "video/h263-2000": {
    "source": "apache"
  },
  "video/h264": {
    "source": "apache",
    "extensions": ["h264"]
  },
  "video/h264-rcdo": {
    "source": "apache"
  },
  "video/h264-svc": {
    "source": "apache"
  },
  "video/jpeg": {
    "source": "apache",
    "extensions": ["jpgv"]
  },
  "video/jpeg2000": {
    "source": "apache"
  },
  "video/jpm": {
    "source": "apache",
    "extensions": ["jpm", "jpgm"]
  },
  "video/mj2": {
    "source": "apache",
    "extensions": ["mj2", "mjp2"]
  },
  "video/mp1s": {
    "source": "apache"
  },
  "video/mp2p": {
    "source": "apache"
  },
  "video/mp2t": {
    "source": "apache",
    "extensions": ["ts"]
  },
  "video/mp4": {
    "source": "apache",
    "compressible": false,
    "extensions": ["mp4", "mp4v", "mpg4"]
  },
  "video/mp4v-es": {
    "source": "apache"
  },
  "video/mpeg": {
    "source": "apache",
    "compressible": false,
    "extensions": ["mpeg", "mpg", "mpe", "m1v", "m2v"]
  },
  "video/mpeg4-generic": {
    "source": "apache"
  },
  "video/mpv": {
    "source": "apache"
  },
  "video/nv": {
    "source": "apache"
  },
  "video/ogg": {
    "source": "apache",
    "compressible": false,
    "extensions": ["ogv"]
  },
  "video/parityfec": {
    "source": "apache"
  },
  "video/pointer": {
    "source": "apache"
  },
  "video/quicktime": {
    "source": "apache",
    "compressible": false,
    "extensions": ["qt", "mov"]
  },
  "video/raw": {
    "source": "apache"
  },
  "video/rtp-enc-aescm128": {
    "source": "apache"
  },
  "video/rtx": {
    "source": "apache"
  },
  "video/smpte292m": {
    "source": "apache"
  },
  "video/ulpfec": {
    "source": "apache"
  },
  "video/vc1": {
    "source": "apache"
  },
  "video/vnd.cctv": {
    "source": "apache"
  },
  "video/vnd.dece.hd": {
    "source": "apache",
    "extensions": ["uvh", "uvvh"]
  },
  "video/vnd.dece.mobile": {
    "source": "apache",
    "extensions": ["uvm", "uvvm"]
  },
  "video/vnd.dece.mp4": {
    "source": "apache"
  },
  "video/vnd.dece.pd": {
    "source": "apache",
    "extensions": ["uvp", "uvvp"]
  },
  "video/vnd.dece.sd": {
    "source": "apache",
    "extensions": ["uvs", "uvvs"]
  },
  "video/vnd.dece.video": {
    "source": "apache",
    "extensions": ["uvv", "uvvv"]
  },
  "video/vnd.directv.mpeg": {
    "source": "apache"
  },
  "video/vnd.directv.mpeg-tts": {
    "source": "apache"
  },
  "video/vnd.dlna.mpeg-tts": {
    "source": "apache"
  },
  "video/vnd.dvb.file": {
    "source": "apache",
    "extensions": ["dvb"]
  },
  "video/vnd.fvt": {
    "source": "apache",
    "extensions": ["fvt"]
  },
  "video/vnd.hns.video": {
    "source": "apache"
  },
  "video/vnd.iptvforum.1dparityfec-1010": {
    "source": "apache"
  },
  "video/vnd.iptvforum.1dparityfec-2005": {
    "source": "apache"
  },
  "video/vnd.iptvforum.2dparityfec-1010": {
    "source": "apache"
  },
  "video/vnd.iptvforum.2dparityfec-2005": {
    "source": "apache"
  },
  "video/vnd.iptvforum.ttsavc": {
    "source": "apache"
  },
  "video/vnd.iptvforum.ttsmpeg2": {
    "source": "apache"
  },
  "video/vnd.motorola.video": {
    "source": "apache"
  },
  "video/vnd.motorola.videop": {
    "source": "apache"
  },
  "video/vnd.mpegurl": {
    "source": "apache",
    "extensions": ["mxu", "m4u"]
  },
  "video/vnd.ms-playready.media.pyv": {
    "source": "apache",
    "extensions": ["pyv"]
  },
  "video/vnd.nokia.interleaved-multimedia": {
    "source": "apache"
  },
  "video/vnd.nokia.videovoip": {
    "source": "apache"
  },
  "video/vnd.objectvideo": {
    "source": "apache"
  },
  "video/vnd.sealed.mpeg1": {
    "source": "apache"
  },
  "video/vnd.sealed.mpeg4": {
    "source": "apache"
  },
  "video/vnd.sealed.swf": {
    "source": "apache"
  },
  "video/vnd.sealedmedia.softseal.mov": {
    "source": "apache"
  },
  "video/vnd.uvvu.mp4": {
    "source": "apache",
    "extensions": ["uvu", "uvvu"]
  },
  "video/vnd.vivo": {
    "source": "apache",
    "extensions": ["viv"]
  },
  "video/webm": {
    "source": "apache",
    "compressible": false,
    "extensions": ["webm"]
  },
  "video/x-f4v": {
    "source": "apache",
    "extensions": ["f4v"]
  },
  "video/x-fli": {
    "source": "apache",
    "extensions": ["fli"]
  },
  "video/x-flv": {
    "source": "apache",
    "compressible": false,
    "extensions": ["flv"]
  },
  "video/x-m4v": {
    "source": "apache",
    "extensions": ["m4v"]
  },
  "video/x-matroska": {
    "source": "apache",
    "compressible": false,
    "extensions": ["mkv", "mk3d", "mks"]
  },
  "video/x-mng": {
    "source": "apache",
    "extensions": ["mng"]
  },
  "video/x-ms-asf": {
    "source": "apache",
    "extensions": ["asf", "asx"]
  },
  "video/x-ms-vob": {
    "source": "apache",
    "extensions": ["vob"]
  },
  "video/x-ms-wm": {
    "source": "apache",
    "extensions": ["wm"]
  },
  "video/x-ms-wmv": {
    "source": "apache",
    "compressible": false,
    "extensions": ["wmv"]
  },
  "video/x-ms-wmx": {
    "source": "apache",
    "extensions": ["wmx"]
  },
  "video/x-ms-wvx": {
    "source": "apache",
    "extensions": ["wvx"]
  },
  "video/x-msvideo": {
    "source": "apache",
    "extensions": ["avi"]
  },
  "video/x-sgi-movie": {
    "source": "apache",
    "extensions": ["movie"]
  },
  "video/x-smv": {
    "source": "apache",
    "extensions": ["smv"]
  },
  "x-conference/x-cooltalk": {
    "source": "apache",
    "extensions": ["ice"]
  },
  "x-shader/x-fragment": {
    "compressible": true
  },
  "x-shader/x-vertex": {
    "compressible": true
  }
};

},{}],134:[function(require,module,exports){
"use strict";

module["exports"] = ["ants", "bats", "bears", "bees", "birds", "buffalo", "cats", "chickens", "cattle", "dogs", "dolphins", "ducks", "elephants", "fishes", "foxes", "frogs", "geese", "goats", "horses", "kangaroos", "lions", "monkeys", "owls", "oxen", "penguins", "people", "pigs", "rabbits", "sheep", "tigers", "whales", "wolves", "zebras", "banshees", "crows", "black cats", "chimeras", "ghosts", "conspirators", "dragons", "dwarves", "elves", "enchanters", "exorcists", "sons", "foes", "giants", "gnomes", "goblins", "gooses", "griffins", "lycanthropes", "nemesis", "ogres", "oracles", "prophets", "sorcerors", "spiders", "spirits", "vampires", "warlocks", "vixens", "werewolves", "witches", "worshipers", "zombies", "druids"];

},{}],135:[function(require,module,exports){
"use strict";

var team = {};
module['exports'] = team;
team.creature = require("./creature");
team.name = require("./name");

},{"./creature":134,"./name":136}],136:[function(require,module,exports){
"use strict";

module["exports"] = ["#{Address.state} #{creature}"];

},{}],137:[function(require,module,exports){
"use strict";

module["exports"] = ["United States", "United States of America", "USA"];

},{}],138:[function(require,module,exports){
"use strict";

var address = {};
module['exports'] = address;
address.default_country = require("./default_country");
address.postcode_by_state = require("./postcode_by_state");

},{"./default_country":137,"./postcode_by_state":139}],139:[function(require,module,exports){
"use strict";

module["exports"] = {
  "AL": "350##",
  "AK": "995##",
  "AS": "967##",
  "AZ": "850##",
  "AR": "717##",
  "CA": "900##",
  "CO": "800##",
  "CT": "061##",
  "DC": "204##",
  "DE": "198##",
  "FL": "322##",
  "GA": "301##",
  "HI": "967##",
  "ID": "832##",
  "IL": "600##",
  "IN": "463##",
  "IA": "510##",
  "KS": "666##",
  "KY": "404##",
  "LA": "701##",
  "ME": "042##",
  "MD": "210##",
  "MA": "026##",
  "MI": "480##",
  "MN": "555##",
  "MS": "387##",
  "MO": "650##",
  "MT": "590##",
  "NE": "688##",
  "NV": "898##",
  "NH": "036##",
  "NJ": "076##",
  "NM": "880##",
  "NY": "122##",
  "NC": "288##",
  "ND": "586##",
  "OH": "444##",
  "OK": "730##",
  "OR": "979##",
  "PA": "186##",
  "RI": "029##",
  "SC": "299##",
  "SD": "577##",
  "TN": "383##",
  "TX": "798##",
  "UT": "847##",
  "VT": "050##",
  "VA": "222##",
  "WA": "990##",
  "WV": "247##",
  "WI": "549##",
  "WY": "831##"
};

},{}],140:[function(require,module,exports){
"use strict";

var en_US = {};
module['exports'] = en_US;
en_US.title = "United States (English)";
en_US.internet = require("./internet");
en_US.address = require("./address");
en_US.phone_number = require("./phone_number");

},{"./address":138,"./internet":142,"./phone_number":145}],141:[function(require,module,exports){
"use strict";

module["exports"] = ["com", "us", "biz", "info", "name", "net", "org"];

},{}],142:[function(require,module,exports){
"use strict";

var internet = {};
module['exports'] = internet;
internet.domain_suffix = require("./domain_suffix");

},{"./domain_suffix":141}],143:[function(require,module,exports){
"use strict";

module["exports"] = ["201", "202", "203", "205", "206", "207", "208", "209", "210", "212", "213", "214", "215", "216", "217", "218", "219", "224", "225", "227", "228", "229", "231", "234", "239", "240", "248", "251", "252", "253", "254", "256", "260", "262", "267", "269", "270", "276", "281", "283", "301", "302", "303", "304", "305", "307", "308", "309", "310", "312", "313", "314", "315", "316", "317", "318", "319", "320", "321", "323", "330", "331", "334", "336", "337", "339", "347", "351", "352", "360", "361", "386", "401", "402", "404", "405", "406", "407", "408", "409", "410", "412", "413", "414", "415", "417", "419", "423", "424", "425", "434", "435", "440", "443", "445", "464", "469", "470", "475", "478", "479", "480", "484", "501", "502", "503", "504", "505", "507", "508", "509", "510", "512", "513", "515", "516", "517", "518", "520", "530", "540", "541", "551", "557", "559", "561", "562", "563", "564", "567", "570", "571", "573", "574", "580", "585", "586", "601", "602", "603", "605", "606", "607", "608", "609", "610", "612", "614", "615", "616", "617", "618", "619", "620", "623", "626", "630", "631", "636", "641", "646", "650", "651", "660", "661", "662", "667", "678", "682", "701", "702", "703", "704", "706", "707", "708", "712", "713", "714", "715", "716", "717", "718", "719", "720", "724", "727", "731", "732", "734", "737", "740", "754", "757", "760", "763", "765", "770", "772", "773", "774", "775", "781", "785", "786", "801", "802", "803", "804", "805", "806", "808", "810", "812", "813", "814", "815", "816", "817", "818", "828", "830", "831", "832", "835", "843", "845", "847", "848", "850", "856", "857", "858", "859", "860", "862", "863", "864", "865", "870", "872", "878", "901", "903", "904", "906", "907", "908", "909", "910", "912", "913", "914", "915", "916", "917", "918", "919", "920", "925", "928", "931", "936", "937", "940", "941", "947", "949", "952", "954", "956", "959", "970", "971", "972", "973", "975", "978", "979", "980", "984", "985", "989"];

},{}],144:[function(require,module,exports){
"use strict";

module["exports"] = ["201", "202", "203", "205", "206", "207", "208", "209", "210", "212", "213", "214", "215", "216", "217", "218", "219", "224", "225", "227", "228", "229", "231", "234", "239", "240", "248", "251", "252", "253", "254", "256", "260", "262", "267", "269", "270", "276", "281", "283", "301", "302", "303", "304", "305", "307", "308", "309", "310", "312", "313", "314", "315", "316", "317", "318", "319", "320", "321", "323", "330", "331", "334", "336", "337", "339", "347", "351", "352", "360", "361", "386", "401", "402", "404", "405", "406", "407", "408", "409", "410", "412", "413", "414", "415", "417", "419", "423", "424", "425", "434", "435", "440", "443", "445", "464", "469", "470", "475", "478", "479", "480", "484", "501", "502", "503", "504", "505", "507", "508", "509", "510", "512", "513", "515", "516", "517", "518", "520", "530", "540", "541", "551", "557", "559", "561", "562", "563", "564", "567", "570", "571", "573", "574", "580", "585", "586", "601", "602", "603", "605", "606", "607", "608", "609", "610", "612", "614", "615", "616", "617", "618", "619", "620", "623", "626", "630", "631", "636", "641", "646", "650", "651", "660", "661", "662", "667", "678", "682", "701", "702", "703", "704", "706", "707", "708", "712", "713", "714", "715", "716", "717", "718", "719", "720", "724", "727", "731", "732", "734", "737", "740", "754", "757", "760", "763", "765", "770", "772", "773", "774", "775", "781", "785", "786", "801", "802", "803", "804", "805", "806", "808", "810", "812", "813", "814", "815", "816", "817", "818", "828", "830", "831", "832", "835", "843", "845", "847", "848", "850", "856", "857", "858", "859", "860", "862", "863", "864", "865", "870", "872", "878", "901", "903", "904", "906", "907", "908", "909", "910", "912", "913", "914", "915", "916", "917", "918", "919", "920", "925", "928", "931", "936", "937", "940", "941", "947", "949", "952", "954", "956", "959", "970", "971", "972", "973", "975", "978", "979", "980", "984", "985", "989"];

},{}],145:[function(require,module,exports){
"use strict";

var phone_number = {};
module['exports'] = phone_number;
phone_number.area_code = require("./area_code");
phone_number.exchange_code = require("./exchange_code");

},{"./area_code":143,"./exchange_code":144}],146:[function(require,module,exports){
'use strict';

/**
 *
 * @namespace faker.lorem
 */
var Lorem = function Lorem(faker) {
  var self = this;
  var Helpers = faker.helpers;

  /**
   * word
   *
   * @method faker.lorem.word
   * @param {number} num
   */
  self.word = function (num) {
    return faker.random.arrayElement(faker.definitions.lorem.words);
  };

  /**
   * generates a space separated list of words
   *
   * @method faker.lorem.words
   * @param {number} num number of words, defaults to 3
   */
  self.words = function (num) {
    if (typeof num == 'undefined') {
      num = 3;
    }
    var words = [];
    for (var i = 0; i < num; i++) {
      words.push(faker.lorem.word());
    }
    return words.join(' ');
  };

  /**
   * sentence
   *
   * @method faker.lorem.sentence
   * @param {number} wordCount defaults to a random number between 3 and 10
   * @param {number} range
   */
  self.sentence = function (wordCount, range) {
    if (typeof wordCount == 'undefined') {
      wordCount = faker.random.number({ min: 3, max: 10 });
    }
    // if (typeof range == 'undefined') { range = 7; }

    // strange issue with the node_min_test failing for captialize, please fix and add faker.lorem.back
    //return  faker.lorem.words(wordCount + Helpers.randomNumber(range)).join(' ').capitalize();

    var sentence = faker.lorem.words(wordCount);
    return sentence.charAt(0).toUpperCase() + sentence.slice(1) + '.';
  };

  /**
   * slug
   *
   * @method faker.lorem.slug
   * @param {number} wordCount number of words, defaults to 3
   */
  self.slug = function (wordCount) {
    var words = faker.lorem.words(wordCount);
    return Helpers.slugify(words);
  };

  /**
   * sentences
   *
   * @method faker.lorem.sentences
   * @param {number} sentenceCount defautls to a random number between 2 and 6
   * @param {string} separator defaults to `' '`
   */
  self.sentences = function (sentenceCount, separator) {
    if (typeof sentenceCount === 'undefined') {
      sentenceCount = faker.random.number({ min: 2, max: 6 });
    }
    if (typeof separator == 'undefined') {
      separator = " ";
    }
    var sentences = [];
    for (sentenceCount; sentenceCount > 0; sentenceCount--) {
      sentences.push(faker.lorem.sentence());
    }
    return sentences.join(separator);
  };

  /**
   * paragraph
   *
   * @method faker.lorem.paragraph
   * @param {number} sentenceCount defaults to 3
   */
  self.paragraph = function (sentenceCount) {
    if (typeof sentenceCount == 'undefined') {
      sentenceCount = 3;
    }
    return faker.lorem.sentences(sentenceCount + faker.random.number(3));
  };

  /**
   * paragraphs
   *
   * @method faker.lorem.paragraphs
   * @param {number} paragraphCount defaults to 3
   * @param {string} separator defaults to `'\n \r'`
   */
  self.paragraphs = function (paragraphCount, separator) {
    if (typeof separator === "undefined") {
      separator = "\n \r";
    }
    if (typeof paragraphCount == 'undefined') {
      paragraphCount = 3;
    }
    var paragraphs = [];
    for (paragraphCount; paragraphCount > 0; paragraphCount--) {
      paragraphs.push(faker.lorem.paragraph());
    }
    return paragraphs.join(separator);
  };

  /**
   * returns random text based on a random lorem method
   *
   * @method faker.lorem.text
   * @param {number} times
   */
  self.text = function loremText(times) {
    var loremMethods = ['lorem.word', 'lorem.words', 'lorem.sentence', 'lorem.sentences', 'lorem.paragraph', 'lorem.paragraphs', 'lorem.lines'];
    var randomLoremMethod = faker.random.arrayElement(loremMethods);
    return faker.fake('{{' + randomLoremMethod + '}}');
  };

  /**
   * returns lines of lorem separated by `'\n'`
   *
   * @method faker.lorem.lines
   * @param {number} lineCount defaults to a random number between 1 and 5
   */
  self.lines = function lines(lineCount) {
    if (typeof lineCount === 'undefined') {
      lineCount = faker.random.number({ min: 1, max: 5 });
    }
    return faker.lorem.sentences(lineCount, '\n');
  };

  return self;
};

module["exports"] = Lorem;

},{}],147:[function(require,module,exports){
"use strict";

/**
 *
 * @namespace faker.name
 */
function Name(faker) {

  /**
   * firstName
   *
   * @method firstName
   * @param {mixed} gender
   * @memberof faker.name
   */
  this.firstName = function (gender) {
    if (typeof faker.definitions.name.male_first_name !== "undefined" && typeof faker.definitions.name.female_first_name !== "undefined") {
      // some locale datasets ( like ru ) have first_name split by gender. since the name.first_name field does not exist in these datasets,
      // we must randomly pick a name from either gender array so faker.name.firstName will return the correct locale data ( and not fallback )
      if (typeof gender !== 'number') {
        gender = faker.random.number(1);
      }
      if (gender === 0) {
        return faker.random.arrayElement(faker.locales[faker.locale].name.male_first_name);
      } else {
        return faker.random.arrayElement(faker.locales[faker.locale].name.female_first_name);
      }
    }
    return faker.random.arrayElement(faker.definitions.name.first_name);
  };

  /**
   * lastName
   *
   * @method lastName
   * @param {mixed} gender
   * @memberof faker.name
   */
  this.lastName = function (gender) {
    if (typeof faker.definitions.name.male_last_name !== "undefined" && typeof faker.definitions.name.female_last_name !== "undefined") {
      // some locale datasets ( like ru ) have last_name split by gender. i have no idea how last names can have genders, but also i do not speak russian
      // see above comment of firstName method
      if (typeof gender !== 'number') {
        gender = faker.random.number(1);
      }
      if (gender === 0) {
        return faker.random.arrayElement(faker.locales[faker.locale].name.male_last_name);
      } else {
        return faker.random.arrayElement(faker.locales[faker.locale].name.female_last_name);
      }
    }
    return faker.random.arrayElement(faker.definitions.name.last_name);
  };

  /**
   * findName
   *
   * @method findName
   * @param {string} firstName
   * @param {string} lastName
   * @param {mixed} gender
   * @memberof faker.name
   */
  this.findName = function (firstName, lastName, gender) {
    var r = faker.random.number(8);
    var prefix, suffix;
    // in particular locales first and last names split by gender,
    // thus we keep consistency by passing 0 as male and 1 as female
    if (typeof gender !== 'number') {
      gender = faker.random.number(1);
    }
    firstName = firstName || faker.name.firstName(gender);
    lastName = lastName || faker.name.lastName(gender);
    switch (r) {
      case 0:
        prefix = faker.name.prefix(gender);
        if (prefix) {
          return prefix + " " + firstName + " " + lastName;
        }
      case 1:
        suffix = faker.name.suffix(gender);
        if (suffix) {
          return firstName + " " + lastName + " " + suffix;
        }
    }

    return firstName + " " + lastName;
  };

  /**
   * jobTitle
   *
   * @method jobTitle
   * @memberof faker.name
   */
  this.jobTitle = function () {
    return faker.name.jobDescriptor() + " " + faker.name.jobArea() + " " + faker.name.jobType();
  };

  /**
   * prefix
   *
   * @method prefix
   * @param {mixed} gender
   * @memberof faker.name
   */
  this.prefix = function (gender) {
    if (typeof faker.definitions.name.male_prefix !== "undefined" && typeof faker.definitions.name.female_prefix !== "undefined") {
      if (typeof gender !== 'number') {
        gender = faker.random.number(1);
      }
      if (gender === 0) {
        return faker.random.arrayElement(faker.locales[faker.locale].name.male_prefix);
      } else {
        return faker.random.arrayElement(faker.locales[faker.locale].name.female_prefix);
      }
    }
    return faker.random.arrayElement(faker.definitions.name.prefix);
  };

  /**
   * suffix
   *
   * @method suffix
   * @memberof faker.name
   */
  this.suffix = function () {
    return faker.random.arrayElement(faker.definitions.name.suffix);
  };

  /**
   * title
   *
   * @method title
   * @memberof faker.name
   */
  this.title = function () {
    var descriptor = faker.random.arrayElement(faker.definitions.name.title.descriptor),
        level = faker.random.arrayElement(faker.definitions.name.title.level),
        job = faker.random.arrayElement(faker.definitions.name.title.job);

    return descriptor + " " + level + " " + job;
  };

  /**
   * jobDescriptor
   *
   * @method jobDescriptor
   * @memberof faker.name
   */
  this.jobDescriptor = function () {
    return faker.random.arrayElement(faker.definitions.name.title.descriptor);
  };

  /**
   * jobArea
   *
   * @method jobArea
   * @memberof faker.name
   */
  this.jobArea = function () {
    return faker.random.arrayElement(faker.definitions.name.title.level);
  };

  /**
   * jobType
   *
   * @method jobType
   * @memberof faker.name
   */
  this.jobType = function () {
    return faker.random.arrayElement(faker.definitions.name.title.job);
  };
}

module['exports'] = Name;

},{}],148:[function(require,module,exports){
'use strict';

/**
 *
 * @namespace faker.phone
 */
var Phone = function Phone(faker) {
  var self = this;

  /**
   * phoneNumber
   *
   * @method faker.phone.phoneNumber
   * @param {string} format
   */
  self.phoneNumber = function (format) {
    format = format || faker.phone.phoneFormats();
    return faker.helpers.replaceSymbolWithNumber(format);
  };

  // FIXME: this is strange passing in an array index.
  /**
   * phoneNumberFormat
   *
   * @method faker.phone.phoneFormatsArrayIndex
   * @param phoneFormatsArrayIndex
   */
  self.phoneNumberFormat = function (phoneFormatsArrayIndex) {
    phoneFormatsArrayIndex = phoneFormatsArrayIndex || 0;
    return faker.helpers.replaceSymbolWithNumber(faker.definitions.phone_number.formats[phoneFormatsArrayIndex]);
  };

  /**
   * phoneFormats
   *
   * @method faker.phone.phoneFormats
   */
  self.phoneFormats = function () {
    return faker.random.arrayElement(faker.definitions.phone_number.formats);
  };

  return self;
};

module['exports'] = Phone;

},{}],149:[function(require,module,exports){
"use strict";

var mersenne = require('../vendor/mersenne');

/**
 *
 * @namespace faker.random
 */
function Random(faker, seed) {
  // Use a user provided seed if it exists
  if (seed) {
    if (Array.isArray(seed) && seed.length) {
      mersenne.seed_array(seed);
    } else {
      mersenne.seed(seed);
    }
  }
  /**
   * returns a single random number based on a max number or range
   *
   * @method faker.random.number
   * @param {mixed} options
   */
  this.number = function (options) {

    if (typeof options === "number") {
      options = {
        max: options
      };
    }

    options = options || {};

    if (typeof options.min === "undefined") {
      options.min = 0;
    }

    if (typeof options.max === "undefined") {
      options.max = 99999;
    }
    if (typeof options.precision === "undefined") {
      options.precision = 1;
    }

    // Make the range inclusive of the max value
    var max = options.max;
    if (max >= 0) {
      max += options.precision;
    }

    var randomNumber = options.precision * Math.floor(mersenne.rand(max / options.precision, options.min / options.precision));

    return randomNumber;
  };

  /**
   * takes an array and returns a random element of the array
   *
   * @method faker.random.arrayElement
   * @param {array} array
   */
  this.arrayElement = function (array) {
    array = array || ["a", "b", "c"];
    var r = faker.random.number({ max: array.length - 1 });
    return array[r];
  };

  /**
   * takes an object and returns the randomly key or value
   *
   * @method faker.random.objectElement
   * @param {object} object
   * @param {mixed} field
   */
  this.objectElement = function (object, field) {
    object = object || { "foo": "bar", "too": "car" };
    var array = Object.keys(object);
    var key = faker.random.arrayElement(array);

    return field === "key" ? key : object[key];
  };

  /**
   * uuid
   *
   * @method faker.random.uuid
   */
  this.uuid = function () {
    var self = this;
    var RFC4122_TEMPLATE = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
    var replacePlaceholders = function replacePlaceholders(placeholder) {
      var random = self.number({ min: 0, max: 15 });
      var value = placeholder == 'x' ? random : random & 0x3 | 0x8;
      return value.toString(16);
    };
    return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders);
  };

  /**
   * boolean
   *
   * @method faker.random.boolean
   */
  this.boolean = function () {
    return !!faker.random.number(1);
  };

  // TODO: have ability to return specific type of word? As in: noun, adjective, verb, etc
  /**
   * word
   *
   * @method faker.random.word
   * @param {string} type
   */
  this.word = function randomWord(type) {

    var wordMethods = ['commerce.department', 'commerce.productName', 'commerce.productAdjective', 'commerce.productMaterial', 'commerce.product', 'commerce.color', 'company.catchPhraseAdjective', 'company.catchPhraseDescriptor', 'company.catchPhraseNoun', 'company.bsAdjective', 'company.bsBuzz', 'company.bsNoun', 'address.streetSuffix', 'address.county', 'address.country', 'address.state', 'finance.accountName', 'finance.transactionType', 'finance.currencyName', 'hacker.noun', 'hacker.verb', 'hacker.adjective', 'hacker.ingverb', 'hacker.abbreviation', 'name.jobDescriptor', 'name.jobArea', 'name.jobType'];

    // randomly pick from the many faker methods that can generate words
    var randomWordMethod = faker.random.arrayElement(wordMethods);
    return faker.fake('{{' + randomWordMethod + '}}');
  };

  /**
   * randomWords
   *
   * @method faker.random.words
   * @param {number} count defaults to a random value between 1 and 3
   */
  this.words = function randomWords(count) {
    var words = [];
    if (typeof count === "undefined") {
      count = faker.random.number({ min: 1, max: 3 });
    }
    for (var i = 0; i < count; i++) {
      words.push(faker.random.word());
    }
    return words.join(' ');
  };

  /**
   * locale
   *
   * @method faker.random.image
   */
  this.image = function randomImage() {
    return faker.image.image();
  };

  /**
   * locale
   *
   * @method faker.random.locale
   */
  this.locale = function randomLocale() {
    return faker.random.arrayElement(Object.keys(faker.locales));
  };

  /**
   * alphaNumeric
   *
   * @method faker.random.alphaNumeric
   * @param {number} count defaults to 1
   */
  this.alphaNumeric = function alphaNumeric(count) {
    if (typeof count === "undefined") {
      count = 1;
    }

    var wholeString = "";
    for (var i = 0; i < count; i++) {
      wholeString += faker.random.arrayElement(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]);
    }

    return wholeString;
  };

  return this;
}

module['exports'] = Random;

},{"../vendor/mersenne":152}],150:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// generates fake data for many computer systems properties

/**
 *
 * @namespace faker.system
 */
function System(faker) {

  /**
   * generates a file name with extension or optional type
   *
   * @method faker.system.fileName
   * @param {string} ext
   * @param {string} type
   */
  this.fileName = function (ext, type) {
    var str = faker.fake("{{random.words}}.{{system.fileExt}}");
    str = str.replace(/ /g, '_');
    str = str.replace(/\,/g, '_');
    str = str.replace(/\-/g, '_');
    str = str.replace(/\\/g, '_');
    str = str.replace(/\//g, '_');
    str = str.toLowerCase();
    return str;
  };

  /**
   * commonFileName
   *
   * @method faker.system.commonFileName
   * @param {string} ext
   * @param {string} type
   */
  this.commonFileName = function (ext, type) {
    var str = faker.random.words() + "." + (ext || faker.system.commonFileExt());
    str = str.replace(/ /g, '_');
    str = str.replace(/\,/g, '_');
    str = str.replace(/\-/g, '_');
    str = str.replace(/\\/g, '_');
    str = str.replace(/\//g, '_');
    str = str.toLowerCase();
    return str;
  };

  /**
   * mimeType
   *
   * @method faker.system.mimeType
   */
  this.mimeType = function () {
    return faker.random.arrayElement(Object.keys(faker.definitions.system.mimeTypes));
  };

  /**
   * returns a commonly used file type
   *
   * @method faker.system.commonFileType
   */
  this.commonFileType = function () {
    var types = ['video', 'audio', 'image', 'text', 'application'];
    return faker.random.arrayElement(types);
  };

  /**
   * returns a commonly used file extension based on optional type
   *
   * @method faker.system.commonFileExt
   * @param {string} type
   */
  this.commonFileExt = function (type) {
    var types = ['application/pdf', 'audio/mpeg', 'audio/wav', 'image/png', 'image/jpeg', 'image/gif', 'video/mp4', 'video/mpeg', 'text/html'];
    return faker.system.fileExt(faker.random.arrayElement(types));
  };

  /**
   * returns any file type available as mime-type
   *
   * @method faker.system.fileType
   */
  this.fileType = function () {
    var types = [];
    var mimes = faker.definitions.system.mimeTypes;
    Object.keys(mimes).forEach(function (m) {
      var parts = m.split('/');
      if (types.indexOf(parts[0]) === -1) {
        types.push(parts[0]);
      }
    });
    return faker.random.arrayElement(types);
  };

  /**
   * fileExt
   *
   * @method faker.system.fileExt
   * @param {string} mimeType
   */
  this.fileExt = function (mimeType) {
    var exts = [];
    var mimes = faker.definitions.system.mimeTypes;

    // get specific ext by mime-type
    if (_typeof(mimes[mimeType]) === "object") {
      return faker.random.arrayElement(mimes[mimeType].extensions);
    }

    // reduce mime-types to those with file-extensions
    Object.keys(mimes).forEach(function (m) {
      if (mimes[m].extensions instanceof Array) {
        mimes[m].extensions.forEach(function (ext) {
          exts.push(ext);
        });
      }
    });
    return faker.random.arrayElement(exts);
  };

  /**
   * not yet implemented
   *
   * @method faker.system.directoryPath
   */
  this.directoryPath = function () {
    // TODO
  };

  /**
   * not yet implemented
   *
   * @method faker.system.filePath
   */
  this.filePath = function () {
    // TODO
  };

  /**
   * semver
   *
   * @method faker.system.semver
   */
  this.semver = function () {
    return [faker.random.number(9), faker.random.number(9), faker.random.number(9)].join('.');
  };
}

module['exports'] = System;

},{}],151:[function(require,module,exports){
'use strict';

var Faker = require('../lib');
var faker = new Faker({ locale: 'en_US', localeFallback: 'en' });
faker.locales['en_US'] = require('../lib/locales/en_US');
faker.locales['en'] = require('../lib/locales/en');
module['exports'] = faker;

},{"../lib":42,"../lib/locales/en":114,"../lib/locales/en_US":140}],152:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// this program is a JavaScript version of Mersenne Twister, with concealment and encapsulation in class,
// an almost straight conversion from the original program, mt19937ar.c,
// translated by y. okada on July 17, 2006.
// and modified a little at july 20, 2006, but there are not any substantial differences.
// in this program, procedure descriptions and comments of original source code were not removed.
// lines commented with //c// were originally descriptions of c procedure. and a few following lines are appropriate JavaScript descriptions.
// lines commented with /* and */ are original comments.
// lines commented with // are additional comments in this JavaScript version.
// before using this version, create at least one instance of MersenneTwister19937 class, and initialize the each state, given below in c comments, of all the instances.
/*
   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.

   Before using, initialize the state by using init_genrand(seed)
   or init_by_array(init_key, key_length).

   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
*/

function MersenneTwister19937() {
	/* constants should be scoped inside the class */
	var N, M, MATRIX_A, UPPER_MASK, LOWER_MASK;
	/* Period parameters */
	//c//#define N 624
	//c//#define M 397
	//c//#define MATRIX_A 0x9908b0dfUL   /* constant vector a */
	//c//#define UPPER_MASK 0x80000000UL /* most significant w-r bits */
	//c//#define LOWER_MASK 0x7fffffffUL /* least significant r bits */
	N = 624;
	M = 397;
	MATRIX_A = 0x9908b0df; /* constant vector a */
	UPPER_MASK = 0x80000000; /* most significant w-r bits */
	LOWER_MASK = 0x7fffffff; /* least significant r bits */
	//c//static unsigned long mt[N]; /* the array for the state vector  */
	//c//static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
	var mt = new Array(N); /* the array for the state vector  */
	var mti = N + 1; /* mti==N+1 means mt[N] is not initialized */

	function unsigned32(n1) // returns a 32-bits unsiged integer from an operand to which applied a bit operator.
	{
		return n1 < 0 ? (n1 ^ UPPER_MASK) + UPPER_MASK : n1;
	}

	function subtraction32(n1, n2) // emulates lowerflow of a c 32-bits unsiged integer variable, instead of the operator -. these both arguments must be non-negative integers expressible using unsigned 32 bits.
	{
		return n1 < n2 ? unsigned32(0x100000000 - (n2 - n1) & 0xffffffff) : n1 - n2;
	}

	function addition32(n1, n2) // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator +. these both arguments must be non-negative integers expressible using unsigned 32 bits.
	{
		return unsigned32(n1 + n2 & 0xffffffff);
	}

	function multiplication32(n1, n2) // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator *. these both arguments must be non-negative integers expressible using unsigned 32 bits.
	{
		var sum = 0;
		for (var i = 0; i < 32; ++i) {
			if (n1 >>> i & 0x1) {
				sum = addition32(sum, unsigned32(n2 << i));
			}
		}
		return sum;
	}

	/* initializes mt[N] with a seed */
	//c//void init_genrand(unsigned long s)
	this.init_genrand = function (s) {
		//c//mt[0]= s & 0xffffffff;
		mt[0] = unsigned32(s & 0xffffffff);
		for (mti = 1; mti < N; mti++) {
			mt[mti] =
			//c//(1812433253 * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti);
			addition32(multiplication32(1812433253, unsigned32(mt[mti - 1] ^ mt[mti - 1] >>> 30)), mti);
			/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
			/* In the previous versions, MSBs of the seed affect   */
			/* only MSBs of the array mt[].                        */
			/* 2002/01/09 modified by Makoto Matsumoto             */
			//c//mt[mti] &= 0xffffffff;
			mt[mti] = unsigned32(mt[mti] & 0xffffffff);
			/* for >32 bit machines */
		}
	};

	/* initialize by an array with array-length */
	/* init_key is the array for initializing keys */
	/* key_length is its length */
	/* slight change for C++, 2004/2/26 */
	//c//void init_by_array(unsigned long init_key[], int key_length)
	this.init_by_array = function (init_key, key_length) {
		//c//int i, j, k;
		var i, j, k;
		//c//init_genrand(19650218);
		this.init_genrand(19650218);
		i = 1;j = 0;
		k = N > key_length ? N : key_length;
		for (; k; k--) {
			//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525))
			//c//	+ init_key[j] + j; /* non linear */
			mt[i] = addition32(addition32(unsigned32(mt[i] ^ multiplication32(unsigned32(mt[i - 1] ^ mt[i - 1] >>> 30), 1664525)), init_key[j]), j);
			mt[i] =
			//c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
			unsigned32(mt[i] & 0xffffffff);
			i++;j++;
			if (i >= N) {
				mt[0] = mt[N - 1];i = 1;
			}
			if (j >= key_length) j = 0;
		}
		for (k = N - 1; k; k--) {
			//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1566083941))
			//c//- i; /* non linear */
			mt[i] = subtraction32(unsigned32((dbg = mt[i]) ^ multiplication32(unsigned32(mt[i - 1] ^ mt[i - 1] >>> 30), 1566083941)), i);
			//c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
			mt[i] = unsigned32(mt[i] & 0xffffffff);
			i++;
			if (i >= N) {
				mt[0] = mt[N - 1];i = 1;
			}
		}
		mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
	};

	/* moved outside of genrand_int32() by jwatte 2010-11-17; generate less garbage */
	var mag01 = [0x0, MATRIX_A];

	/* generates a random number on [0,0xffffffff]-interval */
	//c//unsigned long genrand_int32(void)
	this.genrand_int32 = function () {
		//c//unsigned long y;
		//c//static unsigned long mag01[2]={0x0UL, MATRIX_A};
		var y;
		/* mag01[x] = x * MATRIX_A  for x=0,1 */

		if (mti >= N) {
			/* generate N words at one time */
			//c//int kk;
			var kk;

			if (mti == N + 1) /* if init_genrand() has not been called, */
				//c//init_genrand(5489); /* a default initial seed is used */
				this.init_genrand(5489); /* a default initial seed is used */

			for (kk = 0; kk < N - M; kk++) {
				//c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
				//c//mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
				y = unsigned32(mt[kk] & UPPER_MASK | mt[kk + 1] & LOWER_MASK);
				mt[kk] = unsigned32(mt[kk + M] ^ y >>> 1 ^ mag01[y & 0x1]);
			}
			for (; kk < N - 1; kk++) {
				//c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
				//c//mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
				y = unsigned32(mt[kk] & UPPER_MASK | mt[kk + 1] & LOWER_MASK);
				mt[kk] = unsigned32(mt[kk + (M - N)] ^ y >>> 1 ^ mag01[y & 0x1]);
			}
			//c//y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
			//c//mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
			y = unsigned32(mt[N - 1] & UPPER_MASK | mt[0] & LOWER_MASK);
			mt[N - 1] = unsigned32(mt[M - 1] ^ y >>> 1 ^ mag01[y & 0x1]);
			mti = 0;
		}

		y = mt[mti++];

		/* Tempering */
		//c//y ^= (y >> 11);
		//c//y ^= (y << 7) & 0x9d2c5680;
		//c//y ^= (y << 15) & 0xefc60000;
		//c//y ^= (y >> 18);
		y = unsigned32(y ^ y >>> 11);
		y = unsigned32(y ^ y << 7 & 0x9d2c5680);
		y = unsigned32(y ^ y << 15 & 0xefc60000);
		y = unsigned32(y ^ y >>> 18);

		return y;
	};

	/* generates a random number on [0,0x7fffffff]-interval */
	//c//long genrand_int31(void)
	this.genrand_int31 = function () {
		//c//return (genrand_int32()>>1);
		return this.genrand_int32() >>> 1;
	};

	/* generates a random number on [0,1]-real-interval */
	//c//double genrand_real1(void)
	this.genrand_real1 = function () {
		//c//return genrand_int32()*(1.0/4294967295.0);
		return this.genrand_int32() * (1.0 / 4294967295.0);
		/* divided by 2^32-1 */
	};

	/* generates a random number on [0,1)-real-interval */
	//c//double genrand_real2(void)
	this.genrand_real2 = function () {
		//c//return genrand_int32()*(1.0/4294967296.0);
		return this.genrand_int32() * (1.0 / 4294967296.0);
		/* divided by 2^32 */
	};

	/* generates a random number on (0,1)-real-interval */
	//c//double genrand_real3(void)
	this.genrand_real3 = function () {
		//c//return ((genrand_int32()) + 0.5)*(1.0/4294967296.0);
		return (this.genrand_int32() + 0.5) * (1.0 / 4294967296.0);
		/* divided by 2^32 */
	};

	/* generates a random number on [0,1) with 53-bit resolution*/
	//c//double genrand_res53(void)
	this.genrand_res53 = function () {
		//c//unsigned long a=genrand_int32()>>5, b=genrand_int32()>>6;
		var a = this.genrand_int32() >>> 5,
		    b = this.genrand_int32() >>> 6;
		return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);
	};
	/* These real versions are due to Isaku Wada, 2002/01/09 added */
}

//  Exports: Public API

//  Export the twister class
exports.MersenneTwister19937 = MersenneTwister19937;

//  Export a simplified function to generate random numbers
var gen = new MersenneTwister19937();
gen.init_genrand(new Date().getTime() % 1000000000);

// Added max, min range functionality, Marak Squires Sept 11 2014
exports.rand = function (max, min) {
	if (max === undefined) {
		min = 0;
		max = 32768;
	}
	return Math.floor(gen.genrand_real2() * (max - min) + min);
};
exports.seed = function (S) {
	if (typeof S != 'number') {
		throw new Error("seed(S) must take numeric argument; is " + (typeof S === 'undefined' ? 'undefined' : _typeof(S)));
	}
	gen.init_genrand(S);
};
exports.seed_array = function (A) {
	if ((typeof A === 'undefined' ? 'undefined' : _typeof(A)) != 'object') {
		throw new Error("seed_array(A) must take array of numbers; is " + (typeof A === 'undefined' ? 'undefined' : _typeof(A)));
	}
	gen.init_by_array(A);
};

},{}],153:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*

Copyright (c) 2012-2014 Jeffrey Mealo

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

------------------------------------------------------------------------------------------------------------------------

Based loosely on Luka Pusic's PHP Script: http://360percents.com/posts/php-random-user-agent-generator/

The license for that script is as follows:

"THE BEER-WARE LICENSE" (Revision 42):

<pusic93@gmail.com> wrote this file. As long as you retain this notice you can do whatever you want with this stuff.
If we meet some day, and you think this stuff is worth it, you can buy me a beer in return. Luka Pusic
*/

function rnd(a, b) {
    //calling rnd() with no arguments is identical to rnd(0, 100)
    a = a || 0;
    b = b || 100;

    if (typeof b === 'number' && typeof a === 'number') {
        //rnd(int min, int max) returns integer between min, max
        return function (min, max) {
            if (min > max) {
                throw new RangeError('expected min <= max; got min = ' + min + ', max = ' + max);
            }
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }(a, b);
    }

    if (Object.prototype.toString.call(a) === "[object Array]") {
        //returns a random element from array (a), even weighting
        return a[Math.floor(Math.random() * a.length)];
    }

    if (a && (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object') {
        //returns a random key from the passed object; keys are weighted by the decimal probability in their value
        return function (obj) {
            var rand = rnd(0, 100) / 100,
                min = 0,
                max = 0,
                key,
                return_val;

            for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                    max = obj[key] + min;
                    return_val = key;
                    if (rand >= min && rand <= max) {
                        break;
                    }
                    min = min + obj[key];
                }
            }

            return return_val;
        }(a);
    }

    throw new TypeError('Invalid arguments passed to rnd. (' + (b ? a + ', ' + b : a) + ')');
}

function randomLang() {
    return rnd(['AB', 'AF', 'AN', 'AR', 'AS', 'AZ', 'BE', 'BG', 'BN', 'BO', 'BR', 'BS', 'CA', 'CE', 'CO', 'CS', 'CU', 'CY', 'DA', 'DE', 'EL', 'EN', 'EO', 'ES', 'ET', 'EU', 'FA', 'FI', 'FJ', 'FO', 'FR', 'FY', 'GA', 'GD', 'GL', 'GV', 'HE', 'HI', 'HR', 'HT', 'HU', 'HY', 'ID', 'IS', 'IT', 'JA', 'JV', 'KA', 'KG', 'KO', 'KU', 'KW', 'KY', 'LA', 'LB', 'LI', 'LN', 'LT', 'LV', 'MG', 'MK', 'MN', 'MO', 'MS', 'MT', 'MY', 'NB', 'NE', 'NL', 'NN', 'NO', 'OC', 'PL', 'PT', 'RM', 'RO', 'RU', 'SC', 'SE', 'SK', 'SL', 'SO', 'SQ', 'SR', 'SV', 'SW', 'TK', 'TR', 'TY', 'UK', 'UR', 'UZ', 'VI', 'VO', 'YI', 'ZH']);
}

function randomBrowserAndOS() {
    var browser = rnd({
        chrome: .45132810566,
        iexplorer: .27477061836,
        firefox: .19384170608,
        safari: .06186781118,
        opera: .01574236955
    }),
        os = {
        chrome: { win: .89, mac: .09, lin: .02 },
        firefox: { win: .83, mac: .16, lin: .01 },
        opera: { win: .91, mac: .03, lin: .06 },
        safari: { win: .04, mac: .96 },
        iexplorer: ['win']
    };

    return [browser, rnd(os[browser])];
}

function randomProc(arch) {
    var procs = {
        lin: ['i686', 'x86_64'],
        mac: { 'Intel': .48, 'PPC': .01, 'U; Intel': .48, 'U; PPC': .01 },
        win: ['', 'WOW64', 'Win64; x64']
    };
    return rnd(procs[arch]);
}

function randomRevision(dots) {
    var return_val = '';
    //generate a random revision
    //dots = 2 returns .x.y where x & y are between 0 and 9
    for (var x = 0; x < dots; x++) {
        return_val += '.' + rnd(0, 9);
    }
    return return_val;
}

var version_string = {
    net: function net() {
        return [rnd(1, 4), rnd(0, 9), rnd(10000, 99999), rnd(0, 9)].join('.');
    },
    nt: function nt() {
        return rnd(5, 6) + '.' + rnd(0, 3);
    },
    ie: function ie() {
        return rnd(7, 11);
    },
    trident: function trident() {
        return rnd(3, 7) + '.' + rnd(0, 1);
    },
    osx: function osx(delim) {
        return [10, rnd(5, 10), rnd(0, 9)].join(delim || '.');
    },
    chrome: function chrome() {
        return [rnd(13, 39), 0, rnd(800, 899), 0].join('.');
    },
    presto: function presto() {
        return '2.9.' + rnd(160, 190);
    },
    presto2: function presto2() {
        return rnd(10, 12) + '.00';
    },
    safari: function safari() {
        return rnd(531, 538) + '.' + rnd(0, 2) + '.' + rnd(0, 2);
    }
};

var browser = {
    firefox: function firefox(arch) {
        //https://developer.mozilla.org/en-US/docs/Gecko_user_agent_string_reference
        var firefox_ver = rnd(5, 15) + randomRevision(2),
            gecko_ver = 'Gecko/20100101 Firefox/' + firefox_ver,
            proc = randomProc(arch),
            os_ver = arch === 'win' ? '(Windows NT ' + version_string.nt() + (proc ? '; ' + proc : '') : arch === 'mac' ? '(Macintosh; ' + proc + ' Mac OS X ' + version_string.osx() : '(X11; Linux ' + proc;

        return 'Mozilla/5.0 ' + os_ver + '; rv:' + firefox_ver.slice(0, -2) + ') ' + gecko_ver;
    },

    iexplorer: function iexplorer() {
        var ver = version_string.ie();

        if (ver >= 11) {
            //http://msdn.microsoft.com/en-us/library/ie/hh869301(v=vs.85).aspx
            return 'Mozilla/5.0 (Windows NT 6.' + rnd(1, 3) + '; Trident/7.0; ' + rnd(['Touch; ', '']) + 'rv:11.0) like Gecko';
        }

        //http://msdn.microsoft.com/en-us/library/ie/ms537503(v=vs.85).aspx
        return 'Mozilla/5.0 (compatible; MSIE ' + ver + '.0; Windows NT ' + version_string.nt() + '; Trident/' + version_string.trident() + (rnd(0, 1) === 1 ? '; .NET CLR ' + version_string.net() : '') + ')';
    },

    opera: function opera(arch) {
        //http://www.opera.com/docs/history/
        var presto_ver = ' Presto/' + version_string.presto() + ' Version/' + version_string.presto2() + ')',
            os_ver = arch === 'win' ? '(Windows NT ' + version_string.nt() + '; U; ' + randomLang() + presto_ver : arch === 'lin' ? '(X11; Linux ' + randomProc(arch) + '; U; ' + randomLang() + presto_ver : '(Macintosh; Intel Mac OS X ' + version_string.osx() + ' U; ' + randomLang() + ' Presto/' + version_string.presto() + ' Version/' + version_string.presto2() + ')';

        return 'Opera/' + rnd(9, 14) + '.' + rnd(0, 99) + ' ' + os_ver;
    },

    safari: function safari(arch) {
        var safari = version_string.safari(),
            ver = rnd(4, 7) + '.' + rnd(0, 1) + '.' + rnd(0, 10),
            os_ver = arch === 'mac' ? '(Macintosh; ' + randomProc('mac') + ' Mac OS X ' + version_string.osx('_') + ' rv:' + rnd(2, 6) + '.0; ' + randomLang() + ') ' : '(Windows; U; Windows NT ' + version_string.nt() + ')';

        return 'Mozilla/5.0 ' + os_ver + 'AppleWebKit/' + safari + ' (KHTML, like Gecko) Version/' + ver + ' Safari/' + safari;
    },

    chrome: function chrome(arch) {
        var safari = version_string.safari(),
            os_ver = arch === 'mac' ? '(Macintosh; ' + randomProc('mac') + ' Mac OS X ' + version_string.osx('_') + ') ' : arch === 'win' ? '(Windows; U; Windows NT ' + version_string.nt() + ')' : '(X11; Linux ' + randomProc(arch);

        return 'Mozilla/5.0 ' + os_ver + ' AppleWebKit/' + safari + ' (KHTML, like Gecko) Chrome/' + version_string.chrome() + ' Safari/' + safari;
    }
};

exports.generate = function generate() {
    var random = randomBrowserAndOS();
    return browser[random[0]](random[1]);
};

},{}],154:[function(require,module,exports){
'use strict';

function format(fmt) {
  var re = /(%?)(%([jds]))/g,
      args = Array.prototype.slice.call(arguments, 1);
  if (args.length) {
    fmt = fmt.replace(re, function (match, escaped, ptn, flag) {
      var arg = args.shift();
      switch (flag) {
        case 's':
          arg = '' + arg;
          break;
        case 'd':
          arg = Number(arg);
          break;
        case 'j':
          arg = JSON.stringify(arg);
          break;
      }
      if (!escaped) {
        return arg;
      }
      args.unshift(arg);
      return match;
    });
  }

  // arguments remain after formatting
  if (args.length) {
    fmt += ' ' + args.join(' ');
  }

  // update escaped %% values
  fmt = fmt.replace(/%{2,2}/g, '%');

  return '' + fmt;
}

module.exports = format;

},{}],155:[function(require,module,exports){
'use strict';

var http = require('http');
var url = require('url');

var https = module.exports;

for (var key in http) {
  if (http.hasOwnProperty(key)) https[key] = http[key];
}

https.request = function (params, cb) {
  params = validateParams(params);
  return http.request.call(this, params, cb);
};

https.get = function (params, cb) {
  params = validateParams(params);
  return http.get.call(this, params, cb);
};

function validateParams(params) {
  if (typeof params === 'string') {
    params = url.parse(params);
  }
  if (!params.protocol) {
    params.protocol = 'https:';
  }
  if (params.protocol !== 'https:') {
    throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"');
  }
  return params;
}

},{"http":238,"url":248}],156:[function(require,module,exports){
"use strict";

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

},{}],157:[function(require,module,exports){
'use strict';

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function TempCtor() {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}

},{}],158:[function(require,module,exports){
'use strict';

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
};

function isBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
}

},{}],159:[function(require,module,exports){
'use strict';

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],160:[function(require,module,exports){
'use strict';

var yaml = require('./lib/js-yaml.js');

module.exports = yaml;

},{"./lib/js-yaml.js":161}],161:[function(require,module,exports){
'use strict';

var loader = require('./js-yaml/loader');
var dumper = require('./js-yaml/dumper');

function deprecated(name) {
  return function () {
    throw new Error('Function ' + name + ' is deprecated and cannot be used.');
  };
}

module.exports.Type = require('./js-yaml/type');
module.exports.Schema = require('./js-yaml/schema');
module.exports.FAILSAFE_SCHEMA = require('./js-yaml/schema/failsafe');
module.exports.JSON_SCHEMA = require('./js-yaml/schema/json');
module.exports.CORE_SCHEMA = require('./js-yaml/schema/core');
module.exports.DEFAULT_SAFE_SCHEMA = require('./js-yaml/schema/default_safe');
module.exports.DEFAULT_FULL_SCHEMA = require('./js-yaml/schema/default_full');
module.exports.load = loader.load;
module.exports.loadAll = loader.loadAll;
module.exports.safeLoad = loader.safeLoad;
module.exports.safeLoadAll = loader.safeLoadAll;
module.exports.dump = dumper.dump;
module.exports.safeDump = dumper.safeDump;
module.exports.YAMLException = require('./js-yaml/exception');

// Deprecated schema names from JS-YAML 2.0.x
module.exports.MINIMAL_SCHEMA = require('./js-yaml/schema/failsafe');
module.exports.SAFE_SCHEMA = require('./js-yaml/schema/default_safe');
module.exports.DEFAULT_SCHEMA = require('./js-yaml/schema/default_full');

// Deprecated functions from JS-YAML 1.x.x
module.exports.scan = deprecated('scan');
module.exports.parse = deprecated('parse');
module.exports.compose = deprecated('compose');
module.exports.addConstructor = deprecated('addConstructor');

},{"./js-yaml/dumper":163,"./js-yaml/exception":164,"./js-yaml/loader":165,"./js-yaml/schema":167,"./js-yaml/schema/core":168,"./js-yaml/schema/default_full":169,"./js-yaml/schema/default_safe":170,"./js-yaml/schema/failsafe":171,"./js-yaml/schema/json":172,"./js-yaml/type":173}],162:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function isNothing(subject) {
  return typeof subject === 'undefined' || subject === null;
}

function isObject(subject) {
  return (typeof subject === 'undefined' ? 'undefined' : _typeof(subject)) === 'object' && subject !== null;
}

function toArray(sequence) {
  if (Array.isArray(sequence)) return sequence;else if (isNothing(sequence)) return [];

  return [sequence];
}

function extend(target, source) {
  var index, length, key, sourceKeys;

  if (source) {
    sourceKeys = Object.keys(source);

    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }

  return target;
}

function repeat(string, count) {
  var result = '',
      cycle;

  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }

  return result;
}

function isNegativeZero(number) {
  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
}

module.exports.isNothing = isNothing;
module.exports.isObject = isObject;
module.exports.toArray = toArray;
module.exports.repeat = repeat;
module.exports.isNegativeZero = isNegativeZero;
module.exports.extend = extend;

},{}],163:[function(require,module,exports){
'use strict';

/*eslint-disable no-use-before-define*/

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var common = require('./common');
var YAMLException = require('./exception');
var DEFAULT_FULL_SCHEMA = require('./schema/default_full');
var DEFAULT_SAFE_SCHEMA = require('./schema/default_safe');

var _toString = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;

var CHAR_TAB = 0x09; /* Tab */
var CHAR_LINE_FEED = 0x0A; /* LF */
var CHAR_SPACE = 0x20; /* Space */
var CHAR_EXCLAMATION = 0x21; /* ! */
var CHAR_DOUBLE_QUOTE = 0x22; /* " */
var CHAR_SHARP = 0x23; /* # */
var CHAR_PERCENT = 0x25; /* % */
var CHAR_AMPERSAND = 0x26; /* & */
var CHAR_SINGLE_QUOTE = 0x27; /* ' */
var CHAR_ASTERISK = 0x2A; /* * */
var CHAR_COMMA = 0x2C; /* , */
var CHAR_MINUS = 0x2D; /* - */
var CHAR_COLON = 0x3A; /* : */
var CHAR_GREATER_THAN = 0x3E; /* > */
var CHAR_QUESTION = 0x3F; /* ? */
var CHAR_COMMERCIAL_AT = 0x40; /* @ */
var CHAR_LEFT_SQUARE_BRACKET = 0x5B; /* [ */
var CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */
var CHAR_GRAVE_ACCENT = 0x60; /* ` */
var CHAR_LEFT_CURLY_BRACKET = 0x7B; /* { */
var CHAR_VERTICAL_LINE = 0x7C; /* | */
var CHAR_RIGHT_CURLY_BRACKET = 0x7D; /* } */

var ESCAPE_SEQUENCES = {};

ESCAPE_SEQUENCES[0x00] = '\\0';
ESCAPE_SEQUENCES[0x07] = '\\a';
ESCAPE_SEQUENCES[0x08] = '\\b';
ESCAPE_SEQUENCES[0x09] = '\\t';
ESCAPE_SEQUENCES[0x0A] = '\\n';
ESCAPE_SEQUENCES[0x0B] = '\\v';
ESCAPE_SEQUENCES[0x0C] = '\\f';
ESCAPE_SEQUENCES[0x0D] = '\\r';
ESCAPE_SEQUENCES[0x1B] = '\\e';
ESCAPE_SEQUENCES[0x22] = '\\"';
ESCAPE_SEQUENCES[0x5C] = '\\\\';
ESCAPE_SEQUENCES[0x85] = '\\N';
ESCAPE_SEQUENCES[0xA0] = '\\_';
ESCAPE_SEQUENCES[0x2028] = '\\L';
ESCAPE_SEQUENCES[0x2029] = '\\P';

var DEPRECATED_BOOLEANS_SYNTAX = ['y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON', 'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'];

function compileStyleMap(schema, map) {
  var result, keys, index, length, tag, style, type;

  if (map === null) return {};

  result = {};
  keys = Object.keys(map);

  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map[tag]);

    if (tag.slice(0, 2) === '!!') {
      tag = 'tag:yaml.org,2002:' + tag.slice(2);
    }
    type = schema.compiledTypeMap['fallback'][tag];

    if (type && _hasOwnProperty.call(type.styleAliases, style)) {
      style = type.styleAliases[style];
    }

    result[tag] = style;
  }

  return result;
}

function encodeHex(character) {
  var string, handle, length;

  string = character.toString(16).toUpperCase();

  if (character <= 0xFF) {
    handle = 'x';
    length = 2;
  } else if (character <= 0xFFFF) {
    handle = 'u';
    length = 4;
  } else if (character <= 0xFFFFFFFF) {
    handle = 'U';
    length = 8;
  } else {
    throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');
  }

  return '\\' + handle + common.repeat('0', length - string.length) + string;
}

function State(options) {
  this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;
  this.indent = Math.max(1, options['indent'] || 2);
  this.skipInvalid = options['skipInvalid'] || false;
  this.flowLevel = common.isNothing(options['flowLevel']) ? -1 : options['flowLevel'];
  this.styleMap = compileStyleMap(this.schema, options['styles'] || null);
  this.sortKeys = options['sortKeys'] || false;
  this.lineWidth = options['lineWidth'] || 80;
  this.noRefs = options['noRefs'] || false;
  this.noCompatMode = options['noCompatMode'] || false;
  this.condenseFlow = options['condenseFlow'] || false;

  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;

  this.tag = null;
  this.result = '';

  this.duplicates = [];
  this.usedDuplicates = null;
}

// Indents every line in a string. Empty lines (\n only) are not indented.
function indentString(string, spaces) {
  var ind = common.repeat(' ', spaces),
      position = 0,
      next = -1,
      result = '',
      line,
      length = string.length;

  while (position < length) {
    next = string.indexOf('\n', position);
    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }

    if (line.length && line !== '\n') result += ind;

    result += line;
  }

  return result;
}

function generateNextLine(state, level) {
  return '\n' + common.repeat(' ', state.indent * level);
}

function testImplicitResolving(state, str) {
  var index, length, type;

  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type = state.implicitTypes[index];

    if (type.resolve(str)) {
      return true;
    }
  }

  return false;
}

// [33] s-white ::= s-space | s-tab
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}

// Returns true if the character can be printed without escaping.
// From YAML 1.2: "any allowed characters known to be non-printable
// should also be escaped. [However,] This isn’t mandatory"
// Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.
function isPrintable(c) {
  return 0x00020 <= c && c <= 0x00007E || 0x000A1 <= c && c <= 0x00D7FF && c !== 0x2028 && c !== 0x2029 || 0x0E000 <= c && c <= 0x00FFFD && c !== 0xFEFF /* BOM */ || 0x10000 <= c && c <= 0x10FFFF;
}

// Simplified test for values allowed after the first character in plain style.
function isPlainSafe(c) {
  // Uses a subset of nb-char - c-flow-indicator - ":" - "#"
  // where nb-char ::= c-printable - b-char - c-byte-order-mark.
  return isPrintable(c) && c !== 0xFEFF
  // - c-flow-indicator
  && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET
  // - ":" - "#"
  && c !== CHAR_COLON && c !== CHAR_SHARP;
}

// Simplified test for values allowed as the first character in plain style.
function isPlainSafeFirst(c) {
  // Uses a subset of ns-char - c-indicator
  // where ns-char = nb-char - s-white.
  return isPrintable(c) && c !== 0xFEFF && !isWhitespace(c) // - s-white
  // - (c-indicator ::=
  // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”
  && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET
  // | “#” | “&” | “*” | “!” | “|” | “>” | “'” | “"”
  && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE
  // | “%” | “@” | “`”)
  && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
}

// Determines whether block indentation indicator is required.
function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}

var STYLE_PLAIN = 1,
    STYLE_SINGLE = 2,
    STYLE_LITERAL = 3,
    STYLE_FOLDED = 4,
    STYLE_DOUBLE = 5;

// Determines which scalar styles are possible and returns the preferred style.
// lineWidth = -1 => no limit.
// Pre-conditions: str.length > 0.
// Post-conditions:
//    STYLE_PLAIN or STYLE_SINGLE => no \n are in the string.
//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).
//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).
function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
  var i;
  var char;
  var hasLineBreak = false;
  var hasFoldableLine = false; // only checked if shouldTrackWidth
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1; // count the first line correctly
  var plain = isPlainSafeFirst(string.charCodeAt(0)) && !isWhitespace(string.charCodeAt(string.length - 1));

  if (singleLineOnly) {
    // Case: no block styles.
    // Check for disallowed characters to rule out plain and single.
    for (i = 0; i < string.length; i++) {
      char = string.charCodeAt(i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char);
    }
  } else {
    // Case: block styles permitted.
    for (i = 0; i < string.length; i++) {
      char = string.charCodeAt(i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        // Check if any line can be folded.
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine ||
          // Foldable line = too long, and not more-indented.
          i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char);
    }
    // in case the end is missing a \n
    hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';
  }
  // Although every style can represent \n without escaping, prefer block styles
  // for multiline, since they're more readable and they don't add empty lines.
  // Also prefer folding a super-long line.
  if (!hasLineBreak && !hasFoldableLine) {
    // Strings interpretable as another type have to be quoted;
    // e.g. the string 'true' vs. the boolean true.
    return plain && !testAmbiguousType(string) ? STYLE_PLAIN : STYLE_SINGLE;
  }
  // Edge case: block indentation indicator can only have one digit.
  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  }
  // At this point we know block styles are valid.
  // Prefer literal style unless we want to fold.
  return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
}

// Note: line breaking/folding is implemented for only the folded style.
// NB. We drop the last trailing newline (if any) of a returned block scalar
//  since the dumper adds its own newline. This always works:
//    • No ending newline => unaffected; already using strip "-" chomping.
//    • Ending newline    => removed then restored.
//  Importantly, this keeps the "+" chomp indicator from gaining an extra line.
function writeScalar(state, string, level, iskey) {
  state.dump = function () {
    if (string.length === 0) {
      return "''";
    }
    if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {
      return "'" + string + "'";
    }

    var indent = state.indent * Math.max(1, level); // no 0-indent scalars
    // As indentation gets deeper, let the width decrease monotonically
    // to the lower bound min(state.lineWidth, 40).
    // Note that this implies
    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.
    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.
    // This behaves better than a constant minimum width which disallows narrower options,
    // or an indent threshold which causes the width to suddenly increase.
    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);

    // Without knowing if keys are implicit/explicit, assume implicit for safety.
    var singleLineOnly = iskey
    // No block styles in flow mode.
    || state.flowLevel > -1 && level >= state.flowLevel;
    function testAmbiguity(string) {
      return testImplicitResolving(state, string);
    }

    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
      case STYLE_PLAIN:
        return string;
      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return '|' + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
      case STYLE_FOLDED:
        return '>' + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
      case STYLE_DOUBLE:
        return '"' + escapeString(string, lineWidth) + '"';
      default:
        throw new YAMLException('impossible error: invalid scalar style');
    }
  }();
}

// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.
function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';

  // note the special case: the string '\n' counts as a "trailing" empty line.
  var clip = string[string.length - 1] === '\n';
  var keep = clip && (string[string.length - 2] === '\n' || string === '\n');
  var chomp = keep ? '+' : clip ? '' : '-';

  return indentIndicator + chomp + '\n';
}

// (See the note for writeScalar.)
function dropEndingNewline(string) {
  return string[string.length - 1] === '\n' ? string.slice(0, -1) : string;
}

// Note: a long line without a suitable break point will exceed the width limit.
// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.
function foldString(string, width) {
  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—
  // unless they're before or after a more-indented line, or at the very
  // beginning or end, in which case $k$ maps to $k$.
  // Therefore, parse each chunk as newline(s) followed by a content line.
  var lineRe = /(\n+)([^\n]*)/g;

  // first line (possibly an empty line)
  var result = function () {
    var nextLF = string.indexOf('\n');
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }();
  // If we haven't reached the first content line yet, don't add an extra \n.
  var prevMoreIndented = string[0] === '\n' || string[0] === ' ';
  var moreIndented;

  // rest of the lines
  var match;
  while (match = lineRe.exec(string)) {
    var prefix = match[1],
        line = match[2];
    moreIndented = line[0] === ' ';
    result += prefix + (!prevMoreIndented && !moreIndented && line !== '' ? '\n' : '') + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }

  return result;
}

// Greedy line breaking.
// Picks the longest line under the limit each time,
// otherwise settles for the shortest line over the limit.
// NB. More-indented lines *cannot* be folded, as that would add an extra \n.
function foldLine(line, width) {
  if (line === '' || line[0] === ' ') return line;

  // Since a more-indented line adds a \n, breaks can't be followed by a space.
  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.
  var match;
  // start is an inclusive index. end, curr, and next are exclusive.
  var start = 0,
      end,
      curr = 0,
      next = 0;
  var result = '';

  // Invariants: 0 <= start <= length-1.
  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.
  // Inside the loop:
  //   A match implies length >= 2, so curr and next are <= length-2.
  while (match = breakRe.exec(line)) {
    next = match.index;
    // maintain invariant: curr - start <= width
    if (next - start > width) {
      end = curr > start ? curr : next; // derive end <= length-2
      result += '\n' + line.slice(start, end);
      // skip the space that was output as \n
      start = end + 1; // derive start <= length-1
    }
    curr = next;
  }

  // By the invariants, start <= length-1, so there is something left over.
  // It is either the whole string or a part starting from non-whitespace.
  result += '\n';
  // Insert a break if the remainder is too long and there is a break available.
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + '\n' + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }

  return result.slice(1); // drop extra \n joiner
}

// Escapes a double-quoted string.
function escapeString(string) {
  var result = '';
  var char, nextChar;
  var escapeSeq;

  for (var i = 0; i < string.length; i++) {
    char = string.charCodeAt(i);
    // Check for surrogate pairs (reference Unicode 3.0 section "3.7 Surrogates").
    if (char >= 0xD800 && char <= 0xDBFF /* high surrogate */) {
        nextChar = string.charCodeAt(i + 1);
        if (nextChar >= 0xDC00 && nextChar <= 0xDFFF /* low surrogate */) {
            // Combine the surrogate pair and store it escaped.
            result += encodeHex((char - 0xD800) * 0x400 + nextChar - 0xDC00 + 0x10000);
            // Advance index one extra since we already used that char here.
            i++;continue;
          }
      }
    escapeSeq = ESCAPE_SEQUENCES[char];
    result += !escapeSeq && isPrintable(char) ? string[i] : escapeSeq || encodeHex(char);
  }

  return result;
}

function writeFlowSequence(state, level, object) {
  var _result = '',
      _tag = state.tag,
      index,
      length;

  for (index = 0, length = object.length; index < length; index += 1) {
    // Write only valid elements.
    if (writeNode(state, level, object[index], false, false)) {
      if (index !== 0) _result += ',' + (!state.condenseFlow ? ' ' : '');
      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = '[' + _result + ']';
}

function writeBlockSequence(state, level, object, compact) {
  var _result = '',
      _tag = state.tag,
      index,
      length;

  for (index = 0, length = object.length; index < length; index += 1) {
    // Write only valid elements.
    if (writeNode(state, level + 1, object[index], true, true)) {
      if (!compact || index !== 0) {
        _result += generateNextLine(state, level);
      }

      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += '-';
      } else {
        _result += '- ';
      }

      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = _result || '[]'; // Empty sequence if no valid values.
}

function writeFlowMapping(state, level, object) {
  var _result = '',
      _tag = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      pairBuffer;

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = state.condenseFlow ? '"' : '';

    if (index !== 0) pairBuffer += ', ';

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (!writeNode(state, level, objectKey, false, false)) {
      continue; // Skip this pair because of invalid key;
    }

    if (state.dump.length > 1024) pairBuffer += '? ';

    pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');

    if (!writeNode(state, level, objectValue, false, false)) {
      continue; // Skip this pair because of invalid value.
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = '{' + _result + '}';
}

function writeBlockMapping(state, level, object, compact) {
  var _result = '',
      _tag = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      explicitPair,
      pairBuffer;

  // Allow sorting keys so that the output file is deterministic
  if (state.sortKeys === true) {
    // Default sorting
    objectKeyList.sort();
  } else if (typeof state.sortKeys === 'function') {
    // Custom sort function
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    // Something is wrong
    throw new YAMLException('sortKeys must be a boolean or a function');
  }

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = '';

    if (!compact || index !== 0) {
      pairBuffer += generateNextLine(state, level);
    }

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue; // Skip this pair because of invalid key.
    }

    explicitPair = state.tag !== null && state.tag !== '?' || state.dump && state.dump.length > 1024;

    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += '?';
      } else {
        pairBuffer += '? ';
      }
    }

    pairBuffer += state.dump;

    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }

    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue; // Skip this pair because of invalid value.
    }

    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ':';
    } else {
      pairBuffer += ': ';
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = _result || '{}'; // Empty mapping if no valid pairs.
}

function detectType(state, object, explicit) {
  var _result, typeList, index, length, type, style;

  typeList = explicit ? state.explicitTypes : state.implicitTypes;

  for (index = 0, length = typeList.length; index < length; index += 1) {
    type = typeList[index];

    if ((type.instanceOf || type.predicate) && (!type.instanceOf || (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {

      state.tag = explicit ? type.tag : '?';

      if (type.represent) {
        style = state.styleMap[type.tag] || type.defaultStyle;

        if (_toString.call(type.represent) === '[object Function]') {
          _result = type.represent(object, style);
        } else if (_hasOwnProperty.call(type.represent, style)) {
          _result = type.represent[style](object, style);
        } else {
          throw new YAMLException('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
        }

        state.dump = _result;
      }

      return true;
    }
  }

  return false;
}

// Serializes `object` and writes it to global `result`.
// Returns true on success, or false on invalid object.
//
function writeNode(state, level, object, block, compact, iskey) {
  state.tag = null;
  state.dump = object;

  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }

  var type = _toString.call(state.dump);

  if (block) {
    block = state.flowLevel < 0 || state.flowLevel > level;
  }

  var objectOrArray = type === '[object Object]' || type === '[object Array]',
      duplicateIndex,
      duplicate;

  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }

  if (state.tag !== null && state.tag !== '?' || duplicate || state.indent !== 2 && level > 0) {
    compact = false;
  }

  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = '*ref_' + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type === '[object Object]') {
      if (block && Object.keys(state.dump).length !== 0) {
        writeBlockMapping(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object Array]') {
      if (block && state.dump.length !== 0) {
        writeBlockSequence(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, level, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object String]') {
      if (state.tag !== '?') {
        writeScalar(state, state.dump, level, iskey);
      }
    } else {
      if (state.skipInvalid) return false;
      throw new YAMLException('unacceptable kind of an object to dump ' + type);
    }

    if (state.tag !== null && state.tag !== '?') {
      state.dump = '!<' + state.tag + '> ' + state.dump;
    }
  }

  return true;
}

function getDuplicateReferences(object, state) {
  var objects = [],
      duplicatesIndexes = [],
      index,
      length;

  inspectNode(object, objects, duplicatesIndexes);

  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }
  state.usedDuplicates = new Array(length);
}

function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList, index, length;

  if (object !== null && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object') {
    index = objects.indexOf(object);
    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);

      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);

        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}

function dump(input, options) {
  options = options || {};

  var state = new State(options);

  if (!state.noRefs) getDuplicateReferences(input, state);

  if (writeNode(state, 0, input, true, true)) return state.dump + '\n';

  return '';
}

function safeDump(input, options) {
  return dump(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
}

module.exports.dump = dump;
module.exports.safeDump = safeDump;

},{"./common":162,"./exception":164,"./schema/default_full":169,"./schema/default_safe":170}],164:[function(require,module,exports){
// YAML error class. http://stackoverflow.com/questions/8458984
//
'use strict';

function YAMLException(reason, mark) {
  // Super constructor
  Error.call(this);

  this.name = 'YAMLException';
  this.reason = reason;
  this.mark = mark;
  this.message = (this.reason || '(unknown reason)') + (this.mark ? ' ' + this.mark.toString() : '');

  // Include stack trace in error object
  if (Error.captureStackTrace) {
    // Chrome and NodeJS
    Error.captureStackTrace(this, this.constructor);
  } else {
    // FF, IE 10+ and Safari 6+. Fallback for others
    this.stack = new Error().stack || '';
  }
}

// Inherit from Error
YAMLException.prototype = Object.create(Error.prototype);
YAMLException.prototype.constructor = YAMLException;

YAMLException.prototype.toString = function toString(compact) {
  var result = this.name + ': ';

  result += this.reason || '(unknown reason)';

  if (!compact && this.mark) {
    result += ' ' + this.mark.toString();
  }

  return result;
};

module.exports = YAMLException;

},{}],165:[function(require,module,exports){
'use strict';

/*eslint-disable max-len,no-use-before-define*/

var common = require('./common');
var YAMLException = require('./exception');
var Mark = require('./mark');
var DEFAULT_SAFE_SCHEMA = require('./schema/default_safe');
var DEFAULT_FULL_SCHEMA = require('./schema/default_full');

var _hasOwnProperty = Object.prototype.hasOwnProperty;

var CONTEXT_FLOW_IN = 1;
var CONTEXT_FLOW_OUT = 2;
var CONTEXT_BLOCK_IN = 3;
var CONTEXT_BLOCK_OUT = 4;

var CHOMPING_CLIP = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP = 3;

var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;

function is_EOL(c) {
  return c === 0x0A /* LF */ || c === 0x0D /* CR */;
}

function is_WHITE_SPACE(c) {
  return c === 0x09 /* Tab */ || c === 0x20 /* Space */;
}

function is_WS_OR_EOL(c) {
  return c === 0x09 /* Tab */ || c === 0x20 /* Space */ || c === 0x0A /* LF */ || c === 0x0D /* CR */;
}

function is_FLOW_INDICATOR(c) {
  return c === 0x2C /* , */ || c === 0x5B /* [ */ || c === 0x5D /* ] */ || c === 0x7B /* { */ || c === 0x7D /* } */;
}

function fromHexCode(c) {
  var lc;

  if (0x30 /* 0 */ <= c && c <= 0x39 /* 9 */) {
    return c - 0x30;
  }

  /*eslint-disable no-bitwise*/
  lc = c | 0x20;

  if (0x61 /* a */ <= lc && lc <= 0x66 /* f */) {
    return lc - 0x61 + 10;
  }

  return -1;
}

function escapedHexLen(c) {
  if (c === 0x78 /* x */) {
      return 2;
    }
  if (c === 0x75 /* u */) {
      return 4;
    }
  if (c === 0x55 /* U */) {
      return 8;
    }
  return 0;
}

function fromDecimalCode(c) {
  if (0x30 /* 0 */ <= c && c <= 0x39 /* 9 */) {
    return c - 0x30;
  }

  return -1;
}

function simpleEscapeSequence(c) {
  /* eslint-disable indent */
  return c === 0x30 /* 0 */ ? '\x00' : c === 0x61 /* a */ ? '\x07' : c === 0x62 /* b */ ? '\x08' : c === 0x74 /* t */ ? '\x09' : c === 0x09 /* Tab */ ? '\x09' : c === 0x6E /* n */ ? '\x0A' : c === 0x76 /* v */ ? '\x0B' : c === 0x66 /* f */ ? '\x0C' : c === 0x72 /* r */ ? '\x0D' : c === 0x65 /* e */ ? '\x1B' : c === 0x20 /* Space */ ? ' ' : c === 0x22 /* " */ ? '\x22' : c === 0x2F /* / */ ? '/' : c === 0x5C /* \ */ ? '\x5C' : c === 0x4E /* N */ ? '\x85' : c === 0x5F /* _ */ ? '\xA0' : c === 0x4C /* L */ ? '\u2028' : c === 0x50 /* P */ ? '\u2029' : '';
}

function charFromCodepoint(c) {
  if (c <= 0xFFFF) {
    return String.fromCharCode(c);
  }
  // Encode UTF-16 surrogate pair
  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF
  return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);
}

var simpleEscapeCheck = new Array(256); // integer, for fast access
var simpleEscapeMap = new Array(256);
for (var i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}

function State(input, options) {
  this.input = input;

  this.filename = options['filename'] || null;
  this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;
  this.onWarning = options['onWarning'] || null;
  this.legacy = options['legacy'] || false;
  this.json = options['json'] || false;
  this.listener = options['listener'] || null;

  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap = this.schema.compiledTypeMap;

  this.length = input.length;
  this.position = 0;
  this.line = 0;
  this.lineStart = 0;
  this.lineIndent = 0;

  this.documents = [];

  /*
  this.version;
  this.checkLineBreaks;
  this.tagMap;
  this.anchorMap;
  this.tag;
  this.anchor;
  this.kind;
  this.result;*/
}

function generateError(state, message) {
  return new YAMLException(message, new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart));
}

function throwError(state, message) {
  throw generateError(state, message);
}

function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}

var directiveHandlers = {

  YAML: function handleYamlDirective(state, name, args) {

    var match, major, minor;

    if (state.version !== null) {
      throwError(state, 'duplication of %YAML directive');
    }

    if (args.length !== 1) {
      throwError(state, 'YAML directive accepts exactly one argument');
    }

    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);

    if (match === null) {
      throwError(state, 'ill-formed argument of the YAML directive');
    }

    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);

    if (major !== 1) {
      throwError(state, 'unacceptable YAML version of the document');
    }

    state.version = args[0];
    state.checkLineBreaks = minor < 2;

    if (minor !== 1 && minor !== 2) {
      throwWarning(state, 'unsupported YAML version of the document');
    }
  },

  TAG: function handleTagDirective(state, name, args) {

    var handle, prefix;

    if (args.length !== 2) {
      throwError(state, 'TAG directive accepts exactly two arguments');
    }

    handle = args[0];
    prefix = args[1];

    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
    }

    if (_hasOwnProperty.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }

    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
    }

    state.tagMap[handle] = prefix;
  }
};

function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;

  if (start < end) {
    _result = state.input.slice(start, end);

    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 0x09 || 0x20 <= _character && _character <= 0x10FFFF)) {
          throwError(state, 'expected valid JSON character');
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, 'the stream contains non-printable characters');
    }

    state.result += _result;
  }
}

function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;

  if (!common.isObject(source)) {
    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
  }

  sourceKeys = Object.keys(source);

  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];

    if (!_hasOwnProperty.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}

function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
  var index, quantity;

  keyNode = String(keyNode);

  if (_result === null) {
    _result = {};
  }

  if (keyTag === 'tag:yaml.org,2002:merge') {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.position = startPos || state.position;
      throwError(state, 'duplicated mapping key');
    }
    _result[keyNode] = valueNode;
    delete overridableKeys[keyNode];
  }

  return _result;
}

function readLineBreak(state) {
  var ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x0A /* LF */) {
      state.position++;
    } else if (ch === 0x0D /* CR */) {
      state.position++;
      if (state.input.charCodeAt(state.position) === 0x0A /* LF */) {
          state.position++;
        }
    } else {
    throwError(state, 'a line break is expected');
  }

  state.line += 1;
  state.lineStart = state.position;
}

function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0,
      ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }

    if (allowComments && ch === 0x23 /* # */) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0x0A /* LF */ && ch !== 0x0D /* CR */ && ch !== 0);
      }

    if (is_EOL(ch)) {
      readLineBreak(state);

      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;

      while (ch === 0x20 /* Space */) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }

  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, 'deficient indentation');
  }

  return lineBreaks;
}

function testDocumentSeparator(state) {
  var _position = state.position,
      ch;

  ch = state.input.charCodeAt(_position);

  // Condition state.position === state.lineStart is tested
  // in parent on each call, for efficiency. No needs to test here again.
  if ((ch === 0x2D /* - */ || ch === 0x2E /* . */) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {

    _position += 3;

    ch = state.input.charCodeAt(_position);

    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }

  return false;
}

function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += ' ';
  } else if (count > 1) {
    state.result += common.repeat('\n', count - 1);
  }
}

function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding,
      following,
      captureStart,
      captureEnd,
      hasPendingContent,
      _line,
      _lineStart,
      _lineIndent,
      _kind = state.kind,
      _result = state.result,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 0x23 /* # */ || ch === 0x26 /* & */ || ch === 0x2A /* * */ || ch === 0x21 /* ! */ || ch === 0x7C /* | */ || ch === 0x3E /* > */ || ch === 0x27 /* ' */ || ch === 0x22 /* " */ || ch === 0x25 /* % */ || ch === 0x40 /* @ */ || ch === 0x60 /* ` */) {
      return false;
    }

  if (ch === 0x3F /* ? */ || ch === 0x2D /* - */) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
        return false;
      }
    }

  state.kind = 'scalar';
  state.result = '';
  captureStart = captureEnd = state.position;
  hasPendingContent = false;

  while (ch !== 0) {
    if (ch === 0x3A /* : */) {
        following = state.input.charCodeAt(state.position + 1);

        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
          break;
        }
      } else if (ch === 0x23 /* # */) {
        preceding = state.input.charCodeAt(state.position - 1);

        if (is_WS_OR_EOL(preceding)) {
          break;
        }
      } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;
    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);

      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }

    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }

    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }

    ch = state.input.charCodeAt(++state.position);
  }

  captureSegment(state, captureStart, captureEnd, false);

  if (state.result) {
    return true;
  }

  state.kind = _kind;
  state.result = _result;
  return false;
}

function readSingleQuotedScalar(state, nodeIndent) {
  var ch, captureStart, captureEnd;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x27 /* ' */) {
      return false;
    }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x27 /* ' */) {
        captureSegment(state, captureStart, state.position, true);
        ch = state.input.charCodeAt(++state.position);

        if (ch === 0x27 /* ' */) {
            captureStart = state.position;
            state.position++;
            captureEnd = state.position;
          } else {
          return true;
        }
      } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a single quoted scalar');
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a single quoted scalar');
}

function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x22 /* " */) {
      return false;
    }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x22 /* " */) {
        captureSegment(state, captureStart, state.position, true);
        state.position++;
        return true;
      } else if (ch === 0x5C /* \ */) {
        captureSegment(state, captureStart, state.position, true);
        ch = state.input.charCodeAt(++state.position);

        if (is_EOL(ch)) {
          skipSeparationSpace(state, false, nodeIndent);

          // TODO: rework to inline fn with no type cast?
        } else if (ch < 256 && simpleEscapeCheck[ch]) {
          state.result += simpleEscapeMap[ch];
          state.position++;
        } else if ((tmp = escapedHexLen(ch)) > 0) {
          hexLength = tmp;
          hexResult = 0;

          for (; hexLength > 0; hexLength--) {
            ch = state.input.charCodeAt(++state.position);

            if ((tmp = fromHexCode(ch)) >= 0) {
              hexResult = (hexResult << 4) + tmp;
            } else {
              throwError(state, 'expected hexadecimal character');
            }
          }

          state.result += charFromCodepoint(hexResult);

          state.position++;
        } else {
          throwError(state, 'unknown escape sequence');
        }

        captureStart = captureEnd = state.position;
      } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a double quoted scalar');
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a double quoted scalar');
}

function readFlowCollection(state, nodeIndent) {
  var readNext = true,
      _line,
      _tag = state.tag,
      _result,
      _anchor = state.anchor,
      following,
      terminator,
      isPair,
      isExplicitPair,
      isMapping,
      overridableKeys = {},
      keyNode,
      keyTag,
      valueNode,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x5B /* [ */) {
      terminator = 0x5D; /* ] */
      isMapping = false;
      _result = [];
    } else if (ch === 0x7B /* { */) {
      terminator = 0x7D; /* } */
      isMapping = true;
      _result = {};
    } else {
    return false;
  }

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(++state.position);

  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? 'mapping' : 'sequence';
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, 'missed comma between flow collection entries');
    }

    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;

    if (ch === 0x3F /* ? */) {
        following = state.input.charCodeAt(state.position + 1);

        if (is_WS_OR_EOL(following)) {
          isPair = isExplicitPair = true;
          state.position++;
          skipSeparationSpace(state, true, nodeIndent);
        }
      }

    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if ((isExplicitPair || state.line === _line) && ch === 0x3A /* : */) {
        isPair = true;
        ch = state.input.charCodeAt(++state.position);
        skipSeparationSpace(state, true, nodeIndent);
        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
        valueNode = state.result;
      }

    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));
    } else {
      _result.push(keyNode);
    }

    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if (ch === 0x2C /* , */) {
        readNext = true;
        ch = state.input.charCodeAt(++state.position);
      } else {
      readNext = false;
    }
  }

  throwError(state, 'unexpected end of the stream within a flow collection');
}

function readBlockScalar(state, nodeIndent) {
  var captureStart,
      folding,
      chomping = CHOMPING_CLIP,
      didReadContent = false,
      detectedIndent = false,
      textIndent = nodeIndent,
      emptyLines = 0,
      atMoreIndented = false,
      tmp,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x7C /* | */) {
      folding = false;
    } else if (ch === 0x3E /* > */) {
      folding = true;
    } else {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';

  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);

    if (ch === 0x2B /* + */ || ch === 0x2D /* - */) {
        if (CHOMPING_CLIP === chomping) {
          chomping = ch === 0x2B /* + */ ? CHOMPING_KEEP : CHOMPING_STRIP;
        } else {
          throwError(state, 'repeat of a chomping mode identifier');
        }
      } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, 'repeat of an indentation width identifier');
      }
    } else {
      break;
    }
  }

  if (is_WHITE_SPACE(ch)) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (is_WHITE_SPACE(ch));

    if (ch === 0x23 /* # */) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (!is_EOL(ch) && ch !== 0);
      }
  }

  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;

    ch = state.input.charCodeAt(state.position);

    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 0x20 /* Space */) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }

    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }

    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }

    // End of the scalar.
    if (state.lineIndent < textIndent) {

      // Perform the chomping.
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) {
          // i.e. only if the scalar is not empty.
          state.result += '\n';
        }
      }

      // Break this `while` cycle and go to the funciton's epilogue.
      break;
    }

    // Folded style: use fancy rules to handle line breaks.
    if (folding) {

      // Lines starting with white space characters (more-indented lines) are not folded.
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        // except for the first content line (cf. Example 8.1)
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);

        // End of more-indented block.
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat('\n', emptyLines + 1);

        // Just one line break - perceive as the same line.
      } else if (emptyLines === 0) {
        if (didReadContent) {
          // i.e. only if we have already read some scalar content.
          state.result += ' ';
        }

        // Several line breaks - perceive as different lines.
      } else {
        state.result += common.repeat('\n', emptyLines);
      }

      // Literal style: just add exact number of line breaks between content lines.
    } else {
      // Keep all line breaks except the header line break.
      state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
    }

    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;

    while (!is_EOL(ch) && ch !== 0) {
      ch = state.input.charCodeAt(++state.position);
    }

    captureSegment(state, captureStart, state.position, false);
  }

  return true;
}

function readBlockSequence(state, nodeIndent) {
  var _line,
      _tag = state.tag,
      _anchor = state.anchor,
      _result = [],
      following,
      detected = false,
      ch;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {

    if (ch !== 0x2D /* - */) {
        break;
      }

    following = state.input.charCodeAt(state.position + 1);

    if (!is_WS_OR_EOL(following)) {
      break;
    }

    detected = true;
    state.position++;

    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }

    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);

    ch = state.input.charCodeAt(state.position);

    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, 'bad indentation of a sequence entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'sequence';
    state.result = _result;
    return true;
  }
  return false;
}

function readBlockMapping(state, nodeIndent, flowIndent) {
  var following,
      allowCompact,
      _line,
      _pos,
      _tag = state.tag,
      _anchor = state.anchor,
      _result = {},
      overridableKeys = {},
      keyTag = null,
      keyNode = null,
      valueNode = null,
      atExplicitKey = false,
      detected = false,
      ch;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    following = state.input.charCodeAt(state.position + 1);
    _line = state.line; // Save the current line.
    _pos = state.position;

    //
    // Explicit notation case. There are two separate blocks:
    // first for the key (denoted by "?") and second for the value (denoted by ":")
    //
    if ((ch === 0x3F /* ? */ || ch === 0x3A /* : */) && is_WS_OR_EOL(following)) {

      if (ch === 0x3F /* ? */) {
          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
            keyTag = keyNode = valueNode = null;
          }

          detected = true;
          atExplicitKey = true;
          allowCompact = true;
        } else if (atExplicitKey) {
        // i.e. 0x3A/* : */ === character after the explicit key.
        atExplicitKey = false;
        allowCompact = true;
      } else {
        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');
      }

      state.position += 1;
      ch = following;

      //
      // Implicit notation case. Flow-style node as the key first, then ":", and the value.
      //
    } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {

      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);

        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }

        if (ch === 0x3A /* : */) {
            ch = state.input.charCodeAt(++state.position);

            if (!is_WS_OR_EOL(ch)) {
              throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
            }

            if (atExplicitKey) {
              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
              keyTag = keyNode = valueNode = null;
            }

            detected = true;
            atExplicitKey = false;
            allowCompact = false;
            keyTag = state.tag;
            keyNode = state.result;
          } else if (detected) {
          throwError(state, 'can not read an implicit mapping pair; a colon is missed');
        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true; // Keep the result of `composeNode`.
        }
      } else if (detected) {
        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');
      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true; // Keep the result of `composeNode`.
      }
    } else {
        break; // Reading is done. Go to the epilogue.
      }

    //
    // Common reading code for both explicit and implicit notations.
    //
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }

      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
        keyTag = keyNode = valueNode = null;
      }

      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }

    if (state.lineIndent > nodeIndent && ch !== 0) {
      throwError(state, 'bad indentation of a mapping entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  //
  // Epilogue.
  //

  // Special case: last mapping's node contains only the key in explicit notation.
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
  }

  // Expose the resulting mapping.
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'mapping';
    state.result = _result;
  }

  return detected;
}

function readTagProperty(state) {
  var _position,
      isVerbatim = false,
      isNamed = false,
      tagHandle,
      tagName,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x21 /* ! */) return false;

  if (state.tag !== null) {
    throwError(state, 'duplication of a tag property');
  }

  ch = state.input.charCodeAt(++state.position);

  if (ch === 0x3C /* < */) {
      isVerbatim = true;
      ch = state.input.charCodeAt(++state.position);
    } else if (ch === 0x21 /* ! */) {
      isNamed = true;
      tagHandle = '!!';
      ch = state.input.charCodeAt(++state.position);
    } else {
    tagHandle = '!';
  }

  _position = state.position;

  if (isVerbatim) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (ch !== 0 && ch !== 0x3E /* > */);

    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, 'unexpected end of the stream within a verbatim tag');
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {

      if (ch === 0x21 /* ! */) {
          if (!isNamed) {
            tagHandle = state.input.slice(_position - 1, state.position + 1);

            if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
              throwError(state, 'named tag handle cannot contain such characters');
            }

            isNamed = true;
            _position = state.position + 1;
          } else {
            throwError(state, 'tag suffix cannot contain exclamation marks');
          }
        }

      ch = state.input.charCodeAt(++state.position);
    }

    tagName = state.input.slice(_position, state.position);

    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, 'tag suffix cannot contain flow indicator characters');
    }
  }

  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, 'tag name cannot contain such characters: ' + tagName);
  }

  if (isVerbatim) {
    state.tag = tagName;
  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;
  } else if (tagHandle === '!') {
    state.tag = '!' + tagName;
  } else if (tagHandle === '!!') {
    state.tag = 'tag:yaml.org,2002:' + tagName;
  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }

  return true;
}

function readAnchorProperty(state) {
  var _position, ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x26 /* & */) return false;

  if (state.anchor !== null) {
    throwError(state, 'duplication of an anchor property');
  }

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an anchor node must contain at least one character');
  }

  state.anchor = state.input.slice(_position, state.position);
  return true;
}

function readAlias(state) {
  var _position, alias, ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x2A /* * */) return false;

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an alias node must contain at least one character');
  }

  alias = state.input.slice(_position, state.position);

  if (!state.anchorMap.hasOwnProperty(alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }

  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}

function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles,
      allowBlockScalars,
      allowBlockCollections,
      indentStatus = 1,
      // 1: this>parent, 0: this=parent, -1: this<parent
  atNewLine = false,
      hasContent = false,
      typeIndex,
      typeQuantity,
      type,
      flowIndent,
      blockIndent;

  if (state.listener !== null) {
    state.listener('open', state);
  }

  state.tag = null;
  state.anchor = null;
  state.kind = null;
  state.result = null;

  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;

  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;

      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }

  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;

        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }

  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }

  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }

    blockIndent = state.position - state.lineStart;

    if (indentStatus === 1) {
      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;
        } else if (readAlias(state)) {
          hasContent = true;

          if (state.tag !== null || state.anchor !== null) {
            throwError(state, 'alias node should not have any properties');
          }
        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;

          if (state.tag === null) {
            state.tag = '?';
          }
        }

        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      // Special case: block sequences are allowed to have same indentation level as the parent.
      // http://www.yaml.org/spec/1.2/spec.html#id2799784
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }

  if (state.tag !== null && state.tag !== '!') {
    if (state.tag === '?') {
      for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
        type = state.implicitTypes[typeIndex];

        // Implicit resolving is not allowed for non-scalar types, and '?'
        // non-specific tag is only assigned to plain scalars. So, it isn't
        // needed to check for 'kind' conformity.

        if (type.resolve(state.result)) {
          // `state.result` updated in resolver if matched
          state.result = type.construct(state.result);
          state.tag = type.tag;
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
          break;
        }
      }
    } else if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {
      type = state.typeMap[state.kind || 'fallback'][state.tag];

      if (state.result !== null && type.kind !== state.kind) {
        throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
      }

      if (!type.resolve(state.result)) {
        // `state.result` updated in resolver if matched
        throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
      } else {
        state.result = type.construct(state.result);
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else {
      throwError(state, 'unknown tag !<' + state.tag + '>');
    }
  }

  if (state.listener !== null) {
    state.listener('close', state);
  }
  return state.tag !== null || state.anchor !== null || hasContent;
}

function readDocument(state) {
  var documentStart = state.position,
      _position,
      directiveName,
      directiveArgs,
      hasDirectives = false,
      ch;

  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = {};
  state.anchorMap = {};

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);

    ch = state.input.charCodeAt(state.position);

    if (state.lineIndent > 0 || ch !== 0x25 /* % */) {
        break;
      }

    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;

    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }

    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];

    if (directiveName.length < 1) {
      throwError(state, 'directive name must not be less than one character in length');
    }

    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      if (ch === 0x23 /* # */) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 0 && !is_EOL(ch));
          break;
        }

      if (is_EOL(ch)) break;

      _position = state.position;

      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      directiveArgs.push(state.input.slice(_position, state.position));
    }

    if (ch !== 0) readLineBreak(state);

    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }

  skipSeparationSpace(state, true, -1);

  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 0x2D /* - */ && state.input.charCodeAt(state.position + 1) === 0x2D /* - */ && state.input.charCodeAt(state.position + 2) === 0x2D /* - */) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    } else if (hasDirectives) {
    throwError(state, 'directives end mark is expected');
  }

  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);

  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, 'non-ASCII line breaks are interpreted as content');
  }

  state.documents.push(state.result);

  if (state.position === state.lineStart && testDocumentSeparator(state)) {

    if (state.input.charCodeAt(state.position) === 0x2E /* . */) {
        state.position += 3;
        skipSeparationSpace(state, true, -1);
      }
    return;
  }

  if (state.position < state.length - 1) {
    throwError(state, 'end of the stream or a document separator is expected');
  } else {
    return;
  }
}

function loadDocuments(input, options) {
  input = String(input);
  options = options || {};

  if (input.length !== 0) {

    // Add tailing `\n` if not exists
    if (input.charCodeAt(input.length - 1) !== 0x0A /* LF */ && input.charCodeAt(input.length - 1) !== 0x0D /* CR */) {
        input += '\n';
      }

    // Strip BOM
    if (input.charCodeAt(0) === 0xFEFF) {
      input = input.slice(1);
    }
  }

  var state = new State(input, options);

  // Use 0 as string terminator. That significantly simplifies bounds check.
  state.input += '\0';

  while (state.input.charCodeAt(state.position) === 0x20 /* Space */) {
    state.lineIndent += 1;
    state.position += 1;
  }

  while (state.position < state.length - 1) {
    readDocument(state);
  }

  return state.documents;
}

function loadAll(input, iterator, options) {
  var documents = loadDocuments(input, options),
      index,
      length;

  if (typeof iterator !== 'function') {
    return documents;
  }

  for (index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index]);
  }
}

function load(input, options) {
  var documents = loadDocuments(input, options);

  if (documents.length === 0) {
    /*eslint-disable no-undefined*/
    return undefined;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new YAMLException('expected a single document in the stream, but found more');
}

function safeLoadAll(input, output, options) {
  if (typeof output === 'function') {
    loadAll(input, output, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
  } else {
    return loadAll(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
  }
}

function safeLoad(input, options) {
  return load(input, common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
}

module.exports.loadAll = loadAll;
module.exports.load = load;
module.exports.safeLoadAll = safeLoadAll;
module.exports.safeLoad = safeLoad;

},{"./common":162,"./exception":164,"./mark":166,"./schema/default_full":169,"./schema/default_safe":170}],166:[function(require,module,exports){
'use strict';

var common = require('./common');

function Mark(name, buffer, position, line, column) {
  this.name = name;
  this.buffer = buffer;
  this.position = position;
  this.line = line;
  this.column = column;
}

Mark.prototype.getSnippet = function getSnippet(indent, maxLength) {
  var head, start, tail, end, snippet;

  if (!this.buffer) return null;

  indent = indent || 4;
  maxLength = maxLength || 75;

  head = '';
  start = this.position;

  while (start > 0 && '\0\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(start - 1)) === -1) {
    start -= 1;
    if (this.position - start > maxLength / 2 - 1) {
      head = ' ... ';
      start += 5;
      break;
    }
  }

  tail = '';
  end = this.position;

  while (end < this.buffer.length && '\0\r\n\x85\u2028\u2029'.indexOf(this.buffer.charAt(end)) === -1) {
    end += 1;
    if (end - this.position > maxLength / 2 - 1) {
      tail = ' ... ';
      end -= 5;
      break;
    }
  }

  snippet = this.buffer.slice(start, end);

  return common.repeat(' ', indent) + head + snippet + tail + '\n' + common.repeat(' ', indent + this.position - start + head.length) + '^';
};

Mark.prototype.toString = function toString(compact) {
  var snippet,
      where = '';

  if (this.name) {
    where += 'in "' + this.name + '" ';
  }

  where += 'at line ' + (this.line + 1) + ', column ' + (this.column + 1);

  if (!compact) {
    snippet = this.getSnippet();

    if (snippet) {
      where += ':\n' + snippet;
    }
  }

  return where;
};

module.exports = Mark;

},{"./common":162}],167:[function(require,module,exports){
'use strict';

/*eslint-disable max-len*/

var common = require('./common');
var YAMLException = require('./exception');
var Type = require('./type');

function compileList(schema, name, result) {
  var exclude = [];

  schema.include.forEach(function (includedSchema) {
    result = compileList(includedSchema, name, result);
  });

  schema[name].forEach(function (currentType) {
    result.forEach(function (previousType, previousIndex) {
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
        exclude.push(previousIndex);
      }
    });

    result.push(currentType);
  });

  return result.filter(function (type, index) {
    return exclude.indexOf(index) === -1;
  });
}

function compileMap() /* lists... */{
  var result = {
    scalar: {},
    sequence: {},
    mapping: {},
    fallback: {}
  },
      index,
      length;

  function collectType(type) {
    result[type.kind][type.tag] = result['fallback'][type.tag] = type;
  }

  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }
  return result;
}

function Schema(definition) {
  this.include = definition.include || [];
  this.implicit = definition.implicit || [];
  this.explicit = definition.explicit || [];

  this.implicit.forEach(function (type) {
    if (type.loadKind && type.loadKind !== 'scalar') {
      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
    }
  });

  this.compiledImplicit = compileList(this, 'implicit', []);
  this.compiledExplicit = compileList(this, 'explicit', []);
  this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);
}

Schema.DEFAULT = null;

Schema.create = function createSchema() {
  var schemas, types;

  switch (arguments.length) {
    case 1:
      schemas = Schema.DEFAULT;
      types = arguments[0];
      break;

    case 2:
      schemas = arguments[0];
      types = arguments[1];
      break;

    default:
      throw new YAMLException('Wrong number of arguments for Schema.create function');
  }

  schemas = common.toArray(schemas);
  types = common.toArray(types);

  if (!schemas.every(function (schema) {
    return schema instanceof Schema;
  })) {
    throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');
  }

  if (!types.every(function (type) {
    return type instanceof Type;
  })) {
    throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');
  }

  return new Schema({
    include: schemas,
    explicit: types
  });
};

module.exports = Schema;

},{"./common":162,"./exception":164,"./type":173}],168:[function(require,module,exports){
// Standard YAML's Core schema.
// http://www.yaml.org/spec/1.2/spec.html#id2804923
//
// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
// So, Core schema has no distinctions from JSON schema is JS-YAML.


'use strict';

var Schema = require('../schema');

module.exports = new Schema({
  include: [require('./json')]
});

},{"../schema":167,"./json":172}],169:[function(require,module,exports){
// JS-YAML's default schema for `load` function.
// It is not described in the YAML specification.
//
// This schema is based on JS-YAML's default safe schema and includes
// JavaScript-specific types: !!js/undefined, !!js/regexp and !!js/function.
//
// Also this schema is used as default base schema at `Schema.create` function.


'use strict';

var Schema = require('../schema');

module.exports = Schema.DEFAULT = new Schema({
  include: [require('./default_safe')],
  explicit: [require('../type/js/undefined'), require('../type/js/regexp'), require('../type/js/function')]
});

},{"../schema":167,"../type/js/function":178,"../type/js/regexp":179,"../type/js/undefined":180,"./default_safe":170}],170:[function(require,module,exports){
// JS-YAML's default schema for `safeLoad` function.
// It is not described in the YAML specification.
//
// This schema is based on standard YAML's Core schema and includes most of
// extra types described at YAML tag repository. (http://yaml.org/type/)


'use strict';

var Schema = require('../schema');

module.exports = new Schema({
  include: [require('./core')],
  implicit: [require('../type/timestamp'), require('../type/merge')],
  explicit: [require('../type/binary'), require('../type/omap'), require('../type/pairs'), require('../type/set')]
});

},{"../schema":167,"../type/binary":174,"../type/merge":182,"../type/omap":184,"../type/pairs":185,"../type/set":187,"../type/timestamp":189,"./core":168}],171:[function(require,module,exports){
// Standard YAML's Failsafe schema.
// http://www.yaml.org/spec/1.2/spec.html#id2802346


'use strict';

var Schema = require('../schema');

module.exports = new Schema({
  explicit: [require('../type/str'), require('../type/seq'), require('../type/map')]
});

},{"../schema":167,"../type/map":181,"../type/seq":186,"../type/str":188}],172:[function(require,module,exports){
// Standard YAML's JSON schema.
// http://www.yaml.org/spec/1.2/spec.html#id2803231
//
// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.
// So, this schema is not such strict as defined in the YAML specification.
// It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.


'use strict';

var Schema = require('../schema');

module.exports = new Schema({
  include: [require('./failsafe')],
  implicit: [require('../type/null'), require('../type/bool'), require('../type/int'), require('../type/float')]
});

},{"../schema":167,"../type/bool":175,"../type/float":176,"../type/int":177,"../type/null":183,"./failsafe":171}],173:[function(require,module,exports){
'use strict';

var YAMLException = require('./exception');

var TYPE_CONSTRUCTOR_OPTIONS = ['kind', 'resolve', 'construct', 'instanceOf', 'predicate', 'represent', 'defaultStyle', 'styleAliases'];

var YAML_NODE_KINDS = ['scalar', 'sequence', 'mapping'];

function compileStyleAliases(map) {
  var result = {};

  if (map !== null) {
    Object.keys(map).forEach(function (style) {
      map[style].forEach(function (alias) {
        result[String(alias)] = style;
      });
    });
  }

  return result;
}

function Type(tag, options) {
  options = options || {};

  Object.keys(options).forEach(function (name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });

  // TODO: Add tag format check.
  this.tag = tag;
  this.kind = options['kind'] || null;
  this.resolve = options['resolve'] || function () {
    return true;
  };
  this.construct = options['construct'] || function (data) {
    return data;
  };
  this.instanceOf = options['instanceOf'] || null;
  this.predicate = options['predicate'] || null;
  this.represent = options['represent'] || null;
  this.defaultStyle = options['defaultStyle'] || null;
  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);

  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}

module.exports = Type;

},{"./exception":164}],174:[function(require,module,exports){
'use strict';

/*eslint-disable no-bitwise*/

var NodeBuffer;

try {
  // A trick for browserified version, to not include `Buffer` shim
  var _require = require;
  NodeBuffer = _require('buffer').Buffer;
} catch (__) {}

var Type = require('../type');

// [ 64, 65, 66 ] -> [ padding, CR, LF ]
var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';

function resolveYamlBinary(data) {
  if (data === null) return false;

  var code,
      idx,
      bitlen = 0,
      max = data.length,
      map = BASE64_MAP;

  // Convert one by one.
  for (idx = 0; idx < max; idx++) {
    code = map.indexOf(data.charAt(idx));

    // Skip CR/LF
    if (code > 64) continue;

    // Fail on illegal characters
    if (code < 0) return false;

    bitlen += 6;
  }

  // If there are any bits left, source was corrupted
  return bitlen % 8 === 0;
}

function constructYamlBinary(data) {
  var idx,
      tailbits,
      input = data.replace(/[\r\n=]/g, ''),
      // remove CR/LF & padding to simplify scan
  max = input.length,
      map = BASE64_MAP,
      bits = 0,
      result = [];

  // Collect by 6*4 bits (3 bytes)

  for (idx = 0; idx < max; idx++) {
    if (idx % 4 === 0 && idx) {
      result.push(bits >> 16 & 0xFF);
      result.push(bits >> 8 & 0xFF);
      result.push(bits & 0xFF);
    }

    bits = bits << 6 | map.indexOf(input.charAt(idx));
  }

  // Dump tail

  tailbits = max % 4 * 6;

  if (tailbits === 0) {
    result.push(bits >> 16 & 0xFF);
    result.push(bits >> 8 & 0xFF);
    result.push(bits & 0xFF);
  } else if (tailbits === 18) {
    result.push(bits >> 10 & 0xFF);
    result.push(bits >> 2 & 0xFF);
  } else if (tailbits === 12) {
    result.push(bits >> 4 & 0xFF);
  }

  // Wrap into Buffer for NodeJS and leave Array for browser
  if (NodeBuffer) {
    // Support node 6.+ Buffer API when available
    return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);
  }

  return result;
}

function representYamlBinary(object /*, style*/) {
  var result = '',
      bits = 0,
      idx,
      tail,
      max = object.length,
      map = BASE64_MAP;

  // Convert every three bytes to 4 ASCII characters.

  for (idx = 0; idx < max; idx++) {
    if (idx % 3 === 0 && idx) {
      result += map[bits >> 18 & 0x3F];
      result += map[bits >> 12 & 0x3F];
      result += map[bits >> 6 & 0x3F];
      result += map[bits & 0x3F];
    }

    bits = (bits << 8) + object[idx];
  }

  // Dump tail

  tail = max % 3;

  if (tail === 0) {
    result += map[bits >> 18 & 0x3F];
    result += map[bits >> 12 & 0x3F];
    result += map[bits >> 6 & 0x3F];
    result += map[bits & 0x3F];
  } else if (tail === 2) {
    result += map[bits >> 10 & 0x3F];
    result += map[bits >> 4 & 0x3F];
    result += map[bits << 2 & 0x3F];
    result += map[64];
  } else if (tail === 1) {
    result += map[bits >> 2 & 0x3F];
    result += map[bits << 4 & 0x3F];
    result += map[64];
    result += map[64];
  }

  return result;
}

function isBinary(object) {
  return NodeBuffer && NodeBuffer.isBuffer(object);
}

module.exports = new Type('tag:yaml.org,2002:binary', {
  kind: 'scalar',
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});

},{"../type":173}],175:[function(require,module,exports){
'use strict';

var Type = require('../type');

function resolveYamlBoolean(data) {
  if (data === null) return false;

  var max = data.length;

  return max === 4 && (data === 'true' || data === 'True' || data === 'TRUE') || max === 5 && (data === 'false' || data === 'False' || data === 'FALSE');
}

function constructYamlBoolean(data) {
  return data === 'true' || data === 'True' || data === 'TRUE';
}

function isBoolean(object) {
  return Object.prototype.toString.call(object) === '[object Boolean]';
}

module.exports = new Type('tag:yaml.org,2002:bool', {
  kind: 'scalar',
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function lowercase(object) {
      return object ? 'true' : 'false';
    },
    uppercase: function uppercase(object) {
      return object ? 'TRUE' : 'FALSE';
    },
    camelcase: function camelcase(object) {
      return object ? 'True' : 'False';
    }
  },
  defaultStyle: 'lowercase'
});

},{"../type":173}],176:[function(require,module,exports){
'use strict';

var common = require('../common');
var Type = require('../type');

var YAML_FLOAT_PATTERN = new RegExp(
// 2.5e4, 2.5 and integers
'^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +
// .2e4, .2
// special case, seems not from spec
'|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +
// 20:59
'|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*' +
// .inf
'|[-+]?\\.(?:inf|Inf|INF)' +
// .nan
'|\\.(?:nan|NaN|NAN))$');

function resolveYamlFloat(data) {
  if (data === null) return false;

  if (!YAML_FLOAT_PATTERN.test(data) ||
  // Quick hack to not allow integers end with `_`
  // Probably should update regexp & check speed
  data[data.length - 1] === '_') {
    return false;
  }

  return true;
}

function constructYamlFloat(data) {
  var value, sign, base, digits;

  value = data.replace(/_/g, '').toLowerCase();
  sign = value[0] === '-' ? -1 : 1;
  digits = [];

  if ('+-'.indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }

  if (value === '.inf') {
    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
  } else if (value === '.nan') {
    return NaN;
  } else if (value.indexOf(':') >= 0) {
    value.split(':').forEach(function (v) {
      digits.unshift(parseFloat(v, 10));
    });

    value = 0.0;
    base = 1;

    digits.forEach(function (d) {
      value += d * base;
      base *= 60;
    });

    return sign * value;
  }
  return sign * parseFloat(value, 10);
}

var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;

function representYamlFloat(object, style) {
  var res;

  if (isNaN(object)) {
    switch (style) {
      case 'lowercase':
        return '.nan';
      case 'uppercase':
        return '.NAN';
      case 'camelcase':
        return '.NaN';
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase':
        return '.inf';
      case 'uppercase':
        return '.INF';
      case 'camelcase':
        return '.Inf';
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase':
        return '-.inf';
      case 'uppercase':
        return '-.INF';
      case 'camelcase':
        return '-.Inf';
    }
  } else if (common.isNegativeZero(object)) {
    return '-0.0';
  }

  res = object.toString(10);

  // JS stringifier can build scientific format without dots: 5e-100,
  // while YAML requres dot: 5.e-100. Fix it with simple hack

  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
}

function isFloat(object) {
  return Object.prototype.toString.call(object) === '[object Number]' && (object % 1 !== 0 || common.isNegativeZero(object));
}

module.exports = new Type('tag:yaml.org,2002:float', {
  kind: 'scalar',
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: 'lowercase'
});

},{"../common":162,"../type":173}],177:[function(require,module,exports){
'use strict';

var common = require('../common');
var Type = require('../type');

function isHexCode(c) {
  return 0x30 /* 0 */ <= c && c <= 0x39 /* 9 */ || 0x41 /* A */ <= c && c <= 0x46 /* F */ || 0x61 /* a */ <= c && c <= 0x66 /* f */;
}

function isOctCode(c) {
  return 0x30 /* 0 */ <= c && c <= 0x37 /* 7 */;
}

function isDecCode(c) {
  return 0x30 /* 0 */ <= c && c <= 0x39 /* 9 */;
}

function resolveYamlInteger(data) {
  if (data === null) return false;

  var max = data.length,
      index = 0,
      hasDigits = false,
      ch;

  if (!max) return false;

  ch = data[index];

  // sign
  if (ch === '-' || ch === '+') {
    ch = data[++index];
  }

  if (ch === '0') {
    // 0
    if (index + 1 === max) return true;
    ch = data[++index];

    // base 2, base 8, base 16

    if (ch === 'b') {
      // base 2
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (ch !== '0' && ch !== '1') return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }

    if (ch === 'x') {
      // base 16
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isHexCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }

    // base 8
    for (; index < max; index++) {
      ch = data[index];
      if (ch === '_') continue;
      if (!isOctCode(data.charCodeAt(index))) return false;
      hasDigits = true;
    }
    return hasDigits && ch !== '_';
  }

  // base 10 (except 0) or base 60

  // value should not start with `_`;
  if (ch === '_') return false;

  for (; index < max; index++) {
    ch = data[index];
    if (ch === '_') continue;
    if (ch === ':') break;
    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }
    hasDigits = true;
  }

  // Should have digits and should not end with `_`
  if (!hasDigits || ch === '_') return false;

  // if !base60 - done;
  if (ch !== ':') return true;

  // base60 almost not used, no needs to optimize
  return (/^(:[0-5]?[0-9])+$/.test(data.slice(index))
  );
}

function constructYamlInteger(data) {
  var value = data,
      sign = 1,
      ch,
      base,
      digits = [];

  if (value.indexOf('_') !== -1) {
    value = value.replace(/_/g, '');
  }

  ch = value[0];

  if (ch === '-' || ch === '+') {
    if (ch === '-') sign = -1;
    value = value.slice(1);
    ch = value[0];
  }

  if (value === '0') return 0;

  if (ch === '0') {
    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);
    if (value[1] === 'x') return sign * parseInt(value, 16);
    return sign * parseInt(value, 8);
  }

  if (value.indexOf(':') !== -1) {
    value.split(':').forEach(function (v) {
      digits.unshift(parseInt(v, 10));
    });

    value = 0;
    base = 1;

    digits.forEach(function (d) {
      value += d * base;
      base *= 60;
    });

    return sign * value;
  }

  return sign * parseInt(value, 10);
}

function isInteger(object) {
  return Object.prototype.toString.call(object) === '[object Number]' && object % 1 === 0 && !common.isNegativeZero(object);
}

module.exports = new Type('tag:yaml.org,2002:int', {
  kind: 'scalar',
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary: function binary(obj) {
      return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);
    },
    octal: function octal(obj) {
      return obj >= 0 ? '0' + obj.toString(8) : '-0' + obj.toString(8).slice(1);
    },
    decimal: function decimal(obj) {
      return obj.toString(10);
    },
    /* eslint-disable max-len */
    hexadecimal: function hexadecimal(obj) {
      return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);
    }
  },
  defaultStyle: 'decimal',
  styleAliases: {
    binary: [2, 'bin'],
    octal: [8, 'oct'],
    decimal: [10, 'dec'],
    hexadecimal: [16, 'hex']
  }
});

},{"../common":162,"../type":173}],178:[function(require,module,exports){
'use strict';

var esprima;

// Browserified version does not have esprima
//
// 1. For node.js just require module as deps
// 2. For browser try to require mudule via external AMD system.
//    If not found - try to fallback to window.esprima. If not
//    found too - then fail to parse.
//
try {
  // workaround to exclude package from browserify list.
  var _require = require;
  esprima = _require('esprima');
} catch (_) {
  /*global window */
  if (typeof window !== 'undefined') esprima = window.esprima;
}

var Type = require('../../type');

function resolveJavascriptFunction(data) {
  if (data === null) return false;

  try {
    var source = '(' + data + ')',
        ast = esprima.parse(source, { range: true });

    if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {
      return false;
    }

    return true;
  } catch (err) {
    return false;
  }
}

function constructJavascriptFunction(data) {
  /*jslint evil:true*/

  var source = '(' + data + ')',
      ast = esprima.parse(source, { range: true }),
      params = [],
      body;

  if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {
    throw new Error('Failed to resolve function');
  }

  ast.body[0].expression.params.forEach(function (param) {
    params.push(param.name);
  });

  body = ast.body[0].expression.body.range;

  // Esprima's ranges include the first '{' and the last '}' characters on
  // function expressions. So cut them out.
  if (ast.body[0].expression.body.type === 'BlockStatement') {
    /*eslint-disable no-new-func*/
    return new Function(params, source.slice(body[0] + 1, body[1] - 1));
  }
  // ES6 arrow functions can omit the BlockStatement. In that case, just return
  // the body.
  /*eslint-disable no-new-func*/
  return new Function(params, 'return ' + source.slice(body[0], body[1]));
}

function representJavascriptFunction(object /*, style*/) {
  return object.toString();
}

function isFunction(object) {
  return Object.prototype.toString.call(object) === '[object Function]';
}

module.exports = new Type('tag:yaml.org,2002:js/function', {
  kind: 'scalar',
  resolve: resolveJavascriptFunction,
  construct: constructJavascriptFunction,
  predicate: isFunction,
  represent: representJavascriptFunction
});

},{"../../type":173}],179:[function(require,module,exports){
'use strict';

var Type = require('../../type');

function resolveJavascriptRegExp(data) {
  if (data === null) return false;
  if (data.length === 0) return false;

  var regexp = data,
      tail = /\/([gim]*)$/.exec(data),
      modifiers = '';

  // if regexp starts with '/' it can have modifiers and must be properly closed
  // `/foo/gim` - modifiers tail can be maximum 3 chars
  if (regexp[0] === '/') {
    if (tail) modifiers = tail[1];

    if (modifiers.length > 3) return false;
    // if expression starts with /, is should be properly terminated
    if (regexp[regexp.length - modifiers.length - 1] !== '/') return false;
  }

  return true;
}

function constructJavascriptRegExp(data) {
  var regexp = data,
      tail = /\/([gim]*)$/.exec(data),
      modifiers = '';

  // `/foo/gim` - tail can be maximum 4 chars
  if (regexp[0] === '/') {
    if (tail) modifiers = tail[1];
    regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
  }

  return new RegExp(regexp, modifiers);
}

function representJavascriptRegExp(object /*, style*/) {
  var result = '/' + object.source + '/';

  if (object.global) result += 'g';
  if (object.multiline) result += 'm';
  if (object.ignoreCase) result += 'i';

  return result;
}

function isRegExp(object) {
  return Object.prototype.toString.call(object) === '[object RegExp]';
}

module.exports = new Type('tag:yaml.org,2002:js/regexp', {
  kind: 'scalar',
  resolve: resolveJavascriptRegExp,
  construct: constructJavascriptRegExp,
  predicate: isRegExp,
  represent: representJavascriptRegExp
});

},{"../../type":173}],180:[function(require,module,exports){
'use strict';

var Type = require('../../type');

function resolveJavascriptUndefined() {
  return true;
}

function constructJavascriptUndefined() {
  /*eslint-disable no-undefined*/
  return undefined;
}

function representJavascriptUndefined() {
  return '';
}

function isUndefined(object) {
  return typeof object === 'undefined';
}

module.exports = new Type('tag:yaml.org,2002:js/undefined', {
  kind: 'scalar',
  resolve: resolveJavascriptUndefined,
  construct: constructJavascriptUndefined,
  predicate: isUndefined,
  represent: representJavascriptUndefined
});

},{"../../type":173}],181:[function(require,module,exports){
'use strict';

var Type = require('../type');

module.exports = new Type('tag:yaml.org,2002:map', {
  kind: 'mapping',
  construct: function construct(data) {
    return data !== null ? data : {};
  }
});

},{"../type":173}],182:[function(require,module,exports){
'use strict';

var Type = require('../type');

function resolveYamlMerge(data) {
  return data === '<<' || data === null;
}

module.exports = new Type('tag:yaml.org,2002:merge', {
  kind: 'scalar',
  resolve: resolveYamlMerge
});

},{"../type":173}],183:[function(require,module,exports){
'use strict';

var Type = require('../type');

function resolveYamlNull(data) {
  if (data === null) return true;

  var max = data.length;

  return max === 1 && data === '~' || max === 4 && (data === 'null' || data === 'Null' || data === 'NULL');
}

function constructYamlNull() {
  return null;
}

function isNull(object) {
  return object === null;
}

module.exports = new Type('tag:yaml.org,2002:null', {
  kind: 'scalar',
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function canonical() {
      return '~';
    },
    lowercase: function lowercase() {
      return 'null';
    },
    uppercase: function uppercase() {
      return 'NULL';
    },
    camelcase: function camelcase() {
      return 'Null';
    }
  },
  defaultStyle: 'lowercase'
});

},{"../type":173}],184:[function(require,module,exports){
'use strict';

var Type = require('../type');

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _toString = Object.prototype.toString;

function resolveYamlOmap(data) {
  if (data === null) return true;

  var objectKeys = [],
      index,
      length,
      pair,
      pairKey,
      pairHasKey,
      object = data;

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;

    if (_toString.call(pair) !== '[object Object]') return false;

    for (pairKey in pair) {
      if (_hasOwnProperty.call(pair, pairKey)) {
        if (!pairHasKey) pairHasKey = true;else return false;
      }
    }

    if (!pairHasKey) return false;

    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);else return false;
  }

  return true;
}

function constructYamlOmap(data) {
  return data !== null ? data : [];
}

module.exports = new Type('tag:yaml.org,2002:omap', {
  kind: 'sequence',
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});

},{"../type":173}],185:[function(require,module,exports){
'use strict';

var Type = require('../type');

var _toString = Object.prototype.toString;

function resolveYamlPairs(data) {
  if (data === null) return true;

  var index,
      length,
      pair,
      keys,
      result,
      object = data;

  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];

    if (_toString.call(pair) !== '[object Object]') return false;

    keys = Object.keys(pair);

    if (keys.length !== 1) return false;

    result[index] = [keys[0], pair[keys[0]]];
  }

  return true;
}

function constructYamlPairs(data) {
  if (data === null) return [];

  var index,
      length,
      pair,
      keys,
      result,
      object = data;

  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];

    keys = Object.keys(pair);

    result[index] = [keys[0], pair[keys[0]]];
  }

  return result;
}

module.exports = new Type('tag:yaml.org,2002:pairs', {
  kind: 'sequence',
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});

},{"../type":173}],186:[function(require,module,exports){
'use strict';

var Type = require('../type');

module.exports = new Type('tag:yaml.org,2002:seq', {
  kind: 'sequence',
  construct: function construct(data) {
    return data !== null ? data : [];
  }
});

},{"../type":173}],187:[function(require,module,exports){
'use strict';

var Type = require('../type');

var _hasOwnProperty = Object.prototype.hasOwnProperty;

function resolveYamlSet(data) {
  if (data === null) return true;

  var key,
      object = data;

  for (key in object) {
    if (_hasOwnProperty.call(object, key)) {
      if (object[key] !== null) return false;
    }
  }

  return true;
}

function constructYamlSet(data) {
  return data !== null ? data : {};
}

module.exports = new Type('tag:yaml.org,2002:set', {
  kind: 'mapping',
  resolve: resolveYamlSet,
  construct: constructYamlSet
});

},{"../type":173}],188:[function(require,module,exports){
'use strict';

var Type = require('../type');

module.exports = new Type('tag:yaml.org,2002:str', {
  kind: 'scalar',
  construct: function construct(data) {
    return data !== null ? data : '';
  }
});

},{"../type":173}],189:[function(require,module,exports){
'use strict';

var Type = require('../type');

var YAML_DATE_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year
'-([0-9][0-9])' + // [2] month
'-([0-9][0-9])$'); // [3] day

var YAML_TIMESTAMP_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year
'-([0-9][0-9]?)' + // [2] month
'-([0-9][0-9]?)' + // [3] day
'(?:[Tt]|[ \\t]+)' + // ...
'([0-9][0-9]?)' + // [4] hour
':([0-9][0-9])' + // [5] minute
':([0-9][0-9])' + // [6] second
'(?:\\.([0-9]*))?' + // [7] fraction
'(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour
'(?::([0-9][0-9]))?))?$'); // [11] tz_minute

function resolveYamlTimestamp(data) {
  if (data === null) return false;
  if (YAML_DATE_REGEXP.exec(data) !== null) return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
  return false;
}

function constructYamlTimestamp(data) {
  var match,
      year,
      month,
      day,
      hour,
      minute,
      second,
      fraction = 0,
      delta = null,
      tz_hour,
      tz_minute,
      date;

  match = YAML_DATE_REGEXP.exec(data);
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);

  if (match === null) throw new Error('Date resolve error');

  // match: [1] year [2] month [3] day

  year = +match[1];
  month = +match[2] - 1; // JS month starts with 0
  day = +match[3];

  if (!match[4]) {
    // no hour
    return new Date(Date.UTC(year, month, day));
  }

  // match: [4] hour [5] minute [6] second [7] fraction

  hour = +match[4];
  minute = +match[5];
  second = +match[6];

  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) {
      // milli-seconds
      fraction += '0';
    }
    fraction = +fraction;
  }

  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute

  if (match[9]) {
    tz_hour = +match[10];
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds
    if (match[9] === '-') delta = -delta;
  }

  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));

  if (delta) date.setTime(date.getTime() - delta);

  return date;
}

function representYamlTimestamp(object /*, style*/) {
  return object.toISOString();
}

module.exports = new Type('tag:yaml.org,2002:timestamp', {
  kind: 'scalar',
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});

},{"../type":173}],190:[function(require,module,exports){
(function (process){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _interopDefault(ex) {
    return ex && (typeof ex === 'undefined' ? 'undefined' : _typeof(ex)) === 'object' && 'default' in ex ? ex['default'] : ex;
}

var $RefParser = _interopDefault(require('json-schema-ref-parser'));
var deref = _interopDefault(require('deref'));
var tslib_1 = require('tslib');

// dynamic proxy for custom generators
function proxy(gen) {
    return function (value, schema, property) {
        var fn = value;
        var args = [];
        // support for nested object, first-key is the generator
        if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
            fn = Object.keys(value)[0];
            // treat the given array as arguments,
            if (Array.isArray(value[fn])) {
                // if the generator is expecting arrays they should be nested, e.g. `[[1, 2, 3], true, ...]`
                args = value[fn];
            } else {
                args.push(value[fn]);
            }
        }
        // support for keypaths, e.g. "internet.email"
        var props = fn.split('.');
        // retrieve a fresh dependency
        var ctx = gen();
        while (props.length > 1) {
            ctx = ctx[props.shift()];
        }
        // retrieve last value from context object
        value = (typeof ctx === 'undefined' ? 'undefined' : _typeof(ctx)) === 'object' ? ctx[props[0]] : ctx;
        // invoke dynamic generators
        if (typeof value === 'function') {
            value = value.apply(ctx, args);
        }
        // test for pending callbacks
        if (Object.prototype.toString.call(value) === '[object Object]') {
            for (var key in value) {
                if (typeof value[key] === 'function') {
                    throw new Error('Cannot resolve value for "' + property + ': ' + fn + '", given: ' + value);
                }
            }
        }
        return value;
    };
}
/**
 * Container is used to wrap external generators (faker, chance, casual, etc.) and its dependencies.
 *
 * - `jsf.extend('faker')` will enhance or define the given dependency.
 * - `jsf.define('faker')` will provide the "faker" keyword support.
 *
 * RandExp is not longer considered an "extension".
 */
var Container = function () {
    function Container() {
        // dynamic requires - handle all dependencies
        // they will NOT be included on the bundle
        this.registry = {};
        this.support = {};
    }
    /**
     * Override dependency given by name
     * @param name
     * @param callback
     */
    Container.prototype.extend = function (name, callback) {
        var _this = this;
        this.registry[name] = callback(this.registry[name]);
        // built-in proxy (can be overridden)
        if (!this.support[name]) {
            this.support[name] = proxy(function () {
                return _this.registry[name];
            });
        }
    };
    /**
     * Set keyword support by name
     * @param name
     * @param callback
     */
    Container.prototype.define = function (name, callback) {
        this.support[name] = callback;
    };
    /**
     * Returns dependency given by name
     * @param name
     * @returns {Dependency}
     */
    Container.prototype.get = function (name) {
        if (typeof this.registry[name] === 'undefined') {
            throw new ReferenceError('"' + name + '" dependency doesn\'t exist.');
        }
        return this.registry[name];
    };
    /**
     * Apply a custom keyword
     * @param schema
     */
    Container.prototype.wrap = function (schema) {
        var keys = Object.keys(schema);
        var length = keys.length;
        while (length--) {
            var fn = keys[length].replace(/^x-/, '');
            var gen = this.support[fn];
            if (typeof gen === 'function') {
                schema.generate = function () {
                    return gen(schema[keys[length]], schema, keys[length]);
                };
                break;
            }
        }
        return schema;
    };
    return Container;
}();

/**
 * This class defines a registry for custom formats used within JSF.
 */
var Registry = function () {
    function Registry() {
        // empty by default
        this.data = {};
    }
    /**
     * Registers custom format
     */
    Registry.prototype.register = function (name, callback) {
        this.data[name] = callback;
    };
    /**
     * Register many formats at one shot
     */
    Registry.prototype.registerMany = function (formats) {
        for (var name in formats) {
            this.data[name] = formats[name];
        }
    };
    /**
     * Returns element by registry key
     */
    Registry.prototype.get = function (name) {
        var format = this.data[name];
        return format;
    };
    /**
     * Returns the whole registry content
     */
    Registry.prototype.list = function () {
        return this.data;
    };
    return Registry;
}();

// instantiate
var registry = new Registry();
/**
 * Custom format API
 *
 * @see https://github.com/json-schema-faker/json-schema-faker#custom-formats
 * @param nameOrFormatMap
 * @param callback
 * @returns {any}
 */
function formatAPI(nameOrFormatMap, callback) {
    if (typeof nameOrFormatMap === 'undefined') {
        return registry.list();
    } else if (typeof nameOrFormatMap === 'string') {
        if (typeof callback === 'function') {
            registry.register(nameOrFormatMap, callback);
        } else {
            return registry.get(nameOrFormatMap);
        }
    } else {
        registry.registerMany(nameOrFormatMap);
    }
}

/**
 * This class defines a registry for custom settings used within JSF.
 */
var OptionRegistry = function (_super) {
    tslib_1.__extends(OptionRegistry, _super);
    function OptionRegistry() {
        var _this = _super.call(this) || this;
        _this.data['failOnInvalidTypes'] = true;
        _this.data['defaultInvalidTypeProduct'] = null;
        _this.data['failOnInvalidFormat'] = true;
        _this.data['useDefaultValue'] = false;
        _this.data['requiredOnly'] = false;
        _this.data['maxItems'] = null;
        _this.data['maxLength'] = null;
        _this.data['defaultMinItems'] = 0;
        _this.data['defaultRandExpMax'] = 10;
        _this.data['alwaysFakeOptionals'] = false;
        return _this;
    }
    return OptionRegistry;
}(Registry);

// instantiate
var registry$1 = new OptionRegistry();
/**
 * Custom option API
 *
 * @param nameOrOptionMap
 * @returns {any}
 */
function optionAPI(nameOrOptionMap) {
    if (typeof nameOrOptionMap === 'string') {
        return registry$1.get(nameOrOptionMap);
    } else {
        return registry$1.registerMany(nameOrOptionMap);
    }
}

var RandExp = require('randexp');
// set maximum default, see #193
RandExp.prototype.max = 10;
function _randexp(value) {
    var re = new RandExp(value);
    // apply given setting
    re.max = optionAPI('defaultRandExpMax');
    return re.gen();
}
function getSubAttribute(obj, dotSeparatedKey) {
    var keyElements = dotSeparatedKey.split('.');
    while (keyElements.length) {
        var prop = keyElements.shift();
        if (!obj[prop]) {
            break;
        }
        obj = obj[prop];
    }
    return obj;
}
/**
 * Returns true/false whether the object parameter has its own properties defined
 *
 * @param obj
 * @param properties
 * @returns {boolean}
 */
function hasProperties(obj) {
    var properties = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        properties[_i - 1] = arguments[_i];
    }
    return properties.filter(function (key) {
        return typeof obj[key] !== 'undefined';
    }).length > 0;
}
/**
 * Returns typecasted value.
 * External generators (faker, chance, casual) may return data in non-expected formats, such as string, when you might expect an
 * integer. This function is used to force the typecast.
 *
 * @param value
 * @param targetType
 * @returns {any}
 */
function typecast(value, schema) {
    // FIXME this function should cover most cases and should be reused within generators
    switch (schema.type) {
        case 'integer':
            return parseInt(value, 10);
        case 'number':
            return parseFloat(value);
        case 'string':
            value = String(value);
            var min = Math.max(schema.minLength || 0, 0);
            var max = Math.min(schema.maxLength || Infinity, Infinity);
            while (value.length < min) {
                value += ' ' + value;
            }
            if (value.length > max) {
                value = value.substr(0, max);
            }
            return value;
        case 'boolean':
            return !!value;
        default:
            return value;
    }
}
function merge(a, b) {
    for (var key in b) {
        if (_typeof(b[key]) !== 'object' || b[key] === null) {
            a[key] = b[key];
        } else if (Array.isArray(b[key])) {
            a[key] = a[key] || [];
            // fix #292 - skip duplicated values from merge object (b)
            b[key].forEach(function (value) {
                if (a[key].indexOf(value)) {
                    a[key].push(value);
                }
            });
        } else if (_typeof(a[key]) !== 'object' || a[key] === null || Array.isArray(a[key])) {
            a[key] = merge({}, b[key]);
        } else {
            a[key] = merge(a[key], b[key]);
        }
    }
    return a;
}
function clean(obj, isArray, requiredProps) {
    if (!obj || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
        return obj;
    }
    if (Array.isArray(obj)) {
        obj = obj.map(function (value) {
            return clean(value, true);
        }).filter(function (value) {
            return typeof value !== 'undefined';
        });
        return obj;
    }
    Object.keys(obj).forEach(function (k) {
        if (!requiredProps || requiredProps.indexOf(k) === -1) {
            if (Array.isArray(obj[k]) && !obj[k].length) {
                delete obj[k];
            }
        } else {
            obj[k] = clean(obj[k]);
        }
    });
    if (!Object.keys(obj).length && isArray) {
        return undefined;
    }
    return obj;
}
function short(schema) {
    var s = JSON.stringify(schema);
    var l = JSON.stringify(schema, null, 2);
    return s.length > 400 ? l.substr(0, 400) + '...' : l;
}
var utils = {
    getSubAttribute: getSubAttribute,
    hasProperties: hasProperties,
    typecast: typecast,
    merge: merge,
    clean: clean,
    short: short,
    randexp: _randexp
};

/// <reference path="../index.d.ts" />
/**
 * Returns random element of a collection
 *
 * @param collection
 * @returns {T}
 */
function pick(collection) {
    return collection[Math.floor(Math.random() * collection.length)];
}
/**
 * Returns shuffled collection of elements
 *
 * @param collection
 * @returns {T[]}
 */
function shuffle(collection) {
    var tmp,
        key,
        copy = collection.slice(),
        length = collection.length;
    for (; length > 0;) {
        key = Math.floor(Math.random() * length);
        // swap
        tmp = copy[--length];
        copy[length] = copy[key];
        copy[key] = tmp;
    }
    return copy;
}
/**
 * These values determine default range for random.number function
 *
 * @type {number}
 */
var MIN_NUMBER = -100;
var MAX_NUMBER = 100;
/**
 * Returns a random integer between min (inclusive) and max (inclusive)
 * Using Math.round() will give you a non-uniform distribution!
 * @see http://stackoverflow.com/a/1527820/769384
 */
function getRandom(min, max) {
    return Math.random() * (max - min) + min;
}
/**
 * Generates random number according to parameters passed
 *
 * @param min
 * @param max
 * @param defMin
 * @param defMax
 * @param hasPrecision
 * @returns {number}
 */
function number(min, max, defMin, defMax, hasPrecision) {
    if (hasPrecision === void 0) {
        hasPrecision = false;
    }
    defMin = typeof defMin === 'undefined' ? MIN_NUMBER : defMin;
    defMax = typeof defMax === 'undefined' ? MAX_NUMBER : defMax;
    min = typeof min === 'undefined' ? defMin : min;
    max = typeof max === 'undefined' ? defMax : max;
    if (max < min) {
        max += min;
    }
    var result = getRandom(min, max);
    if (!hasPrecision) {
        return parseInt(result + '', 10);
    }
    return result;
}
var random = {
    pick: pick,
    shuffle: shuffle,
    number: number
};

var ParseError = function (_super) {
    tslib_1.__extends(ParseError, _super);
    function ParseError(message, path) {
        var _this = _super.call(this) || this;
        _this.path = path;
        if (Error.captureStackTrace) {
            Error.captureStackTrace(_this, _this.constructor);
        }
        _this.name = 'ParseError';
        _this.message = message;
        _this.path = path;
        return _this;
    }
    return ParseError;
}(Error);

var inferredProperties = {
    array: ['additionalItems', 'items', 'maxItems', 'minItems', 'uniqueItems'],
    integer: ['exclusiveMaximum', 'exclusiveMinimum', 'maximum', 'minimum', 'multipleOf'],
    object: ['additionalProperties', 'dependencies', 'maxProperties', 'minProperties', 'patternProperties', 'properties', 'required'],
    string: ['maxLength', 'minLength', 'pattern']
};
inferredProperties.number = inferredProperties.integer;
var subschemaProperties = ['additionalItems', 'items', 'additionalProperties', 'dependencies', 'patternProperties', 'properties'];
/**
 * Iterates through all keys of `obj` and:
 * - checks whether those keys match properties of a given inferred type
 * - makes sure that `obj` is not a subschema; _Do not attempt to infer properties named as subschema containers. The
 * reason for this is that any property name within those containers that matches one of the properties used for
 * inferring missing type values causes the container itself to get processed which leads to invalid output. (Issue 62)_
 *
 * @returns {boolean}
 */
function matchesType(obj, lastElementInPath, inferredTypeProperties) {
    return Object.keys(obj).filter(function (prop) {
        var isSubschema = subschemaProperties.indexOf(lastElementInPath) > -1,
            inferredPropertyFound = inferredTypeProperties.indexOf(prop) > -1;
        if (inferredPropertyFound && !isSubschema) {
            return true;
        }
    }).length > 0;
}
/**
 * Checks whether given `obj` type might be inferred. The mechanism iterates through all inferred types definitions,
 * tries to match allowed properties with properties of given `obj`. Returns type name, if inferred, or null.
 *
 * @returns {string|null}
 */
function inferType(obj, schemaPath) {
    for (var typeName in inferredProperties) {
        var lastElementInPath = schemaPath[schemaPath.length - 1];
        if (matchesType(obj, lastElementInPath, inferredProperties[typeName])) {
            return typeName;
        }
    }
}

/**
 * Generates randomized boolean value.
 *
 * @returns {boolean}
 */
function booleanGenerator() {
    return Math.random() > 0.5;
}

var booleanType = booleanGenerator;

/**
 * Generates null value.
 *
 * @returns {null}
 */
function nullGenerator() {
    return null;
}

var nullType = nullGenerator;

// TODO provide types
function unique(path, items, value, sample, resolve, traverseCallback) {
    var tmp = [],
        seen = [];
    function walk(obj) {
        var json = JSON.stringify(obj);
        if (seen.indexOf(json) === -1) {
            seen.push(json);
            tmp.push(obj);
        }
    }
    items.forEach(walk);
    // TODO: find a better solution?
    var limit = 100;
    while (tmp.length !== items.length) {
        walk(traverseCallback(value.items || sample, path, resolve));
        if (!limit--) {
            break;
        }
    }
    return tmp;
}
// TODO provide types
var arrayType = function arrayType(value, path, resolve, traverseCallback) {
    var items = [];
    if (!(value.items || value.additionalItems)) {
        if (utils.hasProperties(value, 'minItems', 'maxItems', 'uniqueItems')) {
            throw new ParseError('missing items for ' + utils.short(value), path);
        }
        return items;
    }
    // see http://stackoverflow.com/a/38355228/769384
    // after type guards support subproperties (in TS 2.0) we can simplify below to (value.items instanceof Array)
    // so that value.items.map becomes recognized for typescript compiler
    var tmpItems = value.items;
    if (tmpItems instanceof Array) {
        return Array.prototype.concat.call(items, tmpItems.map(function (item, key) {
            var itemSubpath = path.concat(['items', key + '']);
            return traverseCallback(item, itemSubpath, resolve);
        }));
    }
    var minItems = value.minItems;
    var maxItems = value.maxItems;
    if (optionAPI('defaultMinItems') && minItems === undefined) {
        // fix boundaries
        minItems = !maxItems ? optionAPI('defaultMinItems') : Math.min(optionAPI('defaultMinItems'), maxItems);
    }
    if (optionAPI('maxItems')) {
        // Don't allow user to set max items above our maximum
        if (maxItems && maxItems > optionAPI('maxItems')) {
            maxItems = optionAPI('maxItems');
        }
        // Don't allow user to set min items above our maximum
        if (minItems && minItems > optionAPI('maxItems')) {
            minItems = maxItems;
        }
    }
    var length = random.number(minItems, maxItems, 1, 5),

    // TODO below looks bad. Should additionalItems be copied as-is?
    sample = _typeof(value.additionalItems) === 'object' ? value.additionalItems : {};
    for (var current = items.length; current < length; current++) {
        var itemSubpath = path.concat(['items', current + '']);
        var element = traverseCallback(value.items || sample, itemSubpath, resolve);
        items.push(element);
    }
    if (value.uniqueItems) {
        return unique(path.concat(['items']), items, value, sample, resolve, traverseCallback);
    }
    return items;
};

var MIN_INTEGER = -100000000;
var MAX_INTEGER = 100000000;
var numberType = function numberType(value) {
    var min = typeof value.minimum === 'undefined' ? MIN_INTEGER : value.minimum,
        max = typeof value.maximum === 'undefined' ? MAX_INTEGER : value.maximum,
        multipleOf = value.multipleOf;
    if (multipleOf) {
        max = Math.floor(max / multipleOf) * multipleOf;
        min = Math.ceil(min / multipleOf) * multipleOf;
    }
    if (value.exclusiveMinimum && value.minimum && min === value.minimum) {
        min += multipleOf || 1;
    }
    if (value.exclusiveMaximum && value.maximum && max === value.maximum) {
        max -= multipleOf || 1;
    }
    if (min > max) {
        return NaN;
    }
    if (multipleOf) {
        return Math.floor(random.number(min, max) / multipleOf) * multipleOf;
    }
    return random.number(min, max, undefined, undefined, true);
};

// The `integer` type is just a wrapper for the `number` type. The `number` type
// returns floating point numbers, and `integer` type truncates the fraction
// part, leaving the result as an integer.
var integerType = function integerType(value) {
    var generated = numberType(value);
    // whether the generated number is positive or negative, need to use either
    // floor (positive) or ceil (negative) function to get rid of the fraction
    return generated > 0 ? Math.floor(generated) : Math.ceil(generated);
};

var LIPSUM_WORDS = ('Lorem ipsum dolor sit amet consectetur adipisicing elit sed do eiusmod tempor incididunt ut labore' + ' et dolore magna aliqua Ut enim ad minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea' + ' commodo consequat Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla' + ' pariatur Excepteur sint occaecat cupidatat non proident sunt in culpa qui officia deserunt mollit anim id est' + ' laborum').split(' ');
/**
 * Generates randomized array of single lorem ipsum words.
 *
 * @param length
 * @returns {Array.<string>}
 */
function wordsGenerator(length) {
    var words = random.shuffle(LIPSUM_WORDS);
    return words.slice(0, length);
}

// fallback generator
var anyType = { type: ['string', 'number', 'integer', 'boolean'] };
// TODO provide types
var objectType = function objectType(value, path, resolve, traverseCallback) {
    var props = {};
    var properties = value.properties || {};
    var patternProperties = value.patternProperties || {};
    var requiredProperties = (value.required || []).slice();
    var allowsAdditional = value.additionalProperties === false ? false : true;
    var propertyKeys = Object.keys(properties);
    var patternPropertyKeys = Object.keys(patternProperties);
    var additionalProperties = allowsAdditional ? value.additionalProperties === true ? {} : value.additionalProperties : null;
    if (!allowsAdditional && propertyKeys.length === 0 && patternPropertyKeys.length === 0 && utils.hasProperties(value, 'minProperties', 'maxProperties', 'dependencies', 'required')) {
        throw new ParseError('missing properties for:\n' + utils.short(value), path);
    }
    if (optionAPI('requiredOnly') === true) {
        requiredProperties.forEach(function (key) {
            if (properties[key]) {
                props[key] = properties[key];
            }
        });
        return traverseCallback(props, path.concat(['properties']), resolve);
    }
    var min = Math.max(value.minProperties || 0, requiredProperties.length);
    var max = Math.max(value.maxProperties || random.number(min, min + 5));
    random.shuffle(patternPropertyKeys.concat(propertyKeys)).forEach(function (_key) {
        if (requiredProperties.indexOf(_key) === -1) {
            requiredProperties.push(_key);
        }
    });
    // properties are read from right-to-left
    var _props = optionAPI('alwaysFakeOptionals') ? requiredProperties : requiredProperties.slice(0, random.number(min, max));
    _props.forEach(function (key) {
        // first ones are the required properies
        if (properties[key]) {
            props[key] = properties[key];
        } else {
            var found;
            // then try patternProperties
            patternPropertyKeys.forEach(function (_key) {
                if (key.match(new RegExp(_key))) {
                    found = true;
                    props[utils.randexp(key)] = patternProperties[_key];
                }
            });
            if (!found) {
                // try patternProperties again,
                var subschema = patternProperties[key] || additionalProperties;
                if (subschema) {
                    // otherwise we can use additionalProperties?
                    props[patternProperties[key] ? utils.randexp(key) : key] = subschema;
                }
            }
        }
    });
    var current = Object.keys(props).length;
    while (true) {
        if (!(patternPropertyKeys.length || allowsAdditional)) {
            break;
        }
        if (current >= min) {
            break;
        }
        if (allowsAdditional) {
            var word = wordsGenerator(1) + utils.randexp('[a-f\\d]{1,3}');
            if (!props[word]) {
                props[word] = additionalProperties || anyType;
                current += 1;
            }
        }
        patternPropertyKeys.forEach(function (_key) {
            var word = utils.randexp(_key);
            if (!props[word]) {
                props[word] = patternProperties[_key];
                current += 1;
            }
        });
    }
    if (!allowsAdditional && current < min) {
        throw new ParseError('properties constraints were too strong to successfully generate a valid object for:\n' + utils.short(value), path);
    }
    return traverseCallback(props, path.concat(['properties']), resolve);
};

/**
 * Helper function used by thunkGenerator to produce some words for the final result.
 *
 * @returns {string}
 */
function produce() {
    var length = random.number(1, 5);
    return wordsGenerator(length).join(' ');
}
/**
 * Generates randomized concatenated string based on words generator.
 *
 * @returns {string}
 */
function thunkGenerator(min, max) {
    if (min === void 0) {
        min = 0;
    }
    if (max === void 0) {
        max = 140;
    }
    var min = Math.max(0, min),
        max = random.number(min, max),
        result = produce();
    // append until length is reached
    while (result.length < min) {
        result += produce();
    }
    // cut if needed
    if (result.length > max) {
        result = result.substr(0, max);
    }
    return result;
}

/**
 * Generates randomized ipv4 address.
 *
 * @returns {string}
 */
function ipv4Generator() {
    return [0, 0, 0, 0].map(function () {
        return random.number(0, 255);
    }).join('.');
}

var MOST_NEAR_DATETIME = 2524608000000;
/**
 * Generates randomized date time ISO format string.
 *
 * @returns {string}
 */
function dateTimeGenerator() {
    var date = new Date();
    var days = random.number(-1000, MOST_NEAR_DATETIME);
    date.setTime(date.getTime() - days);
    return date.toISOString();
}

/**
 * Predefined core formats
 * @type {[key: string]: string}
 */
var regexps = {
    email: '[a-zA-Z\\d][a-zA-Z\\d-]{1,13}[a-zA-Z\\d]@{hostname}',
    hostname: '[a-zA-Z]{1,33}\\.[a-z]{2,4}',
    ipv6: '[a-f\\d]{4}(:[a-f\\d]{4}){7}',
    uri: '[a-zA-Z][a-zA-Z0-9+-.]*'
};
/**
 * Generates randomized string basing on a built-in regex format
 *
 * @param coreFormat
 * @returns {string}
 */
function coreFormatGenerator(coreFormat) {
    return utils.randexp(regexps[coreFormat]).replace(/\{(\w+)\}/, function (match, key) {
        return utils.randexp(regexps[key]);
    });
}

function generateFormat(value, invalid) {
    var callback = formatAPI(value.format);
    if (typeof callback === 'function') {
        return callback(value);
    }
    switch (value.format) {
        case 'date-time':
            return dateTimeGenerator();
        case 'ipv4':
            return ipv4Generator();
        case 'regex':
            // TODO: discuss
            return '.+?';
        case 'email':
        case 'hostname':
        case 'ipv6':
        case 'uri':
            return coreFormatGenerator(value.format);
        default:
            if (typeof callback === 'undefined') {
                if (optionAPI('failOnInvalidFormat')) {
                    throw new Error('unknown registry key ' + utils.short(value.format));
                } else {
                    return invalid();
                }
            }
            throw new Error('unsupported format "' + value.format + '"');
    }
}
var stringType = function stringType(value) {
    var output;
    var minLength = value.minLength;
    var maxLength = value.maxLength;
    if (optionAPI('maxLength')) {
        // Don't allow user to set max length above our maximum
        if (maxLength && maxLength > optionAPI('maxLength')) {
            maxLength = optionAPI('maxLength');
        }
        // Don't allow user to set min length above our maximum
        if (minLength && minLength > optionAPI('maxLength')) {
            minLength = optionAPI('maxLength');
        }
    }
    if (value.format) {
        output = generateFormat(value, function () {
            return thunkGenerator(minLength, maxLength);
        });
    } else if (value.pattern) {
        output = utils.randexp(value.pattern);
    } else {
        output = thunkGenerator(minLength, maxLength);
    }
    while (output.length < minLength) {
        output += Math.random() > 0.7 ? thunkGenerator() : utils.randexp('.+');
    }
    if (output.length > maxLength) {
        output = output.substr(0, maxLength);
    }
    return output;
};

var typeMap = {
    boolean: booleanType,
    null: nullType,
    array: arrayType,
    integer: integerType,
    number: numberType,
    object: objectType,
    string: stringType
};

// TODO provide types
function traverse(schema, path, resolve) {
    schema = resolve(schema);
    if (!schema) {
        return;
    }
    if (Array.isArray(schema.enum)) {
        return random.pick(schema.enum);
    }
    // thunks can return sub-schemas
    if (typeof schema.thunk === 'function') {
        return traverse(schema.thunk(), path, resolve);
    }
    if (typeof schema.generate === 'function') {
        return utils.typecast(schema.generate(), schema);
    }
    if (optionAPI('useDefaultValue') && 'default' in schema) {
        return schema.default;
    }
    // TODO remove the ugly overcome
    var type = schema.type;
    if (Array.isArray(type)) {
        type = random.pick(type);
    } else if (typeof type === 'undefined') {
        // Attempt to infer the type
        type = inferType(schema, path) || type;
    }
    if (typeof type === 'string') {
        if (!typeMap[type]) {
            if (optionAPI('failOnInvalidTypes')) {
                throw new ParseError('unknown primitive ' + utils.short(type), path.concat(['type']));
            } else {
                return optionAPI('defaultInvalidTypeProduct');
            }
        } else {
            try {
                return utils.clean(typeMap[type](schema, path, resolve, traverse), null, schema.required);
            } catch (e) {
                if (typeof e.path === 'undefined') {
                    throw new ParseError(e.message, path);
                }
                throw e;
            }
        }
    }
    var copy = {};
    if (Array.isArray(schema)) {
        copy = [];
    }
    for (var prop in schema) {
        if (_typeof(schema[prop]) === 'object' && prop !== 'definitions') {
            copy[prop] = traverse(schema[prop], path.concat([prop]), resolve);
        } else {
            copy[prop] = schema[prop];
        }
    }
    return copy;
}

function isKey(prop) {
    return prop === 'enum' || prop === 'default' || prop === 'required' || prop === 'definitions';
}
// TODO provide types
function run(refs, schema, container) {
    try {
        return traverse(schema, [], function reduce(sub, maxReduceDepth) {
            if (typeof maxReduceDepth === 'undefined') {
                maxReduceDepth = random.number(1, 3);
            }
            if (!sub) {
                return null;
            }
            // cleanup
            if (sub.id && typeof sub.id === 'string') {
                delete sub.id;
                delete sub.$schema;
            }
            if (typeof sub.$ref === 'string') {
                if (sub.$ref.indexOf('#/') === -1) {
                    var ref = deref.util.findByRef(sub.$ref, refs);
                    if (!ref) {
                        throw new Error('Reference not found: ' + sub.$ref);
                    }
                    return ref;
                }
                // just remove the reference
                delete sub.$ref;
                return sub;
            }
            if (Array.isArray(sub.allOf)) {
                var schemas = sub.allOf;
                delete sub.allOf;
                // this is the only case where all sub-schemas
                // must be resolved before any merge
                schemas.forEach(function (subSchema) {
                    var _sub = reduce(subSchema, maxReduceDepth + 1);
                    // call given thunks if present
                    utils.merge(sub, typeof _sub.thunk === 'function' ? _sub.thunk() : _sub);
                });
            }
            if (Array.isArray(sub.oneOf || sub.anyOf)) {
                var mix = sub.oneOf || sub.anyOf;
                delete sub.anyOf;
                delete sub.oneOf;
                return {
                    thunk: function thunk() {
                        var copy = utils.merge({}, sub);
                        utils.merge(copy, random.pick(mix));
                        return copy;
                    }
                };
            }
            for (var prop in sub) {
                if ((Array.isArray(sub[prop]) || _typeof(sub[prop]) === 'object') && !isKey(prop)) {
                    sub[prop] = reduce(sub[prop], maxReduceDepth);
                }
            }
            return container.wrap(sub);
        });
    } catch (e) {
        if (e.path) {
            throw new Error(e.message + ' in ' + '/' + e.path.join('/'));
        } else {
            throw e;
        }
    }
}

var container = new Container();
function getRefs(refs) {
    var $refs = {};
    if (Array.isArray(refs)) {
        refs.map(deref.util.normalizeSchema).forEach(function (schema) {
            $refs[schema.id] = schema;
        });
    } else {
        $refs = refs || {};
    }
    return $refs;
}
var jsf = function jsf(schema, refs) {
    var $ = deref();
    var $refs = getRefs(refs);
    return run($refs, $(schema, $refs, true), container);
};
jsf.resolve = function (schema, refs, cwd) {
    if (typeof refs === 'string') {
        cwd = refs;
        refs = {};
    }
    // normalize basedir (browser aware)
    cwd = cwd || (typeof process !== 'undefined' ? process.cwd() : '');
    cwd = cwd.replace(/\/+$/, '') + '/';
    var $refs = getRefs(refs);
    // identical setup as json-schema-sequelizer
    var fixedRefs = {
        order: 300,
        canRead: true,
        read: function read(file, callback) {
            callback(null, deref.util.findByRef(cwd !== '/' ? file.url.replace(cwd, '') : file.url, $refs));
        }
    };
    return $RefParser.dereference(cwd, schema, {
        resolve: { fixedRefs: fixedRefs },
        dereference: {
            circular: 'ignore'
        }
    }).then(function (sub) {
        return jsf(sub, refs);
    });
};
jsf.utils = utils;
jsf.format = formatAPI;
jsf.option = optionAPI;
// built-in support
container.define('pattern', utils.randexp);
// returns itself for chaining
jsf.extend = function (name, cb) {
    container.extend(name, cb);
    return jsf;
};
jsf.define = function (name, cb) {
    container.define(name, cb);
    return jsf;
};
jsf.locate = function (name) {
    return container.get(name);
};
var VERSION = "0.5.0-rc9";
jsf.version = VERSION;

module.exports = jsf;

}).call(this,require('_process'))

},{"_process":218,"deref":22,"json-schema-ref-parser":193,"randexp":222,"tslib":247}],191:[function(require,module,exports){
/** !
 * JSON Schema $Ref Parser v3.3.1
 *
 * @link https://github.com/BigstickCarpet/json-schema-ref-parser
 * @license MIT
 */
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var $Ref = require('./ref'),
    Pointer = require('./pointer'),
    debug = require('./util/debug'),
    url = require('./util/url');

module.exports = bundle;

/**
 * Bundles all external JSON references into the main JSON schema, thus resulting in a schema that
 * only has *internal* references, not any *external* references.
 * This method mutates the JSON schema object, adding new references and re-mapping existing ones.
 *
 * @param {$RefParser} parser
 * @param {$RefParserOptions} options
 */
function bundle(parser, options) {
  debug('Bundling $ref pointers in %s', parser.$refs._root$Ref.path);

  // Build an inventory of all $ref pointers in the JSON Schema
  var inventory = [];
  crawl(parser, 'schema', parser.$refs._root$Ref.path + '#', '#', inventory, parser.$refs, options);

  // Remap all $ref pointers
  remap(inventory);
}

/**
 * Recursively crawls the given value, and inventories all JSON references.
 *
 * @param {object} parent - The object containing the value to crawl. If the value is not an object or array, it will be ignored.
 * @param {string} key - The property key of `parent` to be crawled
 * @param {string} path - The full path of the property being crawled, possibly with a JSON Pointer in the hash
 * @param {string} pathFromRoot - The path of the property being crawled, from the schema root
 * @param {object[]} inventory - An array of already-inventoried $ref pointers
 * @param {$Refs} $refs
 * @param {$RefParserOptions} options
 */
function crawl(parent, key, path, pathFromRoot, inventory, $refs, options) {
  var obj = key === null ? parent : parent[key];

  if (obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
    if ($Ref.isAllowed$Ref(obj)) {
      inventory$Ref(parent, key, path, pathFromRoot, inventory, $refs, options);
    } else {
      var keys = Object.keys(obj);

      // Most people will expect references to be bundled into the the "definitions" property,
      // so we always crawl that property first, if it exists.
      var defs = keys.indexOf('definitions');
      if (defs > 0) {
        keys.splice(0, 0, keys.splice(defs, 1)[0]);
      }

      keys.forEach(function (key) {
        var keyPath = Pointer.join(path, key);
        var keyPathFromRoot = Pointer.join(pathFromRoot, key);
        var value = obj[key];

        if ($Ref.isAllowed$Ref(value)) {
          inventory$Ref(obj, key, path, keyPathFromRoot, inventory, $refs, options);
        } else {
          crawl(obj, key, keyPath, keyPathFromRoot, inventory, $refs, options);
        }
      });
    }
  }
}

/**
 * Inventories the given JSON Reference (i.e. records detailed information about it so we can
 * optimize all $refs in the schema), and then crawls the resolved value.
 *
 * @param {object} $refParent - The object that contains a JSON Reference as one of its keys
 * @param {string} $refKey - The key in `$refParent` that is a JSON Reference
 * @param {string} path - The full path of the JSON Reference at `$refKey`, possibly with a JSON Pointer in the hash
 * @param {string} pathFromRoot - The path of the JSON Reference at `$refKey`, from the schema root
 * @param {object[]} inventory - An array of already-inventoried $ref pointers
 * @param {$Refs} $refs
 * @param {$RefParserOptions} options
 */
function inventory$Ref($refParent, $refKey, path, pathFromRoot, inventory, $refs, options) {
  if (inventory.some(function (i) {
    return i.parent === $refParent && i.key === $refKey;
  })) {
    // This $Ref has already been inventoried, so we don't need to process it again
    return;
  }

  var $ref = $refKey === null ? $refParent : $refParent[$refKey];
  var $refPath = url.resolve(path, $ref.$ref);
  var pointer = $refs._resolve($refPath, options);
  var depth = Pointer.parse(pathFromRoot).length;
  var file = url.stripHash(pointer.path);
  var hash = url.getHash(pointer.path);
  var external = file !== $refs._root$Ref.path;
  var extended = $Ref.isExtended$Ref($ref);

  inventory.push({
    $ref: $ref, // The JSON Reference (e.g. {$ref: string})
    parent: $refParent, // The object that contains this $ref pointer
    key: $refKey, // The key in `parent` that is the $ref pointer
    pathFromRoot: pathFromRoot, // The path to the $ref pointer, from the JSON Schema root
    depth: depth, // How far from the JSON Schema root is this $ref pointer?
    file: file, // The file that the $ref pointer resolves to
    hash: hash, // The hash within `file` that the $ref pointer resolves to
    value: pointer.value, // The resolved value of the $ref pointer
    circular: pointer.circular, // Is this $ref pointer DIRECTLY circular? (i.e. it references itself)
    extended: extended, // Does this $ref extend its resolved value? (i.e. it has extra properties, in addition to "$ref")
    external: external // Does this $ref pointer point to a file other than the main JSON Schema file?
  });

  // Recursively crawl the resolved value
  crawl(pointer.value, null, pointer.path, pathFromRoot, inventory, $refs, options);
}

/**
 * Re-maps every $ref pointer, so that they're all relative to the root of the JSON Schema.
 * Each referenced value is dereferenced EXACTLY ONCE.  All subsequent references to the same
 * value are re-mapped to point to the first reference.
 *
 * @example:
 *  {
 *    first: { $ref: somefile.json#/some/part },
 *    second: { $ref: somefile.json#/another/part },
 *    third: { $ref: somefile.json },
 *    fourth: { $ref: somefile.json#/some/part/sub/part }
 *  }
 *
 * In this example, there are four references to the same file, but since the third reference points
 * to the ENTIRE file, that's the only one we need to dereference.  The other three can just be
 * remapped to point inside the third one.
 *
 * On the other hand, if the third reference DIDN'T exist, then the first and second would both need
 * to be dereferenced, since they point to different parts of the file. The fourth reference does NOT
 * need to be dereferenced, because it can be remapped to point inside the first one.
 *
 * @param {object[]} inventory
 */
function remap(inventory) {
  // Group & sort all the $ref pointers, so they're in the order that we need to dereference/remap them
  inventory.sort(function (a, b) {
    if (a.file !== b.file) {
      return a.file < b.file ? -1 : +1; // Group all the $refs that point to the same file
    } else if (a.hash !== b.hash) {
      return a.hash < b.hash ? -1 : +1; // Group all the $refs that point to the same part of the file
    } else if (a.circular !== b.circular) {
      return a.circular ? -1 : +1; // If the $ref points to itself, then sort it higher than other $refs that point to this $ref
    } else if (a.extended !== b.extended) {
      return a.extended ? +1 : -1; // If the $ref extends the resolved value, then sort it lower than other $refs that don't extend the value
    } else if (a.depth !== b.depth) {
      return a.depth - b.depth; // Sort $refs by how close they are to the JSON Schema root
    } else {
      // If all else is equal, use the $ref that's in the "definitions" property
      return b.pathFromRoot.lastIndexOf('/definitions') - a.pathFromRoot.lastIndexOf('/definitions');
    }
  });

  var file, hash, pathFromRoot;
  inventory.forEach(function (i) {
    debug('Re-mapping $ref pointer "%s" at %s', i.$ref.$ref, i.pathFromRoot);

    if (!i.external) {
      // This $ref already resolves to the main JSON Schema file
      i.$ref.$ref = i.hash;
    } else if (i.file === file && i.hash === hash) {
      // This $ref points to the same value as the prevous $ref, so remap it to the same path
      i.$ref.$ref = pathFromRoot;
    } else if (i.file === file && i.hash.indexOf(hash + '/') === 0) {
      // This $ref points to the a sub-value as the prevous $ref, so remap it beneath that path
      i.$ref.$ref = Pointer.join(pathFromRoot, Pointer.parse(i.hash));
    } else {
      // We've moved to a new file or new hash
      file = i.file;
      hash = i.hash;
      pathFromRoot = i.pathFromRoot;

      // This is the first $ref to point to this value, so dereference the value.
      // Any other $refs that point to the same value will point to this $ref instead
      i.$ref = i.parent[i.key] = $Ref.dereference(i.$ref, i.value);

      if (i.circular) {
        // This $ref points to itself
        i.$ref.$ref = i.pathFromRoot;
      }
    }

    debug('    new value: %s', i.$ref && i.$ref.$ref ? i.$ref.$ref : '[object Object]');
  });
}

},{"./pointer":200,"./ref":201,"./util/debug":206,"./util/url":209}],192:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var $Ref = require('./ref'),
    Pointer = require('./pointer'),
    ono = require('ono'),
    debug = require('./util/debug'),
    url = require('./util/url');

module.exports = dereference;

/**
 * Crawls the JSON schema, finds all JSON references, and dereferences them.
 * This method mutates the JSON schema object, replacing JSON references with their resolved value.
 *
 * @param {$RefParser} parser
 * @param {$RefParserOptions} options
 */
function dereference(parser, options) {
  debug('Dereferencing $ref pointers in %s', parser.$refs._root$Ref.path);
  var dereferenced = crawl(parser.schema, parser.$refs._root$Ref.path, '#', [], parser.$refs, options);
  parser.$refs.circular = dereferenced.circular;
  parser.schema = dereferenced.value;
}

/**
 * Recursively crawls the given value, and dereferences any JSON references.
 *
 * @param {*} obj - The value to crawl. If it's not an object or array, it will be ignored.
 * @param {string} path - The full path of `obj`, possibly with a JSON Pointer in the hash
 * @param {string} pathFromRoot - The path of `obj` from the schema root
 * @param {object[]} parents - An array of the parent objects that have already been dereferenced
 * @param {$Refs} $refs
 * @param {$RefParserOptions} options
 * @returns {{value: object, circular: boolean}}
 */
function crawl(obj, path, pathFromRoot, parents, $refs, options) {
  var dereferenced;
  var result = {
    value: obj,
    circular: false
  };

  if (obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
    parents.push(obj);

    if ($Ref.isAllowed$Ref(obj, options)) {
      dereferenced = dereference$Ref(obj, path, pathFromRoot, parents, $refs, options);
      result.circular = dereferenced.circular;
      result.value = dereferenced.value;
    } else {
      Object.keys(obj).forEach(function (key) {
        var keyPath = Pointer.join(path, key);
        var keyPathFromRoot = Pointer.join(pathFromRoot, key);
        var value = obj[key];
        var circular = false;

        if ($Ref.isAllowed$Ref(value, options)) {
          dereferenced = dereference$Ref(value, keyPath, keyPathFromRoot, parents, $refs, options);
          circular = dereferenced.circular;
          obj[key] = dereferenced.value;
        } else {
          if (parents.indexOf(value) === -1) {
            dereferenced = crawl(value, keyPath, keyPathFromRoot, parents, $refs, options);
            circular = dereferenced.circular;
            obj[key] = dereferenced.value;
          } else {
            circular = foundCircularReference(keyPath, $refs, options);
          }
        }

        // Set the "isCircular" flag if this or any other property is circular
        result.circular = result.circular || circular;
      });
    }

    parents.pop();
  }

  return result;
}

/**
 * Dereferences the given JSON Reference, and then crawls the resulting value.
 *
 * @param {{$ref: string}} $ref - The JSON Reference to resolve
 * @param {string} path - The full path of `$ref`, possibly with a JSON Pointer in the hash
 * @param {string} pathFromRoot - The path of `$ref` from the schema root
 * @param {object[]} parents - An array of the parent objects that have already been dereferenced
 * @param {$Refs} $refs
 * @param {$RefParserOptions} options
 * @returns {{value: object, circular: boolean}}
 */
function dereference$Ref($ref, path, pathFromRoot, parents, $refs, options) {
  debug('Dereferencing $ref pointer "%s" at %s', $ref.$ref, path);

  var $refPath = url.resolve(path, $ref.$ref);
  var pointer = $refs._resolve($refPath, options);

  // Check for circular references
  var directCircular = pointer.circular;
  var circular = directCircular || parents.indexOf(pointer.value) !== -1;
  circular && foundCircularReference(path, $refs, options);

  // Dereference the JSON reference
  var dereferencedValue = $Ref.dereference($ref, pointer.value);

  // Crawl the dereferenced value (unless it's circular)
  if (!circular) {
    // Determine if the dereferenced value is circular
    var dereferenced = crawl(dereferencedValue, pointer.path, pathFromRoot, parents, $refs, options);
    circular = dereferenced.circular;
    dereferencedValue = dereferenced.value;
  }

  if (circular && !directCircular && options.dereference.circular === 'ignore') {
    // The user has chosen to "ignore" circular references, so don't change the value
    dereferencedValue = $ref;
  }

  if (directCircular) {
    // The pointer is a DIRECT circular reference (i.e. it references itself).
    // So replace the $ref path with the absolute path from the JSON Schema root
    dereferencedValue.$ref = pathFromRoot;
  }

  return {
    circular: circular,
    value: dereferencedValue
  };
}

/**
 * Called when a circular reference is found.
 * It sets the {@link $Refs#circular} flag, and throws an error if options.dereference.circular is false.
 *
 * @param {string} keyPath - The JSON Reference path of the circular reference
 * @param {$Refs} $refs
 * @param {$RefParserOptions} options
 * @returns {boolean} - always returns true, to indicate that a circular reference was found
 */
function foundCircularReference(keyPath, $refs, options) {
  $refs.circular = true;
  if (!options.dereference.circular) {
    throw ono.reference('Circular $ref pointer found at %s', keyPath);
  }
  return true;
}

},{"./pointer":200,"./ref":201,"./util/debug":206,"./util/url":209,"ono":214}],193:[function(require,module,exports){
(function (Buffer){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var Promise = require('./util/promise'),
    Options = require('./options'),
    $Refs = require('./refs'),
    parse = require('./parse'),
    resolveExternal = require('./resolve-external'),
    bundle = require('./bundle'),
    dereference = require('./dereference'),
    url = require('./util/url'),
    maybe = require('call-me-maybe'),
    ono = require('ono');

module.exports = $RefParser;
module.exports.YAML = require('./util/yaml');

/**
 * This class parses a JSON schema, builds a map of its JSON references and their resolved values,
 * and provides methods for traversing, manipulating, and dereferencing those references.
 *
 * @constructor
 */
function $RefParser() {
  /**
   * The parsed (and possibly dereferenced) JSON schema object
   *
   * @type {object}
   * @readonly
   */
  this.schema = null;

  /**
   * The resolved JSON references
   *
   * @type {$Refs}
   * @readonly
   */
  this.$refs = new $Refs();
}

/**
 * Parses the given JSON schema.
 * This method does not resolve any JSON references.
 * It just reads a single file in JSON or YAML format, and parse it as a JavaScript object.
 *
 * @param {string|object} schema - The file path or URL of the JSON schema. Or a JSON schema object.
 * @param {$RefParserOptions} [options] - Options that determine how the schema is parsed
 * @param {function} [callback] - An error-first callback. The second parameter is the parsed JSON schema object.
 * @returns {Promise} - The returned promise resolves with the parsed JSON schema object.
 */
$RefParser.parse = function (schema, options, callback) {
  var Class = this; // eslint-disable-line consistent-this
  var instance = new Class();
  return instance.parse.apply(instance, arguments);
};

/**
 * Parses the given JSON schema.
 * This method does not resolve any JSON references.
 * It just reads a single file in JSON or YAML format, and parse it as a JavaScript object.
 *
 * @param {string|object} schema - The file path or URL of the JSON schema. Or a JSON schema object.
 * @param {$RefParserOptions} [options] - Options that determine how the schema is parsed
 * @param {function} [callback] - An error-first callback. The second parameter is the parsed JSON schema object.
 * @returns {Promise} - The returned promise resolves with the parsed JSON schema object.
 */
$RefParser.prototype.parse = function (schema, options, callback) {
  var args = normalizeArgs(arguments);
  var promise;

  if (!args.path && !args.schema) {
    var err = ono('Expected a file path, URL, or object. Got %s', args.path || args.schema);
    return maybe(args.callback, Promise.reject(err));
  }

  // Reset everything
  this.schema = null;
  this.$refs = new $Refs();

  // If the path is a filesystem path, then convert it to a URL.
  // NOTE: According to the JSON Reference spec, these should already be URLs,
  // but, in practice, many people use local filesystem paths instead.
  // So we're being generous here and doing the conversion automatically.
  // This is not intended to be a 100% bulletproof solution.
  // If it doesn't work for your use-case, then use a URL instead.
  if (url.isFileSystemPath(args.path)) {
    args.path = url.fromFileSystemPath(args.path);
  }

  // Resolve the absolute path of the schema
  args.path = url.resolve(url.cwd(), args.path);

  if (args.schema && _typeof(args.schema) === 'object') {
    // A schema object was passed-in.
    // So immediately add a new $Ref with the schema object as its value
    this.$refs._add(args.path, args.schema);
    promise = Promise.resolve(args.schema);
  } else {
    // Parse the schema file/url
    promise = parse(args.path, this.$refs, args.options);
  }

  var me = this;
  return promise.then(function (result) {
    if (!result || (typeof result === 'undefined' ? 'undefined' : _typeof(result)) !== 'object' || Buffer.isBuffer(result)) {
      throw ono.syntax('"%s" is not a valid JSON Schema', me.$refs._root$Ref.path || result);
    } else {
      me.schema = result;
      return maybe(args.callback, Promise.resolve(me.schema));
    }
  }).catch(function (e) {
    return maybe(args.callback, Promise.reject(e));
  });
};

/**
 * Parses the given JSON schema and resolves any JSON references, including references in
 * externally-referenced files.
 *
 * @param {string|object} schema - The file path or URL of the JSON schema. Or a JSON schema object.
 * @param {$RefParserOptions} [options] - Options that determine how the schema is parsed and resolved
 * @param {function} [callback]
 * - An error-first callback. The second parameter is a {@link $Refs} object containing the resolved JSON references
 *
 * @returns {Promise}
 * The returned promise resolves with a {@link $Refs} object containing the resolved JSON references
 */
$RefParser.resolve = function (schema, options, callback) {
  var Class = this; // eslint-disable-line consistent-this
  var instance = new Class();
  return instance.resolve.apply(instance, arguments);
};

/**
 * Parses the given JSON schema and resolves any JSON references, including references in
 * externally-referenced files.
 *
 * @param {string|object} schema - The file path or URL of the JSON schema. Or a JSON schema object.
 * @param {$RefParserOptions} [options] - Options that determine how the schema is parsed and resolved
 * @param {function} [callback]
 * - An error-first callback. The second parameter is a {@link $Refs} object containing the resolved JSON references
 *
 * @returns {Promise}
 * The returned promise resolves with a {@link $Refs} object containing the resolved JSON references
 */
$RefParser.prototype.resolve = function (schema, options, callback) {
  var me = this;
  var args = normalizeArgs(arguments);

  return this.parse(args.path, args.schema, args.options).then(function () {
    return resolveExternal(me, args.options);
  }).then(function () {
    return maybe(args.callback, Promise.resolve(me.$refs));
  }).catch(function (err) {
    return maybe(args.callback, Promise.reject(err));
  });
};

/**
 * Parses the given JSON schema, resolves any JSON references, and bundles all external references
 * into the main JSON schema. This produces a JSON schema that only has *internal* references,
 * not any *external* references.
 *
 * @param {string|object} schema - The file path or URL of the JSON schema. Or a JSON schema object.
 * @param {$RefParserOptions} [options] - Options that determine how the schema is parsed, resolved, and dereferenced
 * @param {function} [callback] - An error-first callback. The second parameter is the bundled JSON schema object
 * @returns {Promise} - The returned promise resolves with the bundled JSON schema object.
 */
$RefParser.bundle = function (schema, options, callback) {
  var Class = this; // eslint-disable-line consistent-this
  var instance = new Class();
  return instance.bundle.apply(instance, arguments);
};

/**
 * Parses the given JSON schema, resolves any JSON references, and bundles all external references
 * into the main JSON schema. This produces a JSON schema that only has *internal* references,
 * not any *external* references.
 *
 * @param {string|object} schema - The file path or URL of the JSON schema. Or a JSON schema object.
 * @param {$RefParserOptions} [options] - Options that determine how the schema is parsed, resolved, and dereferenced
 * @param {function} [callback] - An error-first callback. The second parameter is the bundled JSON schema object
 * @returns {Promise} - The returned promise resolves with the bundled JSON schema object.
 */
$RefParser.prototype.bundle = function (schema, options, callback) {
  var me = this;
  var args = normalizeArgs(arguments);

  return this.resolve(args.path, args.schema, args.options).then(function () {
    bundle(me, args.options);
    return maybe(args.callback, Promise.resolve(me.schema));
  }).catch(function (err) {
    return maybe(args.callback, Promise.reject(err));
  });
};

/**
 * Parses the given JSON schema, resolves any JSON references, and dereferences the JSON schema.
 * That is, all JSON references are replaced with their resolved values.
 *
 * @param {string|object} schema - The file path or URL of the JSON schema. Or a JSON schema object.
 * @param {$RefParserOptions} [options] - Options that determine how the schema is parsed, resolved, and dereferenced
 * @param {function} [callback] - An error-first callback. The second parameter is the dereferenced JSON schema object
 * @returns {Promise} - The returned promise resolves with the dereferenced JSON schema object.
 */
$RefParser.dereference = function (schema, options, callback) {
  var Class = this; // eslint-disable-line consistent-this
  var instance = new Class();
  return instance.dereference.apply(instance, arguments);
};

/**
 * Parses the given JSON schema, resolves any JSON references, and dereferences the JSON schema.
 * That is, all JSON references are replaced with their resolved values.
 *
 * @param {string|object} schema - The file path or URL of the JSON schema. Or a JSON schema object.
 * @param {$RefParserOptions} [options] - Options that determine how the schema is parsed, resolved, and dereferenced
 * @param {function} [callback] - An error-first callback. The second parameter is the dereferenced JSON schema object
 * @returns {Promise} - The returned promise resolves with the dereferenced JSON schema object.
 */
$RefParser.prototype.dereference = function (schema, options, callback) {
  var me = this;
  var args = normalizeArgs(arguments);

  return this.resolve(args.path, args.schema, args.options).then(function () {
    dereference(me, args.options);
    return maybe(args.callback, Promise.resolve(me.schema));
  }).catch(function (err) {
    return maybe(args.callback, Promise.reject(err));
  });
};

/**
 * Normalizes the given arguments, accounting for optional args.
 *
 * @param {Arguments} args
 * @returns {object}
 */
function normalizeArgs(args) {
  var path, schema, options, callback;
  args = Array.prototype.slice.call(args);

  if (typeof args[args.length - 1] === 'function') {
    // The last parameter is a callback function
    callback = args.pop();
  }

  if (typeof args[0] === 'string') {
    // The first parameter is the path
    path = args[0];
    if (_typeof(args[2]) === 'object') {
      // The second parameter is the schema, and the third parameter is the options
      schema = args[1];
      options = args[2];
    } else {
      // The second parameter is the options
      schema = undefined;
      options = args[1];
    }
  } else {
    // The first parameter is the schema
    path = '';
    schema = args[0];
    options = args[1];
  }

  if (!(options instanceof Options)) {
    options = new Options(options);
  }

  return {
    path: path,
    schema: schema,
    options: options,
    callback: callback
  };
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})

},{"../../is-buffer/index.js":158,"./bundle":191,"./dereference":192,"./options":194,"./parse":195,"./refs":202,"./resolve-external":203,"./util/promise":208,"./util/url":209,"./util/yaml":210,"call-me-maybe":17,"ono":214}],194:[function(require,module,exports){
/* eslint lines-around-comment: [2, {beforeBlockComment: false}] */
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var jsonParser = require('./parsers/json'),
    yamlParser = require('./parsers/yaml'),
    textParser = require('./parsers/text'),
    binaryParser = require('./parsers/binary'),
    fileResolver = require('./resolvers/file'),
    httpResolver = require('./resolvers/http'),
    zschemaValidator = require('./validators/z-schema');

module.exports = $RefParserOptions;

/**
 * Options that determine how JSON schemas are parsed, resolved, dereferenced, and validated.
 *
 * @param {object|$RefParserOptions} [options] - Overridden options
 * @constructor
 */
function $RefParserOptions(options) {
  merge(this, $RefParserOptions.defaults);
  merge(this, options);
}

$RefParserOptions.defaults = {
  /**
   * Determines how different types of files will be parsed.
   *
   * You can add additional parsers of your own, replace an existing one with
   * your own implemenation, or disable any parser by setting it to false.
   */
  parse: {
    json: jsonParser,
    yaml: yamlParser,
    text: textParser,
    binary: binaryParser
  },

  /**
   * Determines how JSON References will be resolved.
   *
   * You can add additional resolvers of your own, replace an existing one with
   * your own implemenation, or disable any resolver by setting it to false.
   */
  resolve: {
    file: fileResolver,
    http: httpResolver,

    /**
     * Determines whether external $ref pointers will be resolved.
     * If this option is disabled, then none of above resolvers will be called.
     * Instead, external $ref pointers will simply be ignored.
     *
     * @type {boolean}
     */
    external: true
  },

  /**
   * Determines the types of JSON references that are allowed.
   */
  dereference: {
    /**
     * Dereference circular (recursive) JSON references?
     * If false, then a {@link ReferenceError} will be thrown if a circular reference is found.
     * If "ignore", then circular references will not be dereferenced.
     *
     * @type {boolean|string}
     */
    circular: true
  },

  /**
   * Validator plug-ins that can be used to validate the schema.
   */
  validate: {
    zschema: zschemaValidator
  }
};

/**
 * Merges the properties of the source object into the target object.
 *
 * @param {object} target - The object that we're populating
 * @param {?object} source - The options that are being merged
 * @returns {object}
 */
function merge(target, source) {
  if (isMergeable(source)) {
    var keys = Object.keys(source);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var sourceSetting = source[key];
      var targetSetting = target[key];

      if (isMergeable(sourceSetting)) {
        // It's a nested object, so merge it recursively
        target[key] = merge(targetSetting || {}, sourceSetting);
      } else if (sourceSetting !== undefined) {
        // It's a scalar value, function, or array. No merging necessary. Just overwrite the target value.
        target[key] = sourceSetting;
      }
    }
  }
  return target;
}

/**
 * Determines whether the given value can be merged,
 * or if it is a scalar value that should just override the target value.
 *
 * @param   {*}  val
 * @returns {Boolean}
 */
function isMergeable(val) {
  return val && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' && !Array.isArray(val) && !(val instanceof RegExp) && !(val instanceof Date);
}

},{"./parsers/binary":196,"./parsers/json":197,"./parsers/text":198,"./parsers/yaml":199,"./resolvers/file":204,"./resolvers/http":205,"./validators/z-schema":211}],195:[function(require,module,exports){
(function (Buffer){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var ono = require('ono'),
    debug = require('./util/debug'),
    url = require('./util/url'),
    plugins = require('./util/plugins'),
    Promise = require('./util/promise');

module.exports = parse;

/**
 * Reads and parses the specified file path or URL.
 *
 * @param {string} path - This path MUST already be resolved, since `read` doesn't know the resolution context
 * @param {$Refs} $refs
 * @param {$RefParserOptions} options
 *
 * @returns {Promise}
 * The promise resolves with the parsed file contents, NOT the raw (Buffer) contents.
 */
function parse(path, $refs, options) {
  try {
    // Remove the URL fragment, if any
    path = url.stripHash(path);

    // Add a new $Ref for this file, even though we don't have the value yet.
    // This ensures that we don't simultaneously read & parse the same file multiple times
    var $ref = $refs._add(path);

    // This "file object" will be passed to all resolvers and parsers.
    var file = {
      url: path,
      extension: url.getExtension(path)
    };

    // Read the file and then parse the data
    return readFile(file, options).then(function (resolver) {
      $ref.pathType = resolver.plugin.name;
      file.data = resolver.result;
      return parseFile(file, options);
    }).then(function (parser) {
      $ref.value = parser.result;
      return parser.result;
    });
  } catch (e) {
    return Promise.reject(e);
  }
}

/**
 * Reads the given file, using the configured resolver plugins
 *
 * @param {object} file           - An object containing information about the referenced file
 * @param {string} file.url       - The full URL of the referenced file
 * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
 * @param {$RefParserOptions} options
 *
 * @returns {Promise}
 * The promise resolves with the raw file contents and the resolver that was used.
 */
function readFile(file, options) {
  return new Promise(function (resolve, reject) {
    debug('Reading %s', file.url);

    // Find the resolvers that can read this file
    var resolvers = plugins.all(options.resolve);
    resolvers = plugins.filter(resolvers, 'canRead', file);

    // Run the resolvers, in order, until one of them succeeds
    plugins.sort(resolvers);
    plugins.run(resolvers, 'read', file).then(resolve, onError);

    function onError(err) {
      // Throw the original error, if it's one of our own (user-friendly) errors.
      // Otherwise, throw a generic, friendly error.
      if (err && !(err instanceof SyntaxError)) {
        reject(err);
      } else {
        reject(ono.syntax('Unable to resolve $ref pointer "%s"', file.url));
      }
    }
  });
}

/**
 * Parses the given file's contents, using the configured parser plugins.
 *
 * @param {object} file           - An object containing information about the referenced file
 * @param {string} file.url       - The full URL of the referenced file
 * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
 * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver
 * @param {$RefParserOptions} options
 *
 * @returns {Promise}
 * The promise resolves with the parsed file contents and the parser that was used.
 */
function parseFile(file, options) {
  return new Promise(function (resolve, reject) {
    debug('Parsing %s', file.url);

    // Find the parsers that can read this file type.
    // If none of the parsers are an exact match for this file, then we'll try ALL of them.
    // This handles situations where the file IS a supported type, just with an unknown extension.
    var allParsers = plugins.all(options.parse);
    var filteredParsers = plugins.filter(allParsers, 'canParse', file);
    var parsers = filteredParsers.length > 0 ? filteredParsers : allParsers;

    // Run the parsers, in order, until one of them succeeds
    plugins.sort(parsers);
    plugins.run(parsers, 'parse', file).then(onParsed, onError);

    function onParsed(parser) {
      if (!parser.plugin.allowEmpty && isEmpty(parser.result)) {
        reject(ono.syntax('Error parsing "%s" as %s. \nParsed value is empty', file.url, parser.plugin.name));
      } else {
        resolve(parser);
      }
    }

    function onError(err) {
      if (err) {
        err = err instanceof Error ? err : new Error(err);
        reject(ono.syntax(err, 'Error parsing %s', file.url));
      } else {
        reject(ono.syntax('Unable to parse %s', file.url));
      }
    }
  });
}

/**
 * Determines whether the parsed value is "empty".
 *
 * @param {*} value
 * @returns {boolean}
 */
function isEmpty(value) {
  return value === undefined || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && Object.keys(value).length === 0 || typeof value === 'string' && value.trim().length === 0 || Buffer.isBuffer(value) && value.length === 0;
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})

},{"../../is-buffer/index.js":158,"./util/debug":206,"./util/plugins":207,"./util/promise":208,"./util/url":209,"ono":214}],196:[function(require,module,exports){
(function (Buffer){
'use strict';

var BINARY_REGEXP = /\.(jpeg|jpg|gif|png|bmp|ico)$/i;

module.exports = {
  /**
   * The order that this parser will run, in relation to other parsers.
   *
   * @type {number}
   */
  order: 400,

  /**
   * Whether to allow "empty" files (zero bytes).
   *
   * @type {boolean}
   */
  allowEmpty: true,

  /**
   * Determines whether this parser can parse a given file reference.
   * Parsers that return true will be tried, in order, until one successfully parses the file.
   * Parsers that return false will be skipped, UNLESS all parsers returned false, in which case
   * every parser will be tried.
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver
   * @returns {boolean}
   */
  canParse: function isBinary(file) {
    // Use this parser if the file is a Buffer, and has a known binary extension
    return Buffer.isBuffer(file.data) && BINARY_REGEXP.test(file.url);
  },

  /**
   * Parses the given data as a Buffer (byte array).
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver
   * @returns {Promise<Buffer>}
   */
  parse: function parseBinary(file) {
    if (Buffer.isBuffer(file.data)) {
      return file.data;
    } else {
      // This will reject if data is anything other than a string or typed array
      return new Buffer(file.data);
    }
  }
};

}).call(this,require("buffer").Buffer)

},{"buffer":15}],197:[function(require,module,exports){
(function (Buffer){
'use strict';

var Promise = require('../util/promise');

module.exports = {
  /**
   * The order that this parser will run, in relation to other parsers.
   *
   * @type {number}
   */
  order: 100,

  /**
   * Whether to allow "empty" files. This includes zero-byte files, as well as empty JSON objects.
   *
   * @type {boolean}
   */
  allowEmpty: true,

  /**
   * Determines whether this parser can parse a given file reference.
   * Parsers that match will be tried, in order, until one successfully parses the file.
   * Parsers that don't match will be skipped, UNLESS none of the parsers match, in which case
   * every parser will be tried.
   *
   * @type {RegExp|string[]|function}
   */
  canParse: '.json',

  /**
   * Parses the given file as JSON
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver
   * @returns {Promise}
   */
  parse: function parseJSON(file) {
    return new Promise(function (resolve, reject) {
      var data = file.data;
      if (Buffer.isBuffer(data)) {
        data = data.toString();
      }

      if (typeof data === 'string') {
        if (data.trim().length === 0) {
          resolve(undefined); // This mirrors the YAML behavior
        } else {
          resolve(JSON.parse(data));
        }
      } else {
        // data is already a JavaScript value (object, array, number, null, NaN, etc.)
        resolve(data);
      }
    });
  }
};

}).call(this,{"isBuffer":require("../../../is-buffer/index.js")})

},{"../../../is-buffer/index.js":158,"../util/promise":208}],198:[function(require,module,exports){
(function (Buffer){
'use strict';

var TEXT_REGEXP = /\.(txt|htm|html|md|xml|js|min|map|css|scss|less|svg)$/i;

module.exports = {
  /**
   * The order that this parser will run, in relation to other parsers.
   *
   * @type {number}
   */
  order: 300,

  /**
   * Whether to allow "empty" files (zero bytes).
   *
   * @type {boolean}
   */
  allowEmpty: true,

  /**
   * The encoding that the text is expected to be in.
   *
   * @type {string}
   */
  encoding: 'utf8',

  /**
   * Determines whether this parser can parse a given file reference.
   * Parsers that return true will be tried, in order, until one successfully parses the file.
   * Parsers that return false will be skipped, UNLESS all parsers returned false, in which case
   * every parser will be tried.
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver
   * @returns {boolean}
   */
  canParse: function isText(file) {
    // Use this parser if the file is a string or Buffer, and has a known text-based extension
    return (typeof file.data === 'string' || Buffer.isBuffer(file.data)) && TEXT_REGEXP.test(file.url);
  },

  /**
   * Parses the given file as text
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver
   * @returns {Promise<string>}
   */
  parse: function parseText(file) {
    if (typeof file.data === 'string') {
      return file.data;
    } else if (Buffer.isBuffer(file.data)) {
      return file.data.toString(this.encoding);
    } else {
      throw new Error('data is not text');
    }
  }
};

}).call(this,{"isBuffer":require("../../../is-buffer/index.js")})

},{"../../../is-buffer/index.js":158}],199:[function(require,module,exports){
(function (Buffer){
'use strict';

var Promise = require('../util/promise'),
    YAML = require('../util/yaml');

module.exports = {
  /**
   * The order that this parser will run, in relation to other parsers.
   *
   * @type {number}
   */
  order: 200,

  /**
   * Whether to allow "empty" files. This includes zero-byte files, as well as empty JSON objects.
   *
   * @type {boolean}
   */
  allowEmpty: true,

  /**
   * Determines whether this parser can parse a given file reference.
   * Parsers that match will be tried, in order, until one successfully parses the file.
   * Parsers that don't match will be skipped, UNLESS none of the parsers match, in which case
   * every parser will be tried.
   *
   * @type {RegExp|string[]|function}
   */
  canParse: ['.yaml', '.yml', '.json'], // JSON is valid YAML

  /**
   * Parses the given file as YAML
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver
   * @returns {Promise}
   */
  parse: function parseYAML(file) {
    return new Promise(function (resolve, reject) {
      var data = file.data;
      if (Buffer.isBuffer(data)) {
        data = data.toString();
      }

      if (typeof data === 'string') {
        resolve(YAML.parse(data));
      } else {
        // data is already a JavaScript value (object, array, number, null, NaN, etc.)
        resolve(data);
      }
    });
  }
};

}).call(this,{"isBuffer":require("../../../is-buffer/index.js")})

},{"../../../is-buffer/index.js":158,"../util/promise":208,"../util/yaml":210}],200:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = Pointer;

var $Ref = require('./ref'),
    url = require('./util/url'),
    ono = require('ono'),
    slashes = /\//g,
    tildes = /~/g,
    escapedSlash = /~1/g,
    escapedTilde = /~0/g;

/**
 * This class represents a single JSON pointer and its resolved value.
 *
 * @param {$Ref} $ref
 * @param {string} path
 * @constructor
 */
function Pointer($ref, path) {
  /**
   * The {@link $Ref} object that contains this {@link Pointer} object.
   * @type {$Ref}
   */
  this.$ref = $ref;

  /**
   * The file path or URL, containing the JSON pointer in the hash.
   * This path is relative to the path of the main JSON schema file.
   * @type {string}
   */
  this.path = path;

  /**
   * The value of the JSON pointer.
   * Can be any JSON type, not just objects. Unknown file types are represented as Buffers (byte arrays).
   * @type {?*}
   */
  this.value = undefined;

  /**
   * Indicates whether the pointer references itself.
   * @type {boolean}
   */
  this.circular = false;
}

/**
 * Resolves the value of a nested property within the given object.
 *
 * @param {*} obj - The object that will be crawled
 * @param {$RefParserOptions} options
 *
 * @returns {Pointer}
 * Returns a JSON pointer whose {@link Pointer#value} is the resolved value.
 * If resolving this value required resolving other JSON references, then
 * the {@link Pointer#$ref} and {@link Pointer#path} will reflect the resolution path
 * of the resolved value.
 */
Pointer.prototype.resolve = function (obj, options) {
  var tokens = Pointer.parse(this.path);

  // Crawl the object, one token at a time
  this.value = obj;
  for (var i = 0; i < tokens.length; i++) {
    if (resolveIf$Ref(this, options)) {
      // The $ref path has changed, so append the remaining tokens to the path
      this.path = Pointer.join(this.path, tokens.slice(i));
    }

    var token = tokens[i];
    if (this.value[token] === undefined) {
      throw ono.syntax('Error resolving $ref pointer "%s". \nToken "%s" does not exist.', this.path, token);
    } else {
      this.value = this.value[token];
    }
  }

  // Resolve the final value
  resolveIf$Ref(this, options);
  return this;
};

/**
 * Sets the value of a nested property within the given object.
 *
 * @param {*} obj - The object that will be crawled
 * @param {*} value - the value to assign
 * @param {$RefParserOptions} options
 *
 * @returns {*}
 * Returns the modified object, or an entirely new object if the entire object is overwritten.
 */
Pointer.prototype.set = function (obj, value, options) {
  var tokens = Pointer.parse(this.path);
  var token;

  if (tokens.length === 0) {
    // There are no tokens, replace the entire object with the new value
    this.value = value;
    return value;
  }

  // Crawl the object, one token at a time
  this.value = obj;
  for (var i = 0; i < tokens.length - 1; i++) {
    resolveIf$Ref(this, options);

    token = tokens[i];
    if (this.value && this.value[token] !== undefined) {
      // The token exists
      this.value = this.value[token];
    } else {
      // The token doesn't exist, so create it
      this.value = setValue(this, token, {});
    }
  }

  // Set the value of the final token
  resolveIf$Ref(this, options);
  token = tokens[tokens.length - 1];
  setValue(this, token, value);

  // Return the updated object
  return obj;
};

/**
 * Parses a JSON pointer (or a path containing a JSON pointer in the hash)
 * and returns an array of the pointer's tokens.
 * (e.g. "schema.json#/definitions/person/name" => ["definitions", "person", "name"])
 *
 * The pointer is parsed according to RFC 6901
 * {@link https://tools.ietf.org/html/rfc6901#section-3}
 *
 * @param {string} path
 * @returns {string[]}
 */
Pointer.parse = function (path) {
  // Get the JSON pointer from the path's hash
  var pointer = url.getHash(path).substr(1);

  // If there's no pointer, then there are no tokens,
  // so return an empty array
  if (!pointer) {
    return [];
  }

  // Split into an array
  pointer = pointer.split('/');

  // Decode each part, according to RFC 6901
  for (var i = 0; i < pointer.length; i++) {
    pointer[i] = decodeURI(pointer[i].replace(escapedSlash, '/').replace(escapedTilde, '~'));
  }

  if (pointer[0] !== '') {
    throw ono.syntax('Invalid $ref pointer "%s". Pointers must begin with "#/"', pointer);
  }

  return pointer.slice(1);
};

/**
 * Creates a JSON pointer path, by joining one or more tokens to a base path.
 *
 * @param {string} base - The base path (e.g. "schema.json#/definitions/person")
 * @param {string|string[]} tokens - The token(s) to append (e.g. ["name", "first"])
 * @returns {string}
 */
Pointer.join = function (base, tokens) {
  // Ensure that the base path contains a hash
  if (base.indexOf('#') === -1) {
    base += '#';
  }

  // Append each token to the base path
  tokens = Array.isArray(tokens) ? tokens : [tokens];
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];
    // Encode the token, according to RFC 6901
    base += '/' + encodeURI(token.replace(tildes, '~0').replace(slashes, '~1'));
  }

  return base;
};

/**
 * If the given pointer's {@link Pointer#value} is a JSON reference,
 * then the reference is resolved and {@link Pointer#value} is replaced with the resolved value.
 * In addition, {@link Pointer#path} and {@link Pointer#$ref} are updated to reflect the
 * resolution path of the new value.
 *
 * @param {Pointer} pointer
 * @param {$RefParserOptions} options
 * @returns {boolean} - Returns `true` if the resolution path changed
 */
function resolveIf$Ref(pointer, options) {
  // Is the value a JSON reference? (and allowed?)

  if ($Ref.isAllowed$Ref(pointer.value, options)) {
    var $refPath = url.resolve(pointer.path, pointer.value.$ref);

    if ($refPath === pointer.path) {
      // The value is a reference to itself, so there's nothing to do.
      pointer.circular = true;
    } else {
      var resolved = pointer.$ref.$refs._resolve($refPath, options);

      if ($Ref.isExtended$Ref(pointer.value)) {
        // This JSON reference "extends" the resolved value, rather than simply pointing to it.
        // So the resolved path does NOT change.  Just the value does.
        pointer.value = $Ref.dereference(pointer.value, resolved.value);
      } else {
        // Resolve the reference
        pointer.$ref = resolved.$ref;
        pointer.path = resolved.path;
        pointer.value = resolved.value;
      }

      return true;
    }
  }
}

/**
 * Sets the specified token value of the {@link Pointer#value}.
 *
 * The token is evaluated according to RFC 6901.
 * {@link https://tools.ietf.org/html/rfc6901#section-4}
 *
 * @param {Pointer} pointer - The JSON Pointer whose value will be modified
 * @param {string} token - A JSON Pointer token that indicates how to modify `obj`
 * @param {*} value - The value to assign
 * @returns {*} - Returns the assigned value
 */
function setValue(pointer, token, value) {
  if (pointer.value && _typeof(pointer.value) === 'object') {
    if (token === '-' && Array.isArray(pointer.value)) {
      pointer.value.push(value);
    } else {
      pointer.value[token] = value;
    }
  } else {
    throw ono.syntax('Error assigning $ref pointer "%s". \nCannot set "%s" of a non-object.', pointer.path, token);
  }
  return value;
}

},{"./ref":201,"./util/url":209,"ono":214}],201:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = $Ref;

var Pointer = require('./pointer');

/**
 * This class represents a single JSON reference and its resolved value.
 *
 * @constructor
 */
function $Ref() {
  /**
   * The file path or URL of the referenced file.
   * This path is relative to the path of the main JSON schema file.
   *
   * This path does NOT contain document fragments (JSON pointers). It always references an ENTIRE file.
   * Use methods such as {@link $Ref#get}, {@link $Ref#resolve}, and {@link $Ref#exists} to get
   * specific JSON pointers within the file.
   *
   * @type {string}
   */
  this.path = undefined;

  /**
   * The resolved value of the JSON reference.
   * Can be any JSON type, not just objects. Unknown file types are represented as Buffers (byte arrays).
   * @type {?*}
   */
  this.value = undefined;

  /**
   * The {@link $Refs} object that contains this {@link $Ref} object.
   * @type {$Refs}
   */
  this.$refs = undefined;

  /**
   * Indicates the type of {@link $Ref#path} (e.g. "file", "http", etc.)
   * @type {?string}
   */
  this.pathType = undefined;
}

/**
 * Determines whether the given JSON reference exists within this {@link $Ref#value}.
 *
 * @param {string} path - The full path being resolved, optionally with a JSON pointer in the hash
 * @param {$RefParserOptions} options
 * @returns {boolean}
 */
$Ref.prototype.exists = function (path, options) {
  try {
    this.resolve(path, options);
    return true;
  } catch (e) {
    return false;
  }
};

/**
 * Resolves the given JSON reference within this {@link $Ref#value} and returns the resolved value.
 *
 * @param {string} path - The full path being resolved, optionally with a JSON pointer in the hash
 * @param {$RefParserOptions} options
 * @returns {*} - Returns the resolved value
 */
$Ref.prototype.get = function (path, options) {
  return this.resolve(path, options).value;
};

/**
 * Resolves the given JSON reference within this {@link $Ref#value}.
 *
 * @param {string} path - The full path being resolved, optionally with a JSON pointer in the hash
 * @param {$RefParserOptions} options
 * @returns {Pointer}
 */
$Ref.prototype.resolve = function (path, options) {
  var pointer = new Pointer(this, path);
  return pointer.resolve(this.value, options);
};

/**
 * Sets the value of a nested property within this {@link $Ref#value}.
 * If the property, or any of its parents don't exist, they will be created.
 *
 * @param {string} path - The full path of the property to set, optionally with a JSON pointer in the hash
 * @param {*} value - The value to assign
 */
$Ref.prototype.set = function (path, value) {
  var pointer = new Pointer(this, path);
  this.value = pointer.set(this.value, value);
};

/**
 * Determines whether the given value is a JSON reference.
 *
 * @param {*} value - The value to inspect
 * @returns {boolean}
 */
$Ref.is$Ref = function (value) {
  return value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && typeof value.$ref === 'string' && value.$ref.length > 0;
};

/**
 * Determines whether the given value is an external JSON reference.
 *
 * @param {*} value - The value to inspect
 * @returns {boolean}
 */
$Ref.isExternal$Ref = function (value) {
  return $Ref.is$Ref(value) && value.$ref[0] !== '#';
};

/**
 * Determines whether the given value is a JSON reference, and whether it is allowed by the options.
 * For example, if it references an external file, then options.resolve.external must be true.
 *
 * @param {*} value - The value to inspect
 * @param {$RefParserOptions} options
 * @returns {boolean}
 */
$Ref.isAllowed$Ref = function (value, options) {
  if ($Ref.is$Ref(value)) {
    if (value.$ref.substr(0, 2) === '#/' || value.$ref === '#') {
      // It's a JSON Pointer reference, which is always allowed
      return true;
    } else if (value.$ref[0] !== '#' && (!options || options.resolve.external)) {
      // It's an external reference, which is allowed by the options
      return true;
    }
  }
};

/**
 * Determines whether the given value is a JSON reference that "extends" its resolved value.
 * That is, it has extra properties (in addition to "$ref"), so rather than simply pointing to
 * an existing value, this $ref actually creates a NEW value that is a shallow copy of the resolved
 * value, plus the extra properties.
 *
 * @example:
 *  {
 *    person: {
 *      properties: {
 *        firstName: { type: string }
 *        lastName: { type: string }
 *      }
 *    }
 *    employee: {
 *      properties: {
 *        $ref: #/person/properties
 *        salary: { type: number }
 *      }
 *    }
 *  }
 *
 *  In this example, "employee" is an extended $ref, since it extends "person" with an additional
 *  property (salary).  The result is a NEW value that looks like this:
 *
 *  {
 *    properties: {
 *      firstName: { type: string }
 *      lastName: { type: string }
 *      salary: { type: number }
 *    }
 *  }
 *
 * @param {*} value - The value to inspect
 * @returns {boolean}
 */
$Ref.isExtended$Ref = function (value) {
  return $Ref.is$Ref(value) && Object.keys(value).length > 1;
};

/**
 * Returns the resolved value of a JSON Reference.
 * If necessary, the resolved value is merged with the JSON Reference to create a new object
 *
 * @example:
 *  {
 *    person: {
 *      properties: {
 *        firstName: { type: string }
 *        lastName: { type: string }
 *      }
 *    }
 *    employee: {
 *      properties: {
 *        $ref: #/person/properties
 *        salary: { type: number }
 *      }
 *    }
 *  }
 *
 *  When "person" and "employee" are merged, you end up with the following object:
 *
 *  {
 *    properties: {
 *      firstName: { type: string }
 *      lastName: { type: string }
 *      salary: { type: number }
 *    }
 *  }
 *
 * @param {object} $ref - The JSON reference object (the one with the "$ref" property)
 * @param {*} resolvedValue - The resolved value, which can be any type
 * @returns {*} - Returns the dereferenced value
 */
$Ref.dereference = function ($ref, resolvedValue) {
  if (resolvedValue && (typeof resolvedValue === 'undefined' ? 'undefined' : _typeof(resolvedValue)) === 'object' && $Ref.isExtended$Ref($ref)) {
    var merged = {};
    Object.keys($ref).forEach(function (key) {
      if (key !== '$ref') {
        merged[key] = $ref[key];
      }
    });
    Object.keys(resolvedValue).forEach(function (key) {
      if (!(key in merged)) {
        merged[key] = resolvedValue[key];
      }
    });
    return merged;
  } else {
    // Completely replace the original reference with the resolved value
    return resolvedValue;
  }
};

},{"./pointer":200}],202:[function(require,module,exports){
'use strict';

var ono = require('ono'),
    $Ref = require('./ref'),
    url = require('./util/url');

module.exports = $Refs;

/**
 * This class is a map of JSON references and their resolved values.
 */
function $Refs() {
  /**
   * Indicates whether the schema contains any circular references.
   *
   * @type {boolean}
   */
  this.circular = false;

  /**
   * A map of paths/urls to {@link $Ref} objects
   *
   * @type {object}
   * @protected
   */
  this._$refs = {};

  /**
   * The {@link $Ref} object that is the root of the JSON schema.
   *
   * @type {$Ref}
   * @protected
   */
  this._root$Ref = null;
}

/**
 * Returns the paths of all the files/URLs that are referenced by the JSON schema,
 * including the schema itself.
 *
 * @param {...string|string[]} [types] - Only return paths of the given types ("file", "http", etc.)
 * @returns {string[]}
 */
$Refs.prototype.paths = function (types) {
  var paths = getPaths(this._$refs, arguments);
  return paths.map(function (path) {
    return path.decoded;
  });
};

/**
 * Returns the map of JSON references and their resolved values.
 *
 * @param {...string|string[]} [types] - Only return references of the given types ("file", "http", etc.)
 * @returns {object}
 */
$Refs.prototype.values = function (types) {
  var $refs = this._$refs;
  var paths = getPaths($refs, arguments);
  return paths.reduce(function (obj, path) {
    obj[path.decoded] = $refs[path.encoded].value;
    return obj;
  }, {});
};

/**
 * Returns a POJO (plain old JavaScript object) for serialization as JSON.
 *
 * @returns {object}
 */
$Refs.prototype.toJSON = $Refs.prototype.values;

/**
 * Determines whether the given JSON reference exists.
 *
 * @param {string} path - The path being resolved, optionally with a JSON pointer in the hash
 * @param {$RefParserOptions} [options]
 * @returns {boolean}
 */
$Refs.prototype.exists = function (path, options) {
  try {
    this._resolve(path, options);
    return true;
  } catch (e) {
    return false;
  }
};

/**
 * Resolves the given JSON reference and returns the resolved value.
 *
 * @param {string} path - The path being resolved, with a JSON pointer in the hash
 * @param {$RefParserOptions} [options]
 * @returns {*} - Returns the resolved value
 */
$Refs.prototype.get = function (path, options) {
  return this._resolve(path, options).value;
};

/**
 * Sets the value of a nested property within this {@link $Ref#value}.
 * If the property, or any of its parents don't exist, they will be created.
 *
 * @param {string} path - The path of the property to set, optionally with a JSON pointer in the hash
 * @param {*} value - The value to assign
 */
$Refs.prototype.set = function (path, value) {
  path = url.resolve(this._root$Ref.path, path);
  var withoutHash = url.stripHash(path);
  var $ref = this._$refs[withoutHash];

  if (!$ref) {
    throw ono('Error resolving $ref pointer "%s". \n"%s" not found.', path, withoutHash);
  }

  $ref.set(path, value);
};

/**
 * Creates a new {@link $Ref} object and adds it to this {@link $Refs} object.
 *
 * @param {string} path  - The file path or URL of the referenced file
 * @param {*} [value] - Optional. The value of the $ref.
 */
$Refs.prototype._add = function (path, value) {
  var withoutHash = url.stripHash(path);

  var $ref = new $Ref();
  $ref.path = withoutHash;
  $ref.value = value;
  $ref.$refs = this;

  this._$refs[withoutHash] = $ref;
  this._root$Ref = this._root$Ref || $ref;

  return $ref;
};

/**
 * Resolves the given JSON reference.
 *
 * @param {string} path - The path being resolved, optionally with a JSON pointer in the hash
 * @param {$RefParserOptions} [options]
 * @returns {Pointer}
 * @protected
 */
$Refs.prototype._resolve = function (path, options) {
  path = url.resolve(this._root$Ref.path, path);
  var withoutHash = url.stripHash(path);
  var $ref = this._$refs[withoutHash];

  if (!$ref) {
    throw ono('Error resolving $ref pointer "%s". \n"%s" not found.', path, withoutHash);
  }

  return $ref.resolve(path, options);
};

/**
 * Returns the specified {@link $Ref} object, or undefined.
 *
 * @param {string} path - The path being resolved, optionally with a JSON pointer in the hash
 * @returns {$Ref|undefined}
 * @protected
 */
$Refs.prototype._get$Ref = function (path) {
  path = url.resolve(this._root$Ref.path, path);
  var withoutHash = url.stripHash(path);
  return this._$refs[withoutHash];
};

/**
 * Returns the encoded and decoded paths keys of the given object.
 *
 * @param {object} $refs - The object whose keys are URL-encoded paths
 * @param {...string|string[]} [types] - Only return paths of the given types ("file", "http", etc.)
 * @returns {object[]}
 */
function getPaths($refs, types) {
  var paths = Object.keys($refs);

  // Filter the paths by type
  types = Array.isArray(types[0]) ? types[0] : Array.prototype.slice.call(types);
  if (types.length > 0 && types[0]) {
    paths = paths.filter(function (key) {
      return types.indexOf($refs[key].pathType) !== -1;
    });
  }

  // Decode local filesystem paths
  return paths.map(function (path) {
    return {
      encoded: path,
      decoded: $refs[path].pathType === 'file' ? url.toFileSystemPath(path, true) : path
    };
  });
}

},{"./ref":201,"./util/url":209,"ono":214}],203:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var Promise = require('./util/promise'),
    $Ref = require('./ref'),
    Pointer = require('./pointer'),
    parse = require('./parse'),
    debug = require('./util/debug'),
    url = require('./util/url');

module.exports = resolveExternal;

/**
 * Crawls the JSON schema, finds all external JSON references, and resolves their values.
 * This method does not mutate the JSON schema. The resolved values are added to {@link $RefParser#$refs}.
 *
 * NOTE: We only care about EXTERNAL references here. INTERNAL references are only relevant when dereferencing.
 *
 * @param {$RefParser} parser
 * @param {$RefParserOptions} options
 *
 * @returns {Promise}
 * The promise resolves once all JSON references in the schema have been resolved,
 * including nested references that are contained in externally-referenced files.
 */
function resolveExternal(parser, options) {
  if (!options.resolve.external) {
    // Nothing to resolve, so exit early
    return Promise.resolve();
  }

  try {
    debug('Resolving $ref pointers in %s', parser.$refs._root$Ref.path);
    var promises = crawl(parser.schema, parser.$refs._root$Ref.path + '#', parser.$refs, options);
    return Promise.all(promises);
  } catch (e) {
    return Promise.reject(e);
  }
}

/**
 * Recursively crawls the given value, and resolves any external JSON references.
 *
 * @param {*} obj - The value to crawl. If it's not an object or array, it will be ignored.
 * @param {string} path - The full path of `obj`, possibly with a JSON Pointer in the hash
 * @param {$Refs} $refs
 * @param {$RefParserOptions} options
 *
 * @returns {Promise[]}
 * Returns an array of promises. There will be one promise for each JSON reference in `obj`.
 * If `obj` does not contain any JSON references, then the array will be empty.
 * If any of the JSON references point to files that contain additional JSON references,
 * then the corresponding promise will internally reference an array of promises.
 */
function crawl(obj, path, $refs, options) {
  var promises = [];

  if (obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
    if ($Ref.isExternal$Ref(obj)) {
      promises.push(resolve$Ref(obj, path, $refs, options));
    } else {
      Object.keys(obj).forEach(function (key) {
        var keyPath = Pointer.join(path, key);
        var value = obj[key];

        if ($Ref.isExternal$Ref(value)) {
          promises.push(resolve$Ref(value, keyPath, $refs, options));
        } else {
          promises = promises.concat(crawl(value, keyPath, $refs, options));
        }
      });
    }
  }

  return promises;
}

/**
 * Resolves the given JSON Reference, and then crawls the resulting value.
 *
 * @param {{$ref: string}} $ref - The JSON Reference to resolve
 * @param {string} path - The full path of `$ref`, possibly with a JSON Pointer in the hash
 * @param {$Refs} $refs
 * @param {$RefParserOptions} options
 *
 * @returns {Promise}
 * The promise resolves once all JSON references in the object have been resolved,
 * including nested references that are contained in externally-referenced files.
 */
function resolve$Ref($ref, path, $refs, options) {
  debug('Resolving $ref pointer "%s" at %s', $ref.$ref, path);

  var resolvedPath = url.resolve(path, $ref.$ref);
  var withoutHash = url.stripHash(resolvedPath);

  // Do we already have this $ref?
  $ref = $refs._$refs[withoutHash];
  if ($ref) {
    // We've already parsed this $ref, so use the existing value
    return Promise.resolve($ref.value);
  }

  // Parse the $referenced file/url
  return parse(resolvedPath, $refs, options).then(function (result) {
    // Crawl the parsed value
    debug('Resolving $ref pointers in %s', withoutHash);
    var promises = crawl(result, withoutHash + '#', $refs, options);
    return Promise.all(promises);
  });
}

},{"./parse":195,"./pointer":200,"./ref":201,"./util/debug":206,"./util/promise":208,"./util/url":209}],204:[function(require,module,exports){
'use strict';

var fs = require('fs'),
    ono = require('ono'),
    Promise = require('../util/promise'),
    url = require('../util/url'),
    debug = require('../util/debug');

module.exports = {
  /**
   * The order that this resolver will run, in relation to other resolvers.
   *
   * @type {number}
   */
  order: 100,

  /**
   * Determines whether this resolver can read a given file reference.
   * Resolvers that return true will be tried, in order, until one successfully resolves the file.
   * Resolvers that return false will not be given a chance to resolve the file.
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @returns {boolean}
   */
  canRead: function isFile(file) {
    return url.isFileSystemPath(file.url);
  },

  /**
   * Reads the given file and returns its raw contents as a Buffer.
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @returns {Promise<Buffer>}
   */
  read: function readFile(file) {
    return new Promise(function (resolve, reject) {
      var path;
      try {
        path = url.toFileSystemPath(file.url);
      } catch (err) {
        reject(ono.uri(err, 'Malformed URI: %s', file.url));
      }

      debug('Opening file: %s', path);

      try {
        fs.readFile(path, function (err, data) {
          if (err) {
            reject(ono(err, 'Error opening file "%s"', path));
          } else {
            resolve(data);
          }
        });
      } catch (err) {
        reject(ono(err, 'Error opening file "%s"', path));
      }
    });
  }
};

},{"../util/debug":206,"../util/promise":208,"../util/url":209,"fs":13,"ono":214}],205:[function(require,module,exports){
(function (process,Buffer){
'use strict';

var http = require('http'),
    https = require('https'),
    ono = require('ono'),
    url = require('../util/url'),
    debug = require('../util/debug'),
    Promise = require('../util/promise');

module.exports = {
  /**
   * The order that this resolver will run, in relation to other resolvers.
   *
   * @type {number}
   */
  order: 200,

  /**
   * HTTP headers to send when downloading files.
   *
   * @example:
   * {
   *   "User-Agent": "JSON Schema $Ref Parser",
   *   Accept: "application/json"
   * }
   *
   * @type {object}
   */
  headers: null,

  /**
   * HTTP request timeout (in milliseconds).
   *
   * @type {number}
   */
  timeout: 5000, // 5 seconds

  /**
   * The maximum number of HTTP redirects to follow.
   * To disable automatic following of redirects, set this to zero.
   *
   * @type {number}
   */
  redirects: 5,

  /**
   * The `withCredentials` option of XMLHttpRequest.
   * Set this to `true` if you're downloading files from a CORS-enabled server that requires authentication
   *
   * @type {boolean}
   */
  withCredentials: false,

  /**
   * Determines whether this resolver can read a given file reference.
   * Resolvers that return true will be tried in order, until one successfully resolves the file.
   * Resolvers that return false will not be given a chance to resolve the file.
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @returns {boolean}
   */
  canRead: function isHttp(file) {
    return url.isHttp(file.url);
  },

  /**
   * Reads the given URL and returns its raw contents as a Buffer.
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @returns {Promise<Buffer>}
   */
  read: function readHttp(file) {
    var u = url.parse(file.url);

    if (process.browser && !u.protocol) {
      // Use the protocol of the current page
      u.protocol = url.parse(location.href).protocol;
    }

    return download(u, this);
  }
};

/**
 * Downloads the given file.
 *
 * @param {Url|string} u        - The url to download (can be a parsed {@link Url} object)
 * @param {object} httpOptions  - The `options.resolve.http` object
 * @param {number} [redirects]  - The redirect URLs that have already been followed
 *
 * @returns {Promise<Buffer>}
 * The promise resolves with the raw downloaded data, or rejects if there is an HTTP error.
 */
function download(u, httpOptions, redirects) {
  return new Promise(function (resolve, reject) {
    u = url.parse(u);
    redirects = redirects || [];
    redirects.push(u.href);

    get(u, httpOptions).then(function (res) {
      if (res.statusCode >= 400) {
        throw ono({ status: res.statusCode }, 'HTTP ERROR %d', res.statusCode);
      } else if (res.statusCode >= 300) {
        if (redirects.length > httpOptions.redirects) {
          reject(ono({ status: res.statusCode }, 'Error downloading %s. \nToo many redirects: \n  %s', redirects[0], redirects.join(' \n  ')));
        } else if (!res.headers.location) {
          throw ono({ status: res.statusCode }, 'HTTP %d redirect with no location header', res.statusCode);
        } else {
          debug('HTTP %d redirect %s -> %s', res.statusCode, u.href, res.headers.location);
          var redirectTo = url.resolve(u, res.headers.location);
          download(redirectTo, httpOptions, redirects).then(resolve, reject);
        }
      } else {
        resolve(res.body || new Buffer(0));
      }
    }).catch(function (err) {
      reject(ono(err, 'Error downloading', u.href));
    });
  });
}

/**
 * Sends an HTTP GET request.
 *
 * @param {Url} u - A parsed {@link Url} object
 * @param {object} httpOptions - The `options.resolve.http` object
 *
 * @returns {Promise<Response>}
 * The promise resolves with the HTTP Response object.
 */
function get(u, httpOptions) {
  return new Promise(function (resolve, reject) {
    debug('GET', u.href);

    var protocol = u.protocol === 'https:' ? https : http;
    var req = protocol.get({
      hostname: u.hostname,
      port: u.port,
      path: u.path,
      auth: u.auth,
      headers: httpOptions.headers || {},
      withCredentials: httpOptions.withCredentials
    });

    if (typeof req.setTimeout === 'function') {
      req.setTimeout(httpOptions.timeout);
    }

    req.on('timeout', function () {
      req.abort();
    });

    req.on('error', reject);

    req.once('response', function (res) {
      res.body = new Buffer(0);

      res.on('data', function (data) {
        res.body = Buffer.concat([res.body, new Buffer(data)]);
      });

      res.on('error', reject);

      res.on('end', function () {
        resolve(res);
      });
    });
  });
}

}).call(this,require('_process'),require("buffer").Buffer)

},{"../util/debug":206,"../util/promise":208,"../util/url":209,"_process":218,"buffer":15,"http":238,"https":155,"ono":214}],206:[function(require,module,exports){
'use strict';

var debug = require('debug');

/**
 * Writes messages to stdout.
 * Log messages are suppressed by default, but can be enabled by setting the DEBUG variable.
 * @type {function}
 */
module.exports = debug('json-schema-ref-parser');

},{"debug":19}],207:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var Promise = require('./promise'),
    debug = require('./debug');

/**
 * Returns the given plugins as an array, rather than an object map.
 * All other methods in this module expect an array of plugins rather than an object map.
 *
 * @param  {object} plugins - A map of plugin objects
 * @return {object[]}
 */
exports.all = function (plugins) {
  return Object.keys(plugins).filter(function (key) {
    return _typeof(plugins[key]) === 'object';
  }).map(function (key) {
    plugins[key].name = key;
    return plugins[key];
  });
};

/**
 * Filters the given plugins, returning only the ones return `true` for the given method.
 *
 * @param  {object[]} plugins - An array of plugin objects
 * @param  {string}   method  - The name of the filter method to invoke for each plugin
 * @param  {object}   file    - A file info object, which will be passed to each method
 * @return {object[]}
 */
exports.filter = function (plugins, method, file) {
  return plugins.filter(function (plugin) {
    return !!getResult(plugin, method, file);
  });
};

/**
 * Sorts the given plugins, in place, by their `order` property.
 *
 * @param {object[]} plugins - An array of plugin objects
 * @returns {object[]}
 */
exports.sort = function (plugins) {
  plugins.forEach(function (plugin) {
    plugin.order = plugin.order || Number.MAX_SAFE_INTEGER;
  });

  return plugins.sort(function (a, b) {
    return a.order - b.order;
  });
};

/**
 * Runs the specified method of the given plugins, in order, until one of them returns a successful result.
 * Each method can return a synchronous value, a Promise, or call an error-first callback.
 * If the promise resolves successfully, or the callback is called without an error, then the result
 * is immediately returned and no further plugins are called.
 * If the promise rejects, or the callback is called with an error, then the next plugin is called.
 * If ALL plugins fail, then the last error is thrown.
 *
 * @param {object[]}  plugins - An array of plugin objects
 * @param {string}    method  - The name of the method to invoke for each plugin
 * @param {object}    file    - A file info object, which will be passed to each method
 * @returns {Promise}
 */
exports.run = function (plugins, method, file) {
  var plugin,
      lastError,
      index = 0;

  return new Promise(function (resolve, reject) {
    runNextPlugin();

    function runNextPlugin() {
      plugin = plugins[index++];
      if (!plugin) {
        // There are no more functions, so re-throw the last error
        return reject(lastError);
      }

      try {
        debug('  %s', plugin.name);
        var result = getResult(plugin, method, file, callback);
        if (result && typeof result.then === 'function') {
          // A promise was returned
          result.then(onSuccess, onError);
        } else if (result !== undefined) {
          // A synchronous result was returned
          onSuccess(result);
        }
        // else { the callback will be called }
      } catch (e) {
        onError(e);
      }
    }

    function callback(err, result) {
      if (err) {
        onError(err);
      } else {
        onSuccess(result);
      }
    }

    function onSuccess(result) {
      debug('    success');
      resolve({
        plugin: plugin,
        result: result
      });
    }

    function onError(err) {
      debug('    %s', err.message || err);
      lastError = err;
      runNextPlugin();
    }
  });
};

/**
 * Returns the value of the given property.
 * If the property is a function, then the result of the function is returned.
 * If the value is a RegExp, then it will be tested against the file URL.
 * If the value is an aray, then it will be compared against the file extension.
 *
 * @param   {object}   obj        - The object whose property/method is called
 * @param   {string}   prop       - The name of the property/method to invoke
 * @param   {object}   file       - A file info object, which will be passed to the method
 * @param   {function} [callback] - A callback function, which will be passed to the method
 * @returns {*}
 */
function getResult(obj, prop, file, callback) {
  var value = obj[prop];

  if (typeof value === 'function') {
    return value.apply(obj, [file, callback]);
  }

  if (!callback) {
    // The synchronous plugin functions (canParse and canRead)
    // allow a "shorthand" syntax, where the user can match
    // files by RegExp or by file extension.
    if (value instanceof RegExp) {
      return value.test(file.url);
    } else if (typeof value === 'string') {
      return value === file.extension;
    } else if (Array.isArray(value)) {
      return value.indexOf(file.extension) !== -1;
    }
  }

  return value;
}

},{"./debug":206,"./promise":208}],208:[function(require,module,exports){
'use strict';

/** @type {Promise} **/

module.exports = typeof Promise === 'function' ? Promise : require('es6-promise').Promise;

},{"es6-promise":29}],209:[function(require,module,exports){
(function (process){
'use strict';

var isWindows = /^win/.test(process.platform),
    forwardSlashPattern = /\//g,
    protocolPattern = /^([a-z0-9.+-]+):\/\//i,
    url = module.exports;

// RegExp patterns to URL-encode special characters in local filesystem paths
var urlEncodePatterns = [/\?/g, '%3F', /\#/g, '%23', isWindows ? /\\/g : /\//, '/'];

// RegExp patterns to URL-decode special characters for local filesystem paths
var urlDecodePatterns = [/\%23/g, '#', /\%24/g, '$', /\%26/g, '&', /\%2C/g, ',', /\%40/g, '@'];

exports.parse = require('url').parse;
exports.resolve = require('url').resolve;

/**
 * Returns the current working directory (in Node) or the current page URL (in browsers).
 *
 * @returns {string}
 */
exports.cwd = function cwd() {
  return process.browser ? location.href : process.cwd() + '/';
};

/**
 * Returns the protocol of the given URL, or `undefined` if it has no protocol.
 *
 * @param   {string} path
 * @returns {?string}
 */
exports.getProtocol = function getProtocol(path) {
  var match = protocolPattern.exec(path);
  if (match) {
    return match[1].toLowerCase();
  }
};

/**
 * Returns the lowercased file extension of the given URL,
 * or an empty string if it has no extension.
 *
 * @param   {string} path
 * @returns {string}
 */
exports.getExtension = function getExtension(path) {
  var lastDot = path.lastIndexOf('.');
  if (lastDot >= 0) {
    return path.substr(lastDot).toLowerCase();
  }
  return '';
};

/**
 * Returns the hash (URL fragment), of the given path.
 * If there is no hash, then the root hash ("#") is returned.
 *
 * @param   {string} path
 * @returns {string}
 */
exports.getHash = function getHash(path) {
  var hashIndex = path.indexOf('#');
  if (hashIndex >= 0) {
    return path.substr(hashIndex);
  }
  return '#';
};

/**
 * Removes the hash (URL fragment), if any, from the given path.
 *
 * @param   {string} path
 * @returns {string}
 */
exports.stripHash = function stripHash(path) {
  var hashIndex = path.indexOf('#');
  if (hashIndex >= 0) {
    path = path.substr(0, hashIndex);
  }
  return path;
};

/**
 * Determines whether the given path is an HTTP(S) URL.
 *
 * @param   {string} path
 * @returns {boolean}
 */
exports.isHttp = function isHttp(path) {
  var protocol = url.getProtocol(path);
  if (protocol === 'http' || protocol === 'https') {
    return true;
  } else if (protocol === undefined) {
    // There is no protocol.  If we're running in a browser, then assume it's HTTP.
    return process.browser;
  } else {
    // It's some other protocol, such as "ftp://", "mongodb://", etc.
    return false;
  }
};

/**
 * Determines whether the given path is a filesystem path.
 * This includes "file://" URLs.
 *
 * @param   {string} path
 * @returns {boolean}
 */
exports.isFileSystemPath = function isFileSystemPath(path) {
  if (process.browser) {
    // We're running in a browser, so assume that all paths are URLs.
    // This way, even relative paths will be treated as URLs rather than as filesystem paths
    return false;
  }

  var protocol = url.getProtocol(path);
  return protocol === undefined || protocol === 'file';
};

/**
 * Converts a filesystem path to a properly-encoded URL.
 *
 * This is intended to handle situations where JSON Schema $Ref Parser is called
 * with a filesystem path that contains characters which are not allowed in URLs.
 *
 * @example
 * The following filesystem paths would be converted to the following URLs:
 *
 *    <"!@#$%^&*+=?'>.json              ==>   %3C%22!@%23$%25%5E&*+=%3F\'%3E.json
 *    C:\\My Documents\\File (1).json   ==>   C:/My%20Documents/File%20(1).json
 *    file://Project #42/file.json      ==>   file://Project%20%2342/file.json
 *
 * @param {string} path
 * @returns {string}
 */
exports.fromFileSystemPath = function fromFileSystemPath(path) {
  // Step 1: Manually encode characters that are not encoded by `encodeURI`.
  // This includes characters such as "#" and "?", which have special meaning in URLs,
  // but are just normal characters in a filesystem path.
  // On Windows, this will also replace backslashes with forward slashes,
  // rather than encoding them as special characters.
  for (var i = 0; i < urlEncodePatterns.length; i += 2) {
    path = path.replace(urlEncodePatterns[i], urlEncodePatterns[i + 1]);
  }

  // Step 2: `encodeURI` will take care of all other characters
  return encodeURI(path);
};

/**
 * Converts a URL to a local filesystem path.
 *
 * @param {string}  path
 * @param {boolean} [keepFileProtocol] - If true, then "file://" will NOT be stripped
 * @returns {string}
 */
exports.toFileSystemPath = function toFileSystemPath(path, keepFileProtocol) {
  // Step 1: `decodeURI` will decode characters such as Cyrillic characters, spaces, etc.
  path = decodeURI(path);

  // Step 2: Manually decode characters that are not decoded by `decodeURI`.
  // This includes characters such as "#" and "?", which have special meaning in URLs,
  // but are just normal characters in a filesystem path.
  for (var i = 0; i < urlDecodePatterns.length; i += 2) {
    path = path.replace(urlDecodePatterns[i], urlDecodePatterns[i + 1]);
  }

  // Step 3: If it's a "file://" URL, then format it consistently
  // or convert it to a local filesystem path
  var isFileUrl = path.substr(0, 7).toLowerCase() === 'file://';
  if (isFileUrl) {
    // Strip-off the protocol, and the initial "/", if there is one
    path = path[7] === '/' ? path.substr(8) : path.substr(7);

    // insert a colon (":") after the drive letter on Windows
    if (isWindows && path[1] === '/') {
      path = path[0] + ':' + path.substr(1);
    }

    if (keepFileProtocol) {
      // Return the consistently-formatted "file://" URL
      path = 'file:///' + path;
    } else {
      // Convert the "file://" URL to a local filesystem path.
      // On Windows, it will start with something like "C:/".
      // On Posix, it will start with "/"
      isFileUrl = false;
      path = isWindows ? path : '/' + path;
    }
  }

  // Step 4: On Windows, convert backslashes to forward slashes,
  // unless it's a "file://" URL
  if (isWindows && !isFileUrl) {
    path = path.replace(forwardSlashPattern, '\\');
  }

  return path;
};

}).call(this,require('_process'))

},{"_process":218,"url":248}],210:[function(require,module,exports){
/* eslint lines-around-comment: [2, {beforeBlockComment: false}] */
'use strict';

var yaml = require('js-yaml'),
    ono = require('ono');

/**
 * Simple YAML parsing functions, similar to {@link JSON.parse} and {@link JSON.stringify}
 */
module.exports = {
  /**
   * Parses a YAML string and returns the value.
   *
   * @param {string} text - The YAML string to be parsed
   * @param {function} [reviver] - Not currently supported. Provided for consistency with {@link JSON.parse}
   * @returns {*}
   */
  parse: function yamlParse(text, reviver) {
    try {
      return yaml.safeLoad(text);
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      } else {
        // https://github.com/nodeca/js-yaml/issues/153
        throw ono(e, e.message);
      }
    }
  },

  /**
   * Converts a JavaScript value to a YAML string.
   *
   * @param   {*} value - The value to convert to YAML
   * @param   {function|array} replacer - Not currently supported. Provided for consistency with {@link JSON.stringify}
   * @param   {string|number} space - The number of spaces to use for indentation, or a string containing the number of spaces.
   * @returns {string}
   */
  stringify: function yamlStringify(value, replacer, space) {
    try {
      var indent = (typeof space === 'string' ? space.length : space) || 2;
      return yaml.safeDump(value, { indent: indent });
    } catch (e) {
      if (e instanceof Error) {
        throw e;
      } else {
        // https://github.com/nodeca/js-yaml/issues/153
        throw ono(e, e.message);
      }
    }
  }
};

},{"js-yaml":160,"ono":214}],211:[function(require,module,exports){
'use strict';

module.exports = {
  /**
   * The order that this validator will run, in relation to other validators.
   *
   * @type {number}
   */
  order: 100,

  /**
   * Determines whether this validator can parse a given schema file.
   *
   * There are three opportunities at which a validator may choose to validate a schema:
   *
   *  1 - After the JSON Schema is parsed, but before any of its JSON References are resolved
   *
   *  2 - After all JSON References have been resolved (and the $Refs object has been populated),
   *      but before any references have been dereferenced
   *
   *  3 - After all JSON References have been dereferenced
   *
   * JSON Schema $Ref Parser's {@link $RefParser.validate} method will only perform as much processing
   * as is necessary to satisfy all validators. So, if all validators are able to process the
   * schema after step 1 above, then steps 2 and 3 will not be performed.  If some validators aren't
   * able to process the schema after step 1, then step 2 will be performed and the remaining validators
   * will be given a second chance to process the schema. If they all do, then step 3 will not be performed.
   * If there are still remaining validators, then step 3 will be performed and the remaining validators
   * will be given a third chance.
   *
   * @param {object} file               - An object containing information about the JSON Schema
   * @param {string} file.url           - The full URL of the schema file
   * @param {string} file.extension     - The lowercased scheam file extension (e.g. ".json", ".yaml", etc.)
   * @param {*}      file.data          - The raw file contents. This will be whatever data type was returned by the resolver
   * @param {object} file.parsed        - The parsed JSON Schema (available in steps 1, 2, and 3)
   * @param {$Refs}  file.resolved      - The resolved JSON References (available in steps 2 and 3)
   * @param {object} file.dereferenced  - The dereferenced JSON Schema (only available in step 3)
   * @returns {boolean}
   */
  canValidate: function canValidate(file) {
    // Z-Schema requires JSON References to already be resolved (but not dereferenced)
    return !!file.resolved;
  },

  /**
   * Validates the given JSON Schema
   *
   * @param {object} file           - An object containing information about the referenced file
   * @param {string} file.url       - The full URL of the referenced file
   * @param {string} file.extension - The lowercased file extension (e.g. ".txt", ".html", etc.)
   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver
   * @returns {Promise<Buffer>}
   */
  validate: function validate(file) {
    // TODO
  }
};

},{}],212:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};
  var type = typeof val === 'undefined' ? 'undefined' : _typeof(val);
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}

},{}],213:[function(require,module,exports){
(function (global,setImmediate){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! Native Promise Only
    v0.8.1 (c) Kyle Simpson
    MIT License: http://getify.mit-license.org
*/

(function UMD(name, context, definition) {
	// special form of UMD for polyfilling across evironments
	context[name] = context[name] || definition();
	if (typeof module != "undefined" && module.exports) {
		module.exports = context[name];
	} else if (typeof define == "function" && define.amd) {
		define(function $AMD$() {
			return context[name];
		});
	}
})("Promise", typeof global != "undefined" ? global : undefined, function DEF() {
	/*jshint validthis:true */
	"use strict";

	var builtInProp,
	    cycle,
	    scheduling_queue,
	    ToString = Object.prototype.toString,
	    timer = typeof setImmediate != "undefined" ? function timer(fn) {
		return setImmediate(fn);
	} : setTimeout;

	// dammit, IE8.
	try {
		Object.defineProperty({}, "x", {});
		builtInProp = function builtInProp(obj, name, val, config) {
			return Object.defineProperty(obj, name, {
				value: val,
				writable: true,
				configurable: config !== false
			});
		};
	} catch (err) {
		builtInProp = function builtInProp(obj, name, val) {
			obj[name] = val;
			return obj;
		};
	}

	// Note: using a queue instead of array for efficiency
	scheduling_queue = function Queue() {
		var first, last, item;

		function Item(fn, self) {
			this.fn = fn;
			this.self = self;
			this.next = void 0;
		}

		return {
			add: function add(fn, self) {
				item = new Item(fn, self);
				if (last) {
					last.next = item;
				} else {
					first = item;
				}
				last = item;
				item = void 0;
			},
			drain: function drain() {
				var f = first;
				first = last = cycle = void 0;

				while (f) {
					f.fn.call(f.self);
					f = f.next;
				}
			}
		};
	}();

	function schedule(fn, self) {
		scheduling_queue.add(fn, self);
		if (!cycle) {
			cycle = timer(scheduling_queue.drain);
		}
	}

	// promise duck typing
	function isThenable(o) {
		var _then,
		    o_type = typeof o === "undefined" ? "undefined" : _typeof(o);

		if (o != null && (o_type == "object" || o_type == "function")) {
			_then = o.then;
		}
		return typeof _then == "function" ? _then : false;
	}

	function notify() {
		for (var i = 0; i < this.chain.length; i++) {
			notifyIsolated(this, this.state === 1 ? this.chain[i].success : this.chain[i].failure, this.chain[i]);
		}
		this.chain.length = 0;
	}

	// NOTE: This is a separate function to isolate
	// the `try..catch` so that other code can be
	// optimized better
	function notifyIsolated(self, cb, chain) {
		var ret, _then;
		try {
			if (cb === false) {
				chain.reject(self.msg);
			} else {
				if (cb === true) {
					ret = self.msg;
				} else {
					ret = cb.call(void 0, self.msg);
				}

				if (ret === chain.promise) {
					chain.reject(TypeError("Promise-chain cycle"));
				} else if (_then = isThenable(ret)) {
					_then.call(ret, chain.resolve, chain.reject);
				} else {
					chain.resolve(ret);
				}
			}
		} catch (err) {
			chain.reject(err);
		}
	}

	function resolve(msg) {
		var _then,
		    self = this;

		// already triggered?
		if (self.triggered) {
			return;
		}

		self.triggered = true;

		// unwrap
		if (self.def) {
			self = self.def;
		}

		try {
			if (_then = isThenable(msg)) {
				schedule(function () {
					var def_wrapper = new MakeDefWrapper(self);
					try {
						_then.call(msg, function $resolve$() {
							resolve.apply(def_wrapper, arguments);
						}, function $reject$() {
							reject.apply(def_wrapper, arguments);
						});
					} catch (err) {
						reject.call(def_wrapper, err);
					}
				});
			} else {
				self.msg = msg;
				self.state = 1;
				if (self.chain.length > 0) {
					schedule(notify, self);
				}
			}
		} catch (err) {
			reject.call(new MakeDefWrapper(self), err);
		}
	}

	function reject(msg) {
		var self = this;

		// already triggered?
		if (self.triggered) {
			return;
		}

		self.triggered = true;

		// unwrap
		if (self.def) {
			self = self.def;
		}

		self.msg = msg;
		self.state = 2;
		if (self.chain.length > 0) {
			schedule(notify, self);
		}
	}

	function iteratePromises(Constructor, arr, resolver, rejecter) {
		for (var idx = 0; idx < arr.length; idx++) {
			(function IIFE(idx) {
				Constructor.resolve(arr[idx]).then(function $resolver$(msg) {
					resolver(idx, msg);
				}, rejecter);
			})(idx);
		}
	}

	function MakeDefWrapper(self) {
		this.def = self;
		this.triggered = false;
	}

	function MakeDef(self) {
		this.promise = self;
		this.state = 0;
		this.triggered = false;
		this.chain = [];
		this.msg = void 0;
	}

	function Promise(executor) {
		if (typeof executor != "function") {
			throw TypeError("Not a function");
		}

		if (this.__NPO__ !== 0) {
			throw TypeError("Not a promise");
		}

		// instance shadowing the inherited "brand"
		// to signal an already "initialized" promise
		this.__NPO__ = 1;

		var def = new MakeDef(this);

		this["then"] = function then(success, failure) {
			var o = {
				success: typeof success == "function" ? success : true,
				failure: typeof failure == "function" ? failure : false
			};
			// Note: `then(..)` itself can be borrowed to be used against
			// a different promise constructor for making the chained promise,
			// by substituting a different `this` binding.
			o.promise = new this.constructor(function extractChain(resolve, reject) {
				if (typeof resolve != "function" || typeof reject != "function") {
					throw TypeError("Not a function");
				}

				o.resolve = resolve;
				o.reject = reject;
			});
			def.chain.push(o);

			if (def.state !== 0) {
				schedule(notify, def);
			}

			return o.promise;
		};
		this["catch"] = function $catch$(failure) {
			return this.then(void 0, failure);
		};

		try {
			executor.call(void 0, function publicResolve(msg) {
				resolve.call(def, msg);
			}, function publicReject(msg) {
				reject.call(def, msg);
			});
		} catch (err) {
			reject.call(def, err);
		}
	}

	var PromisePrototype = builtInProp({}, "constructor", Promise,
	/*configurable=*/false);

	// Note: Android 4 cannot use `Object.defineProperty(..)` here
	Promise.prototype = PromisePrototype;

	// built-in "brand" to signal an "uninitialized" promise
	builtInProp(PromisePrototype, "__NPO__", 0,
	/*configurable=*/false);

	builtInProp(Promise, "resolve", function Promise$resolve(msg) {
		var Constructor = this;

		// spec mandated checks
		// note: best "isPromise" check that's practical for now
		if (msg && (typeof msg === "undefined" ? "undefined" : _typeof(msg)) == "object" && msg.__NPO__ === 1) {
			return msg;
		}

		return new Constructor(function executor(resolve, reject) {
			if (typeof resolve != "function" || typeof reject != "function") {
				throw TypeError("Not a function");
			}

			resolve(msg);
		});
	});

	builtInProp(Promise, "reject", function Promise$reject(msg) {
		return new this(function executor(resolve, reject) {
			if (typeof resolve != "function" || typeof reject != "function") {
				throw TypeError("Not a function");
			}

			reject(msg);
		});
	});

	builtInProp(Promise, "all", function Promise$all(arr) {
		var Constructor = this;

		// spec mandated checks
		if (ToString.call(arr) != "[object Array]") {
			return Constructor.reject(TypeError("Not an array"));
		}
		if (arr.length === 0) {
			return Constructor.resolve([]);
		}

		return new Constructor(function executor(resolve, reject) {
			if (typeof resolve != "function" || typeof reject != "function") {
				throw TypeError("Not a function");
			}

			var len = arr.length,
			    msgs = Array(len),
			    count = 0;

			iteratePromises(Constructor, arr, function resolver(idx, msg) {
				msgs[idx] = msg;
				if (++count === len) {
					resolve(msgs);
				}
			}, reject);
		});
	});

	builtInProp(Promise, "race", function Promise$race(arr) {
		var Constructor = this;

		// spec mandated checks
		if (ToString.call(arr) != "[object Array]") {
			return Constructor.reject(TypeError("Not an array"));
		}

		return new Constructor(function executor(resolve, reject) {
			if (typeof resolve != "function" || typeof reject != "function") {
				throw TypeError("Not a function");
			}

			iteratePromises(Constructor, arr, function resolver(idx, msg) {
				resolve(msg);
			}, reject);
		});
	});

	return Promise;
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)

},{"timers":245}],214:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var format = require('format-util');
var slice = Array.prototype.slice;
var protectedProperties = ['name', 'message', 'stack'];
var errorPrototypeProperties = ['name', 'message', 'description', 'number', 'code', 'fileName', 'lineNumber', 'columnNumber', 'sourceURL', 'line', 'column', 'stack'];

module.exports = create(Error);
module.exports.error = create(Error);
module.exports.eval = create(EvalError);
module.exports.range = create(RangeError);
module.exports.reference = create(ReferenceError);
module.exports.syntax = create(SyntaxError);
module.exports.type = create(TypeError);
module.exports.uri = create(URIError);
module.exports.formatter = format;

/**
 * Creates a new {@link ono} function that creates the given Error class.
 *
 * @param {Class} Klass - The Error subclass to create
 * @returns {ono}
 */
function create(Klass) {
  /**
   * @param {Error}   [err]     - The original error, if any
   * @param {object}  [props]   - An object whose properties will be added to the error object
   * @param {string}  [message] - The error message. May contain {@link util#format} placeholders
   * @param {...*}    [params]  - Parameters that map to the `message` placeholders
   * @returns {Error}
   */
  return function onoFactory(err, props, message, params) {
    // eslint-disable-line no-unused-vars
    var formatArgs = [];
    var formattedMessage = '';

    // Determine which arguments were actually specified
    if (typeof err === 'string') {
      formatArgs = slice.call(arguments);
      err = props = undefined;
    } else if (typeof props === 'string') {
      formatArgs = slice.call(arguments, 1);
      props = undefined;
    } else if (typeof message === 'string') {
      formatArgs = slice.call(arguments, 2);
    }

    // If there are any format arguments, then format the error message
    if (formatArgs.length > 0) {
      formattedMessage = module.exports.formatter.apply(null, formatArgs);
    }

    if (err && err.message) {
      // The inner-error's message will be added to the new message
      formattedMessage += (formattedMessage ? ' \n' : '') + err.message;
    }

    // Create the new error
    // NOTE: DON'T move this to a separate function! We don't want to pollute the stack trace
    var newError = new Klass(formattedMessage);

    // Extend the new error with the additional properties
    extendError(newError, err); // Copy properties of the original error
    extendToJSON(newError); // Replace the original toJSON method
    extend(newError, props); // Copy custom properties, possibly including a custom toJSON method

    return newError;
  };
}

/**
 * Extends the targetError with the properties of the source error.
 *
 * @param {Error}   targetError - The error object to extend
 * @param {?Error}  sourceError - The source error object, if any
 */
function extendError(targetError, sourceError) {
  extendStack(targetError, sourceError);
  extend(targetError, sourceError);
}

/**
 * JavaScript engines differ in how errors are serialized to JSON - especially when it comes
 * to custom error properties and stack traces.  So we add our own toJSON method that ALWAYS
 * outputs every property of the error.
 */
function extendToJSON(error) {
  error.toJSON = errorToJSON;

  // Also add an inspect() method, for compatibility with Node.js' `util.inspect()` method
  error.inspect = errorToString;
}

/**
 * Extends the target object with the properties of the source object.
 *
 * @param {object}  target - The object to extend
 * @param {?source} source - The object whose properties are copied
 */
function extend(target, source) {
  if (source && (typeof source === 'undefined' ? 'undefined' : _typeof(source)) === 'object') {
    var keys = Object.keys(source);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      // Don't copy "protected" properties, since they have special meaning/behavior
      // and are set by the onoFactory function
      if (protectedProperties.indexOf(key) >= 0) {
        continue;
      }

      try {
        target[key] = source[key];
      } catch (e) {
        // This property is read-only, so it can't be copied
      }
    }
  }
}

/**
 * Custom JSON serializer for Error objects.
 * Returns all built-in error properties, as well as extended properties.
 *
 * @returns {object}
 */
function errorToJSON() {
  var json = {};

  // Get all the properties of this error
  var keys = Object.keys(this);

  // Also include properties from the Error prototype
  keys = keys.concat(errorPrototypeProperties);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var value = this[key];
    var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
    if (type !== 'undefined' && type !== 'function') {
      json[key] = value;
    }
  }

  return json;
}

/**
 * Serializes Error objects as human-readable JSON strings for debugging/logging purposes.
 *
 * @returns {string}
 */
function errorToString() {
  return JSON.stringify(this, null, 2).replace(/\\n/g, '\n');
}

/**
 * Extend the error stack to include its cause
 *
 * @param {Error} targetError
 * @param {Error} sourceError
 */
function extendStack(targetError, sourceError) {
  if (hasLazyStack(targetError)) {
    if (sourceError) {
      lazyJoinStacks(targetError, sourceError);
    } else {
      lazyPopStack(targetError);
    }
  } else {
    if (sourceError) {
      targetError.stack = joinStacks(targetError.stack, sourceError.stack);
    } else {
      targetError.stack = popStack(targetError.stack);
    }
  }
}

/**
 * Appends the original {@link Error#stack} property to the new Error's stack.
 *
 * @param {string} newStack
 * @param {string} originalStack
 * @returns {string}
 */
function joinStacks(newStack, originalStack) {
  newStack = popStack(newStack);

  if (newStack && originalStack) {
    return newStack + '\n\n' + originalStack;
  } else {
    return newStack || originalStack;
  }
}

/**
 * Removes Ono from the stack, so that the stack starts at the original error location
 *
 * @param {string} stack
 * @returns {string}
 */
function popStack(stack) {
  if (stack) {
    var lines = stack.split('\n');

    if (lines.length < 2) {
      // The stack only has one line, so there's nothing we can remove
      return stack;
    }

    // Find the `onoFactory` call in the stack, and remove it
    for (var i = 0; i < lines.length; i++) {
      var line = lines[i];
      if (line.indexOf('onoFactory') >= 0) {
        lines.splice(i, 1);
        return lines.join('\n');
      }
    }

    // If we get here, then the stack doesn't contain a call to `onoFactory`.
    // This may be due to minification or some optimization of the JS engine.
    // So just return the stack as-is.
    return stack;
  }
}

/**
 * Does a one-time determination of whether this JavaScript engine
 * supports lazy `Error.stack` properties.
 */
var supportsLazyStack = function () {
  return !!(
  // ES5 property descriptors must be supported
  Object.getOwnPropertyDescriptor && Object.defineProperty && (

  // Chrome on Android doesn't support lazy stacks :(
  typeof navigator === 'undefined' || !/Android/.test(navigator.userAgent)));
}();

/**
 * Does this error have a lazy stack property?
 *
 * @param {Error} err
 * @returns {boolean}
 */
function hasLazyStack(err) {
  if (!supportsLazyStack) {
    return false;
  }

  var descriptor = Object.getOwnPropertyDescriptor(err, 'stack');
  if (!descriptor) {
    return false;
  }
  return typeof descriptor.get === 'function';
}

/**
 * Calls {@link joinStacks} lazily, when the {@link Error#stack} property is accessed.
 *
 * @param {Error} targetError
 * @param {Error} sourceError
 */
function lazyJoinStacks(targetError, sourceError) {
  var targetStack = Object.getOwnPropertyDescriptor(targetError, 'stack');

  Object.defineProperty(targetError, 'stack', {
    get: function get() {
      return joinStacks(targetStack.get.apply(targetError), sourceError.stack);
    },
    enumerable: false,
    configurable: true
  });
}

/**
 * Calls {@link popStack} lazily, when the {@link Error#stack} property is accessed.
 *
 * @param {Error} error
 */
function lazyPopStack(error) {
  var targetStack = Object.getOwnPropertyDescriptor(error, 'stack');

  Object.defineProperty(error, 'stack', {
    get: function get() {
      return popStack(targetStack.get.apply(error));
    },
    enumerable: false,
    configurable: true
  });
}

},{"format-util":154}],215:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var isarray = require('isarray');

/**
 * Expose `pathToRegexp`.
 */
module.exports = pathToRegexp;
module.exports.parse = parse;
module.exports.compile = compile;
module.exports.tokensToFunction = tokensToFunction;
module.exports.tokensToRegExp = tokensToRegExp;

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
// Match escaped characters that would otherwise appear in future matches.
// This allows the user to escape special characters that won't transform.
'(\\\\.)',
// Match Express-style parameters and un-named parameters with a prefix
// and optional suffixes. Matches appear as:
//
// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
'([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse(str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length;

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1];
      continue;
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7];

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
    });
  }

  // Match any characters still remaining.
  if (index < str.length) {
    path += str.substr(index);
  }

  // If the path exists, push it onto the end.
  if (path) {
    tokens.push(path);
  }

  return tokens;
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile(str, options) {
  return tokensToFunction(parse(str, options));
}

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */
function encodeURIComponentPretty(str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */
function encodeAsterisk(str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction(tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length);

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (_typeof(tokens[i]) === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;

        continue;
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix;
          }

          continue;
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined');
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
        }

        if (value.length === 0) {
          if (token.optional) {
            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty');
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue;
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
      }

      path += token.prefix + segment;
    }

    return path;
  };
}

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup(group) {
  return group.replace(/([=!:$\/()])/g, '\\$1');
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */
function attachKeys(re, keys) {
  re.keys = keys;
  return re;
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags(options) {
  return options.sensitive ? '' : 'i';
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */
function regexpToRegexp(path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys);
}

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function arrayToRegexp(path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

  return attachKeys(regexp, keys);
}

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function stringToRegexp(path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options);
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */
function tokensToRegExp(tokens, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */keys || options;
    keys = [];
  }

  options = options || {};

  var strict = options.strict;
  var end = options.end !== false;
  var route = '';

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';

      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys);
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp(path, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */keys || options;
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path, /** @type {!Array} */keys);
  }

  if (isarray(path)) {
    return arrayToRegexp( /** @type {!Array} */path, /** @type {!Array} */keys, options);
  }

  return stringToRegexp( /** @type {string} */path, /** @type {!Array} */keys, options);
}

},{"isarray":216}],216:[function(require,module,exports){
'use strict';

module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],217:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
    case 0:
    case 1:
      return process.nextTick(fn);
    case 2:
      return process.nextTick(function afterTickOne() {
        fn.call(null, arg1);
      });
    case 3:
      return process.nextTick(function afterTickTwo() {
        fn.call(null, arg1, arg2);
      });
    case 4:
      return process.nextTick(function afterTickThree() {
        fn.call(null, arg1, arg2, arg3);
      });
    default:
      args = new Array(len - 1);
      i = 0;
      while (i < args.length) {
        args[i++] = arguments[i];
      }
      return process.nextTick(function afterTick() {
        fn.apply(null, args);
      });
  }
}

}).call(this,require('_process'))

},{"_process":218}],218:[function(require,module,exports){
'use strict';

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

},{}],219:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function (qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr,
        vstr,
        k,
        v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],220:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var stringifyPrimitive = function stringifyPrimitive(v) {
  switch (typeof v === 'undefined' ? 'undefined' : _typeof(v)) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function (obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
    return map(objectKeys(obj), function (k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function (v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);
  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map(xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],221:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":219,"./encode":220}],222:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ret = require('ret');
var DRange = require('drange');
var types = ret.types;

module.exports = function () {
  /**
   * @constructor
   * @param {RegExp|String} regexp
   * @param {String} m
   */
  function RandExp(regexp, m) {
    _classCallCheck(this, RandExp);

    this._setDefaults(regexp);
    if (regexp instanceof RegExp) {
      this.ignoreCase = regexp.ignoreCase;
      this.multiline = regexp.multiline;
      regexp = regexp.source;
    } else if (typeof regexp === 'string') {
      this.ignoreCase = m && m.indexOf('i') !== -1;
      this.multiline = m && m.indexOf('m') !== -1;
    } else {
      throw new Error('Expected a regexp or string');
    }

    this.tokens = ret(regexp);
  }

  /**
   * Checks if some custom properties have been set for this regexp.
   *
   * @param {RandExp} randexp
   * @param {RegExp} regexp
   */


  _createClass(RandExp, [{
    key: '_setDefaults',
    value: function _setDefaults(regexp) {
      // When a repetitional token has its max set to Infinite,
      // randexp won't actually generate a random amount between min and Infinite
      // instead it will see Infinite as min + 100.
      this.max = regexp.max != null ? regexp.max : RandExp.prototype.max != null ? RandExp.prototype.max : 100;

      // This allows expanding to include additional characters
      // for instance: RandExp.defaultRange.add(0, 65535);
      this.defaultRange = regexp.defaultRange ? regexp.defaultRange : this.defaultRange.clone();

      if (regexp.randInt) {
        this.randInt = regexp.randInt;
      }
    }

    /**
     * Generates the random string.
     *
     * @return {String}
     */

  }, {
    key: 'gen',
    value: function gen() {
      return this._gen(this.tokens, []);
    }

    /**
     * Generate random string modeled after given tokens.
     *
     * @param {Object} token
     * @param {Array.<String>} groups
     * @return {String}
     */

  }, {
    key: '_gen',
    value: function _gen(token, groups) {
      var stack, str, n, i, l;

      switch (token.type) {
        case types.ROOT:
        case types.GROUP:
          // Ignore lookaheads for now.
          if (token.followedBy || token.notFollowedBy) {
            return '';
          }

          // Insert placeholder until group string is generated.
          if (token.remember && token.groupNumber === undefined) {
            token.groupNumber = groups.push(null) - 1;
          }

          stack = token.options ? this._randSelect(token.options) : token.stack;

          str = '';
          for (i = 0, l = stack.length; i < l; i++) {
            str += this._gen(stack[i], groups);
          }

          if (token.remember) {
            groups[token.groupNumber] = str;
          }
          return str;

        case types.POSITION:
          // Do nothing for now.
          return '';

        case types.SET:
          var expandedSet = this._expand(token);
          if (!expandedSet.length) {
            return '';
          }
          return String.fromCharCode(this._randSelect(expandedSet));

        case types.REPETITION:
          // Randomly generate number between min and max.
          n = this.randInt(token.min, token.max === Infinity ? token.min + this.max : token.max);

          str = '';
          for (i = 0; i < n; i++) {
            str += this._gen(token.value, groups);
          }

          return str;

        case types.REFERENCE:
          return groups[token.value - 1] || '';

        case types.CHAR:
          var code = this.ignoreCase && this._randBool() ? this._toOtherCase(token.value) : token.value;
          return String.fromCharCode(code);
      }
    }

    /**
     * If code is alphabetic, converts to other case.
     * If not alphabetic, returns back code.
     *
     * @param {Number} code
     * @return {Number}
     */

  }, {
    key: '_toOtherCase',
    value: function _toOtherCase(code) {
      return code + (97 <= code && code <= 122 ? -32 : 65 <= code && code <= 90 ? 32 : 0);
    }

    /**
     * Randomly returns a true or false value.
     *
     * @return {Boolean}
     */

  }, {
    key: '_randBool',
    value: function _randBool() {
      return !this.randInt(0, 1);
    }

    /**
     * Randomly selects and returns a value from the array.
     *
     * @param {Array.<Object>} arr
     * @return {Object}
     */

  }, {
    key: '_randSelect',
    value: function _randSelect(arr) {
      if (arr instanceof DRange) {
        return arr.index(this.randInt(0, arr.length - 1));
      }
      return arr[this.randInt(0, arr.length - 1)];
    }

    /**
     * expands a token to a DiscontinuousRange of characters which has a
     * length and an index function (for random selecting)
     *
     * @param {Object} token
     * @return {DiscontinuousRange}
     */

  }, {
    key: '_expand',
    value: function _expand(token) {
      if (token.type === ret.types.CHAR) {
        return new DRange(token.value);
      } else if (token.type === ret.types.RANGE) {
        return new DRange(token.from, token.to);
      } else {
        var drange = new DRange();
        for (var i = 0; i < token.set.length; i++) {
          var subrange = this._expand(token.set[i]);
          drange.add(subrange);
          if (this.ignoreCase) {
            for (var j = 0; j < subrange.length; j++) {
              var code = subrange.index(j);
              var otherCaseCode = this._toOtherCase(code);
              if (code !== otherCaseCode) {
                drange.add(otherCaseCode);
              }
            }
          }
        }
        if (token.not) {
          return this.defaultRange.clone().subtract(drange);
        } else {
          return this.defaultRange.clone().intersect(drange);
        }
      }
    }

    /**
     * Randomly generates and returns a number between a and b (inclusive).
     *
     * @param {Number} a
     * @param {Number} b
     * @return {Number}
     */

  }, {
    key: 'randInt',
    value: function randInt(a, b) {
      return a + Math.floor(Math.random() * (1 + b - a));
    }

    /**
     * Default range of characters to generate from.
     */

  }, {
    key: 'defaultRange',
    get: function get() {
      return this._range = this._range || new DRange(32, 126);
    },
    set: function set(range) {
      this._range = range;
    }

    /**
     *
     * Enables use of randexp with a shorter call.
     *
     * @param {RegExp|String| regexp}
     * @param {String} m
     * @return {String}
     */

  }], [{
    key: 'randexp',
    value: function randexp(regexp, m) {
      var randexp;
      if (typeof regexp === 'string') {
        regexp = new RegExp(regexp, m);
      }

      if (regexp._randexp === undefined) {
        randexp = new RandExp(regexp, m);
        regexp._randexp = randexp;
      } else {
        randexp = regexp._randexp;
        randexp._setDefaults(regexp);
      }
      return randexp.gen();
    }

    /**
     * Enables sugary /regexp/.gen syntax.
     */

  }, {
    key: 'sugar',
    value: function sugar() {
      /* eshint freeze:false */
      RegExp.prototype.gen = function () {
        return RandExp.randexp(this);
      };
    }
  }]);

  return RandExp;
}();

},{"drange":28,"ret":232}],223:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};

},{"./_stream_readable":225,"./_stream_writable":227,"core-util-is":18,"inherits":157,"process-nextick-args":217}],224:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":226,"core-util-is":18,"inherits":157}],225:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./_stream_duplex":223,"./internal/streams/BufferList":228,"./internal/streams/destroy":229,"./internal/streams/stream":230,"_process":218,"core-util-is":18,"events":30,"inherits":157,"isarray":159,"process-nextick-args":217,"safe-buffer":237,"string_decoder/":242,"util":13}],226:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":223,"core-util-is":18,"inherits":157}],227:[function(require,module,exports){
(function (process,global,setImmediate){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)

},{"./_stream_duplex":223,"./internal/streams/destroy":229,"./internal/streams/stream":230,"_process":218,"core-util-is":18,"inherits":157,"process-nextick-args":217,"safe-buffer":237,"timers":245,"util-deprecate":250}],228:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var Buffer = require('safe-buffer').Buffer;
var util = require('util');

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}

},{"safe-buffer":237,"util":13}],229:[function(require,module,exports){
'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

},{"process-nextick-args":217}],230:[function(require,module,exports){
'use strict';

module.exports = require('events').EventEmitter;

},{"events":30}],231:[function(require,module,exports){
'use strict';

exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":223,"./lib/_stream_passthrough.js":224,"./lib/_stream_readable.js":225,"./lib/_stream_transform.js":226,"./lib/_stream_writable.js":227}],232:[function(require,module,exports){
'use strict';

var util = require('./util');
var types = require('./types');
var sets = require('./sets');
var positions = require('./positions');

module.exports = function (regexpStr) {
  var i = 0,
      l,
      c,
      start = { type: types.ROOT, stack: [] },


  // Keep track of last clause/group and stack.
  lastGroup = start,
      last = start.stack,
      groupStack = [];

  var repeatErr = function repeatErr(i) {
    util.error(regexpStr, 'Nothing to repeat at column ' + (i - 1));
  };

  // Decode a few escaped characters.
  var str = util.strToChars(regexpStr);
  l = str.length;

  // Iterate through each character in string.
  while (i < l) {
    c = str[i++];

    switch (c) {
      // Handle escaped characters, inclues a few sets.
      case '\\':
        c = str[i++];

        switch (c) {
          case 'b':
            last.push(positions.wordBoundary());
            break;

          case 'B':
            last.push(positions.nonWordBoundary());
            break;

          case 'w':
            last.push(sets.words());
            break;

          case 'W':
            last.push(sets.notWords());
            break;

          case 'd':
            last.push(sets.ints());
            break;

          case 'D':
            last.push(sets.notInts());
            break;

          case 's':
            last.push(sets.whitespace());
            break;

          case 'S':
            last.push(sets.notWhitespace());
            break;

          default:
            // Check if c is integer.
            // In which case it's a reference.
            if (/\d/.test(c)) {
              last.push({ type: types.REFERENCE, value: parseInt(c, 10) });

              // Escaped character.
            } else {
              last.push({ type: types.CHAR, value: c.charCodeAt(0) });
            }
        }

        break;

      // Positionals.
      case '^':
        last.push(positions.begin());
        break;

      case '$':
        last.push(positions.end());
        break;

      // Handle custom sets.
      case '[':
        // Check if this class is 'anti' i.e. [^abc].
        var not;
        if (str[i] === '^') {
          not = true;
          i++;
        } else {
          not = false;
        }

        // Get all the characters in class.
        var classTokens = util.tokenizeClass(str.slice(i), regexpStr);

        // Increase index by length of class.
        i += classTokens[1];
        last.push({
          type: types.SET,
          set: classTokens[0],
          not: not
        });

        break;

      // Class of any character except \n.
      case '.':
        last.push(sets.anyChar());
        break;

      // Push group onto stack.
      case '(':
        // Create group.
        var group = {
          type: types.GROUP,
          stack: [],
          remember: true
        };

        c = str[i];

        // If if this is a special kind of group.
        if (c === '?') {
          c = str[i + 1];
          i += 2;

          // Match if followed by.
          if (c === '=') {
            group.followedBy = true;

            // Match if not followed by.
          } else if (c === '!') {
            group.notFollowedBy = true;
          } else if (c !== ':') {
            util.error(regexpStr, 'Invalid group, character \'' + c + '\'' + (' after \'?\' at column ' + (i - 1)));
          }

          group.remember = false;
        }

        // Insert subgroup into current group stack.
        last.push(group);

        // Remember the current group for when the group closes.
        groupStack.push(lastGroup);

        // Make this new group the current group.
        lastGroup = group;
        last = group.stack;
        break;

      // Pop group out of stack.
      case ')':
        if (groupStack.length === 0) {
          util.error(regexpStr, 'Unmatched ) at column ' + (i - 1));
        }
        lastGroup = groupStack.pop();

        // Check if this group has a PIPE.
        // To get back the correct last stack.
        last = lastGroup.options ? lastGroup.options[lastGroup.options.length - 1] : lastGroup.stack;
        break;

      // Use pipe character to give more choices.
      case '|':
        // Create array where options are if this is the first PIPE
        // in this clause.
        if (!lastGroup.options) {
          lastGroup.options = [lastGroup.stack];
          delete lastGroup.stack;
        }

        // Create a new stack and add to options for rest of clause.
        var stack = [];
        lastGroup.options.push(stack);
        last = stack;
        break;

      // Repetition.
      // For every repetition, remove last element from last stack
      // then insert back a RANGE object.
      // This design is chosen because there could be more than
      // one repetition symbols in a regex i.e. `a?+{2,3}`.
      case '{':
        var rs = /^(\d+)(,(\d+)?)?\}/.exec(str.slice(i)),
            min,
            max;
        if (rs !== null) {
          if (last.length === 0) {
            repeatErr(i);
          }
          min = parseInt(rs[1], 10);
          max = rs[2] ? rs[3] ? parseInt(rs[3], 10) : Infinity : min;
          i += rs[0].length;

          last.push({
            type: types.REPETITION,
            min: min,
            max: max,
            value: last.pop()
          });
        } else {
          last.push({
            type: types.CHAR,
            value: 123
          });
        }
        break;

      case '?':
        if (last.length === 0) {
          repeatErr(i);
        }
        last.push({
          type: types.REPETITION,
          min: 0,
          max: 1,
          value: last.pop()
        });
        break;

      case '+':
        if (last.length === 0) {
          repeatErr(i);
        }
        last.push({
          type: types.REPETITION,
          min: 1,
          max: Infinity,
          value: last.pop()
        });
        break;

      case '*':
        if (last.length === 0) {
          repeatErr(i);
        }
        last.push({
          type: types.REPETITION,
          min: 0,
          max: Infinity,
          value: last.pop()
        });
        break;

      // Default is a character that is not `\[](){}?+*^$`.
      default:
        last.push({
          type: types.CHAR,
          value: c.charCodeAt(0)
        });
    }
  }

  // Check if any groups have not been closed.
  if (groupStack.length !== 0) {
    util.error(regexpStr, 'Unterminated group');
  }

  return start;
};

module.exports.types = types;

},{"./positions":233,"./sets":234,"./types":235,"./util":236}],233:[function(require,module,exports){
'use strict';

var types = require('./types');
exports.wordBoundary = function () {
  return { type: types.POSITION, value: 'b' };
};
exports.nonWordBoundary = function () {
  return { type: types.POSITION, value: 'B' };
};
exports.begin = function () {
  return { type: types.POSITION, value: '^' };
};
exports.end = function () {
  return { type: types.POSITION, value: '$' };
};

},{"./types":235}],234:[function(require,module,exports){
'use strict';

var types = require('./types');

var INTS = function INTS() {
  return [{ type: types.RANGE, from: 48, to: 57 }];
};

var WORDS = function WORDS() {
  return [{ type: types.CHAR, value: 95 }, { type: types.RANGE, from: 97, to: 122 }, { type: types.RANGE, from: 65, to: 90 }].concat(INTS());
};

var WHITESPACE = function WHITESPACE() {
  return [{ type: types.CHAR, value: 9 }, { type: types.CHAR, value: 10 }, { type: types.CHAR, value: 11 }, { type: types.CHAR, value: 12 }, { type: types.CHAR, value: 13 }, { type: types.CHAR, value: 32 }, { type: types.CHAR, value: 160 }, { type: types.CHAR, value: 5760 }, { type: types.RANGE, from: 8192, to: 8202 }, { type: types.CHAR, value: 8232 }, { type: types.CHAR, value: 8233 }, { type: types.CHAR, value: 8239 }, { type: types.CHAR, value: 8287 }, { type: types.CHAR, value: 12288 }, { type: types.CHAR, value: 65279 }];
};

var NOTANYCHAR = function NOTANYCHAR() {
  return [{ type: types.CHAR, value: 10 }, { type: types.CHAR, value: 13 }, { type: types.CHAR, value: 8232 }, { type: types.CHAR, value: 8233 }];
};

// Predefined class objects.
exports.words = function () {
  return { type: types.SET, set: WORDS(), not: false };
};
exports.notWords = function () {
  return { type: types.SET, set: WORDS(), not: true };
};
exports.ints = function () {
  return { type: types.SET, set: INTS(), not: false };
};
exports.notInts = function () {
  return { type: types.SET, set: INTS(), not: true };
};
exports.whitespace = function () {
  return { type: types.SET, set: WHITESPACE(), not: false };
};
exports.notWhitespace = function () {
  return { type: types.SET, set: WHITESPACE(), not: true };
};
exports.anyChar = function () {
  return { type: types.SET, set: NOTANYCHAR(), not: true };
};

},{"./types":235}],235:[function(require,module,exports){
"use strict";

module.exports = {
  ROOT: 0,
  GROUP: 1,
  POSITION: 2,
  SET: 3,
  RANGE: 4,
  REPETITION: 5,
  REFERENCE: 6,
  CHAR: 7
};

},{}],236:[function(require,module,exports){
'use strict';

var types = require('./types');
var sets = require('./sets');

var CTRL = '@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^ ?';
var SLSH = { '0': 0, 't': 9, 'n': 10, 'v': 11, 'f': 12, 'r': 13 };

/**
 * Finds character representations in str and convert all to
 * their respective characters
 *
 * @param {String} str
 * @return {String}
 */
exports.strToChars = function (str) {
  /* jshint maxlen: false */
  var chars_regex = /(\[\\b\])|(\\)?\\(?:u([A-F0-9]{4})|x([A-F0-9]{2})|(0?[0-7]{2})|c([@A-Z[\\\]^?])|([0tnvfr]))/g;
  str = str.replace(chars_regex, function (s, b, lbs, a16, b16, c8, dctrl, eslsh) {
    if (lbs) {
      return s;
    }

    var code = b ? 8 : a16 ? parseInt(a16, 16) : b16 ? parseInt(b16, 16) : c8 ? parseInt(c8, 8) : dctrl ? CTRL.indexOf(dctrl) : SLSH[eslsh];

    var c = String.fromCharCode(code);

    // Escape special regex characters.
    if (/[[\]{}^$.|?*+()]/.test(c)) {
      c = '\\' + c;
    }

    return c;
  });

  return str;
};

/**
 * turns class into tokens
 * reads str until it encounters a ] not preceeded by a \
 *
 * @param {String} str
 * @param {String} regexpStr
 * @return {Array.<Array.<Object>, Number>}
 */
exports.tokenizeClass = function (str, regexpStr) {
  /* jshint maxlen: false */
  var tokens = [];
  var regexp = /\\(?:(w)|(d)|(s)|(W)|(D)|(S))|((?:(?:\\)(.)|([^\]\\]))-(?:\\)?([^\]]))|(\])|(?:\\)?([^])/g;
  var rs, c;

  while ((rs = regexp.exec(str)) != null) {
    if (rs[1]) {
      tokens.push(sets.words());
    } else if (rs[2]) {
      tokens.push(sets.ints());
    } else if (rs[3]) {
      tokens.push(sets.whitespace());
    } else if (rs[4]) {
      tokens.push(sets.notWords());
    } else if (rs[5]) {
      tokens.push(sets.notInts());
    } else if (rs[6]) {
      tokens.push(sets.notWhitespace());
    } else if (rs[7]) {
      tokens.push({
        type: types.RANGE,
        from: (rs[8] || rs[9]).charCodeAt(0),
        to: rs[10].charCodeAt(0)
      });
    } else if (c = rs[12]) {
      tokens.push({
        type: types.CHAR,
        value: c.charCodeAt(0)
      });
    } else {
      return [tokens, regexp.lastIndex];
    }
  }

  exports.error(regexpStr, 'Unterminated character class');
};

/**
 * Shortcut to throw errors.
 *
 * @param {String} regexp
 * @param {String} msg
 */
exports.error = function (regexp, msg) {
  throw new SyntaxError('Invalid regular expression: /' + regexp + '/: ' + msg);
};

},{"./sets":234,"./types":235}],237:[function(require,module,exports){
'use strict';

/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer');
var Buffer = buffer.Buffer;

// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer(arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length);
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number');
  }
  return Buffer(arg, encodingOrOffset, length);
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  var buf = Buffer(size);
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }
  return buf;
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  return Buffer(size);
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  return buffer.SlowBuffer(size);
};

},{"buffer":15}],238:[function(require,module,exports){
(function (global){
'use strict';

var ClientRequest = require('./lib/request');
var response = require('./lib/response');
var extend = require('xtend');
var statusCodes = require('builtin-status-codes');
var url = require('url');

var http = exports;

http.request = function (opts, cb) {
	if (typeof opts === 'string') opts = url.parse(opts);else opts = extend(opts);

	// Normally, the page is loaded from http or https, so not specifying a protocol
	// will result in a (valid) protocol-relative url. However, this won't work if
	// the protocol is something else, like 'file:'
	var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';

	var protocol = opts.protocol || defaultProtocol;
	var host = opts.hostname || opts.host;
	var port = opts.port;
	var path = opts.path || '/';

	// Necessary for IPv6 addresses
	if (host && host.indexOf(':') !== -1) host = '[' + host + ']';

	// This may be a relative url. The browser should always be able to interpret it correctly.
	opts.url = (host ? protocol + '//' + host : '') + (port ? ':' + port : '') + path;
	opts.method = (opts.method || 'GET').toUpperCase();
	opts.headers = opts.headers || {};

	// Also valid opts.auth, opts.mode

	var req = new ClientRequest(opts);
	if (cb) req.on('response', cb);
	return req;
};

http.get = function get(opts, cb) {
	var req = http.request(opts, cb);
	req.end();
	return req;
};

http.ClientRequest = ClientRequest;
http.IncomingMessage = response.IncomingMessage;

http.Agent = function () {};
http.Agent.defaultMaxSockets = 4;

http.globalAgent = new http.Agent();

http.STATUS_CODES = statusCodes;

http.METHODS = ['CHECKOUT', 'CONNECT', 'COPY', 'DELETE', 'GET', 'HEAD', 'LOCK', 'M-SEARCH', 'MERGE', 'MKACTIVITY', 'MKCOL', 'MOVE', 'NOTIFY', 'OPTIONS', 'PATCH', 'POST', 'PROPFIND', 'PROPPATCH', 'PURGE', 'PUT', 'REPORT', 'SEARCH', 'SUBSCRIBE', 'TRACE', 'UNLOCK', 'UNSUBSCRIBE'];

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./lib/request":240,"./lib/response":241,"builtin-status-codes":16,"url":248,"xtend":251}],239:[function(require,module,exports){
(function (global){
'use strict';

exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream);

exports.writableStream = isFunction(global.WritableStream);

exports.abortController = isFunction(global.AbortController);

exports.blobConstructor = false;
try {
	new Blob([new ArrayBuffer(1)]);
	exports.blobConstructor = true;
} catch (e) {}

// The xhr request to example.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
var xhr;
function getXHR() {
	// Cache the xhr value
	if (xhr !== undefined) return xhr;

	if (global.XMLHttpRequest) {
		xhr = new global.XMLHttpRequest();
		// If XDomainRequest is available (ie only, where xhr might not work
		// cross domain), use the page location. Otherwise use example.com
		// Note: this doesn't actually make an http request.
		try {
			xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com');
		} catch (e) {
			xhr = null;
		}
	} else {
		// Service workers don't have XHR
		xhr = null;
	}
	return xhr;
}

function checkTypeSupport(type) {
	var xhr = getXHR();
	if (!xhr) return false;
	try {
		xhr.responseType = type;
		return xhr.responseType === type;
	} catch (e) {}
	return false;
}

// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
// Safari 7.1 appears to have fixed this bug.
var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined';
var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice);

// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
exports.arraybuffer = exports.fetch || haveArrayBuffer && checkTypeSupport('arraybuffer');

// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream');
exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer && checkTypeSupport('moz-chunked-arraybuffer');

// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false);

exports.vbArray = isFunction(global.VBArray);

function isFunction(value) {
	return typeof value === 'function';
}

xhr = null; // Help gc

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],240:[function(require,module,exports){
(function (process,global,Buffer){
'use strict';

var capability = require('./capability');
var inherits = require('inherits');
var response = require('./response');
var stream = require('readable-stream');
var toArrayBuffer = require('to-arraybuffer');

var IncomingMessage = response.IncomingMessage;
var rStates = response.readyStates;

function decideMode(preferBinary, useFetch) {
	if (capability.fetch && useFetch) {
		return 'fetch';
	} else if (capability.mozchunkedarraybuffer) {
		return 'moz-chunked-arraybuffer';
	} else if (capability.msstream) {
		return 'ms-stream';
	} else if (capability.arraybuffer && preferBinary) {
		return 'arraybuffer';
	} else if (capability.vbArray && preferBinary) {
		return 'text:vbarray';
	} else {
		return 'text';
	}
}

var ClientRequest = module.exports = function (opts) {
	var self = this;
	stream.Writable.call(self);

	self._opts = opts;
	self._body = [];
	self._headers = {};
	if (opts.auth) self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'));
	Object.keys(opts.headers).forEach(function (name) {
		self.setHeader(name, opts.headers[name]);
	});

	var preferBinary;
	var useFetch = true;
	if (opts.mode === 'disable-fetch' || 'requestTimeout' in opts && !capability.abortController) {
		// If the use of XHR should be preferred. Not typically needed.
		useFetch = false;
		preferBinary = true;
	} else if (opts.mode === 'prefer-streaming') {
		// If streaming is a high priority but binary compatibility and
		// the accuracy of the 'content-type' header aren't
		preferBinary = false;
	} else if (opts.mode === 'allow-wrong-content-type') {
		// If streaming is more important than preserving the 'content-type' header
		preferBinary = !capability.overrideMimeType;
	} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
		// Use binary if text streaming may corrupt data or the content-type header, or for speed
		preferBinary = true;
	} else {
		throw new Error('Invalid value for opts.mode');
	}
	self._mode = decideMode(preferBinary, useFetch);
	self._fetchTimer = null;

	self.on('finish', function () {
		self._onFinish();
	});
};

inherits(ClientRequest, stream.Writable);

ClientRequest.prototype.setHeader = function (name, value) {
	var self = this;
	var lowerName = name.toLowerCase();
	// This check is not necessary, but it prevents warnings from browsers about setting unsafe
	// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
	// http-browserify did it, so I will too.
	if (unsafeHeaders.indexOf(lowerName) !== -1) return;

	self._headers[lowerName] = {
		name: name,
		value: value
	};
};

ClientRequest.prototype.getHeader = function (name) {
	var header = this._headers[name.toLowerCase()];
	if (header) return header.value;
	return null;
};

ClientRequest.prototype.removeHeader = function (name) {
	var self = this;
	delete self._headers[name.toLowerCase()];
};

ClientRequest.prototype._onFinish = function () {
	var self = this;

	if (self._destroyed) return;
	var opts = self._opts;

	var headersObj = self._headers;
	var body = null;
	if (opts.method !== 'GET' && opts.method !== 'HEAD') {
		if (capability.arraybuffer) {
			body = toArrayBuffer(Buffer.concat(self._body));
		} else if (capability.blobConstructor) {
			body = new global.Blob(self._body.map(function (buffer) {
				return toArrayBuffer(buffer);
			}), {
				type: (headersObj['content-type'] || {}).value || ''
			});
		} else {
			// get utf8 string
			body = Buffer.concat(self._body).toString();
		}
	}

	// create flattened list of headers
	var headersList = [];
	Object.keys(headersObj).forEach(function (keyName) {
		var name = headersObj[keyName].name;
		var value = headersObj[keyName].value;
		if (Array.isArray(value)) {
			value.forEach(function (v) {
				headersList.push([name, v]);
			});
		} else {
			headersList.push([name, value]);
		}
	});

	if (self._mode === 'fetch') {
		var signal = null;
		var fetchTimer = null;
		if (capability.abortController) {
			var controller = new AbortController();
			signal = controller.signal;
			self._fetchAbortController = controller;

			if ('requestTimeout' in opts && opts.requestTimeout !== 0) {
				self._fetchTimer = global.setTimeout(function () {
					self.emit('requestTimeout');
					if (self._fetchAbortController) self._fetchAbortController.abort();
				}, opts.requestTimeout);
			}
		}

		global.fetch(self._opts.url, {
			method: self._opts.method,
			headers: headersList,
			body: body || undefined,
			mode: 'cors',
			credentials: opts.withCredentials ? 'include' : 'same-origin',
			signal: signal
		}).then(function (response) {
			self._fetchResponse = response;
			self._connect();
		}, function (reason) {
			global.clearTimeout(self._fetchTimer);
			if (!self._destroyed) self.emit('error', reason);
		});
	} else {
		var xhr = self._xhr = new global.XMLHttpRequest();
		try {
			xhr.open(self._opts.method, self._opts.url, true);
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err);
			});
			return;
		}

		// Can't set responseType on really old browsers
		if ('responseType' in xhr) xhr.responseType = self._mode.split(':')[0];

		if ('withCredentials' in xhr) xhr.withCredentials = !!opts.withCredentials;

		if (self._mode === 'text' && 'overrideMimeType' in xhr) xhr.overrideMimeType('text/plain; charset=x-user-defined');

		if ('requestTimeout' in opts) {
			xhr.timeout = opts.requestTimeout;
			xhr.ontimeout = function () {
				self.emit('requestTimeout');
			};
		}

		headersList.forEach(function (header) {
			xhr.setRequestHeader(header[0], header[1]);
		});

		self._response = null;
		xhr.onreadystatechange = function () {
			switch (xhr.readyState) {
				case rStates.LOADING:
				case rStates.DONE:
					self._onXHRProgress();
					break;
			}
		};
		// Necessary for streaming in Firefox, since xhr.response is ONLY defined
		// in onprogress, not in onreadystatechange with xhr.readyState = 3
		if (self._mode === 'moz-chunked-arraybuffer') {
			xhr.onprogress = function () {
				self._onXHRProgress();
			};
		}

		xhr.onerror = function () {
			if (self._destroyed) return;
			self.emit('error', new Error('XHR error'));
		};

		try {
			xhr.send(body);
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err);
			});
			return;
		}
	}
};

/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */
function statusValid(xhr) {
	try {
		var status = xhr.status;
		return status !== null && status !== 0;
	} catch (e) {
		return false;
	}
}

ClientRequest.prototype._onXHRProgress = function () {
	var self = this;

	if (!statusValid(self._xhr) || self._destroyed) return;

	if (!self._response) self._connect();

	self._response._onXHRProgress();
};

ClientRequest.prototype._connect = function () {
	var self = this;

	if (self._destroyed) return;

	self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._fetchTimer);
	self._response.on('error', function (err) {
		self.emit('error', err);
	});

	self.emit('response', self._response);
};

ClientRequest.prototype._write = function (chunk, encoding, cb) {
	var self = this;

	self._body.push(chunk);
	cb();
};

ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
	var self = this;
	self._destroyed = true;
	global.clearTimeout(self._fetchTimer);
	if (self._response) self._response._destroyed = true;
	if (self._xhr) self._xhr.abort();else if (self._fetchAbortController) self._fetchAbortController.abort();
};

ClientRequest.prototype.end = function (data, encoding, cb) {
	var self = this;
	if (typeof data === 'function') {
		cb = data;
		data = undefined;
	}

	stream.Writable.prototype.end.call(self, data, encoding, cb);
};

ClientRequest.prototype.flushHeaders = function () {};
ClientRequest.prototype.setTimeout = function () {};
ClientRequest.prototype.setNoDelay = function () {};
ClientRequest.prototype.setSocketKeepAlive = function () {};

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var unsafeHeaders = ['accept-charset', 'accept-encoding', 'access-control-request-headers', 'access-control-request-method', 'connection', 'content-length', 'cookie', 'cookie2', 'date', 'dnt', 'expect', 'host', 'keep-alive', 'origin', 'referer', 'te', 'trailer', 'transfer-encoding', 'upgrade', 'via'];

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)

},{"./capability":239,"./response":241,"_process":218,"buffer":15,"inherits":157,"readable-stream":231,"to-arraybuffer":246}],241:[function(require,module,exports){
(function (process,global,Buffer){
'use strict';

var capability = require('./capability');
var inherits = require('inherits');
var stream = require('readable-stream');

var rStates = exports.readyStates = {
	UNSENT: 0,
	OPENED: 1,
	HEADERS_RECEIVED: 2,
	LOADING: 3,
	DONE: 4
};

var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode, fetchTimer) {
	var self = this;
	stream.Readable.call(self);

	self._mode = mode;
	self.headers = {};
	self.rawHeaders = [];
	self.trailers = {};
	self.rawTrailers = [];

	// Fake the 'close' event, but only once 'end' fires
	self.on('end', function () {
		// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
		process.nextTick(function () {
			self.emit('close');
		});
	});

	if (mode === 'fetch') {
		var read = function read() {
			reader.read().then(function (result) {
				if (self._destroyed) return;
				if (result.done) {
					global.clearTimeout(fetchTimer);
					self.push(null);
					return;
				}
				self.push(new Buffer(result.value));
				read();
			}).catch(function (err) {
				global.clearTimeout(fetchTimer);
				if (!self._destroyed) self.emit('error', err);
			});
		};

		self._fetchResponse = response;

		self.url = response.url;
		self.statusCode = response.status;
		self.statusMessage = response.statusText;

		response.headers.forEach(function (header, key) {
			self.headers[key.toLowerCase()] = header;
			self.rawHeaders.push(key, header);
		});

		if (capability.writableStream) {
			var writable = new WritableStream({
				write: function write(chunk) {
					return new Promise(function (resolve, reject) {
						if (self._destroyed) {
							reject();
						} else if (self.push(new Buffer(chunk))) {
							resolve();
						} else {
							self._resumeFetch = resolve;
						}
					});
				},
				close: function close() {
					global.clearTimeout(fetchTimer);
					if (!self._destroyed) self.push(null);
				},
				abort: function abort(err) {
					if (!self._destroyed) self.emit('error', err);
				}
			});

			try {
				response.body.pipeTo(writable).catch(function (err) {
					global.clearTimeout(fetchTimer);
					if (!self._destroyed) self.emit('error', err);
				});
				return;
			} catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
		}
		// fallback for when writableStream or pipeTo aren't available
		var reader = response.body.getReader();

		read();
	} else {
		self._xhr = xhr;
		self._pos = 0;

		self.url = xhr.responseURL;
		self.statusCode = xhr.status;
		self.statusMessage = xhr.statusText;
		var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
		headers.forEach(function (header) {
			var matches = header.match(/^([^:]+):\s*(.*)/);
			if (matches) {
				var key = matches[1].toLowerCase();
				if (key === 'set-cookie') {
					if (self.headers[key] === undefined) {
						self.headers[key] = [];
					}
					self.headers[key].push(matches[2]);
				} else if (self.headers[key] !== undefined) {
					self.headers[key] += ', ' + matches[2];
				} else {
					self.headers[key] = matches[2];
				}
				self.rawHeaders.push(matches[1], matches[2]);
			}
		});

		self._charset = 'x-user-defined';
		if (!capability.overrideMimeType) {
			var mimeType = self.rawHeaders['mime-type'];
			if (mimeType) {
				var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
				if (charsetMatch) {
					self._charset = charsetMatch[1].toLowerCase();
				}
			}
			if (!self._charset) self._charset = 'utf-8'; // best guess
		}
	}
};

inherits(IncomingMessage, stream.Readable);

IncomingMessage.prototype._read = function () {
	var self = this;

	var resolve = self._resumeFetch;
	if (resolve) {
		self._resumeFetch = null;
		resolve();
	}
};

IncomingMessage.prototype._onXHRProgress = function () {
	var self = this;

	var xhr = self._xhr;

	var response = null;
	switch (self._mode) {
		case 'text:vbarray':
			// For IE9
			if (xhr.readyState !== rStates.DONE) break;
			try {
				// This fails in IE8
				response = new global.VBArray(xhr.responseBody).toArray();
			} catch (e) {}
			if (response !== null) {
				self.push(new Buffer(response));
				break;
			}
		// Falls through in IE8	
		case 'text':
			try {
				// This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
				response = xhr.responseText;
			} catch (e) {
				self._mode = 'text:vbarray';
				break;
			}
			if (response.length > self._pos) {
				var newData = response.substr(self._pos);
				if (self._charset === 'x-user-defined') {
					var buffer = new Buffer(newData.length);
					for (var i = 0; i < newData.length; i++) {
						buffer[i] = newData.charCodeAt(i) & 0xff;
					}self.push(buffer);
				} else {
					self.push(newData, self._charset);
				}
				self._pos = response.length;
			}
			break;
		case 'arraybuffer':
			if (xhr.readyState !== rStates.DONE || !xhr.response) break;
			response = xhr.response;
			self.push(new Buffer(new Uint8Array(response)));
			break;
		case 'moz-chunked-arraybuffer':
			// take whole
			response = xhr.response;
			if (xhr.readyState !== rStates.LOADING || !response) break;
			self.push(new Buffer(new Uint8Array(response)));
			break;
		case 'ms-stream':
			response = xhr.response;
			if (xhr.readyState !== rStates.LOADING) break;
			var reader = new global.MSStreamReader();
			reader.onprogress = function () {
				if (reader.result.byteLength > self._pos) {
					self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));
					self._pos = reader.result.byteLength;
				}
			};
			reader.onload = function () {
				self.push(null);
			};
			// reader.onerror = ??? // TODO: this
			reader.readAsArrayBuffer(response);
			break;
	}

	// The ms-stream case handles end separately in reader.onload()
	if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
		self.push(null);
	}
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)

},{"./capability":239,"_process":218,"buffer":15,"inherits":157,"readable-stream":231}],242:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\uFFFD';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\uFFFD';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\uFFFD';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\uFFFD';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

},{"safe-buffer":237}],243:[function(require,module,exports){
'use strict';

module.exports = ['get', 'put', 'post', 'delete', 'options', 'head', 'patch'];

},{}],244:[function(require,module,exports){
module.exports={
  "title": "A JSON Schema for Swagger 2.0 API.",
  "id": "http://swagger.io/v2/schema.json#",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "required": [
    "swagger",
    "info",
    "paths"
  ],
  "additionalProperties": false,
  "patternProperties": {
    "^x-": {
      "$ref": "#/definitions/vendorExtension"
    }
  },
  "properties": {
    "swagger": {
      "type": "string",
      "enum": [
        "2.0"
      ],
      "description": "The Swagger version of this document."
    },
    "info": {
      "$ref": "#/definitions/info"
    },
    "host": {
      "type": "string",
      "pattern": "^[^{}/ :\\\\]+(?::\\d+)?$",
      "description": "The host (name or ip) of the API. Example: 'swagger.io'"
    },
    "basePath": {
      "type": "string",
      "pattern": "^/",
      "description": "The base path to the API. Example: '/api'."
    },
    "schemes": {
      "$ref": "#/definitions/schemesList"
    },
    "consumes": {
      "description": "A list of MIME types accepted by the API.",
      "$ref": "#/definitions/mediaTypeList"
    },
    "produces": {
      "description": "A list of MIME types the API can produce.",
      "$ref": "#/definitions/mediaTypeList"
    },
    "paths": {
      "$ref": "#/definitions/paths"
    },
    "definitions": {
      "$ref": "#/definitions/definitions"
    },
    "parameters": {
      "$ref": "#/definitions/parameterDefinitions"
    },
    "responses": {
      "$ref": "#/definitions/responseDefinitions"
    },
    "security": {
      "$ref": "#/definitions/security"
    },
    "securityDefinitions": {
      "$ref": "#/definitions/securityDefinitions"
    },
    "tags": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/tag"
      },
      "uniqueItems": true
    },
    "externalDocs": {
      "$ref": "#/definitions/externalDocs"
    }
  },
  "definitions": {
    "info": {
      "type": "object",
      "description": "General information about the API.",
      "required": [
        "version",
        "title"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "title": {
          "type": "string",
          "description": "A unique and precise title of the API."
        },
        "version": {
          "type": "string",
          "description": "A semantic version number of the API."
        },
        "description": {
          "type": "string",
          "description": "A longer description of the API. Should be different from the title.  GitHub Flavored Markdown is allowed."
        },
        "termsOfService": {
          "type": "string",
          "description": "The terms of service for the API."
        },
        "contact": {
          "$ref": "#/definitions/contact"
        },
        "license": {
          "$ref": "#/definitions/license"
        }
      }
    },
    "contact": {
      "type": "object",
      "description": "Contact information for the owners of the API.",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "The identifying name of the contact person/organization."
        },
        "url": {
          "type": "string",
          "description": "The URL pointing to the contact information.",
          "format": "uri"
        },
        "email": {
          "type": "string",
          "description": "The email address of the contact person/organization.",
          "format": "email"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "license": {
      "type": "object",
      "required": [
        "name"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the license type. It's encouraged to use an OSI compatible license."
        },
        "url": {
          "type": "string",
          "description": "The URL pointing to the license.",
          "format": "uri"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "paths": {
      "type": "object",
      "description": "Relative paths to the individual endpoints. They must be relative to the 'basePath'.",
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        },
        "^/": {
          "$ref": "#/definitions/pathItem"
        }
      },
      "additionalProperties": false
    },
    "definitions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/schema"
      },
      "description": "One or more JSON objects describing the schemas being consumed and produced by the API."
    },
    "parameterDefinitions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/parameter"
      },
      "description": "One or more JSON representations for parameters"
    },
    "responseDefinitions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/response"
      },
      "description": "One or more JSON representations for parameters"
    },
    "externalDocs": {
      "type": "object",
      "additionalProperties": false,
      "description": "information about external documentation",
      "required": [
        "url"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "format": "uri"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "examples": {
      "type": "object",
      "additionalProperties": true
    },
    "mimeType": {
      "type": "string",
      "description": "The MIME type of the HTTP message."
    },
    "operation": {
      "type": "object",
      "required": [
        "responses"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        },
        "summary": {
          "type": "string",
          "description": "A brief summary of the operation."
        },
        "description": {
          "type": "string",
          "description": "A longer description of the operation, GitHub Flavored Markdown is allowed."
        },
        "externalDocs": {
          "$ref": "#/definitions/externalDocs"
        },
        "operationId": {
          "type": "string",
          "description": "A unique identifier of the operation."
        },
        "produces": {
          "description": "A list of MIME types the API can produce.",
          "$ref": "#/definitions/mediaTypeList"
        },
        "consumes": {
          "description": "A list of MIME types the API can consume.",
          "$ref": "#/definitions/mediaTypeList"
        },
        "parameters": {
          "$ref": "#/definitions/parametersList"
        },
        "responses": {
          "$ref": "#/definitions/responses"
        },
        "schemes": {
          "$ref": "#/definitions/schemesList"
        },
        "deprecated": {
          "type": "boolean",
          "default": false
        },
        "security": {
          "$ref": "#/definitions/security"
        }
      }
    },
    "pathItem": {
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "$ref": {
          "type": "string"
        },
        "get": {
          "$ref": "#/definitions/operation"
        },
        "put": {
          "$ref": "#/definitions/operation"
        },
        "post": {
          "$ref": "#/definitions/operation"
        },
        "delete": {
          "$ref": "#/definitions/operation"
        },
        "options": {
          "$ref": "#/definitions/operation"
        },
        "head": {
          "$ref": "#/definitions/operation"
        },
        "patch": {
          "$ref": "#/definitions/operation"
        },
        "parameters": {
          "$ref": "#/definitions/parametersList"
        }
      }
    },
    "responses": {
      "type": "object",
      "description": "Response objects names can either be any valid HTTP status code or 'default'.",
      "minProperties": 1,
      "additionalProperties": false,
      "patternProperties": {
        "^([0-9]{3})$|^(default)$": {
          "$ref": "#/definitions/responseValue"
        },
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "not": {
        "type": "object",
        "additionalProperties": false,
        "patternProperties": {
          "^x-": {
            "$ref": "#/definitions/vendorExtension"
          }
        }
      }
    },
    "responseValue": {
      "oneOf": [
        {
          "$ref": "#/definitions/response"
        },
        {
          "$ref": "#/definitions/jsonReference"
        }
      ]
    },
    "response": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "schema": {
          "oneOf": [
            {
              "$ref": "#/definitions/schema"
            },
            {
              "$ref": "#/definitions/fileSchema"
            }
          ]
        },
        "headers": {
          "$ref": "#/definitions/headers"
        },
        "examples": {
          "$ref": "#/definitions/examples"
        }
      },
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "headers": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/header"
      }
    },
    "header": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "integer",
            "boolean",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormat"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "vendorExtension": {
      "description": "Any property starting with x- is valid.",
      "additionalProperties": true,
      "additionalItems": true
    },
    "bodyParameter": {
      "type": "object",
      "required": [
        "name",
        "in",
        "schema"
      ],
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "body"
          ]
        },
        "required": {
          "type": "boolean",
          "description": "Determines whether or not this parameter is required or optional.",
          "default": false
        },
        "schema": {
          "$ref": "#/definitions/schema"
        }
      },
      "additionalProperties": false
    },
    "headerParameterSubSchema": {
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "required": {
          "type": "boolean",
          "description": "Determines whether or not this parameter is required or optional.",
          "default": false
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "header"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "integer",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormat"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      }
    },
    "queryParameterSubSchema": {
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "required": {
          "type": "boolean",
          "description": "Determines whether or not this parameter is required or optional.",
          "default": false
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "query"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "allowEmptyValue": {
          "type": "boolean",
          "default": false,
          "description": "allows sending a parameter by name only or with an empty value."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "integer",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormatWithMulti"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      }
    },
    "formDataParameterSubSchema": {
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "required": {
          "type": "boolean",
          "description": "Determines whether or not this parameter is required or optional.",
          "default": false
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "formData"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "allowEmptyValue": {
          "type": "boolean",
          "default": false,
          "description": "allows sending a parameter by name only or with an empty value."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "integer",
            "array",
            "file"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormatWithMulti"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      }
    },
    "pathParameterSubSchema": {
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "required": [
        "required"
      ],
      "properties": {
        "required": {
          "type": "boolean",
          "enum": [
            true
          ],
          "description": "Determines whether or not this parameter is required or optional."
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "path"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "integer",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormat"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      }
    },
    "nonBodyParameter": {
      "type": "object",
      "required": [
        "name",
        "in",
        "type"
      ],
      "oneOf": [
        {
          "$ref": "#/definitions/headerParameterSubSchema"
        },
        {
          "$ref": "#/definitions/formDataParameterSubSchema"
        },
        {
          "$ref": "#/definitions/queryParameterSubSchema"
        },
        {
          "$ref": "#/definitions/pathParameterSubSchema"
        }
      ]
    },
    "parameter": {
      "oneOf": [
        {
          "$ref": "#/definitions/bodyParameter"
        },
        {
          "$ref": "#/definitions/nonBodyParameter"
        }
      ]
    },
    "schema": {
      "type": "object",
      "description": "A deterministic version of a JSON Schema object.",
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "$ref": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "title": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/title"
        },
        "description": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/description"
        },
        "default": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/default"
        },
        "multipleOf": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/multipleOf"
        },
        "maximum": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveInteger"
        },
        "minLength": {
          "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0"
        },
        "pattern": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/pattern"
        },
        "maxItems": {
          "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveInteger"
        },
        "minItems": {
          "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0"
        },
        "uniqueItems": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/uniqueItems"
        },
        "maxProperties": {
          "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveInteger"
        },
        "minProperties": {
          "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0"
        },
        "required": {
          "$ref": "http://json-schema.org/draft-04/schema#/definitions/stringArray"
        },
        "enum": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/enum"
        },
        "additionalProperties": {
          "anyOf": [
            {
              "$ref": "#/definitions/schema"
            },
            {
              "type": "boolean"
            }
          ],
          "default": {}
        },
        "type": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/type"
        },
        "items": {
          "anyOf": [
            {
              "$ref": "#/definitions/schema"
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "$ref": "#/definitions/schema"
              }
            }
          ],
          "default": {}
        },
        "allOf": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/schema"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/schema"
          },
          "default": {}
        },
        "discriminator": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean",
          "default": false
        },
        "xml": {
          "$ref": "#/definitions/xml"
        },
        "externalDocs": {
          "$ref": "#/definitions/externalDocs"
        },
        "example": {}
      },
      "additionalProperties": false
    },
    "fileSchema": {
      "type": "object",
      "description": "A deterministic version of a JSON Schema object.",
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "required": [
        "type"
      ],
      "properties": {
        "format": {
          "type": "string"
        },
        "title": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/title"
        },
        "description": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/description"
        },
        "default": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/default"
        },
        "required": {
          "$ref": "http://json-schema.org/draft-04/schema#/definitions/stringArray"
        },
        "type": {
          "type": "string",
          "enum": [
            "file"
          ]
        },
        "readOnly": {
          "type": "boolean",
          "default": false
        },
        "externalDocs": {
          "$ref": "#/definitions/externalDocs"
        },
        "example": {}
      },
      "additionalProperties": false
    },
    "primitivesItems": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "integer",
            "boolean",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormat"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "security": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/securityRequirement"
      },
      "uniqueItems": true
    },
    "securityRequirement": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "uniqueItems": true
      }
    },
    "xml": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "attribute": {
          "type": "boolean",
          "default": false
        },
        "wrapped": {
          "type": "boolean",
          "default": false
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "tag": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "externalDocs": {
          "$ref": "#/definitions/externalDocs"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "securityDefinitions": {
      "type": "object",
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/basicAuthenticationSecurity"
          },
          {
            "$ref": "#/definitions/apiKeySecurity"
          },
          {
            "$ref": "#/definitions/oauth2ImplicitSecurity"
          },
          {
            "$ref": "#/definitions/oauth2PasswordSecurity"
          },
          {
            "$ref": "#/definitions/oauth2ApplicationSecurity"
          },
          {
            "$ref": "#/definitions/oauth2AccessCodeSecurity"
          }
        ]
      }
    },
    "basicAuthenticationSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "basic"
          ]
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "apiKeySecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "name",
        "in"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "apiKey"
          ]
        },
        "name": {
          "type": "string"
        },
        "in": {
          "type": "string",
          "enum": [
            "header",
            "query"
          ]
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2ImplicitSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "flow",
        "authorizationUrl"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "oauth2"
          ]
        },
        "flow": {
          "type": "string",
          "enum": [
            "implicit"
          ]
        },
        "scopes": {
          "$ref": "#/definitions/oauth2Scopes"
        },
        "authorizationUrl": {
          "type": "string",
          "format": "uri"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2PasswordSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "flow",
        "tokenUrl"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "oauth2"
          ]
        },
        "flow": {
          "type": "string",
          "enum": [
            "password"
          ]
        },
        "scopes": {
          "$ref": "#/definitions/oauth2Scopes"
        },
        "tokenUrl": {
          "type": "string",
          "format": "uri"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2ApplicationSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "flow",
        "tokenUrl"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "oauth2"
          ]
        },
        "flow": {
          "type": "string",
          "enum": [
            "application"
          ]
        },
        "scopes": {
          "$ref": "#/definitions/oauth2Scopes"
        },
        "tokenUrl": {
          "type": "string",
          "format": "uri"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2AccessCodeSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "flow",
        "authorizationUrl",
        "tokenUrl"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "oauth2"
          ]
        },
        "flow": {
          "type": "string",
          "enum": [
            "accessCode"
          ]
        },
        "scopes": {
          "$ref": "#/definitions/oauth2Scopes"
        },
        "authorizationUrl": {
          "type": "string",
          "format": "uri"
        },
        "tokenUrl": {
          "type": "string",
          "format": "uri"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2Scopes": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "mediaTypeList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/mimeType"
      },
      "uniqueItems": true
    },
    "parametersList": {
      "type": "array",
      "description": "The parameters needed to send a valid API call.",
      "additionalItems": false,
      "items": {
        "oneOf": [
          {
            "$ref": "#/definitions/parameter"
          },
          {
            "$ref": "#/definitions/jsonReference"
          }
        ]
      },
      "uniqueItems": true
    },
    "schemesList": {
      "type": "array",
      "description": "The transfer protocol of the API.",
      "items": {
        "type": "string",
        "enum": [
          "http",
          "https",
          "ws",
          "wss"
        ]
      },
      "uniqueItems": true
    },
    "collectionFormat": {
      "type": "string",
      "enum": [
        "csv",
        "ssv",
        "tsv",
        "pipes"
      ],
      "default": "csv"
    },
    "collectionFormatWithMulti": {
      "type": "string",
      "enum": [
        "csv",
        "ssv",
        "tsv",
        "pipes",
        "multi"
      ],
      "default": "csv"
    },
    "title": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/title"
    },
    "description": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/description"
    },
    "default": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/default"
    },
    "multipleOf": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/multipleOf"
    },
    "maximum": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/maximum"
    },
    "exclusiveMaximum": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/exclusiveMaximum"
    },
    "minimum": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/minimum"
    },
    "exclusiveMinimum": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/exclusiveMinimum"
    },
    "maxLength": {
      "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveInteger"
    },
    "minLength": {
      "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0"
    },
    "pattern": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/pattern"
    },
    "maxItems": {
      "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveInteger"
    },
    "minItems": {
      "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0"
    },
    "uniqueItems": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/uniqueItems"
    },
    "enum": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/enum"
    },
    "jsonReference": {
      "type": "object",
      "required": [
        "$ref"
      ],
      "additionalProperties": false,
      "properties": {
        "$ref": {
          "type": "string"
        }
      }
    }
  }
}
},{}],245:[function(require,module,exports){
(function (setImmediate,clearImmediate){
"use strict";

var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout = exports.clearInterval = function (timeout) {
  timeout.close();
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function () {};
Timeout.prototype.close = function () {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout) item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function (fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function (id) {
  delete immediateIds[id];
};

}).call(this,require("timers").setImmediate,require("timers").clearImmediate)

},{"process/browser.js":218,"timers":245}],246:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;

module.exports = function (buf) {
	// If the buffer is backed by a Uint8Array, a faster version will work
	if (buf instanceof Uint8Array) {
		// If the buffer isn't a subarray, return the underlying ArrayBuffer
		if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
			return buf.buffer;
		} else if (typeof buf.buffer.slice === 'function') {
			// Otherwise we need to get a proper copy
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		}
	}

	if (Buffer.isBuffer(buf)) {
		// This is the slow version that will work with any Buffer
		// implementation (even in old browsers)
		var arrayCopy = new Uint8Array(buf.length);
		var len = buf.length;
		for (var i = 0; i < len; i++) {
			arrayCopy[i] = buf[i];
		}
		return arrayCopy.buffer;
	} else {
		throw new Error('Argument must be a Buffer');
	}
};

},{"buffer":15}],247:[function(require,module,exports){
(function (global){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global global, define, System, Reflect, Promise */
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var _await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
(function (factory) {
    var root = (typeof global === "undefined" ? "undefined" : _typeof(global)) === "object" ? global : (typeof self === "undefined" ? "undefined" : _typeof(self)) === "object" ? self : _typeof(this) === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function (exports) {
            factory(createExporter(root, createExporter(exports)));
        });
    } else if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
        factory(createExporter(root, createExporter(module.exports)));
    } else {
        factory(createExporter(root));
    }
    function createExporter(exports, previous) {
        if (exports !== root) {
            if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", { value: true });
            } else {
                exports.__esModule = true;
            }
        }
        return function (id, v) {
            return exports[id] = previous ? previous(id, v) : v;
        };
    }
})(function (exporter) {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };

    __extends = function __extends(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) {
                if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
        }
        return t;
    };

    __rest = function __rest(s, e) {
        var t = {};
        for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
        }if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
        }return t;
    };

    __decorate = function __decorate(decorators, target, key, desc) {
        var c = arguments.length,
            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
            d;
        if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
            if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        }return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    __param = function __param(paramIndex, decorator) {
        return function (target, key) {
            decorator(target, key, paramIndex);
        };
    };

    __metadata = function __metadata(metadataKey, metadataValue) {
        if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    };

    __awaiter = function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P(function (resolve) {
                    resolve(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };

    __generator = function __generator(thisArg, body) {
        var _ = { label: 0, sent: function sent() {
                if (t[0] & 1) throw t[1];return t[1];
            }, trys: [], ops: [] },
            f,
            y,
            t,
            g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
            return this;
        }), g;
        function verb(n) {
            return function (v) {
                return step([n, v]);
            };
        }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) {
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                    if (y = 0, t) op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:case 1:
                            t = op;break;
                        case 4:
                            _.label++;return { value: op[1], done: false };
                        case 5:
                            _.label++;y = op[1];op = [0];continue;
                        case 7:
                            op = _.ops.pop();_.trys.pop();continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;continue;
                            }
                            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                                _.label = op[1];break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];t = op;break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];_.ops.push(op);break;
                            }
                            if (t[2]) _.ops.pop();
                            _.trys.pop();continue;
                    }
                    op = body.call(thisArg, _);
                } catch (e) {
                    op = [6, e];y = 0;
                } finally {
                    f = t = 0;
                }
            }if (op[0] & 5) throw op[1];return { value: op[0] ? op[1] : void 0, done: true };
        }
    };

    __exportStar = function __exportStar(m, exports) {
        for (var p in m) {
            if (!exports.hasOwnProperty(p)) exports[p] = m[p];
        }
    };

    __values = function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator],
            i = 0;
        if (m) return m.call(o);
        return {
            next: function next() {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    };

    __read = function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o),
            r,
            ar = [],
            e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
                ar.push(r.value);
            }
        } catch (error) {
            e = { error: error };
        } finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            } finally {
                if (e) throw e.error;
            }
        }
        return ar;
    };

    __spread = function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++) {
            ar = ar.concat(__read(arguments[i]));
        }return ar;
    };

    _await = function __await(v) {
        return this instanceof _await ? (this.v = v, this) : new _await(v);
    };

    __asyncGenerator = function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []),
            i,
            q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
            return this;
        }, i;
        function verb(n) {
            if (g[n]) i[n] = function (v) {
                return new Promise(function (a, b) {
                    q.push([n, v, a, b]) > 1 || resume(n, v);
                });
            };
        }
        function resume(n, v) {
            try {
                step(g[n](v));
            } catch (e) {
                settle(q[0][3], e);
            }
        }
        function step(r) {
            r.value instanceof _await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
            resume("next", value);
        }
        function reject(value) {
            resume("throw", value);
        }
        function settle(f, v) {
            if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
        }
    };

    __asyncDelegator = function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) {
            throw e;
        }), verb("return"), i[Symbol.iterator] = function () {
            return this;
        }, i;
        function verb(n, f) {
            i[n] = o[n] ? function (v) {
                return (p = !p) ? { value: _await(o[n](v)), done: n === "return" } : f ? f(v) : v;
            } : f;
        }
    };

    __asyncValues = function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator],
            i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
            return this;
        }, i);
        function verb(n) {
            i[n] = o[n] && function (v) {
                return new Promise(function (resolve, reject) {
                    v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
            };
        }
        function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function (v) {
                resolve({ value: v, done: d });
            }, reject);
        }
    };

    __makeTemplateObject = function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        } else {
            cooked.raw = raw;
        }
        return cooked;
    };

    __importStar = function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) {
            if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        }result["default"] = mod;
        return result;
    };

    __importDefault = function __importDefault(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
    };

    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__await", _await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],248:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var punycode = require('punycode');
var util = require('./util');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,


// Special case for a simple path URL
simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,


// RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],


// RFC 2396: characters not allowed for various reasons.
unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),


// Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = ['\''].concat(unwise),

// Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,

// protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol = {
  'javascript': true,
  'javascript:': true
},

// protocols that never have a hostname.
hostlessProtocol = {
  'javascript': true,
  'javascript:': true
},

// protocols that always contain a // bit.
slashedProtocol = {
  'http': true,
  'https': true,
  'ftp': true,
  'gopher': true,
  'file': true,
  'http:': true,
  'https:': true,
  'ftp:': true,
  'gopher:': true,
  'file:': true
},
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url();
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + (typeof url === 'undefined' ? 'undefined' : _typeof(url)));
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1) hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1) continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }

  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function () {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || query && '?' + query || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function (relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function (relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol') result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift())) {}
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = relative.host || relative.host === '' ? relative.host : result.host;
    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/';

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || result.host && srcPath.length;

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function () {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

},{"./util":249,"punycode":14,"querystring":221}],249:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

module.exports = {
  isString: function isString(arg) {
    return typeof arg === 'string';
  },
  isObject: function isObject(arg) {
    return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
  },
  isNull: function isNull(arg) {
    return arg === null;
  },
  isNullOrUndefined: function isNullOrUndefined(arg) {
    return arg == null;
  }
};

},{}],250:[function(require,module,exports){
(function (global){
'use strict';

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate(fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config(name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],251:[function(require,module,exports){
"use strict";

module.exports = extend;

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {};

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }

    return target;
}

},{}]},{},[1])(1)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJpbmRleC5qcyIsImxpYi9oZWxwZXJzLmpzIiwibGliL3R5cGVzL2FwaS5qcyIsImxpYi90eXBlcy9vcGVyYXRpb24uanMiLCJsaWIvdHlwZXMvcGFyYW1ldGVyLXZhbHVlLmpzIiwibGliL3R5cGVzL3BhcmFtZXRlci5qcyIsImxpYi90eXBlcy9wYXRoLmpzIiwibGliL3R5cGVzL3Jlc3BvbnNlLmpzIiwibGliL3ZhbGlkYXRpb24vZm9ybWF0LWdlbmVyYXRvcnMuanMiLCJsaWIvdmFsaWRhdGlvbi9mb3JtYXQtdmFsaWRhdG9ycy5qcyIsImxpYi92YWxpZGF0aW9uL3ZhbGlkYXRvcnMuanMiLCJub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXItcmVzb2x2ZS9lbXB0eS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9wdW55Y29kZS9wdW55Y29kZS5qcyIsIm5vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnVpbHRpbi1zdGF0dXMtY29kZXMvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9jYWxsLW1lLW1heWJlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtdXRpbC1pcy9saWIvdXRpbC5qcyIsIm5vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvZGVidWcuanMiLCJub2RlX21vZHVsZXMvZGVlcC1leHRlbmQvbGliL2RlZXAtZXh0ZW5kLmpzIiwibm9kZV9tb2R1bGVzL2RlcmVmL2xpYi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9kZXJlZi9saWIvdXRpbC9jbG9uZS1vYmouanMiLCJub2RlX21vZHVsZXMvZGVyZWYvbGliL3V0aWwvZmluZC1yZWZlcmVuY2UuanMiLCJub2RlX21vZHVsZXMvZGVyZWYvbGliL3V0aWwvaGVscGVycy5qcyIsIm5vZGVfbW9kdWxlcy9kZXJlZi9saWIvdXRpbC9ub3JtYWxpemUtc2NoZW1hLmpzIiwibm9kZV9tb2R1bGVzL2RlcmVmL2xpYi91dGlsL3Jlc29sdmUtc2NoZW1hLmpzIiwibm9kZV9tb2R1bGVzL2RyYW5nZS9saWIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZXM2LXByb21pc2UvZGlzdC9lczYtcHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9hZGRyZXNzLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9jb21tZXJjZS5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvY29tcGFueS5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvZGF0YWJhc2UuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2RhdGUuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2Zha2UuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2ZpbmFuY2UuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2hhY2tlci5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvaGVscGVycy5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvaWJhbi5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvaW1hZ2UuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9pbnRlcm5ldC5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9hZGRyZXNzL2J1aWxkaW5nX251bWJlci5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9hZGRyZXNzL2NpdHkuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vYWRkcmVzcy9jaXR5X3ByZWZpeC5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9hZGRyZXNzL2NpdHlfc3VmZml4LmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2FkZHJlc3MvY291bnRyeS5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9hZGRyZXNzL2NvdW50cnlfY29kZS5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9hZGRyZXNzL2NvdW50eS5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9hZGRyZXNzL2RlZmF1bHRfY291bnRyeS5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9hZGRyZXNzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2FkZHJlc3MvcG9zdGNvZGUuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vYWRkcmVzcy9wb3N0Y29kZV9ieV9zdGF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9hZGRyZXNzL3NlY29uZGFyeV9hZGRyZXNzLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2FkZHJlc3Mvc3RhdGUuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vYWRkcmVzcy9zdGF0ZV9hYmJyLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2FkZHJlc3Mvc3RyZWV0X2FkZHJlc3MuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vYWRkcmVzcy9zdHJlZXRfbmFtZS5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9hZGRyZXNzL3N0cmVldF9zdWZmaXguanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vYWRkcmVzcy90aW1lX3pvbmUuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vYXBwL2F1dGhvci5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9hcHAvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vYXBwL25hbWUuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vYXBwL3ZlcnNpb24uanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vYnVzaW5lc3MvY3JlZGl0X2NhcmRfZXhwaXJ5X2RhdGVzLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2J1c2luZXNzL2NyZWRpdF9jYXJkX251bWJlcnMuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vYnVzaW5lc3MvY3JlZGl0X2NhcmRfdHlwZXMuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vYnVzaW5lc3MvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vY2VsbF9waG9uZS9mb3JtYXRzLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2NlbGxfcGhvbmUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vY29tbWVyY2UvY29sb3IuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vY29tbWVyY2UvZGVwYXJ0bWVudC5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9jb21tZXJjZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9jb21tZXJjZS9wcm9kdWN0X25hbWUuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vY29tcGFueS9hZGplY3RpdmUuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vY29tcGFueS9ic19hZGplY3RpdmUuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vY29tcGFueS9ic19ub3VuLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2NvbXBhbnkvYnNfdmVyYi5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9jb21wYW55L2Rlc2NyaXB0b3IuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vY29tcGFueS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9jb21wYW55L25hbWUuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vY29tcGFueS9ub3VuLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2NvbXBhbnkvc3VmZml4LmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2NyZWRpdF9jYXJkL2FtZXJpY2FuX2V4cHJlc3MuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vY3JlZGl0X2NhcmQvZGluZXJzX2NsdWIuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vY3JlZGl0X2NhcmQvZGlzY292ZXIuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vY3JlZGl0X2NhcmQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vY3JlZGl0X2NhcmQvamNiLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2NyZWRpdF9jYXJkL2xhc2VyLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2NyZWRpdF9jYXJkL21hZXN0cm8uanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vY3JlZGl0X2NhcmQvbWFzdGVyY2FyZC5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9jcmVkaXRfY2FyZC9zb2xvLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2NyZWRpdF9jYXJkL3N3aXRjaC5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9jcmVkaXRfY2FyZC92aXNhLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2RhdGFiYXNlL2NvbGxhdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9kYXRhYmFzZS9jb2x1bW4uanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vZGF0YWJhc2UvZW5naW5lLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2RhdGFiYXNlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2RhdGFiYXNlL3R5cGUuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vZGF0ZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9kYXRlL21vbnRoLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2RhdGUvd2Vla2RheS5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9maW5hbmNlL2FjY291bnRfdHlwZS5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9maW5hbmNlL2N1cnJlbmN5LmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2ZpbmFuY2UvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vZmluYW5jZS90cmFuc2FjdGlvbl90eXBlLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2hhY2tlci9hYmJyZXZpYXRpb24uanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vaGFja2VyL2FkamVjdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9oYWNrZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vaGFja2VyL2luZ3ZlcmIuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vaGFja2VyL25vdW4uanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vaGFja2VyL3ZlcmIuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vaW5kZXguanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vaW50ZXJuZXQvYXZhdGFyX3VyaS5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9pbnRlcm5ldC9kb21haW5fc3VmZml4LmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL2ludGVybmV0L2V4YW1wbGVfZW1haWwuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vaW50ZXJuZXQvZnJlZV9lbWFpbC5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9pbnRlcm5ldC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9sb3JlbS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9sb3JlbS9zdXBwbGVtZW50YWwuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vbG9yZW0vd29yZHMuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vbmFtZS9maXJzdF9uYW1lLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL25hbWUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vbmFtZS9sYXN0X25hbWUuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vbmFtZS9uYW1lLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL25hbWUvcHJlZml4LmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL25hbWUvc3VmZml4LmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL25hbWUvdGl0bGUuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vcGhvbmVfbnVtYmVyL2Zvcm1hdHMuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vcGhvbmVfbnVtYmVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL3N5c3RlbS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi9zeXN0ZW0vbWltZVR5cGVzLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuL3RlYW0vY3JlYXR1cmUuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW4vdGVhbS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbi90ZWFtL25hbWUuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW5fVVMvYWRkcmVzcy9kZWZhdWx0X2NvdW50cnkuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW5fVVMvYWRkcmVzcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbl9VUy9hZGRyZXNzL3Bvc3Rjb2RlX2J5X3N0YXRlLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuX1VTL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9sb2NhbGVzL2VuX1VTL2ludGVybmV0L2RvbWFpbl9zdWZmaXguanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW5fVVMvaW50ZXJuZXQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvY2FsZXMvZW5fVVMvcGhvbmVfbnVtYmVyL2FyZWFfY29kZS5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbl9VUy9waG9uZV9udW1iZXIvZXhjaGFuZ2VfY29kZS5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvbG9jYWxlcy9lbl9VUy9waG9uZV9udW1iZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL2xvcmVtLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9uYW1lLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xpYi9waG9uZV9udW1iZXIuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvbGliL3JhbmRvbS5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci9saWIvc3lzdGVtLmpzIiwibm9kZV9tb2R1bGVzL2Zha2VyL2xvY2FsZS9lbl9VUy5qcyIsIm5vZGVfbW9kdWxlcy9mYWtlci92ZW5kb3IvbWVyc2VubmUuanMiLCJub2RlX21vZHVsZXMvZmFrZXIvdmVuZG9yL3VzZXItYWdlbnQuanMiLCJub2RlX21vZHVsZXMvZm9ybWF0LXV0aWwvZm9ybWF0LmpzIiwibm9kZV9tb2R1bGVzL2h0dHBzLWJyb3dzZXJpZnkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2pzLXlhbWwvaW5kZXguanMiLCJub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC5qcyIsIm5vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL2NvbW1vbi5qcyIsIm5vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL2R1bXBlci5qcyIsIm5vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL2V4Y2VwdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL2xvYWRlci5qcyIsIm5vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL21hcmsuanMiLCJub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEuanMiLCJub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEvY29yZS5qcyIsIm5vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3NjaGVtYS9kZWZhdWx0X2Z1bGwuanMiLCJub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEvZGVmYXVsdF9zYWZlLmpzIiwibm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvc2NoZW1hL2ZhaWxzYWZlLmpzIiwibm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvc2NoZW1hL2pzb24uanMiLCJub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlLmpzIiwibm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9iaW5hcnkuanMiLCJub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL2Jvb2wuanMiLCJub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL2Zsb2F0LmpzIiwibm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9pbnQuanMiLCJub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL2pzL2Z1bmN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9qcy9yZWdleHAuanMiLCJub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL2pzL3VuZGVmaW5lZC5qcyIsIm5vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvbWFwLmpzIiwibm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9tZXJnZS5qcyIsIm5vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvbnVsbC5qcyIsIm5vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvb21hcC5qcyIsIm5vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvcGFpcnMuanMiLCJub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL3NlcS5qcyIsIm5vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvc2V0LmpzIiwibm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9zdHIuanMiLCJub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL3RpbWVzdGFtcC5qcyIsIm5vZGVfbW9kdWxlcy9qc29uLXNjaGVtYS1mYWtlci9saWIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvanNvbi1zY2hlbWEtcmVmLXBhcnNlci9saWIvYnVuZGxlLmpzIiwibm9kZV9tb2R1bGVzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvbGliL2RlcmVmZXJlbmNlLmpzIiwibm9kZV9tb2R1bGVzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvbGliL29wdGlvbnMuanMiLCJub2RlX21vZHVsZXMvanNvbi1zY2hlbWEtcmVmLXBhcnNlci9saWIvcGFyc2UuanMiLCJub2RlX21vZHVsZXMvanNvbi1zY2hlbWEtcmVmLXBhcnNlci9saWIvcGFyc2Vycy9iaW5hcnkuanMiLCJub2RlX21vZHVsZXMvanNvbi1zY2hlbWEtcmVmLXBhcnNlci9saWIvcGFyc2Vycy9qc29uLmpzIiwibm9kZV9tb2R1bGVzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvbGliL3BhcnNlcnMvdGV4dC5qcyIsIm5vZGVfbW9kdWxlcy9qc29uLXNjaGVtYS1yZWYtcGFyc2VyL2xpYi9wYXJzZXJzL3lhbWwuanMiLCJub2RlX21vZHVsZXMvanNvbi1zY2hlbWEtcmVmLXBhcnNlci9saWIvcG9pbnRlci5qcyIsIm5vZGVfbW9kdWxlcy9qc29uLXNjaGVtYS1yZWYtcGFyc2VyL2xpYi9yZWYuanMiLCJub2RlX21vZHVsZXMvanNvbi1zY2hlbWEtcmVmLXBhcnNlci9saWIvcmVmcy5qcyIsIm5vZGVfbW9kdWxlcy9qc29uLXNjaGVtYS1yZWYtcGFyc2VyL2xpYi9yZXNvbHZlLWV4dGVybmFsLmpzIiwibm9kZV9tb2R1bGVzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvbGliL3Jlc29sdmVycy9maWxlLmpzIiwibm9kZV9tb2R1bGVzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvbGliL3Jlc29sdmVycy9odHRwLmpzIiwibm9kZV9tb2R1bGVzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvbGliL3V0aWwvZGVidWcuanMiLCJub2RlX21vZHVsZXMvanNvbi1zY2hlbWEtcmVmLXBhcnNlci9saWIvdXRpbC9wbHVnaW5zLmpzIiwibm9kZV9tb2R1bGVzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvbGliL3V0aWwvcHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9qc29uLXNjaGVtYS1yZWYtcGFyc2VyL2xpYi91dGlsL3VybC5qcyIsIm5vZGVfbW9kdWxlcy9qc29uLXNjaGVtYS1yZWYtcGFyc2VyL2xpYi91dGlsL3lhbWwuanMiLCJub2RlX21vZHVsZXMvanNvbi1zY2hlbWEtcmVmLXBhcnNlci9saWIvdmFsaWRhdG9ycy96LXNjaGVtYS5qcyIsIm5vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9uYXRpdmUtcHJvbWlzZS1vbmx5L2xpYi9ucG8uc3JjLmpzIiwibm9kZV9tb2R1bGVzL29uby9saWIvb25vLmpzIiwibm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3Byb2Nlc3MtbmV4dGljay1hcmdzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvZGVjb2RlLmpzIiwibm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nLWVzMy9lbmNvZGUuanMiLCJub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3JhbmRleHAvbGliL3JhbmRleHAuanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0LmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95LmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0tYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUtYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9yZXQvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3JldC9saWIvcG9zaXRpb25zLmpzIiwibm9kZV9tb2R1bGVzL3JldC9saWIvc2V0cy5qcyIsIm5vZGVfbW9kdWxlcy9yZXQvbGliL3R5cGVzLmpzIiwibm9kZV9tb2R1bGVzL3JldC9saWIvdXRpbC5qcyIsIm5vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9saWIvY2FwYWJpbGl0eS5qcyIsIm5vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9saWIvcmVxdWVzdC5qcyIsIm5vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9saWIvcmVzcG9uc2UuanMiLCJub2RlX21vZHVsZXMvc3RyaW5nX2RlY29kZXIvbGliL3N0cmluZ19kZWNvZGVyLmpzIiwibm9kZV9tb2R1bGVzL3N3YWdnZXItbWV0aG9kcy9saWIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvc3dhZ2dlci1zY2hlbWEtb2ZmaWNpYWwvc2NoZW1hLmpzb24iLCJub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIm5vZGVfbW9kdWxlcy90by1hcnJheWJ1ZmZlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5qcyIsIm5vZGVfbW9kdWxlcy91cmwvdXJsLmpzIiwibm9kZV9tb2R1bGVzL3VybC91dGlsLmpzIiwibm9kZV9tb2R1bGVzL3V0aWwtZGVwcmVjYXRlL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMveHRlbmQvaW1tdXRhYmxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQ0FBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkE7O0FBRUEsSUFBSSxJQUFLLE9BQU8sTUFBUCxLQUFrQixXQUFsQixHQUFnQyxPQUFPLEdBQVAsQ0FBaEMsR0FBOEMsT0FBTyxNQUFQLEtBQWtCLFdBQWxCLEdBQWdDLE9BQU8sR0FBUCxDQUFoQyxHQUE4QyxJQUFyRztBQUNBLElBQUksVUFBVSxRQUFRLGVBQVIsQ0FBZDtBQUNBLElBQUksV0FBWSxPQUFPLE1BQVAsS0FBa0IsV0FBbEIsR0FBZ0MsT0FBTyxVQUFQLENBQWhDLEdBQXFELE9BQU8sTUFBUCxLQUFrQixXQUFsQixHQUFnQyxPQUFPLFVBQVAsQ0FBaEMsR0FB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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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Ozs7Ozs7O0FDbEVELE9BQU8sT0FBUCxHQUFpQixNQUFqQjs7QUFFQSxJQUFJLGlCQUFpQixPQUFPLFNBQVAsQ0FBaUIsY0FBdEM7O0FBRUEsU0FBUyxNQUFULEdBQWtCO0FBQ2QsUUFBSSxTQUFTLEVBQWI7O0FBRUEsU0FBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLFVBQVUsTUFBOUIsRUFBc0MsR0FBdEMsRUFBMkM7QUFDdkMsWUFBSSxTQUFTLFVBQVUsQ0FBVixDQUFiOztBQUVBLGFBQUssSUFBSSxHQUFULElBQWdCLE1BQWhCLEVBQXdCO0FBQ3BCLGdCQUFJLGVBQWUsSUFBZixDQUFvQixNQUFwQixFQUE0QixHQUE1QixDQUFKLEVBQXNDO0FBQ2xDLHVCQUFPLEdBQVAsSUFBYyxPQUFPLEdBQVAsQ0FBZDtBQUNIO0FBQ0o7QUFDSjs7QUFFRCxXQUFPLE1BQVA7QUFDSCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIi8qXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgQXBpZ2VlIENvcnBvcmF0aW9uXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ18nXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ18nXSA6IG51bGwpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuL2xpYi9oZWxwZXJzJyk7XG52YXIgSnNvblJlZnMgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snSnNvblJlZnMnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ0pzb25SZWZzJ10gOiBudWxsKTtcbnZhciBTd2FnZ2VyQXBpID0gcmVxdWlyZSgnLi9saWIvdHlwZXMvYXBpJyk7XG52YXIgWUFNTCA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93Wydqc3lhbWwnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ2pzeWFtbCddIDogbnVsbCk7XG5cbi8vIExvYWQgcHJvbWlzZXMgcG9seWZpbGwgaWYgbmVjZXNzYXJ5XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmICh0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgcmVxdWlyZSgnbmF0aXZlLXByb21pc2Utb25seScpO1xufVxuXG4vKipcbiAqIEEgbGlicmFyeSBmb3Igc2ltcGxlciBbU3dhZ2dlcl0oaHR0cDovL3N3YWdnZXIuaW8vKSBpbnRlZ3JhdGlvbnMuXG4gKlxuICogQG1vZHVsZSBTd2F5XG4gKi9cblxuLyoqXG4gKiBDYWxsYmFjayB1c2VkIGZvciB2YWxpZGF0aW9uLlxuICpcbiAqIEB0eXBlZGVmIHtmdW5jdGlvbn0gVmFsaWRhdG9yQ2FsbGJhY2tcbiAqXG4gKiBAcGFyYW0ge21vZHVsZTpTd2F5flN3YWdnZXJBcGl9IGFwaSAtIFRoZSBTd2FnZ2VyIEFQSSBvYmplY3RcbiAqXG4gKiBAcmV0dXJucyB7bW9kdWxlOlN3YXl+VmFsaWRhdGlvblJlc3VsdHN9IFRoZSB2YWxpZGF0aW9uIHJlc3VsdHNcbiAqL1xuXG4vKipcbiAqIFNlcnZlciByZXNwb25zZSB3cmFwcGVyLlxuICpcbiAqIFNpbmNlIHRoZSBsb3cgbGV2ZWwgYGh0dHAuU2VydmVyUmVzcG9uc2VgIG9iamVjdCBpcyBub3QgYWx3YXlzIGd1YXJhbnRlZWQgYW5kIGV2ZW4gaWYgaXQgaXMsIHRoZXJlIGlzIG5vIHB1YmxpYyB3YXlcbiAqIHRvIGdhdGhlciB0aGUgbmVjZXNzYXJ5IHBhcnRzIG9mIHRoZSByZXNwb25zZSB0byBwZXJmb3JtIHZhbGlkYXRpb24sIHRoaXMgb2JqZWN0IGVuY2Fwc3VsYXRlcyB0aGUgcmVxdWlyZWQgcmVzcG9uc2VcbiAqIGluZm9ybWF0aW9uIHRvIHBlcmZvcm0gcmVzcG9uc2UgdmFsaWRhdGlvbi5cbiAqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBTZXJ2ZXJSZXNwb25zZVdyYXBwZXJcbiAqXG4gKiBAcHJvcGVydHkgeyp9IGJvZHkgLSBUaGUgcmVzcG9uc2UgYm9keVxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtlbmNvZGluZ10gLSBUaGUgZW5jb2Rpbmcgb2YgdGhlIGJvZHkgd2hlbiB0aGUgYm9keSBpcyBhIGBCdWZmZXJgXG4gKiBAcHJvcGVydHkge29iamVjdH0gaGVhZGVycyAtIFRoZSByZXNwb25zZSBoZWFkZXJzXG4gKiBAcHJvcGVydHkge251bWJlcnxzdHJpbmd9IFtzdGF0dXNDb2RlPWRlZmF1bHRdIC0gVGhlIHJlc3BvbnNlIHN0YXR1cyBjb2RlXG4gKi9cblxuLyoqXG4gKiBWYWxpZGF0aW9uIGVycm9yL3dhcm5pbmcgb2JqZWN0LlxuICpcbiAqIFdoZW4gdGhpcyBvYmplY3QgaXMgY3JlYXRlZCBhcyBhIHJlc3VsdCBvZiBKU09OIFNjaGVtYSB2YWxpZGF0aW9uLCB0aGlzIG9iamVjdCBpcyBjcmVhdGVkIGJ5XG4gKiBbei1zY2hlbWFdKGh0dHBzOi8vZ2l0aHViLmNvbS96YWdnaW5vL3otc2NoZW1hKSBhbmQgaXQgb3ducyB0aGUgc3RydWN0dXJlIHNvIHRoZXJlIGNhbiBiZSBleHRyYSBwcm9wZXJ0aWVzIG5vdFxuICogZG9jdW1lbnRlZCBiZWxvdy5cbiAqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBWYWxpZGF0aW9uRW50cnlcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29kZSAtIFRoZSBjb2RlIHVzZWQgdG8gaWRlbnRpZnkgdGhlIGVycm9yL3dhcm5pbmdcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZXJyb3JdIC0gV2hlbmV2ZXIgdGhlcmUgaXMgYW4gdXBzdHJlYW0gYEVycm9yYCBlbmNvdW50ZXJlZCwgaXRzIG1lc3NhZ2UgaXMgaGVyZVxuICogQHByb3BlcnR5IHtWYWxpZGF0aW9uRW50cnlbXX0gW2Vycm9yc10gLSBUaGUgbmVzdGVkIGVycm9yKHMpIGVuY291bnRlcmVkIGR1cmluZyB2YWxpZGF0aW9uXG4gKiBAcHJvcGVydHkge3N0cmluZ1tdfSBbbGluZWFnZV0gLSBDb250YWlucyB0aGUgY29tcG9zaXRpb24gbGluZWFnZSBmb3IgY2lyY3VsYXIgY29tcG9zaXRpb24gZXJyb3JzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbWVzc2FnZSAtIFRoZSBodW1hbiByZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3Ivd2FybmluZ1xuICogQHByb3BlcnR5IHtzdHJpbmd9IFtuYW1lXSAtIFRoZSBoZWFkZXIgbmFtZSBmb3IgaGVhZGVyIHZhbGlkYXRpb24gZXJyb3JzXG4gKiBAcHJvcGVydHkge2FycmF5fSBbcGFyYW1zXSAtIFRoZSBwYXJhbWV0ZXJzIHVzZWQgd2hlbiB2YWxpZGF0aW9uIGZhaWxlZCAqKFRoaXMgaXMgYSB6LXNjaGVtYSBjb25zdHJ1Y3QgYW5kIGlzIG9ubHlcbiAqIHNldCBmb3IgSlNPTiBTY2hlbWEgdmFsaWRhdGlvbiBlcnJvcnMuKSpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nW119IHBhdGggLSBUaGUgcGF0aCB0byB0aGUgbG9jYXRpb24gaW4gdGhlIGRvY3VtZW50IHdoZXJlIHRoZSBlcnJvci93YXJuaW5nIG9jY3VycmVkXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3NjaGVtYUlkXSAtIFRoZSBzY2hlbWEgaWQgKihUaGlzIGlzIGEgei1zY2hlbWEgY29uc3RydWN0IGFuZCBpcyBvbmx5IHNldCBmb3IgSlNPTiBTY2hlbWFcbiAqIHZhbGlkYXRpb24gZXJyb3JzIGFuZCB3aGVuIGl0cyB2YWx1ZSBpcyBub3QgYHVuZGVmaW5lZGAuKVxuICovXG5cbi8qKlxuICogVmFsaWRhdGlvbiByZXN1bHRzIG9iamVjdC5cbiAqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBWYWxpZGF0aW9uUmVzdWx0c1xuICpcbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOlN3YXl+VmFsaWRhdGlvbkVudHJ5W119IGVycm9ycyAtIFRoZSB2YWxpZGF0aW9uIGVycm9yc1xuICogQHByb3BlcnR5IHttb2R1bGU6U3dheX5WYWxpZGF0aW9uRW50cnlbXX0gd2FybmluZ3MgLSBUaGUgdmFsaWRhdGlvbiB3YXJuaW5nc1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBhIFN3YWdnZXJBcGkgb2JqZWN0IGZyb20gaXRzIFN3YWdnZXIgZGVmaW5pdGlvbihzKS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciBsb2FkaW5nIHRoZSBkZWZpbml0aW9uKHMpXG4gKiBAcGFyYW0ge29iamVjdHxzdHJpbmd9IG9wdGlvbnMuZGVmaW5pdGlvbiAtIFRoZSBTd2FnZ2VyIGRlZmluaXRpb24gbG9jYXRpb24gb3Igc3RydWN0dXJlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuanNvblJlZnNdIC0gKihTZWUgW0pzb25SZWZzfkpzb25SZWZzT3B0aW9uc10oaHR0cHM6Ly9naXRodWIuY29tL3doaXRsb2NramMvanNvbi1yZWZzL2Jsb2IvbWFzdGVyL2RvY3MvQVBJLm1kI21vZHVsZV9Kc29uUmVmcy4uSnNvblJlZnNPcHRpb25zKSkqXG4gKiBAcGFyYW0ge21vZHVsZTpTd2F5flZhbGlkYXRvckNhbGxiYWNrW119IFtvcHRpb25zLmN1c3RvbVZhbGlkYXRvcnNdIC0gVGhlIGN1c3RvbSB2YWxpZGF0b3JzXG4gKlxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBwcm9taXNlXG4gKlxuICogQGV4YW1wbGVcbiAqIFN3YWdnZXJBcGkuY3JlYXRlKHtkZWZpbml0aW9uOiAnaHR0cDovL3BldHN0b3JlLnN3YWdnZXIuaW8vdjIvc3dhZ2dlci55YW1sJ30pXG4gKiAgIC50aGVuKGZ1bmN0aW9uIChhcGkpIHtcbiAqICAgICBjb25zb2xlLmxvZygnRG9jdW1lbnRhdGlvbiBVUkw6ICcsIGFwaS5kb2N1bWVudGF0aW9uVXJsKTtcbiAqICAgfSwgZnVuY3Rpb24gKGVycikge1xuICogICAgIGNvbnNvbGUuZXJyb3IoZXJyLnN0YWNrKTtcbiAqICAgfSk7XG4gKi9cbm1vZHVsZS5leHBvcnRzLmNyZWF0ZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHZhciBhbGxUYXNrcyA9IFByb21pc2UucmVzb2x2ZSgpO1xuICB2YXIgY09wdGlvbnM7XG5cbiAgLy8gVmFsaWRhdGUgYXJndW1lbnRzXG4gIGFsbFRhc2tzID0gYWxsVGFza3MudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICBpZiAoXy5pc1VuZGVmaW5lZChvcHRpb25zKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIGlzIHJlcXVpcmVkJyk7XG4gICAgICB9IGVsc2UgaWYgKCFfLmlzUGxhaW5PYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgICAgfSBlbHNlIGlmIChfLmlzVW5kZWZpbmVkKG9wdGlvbnMuZGVmaW5pdGlvbikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucy5kZWZpbml0aW9uIGlzIHJlcXVpcmVkJyk7XG4gICAgICB9IGVsc2UgaWYgKCFfLmlzUGxhaW5PYmplY3Qob3B0aW9ucy5kZWZpbml0aW9uKSAmJiAhXy5pc1N0cmluZyhvcHRpb25zLmRlZmluaXRpb24pKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMuZGVmaW5pdGlvbiBtdXN0IGJlIGVpdGhlciBhbiBvYmplY3Qgb3IgYSBzdHJpbmcnKTtcbiAgICAgIH0gZWxzZSBpZiAoIV8uaXNVbmRlZmluZWQob3B0aW9ucy5qc29uUmVmcykgJiYgIV8uaXNQbGFpbk9iamVjdChvcHRpb25zLmpzb25SZWZzKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zLmpzb25SZWZzIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgICB9IGVsc2UgaWYgKCFfLmlzVW5kZWZpbmVkKG9wdGlvbnMuY3VzdG9tVmFsaWRhdG9ycykgJiYgIV8uaXNBcnJheShvcHRpb25zLmN1c3RvbVZhbGlkYXRvcnMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMuY3VzdG9tVmFsaWRhdG9ycyBtdXN0IGJlIGFuIGFycmF5Jyk7XG4gICAgICB9XG5cbiAgICAgIF8uZm9yRWFjaChvcHRpb25zLmN1c3RvbVZhbGlkYXRvcnMsIGZ1bmN0aW9uICh2YWxpZGF0b3IsIGluZGV4KSB7XG4gICAgICAgIGlmICghXy5pc0Z1bmN0aW9uKHZhbGlkYXRvcikpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zLmN1c3RvbVZhbGlkYXRvcnMgYXQgaW5kZXggJyArIGluZGV4ICsgJyBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJlc29sdmUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gTWFrZSBhIGNvcHkgb2YgdGhlIGlucHV0IG9wdGlvbnMgc28gYXMgbm90IHRvIGFsdGVyIHRoZW1cbiAgY09wdGlvbnMgPSBfLmNsb25lRGVlcChvcHRpb25zKTtcblxuICAvL1xuICBhbGxUYXNrcyA9IGFsbFRhc2tzXG4gICAgLy8gUmVzb2x2ZSByZWxhdGl2ZS9yZW1vdGUgcmVmZXJlbmNlc1xuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFByZXBhcmUgdGhlIGpzb24tcmVmcyBvcHRpb25zXG4gICAgICBpZiAoXy5pc1VuZGVmaW5lZChjT3B0aW9ucy5qc29uUmVmcykpIHtcbiAgICAgICAgY09wdGlvbnMuanNvblJlZnMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgLy8gSW5jbHVkZSBpbnZhbGlkIHJlZmVyZW5jZSBpbmZvcm1hdGlvblxuICAgICAgY09wdGlvbnMuanNvblJlZnMuaW5jbHVkZUludmFsaWQgPSB0cnVlO1xuXG4gICAgICAvLyBSZXNvbHZlIG9ubHkgcmVsYXRpdmUvcmVtb3RlIHJlZmVyZW5jZXNcbiAgICAgIGNPcHRpb25zLmpzb25SZWZzLmZpbHRlciA9IFsncmVsYXRpdmUnLCAncmVtb3RlJ107XG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUganNvbi1yZWZzIG9wdGlvbnMgdG8gcHJvY2VzcyBZQU1MXG4gICAgICBpZiAoXy5pc1VuZGVmaW5lZChjT3B0aW9ucy5qc29uUmVmcy5sb2FkZXJPcHRpb25zKSkge1xuICAgICAgICBjT3B0aW9ucy5qc29uUmVmcy5sb2FkZXJPcHRpb25zID0ge307XG4gICAgICB9XG5cbiAgICAgIGlmIChfLmlzVW5kZWZpbmVkKGNPcHRpb25zLmpzb25SZWZzLmxvYWRlck9wdGlvbnMucHJvY2Vzc0NvbnRlbnQpKSB7XG4gICAgICAgIGNPcHRpb25zLmpzb25SZWZzLmxvYWRlck9wdGlvbnMucHJvY2Vzc0NvbnRlbnQgPSBmdW5jdGlvbiAocmVzLCBjYikge1xuICAgICAgICAgIGNiKHVuZGVmaW5lZCwgWUFNTC5zYWZlTG9hZChyZXMudGV4dCkpO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBDYWxsIHRoZSBhcHByb3ByaWF0ZSBqc29uLXJlZnMgQVBJXG4gICAgICBpZiAoXy5pc1N0cmluZyhjT3B0aW9ucy5kZWZpbml0aW9uKSkge1xuICAgICAgICByZXR1cm4gSnNvblJlZnMucmVzb2x2ZVJlZnNBdChjT3B0aW9ucy5kZWZpbml0aW9uLCBjT3B0aW9ucy5qc29uUmVmcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gSnNvblJlZnMucmVzb2x2ZVJlZnMoY09wdGlvbnMuZGVmaW5pdGlvbiwgY09wdGlvbnMuanNvblJlZnMpO1xuICAgICAgfVxuICAgIH0pXG4gICAgLy8gUmVzb2x2ZSBsb2NhbCByZWZlcmVuY2VzIGFuZCBtZXJnZSByZXN1bHRzXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlbW90ZVJlc3VsdHMpIHtcbiAgICAgIC8vIFJlc29sdmUgbG9jYWwgcmVmZXJlbmNlcyAoUmVtb3RlIHJlZmVyZW5jZXMgc2hvdWxkIGhhZCBhbHJlYWR5IGJlZW4gcmVzb2x2ZWQpXG4gICAgICBjT3B0aW9ucy5qc29uUmVmcy5maWx0ZXIgPSAnbG9jYWwnO1xuXG4gICAgICByZXR1cm4gSnNvblJlZnMucmVzb2x2ZVJlZnMocmVtb3RlUmVzdWx0cy5yZXNvbHZlZCB8fCBjT3B0aW9ucy5kZWZpbml0aW9uLCBjT3B0aW9ucy5qc29uUmVmcylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgICAgICBfLmVhY2gocmVtb3RlUmVzdWx0cy5yZWZzLCBmdW5jdGlvbiAocmVmRGV0YWlscywgcmVmUHRyKSB7XG4gICAgICAgICAgICByZXN1bHRzLnJlZnNbcmVmUHRyXSA9IHJlZkRldGFpbHM7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLy8gVGhlIG9yaWdpbmFsIFN3YWdnZXIgZGVmaW5pdGlvblxuICAgICAgICAgICAgZGVmaW5pdGlvbjogXy5pc1N0cmluZyhjT3B0aW9ucy5kZWZpbml0aW9uKSA/IHJlbW90ZVJlc3VsdHMudmFsdWUgOiBjT3B0aW9ucy5kZWZpbml0aW9uLFxuICAgICAgICAgICAgLy8gVGhlIG9yaWdpbmFsIFN3YWdnZXIgZGVmaW5pdGlvbiB3aXRoIGl0cyByZW1vdGUgcmVmZXJlbmNlcyByZXNvbHZlZFxuICAgICAgICAgICAgZGVmaW5pdGlvblJlbW90ZXNSZXNvbHZlZDogcmVtb3RlUmVzdWx0cy5yZXNvbHZlZCxcbiAgICAgICAgICAgIC8vIFRoZSBvcmlnaW5hbCBTd2FnZ2VyIGRlZmluaXRpb24gd2l0aCBhbGwgaXRzIHJlZmVyZW5jZXMgcmVzb2x2ZWRcbiAgICAgICAgICAgIGRlZmluaXRpb25GdWxseVJlc29sdmVkOiByZXN1bHRzLnJlc29sdmVkLFxuICAgICAgICAgICAgLy8gTWVyZ2UgdGhlIGxvY2FsIHJlZmVyZW5jZSBkZXRhaWxzIHdpdGggdGhlIHJlbW90ZSByZWZlcmVuY2UgZGV0YWlsc1xuICAgICAgICAgICAgcmVmczogcmVzdWx0cy5yZWZzXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KVxuICAgIC8vIFByb2Nlc3MgdGhlIFN3YWdnZXIgZG9jdW1lbnQgYW5kIHJldHVybiB0aGUgQVBJXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gcmVtb3ZlIGFsbCBjaXJjdWxhciBvYmplY3RzIGFzIHotc2NoZW1hIGRvZXMgbm90IHdvcmsgd2l0aCB0aGVtOlxuICAgICAgLy8gICBodHRwczovL2dpdGh1Yi5jb20vemFnZ2luby96LXNjaGVtYS9pc3N1ZXMvMTM3XG4gICAgICBoZWxwZXJzLnJlbW92ZUNpcmN1bGFycyhyZXN1bHRzLmRlZmluaXRpb24pO1xuICAgICAgaGVscGVycy5yZW1vdmVDaXJjdWxhcnMocmVzdWx0cy5kZWZpbml0aW9uUmVtb3Rlc1Jlc29sdmVkKTtcbiAgICAgIGhlbHBlcnMucmVtb3ZlQ2lyY3VsYXJzKHJlc3VsdHMuZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQpO1xuXG4gICAgICAvLyBDcmVhdGUgb2JqZWN0IG1vZGVsXG4gICAgICByZXR1cm4gbmV3IFN3YWdnZXJBcGkocmVzdWx0cy5kZWZpbml0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMuZGVmaW5pdGlvblJlbW90ZXNSZXNvbHZlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzLmRlZmluaXRpb25GdWxseVJlc29sdmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucmVmcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zKTtcbiAgICB9KTtcblxuICByZXR1cm4gYWxsVGFza3M7XG59O1xuIiwiLypcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNSBBcGlnZWUgQ29ycG9yYXRpb25cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF8gPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snXyddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnXyddIDogbnVsbCk7XG52YXIgZm9ybWF0R2VuZXJhdG9ycyA9IHJlcXVpcmUoJy4vdmFsaWRhdGlvbi9mb3JtYXQtZ2VuZXJhdG9ycycpO1xudmFyIGZvcm1hdFZhbGlkYXRvcnMgPSByZXF1aXJlKCcuL3ZhbGlkYXRpb24vZm9ybWF0LXZhbGlkYXRvcnMnKTtcbnZhciBaU2NoZW1hID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ1pTY2hlbWEnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ1pTY2hlbWEnXSA6IG51bGwpO1xuXG4vLyBmdWxsLWRhdGUgZnJvbSBodHRwOi8veG1sMnJmYy5pZXRmLm9yZy9wdWJsaWMvcmZjL2h0bWwvcmZjMzMzOS5odG1sI2FuY2hvcjE0XG52YXIgZGF0ZVJlZ0V4cCA9IG5ldyBSZWdFeHAoXG4gICdeJyArXG4gICdcXFxcZHs0fScgKyAvLyB5ZWFyXG4gICctJyArXG4gICcoWzBdXFxcXGR8MVswMTJdKScgKyAvLyBtb250aFxuICAnLScgK1xuICAnKDBbMS05XXxbMTJdXFxcXGR8M1swMV0pJyArIC8vIGRheVxuICAnJCcpO1xuXG4vLyBkYXRlLXRpbWUgZnJvbSBodHRwOi8veG1sMnJmYy5pZXRmLm9yZy9wdWJsaWMvcmZjL2h0bWwvcmZjMzMzOS5odG1sI2FuY2hvcjE0XG52YXIgZGF0ZVRpbWVSZWdFeHAgPSBuZXcgUmVnRXhwKFxuICAnXicgK1xuICAnXFxcXGR7NH0nICsgLy8geWVhclxuICAnLScgK1xuICAnKFswXVxcXFxkfDFbMDEyXSknICsgLy8gbW9udGhcbiAgJy0nICtcbiAgJygwWzEtOV18WzEyXVxcXFxkfDNbMDFdKScgKyAvLyBkYXlcbiAgJ1QnICtcbiAgJyhbMDFdXFxcXGR8MlswLTNdKScgKyAvLyBob3VyXG4gICc6JyArXG4gICdbMC01XVxcXFxkJyArIC8vIG1pbnV0ZVxuICAnOicgK1xuICAnWzAtNV1cXFxcZCcgKyAvLyBzZWNvbmRcbiAgJyhcXFxcLlxcXFxkKyk/JyArIC8vIGZyYWN0aW9uYWwgc2Vjb25kc1xuICAnKFp8KFxcXFwrfC0pKFswMV1cXFxcZHwyWzAtNF0pOlswLTVdXFxcXGQpJyArIC8vIFogb3IgdGltZSBvZmZzZXRcbiAgJyQnKTtcblxudmFyIGNvbGxlY3Rpb25Gb3JtYXRzID0gW3VuZGVmaW5lZCwgJ2NzdicsICdtdWx0aScsICdwaXBlcycsICdzc3YnLCAndHN2J107XG52YXIganNvbk1vY2tlcjtcbnZhciBqc29uU2NoZW1hVmFsaWRhdG9yID0gY3JlYXRlSlNPTlZhbGlkYXRvcigpO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItc3BlYy9ibG9iL21hc3Rlci92ZXJzaW9ucy8yLjAubWQjcGFyYW1ldGVyLW9iamVjdFxudmFyIHBhcmFtZXRlclNjaGVtYVByb3BlcnRpZXMgPSBbXG4gICdhbGxvd0VtcHR5VmFsdWUnLFxuICAnZGVmYXVsdCcsXG4gICdkZXNjcmlwdGlvbicsXG4gICdlbnVtJyxcbiAgJ2V4Y2x1c2l2ZU1heGltdW0nLFxuICAnZXhjbHVzaXZlTWluaW11bScsXG4gICdmb3JtYXQnLFxuICAnaXRlbXMnLFxuICAnbWF4SXRlbXMnLFxuICAnbWF4TGVuZ3RoJyxcbiAgJ21heGltdW0nLFxuICAnbWluSXRlbXMnLFxuICAnbWluTGVuZ3RoJyxcbiAgJ21pbmltdW0nLFxuICAnbXVsdGlwbGVPZicsXG4gICdwYXR0ZXJuJyxcbiAgJ3R5cGUnLFxuICAndW5pcXVlSXRlbXMnXG5dO1xudmFyIHR5cGVzID0gWydhcnJheScsICdib29sZWFuJywgJ2ludGVnZXInLCAnb2JqZWN0JywgJ251bWJlcicsICdzdHJpbmcnXTtcblxuZnVuY3Rpb24gY3JlYXRlSlNPTk1vY2tlciAobW9ja2VyKSB7XG4gIC8vIEV4dGVuZCBmYWtlci5qcyB0byBvbmx5IGluY2x1ZGUgdGhlICdlbicgbG9jYWxlXG4gIHZhciBmYWtlckxvY2FsZSA9IHJlcXVpcmUoJ2Zha2VyL2xvY2FsZS9lbl9VUycpO1xuXG4gIG1vY2tlci5leHRlbmQoJ2Zha2VyJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmYWtlckxvY2FsZTtcbiAgfSk7XG5cbiAgLy8gQWRkIHRoZSBjdXN0b20gZm9ybWF0IGdlbmVyYXRvcnNcbiAgXy5lYWNoKGZvcm1hdEdlbmVyYXRvcnMsIGZ1bmN0aW9uIChnZW4sIG5hbWUpIHtcbiAgICBtb2NrZXIuZm9ybWF0KG5hbWUsIGdlbihtb2NrZXIpKTtcbiAgfSk7XG5cbiAgcmV0dXJuIG1vY2tlcjtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJGb3JtYXQgKG5hbWUsIHZhbGlkYXRvcikge1xuICBaU2NoZW1hLnJlZ2lzdGVyRm9ybWF0KG5hbWUsIHZhbGlkYXRvcik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUpTT05WYWxpZGF0b3IgKCkge1xuICB2YXIgdmFsaWRhdG9yID0gbmV3IFpTY2hlbWEoe1xuICAgIGJyZWFrT25GaXJzdEVycm9yOiBmYWxzZSxcbiAgICBpZ25vcmVVbmtub3duRm9ybWF0czogdHJ1ZSxcbiAgICByZXBvcnRQYXRoQXNBcnJheTogdHJ1ZVxuICB9KTtcblxuICAvLyBBZGQgdGhlIGN1c3RvbSB2YWxpZGF0b3JzXG4gIF8uZWFjaChmb3JtYXRWYWxpZGF0b3JzLCBmdW5jdGlvbiAoaGFuZGxlciwgbmFtZSkge1xuICAgIHJlZ2lzdGVyRm9ybWF0KG5hbWUsIGhhbmRsZXIpO1xuICB9KTtcblxuICByZXR1cm4gdmFsaWRhdG9yO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVFcnJvciAob2JqKSB7XG4gIC8vIFJlbW92ZSBzdXBlcmZsdW91cyBlcnJvciBkZXRhaWxzXG4gIGlmIChfLmlzVW5kZWZpbmVkKG9iai5zY2hlbWFJZCkpIHtcbiAgICBkZWxldGUgb2JqLnNjaGVtYUlkO1xuICB9XG5cbiAgaWYgKG9iai5pbm5lcikge1xuICAgIF8uZWFjaChvYmouaW5uZXIsIGZ1bmN0aW9uIChuT2JqKSB7XG4gICAgICBub3JtYWxpemVFcnJvcihuT2JqKTtcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEhlbHBlciBtZXRob2QgdG8gdGFrZSBhIFN3YWdnZXIgcGFyYW1ldGVyIGRlZmluaXRpb24gYW5kIGNvbXB1dGUgaXRzIHNjaGVtYS5cbiAqXG4gKiBGb3Igbm9uLWJvZHkgU3dhZ2dlciBwYXJhbWV0ZXJzLCB0aGUgZGVmaW5pdGlvbiBpdHNlbGYgaXMgbm90IHN1aXRhYmxlIGFzIGEgSlNPTiBTY2hlbWEgc28gd2UgbXVzdCBjb21wdXRlIGl0LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbURlZiAtIFRoZSBwYXJhbWV0ZXIgZGVmaW5pdGlvblxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSBjb21wdXRlZCBzY2hlbWFcbiAqL1xubW9kdWxlLmV4cG9ydHMuY29tcHV0ZVBhcmFtZXRlclNjaGVtYSA9IGZ1bmN0aW9uIChwYXJhbURlZikge1xuICB2YXIgc2NoZW1hO1xuXG4gIGlmIChfLmlzVW5kZWZpbmVkKHBhcmFtRGVmLnNjaGVtYSkpIHtcbiAgICBzY2hlbWEgPSB7fTtcblxuICAgIC8vIEJ1aWxkIHRoZSBzY2hlbWEgZnJvbSB0aGUgc2NoZW1hLWxpa2UgcGFyYW1ldGVyIHN0cnVjdHVyZVxuICAgIF8uZm9yRWFjaChwYXJhbWV0ZXJTY2hlbWFQcm9wZXJ0aWVzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgaWYgKCFfLmlzVW5kZWZpbmVkKHBhcmFtRGVmW25hbWVdKSkge1xuICAgICAgICBzY2hlbWFbbmFtZV0gPSBwYXJhbURlZltuYW1lXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBzY2hlbWEgPSBwYXJhbURlZi5zY2hlbWE7XG4gIH1cblxuICByZXR1cm4gc2NoZW1hO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHJhdyBKYXZhU2NyaXB0IHZhbHVlIHRvIGEgSlNPTiBTY2hlbWEgdmFsdWUgYmFzZWQgb24gaXRzIHNjaGVtYS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hIC0gVGhlIHNjaGVtYSBmb3IgdGhlIHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIFRoZSBjb252ZXJzaW9uIG9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jb2xsZWN0aW9uRm9ybWF0XSAtIFRoZSBjb2xsZWN0aW9uIGZvcm1hdFxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmVuY29kaW5nXSAtIFRoZSBlbmNvZGluZyBpZiB0aGUgcmF3IHZhbHVlIGlzIGEgYEJ1ZmZlcmBcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY29udmVydFxuICpcbiAqIEByZXR1cm5zIHsqfSBUaGUgY29udmVydGVkIHZhbHVlXG4gKlxuICogQHRocm93cyB7VHlwZUVycm9yfSBJRiB0aGUgYGNvbGxlY3Rpb25Gb3JtYXRgIG9yIGB0eXBlYCBpcyBpbnZhbGlkIGZvciB0aGUgYHNjaGVtYWAsIG9yIGlmIGNvbnZlcnNpb24gZmFpbHNcbiAqL1xudmFyIGNvbnZlcnRWYWx1ZSA9IG1vZHVsZS5leHBvcnRzLmNvbnZlcnRWYWx1ZSA9IGZ1bmN0aW9uIChzY2hlbWEsIG9wdGlvbnMsIHZhbHVlKSB7XG4gIHZhciBvcmlnaW5hbFZhbHVlID0gdmFsdWU7IC8vIFVzZWQgaW4gZXJyb3IgcmVwb3J0aW5nIGZvciBpbnZhbGlkIHZhbHVlc1xuICB2YXIgdHlwZSA9IF8uaXNQbGFpbk9iamVjdChzY2hlbWEpID8gc2NoZW1hLnR5cGUgOiB1bmRlZmluZWQ7XG4gIHZhciBwVmFsdWUgPSB2YWx1ZTtcbiAgdmFyIHBUeXBlID0gdHlwZW9mIHBWYWx1ZTtcbiAgdmFyIGVycjtcbiAgdmFyIGlzRGF0ZTtcbiAgdmFyIGlzRGF0ZVRpbWU7XG5cbiAgLy8gSWYgdGhlcmUgaXMgYW4gZXhwbGljaXQgdHlwZSBwcm92aWRlZCwgbWFrZSBzdXJlIGl0J3Mgb25lIG9mIHRoZSBzdXBwb3J0ZWQgb25lc1xuICBpZiAoXy5oYXMoc2NoZW1hLCAndHlwZScpICYmIHR5cGVzLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBcXCd0eXBlXFwnIHZhbHVlOiAnICsgdHlwZSk7XG4gIH1cblxuICAvLyBTaW5jZSBKU09OIFNjaGVtYSBhbGxvd3MgeW91IHRvIG5vdCBzcGVjaWZ5IGEgdHlwZSBhbmQgaXQgaXMgdHJlYXRlZCBhcyBhIHdpbGRjYXJkIG9mIHNvcnRzLCB3ZSBzaG91bGQgbm90IGRvIGFueVxuICAvLyBjb2VyY2lvbiBmb3IgdGhlc2UgdHlwZXMgb2YgdmFsdWVzLlxuICBpZiAoXy5pc1VuZGVmaW5lZCh0eXBlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8vIElmIHRoZXJlIGlzIG5vIHZhbHVlLCBkbyBub3QgY29udmVydCBpdFxuICBpZiAoXy5pc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvLyBDb252ZXJ0IEJ1ZmZlciB2YWx1ZSB0byBTdHJpbmdcbiAgLy8gKFdlIHVzZSB0aGlzIHR5cGUgb2YgY2hlY2sgdG8gaWRlbnRpZnkgQnVmZmVyIG9iamVjdHMuICBUaGUgYnJvd3NlciBkb2VzIG5vdCBoYXZlIGEgQnVmZmVyIHR5cGUgYW5kIHRvIGF2b2lkIGhhdmluZ1xuICAvLyAgaW1wb3J0IHRoZSBicm93c2VyaWZ5IGJ1ZmZlciBtb2R1bGUsIHdlIGp1c3QgZG8gYSBzaW1wbGUgY2hlY2suICBUaGlzIGlzIGJyaXR0bGUgYnV0IHNob3VsZCB3b3JrLilcbiAgaWYgKF8uaXNGdW5jdGlvbih2YWx1ZS5yZWFkVUludDgpKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZyhvcHRpb25zLmVuY29kaW5nKTtcbiAgICBwVmFsdWUgPSB2YWx1ZTtcbiAgICBwVHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgfVxuXG4gIC8vIElmIHRoZSB2YWx1ZSBpcyBlbXB0eSBhbmQgZW1wdHkgaXMgYWxsb3dlZCwgdXNlIGl0XG4gIGlmIChzY2hlbWEuYWxsb3dFbXB0eVZhbHVlICYmIHZhbHVlID09PSAnJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8vIEF0dGVtcHQgdG8gcGFyc2UgdGhlIHN0cmluZyBhcyBKU09OIGlmIHRoZSB0eXBlIGlzIGFycmF5IG9yIG9iamVjdFxuICBpZiAoWydhcnJheScsICdvYmplY3QnXS5pbmRleE9mKHR5cGUpID4gLTEgJiYgXy5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICBpZiAoKHR5cGUgPT09ICdhcnJheScgJiYgdmFsdWUuaW5kZXhPZignWycpID09PSAwKSB8fCAodHlwZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUuaW5kZXhPZigneycpID09PSAwKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsdWUgPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBOb3RoaW5nIHRvIGRvIGhlcmUsIGp1c3QgZmFsbCB0aHJvdWdoXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gIGNhc2UgJ2FycmF5JzpcbiAgICBpZiAoXy5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uRm9ybWF0cy5pbmRleE9mKG9wdGlvbnMuY29sbGVjdGlvbkZvcm1hdCkgPT09IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgXFwnY29sbGVjdGlvbkZvcm1hdFxcJyB2YWx1ZTogJyArIG9wdGlvbnMuY29sbGVjdGlvbkZvcm1hdCk7XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAob3B0aW9ucy5jb2xsZWN0aW9uRm9ybWF0KSB7XG4gICAgICBjYXNlICdjc3YnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHZhbHVlID0gdmFsdWUuc3BsaXQoJywnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtdWx0aSc6XG4gICAgICAgIHZhbHVlID0gW3ZhbHVlXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdwaXBlcyc6XG4gICAgICAgIHZhbHVlID0gdmFsdWUuc3BsaXQoJ3wnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzc3YnOlxuICAgICAgICB2YWx1ZSA9IHZhbHVlLnNwbGl0KCcgJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndHN2JzpcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zcGxpdCgnXFx0Jyk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICAgIC8vIG5vIGRlZmF1bHRcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoXy5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSBfLm1hcCh2YWx1ZSwgZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBjb252ZXJ0VmFsdWUoXy5pc0FycmF5KHNjaGVtYS5pdGVtcykgPyBzY2hlbWEuaXRlbXNbaW5kZXhdIDogc2NoZW1hLml0ZW1zLCBvcHRpb25zLCBpdGVtKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGJyZWFrO1xuICBjYXNlICdib29sZWFuJzpcbiAgICBpZiAoIV8uaXNCb29sZWFuKHZhbHVlKSkge1xuICAgICAgaWYgKHZhbHVlID09PSAndHJ1ZScpIHtcbiAgICAgICAgdmFsdWUgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ2ZhbHNlJykge1xuICAgICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyID0gbmV3IFR5cGVFcnJvcignTm90IGEgdmFsaWQgYm9vbGVhbjogJyArIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBicmVhaztcbiAgY2FzZSAnaW50ZWdlcic6XG4gICAgaWYgKCFfLmlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgaWYgKF8uaXNTdHJpbmcodmFsdWUpICYmIF8udHJpbSh2YWx1ZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhbHVlID0gTmFOO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cbiAgICAgIGlmIChfLmlzTmFOKHZhbHVlKSkge1xuICAgICAgICBlcnIgPSBuZXcgVHlwZUVycm9yKCdOb3QgYSB2YWxpZCBpbnRlZ2VyOiAnICsgb3JpZ2luYWxWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYnJlYWs7XG4gIGNhc2UgJ251bWJlcic6XG4gICAgaWYgKCFfLmlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgaWYgKF8uaXNTdHJpbmcodmFsdWUpICYmIF8udHJpbSh2YWx1ZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhbHVlID0gTmFOO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cbiAgICAgIGlmIChfLmlzTmFOKHZhbHVlKSkge1xuICAgICAgICBlcnIgPSBuZXcgVHlwZUVycm9yKCdOb3QgYSB2YWxpZCBudW1iZXI6ICcgKyBvcmlnaW5hbFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3N0cmluZyc6XG4gICAgaWYgKFsnZGF0ZScsICdkYXRlLXRpbWUnXS5pbmRleE9mKHNjaGVtYS5mb3JtYXQpID4gLTEpIHtcbiAgICAgIGlmIChfLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICBpc0RhdGUgPSBzY2hlbWEuZm9ybWF0ID09PSAnZGF0ZScgJiYgZGF0ZVJlZ0V4cC50ZXN0KHZhbHVlKTtcbiAgICAgICAgaXNEYXRlVGltZSA9IHNjaGVtYS5mb3JtYXQgPT09ICdkYXRlLXRpbWUnICYmIGRhdGVUaW1lUmVnRXhwLnRlc3QodmFsdWUpO1xuXG4gICAgICAgIGlmICghaXNEYXRlICYmICFpc0RhdGVUaW1lKSB7XG4gICAgICAgICAgZXJyID0gbmV3IFR5cGVFcnJvcignTm90IGEgdmFsaWQgJyArIHNjaGVtYS5mb3JtYXQgKyAnIHN0cmluZzogJyArIG9yaWdpbmFsVmFsdWUpO1xuICAgICAgICAgIGVyci5jb2RlID0gJ0lOVkFMSURfRk9STUFUJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIV8uaXNEYXRlKHZhbHVlKSB8fCB2YWx1ZS50b1N0cmluZygpID09PSAnSW52YWxpZCBEYXRlJykge1xuICAgICAgICBlcnIgPSBuZXcgVHlwZUVycm9yKCdOb3QgYSB2YWxpZCAnICsgc2NoZW1hLmZvcm1hdCArICcgc3RyaW5nOiAnICsgb3JpZ2luYWxWYWx1ZSk7XG5cbiAgICAgICAgZXJyLmNvZGUgPSAnSU5WQUxJRF9GT1JNQVQnO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIV8uaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICBlcnIgPSBuZXcgVHlwZUVycm9yKCdOb3QgYSB2YWxpZCBzdHJpbmc6ICcgKyB2YWx1ZSk7XG4gICAgfVxuXG4gICAgYnJlYWs7XG5cbiAgICAvLyBubyBkZWZhdWx0XG4gIH1cblxuICBpZiAoIV8uaXNVbmRlZmluZWQoZXJyKSkge1xuICAgIC8vIENvbnZlcnQgdGhlIGVycm9yIHRvIGJlIG1vcmUgbGlrZSBhIEpTT04gU2NoZW1hIHZhbGlkYXRpb24gZXJyb3JcbiAgICBpZiAoXy5pc1VuZGVmaW5lZChlcnIuY29kZSkpIHtcbiAgICAgIGVyci5jb2RlID0gJ0lOVkFMSURfVFlQRSc7XG4gICAgICBlcnIubWVzc2FnZSA9ICdFeHBlY3RlZCB0eXBlICcgKyB0eXBlICsgJyBidXQgZm91bmQgdHlwZSAnICsgcFR5cGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVyci5tZXNzYWdlID0gJ09iamVjdCBkaWRuXFwndCBwYXNzIHZhbGlkYXRpb24gZm9yIGZvcm1hdCAnICsgc2NoZW1hLmZvcm1hdCArICc6ICcgKyBwVmFsdWU7XG4gICAgfVxuXG4gICAgLy8gRm9ybWF0IGFuZCB0eXBlIGVycm9ycyByZXNlbWJsZSBKU09OIFNjaGVtYSB2YWxpZGF0aW9uIGVycm9yc1xuICAgIGVyci5mYWlsZWRWYWxpZGF0aW9uID0gdHJ1ZTtcbiAgICBlcnIucGF0aCA9IFtdO1xuXG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwcm92aWRlZCBjb250ZW50IHR5cGUgb3IgYGFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbWAgaWYgb25lIGlzIG5vdCBwcm92aWRlZC5cbiAqXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1Byb3RvY29scy9yZmMyNjE2L3JmYzI2MTYtc2VjNy5odG1sI3NlYzcuMi4xXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGhlYWRlcnMgLSBUaGUgaGVhZGVycyB0byBzZWFyY2hcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29udGVudCB0eXBlXG4gKi9cbm1vZHVsZS5leHBvcnRzLmdldENvbnRlbnRUeXBlID0gZnVuY3Rpb24gKGhlYWRlcnMpIHtcbiAgcmV0dXJuIGdldEhlYWRlclZhbHVlKGhlYWRlcnMsICdjb250ZW50LXR5cGUnKSB8fCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJztcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaGVhZGVyIHZhbHVlIHJlZ2FyZGxlc3Mgb2YgdGhlIGNhc2Ugb2YgdGhlIHByb3ZpZGVkL3JlcXVlc3RlZCBoZWFkZXIgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gaGVhZGVycyAtIFRoZSBoZWFkZXJzIHRvIHNlYXJjaFxuICogQHBhcmFtIHtzdHJpbmd9IGhlYWRlck5hbWUgLSBUaGUgaGVhZGVyIG5hbWVcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgaGVhZGVyIHZhbHVlIG9yIGB1bmRlZmluZWRgIGlmIGl0IGlzIG5vdCBmb3VuZFxuICovXG52YXIgZ2V0SGVhZGVyVmFsdWUgPSBtb2R1bGUuZXhwb3J0cy5nZXRIZWFkZXJWYWx1ZSA9IGZ1bmN0aW9uIChoZWFkZXJzLCBoZWFkZXJOYW1lKSB7XG4gIC8vIERlZmF1bHQgdG8gYW4gZW1wdHkgb2JqZWN0XG4gIGhlYWRlcnMgPSBoZWFkZXJzIHx8IHt9O1xuXG4gIHZhciBsY0hlYWRlck5hbWUgPSBoZWFkZXJOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIHZhciByZWFsSGVhZGVyTmFtZSA9IF8uZmluZChPYmplY3Qua2V5cyhoZWFkZXJzKSwgZnVuY3Rpb24gKGhlYWRlcikge1xuICAgIHJldHVybiBoZWFkZXIudG9Mb3dlckNhc2UoKSA9PT0gbGNIZWFkZXJOYW1lO1xuICB9KTtcblxuICByZXR1cm4gaGVhZGVyc1tyZWFsSGVhZGVyTmFtZV07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGpzb24tc2NoZW1hLWZha2VyIG1vY2tlci5cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUganNvbi1zY2hlbWEtZmFrZXIgbW9ja2VyIHRvIHVzZVxuICovXG5tb2R1bGUuZXhwb3J0cy5nZXRKU09OU2NoZW1hTW9ja2VyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbW9ja2VyO1xuXG4gIGlmICghanNvbk1vY2tlcikge1xuICAgIG1vY2tlciA9IHJlcXVpcmUoJ2pzb24tc2NoZW1hLWZha2VyL2xpYicpO1xuICAgIGpzb25Nb2NrZXIgPSBjcmVhdGVKU09OTW9ja2VyKG1vY2tlcik7XG4gIH1cbiAgcmV0dXJuIGpzb25Nb2NrZXI7XG59O1xuLyoqXG4gKiBSZXR1cm5zIGEgei1zY2hlbWEgdmFsaWRhdG9yLlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSB6LXNjaGVtYSB2YWxpZGF0b3IgdG8gdXNlXG4gKi9cbm1vZHVsZS5leHBvcnRzLmdldEpTT05TY2hlbWFWYWxpZGF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBqc29uU2NoZW1hVmFsaWRhdG9yO1xufTtcblxubW9kdWxlLmV4cG9ydHMucGFyYW1ldGVyTG9jYXRpb25zID0gWydib2R5JywgJ2Zvcm1EYXRhJywgJ2hlYWRlcicsICdwYXRoJywgJ3F1ZXJ5J107XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgY3VzdG9tIGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBmb3JtYXRcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHZhbGlkYXRvciAtIFRoZSBmb3JtYXQgdmFsaWRhdG9yICooU2VlIFtaU2NoZW1hIEN1c3RvbSBGb3JtYXRdKGh0dHBzOi8vZ2l0aHViLmNvbS96YWdnaW5vL3otc2NoZW1hI3JlZ2lzdGVyLWEtY3VzdG9tLWZvcm1hdCkpKlxuICovXG5tb2R1bGUuZXhwb3J0cy5yZWdpc3RlckZvcm1hdCA9IHJlZ2lzdGVyRm9ybWF0O1xuXG4vKipcbiAqIFJlcGxhY2VzIHRoZSBjaXJjdWxhciByZWZlcmVuY2VzIGluIHRoZSBwcm92aWRlZCBvYmplY3Qgd2l0aCBhbiBlbXB0eSBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9iaiAtIFRoZSBKYXZhU2NyaXB0IG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cy5yZW1vdmVDaXJjdWxhcnMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHdhbGsob2JqLCBmdW5jdGlvbiAobm9kZSwgcGF0aCwgYW5jZXN0b3JzKSB7XG4gICAgLy8gUmVwbGFjZSBjaXJjdWxhcnMgd2l0aCB7fVxuICAgIGlmIChhbmNlc3RvcnMuaW5kZXhPZihub2RlKSA+IC0xKSB7XG4gICAgICBfLnNldChvYmosIHBhdGgsIHt9KTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGUgcHJvdmlkZWQgdmFsdWUgYWdhaW5zdCB0aGUgSlNPTiBTY2hlbWEgYnkgbmFtZSBvciB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gdmFsaWRhdG9yIC0gVGhlIEpTT04gU2NoZW1hIHZhbGlkYXRvciBjcmVhdGVkIHZpYSB7QGxpbmsgI2NyZWF0ZUpTT05WYWxpZGF0b3J9XG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hIC0gVGhlIEpTT04gU2NoZW1hXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHZhbGlkYXRlXG4gKlxuICogQHJldHVybnMge29iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIGVycm9ycyBhbmQgd2FybmluZ3Mgb2YgdGhlIHZhbGlkYXRpb25cbiAqL1xubW9kdWxlLmV4cG9ydHMudmFsaWRhdGVBZ2FpbnN0U2NoZW1hID0gZnVuY3Rpb24gKHZhbGlkYXRvciwgc2NoZW1hLCB2YWx1ZSkge1xuICBzY2hlbWEgPSBfLmNsb25lRGVlcChzY2hlbWEpOyAvLyBDbG9uZSB0aGUgc2NoZW1hIGFzIHotc2NoZW1hIGFsdGVycyB0aGUgcHJvdmlkZWQgZG9jdW1lbnRcblxuICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgZXJyb3JzOiBbXSxcbiAgICB3YXJuaW5nczogW11cbiAgfTtcblxuICBpZiAoIXZhbGlkYXRvci52YWxpZGF0ZSh2YWx1ZSwgc2NoZW1hKSkge1xuICAgIHJlc3BvbnNlLmVycm9ycyA9IF8ubWFwKHZhbGlkYXRvci5nZXRMYXN0RXJyb3JzKCksIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIG5vcm1hbGl6ZUVycm9yKGVycik7XG5cbiAgICAgIHJldHVybiBlcnI7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcmVzcG9uc2U7XG59O1xuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGUgY29udGVudCB0eXBlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50VHlwZSAtIFRoZSBDb250ZW50LVR5cGUgdmFsdWUgb2YgdGhlIHJlcXVlc3QvcmVzcG9uc2VcbiAqIEBwYXJhbSB7c3RyaW5nW119IHN1cHBvcnRlZFR5cGVzIC0gVGhlIHN1cHBvcnRlZCAoZGVjbGFyZWQpIENvbnRlbnQtVHlwZSB2YWx1ZXMgZm9yIHRoZSByZXF1ZXN0L3Jlc3BvbnNlXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzdWx0cyAtIFRoZSByZXN1bHRzIG9iamVjdCB0byB1cGRhdGUgaW4gdGhlIGV2ZW50IG9mIGFuIGludmFsaWQgY29udGVudCB0eXBlXG4gKi9cbm1vZHVsZS5leHBvcnRzLnZhbGlkYXRlQ29udGVudFR5cGUgPSBmdW5jdGlvbiAoY29udGVudFR5cGUsIHN1cHBvcnRlZFR5cGVzLCByZXN1bHRzKSB7XG4gIHZhciByYXdDb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlO1xuXG4gIGlmICghXy5pc1VuZGVmaW5lZChjb250ZW50VHlwZSkpIHtcbiAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9Qcm90b2NvbHMvcmZjMjYxNi9yZmMyNjE2LXNlYzE0Lmh0bWwjc2VjMTQuMTdcbiAgICBjb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLnNwbGl0KCc7JylbMF07IC8vIFN0cmlwIHRoZSBwYXJhbWV0ZXIocykgZnJvbSB0aGUgY29udGVudCB0eXBlXG4gIH1cblxuICAvLyBDaGVjayBmb3IgZXhhY3QgbWF0Y2ggb3IgbWltZS10eXBlIG9ubHkgbWF0Y2hcbiAgaWYgKF8uaW5kZXhPZihzdXBwb3J0ZWRUeXBlcywgcmF3Q29udGVudFR5cGUpID09PSAtMSAmJiBfLmluZGV4T2Yoc3VwcG9ydGVkVHlwZXMsIGNvbnRlbnRUeXBlKSA9PT0gLTEpIHtcbiAgICByZXN1bHRzLmVycm9ycy5wdXNoKHtcbiAgICAgIGNvZGU6ICdJTlZBTElEX0NPTlRFTlRfVFlQRScsXG4gICAgICBtZXNzYWdlOiAnSW52YWxpZCBDb250ZW50LVR5cGUgKCcgKyBjb250ZW50VHlwZSArICcpLiAgVGhlc2UgYXJlIHN1cHBvcnRlZDogJyArXG4gICAgICAgIHN1cHBvcnRlZFR5cGVzLmpvaW4oJywgJyksXG4gICAgICBwYXRoOiBbXVxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIFdhbGsgYW4gb2JqZWN0IGFuZCBpbnZva2UgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIGZvciBlYWNoIG5vZGUuXG4gKlxuICogQHBhcmFtIHsqfSBvYmogLSBUaGUgb2JqZWN0IHRvIHdhbGtcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtmbl0gLSBUaGUgZnVuY3Rpb24gdG8gaW52b2tlXG4gKi9cbnZhciB3YWxrID0gbW9kdWxlLmV4cG9ydHMud2FsayA9IGZ1bmN0aW9uIChvYmosIGZuKSB7XG4gIHZhciBjYWxsRm4gPSBfLmlzRnVuY3Rpb24oZm4pO1xuXG4gIGZ1bmN0aW9uIGRvV2FsayAoYW5jZXN0b3JzLCBub2RlLCBwYXRoKSB7XG4gICAgaWYgKGNhbGxGbikge1xuICAgICAgZm4obm9kZSwgcGF0aCwgYW5jZXN0b3JzKTtcbiAgICB9XG5cbiAgICAvLyBXZSBkbyBub3QgcHJvY2VzcyBjaXJjdWxhciBvYmplY3RzIGFnYWluXG4gICAgaWYgKGFuY2VzdG9ycy5pbmRleE9mKG5vZGUpID09PSAtMSkge1xuICAgICAgYW5jZXN0b3JzLnB1c2gobm9kZSk7XG5cbiAgICAgIGlmIChfLmlzQXJyYXkobm9kZSkgfHwgXy5pc1BsYWluT2JqZWN0KG5vZGUpKSB7XG4gICAgICAgIF8uZWFjaChub2RlLCBmdW5jdGlvbiAobWVtYmVyLCBpbmRleE9yS2V5KSB7XG4gICAgICAgICAgZG9XYWxrKGFuY2VzdG9ycywgbWVtYmVyLCBwYXRoLmNvbmNhdChpbmRleE9yS2V5LnRvU3RyaW5nKCkpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYW5jZXN0b3JzLnBvcCgpO1xuICB9XG5cbiAgZG9XYWxrKFtdLCBvYmosIFtdKTtcbn0iLCIvKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1IEFwaWdlZSBDb3Jwb3JhdGlvblxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgXyA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydfJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydfJ10gOiBudWxsKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3N3YXk6YXBpJyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMnKTtcbnZhciBwYXJzZVVybCA9IHJlcXVpcmUoJ3VybCcpLnBhcnNlO1xudmFyIFBhdGggPSByZXF1aXJlKCcuL3BhdGgnKTtcbnZhciB2YWxpZGF0b3JzID0gcmVxdWlyZSgnLi4vdmFsaWRhdGlvbi92YWxpZGF0b3JzJyk7XG5cbi8qKlxuICogVGhlIFN3YWdnZXIgQVBJIG9iamVjdC5cbiAqXG4gKiAqKk5vdGU6KiogRG8gbm90IHVzZSBkaXJlY3RseS5cbiAqXG4gKiAqKkV4dHJhIFByb3BlcnRpZXM6KiogT3RoZXIgdGhhbiB0aGUgZG9jdW1lbnRlZCBwcm9wZXJ0aWVzLCB0aGlzIG9iamVjdCBhbHNvIGV4cG9zZXMgYWxsIHByb3BlcnRpZXMgb2YgdGhlIGRlZmluaXRpb25cbiAqICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGRlZmluaXRpb24gLSBUaGUgb3JpZ2luYWwgU3dhZ2dlciBkZWZpbml0aW9uXG4gKiBAcGFyYW0ge29iamVjdH0gZGVmaW5pdGlvblJlbW90ZXNSZXNvbHZlZCAtIFRoZSBTd2FnZ2VyIGRlZmluaXRpb24gd2l0aCBhbGwgb2YgaXRzIHJlbW90ZSByZWZlcmVuY2VzIHJlc29sdmVkXG4gKiBAcGFyYW0ge29iamVjdH0gZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQgLSBUaGUgU3dhZ2dlciBkZWZpbml0aW9uIHdpdGggYWxsIG9mIGl0cyByZWZlcmVuY2VzIHJlc29sdmVkXG4gKiBAcGFyYW0ge29iamVjdH0gcmVmZXJlbmNlcyAtIFRoZSBsb2NhdGlvbiBhbmQgcmVzb2x1dGlvbiBvZiB0aGUgcmVzb2x2ZWQgcmVmZXJlbmNlcyBpbiB0aGUgU3dhZ2dlciBkZWZpbml0aW9uXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIHBhc3NlZCB0byBzd2FnZ2VyQXBpLmNyZWF0ZVxuICpcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBjdXN0b21Gb3JtYXRzIC0gVGhlIGtleS92YWx1ZSBwYWlyIG9mIGN1c3RvbSBmb3JtYXRzICooVGhlIGtleXMgYXJlIHRoZSBmb3JtYXQgbmFtZSBhbmQgdGhlIHZhbHVlc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgYXN5bmMgZnVuY3Rpb25zLiAgU2VlIFtaU2NoZW1hIEN1c3RvbSBGb3JtYXRzXShodHRwczovL2dpdGh1Yi5jb20vemFnZ2luby96LXNjaGVtYSNyZWdpc3Rlci1hLWN1c3RvbS1mb3JtYXQpKSpcbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOlN3YXl+VmFsaWRhdG9yQ2FsbGJhY2tbXX0gY3VzdG9tVmFsaWRhdG9ycyAtIFRoZSBhcnJheSBvZiBjdXN0b20gdmFsaWRhdG9yc1xuICogQHByb3BlcnR5IHtvYmplY3R9IGRlZmluaXRpb24gLSBUaGUgb3JpZ2luYWwgU3dhZ2dlciBkZWZpbml0aW9uXG4gKiBAcHJvcGVydHkge29iamVjdH0gZGVmaW5pdGlvblJlbW90ZXNSZXNvbHZlZCAtIFRoZSBTd2FnZ2VyIGRlZmluaXRpb24gd2l0aCBvbmx5IGl0cyByZW1vdGUgcmVmZXJlbmNlcyByZXNvbHZlZCAqKFRoaXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVhbnMgYWxsIHJlZmVyZW5jZXMgdG8gZXh0ZXJuYWwvcmVtb3RlIGRvY3VtZW50cyBhcmUgcmVwbGFjZWQgd2l0aFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdHMgZGVyZWZlcmVuY2VkIHZhbHVlIGJ1dCBhbGwgbG9jYWwgcmVmZXJlbmNlcyBhcmUgbGVmdCB1bnJlc29sdmVkLikqXG4gKiBAcHJvcGVydHkge29iamVjdH0gZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQgLSBUaGUgU3dhZ2dlciBkZWZpbml0aW9uIHdpdGggYWxsIG9mIGl0cyByZXNvbHZhYmxlIHJlZmVyZW5jZXMgcmVzb2x2ZWRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICooVGhpcyBtZWFucyB0aGF0IGFsbCByZXNvbHZhYmxlIHJlZmVyZW5jZXMgYXJlIHJlcGxhY2VkIHdpdGggdGhlaXJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcmVmZXJlbmNlZCB2YWx1ZS4pKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGRvY3VtZW50YXRpb25VcmwgLSBUaGUgVVJMIHRvIHRoZSBTd2FnZ2VyIGRvY3VtZW50YXRpb25cbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOlN3YXl+UGF0aFtdfSBwYXRoT2JqZWN0cyAtIFRoZSB1bmlxdWUgYFBhdGhgIG9iamVjdHNcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgcGFzc2VkIHRvIHRoZSBjb25zdHJ1Y3RvclxuICogQHByb3BlcnR5IHtvYmplY3R9IHJlZmVyZW5jZXMgLSBUaGUgcmVmZXJlbmNlIG1ldGFkYXRhICooU2VlIFtKc29uUmVmc35SZXNvbHZlZFJlZkRldGFpbHNdKGh0dHBzOi8vZ2l0aHViLmNvbS93aGl0bG9ja2pjL2pzb24tcmVmcy9ibG9iL21hc3Rlci9kb2NzL0FQSS5tZCNtb2R1bGVfSnNvblJlZnMuLlJlc29sdmVkUmVmRGV0YWlscykpKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHZlcnNpb24gLSBUaGUgU3dhZ2dlciBBUEkgdmVyc2lvblxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTd2FnZ2VyQXBpIChkZWZpbml0aW9uLCBkZWZpbml0aW9uUmVtb3Rlc1Jlc29sdmVkLCBkZWZpbml0aW9uRnVsbHlSZXNvbHZlZCwgcmVmZXJlbmNlcywgb3B0aW9ucykge1xuICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgZGVidWcoJ0NyZWF0aW5nIFN3YWdnZXJBcGkgZnJvbSAlcycsIF8uaXNTdHJpbmcob3B0aW9ucy5kZWZpbml0aW9uKSA/IG9wdGlvbnMuZGVmaW5pdGlvbiA6ICd0aGUgcHJvdmlkZWQgZG9jdW1lbnQnKTtcblxuICAvLyBBc3NpZ24gdGhpcyBzbyBvdGhlciBvYmplY3QgY2FuIHVzZSBpdFxuICB0aGlzLl9kZWJ1ZyA9IGRlYnVnO1xuXG4gIC8vIEFzc2lnbiBsb2NhbCBwcm9wZXJ0aWVzXG4gIHRoaXMuY3VzdG9tRm9ybWF0cyA9IHt9O1xuICB0aGlzLmN1c3RvbVZhbGlkYXRvcnMgPSBbXTtcbiAgdGhpcy5kZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcbiAgdGhpcy5kZWZpbml0aW9uRnVsbHlSZXNvbHZlZCA9IGRlZmluaXRpb25GdWxseVJlc29sdmVkO1xuICB0aGlzLmRlZmluaXRpb25SZW1vdGVzUmVzb2x2ZWQgPSBkZWZpbml0aW9uUmVtb3Rlc1Jlc29sdmVkO1xuICB0aGlzLmRvY3VtZW50YXRpb25VcmwgPSAnaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItc3BlYy9ibG9iL21hc3Rlci92ZXJzaW9ucy8yLjAubWQnO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLnJlZmVyZW5jZXMgPSByZWZlcmVuY2VzO1xuICB0aGlzLnZlcnNpb24gPSAnMi4wJztcblxuICAvLyBBc3NpZ24gbG9jYWwgcHJvcGVydGllcyBmcm9tIHRoZSBTd2FnZ2VyIGRlZmluaXRpb24gcHJvcGVydGllc1xuICBfLmFzc2lnbih0aGlzLCBkZWZpbml0aW9uKTtcblxuICAvLyBSZWd1c3RlciBjdXN0b20gZm9ybWF0c1xuICBfLmVhY2gob3B0aW9ucy5jdXN0b21Gb3JtYXRzLCBfLmJpbmQoU3dhZ2dlckFwaS5wcm90b3R5cGUucmVnaXN0ZXJGb3JtYXQsIHRoaXMpKTtcblxuICAvLyBSZWdpc3RlciBjdXN0b20gdmFsaWRhdG9yc1xuICBfLmVhY2gob3B0aW9ucy5jdXN0b21WYWxpZGF0b3JzLCBfLmJpbmQoU3dhZ2dlckFwaS5wcm90b3R5cGUucmVnaXN0ZXJWYWxpZGF0b3IsIHRoaXMpKTtcblxuICBkZWJ1ZygnICBQYXRoczonKTtcblxuICAvLyBDcmVhdGUgdGhlIFBhdGggb2JqZWN0c1xuICB0aGlzLnBhdGhPYmplY3RzID0gXy5tYXAoZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQucGF0aHMsIGZ1bmN0aW9uIChwYXRoRGVmLCBwYXRoKSB7XG4gICAgcmV0dXJuIG5ldyBQYXRoKHRoYXQsXG4gICAgICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgICAgIF8uZ2V0KGRlZmluaXRpb25SZW1vdGVzUmVzb2x2ZWQsIFsncGF0aHMnLCBwYXRoXSksXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEZWYsXG4gICAgICAgICAgICAgICAgICAgIFsncGF0aHMnLCBwYXRoXSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9wZXJhdGlvbiBmb3IgdGhlIGdpdmVuIHBhdGggYW5kIG9wZXJhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogQmVsb3cgaXMgdGhlIGxpc3Qgb2YgcHJvcGVydGllcyB1c2VkIHdoZW4gYHJlcU9yUGF0aGAgaXMgYW4gYGh0dHAuQ2xpZW50UmVxdWVzdGAgKihvciBlcXVpdmFsZW50KSo6XG4gKlxuICogICAqIGBtZXRob2RgXG4gKiAgICogYG9yaWdpbmFsVXJsYFxuICogICAqIGB1cmxgXG4gKlxuICogKihTZWU6IHtAbGluayBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX2NsYXNzX2h0dHBfY2xpZW50cmVxdWVzdH0pKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gaWRPclBhdGhPclJlcSAtIFRoZSBTd2FnZ2VyIG9wZWFydGlvbiBpZCwgcGF0aCBzdHJpbmcgb3IgdGhlIGh0dHAgY2xpZW50IHJlcXVlc3QgKihvclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXF1aXZhbGVudCkqXG4gKiBAcGFyYW0ge3N0cmluZ30gW21ldGhvZF0gLSBUaGUgU3dhZ2dlciBvcGVyYXRpb24gbWV0aG9kIF8obm90IHVzZWQgd2hlbiBwcm92aWRpbmcgYW4gb3BlcmF0aW9uIGlkKV9cbiAqXG4gKiBAcmV0dXJucyB7bW9kdWxlOlN3YXl+T3BlcmF0aW9ufSBUaGUgYE9wZXJhdGlvbmAgZm9yIHRoZSBwcm92aWRlZCBvcGVyYXRpb24gaWQsIG9yIHBhdGggYW5kIG1ldGhvZCBvciBgdW5kZWZpbmVkYCBpZlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlcmUgaXMgbm8gb3BlcmF0aW9uIGZvciB0aGF0IG9wZXJhdGlvbiBpZCwgb3IgcGF0aCBhbmQgbWV0aG9kIGNvbWJpbmF0aW9uXG4gKi9cblN3YWdnZXJBcGkucHJvdG90eXBlLmdldE9wZXJhdGlvbiA9IGZ1bmN0aW9uIChpZE9yUGF0aE9yUmVxLCBtZXRob2QpIHtcbiAgdmFyIHBhdGhPYmplY3Q7XG4gIHZhciBvcGVyYXRpb247XG5cbiAgaWYgKF8uaXNPYmplY3QoaWRPclBhdGhPclJlcSkpIHtcbiAgICBtZXRob2QgPSBpZE9yUGF0aE9yUmVxLm1ldGhvZDtcbiAgfVxuXG4gIGlmICghXy5pc1VuZGVmaW5lZChtZXRob2QpKSB7XG4gICAgcGF0aE9iamVjdCA9IHRoaXMuZ2V0UGF0aChpZE9yUGF0aE9yUmVxKTtcblxuICAgIGlmICghXy5pc1VuZGVmaW5lZChwYXRoT2JqZWN0KSkge1xuICAgICAgb3BlcmF0aW9uID0gcGF0aE9iamVjdC5nZXRPcGVyYXRpb24obWV0aG9kKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb3BlcmF0aW9uID0gXy5maW5kKHRoaXMuZ2V0UGF0aHMoKSwgZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmdldE9wZXJhdGlvbihpZE9yUGF0aE9yUmVxKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvcGVyYXRpb247XG59O1xuXG4vKipcbiAqIFJldHVybnMgYWxsIG9wZXJhdGlvbnMgZm9yIHRoZSBwcm92aWRlZCBwYXRoIG9yIGFsbCBvcGVyYXRpb25zIGluIHRoZSBBUEkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IFtwYXRoXSAtIFRoZSBTd2FnZ2VyIHBhdGhcbiAqXG4gKiBAcmV0dXJucyB7bW9kdWxlOlN3YXl+T3BlcmF0aW9uW119IEFsbCBgT3BlcmF0aW9uYCBvYmplY3RzIGZvciB0aGUgcHJvdmlkZWQgcGF0aCBvciBhbGwgQVBJIG9wZXJhdGlvbnNcbiAqL1xuU3dhZ2dlckFwaS5wcm90b3R5cGUuZ2V0T3BlcmF0aW9ucyA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gIHZhciBvcGVyYXRpb25zID0gW107XG4gIHZhciBwYXRoT2JqZWN0O1xuXG4gIGlmIChfLmlzVW5kZWZpbmVkKHBhdGgpKSB7XG4gICAgXy5lYWNoKHRoaXMucGF0aE9iamVjdHMsIGZ1bmN0aW9uIChwT2JqZWN0KSB7XG4gICAgICBvcGVyYXRpb25zLnB1c2guYXBwbHkob3BlcmF0aW9ucywgcE9iamVjdC5nZXRPcGVyYXRpb25zKCkpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHBhdGhPYmplY3QgPSB0aGlzLmdldFBhdGgocGF0aCk7XG5cbiAgICBpZiAoIV8uaXNVbmRlZmluZWQocGF0aE9iamVjdCkpIHtcbiAgICAgIG9wZXJhdGlvbnMgPSBwYXRoT2JqZWN0LmdldE9wZXJhdGlvbnMoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3BlcmF0aW9ucztcbn07XG5cbi8qKlxuICogUmV0dXJucyBhbGwgb3BlcmF0aW9ucyBmb3IgdGhlIHByb3ZpZGVkIHRhZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3RhZ10gLSBUaGUgU3dhZ2dlciB0YWdcbiAqXG4gKiBAcmV0dXJucyB7bW9kdWxlOlN3YXl+T3BlcmF0aW9uW119IEFsbCBgT3BlcmF0aW9uYCBvYmplY3RzIGZvciB0aGUgcHJvdmlkZWQgdGFnXG4gKi9cblN3YWdnZXJBcGkucHJvdG90eXBlLmdldE9wZXJhdGlvbnNCeVRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgcmV0dXJuIF8ucmVkdWNlKHRoaXMucGF0aE9iamVjdHMsIGZ1bmN0aW9uIChvcGVyYXRpb25zLCBwYXRoT2JqZWN0KSB7XG4gICAgb3BlcmF0aW9ucy5wdXNoLmFwcGx5KG9wZXJhdGlvbnMsIHBhdGhPYmplY3QuZ2V0T3BlcmF0aW9uc0J5VGFnKHRhZykpO1xuXG4gICAgcmV0dXJuIG9wZXJhdGlvbnM7XG4gIH0sIFtdKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGF0aCBvYmplY3QgZm9yIHRoZSBnaXZlbiBwYXRoIG9yIHJlcXVlc3QuXG4gKlxuICogKipOb3RlOioqIEJlbG93IGlzIHRoZSBsaXN0IG9mIHByb3BlcnRpZXMgdXNlZCB3aGVuIGByZXFPclBhdGhgIGlzIGFuIGBodHRwLkNsaWVudFJlcXVlc3RgICoob3IgZXF1aXZhbGVudCkqOlxuICpcbiAqICAgKiBgb3JpZ2luYWxVcmxgXG4gKiAgICogYHVybGBcbiAqXG4gKiAqKFNlZToge0BsaW5rIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfY2xhc3NfaHR0cF9jbGllbnRyZXF1ZXN0fSkqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBwYXRoT3JSZXEgLSBUaGUgU3dhZ2dlciBwYXRoIHN0cmluZyBvciB0aGUgaHR0cCBjbGllbnQgcmVxdWVzdCAqKG9yIGVxdWl2YWxlbnQpKlxuICpcbiAqIEByZXR1cm5zIHttb2R1bGU6U3dheX5QYXRofSBUaGUgY29ycmVzcG9uZGluZyBgUGF0aGAgb2JqZWN0IGZvciB0aGUgcmVxdWVzdGVkIHBhdGggb3IgcmVxdWVzdFxuICovXG5Td2FnZ2VyQXBpLnByb3RvdHlwZS5nZXRQYXRoID0gZnVuY3Rpb24gKHBhdGhPclJlcSkge1xuICB2YXIgbGFzdEluZGV4ID0gLTE7XG4gIHZhciBuZXh0SW5kZXggPSAtMTtcbiAgdmFyIG1hdGNoZXM7XG4gIHZhciB1cmw7XG5cbiAgaWYgKF8uaXNPYmplY3QocGF0aE9yUmVxKSkge1xuICAgIHVybCA9IHBhcnNlVXJsKHBhdGhPclJlcS5vcmlnaW5hbFVybCB8fCBwYXRoT3JSZXEudXJsKS5wYXRobmFtZTtcblxuICAgIC8vIEZpbmQgYWxsIG1hdGNoaW5nIHBhdGhzXG4gICAgbWF0Y2hlcyA9IF8ucmVkdWNlKHRoaXMucGF0aE9iamVjdHMsIGZ1bmN0aW9uIChuZXdNYXRjaGVzLCBwYXRoT2JqZWN0LCBpbmRleCkge1xuICAgICAgdmFyIGlzTWF0Y2ggPSBfLmlzQXJyYXkocGF0aE9iamVjdC5yZWdleHAuZXhlYyh1cmwpKTtcblxuICAgICAgaWYgKGlzTWF0Y2gpIHtcbiAgICAgICAgbmV3TWF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgc2VnbWVudHM6IHBhdGhPYmplY3QucGF0aC5zcGxpdCgnLycpXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdNYXRjaGVzO1xuICAgIH0sIFtdKTtcblxuICAgIC8vIFRPRE86IExvZyBhbGwgbWF0Y2hlc1xuXG4gICAgd2hpbGUgKG1hdGNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgbWF0Y2hlcyA9IF8ucmVkdWNlKG1hdGNoZXMsIGZ1bmN0aW9uIChuZXdNYXRjaGVzLCBtYXRjaCkge1xuICAgICAgICB2YXIgbmV3SW5kZXggPSBfLmZpbmRJbmRleChtYXRjaC5zZWdtZW50cywgZnVuY3Rpb24gKHNlZ21lbnQpIHtcbiAgICAgICAgICByZXR1cm4gXy5zdGFydHNXaXRoKHNlZ21lbnQsICd7JykgJiYgXy5lbmRzV2l0aChzZWdtZW50LCAnfScpO1xuICAgICAgICB9LCBsYXN0SW5kZXggKyAxKTtcblxuICAgICAgICAvLyBDb21wbGV0ZSBzdGF0aWMgbWF0Y2ggc28gdXNlIHNvbWUgdmFsdWUgdGhhdCBjYW4ndCBiZSBleGNlZWRlZFxuICAgICAgICBpZiAobmV3SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgbmV3SW5kZXggPSBJbmZpbml0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXdJbmRleCA+IG5leHRJbmRleCkge1xuICAgICAgICAgIG5leHRJbmRleCA9IG5ld0luZGV4O1xuICAgICAgICAgIG5ld01hdGNoZXMgPSBbbWF0Y2hdO1xuICAgICAgICB9IGVsc2UgaWYgKG5ld0luZGV4ID09PSBuZXh0SW5kZXgpIHtcbiAgICAgICAgICBuZXdNYXRjaGVzLnB1c2gobWF0Y2gpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ld01hdGNoZXM7XG4gICAgICB9LCBbXSk7XG5cbiAgICAgIC8vIEF0IHRoaXMgcG9pbnQgd2UgaGF2ZSB0cmllZCB0byBmaWx0ZXIgdGhlIG1hdGNoZXMgYnV0IHRoZXJlIGFyZSBtdWx0aXBsZSBtYXRjaGVzIHRoYXQgYXJlIGlkZW50aWNhbCBhbmQgY2Fubm90XG4gICAgICAvLyBiZSBmaWx0ZXJlZCBmdXJ0aGVyLiAgVGhlIG9ubHkgY2hvaWNlIGlzIHRvIGNob29zZSB0aGUgZmlyc3QgbWF0Y2guXG4gICAgICBpZiAobGFzdEluZGV4ID09PSBuZXh0SW5kZXgpIHtcbiAgICAgICAgbWF0Y2hlcy5zcGxpY2UoMSk7XG4gICAgICB9XG5cbiAgICAgIGxhc3RJbmRleCA9IG5leHRJbmRleDtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBMb2cgbWF0Y2hcblxuICAgIHJldHVybiBtYXRjaGVzLmxlbmd0aCA+IDAgPyB0aGlzLnBhdGhPYmplY3RzW21hdGNoZXNbMF0uaW5kZXhdIDogdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBfLmZpbmQodGhpcy5wYXRoT2JqZWN0cywgZnVuY3Rpb24gKHBhdGhPYmplY3QpIHtcbiAgICAgIHJldHVybiBwYXRoT3JSZXEgPT09IHBhdGhPYmplY3QucGF0aDtcbiAgICB9KTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFsbCBwYXRoIG9iamVjdHMgZm9yIHRoZSBTd2FnZ2VyIEFQSS5cbiAqXG4gKiBAcmV0dXJucyB7bW9kdWxlOlN3YXl+UGF0aFtdfSBUaGUgYFBhdGhgIG9iamVjdHNcbiAqL1xuU3dhZ2dlckFwaS5wcm90b3R5cGUuZ2V0UGF0aHMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnBhdGhPYmplY3RzO1xufTtcblxuLyoqXG4gKiBSZWdpc3RlcnMgYSBjdXN0b20gZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGZvcm1hdFxuICogQHBhcmFtIHtmdW5jdGlvbn0gdmFsaWRhdG9yIC0gVGhlIGZvcm1hdCB2YWxpZGF0b3IgKihTZWUgW1pTY2hlbWEgQ3VzdG9tIEZvcm1hdF0oaHR0cHM6Ly9naXRodWIuY29tL3phZ2dpbm8vei1zY2hlbWEjcmVnaXN0ZXItYS1jdXN0b20tZm9ybWF0KSkqXG4gKi9cblN3YWdnZXJBcGkucHJvdG90eXBlLnJlZ2lzdGVyRm9ybWF0ID0gZnVuY3Rpb24gKG5hbWUsIHZhbGlkYXRvcikge1xuICBpZiAoXy5pc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ25hbWUgaXMgcmVxdWlyZWQnKTtcbiAgfSBlbHNlIGlmICghXy5pc1N0cmluZyhuYW1lKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ25hbWUgbXVzdCBiZSBhIHN0cmluZycpO1xuICB9IGVsc2UgaWYgKF8uaXNVbmRlZmluZWQodmFsaWRhdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbGlkYXRvciBpcyByZXF1aXJlZCcpO1xuICB9IGVsc2UgaWYgKCFfLmlzRnVuY3Rpb24odmFsaWRhdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbGlkYXRvciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIHRoaXMuY3VzdG9tRm9ybWF0c1tuYW1lXSA9IHZhbGlkYXRvcjtcblxuICBoZWxwZXJzLnJlZ2lzdGVyRm9ybWF0KG5hbWUsIHZhbGlkYXRvcik7XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgY3VzdG9tIHZhbGlkYXRvci5cbiAqXG4gKiBAcGFyYW0ge21vZHVsZTpTd2F5flZhbGlkYXRvckNhbGxiYWNrfSB2YWxpZGF0b3IgLSBUaGUgdmFsaWRhdG9yXG4gKlxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiB0aGUgdmFsaWRhdG9yIGlzIG5vdCBhIGZ1bmN0aW9uXG4gKi9cblN3YWdnZXJBcGkucHJvdG90eXBlLnJlZ2lzdGVyVmFsaWRhdG9yID0gZnVuY3Rpb24gKHZhbGlkYXRvcikge1xuICBpZiAoXy5pc1VuZGVmaW5lZCh2YWxpZGF0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsaWRhdG9yIGlzIHJlcXVpcmVkJyk7XG4gIH0gZWxzZSBpZiAoIV8uaXNGdW5jdGlvbih2YWxpZGF0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsaWRhdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgdGhpcy5jdXN0b21WYWxpZGF0b3JzLnB1c2godmFsaWRhdG9yKTtcbn07XG5cbi8qKlxuICogUGVyZm9ybXMgdmFsaWRhdGlvbiBvZiB0aGUgU3dhZ2dlciBBUEkgZG9jdW1lbnQocykuXG4gKlxuICogQHJldHVybnMge21vZHVsZTpTd2F5flZhbGlkYXRpb25SZXN1bHRzfSBUaGUgdmFsaWRhdGlvbiByZXN1bHRzXG4gKi9cblN3YWdnZXJBcGkucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcmVzdWx0cyA9IHtcbiAgICBlcnJvcnM6IFtdLFxuICAgIHdhcm5pbmdzOiBbXVxuICB9O1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gZG9WYWxpZGF0aW9uICh2YWxpZGF0b3IpIHtcbiAgICB2YXIgdlJlc3VsdHMgPSB2YWxpZGF0b3Ioc2VsZik7XG5cbiAgICBpZiAodlJlc3VsdHMuZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJlc3VsdHMuZXJyb3JzLnB1c2guYXBwbHkocmVzdWx0cy5lcnJvcnMsIHZSZXN1bHRzLmVycm9ycyk7XG4gICAgfVxuXG4gICAgaWYgKHZSZXN1bHRzLndhcm5pbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJlc3VsdHMud2FybmluZ3MucHVzaC5hcHBseShyZXN1bHRzLndhcm5pbmdzLCB2UmVzdWx0cy53YXJuaW5ncyk7XG4gICAgfVxuICB9XG5cbiAgLy8gVmFsaWRhdGUgdGhlIGRvY3VtZW50IHN0cnVjdHVyYWxseVxuICBkb1ZhbGlkYXRpb24odmFsaWRhdG9ycy5qc29uU2NoZW1hVmFsaWRhdG9yKTtcblxuICAvLyBQZXJmb3JtIHJlbWFpbmluZyB2YWxpZGF0aW9uIG9ubHkgaWYgdGhlIGRvY3VtZW50IGlzIHN0cnVjdHVyYWxseSB2YWxpZFxuICBpZiAocmVzdWx0cy5lcnJvcnMubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gUnVuIHBsdWdpbiB2YWxpZGF0b3JzXG4gICAgXy5lYWNoKHZhbGlkYXRvcnMuc2VtYW50aWNWYWxpZGF0b3JzLCBkb1ZhbGlkYXRpb24pO1xuXG4gICAgLy8gUnVuIGN1c3RvbSB2YWxpZGF0b3JzXG4gICAgXy5lYWNoKHRoaXMuY3VzdG9tVmFsaWRhdG9ycywgZG9WYWxpZGF0aW9uKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHRzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTd2FnZ2VyQXBpO1xuIiwiLypcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNSBBcGlnZWUgQ29ycG9yYXRpb25cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF8gPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snXyddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnXyddIDogbnVsbCk7XG52YXIgSnNvblJlZnMgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snSnNvblJlZnMnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ0pzb25SZWZzJ10gOiBudWxsKTtcbnZhciBQYXJhbWV0ZXIgPSByZXF1aXJlKCcuL3BhcmFtZXRlcicpO1xudmFyIFJlc3BvbnNlID0gcmVxdWlyZSgnLi9yZXNwb25zZScpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzJyk7XG5cbi8qKlxuICogVGhlIFN3YWdnZXIgT3BlcmF0aW9uIG9iamVjdC5cbiAqXG4gKiAqKk5vdGU6KiogRG8gbm90IHVzZSBkaXJlY3RseS5cbiAqXG4gKiAqKkV4dHJhIFByb3BlcnRpZXM6KiogT3RoZXIgdGhhbiB0aGUgZG9jdW1lbnRlZCBwcm9wZXJ0aWVzLCB0aGlzIG9iamVjdCBhbHNvIGV4cG9zZXMgYWxsIHByb3BlcnRpZXMgb2YgdGhlIGRlZmluaXRpb25cbiAqICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuXG4gKlxuICogQHBhcmFtIHttb2R1bGU6U3dheX5QYXRofSBwYXRoT2JqZWN0IC0gVGhlIFBhdGggb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kIC0gVGhlIG9wZXJhdGlvbiBtZXRob2RcbiAqIEBwYXJhbSB7b2JqZWN0fSBkZWZpbml0aW9uIC0gVGhlIG9wZXJhdGlvbiBkZWZpbml0aW9uICooVGhlIHJhdyBvcGVyYXRpb24gZGVmaW5pdGlvbiBfX2FmdGVyX18gcmVtb3RlIHJlZmVyZW5jZXMgd2VyZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlZCkqXG4gKiBAcGFyYW0ge29iamVjdH0gZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQgLSBUaGUgb3BlcmF0aW9uIGRlZmluaXRpb24gd2l0aCBhbGwgb2YgaXRzIHJlc29sdmFibGUgcmVmZXJlbmNlcyByZXNvbHZlZFxuICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aFRvRGVmaW5pdGlvbiAtIFRoZSBwYXRoIHNlZ21lbnRzIHRvIHRoZSBvcGVyYXRpb24gZGVmaW5pdGlvblxuICpcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBkZWZpbml0aW9uIC0gVGhlIG9wZXJhdGlvbiBkZWZpbml0aW9uICooVGhlIHJhdyBvcGVyYXRpb24gZGVmaW5pdGlvbiBfX2FmdGVyX18gcmVtb3RlIHJlZmVyZW5jZXMgd2VyZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlZCkqXG4gKiBAcHJvcGVydHkge29iamVjdH0gZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQgLSBUaGUgb3BlcmF0aW9uIGRlZmluaXRpb24gd2l0aCBhbGwgb2YgaXRzIHJlc29sdmFibGUgcmVmZXJlbmNlcyByZXNvbHZlZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IG1ldGhvZCAtIFRoZSBIVFRQIG1ldGhvZCBmb3IgdGhpcyBvcGVyYXRpb25cbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOlN3YXl+UGF0aH0gcGF0aE9iamVjdCAtIFRoZSBgUGF0aGAgb2JqZWN0XG4gKiBAcHJvcGVydHkge3N0cmluZ1tdfSBwYXRoVG9EZWZpbml0aW9uIC0gVGhlIHBhdGggc2VnbWVudHMgdG8gdGhlIG9wZXJhdGlvbiBkZWZpbml0aW9uXG4gKiBAcHJvcGVydHkge21vZHVsZTpTd2F5flBhcmFtZXRlcltdfSBwYXJhbWV0ZXJPYmplY3RzIC0gVGhlIGBQYXJhbWV0ZXJgIG9iamVjdHNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwdHIgLSBUaGUgSlNPTiBQb2ludGVyIHRvIHRoZSBvcGVyYXRpb25cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBzZWN1cml0eURlZmluaXRpb25zIC0gVGhlIHNlY3VyaXR5IGRlZmluaXRpb25zIHVzZWQgYnkgdGhpcyBvcGVyYXRpb25cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gT3BlcmF0aW9uIChwYXRoT2JqZWN0LCBtZXRob2QsIGRlZmluaXRpb24sIGRlZmluaXRpb25GdWxseVJlc29sdmVkLCBwYXRoVG9EZWZpbml0aW9uKSB7XG4gIHZhciBzZWVuUGFyYW1ldGVycyA9IFtdO1xuICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgLy8gQXNzaWduIGxvY2FsIHByb3BlcnRpZXNcbiAgdGhpcy5jb25zdW1lcyA9IGRlZmluaXRpb25GdWxseVJlc29sdmVkLmNvbnN1bWVzIHx8IHBhdGhPYmplY3QuYXBpLmNvbnN1bWVzIHx8IFtdO1xuICB0aGlzLmRlZmluaXRpb24gPSBfLmNsb25lRGVlcChkZWZpbml0aW9uKTsgLy8gQ2xvbmUgc28gd2UgZG8gbm90IGFsdGVyIHRoZSBvcmlnaW5hbFxuICB0aGlzLmRlZmluaXRpb25GdWxseVJlc29sdmVkID0gXy5jbG9uZURlZXAoZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQpOyAvLyBDbG9uZSBzbyB3ZSBkbyBub3QgYWx0ZXIgdGhlIG9yaWdpbmFsXG4gIHRoaXMubWV0aG9kID0gbWV0aG9kO1xuICB0aGlzLnBhcmFtZXRlck9iamVjdHMgPSBbXTsgLy8gQ29tcHV0ZWQgYmVsb3dcbiAgdGhpcy5wYXRoT2JqZWN0ID0gcGF0aE9iamVjdDtcbiAgdGhpcy5wYXRoVG9EZWZpbml0aW9uID0gcGF0aFRvRGVmaW5pdGlvbjtcbiAgdGhpcy5wcm9kdWNlcyA9IGRlZmluaXRpb25GdWxseVJlc29sdmVkLnByb2R1Y2VzIHx8IHBhdGhPYmplY3QuYXBpLnByb2R1Y2VzIHx8IFtdO1xuICB0aGlzLnB0ciA9IEpzb25SZWZzLnBhdGhUb1B0cihwYXRoVG9EZWZpbml0aW9uKTtcblxuICAvLyBBc3NpZ24gbG9jYWwgcHJvcGVydGllcyBmcm9tIHRoZSBTd2FnZ2VyIGRlZmluaXRpb24gcHJvcGVydGllc1xuICBfLmFzc2lnbih0aGlzLCBkZWZpbml0aW9uRnVsbHlSZXNvbHZlZCk7XG5cbiAgdGhpcy5fZGVidWcgPSB0aGlzLnBhdGhPYmplY3QuYXBpLl9kZWJ1ZztcblxuICAvLyBBZGQgdGhlIFBhcmFtZXRlciBvYmplY3RzIGZyb20gdGhlIFBhdGggb2JqZWN0IHRoYXQgd2VyZSBub3QgcmVkZWZpbmVkIGluIHRoZSBvcGVyYXRpb24gZGVmaW5pdGlvblxuICB0aGlzLnBhcmFtZXRlck9iamVjdHMgPSBfLm1hcChwYXRoT2JqZWN0LnBhcmFtZXRlck9iamVjdHMsIGZ1bmN0aW9uIChwYXJhbWV0ZXJPYmplY3QpIHtcbiAgICBzZWVuUGFyYW1ldGVycy5wdXNoKHBhcmFtZXRlck9iamVjdC5pbiArICc6JyArIHBhcmFtZXRlck9iamVjdC5uYW1lKTtcblxuICAgIHJldHVybiBwYXJhbWV0ZXJPYmplY3Q7XG4gIH0pO1xuXG4gIHRoaXMuX2RlYnVnKCcgICAgICAgICVzIGF0ICVzJywgdGhpcy5tZXRob2QudG9VcHBlckNhc2UoKSwgdGhpcy5wdHIpO1xuICB0aGlzLl9kZWJ1ZygnICAgICAgICAgIENvbnN1bWVzOicpO1xuXG4gIF8uZWFjaCh0aGlzLmNvbnN1bWVzLCBmdW5jdGlvbiAobWltZVR5cGUpIHtcbiAgICB0aGF0Ll9kZWJ1ZygnICAgICAgICAgICAgJXMnLCBtaW1lVHlwZSk7XG4gIH0pO1xuXG4gIHRoaXMuX2RlYnVnKCcgICAgICAgICAgUGFyYW1ldGVyczonKTtcblxuICAvLyBDcmVhdGUgUGFyYW1ldGVyIG9iamVjdHMgZnJvbSBwYXJhbWV0ZXJzIGRlZmluZWQgaW4gdGhlIG9wZXJhdGlvbiBkZWZpbml0aW9uXG4gIF8uZWFjaChkZWZpbml0aW9uRnVsbHlSZXNvbHZlZC5wYXJhbWV0ZXJzLCBmdW5jdGlvbiAocGFyYW1EZWYsIGluZGV4KSB7XG4gICAgdmFyIGtleSA9IHBhcmFtRGVmLmluICsgJzonICsgcGFyYW1EZWYubmFtZTtcbiAgICB2YXIgc2VlbkluZGV4ID0gc2VlblBhcmFtZXRlcnMuaW5kZXhPZihrZXkpO1xuICAgIHZhciBwUGF0aCA9IHBhdGhUb0RlZmluaXRpb24uY29uY2F0KFsncGFyYW1ldGVycycsIGluZGV4LnRvU3RyaW5nKCldKTtcbiAgICB2YXIgcGFyYW1ldGVyT2JqZWN0ID0gbmV3IFBhcmFtZXRlcih0aGF0LCBfLmdldChwYXRoT2JqZWN0LmFwaS5kZWZpbml0aW9uUmVtb3Rlc1Jlc29sdmVkLCBwUGF0aCksIHBhcmFtRGVmLCBwUGF0aCk7XG5cbiAgICBpZiAoc2VlbkluZGV4ID4gLTEpIHtcbiAgICAgIHRoYXQucGFyYW1ldGVyT2JqZWN0c1tzZWVuSW5kZXhdID0gcGFyYW1ldGVyT2JqZWN0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0LnBhcmFtZXRlck9iamVjdHMucHVzaChwYXJhbWV0ZXJPYmplY3QpO1xuXG4gICAgICBzZWVuUGFyYW1ldGVycy5wdXNoKGtleSk7XG4gICAgfVxuICB9KTtcblxuICB0aGlzLl9kZWJ1ZygnICAgICAgICAgIFByb2R1Y2VzOicpO1xuXG4gIF8uZWFjaCh0aGlzLnByb2R1Y2VzLCBmdW5jdGlvbiAobWltZVR5cGUpIHtcbiAgICB0aGF0Ll9kZWJ1ZygnICAgICAgICAgICAgJXMnLCBtaW1lVHlwZSk7XG4gIH0pO1xuXG4gIHRoaXMuX2RlYnVnKCcgICAgICAgICAgUmVzcG9uc2VzOicpO1xuXG4gIC8vIENyZWF0ZSByZXNwb25zZSBvYmplY3RzIGZyb20gcmVzcG9uc2VzIGRlZmluZWQgaW4gdGhlIG9wZXJhdGlvbiBkZWZpbml0aW9uXG4gIHRoaXMucmVzcG9uc2VPYmplY3RzID0gXy5tYXAodGhpcy5kZWZpbml0aW9uRnVsbHlSZXNvbHZlZC5yZXNwb25zZXMsIGZ1bmN0aW9uIChyZXNwb25zZURlZiwgY29kZSkge1xuICAgIHZhciByUGF0aCA9IHBhdGhUb0RlZmluaXRpb24uY29uY2F0KFsncmVzcG9uc2VzJywgY29kZV0pXG5cbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXy5nZXQodGhhdC5wYXRoT2JqZWN0LmFwaS5kZWZpbml0aW9uUmVtb3Rlc1Jlc29sdmVkLCByUGF0aCksXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZURlZixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJQYXRoKTtcbiAgfSk7XG5cbiAgdGhpcy5fZGVidWcoJyAgICAgICAgICBTZWN1cml0eTonKTtcblxuICAvLyBCcmluZyBpbiB0aGUgc2VjdXJpdHkgZGVmaW5pdGlvbnMgZm9yIGVhc2llciBhY2Nlc3NcblxuICAvLyBPdmVycmlkZSBnbG9iYWwgc2VjdXJpdHkgd2l0aCBsb2NhbGx5IGRlZmluZWRcbiAgdmFyIHNlY3VyaXR5ID0gdGhpcy5zZWN1cml0eSB8fCBwYXRoT2JqZWN0LmFwaS5kZWZpbml0aW9uRnVsbHlSZXNvbHZlZC5zZWN1cml0eTtcblxuICB0aGlzLnNlY3VyaXR5RGVmaW5pdGlvbnMgPSBfLnJlZHVjZShzZWN1cml0eSwgZnVuY3Rpb24gKGRlZnMsIHJlcXMpIHtcbiAgICBfLmVhY2gocmVxcywgZnVuY3Rpb24gKHJlcSwgbmFtZSkge1xuICAgICAgdmFyIGRlZiA9IHBhdGhPYmplY3QuYXBpLmRlZmluaXRpb25GdWxseVJlc29sdmVkLnNlY3VyaXR5RGVmaW5pdGlvbnMgP1xuICAgICAgICAgICAgcGF0aE9iamVjdC5hcGkuZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQuc2VjdXJpdHlEZWZpbml0aW9uc1tuYW1lXSA6XG4gICAgICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICghXy5pc1VuZGVmaW5lZChkZWYpKSB7XG4gICAgICAgIGRlZnNbbmFtZV0gPSBkZWY7XG4gICAgICB9XG5cbiAgICAgIHRoYXQuX2RlYnVnKCcgICAgICAgICAgICAlcyAodHlwZTogJXMpJywgbmFtZSwgXy5pc1VuZGVmaW5lZChkZWYpID8gJ21pc3NpbmcnOiBkZWYudHlwZSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGVmcztcbiAgfSwge30pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcmFtZXRlciB3aXRoIHRoZSBwcm92aWRlZCBuYW1lIGFuZCBsb2NhdGlvbiB3aGVuIHByb3ZpZGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHBhcmFtZXRlclxuICogQHBhcmFtIHtzdHJpbmd9IFtsb2NhdGlvbl0gLSBUaGUgbG9jYXRpb24gKihgaW5gKSogb2YgdGhlIHBhcmFtZXRlciAqKFVzZWQgZm9yIGRpc2FtYmlndWF0aW9uKSpcbiAqXG4gKiBAcmV0dXJucyB7bW9kdWxlOlN3YXl+UGFyYW1ldGVyfSBUaGUgYFBhcmFtZXRlcmAgbWF0Y2hpbmcgdGhlIGxvY2F0aW9uIGFuZCBuYW1lIGNvbWJpbmF0aW9uIG9yIGB1bmRlZmluZWRgIGlmIHRoZXJlIGlzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBubyBtYXRjaFxuICovXG5PcGVyYXRpb24ucHJvdG90eXBlLmdldFBhcmFtZXRlciA9IGZ1bmN0aW9uIChuYW1lLCBsb2NhdGlvbikge1xuICByZXR1cm4gXy5maW5kKHRoaXMucGFyYW1ldGVyT2JqZWN0cywgZnVuY3Rpb24gKHBhcmFtZXRlck9iamVjdCkge1xuICAgIHJldHVybiBwYXJhbWV0ZXJPYmplY3QubmFtZSA9PT0gbmFtZSAmJiAoXy5pc1VuZGVmaW5lZChsb2NhdGlvbikgPyB0cnVlIDogcGFyYW1ldGVyT2JqZWN0LmluID09PSBsb2NhdGlvbik7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFsbCBwYXJhbWV0ZXJzIGZvciB0aGUgb3BlcmF0aW9uLlxuICpcbiAqIEByZXR1cm5zIHttb2R1bGU6U3dheX5QYXJhbWV0ZXJbXX0gQWxsIGBQYXJhbWV0ZXJgIG9iamVjdHMgZm9yIHRoZSBvcGVyYXRpb25cbiAqL1xuT3BlcmF0aW9uLnByb3RvdHlwZS5nZXRQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5wYXJhbWV0ZXJPYmplY3RzO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSByZXNwb25zZSBmb3IgdGhlIHJlcXVlc3RlZCBzdGF0dXMgY29kZSBvciB0aGUgZGVmYXVsdCByZXNwb25zZSAqKGlmIGF2YWlsYWJsZSkqIGlmIG5vbmUgaXMgcHJvdmlkZWQuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBbc3RhdHVzQ29kZT0nZGVmYXVsdCddIC0gVGhlIHN0YXR1cyBjb2RlXG4gKlxuICogQHJldHVybnMge21vZHVsZTpTd2F5flJlc3BvbnNlfSBUaGUgYFJlc3BvbnNlYCBvciBgdW5kZWZpbmVkYCBpZiBvbmUgY2Fubm90IGJlIGZvdW5kXG4gKi9cbk9wZXJhdGlvbi5wcm90b3R5cGUuZ2V0UmVzcG9uc2UgPSBmdW5jdGlvbiAoc3RhdHVzQ29kZSkge1xuICBpZiAoXy5pc1VuZGVmaW5lZChzdGF0dXNDb2RlKSkge1xuICAgIHN0YXR1c0NvZGUgPSAnZGVmYXVsdCc7XG4gIH0gZWxzZSBpZiAoXy5pc051bWJlcihzdGF0dXNDb2RlKSkge1xuICAgIHN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlLnRvU3RyaW5nKCk7XG4gIH1cblxuICByZXR1cm4gXy5maW5kKHRoaXMuZ2V0UmVzcG9uc2VzKCksIGZ1bmN0aW9uIChyZXNwb25zZU9iamVjdCkge1xuICAgIHJldHVybiByZXNwb25zZU9iamVjdC5zdGF0dXNDb2RlID09PSBzdGF0dXNDb2RlO1xuICB9KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhbGwgcmVzcG9uc2VzIGZvciB0aGUgb3BlcmF0aW9uLlxuICpcbiAqIEByZXR1cm5zIHttb2R1bGU6U3dheX5SZXNwb25zZVtdfSBBbGwgYFJlc3BvbnNlYCBvYmplY3RzIGZvciB0aGUgb3BlcmF0aW9uXG4gKi9cbk9wZXJhdGlvbi5wcm90b3R5cGUuZ2V0UmVzcG9uc2VzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5yZXNwb25zZU9iamVjdHM7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGNvbXBvc2l0ZSBzZWN1cml0eSBkZWZpbml0aW9ucyBmb3IgdGhpcyBvcGVyYXRpb24uXG4gKlxuICogVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGlzIEFQSSBhbmQgYHRoaXMuc2VjdXJpdHlgIGlzIHRoYXQgYHRoaXMuc2VjdXJpdHlgIGlzIHRoZSByYXcgYHNlY3VyaXR5YCB2YWx1ZSBmb3IgdGhlXG4gKiBvcGVyYXRpb24gd2hlcmUgYXMgdGhpcyBBUEkgd2lsbCByZXR1cm4gdGhlIGdsb2JhbCBgc2VjdXJpdHlgIHZhbHVlIHdoZW4gYXZhaWxhYmxlIGFuZCB0aGlzIG9wZXJhdGlvbidzIHNlY3VyaXR5XG4gKiBpcyB1bmRlZmluZWQuXG4gKlxuICogQHJldHVybnMge29iamVjdFtdfSBUaGUgc2VjdXJpdHkgZm9yIHRoaXMgb3BlcmF0aW9uXG4gKi9cbk9wZXJhdGlvbi5wcm90b3R5cGUuZ2V0U2VjdXJpdHkgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmRlZmluaXRpb25GdWxseVJlc29sdmVkLnNlY3VyaXR5IHx8IHRoaXMucGF0aE9iamVjdC5hcGkuZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQuc2VjdXJpdHk7XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIHRoZSByZXF1ZXN0LlxuICpcbiAqICoqTm90ZToqKiBCZWxvdyBpcyB0aGUgbGlzdCBvZiBgcmVxYCBwcm9wZXJ0aWVzIHVzZWQgKihyZXEgc2hvdWxkIGJlIGFuIGBodHRwLkNsaWVudFJlcXVlc3RgIG9yIGVxdWl2YWxlbnQpKjpcbiAqXG4gKiAgICogYGJvZHlgOiBVc2VkIGZvciBgYm9keWAgYW5kIGBmb3JtRGF0YWAgcGFyYW1ldGVyc1xuICogICAqIGBmaWxlc2A6IFVzZWQgZm9yIGBmb3JtRGF0YWAgcGFyYW1ldGVycyB3aG9zZSBgdHlwZWAgaXMgYGZpbGVgXG4gKiAgICogYGhlYWRlcnNgOiBVc2VkIGZvciBgaGVhZGVyYCBwYXJhbWV0ZXJzIGFuZCBjb25zdW1lc1xuICogICAqIGBvcmlnaW5hbFVybGA6IHVzZWQgZm9yIGBwYXRoYCBwYXJhbWV0ZXJzXG4gKiAgICogYHF1ZXJ5YDogVXNlZCBmb3IgYHF1ZXJ5YCBwYXJhbWV0ZXJzXG4gKiAgICogYHVybGA6IHVzZWQgZm9yIGBwYXRoYCBwYXJhbWV0ZXJzXG4gKlxuICogRm9yIGBwYXRoYCBwYXJhbWV0ZXJzLCB3ZSB3aWxsIHVzZSB0aGUgb3BlcmF0aW9uJ3MgYHJlZ2V4cGAgcHJvcGVydHkgdG8gcGFyc2Ugb3V0IHBhdGggcGFyYW1ldGVycyB1c2luZyB0aGVcbiAqIGBvcmlnaW5hbFVybGAgb3IgYHVybGAgcHJvcGVydHkuXG4gKlxuICogKihTZWU6IHtAbGluayBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX2NsYXNzX2h0dHBfY2xpZW50cmVxdWVzdH0pKlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSByZXEgLSBUaGUgaHR0cCBjbGllbnQgcmVxdWVzdCAqKG9yIGVxdWl2YWxlbnQpKlxuICpcbiAqIEByZXR1cm5zIHttb2R1bGU6U3dheX5WYWxpZGF0aW9uUmVzdWx0c30gVGhlIHZhbGlkYXRpb24gcmVzdWx0c1xuICovXG5PcGVyYXRpb24ucHJvdG90eXBlLnZhbGlkYXRlUmVxdWVzdCA9IGZ1bmN0aW9uIChyZXEpIHtcbiAgdmFyIHJlc3VsdHMgPSB7XG4gICAgZXJyb3JzOiBbXSxcbiAgICB3YXJuaW5nczogW11cbiAgfTtcblxuICAvLyBWYWxpZGF0ZSB0aGUgQ29udGVudC1UeXBlIGlmIHRoZXJlIGlzIGEgc2V0IG9mIGV4cGVjdGVkIGNvbnN1bWVzXG4gIGlmICh0aGlzLmNvbnN1bWVzLmxlbmd0aCA+IDApIHtcbiAgICBoZWxwZXJzLnZhbGlkYXRlQ29udGVudFR5cGUoaGVscGVycy5nZXRDb250ZW50VHlwZShyZXEuaGVhZGVycyksIHRoaXMuY29uc3VtZXMsIHJlc3VsdHMpO1xuICB9XG5cbiAgLy8gVmFsaWRhdGUgdGhlIHBhcmFtZXRlcnNcbiAgXy5lYWNoKHRoaXMuZ2V0UGFyYW1ldGVycygpLCBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICB2YXIgcGFyYW1WYWx1ZSA9IHBhcmFtLmdldFZhbHVlKHJlcSk7XG4gICAgdmFyIHZFcnI7XG5cbiAgICBpZiAoIXBhcmFtVmFsdWUudmFsaWQpIHtcbiAgICAgIHZFcnIgPSB7XG4gICAgICAgIGNvZGU6ICdJTlZBTElEX1JFUVVFU1RfUEFSQU1FVEVSJyxcbiAgICAgICAgZXJyb3JzOiBwYXJhbVZhbHVlLmVycm9yLmVycm9ycyB8fCBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29kZTogcGFyYW1WYWx1ZS5lcnJvci5jb2RlLFxuICAgICAgICAgICAgbWVzc2FnZTogcGFyYW1WYWx1ZS5lcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgcGF0aDogcGFyYW1WYWx1ZS5lcnJvci5wYXRoXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBpbjogcGFyYW1WYWx1ZS5wYXJhbWV0ZXJPYmplY3QuaW4sXG4gICAgICAgIC8vIFJlcG9ydCB0aGUgYWN0dWFsIGVycm9yIGlmIHRoZXJlIGlzIG9ubHkgb25lIGVycm9yLiAgT3RoZXJ3aXNlLCByZXBvcnQgYSBKU09OIFNjaGVtYSB2YWxpZGF0aW9uIGVycm9yLlxuICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBwYXJhbWV0ZXIgKCcgKyBwYXJhbS5uYW1lICsgJyk6ICcgKyAoKHBhcmFtVmFsdWUuZXJyb3JzIHx8IFtdKS5sZW5ndGggPiAxID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdWYWx1ZSBmYWlsZWQgSlNPTiBTY2hlbWEgdmFsaWRhdGlvbicgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1WYWx1ZS5lcnJvci5tZXNzYWdlKSxcbiAgICAgICAgbmFtZTogcGFyYW1WYWx1ZS5wYXJhbWV0ZXJPYmplY3QubmFtZSxcbiAgICAgICAgcGF0aDogcGFyYW1WYWx1ZS5lcnJvci5wYXRoXG4gICAgICB9O1xuXG4gICAgICByZXN1bHRzLmVycm9ycy5wdXNoKHZFcnIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGUgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHttb2R1bGU6U3dheX5TZXJ2ZXJSZXNwb25zZVdyYXBwZXJ9IHJlcyAtIFRoZSByZXNwb25zZSBvciByZXNwb25zZSBsaWtlIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIHttb2R1bGU6U3dheX5WYWxpZGF0aW9uUmVzdWx0c30gVGhlIHZhbGlkYXRpb24gcmVzdWx0c1xuICovXG5PcGVyYXRpb24ucHJvdG90eXBlLnZhbGlkYXRlUmVzcG9uc2UgPSBmdW5jdGlvbiAocmVzKSB7XG4gIHZhciByZXN1bHRzID0ge1xuICAgIGVycm9yczogW10sXG4gICAgd2FybmluZ3M6IFtdXG4gIH07XG4gIHZhciByZWFsU3RhdHVzQ29kZSA9IHJlcyA/IHJlcy5zdGF0dXNDb2RlIDogJ2RlZmF1bHQnO1xuICB2YXIgcmVzcG9uc2UgPSB0aGlzLmdldFJlc3BvbnNlKHJlYWxTdGF0dXNDb2RlKTtcblxuICBpZiAoXy5pc1VuZGVmaW5lZChyZXNwb25zZSkpIHtcbiAgICAvLyBJZiB0aGVyZSBpcyBubyByZXNwb25zZSBmb3IgdGhlIHJlcXVlc3RlZCBzdGF0dXMsIHVzZSB0aGUgZGVmYXVsdCBpZiB0aGVyZSBpcyBvbmUgKFRoaXMgaXMgU3dhZ2dlcidzIGFwcHJvYWNoKVxuICAgIHJlc3BvbnNlID0gdGhpcy5nZXRSZXNwb25zZSgnZGVmYXVsdCcpO1xuXG4gICAgaWYgKF8uaXNVbmRlZmluZWQocmVzcG9uc2UpKSB7XG4gICAgICByZXN1bHRzLmVycm9ycy5wdXNoKHtcbiAgICAgICAgY29kZTogJ0lOVkFMSURfUkVTUE9OU0VfQ09ERScsXG4gICAgICAgIG1lc3NhZ2U6ICdUaGlzIG9wZXJhdGlvbiBkb2VzIG5vdCBoYXZlIGEgZGVmaW5lZCBcXCcnICsgKHJlYWxTdGF0dXNDb2RlID09PSAnZGVmYXVsdCcgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWxTdGF0dXNDb2RlIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFsU3RhdHVzQ29kZSArICdcXCcgb3IgXFwnZGVmYXVsdCcpICsgJ1xcJyByZXNwb25zZSBjb2RlJyxcbiAgICAgICAgcGF0aDogW11cbiAgICAgIH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXN1bHRzID0gcmVzcG9uc2UudmFsaWRhdGVSZXNwb25zZShyZXMpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9wZXJhdGlvbjtcbiIsIi8qXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgQXBpZ2VlIENvcnBvcmF0aW9uXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ18nXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ18nXSA6IG51bGwpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzJyk7XG52YXIgSnNvblJlZnMgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snSnNvblJlZnMnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ0pzb25SZWZzJ10gOiBudWxsKTtcblxuLyoqXG4gKiBPYmplY3QgcmVwcmVzZW50aW5nIGEgcGFyYW1ldGVyIHZhbHVlLlxuICpcbiAqICoqTm90ZToqKiBEbyBub3QgdXNlIGRpcmVjdGx5LlxuICpcbiAqIEBwYXJhbSB7bW9kdWxlOlN3YXl+UGFyYW1ldGVyfSBwYXJhbWV0ZXJPYmplY3QgLSBUaGUgYFBhcmFtZXRlcmAgb2JqZWN0XG4gKiBAcGFyYW0geyp9IHJhdyAtIFRoZSBvcmlnaW5hbC9yYXcgdmFsdWVcbiAqXG4gKiBAcHJvcGVydHkge0Vycm9yfSBlcnJvciAtIFRoZSBlcnJvcihzKSBlbmNvdW50ZXJlZCBkdXJpbmcgcHJvY2Vzc2luZy92YWxpZGF0aW5nIHRoZSBwYXJhbWV0ZXIgdmFsdWVcbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOlN3YXl+UGFyYW1ldGVyfSBwYXJhbWV0ZXJPYmplY3QgLSBUaGUgYFBhcmFtZXRlcmAgb2JqZWN0XG4gKiBAcHJvcGVydHkgeyp9IHJhdyAtIFRoZSBvcmlnaW5hbCBwYXJhbWV0ZXIgdmFsdWUgKihEb2VzIG5vdCB0YWtlIGRlZmF1bHQgdmFsdWVzIGludG8gYWNjb3VudCkqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHZhbGlkIC0gV2hldGhlciBvciBub3QgdGhpcyBwYXJhbWV0ZXIgaXMgdmFsaWQgYmFzZWQgb24gaXRzIEpTT04gU2NoZW1hXG4gKiBAcHJvcGVydHkgeyp9IHZhbHVlIC0gVGhlIHByb2Nlc3NlZCB2YWx1ZSAqKFRha2VzIGRlZmF1bHQgdmFsdWVzIGludG8gYWNjb3VudCBhbmQgZG9lcyB0eXBlIGNvZXJjaW9uIHdoZW4gbmVjZXNzYXJ5XG4gKiAgICAgICAgICAgICAgICAgICAgICAgYW5kIHBvc3NpYmxlKSouICBUaGlzIGNhbiB0aGUgb3JpZ2luYWwgdmFsdWUgaW4gdGhlIGV2ZW50IHRoYXQgcHJvY2Vzc2luZyB0aGUgdmFsdWUgaXNcbiAqICAgICAgICAgICAgICAgICAgICAgICBpbXBvc3NpYmxlICoobWlzc2luZyBzY2hlbWEgdHlwZSkqIG9yIGB1bmRlZmluZWRgIGlmIHByb2Nlc3NpbmcgdGhlIHZhbHVlIGZhaWxlZCAqKGludmFsaWRcbiAqICAgICAgICAgICAgICAgICAgICAgICB0eXBlcywgZXRjLikqLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBQYXJhbWV0ZXJWYWx1ZSAocGFyYW1ldGVyT2JqZWN0LCByYXcpIHtcbiAgdmFyIHBQYXRoID0gSnNvblJlZnMucGF0aEZyb21QdHIocGFyYW1ldGVyT2JqZWN0LnB0cik7XG4gIHZhciBwcm9jZXNzZWQgPSBmYWxzZTtcbiAgdmFyIHNjaGVtYSA9IHBhcmFtZXRlck9iamVjdC5zY2hlbWE7XG4gIHZhciBlcnJvcjtcbiAgdmFyIGlzVmFsaWQ7XG4gIHZhciBwcm9jZXNzZWRWYWx1ZTtcblxuICB0aGlzLnBhcmFtZXRlck9iamVjdCA9IHBhcmFtZXRlck9iamVjdDtcbiAgdGhpcy5yYXcgPSByYXc7XG5cbiAgLy8gVXNlIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBmb3IgJ3ZhbHVlJyB0byBhbGxvdyBmb3IgbGF6eSBwcm9jZXNzaW5nIG9mIHRoZSByYXcgdmFsdWVcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgIGVycm9yOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIEFsd2F5cyBjYWxsIHRoaXMudmFsaWQgdG8gZW5zdXJlIHdlIHZhbGlkYXRlIHRoZSB2YWx1ZSBwcmlvciB0byByZXR1cm5pbmcgYW55IHZhbHVlc1xuICAgICAgICBpZiAodGhpcy52YWxpZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZDoge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgIGVycm9yczogW10sXG4gICAgICAgICAgd2FybmluZ3M6IFtdXG4gICAgICAgIH07XG4gICAgICAgIHZhciBza2lwVmFsaWRhdGlvbiA9IGZhbHNlO1xuICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgIHZhciB2RXJyb3I7XG5cbiAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQoaXNWYWxpZCkpIHtcbiAgICAgICAgICBpc1ZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMudmFsdWU7XG5cbiAgICAgICAgICBpZiAoXy5pc1VuZGVmaW5lZChlcnJvcikpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIC8vIFZhbGlkYXRlIHJlcXVpcmVkbmVzc1xuICAgICAgICAgICAgICBpZiAocGFyYW1ldGVyT2JqZWN0LnJlcXVpcmVkID09PSB0cnVlICYmIF8uaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdkVycm9yID0gbmV3IEVycm9yKCdWYWx1ZSBpcyByZXF1aXJlZCBidXQgd2FzIG5vdCBwcm92aWRlZCcpO1xuXG4gICAgICAgICAgICAgICAgdkVycm9yLmNvZGUgPSAnUkVRVUlSRUQnO1xuXG4gICAgICAgICAgICAgICAgdGhyb3cgdkVycm9yO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gQ2FzZXMgd2UgZG8gbm90IHdhbnQgdG8gZG8gc2NoZW1hIHZhbGlkYXRpb246XG4gICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgIC8vICAgKiBUaGUgc2NoZW1hIGV4cGxpY2l0bHkgYWxsb3dzIGVtcHR5IHZhbHVlcyBhbmQgdGhlIHZhbHVlIGlzIGVtcHR5XG4gICAgICAgICAgICAgIC8vICAgKiBUaGUgc2NoZW1hIGFsbG93IG9wdGlvbmFsIHZhbHVlcyBhbmQgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAvLyAgICogVGhlIHNjaGVtYSBkZWZpbmVzIGEgZmlsZSBwYXJhbWV0ZXJcbiAgICAgICAgICAgICAgLy8gICAqIFRoZSBzY2hlbWEgaXMgZm9yIGEgc3RyaW5nIHR5cGUgd2l0aCBkYXRlL2RhdGUtdGltZSBmb3JtYXQgYW5kIHRoZSB2YWx1ZSBpcyBhIGRhdGVcbiAgICAgICAgICAgICAgLy8gICAqIFRoZSBzY2hlbWEgaXMgZm9yIGEgc3RyaW5nIHR5cGUgYW5kIHRoZSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICAgICAgICAgICAgICBpZiAoKF8uaXNVbmRlZmluZWQocGFyYW1ldGVyT2JqZWN0LnJlcXVpcmVkKSB8fCBwYXJhbWV0ZXJPYmplY3QucmVxdWlyZWQgPT09IGZhbHNlKSAmJlxuICAgICAgICAgICAgICAgICAgXy5pc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBza2lwVmFsaWRhdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2NoZW1hLmFsbG93RW1wdHlWYWx1ZSA9PT0gdHJ1ZSAmJiB2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBza2lwVmFsaWRhdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW1ldGVyT2JqZWN0LnR5cGUgPT09ICdmaWxlJykge1xuICAgICAgICAgICAgICAgIHNraXBWYWxpZGF0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChzY2hlbWEudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpZiAoWydkYXRlJywgJ2RhdGUtdGltZSddLmluZGV4T2Yoc2NoZW1hLmZvcm1hdCkgPiAtMSAmJiBfLmlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgIHNraXBWYWxpZGF0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNjaGVtYS50eXBlID09PSAnc3RyaW5nJyAmJiBfLmlzRnVuY3Rpb24odmFsdWUucmVhZFVJbnQ4KSkge1xuICAgICAgICAgICAgICAgICAgc2tpcFZhbGlkYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghc2tpcFZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgICAgICAvLyBWYWxpZGF0ZSBhZ2FpbnN0IEpTT04gU2NoZW1hXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaGVscGVycy52YWxpZGF0ZUFnYWluc3RTY2hlbWEoaGVscGVycy5nZXRKU09OU2NoZW1hVmFsaWRhdG9yKCksIHBhcmFtZXRlck9iamVjdC5zY2hlbWEsIHZhbHVlKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChyZXN1bHQuZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2RXJyb3IgPSBuZXcgRXJyb3IoJ1ZhbHVlIGZhaWxlZCBKU09OIFNjaGVtYSB2YWxpZGF0aW9uJyk7XG5cbiAgICAgICAgICAgICAgICB2RXJyb3IuY29kZSA9ICdTQ0hFTUFfVkFMSURBVElPTl9GQUlMRUQnO1xuICAgICAgICAgICAgICAgIHZFcnJvci5lcnJvcnMgPSByZXN1bHQuZXJyb3JzO1xuXG4gICAgICAgICAgICAgICAgdGhyb3cgdkVycm9yO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgZXJyLmZhaWxlZFZhbGlkYXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICBlcnIucGF0aCA9IHBQYXRoO1xuXG4gICAgICAgICAgICAgIGVycm9yID0gZXJyO1xuICAgICAgICAgICAgICBpc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaXNWYWxpZDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbHVlOiB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghcHJvY2Vzc2VkKSB7XG4gICAgICAgICAgaWYgKHNjaGVtYS50eXBlID09PSAnZmlsZScpIHtcbiAgICAgICAgICAgIHByb2Nlc3NlZFZhbHVlID0gcmF3O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBDb252ZXJ0L0NvZXJjZSB0aGUgcmF3IHZhbHVlIGZyb20gdGhlIHJlcXVlc3Qgb2JqZWN0XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBwcm9jZXNzZWRWYWx1ZSA9IGhlbHBlcnMuY29udmVydFZhbHVlKHNjaGVtYSwge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25Gb3JtYXQ6IHBhcmFtZXRlck9iamVjdC5jb2xsZWN0aW9uRm9ybWF0XG4gICAgICAgICAgICAgIH0sIHJhdyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgZXJyb3IgPSBlcnI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIHN0aWxsIG5vIHZhbHVlIGFuZCB0aGVyZSBhcmUgbm8gZXJyb3JzLCB1c2UgdGhlIGRlZmF1bHQgdmFsdWUgaWYgYXZhaWxhYmxlIChubyBjb2VyY2lvbilcbiAgICAgICAgICAgIGlmIChfLmlzVW5kZWZpbmVkKHByb2Nlc3NlZFZhbHVlKSAmJiBfLmlzVW5kZWZpbmVkKGVycm9yKSkge1xuICAgICAgICAgICAgICBpZiAoc2NoZW1hLnR5cGUgPT09ICdhcnJheScpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5pc0FycmF5KHNjaGVtYS5pdGVtcykpIHtcbiAgICAgICAgICAgICAgICAgIHByb2Nlc3NlZFZhbHVlID0gXy5yZWR1Y2Uoc2NoZW1hLml0ZW1zLCBmdW5jdGlvbiAoaXRlbXMsIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtLmRlZmF1bHQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtcztcbiAgICAgICAgICAgICAgICAgIH0sIFtdKTtcblxuICAgICAgICAgICAgICAgICAgLy8gSWYgbm9uZSBvZiB0aGUgaXRlbXMgaGF2ZSBhIGRlZmF1bHQgdmFsdWUgcmVzZXQgdGhlIHByb2Nlc3NlZCB2YWx1ZSB0byAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgaWYgKF8uZXZlcnkocHJvY2Vzc2VkVmFsdWUsIF8uaXNVbmRlZmluZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NlZFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQoc2NoZW1hLml0ZW1zKSAmJiAhXy5pc1VuZGVmaW5lZChzY2hlbWEuaXRlbXMuZGVmYXVsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc2VkVmFsdWUgPSBbc2NoZW1hLml0ZW1zLmRlZmF1bHRdO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIElmIHRoZSBwcm9jZXNzZWQgdmFsdWUgaXMgc3RpbGwgdW5kZWZpbmVkIGFuZCBpZiB0aGVyZSdzIGEgZ2xvYmFsIGRlZmF1bHQgc2V0XG4gICAgICAgICAgICAgIC8vIGZvciB0aGUgYXJyYXksIHdlIHVzZSBpdFxuICAgICAgICAgICAgICBpZiAoXy5pc1VuZGVmaW5lZChwcm9jZXNzZWRWYWx1ZSkgJiYgIV8uaXNVbmRlZmluZWQoc2NoZW1hLmRlZmF1bHQpKSB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc2VkVmFsdWUgPSBzY2hlbWEuZGVmYXVsdDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHByb2Nlc3NlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHJvY2Vzc2VkVmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQYXJhbWV0ZXJWYWx1ZTtcbiIsIi8qXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgQXBpZ2VlIENvcnBvcmF0aW9uXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ18nXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ18nXSA6IG51bGwpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzJyk7XG52YXIgSnNvblJlZnMgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snSnNvblJlZnMnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ0pzb25SZWZzJ10gOiBudWxsKTtcbnZhciBQYXJhbWV0ZXJWYWx1ZSA9IHJlcXVpcmUoJy4vcGFyYW1ldGVyLXZhbHVlJyk7XG52YXIgcGFyc2VVcmwgPSByZXF1aXJlKCd1cmwnKS5wYXJzZTtcblxuLyoqXG4gKiBUaGUgU3dhZ2dlciBQYXJhbWV0ZXIgb2JqZWN0LlxuICpcbiAqICoqTm90ZToqKiBEbyBub3QgdXNlIGRpcmVjdGx5LlxuICpcbiAqICoqRXh0cmEgUHJvcGVydGllczoqKiBPdGhlciB0aGFuIHRoZSBkb2N1bWVudGVkIHByb3BlcnRpZXMsIHRoaXMgb2JqZWN0IGFsc28gZXhwb3NlcyBhbGwgcHJvcGVydGllcyBvZiB0aGUgZGVmaW5pdGlvblxuICogb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7bW9kdWxlOlN3YXl+T3BlcmF0aW9ufG1vZHVsZTpTd2F5flBhdGh9IG9wT3JQYXRoT2JqZWN0IC0gVGhlIGBPcGVyYXRpb25gIG9yIGBQYXRoYCBvYmplY3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBkZWZpbml0aW9uIC0gVGhlIHBhcmFtZXRlciBkZWZpbml0aW9uICooVGhlIHJhdyBwYXJhbWV0ZXIgZGVmaW5pdGlvbiBfX2FmdGVyX18gcmVtb3RlIHJlZmVyZW5jZXMgd2VyZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlZCkqXG4gKiBAcGFyYW0ge29iamVjdH0gZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQgLSBUaGUgcGFyYW1ldGVyIGRlZmluaXRpb24gd2l0aCBhbGwgb2YgaXRzIHJlc29sdmFibGUgcmVmZXJlbmNlcyByZXNvbHZlZFxuICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aFRvRGVmaW5pdGlvbiAtIFRoZSBwYXRoIHNlZ21lbnRzIHRvIHRoZSBwYXJhbWV0ZXIgZGVmaW5pdGlvblxuICpcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBkZWZpbml0aW9uIC0gVGhlIHBhcmFtZXRlciBkZWZpbml0aW9uICooVGhlIHJhdyBwYXJhbWV0ZXIgZGVmaW5pdGlvbiBfX2FmdGVyX18gcmVtb3RlIHJlZmVyZW5jZXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VyZSByZXNvbHZlZCkqXG4gKiBAcHJvcGVydHkge29iamVjdH0gZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQgLSBUaGUgcGFyYW1ldGVyIGRlZmluaXRpb24gd2l0aCBhbGwgb2YgaXRzIHJlc29sdmFibGUgcmVmZXJlbmNlcyByZXNvbHZlZFxuICogQHByb3BlcnR5IHttb2R1bGU6U3dheX5PcGVyYXRpb259IG9wZXJhdGlvbk9iamVjdCAtIFRoZSBgT3BlcmF0aW9uYCBvYmplY3QgdGhlIHBhcmFtZXRlciBiZWxvbmdzIHRvICooQ2FuIGJlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHVuZGVmaW5lZGAgZm9yIHBhdGgtbGV2ZWwgcGFyYW1ldGVycykqXG4gKiBAcHJvcGVydHkge21vZHVsZTpTd2F5flBhdGh9IHBhdGhPYmplY3QgLSBUaGUgYFBhdGhgIG9iamVjdCB0aGUgcGFyYW1ldGVyIGJlbG9uZ3MgdG9cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nW119IHBhdGhUb0RlZmluaXRpb24gLSBUaGUgcGF0aCBzZWdtZW50cyB0byB0aGUgcGFyYW1ldGVyIGRlZmluaXRpb25cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBwdHIgLSBUaGUgSlNPTiBQb2ludGVyIHRvIHRoZSBwYXJhbWV0ZXIgZGVmaW5pdGlvblxuICogQHByb3BlcnR5IHtvYmplY3R9IHNjaGVtYSAtIFRoZSBKU09OIFNjaGVtYSBmb3IgdGhlIHBhcmFtZXRlciAqKEZvciBub24tYm9keSBwYXJhbWV0ZXJzLCB0aGlzIGlzIGEgY29tcHV0ZWQgdmFsdWUpKlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBQYXJhbWV0ZXIgKG9wT3JQYXRoT2JqZWN0LCBkZWZpbml0aW9uLCBkZWZpbml0aW9uRnVsbHlSZXNvbHZlZCwgcGF0aFRvRGVmaW5pdGlvbikge1xuICAvLyBBc3NpZ24gbG9jYWwgcHJvcGVydGllc1xuICB0aGlzLmRlZmluaXRpb24gPSBkZWZpbml0aW9uO1xuICB0aGlzLmRlZmluaXRpb25GdWxseVJlc29sdmVkID0gZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQ7XG4gIHRoaXMucGF0aFRvRGVmaW5pdGlvbiA9IHBhdGhUb0RlZmluaXRpb247XG4gIHRoaXMucHRyID0gSnNvblJlZnMucGF0aFRvUHRyKHBhdGhUb0RlZmluaXRpb24pO1xuXG4gIGlmIChfLmhhcyhvcE9yUGF0aE9iamVjdCwgJ2NvbnN1bWVzJykpIHtcbiAgICB0aGlzLm9wZXJhdGlvbk9iamVjdCA9IG9wT3JQYXRoT2JqZWN0O1xuICAgIHRoaXMucGF0aE9iamVjdCA9IG9wT3JQYXRoT2JqZWN0LnBhdGhPYmplY3Q7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5vcGVyYXRpb25PYmplY3QgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wYXRoT2JqZWN0ID0gb3BPclBhdGhPYmplY3Q7XG4gIH1cblxuICAvLyBBc3NpZ24gbG9jYWwgcHJvcGVydGllcyBmcm9tIHRoZSBTd2FnZ2VyIGRlZmluaXRpb24gcHJvcGVydGllc1xuICBfLmFzc2lnbih0aGlzLCBkZWZpbml0aW9uRnVsbHlSZXNvbHZlZCk7XG5cbiAgaWYgKF8uaXNVbmRlZmluZWQodGhpcy5zY2hlbWEpKSB7XG4gICAgdGhpcy5zY2hlbWEgPSBoZWxwZXJzLmNvbXB1dGVQYXJhbWV0ZXJTY2hlbWEoZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQpO1xuICB9XG5cbiAgdGhpcy5wYXRoT2JqZWN0LmFwaS5fZGVidWcoJyAgICAgICAgICAlcyVzIChpbjogJXMpIGF0ICVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5pc1VuZGVmaW5lZCh0aGlzLm9wZXJhdGlvbk9iamVjdCkgPyAnJyA6ICcgICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25GdWxseVJlc29sdmVkLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25GdWxseVJlc29sdmVkLmluLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnB0cik7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHNhbXBsZSB2YWx1ZSBmb3IgdGhlIHBhcmFtZXRlciBiYXNlZCBvbiBpdHMgc2NoZW1hO1xuICpcbiAqIEByZXR1cm5zIHsqfSBUaGUgc2FtcGxlIHZhbHVlXG4gKi9cblBhcmFtZXRlci5wcm90b3R5cGUuZ2V0U2FtcGxlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaGVscGVycy5nZXRKU09OU2NoZW1hTW9ja2VyKCkodGhpcy5zY2hlbWEpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwYXJhbWV0ZXIgdmFsdWUgZnJvbSB0aGUgcmVxdWVzdC5cbiAqXG4gKiAqKk5vdGU6KiogQmVsb3cgaXMgdGhlIGxpc3Qgb2YgYHJlcWAgcHJvcGVydGllcyB1c2VkICoocmVxIHNob3VsZCBiZSBhbiBgaHR0cC5DbGllbnRSZXF1ZXN0YCBvciBlcXVpdmFsZW50KSo6XG4gKlxuICogICAqIGBib2R5YDogVXNlZCBmb3IgYGJvZHlgIGFuZCBgZm9ybURhdGFgIHBhcmFtZXRlcnNcbiAqICAgKiBgZmlsZXNgOiBVc2VkIGZvciBgZm9ybURhdGFgIHBhcmFtZXRlcnMgd2hvc2UgYHR5cGVgIGlzIGBmaWxlYFxuICogICAqIGBoZWFkZXJzYDogVXNlZCBmb3IgYGhlYWRlcmAgcGFyYW1ldGVyc1xuICogICAqIGBvcmlnaW5hbFVybGA6IHVzZWQgZm9yIGBwYXRoYCBwYXJhbWV0ZXJzXG4gKiAgICogYHF1ZXJ5YDogVXNlZCBmb3IgYHF1ZXJ5YCBwYXJhbWV0ZXJzXG4gKiAgICogYHVybGA6IHVzZWQgZm9yIGBwYXRoYCBwYXJhbWV0ZXJzXG4gKlxuICogRm9yIGBwYXRoYCBwYXJhbWV0ZXJzLCB3ZSB3aWxsIHVzZSB0aGUgb3BlcmF0aW9uJ3MgYHJlZ2V4cGAgcHJvcGVydHkgdG8gcGFyc2Ugb3V0IHBhdGggcGFyYW1ldGVycyB1c2luZyB0aGVcbiAqIGBvcmlnaW5hbFVybGAgb3IgYHVybGAgcHJvcGVydHkuXG4gKlxuICogKihTZWU6IHtAbGluayBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX2NsYXNzX2h0dHBfY2xpZW50cmVxdWVzdH0pKlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSByZXEgLSBUaGUgaHR0cCBjbGllbnQgcmVxdWVzdCAqKG9yIGVxdWl2YWxlbnQpKlxuICpcbiAqIEByZXR1cm5zIHttb2R1bGU6U3dheX5QYXJhbWV0ZXJWYWx1ZX0gVGhlIHBhcmFtZXRlciB2YWx1ZSBvYmplY3RcbiAqXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGBpbmAgdmFsdWUgb2YgdGhlIHBhcmFtZXRlcidzIHNjaGVtYSBpcyBub3QgdmFsaWQgb3IgaWYgdGhlIGByZXFgIHByb3BlcnR5IHRvIHJldHJpZXZlIHRoZSBwYXJhbWV0ZXIgaXMgbWlzc2luZ1xuICovXG5QYXJhbWV0ZXIucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKHJlcSkge1xuICBpZiAoXy5pc1VuZGVmaW5lZChyZXEpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVxIGlzIHJlcXVpcmVkJyk7XG4gIH0gZWxzZSBpZiAoaGVscGVycy5wYXJhbWV0ZXJMb2NhdGlvbnMuaW5kZXhPZih0aGlzLmluKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgXFwnaW5cXCcgdmFsdWU6ICcgKyB0aGlzLmluKTtcbiAgfVxuXG4gIC8vIFdlIGRvIG5vdCBuZWVkIHRvIGV4cGxpY2l0bHkgY2hlY2sgdGhlIHR5cGUgb2YgcmVxXG5cbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIgdHlwZSA9IHRoaXMuc2NoZW1hLnR5cGU7XG4gIHZhciBwYXRoTWF0Y2g7XG4gIHZhciB2YWx1ZTtcblxuICBzd2l0Y2ggKHRoaXMuaW4pIHtcbiAgY2FzZSAnYm9keSc6XG4gICAgdmFsdWUgPSByZXEuYm9keTtcbiAgICBicmVhaztcbiAgY2FzZSAnZm9ybURhdGEnOlxuICAgIC8vIEZvciBmb3JtRGF0YSwgZWl0aGVyIHRoZSB2YWx1ZSBpcyBhIGZpbGUgb3IgYSBwcm9wZXJ0eSBvZiByZXEuYm9keS4gIHJlcS5ib2R5IGFzIGEgd2hvbGUgY2FuIG5ldmVyIGJlIHRoZVxuICAgIC8vIHZhbHVlIHNpbmNlIHRoZSBKU09OIFNjaGVtYSBmb3IgZm9ybURhdGEgcGFyYW1ldGVycyBkb2VzIG5vdCBhbGxvdyBhIHR5cGUgb2YgJ29iamVjdCcuXG4gICAgaWYgKHR5cGUgPT09ICdmaWxlJykge1xuICAgICAgaWYgKF8uaXNVbmRlZmluZWQocmVxLmZpbGVzKSkge1xuICAgICAgICBpZiAodGhpcy5yZXF1aXJlZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncmVxLmZpbGVzIG11c3QgYmUgcHJvdmlkZWQgZm9yIFxcJ2Zvcm1EYXRhXFwnIHBhcmFtZXRlcnMgb2YgdHlwZSBcXCdmaWxlXFwnJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFsdWUgPSByZXEuZmlsZXNbdGhpcy5uYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKF8uaXNVbmRlZmluZWQocmVxLmJvZHkpKSB7XG4gICAgICAgIGlmICh0aGlzLnJlcXVpcmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZXEuYm9keSBtdXN0IGJlIHByb3ZpZGVkIGZvciBcXCdmb3JtRGF0YVxcJyBwYXJhbWV0ZXJzJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhbHVlID0gcmVxLmJvZHlbdGhpcy5uYW1lXTtcbiAgICB9XG4gICAgYnJlYWs7XG4gIGNhc2UgJ2hlYWRlcic6XG4gICAgaWYgKF8uaXNVbmRlZmluZWQocmVxLmhlYWRlcnMpKSB7XG4gICAgICBpZiAodGhpcy5yZXF1aXJlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlcS5oZWFkZXJzIG11c3QgYmUgcHJvdmlkZWQgZm9yIFxcJ2hlYWRlclxcJyBwYXJhbWV0ZXJzJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YWx1ZSA9IGhlbHBlcnMuZ2V0SGVhZGVyVmFsdWUocmVxLmhlYWRlcnMsIHRoaXMubmFtZSk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3BhdGgnOlxuICAgIGlmIChfLmlzVW5kZWZpbmVkKHJlcS5vcmlnaW5hbFVybCkgJiYgXy5pc1VuZGVmaW5lZChyZXEudXJsKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZXEub3JpZ2luYWxVcmwgb3IgcmVxLnVybCBtdXN0IGJlIHByb3ZpZGVkIGZvciBcXCdwYXRoXFwnIHBhcmFtZXRlcnMnKTtcbiAgICB9XG5cbiAgICBwYXRoTWF0Y2ggPSB0aGlzLnBhdGhPYmplY3QucmVnZXhwLmV4ZWMocGFyc2VVcmwocmVxLm9yaWdpbmFsVXJsIHx8IHJlcS51cmwpLnBhdGhuYW1lKTtcblxuICAgIGlmIChwYXRoTWF0Y2gpIHtcbiAgICAgIC8vIGRlY29kZSBVUkkgY29tcG9uZW50IGhlcmUgdG8gYXZvaWQgaXNzdWVzIHdpdGggZW5jb2RlZCBzbGFzaGVzXG4gICAgICB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChwYXRoTWF0Y2hbXy5maW5kSW5kZXgodGhpcy5wYXRoT2JqZWN0LnJlZ2V4cC5rZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBrZXkubmFtZSA9PT0gdGhhdC5uYW1lO1xuICAgICAgfSkgKyAxXSk7XG4gICAgfVxuICAgIGJyZWFrO1xuICBjYXNlICdxdWVyeSc6XG4gICAgaWYgKF8uaXNVbmRlZmluZWQocmVxLnF1ZXJ5KSkge1xuICAgICAgaWYgKHRoaXMucmVxdWlyZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZXEucXVlcnkgbXVzdCBiZSBwcm92aWRlZCBmb3IgXFwncXVlcnlcXCcgcGFyYW1ldGVycycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFsdWUgPSBfLmdldChyZXEucXVlcnksIHRoaXMubmFtZSk7XG5cbiAgICBicmVhaztcblxuICAgIC8vIG5vIGRlZmF1bHRcbiAgfVxuXG4gIHJldHVybiBuZXcgUGFyYW1ldGVyVmFsdWUodGhpcywgdmFsdWUpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYXJhbWV0ZXI7XG4iLCIvKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1IEFwaWdlZSBDb3Jwb3JhdGlvblxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgXyA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydfJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydfJ10gOiBudWxsKTtcbnZhciBKc29uUmVmcyA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydKc29uUmVmcyddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnSnNvblJlZnMnXSA6IG51bGwpO1xudmFyIE9wZXJhdGlvbiA9IHJlcXVpcmUoJy4vb3BlcmF0aW9uJyk7XG52YXIgUGFyYW1ldGVyID0gcmVxdWlyZSgnLi9wYXJhbWV0ZXInKTtcbnZhciBwYXRoVG9SZWdleHAgPSByZXF1aXJlKCdwYXRoLXRvLXJlZ2V4cCcpO1xudmFyIHN1cHBvcnRlZEh0dHBNZXRob2RzID0gcmVxdWlyZSgnc3dhZ2dlci1tZXRob2RzJyk7XG5cbi8qKlxuICogVGhlIFBhdGggb2JqZWN0LlxuICpcbiAqICoqTm90ZToqKiBEbyBub3QgdXNlIGRpcmVjdGx5LlxuICpcbiAqICoqRXh0cmEgUHJvcGVydGllczoqKiBPdGhlciB0aGFuIHRoZSBkb2N1bWVudGVkIHByb3BlcnRpZXMsIHRoaXMgb2JqZWN0IGFsc28gZXhwb3NlcyBhbGwgcHJvcGVydGllcyBvZiB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICBkZWZpbml0aW9uIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge21vZHVsZTpTd2F5flN3YWdnZXJBcGl9IGFwaSAtIFRoZSBgU3dhZ2dlckFwaWAgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoIHN0cmluZ1xuICogQHBhcmFtIHtvYmplY3R9IGRlZmluaXRpb24gLSBUaGUgcGF0aCBkZWZpbml0aW9uICooVGhlIHJhdyBwYXRoIGRlZmluaXRpb24gX19hZnRlcl9fIHJlbW90ZSByZWZlcmVuY2VzIHdlcmVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWQpKlxuICogQHBhcmFtIHtvYmplY3R9IGRlZmluaXRpb25GdWxseVJlc29sdmVkIC0gVGhlIHBhdGggZGVmaW5pdGlvbiB3aXRoIGFsbCBvZiBpdHMgcmVzb2x2YWJsZSByZWZlcmVuY2VzIHJlc29sdmVkXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRoVG9EZWZpbml0aW9uIC0gVGhlIHBhdGggc2VnbWVudHMgdG8gdGhlIHBhdGggZGVmaW5pdGlvblxuICpcbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOlN3YXl+U3dhZ2dlckFwaX0gYXBpIC0gVGhlIGBTd2FnZ2VyQXBpYCBvYmplY3RcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBkZWZpbml0aW9uIC0gVGhlIHBhdGggZGVmaW5pdGlvbiAqKFRoZSByYXcgcGF0aCBkZWZpbml0aW9uIF9fYWZ0ZXJfXyByZW1vdGUgcmVmZXJlbmNlcyB3ZXJlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVkKSpcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBkZWZpbml0aW9uRnVsbHlSZXNvbHZlZCAtIFRoZSBwYXRoIGRlZmluaXRpb24gd2l0aCBhbGwgb2YgaXRzIHJlc29sdmFibGUgcmVmZXJlbmNlcyByZXNvbHZlZFxuICogQHByb3BlcnR5IHttb2R1bGU6U3dheX5PcGVyYXRpb25bXX0gb3BlcmF0aW9uT2JqZWN0cyAtIFRoZSBgT3BlcmF0aW9uYCBvYmplY3RzXG4gKiBAcHJvcGVydHkge21vZHVsZTpTd2F5flBhcmFtZXRlcltdfSBwYXJhbWV0ZXJPYmplY3RzIC0gVGhlIHBhdGgtbGV2ZWwgYFBhcmFtZXRlcmAgb2JqZWN0c1xuICogQHByb3BlcnR5IHtzdHJpbmd9IHBhdGggLSBUaGUgcGF0aCBzdHJpbmdcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nW119IHBhdGhUb0RlZmluaXRpb24gLSBUaGUgcGF0aCBzZWdtZW50cyB0byB0aGUgcGF0aCBkZWZpbml0aW9uXG4gKiBAcHJvcGVydHkge3B0cn0gcHRyIC0gVGhlIEpTT04gUG9pbnRlciB0byB0aGUgcGF0aFxuICogQHByb3BlcnR5IHtyZWdleHB9IHJlZ2V4cCAtIFRoZSBgUmVnRXhwYCB1c2VkIHRvIG1hdGNoIHJlcXVlc3QgcGF0aHMgYWdhaW5zdCB0aGlzIHBhdGhcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUGF0aCAoYXBpLCBwYXRoLCBkZWZpbml0aW9uLCBkZWZpbml0aW9uRnVsbHlSZXNvbHZlZCwgcGF0aFRvRGVmaW5pdGlvbikge1xuICB2YXIgYmFzZVBhdGhQcmVmaXggPSBhcGkuZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQuYmFzZVBhdGggfHwgJy8nO1xuICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgLy8gVE9ETzogV2UgY291bGQvc2hvdWxkIHJlZmFjdG9yIHRoaXMgdG8gdXNlIHRoZSBwYXRoIG1vZHVsZVxuXG4gIC8vIFJlbW92ZSB0cmFpbGluZyBzbGFzaCBmcm9tIHRoZSBiYXNlUGF0aFByZWZpeCBzbyB3ZSBkbyBub3QgZW5kIHVwIHdpdGggZG91YmxlIHNsYXNoZXNcbiAgaWYgKGJhc2VQYXRoUHJlZml4LmNoYXJBdChiYXNlUGF0aFByZWZpeC5sZW5ndGggLSAxKSA9PT0gJy8nKSB7XG4gICAgYmFzZVBhdGhQcmVmaXggPSBiYXNlUGF0aFByZWZpeC5zdWJzdHJpbmcoMCwgYmFzZVBhdGhQcmVmaXgubGVuZ3RoIC0gMSk7XG4gIH1cblxuICAvLyBBc3NpZ24gbG9jYWwgcHJvcGVydGllc1xuICB0aGlzLmFwaSA9IGFwaTtcbiAgdGhpcy5kZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcbiAgdGhpcy5kZWZpbml0aW9uRnVsbHlSZXNvbHZlZCA9IGRlZmluaXRpb25GdWxseVJlc29sdmVkO1xuICB0aGlzLnBhdGggPSBwYXRoO1xuICB0aGlzLnBhdGhUb0RlZmluaXRpb24gPSBwYXRoVG9EZWZpbml0aW9uO1xuICB0aGlzLnB0ciA9IEpzb25SZWZzLnBhdGhUb1B0cihwYXRoVG9EZWZpbml0aW9uKTtcbiAgdGhpcy5yZWdleHAgPSBwYXRoVG9SZWdleHAoYmFzZVBhdGhQcmVmaXggKyBwYXRoLnJlcGxhY2UoL1xcey9nLCAnOicpLnJlcGxhY2UoL1xcfS9nLCAnJyksIHtzZW5zaXRpdmU6IHRydWV9KTtcblxuICAvLyBBc3NpZ24gbG9jYWwgcHJvcGVydGllcyBmcm9tIHRoZSBTd2FnZ2VyIGRlZmluaXRpb24gcHJvcGVydGllc1xuICBfLmFzc2lnbih0aGlzLCBkZWZpbml0aW9uRnVsbHlSZXNvbHZlZCk7XG5cbiAgdGhpcy5fZGVidWcgPSB0aGlzLmFwaS5fZGVidWc7XG5cbiAgdGhpcy5fZGVidWcoJyAgICAlcycsIHRoaXMucGF0aCk7XG5cbiAgdGhpcy5wYXJhbWV0ZXJPYmplY3RzID0gXy5tYXAoZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQucGFyYW1ldGVycywgZnVuY3Rpb24gKHBhcmFtRGVmLCBpbmRleCkge1xuICAgIHZhciBwUGF0aCA9IHBhdGhUb0RlZmluaXRpb24uY29uY2F0KFsncGFyYW1ldGVycycsIGluZGV4LnRvU3RyaW5nKCldKTtcblxuICAgIHJldHVybiBuZXcgUGFyYW1ldGVyKHRoYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgXy5nZXQoYXBpLmRlZmluaXRpb25SZW1vdGVzUmVzb2x2ZWQsIHBQYXRoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbURlZixcbiAgICAgICAgICAgICAgICAgICAgICAgICBwUGF0aCk7XG4gIH0pO1xuXG4gIHRoaXMuX2RlYnVnKCcgICAgICBPcGVyYXRpb25zOicpO1xuXG4gIHRoaXMub3BlcmF0aW9uT2JqZWN0cyA9IF8ucmVkdWNlKGRlZmluaXRpb25GdWxseVJlc29sdmVkLCBmdW5jdGlvbiAob3BlcmF0aW9ucywgb3BlcmF0aW9uRGVmLCBtZXRob2QpIHtcbiAgICB2YXIgb1BhdGggPSBwYXRoVG9EZWZpbml0aW9uLmNvbmNhdChtZXRob2QpO1xuXG4gICAgaWYgKHN1cHBvcnRlZEh0dHBNZXRob2RzLmluZGV4T2YobWV0aG9kKSA+IC0xKSB7XG4gICAgICBvcGVyYXRpb25zLnB1c2gobmV3IE9wZXJhdGlvbih0aGF0LCBtZXRob2QsIF8uZ2V0KGFwaS5kZWZpbml0aW9uUmVtb3Rlc1Jlc29sdmVkLCBvUGF0aCksIG9wZXJhdGlvbkRlZiwgb1BhdGgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3BlcmF0aW9ucztcbiAgfSwgW10pO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgb3BlcmF0aW9uIGZvciB0aGlzIHBhdGggYW5kIG9wZXJhdGlvbiBpZCBvciBtZXRob2QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkT3JNZXRob2QgLSBUaGUgb3BlcmF0aW9uIGlkIG9yIG1ldGhvZFxuICpcbiAqIEByZXR1cm5zIHttb2R1bGU6U3dheX5PcGVyYXRpb25bXX0gVGhlIGBPcGVyYXRpb25gIG9iamVjdHMgZm9yIHRoaXMgcGF0aCBhbmQgbWV0aG9kIG9yIGB1bmRlZmluZWRgIGlmIHRoZXJlIGlzIG5vXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbiBmb3IgdGhlIHByb3ZpZGVkIG1ldGhvZFxuICovXG5QYXRoLnByb3RvdHlwZS5nZXRPcGVyYXRpb24gPSBmdW5jdGlvbiAoaWRPck1ldGhvZCkge1xuICByZXR1cm4gXy5maW5kKHRoaXMub3BlcmF0aW9uT2JqZWN0cywgZnVuY3Rpb24gKG9wZXJhdGlvbk9iamVjdCkge1xuICAgIHJldHVybiBvcGVyYXRpb25PYmplY3Qub3BlcmF0aW9uSWQgPT09IGlkT3JNZXRob2QgfHwgb3BlcmF0aW9uT2JqZWN0Lm1ldGhvZCA9PT0gaWRPck1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9KTtcbn07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBvcGVyYXRpb25zIGZvciB0aGlzIHBhdGguXG4gKlxuICogQHJldHVybnMge21vZHVsZTpTd2F5fk9wZXJhdGlvbltdfSBUaGUgYE9wZXJhdGlvbmAgb2JqZWN0cyBmb3IgdGhpcyBwYXRoXG4gKi9cblBhdGgucHJvdG90eXBlLmdldE9wZXJhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLm9wZXJhdGlvbk9iamVjdHM7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgb3BlcmF0aW9ucyBmb3IgdGhpcyBwYXRoIGFuZCB0YWcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyAtIFRoZSB0YWdcbiAqXG4gKiBAcmV0dXJucyB7bW9kdWxlOlN3YXl+T3BlcmF0aW9uW119IFRoZSBgT3BlcmF0aW9uYCBvYmplY3RzIGZvciB0aGlzIHBhdGggYW5kIHRhZ1xuICovXG5QYXRoLnByb3RvdHlwZS5nZXRPcGVyYXRpb25zQnlUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHJldHVybiBfLmZpbHRlcih0aGlzLm9wZXJhdGlvbk9iamVjdHMsIGZ1bmN0aW9uIChvcGVyYXRpb25PYmplY3QpIHtcbiAgICByZXR1cm4gXy5pbmNsdWRlcyhvcGVyYXRpb25PYmplY3QudGFncywgdGFnKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgcGFyYW1ldGVycyBmb3IgdGhpcyBwYXRoLlxuICpcbiAqIEByZXR1cm5zIHttb2R1bGU6U3dheX5QYXJhbWV0ZXJbXX0gVGhlIGBQYXJhbWV0ZXJgIG9iamVjdHMgZm9yIHRoaXMgcGF0aFxuICovXG5QYXRoLnByb3RvdHlwZS5nZXRQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5wYXJhbWV0ZXJPYmplY3RzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYXRoO1xuIiwiLypcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNSBBcGlnZWUgQ29ycG9yYXRpb25cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF8gPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snXyddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnXyddIDogbnVsbCk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMnKTtcbnZhciBqc29uVmFsaWRhdG9yID0gaGVscGVycy5nZXRKU09OU2NoZW1hVmFsaWRhdG9yKCk7XG52YXIgSnNvblJlZnMgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snSnNvblJlZnMnXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ0pzb25SZWZzJ10gOiBudWxsKTtcbnZhciBZQU1MID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ2pzeWFtbCddIDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFsnanN5YW1sJ10gOiBudWxsKTtcblxuLyoqXG4gKiBUaGUgU3dhZ2dlciBSZXNwb25zZSBvYmplY3QuXG4gKlxuICogKipOb3RlOioqIERvIG5vdCB1c2UgZGlyZWN0bHkuXG4gKlxuICogKipFeHRyYSBQcm9wZXJ0aWVzOioqIE90aGVyIHRoYW4gdGhlIGRvY3VtZW50ZWQgcHJvcGVydGllcywgdGhpcyBvYmplY3QgYWxzbyBleHBvc2VzIGFsbCBwcm9wZXJ0aWVzIG9mIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb24gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7bW9kdWxlOlN3YXl+T3BlcmF0aW9ufSBvcGVyYXRpb25PYmplY3QgLSBUaGUgYE9wZXJhdGlvbmAgb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gc3RhdHVzQ29kZSAtIFRoZSBzdGF0dXMgY29kZVxuICogQHBhcmFtIHtvYmplY3R9IGRlZmluaXRpb24gLSBUaGUgcmVzcG9uc2UgZGVmaW5pdGlvbiAqKFRoZSByYXcgcmVzcG9uc2UgZGVmaW5pdGlvbiBfX2FmdGVyX18gcmVtb3RlIHJlZmVyZW5jZXMgd2VyZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlZCkqXG4gKiBAcGFyYW0ge29iamVjdH0gZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQgLSBUaGUgcmVzcG9uc2UgZGVmaW5pdGlvbiB3aXRoIGFsbCBvZiBpdHMgcmVzb2x2YWJsZSByZWZlcmVuY2VzIHJlc29sdmVkXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRoVG9EZWZpbml0aW9uIC0gVGhlIHBhdGggc2VnbWVudHMgdG8gdGhlIHBhdGggZGVmaW5pdGlvblxuICpcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBkZWZpbml0aW9uIC0gVGhlIHJlc3BvbnNlIGRlZmluaXRpb24gKihUaGUgcmF3IHJlc3BvbnNlZGVmaW5pdGlvbiBfX2FmdGVyX18gcmVtb3RlIHJlZmVyZW5jZXMgd2VyZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlZCkqXG4gKiBAcHJvcGVydHkge29iamVjdH0gZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQgLSBUaGUgcmVzcG9uc2UgZGVmaW5pdGlvbiB3aXRoIGFsbCBvZiBpdHMgcmVzb2x2YWJsZSByZWZlcmVuY2VzIHJlc29sdmVkXG4gKiBAcHJvcGVydHkge21vZHVsZTpTd2F5fk9wZXJhdGlvbn0gb3BlcmF0aW9uT2JqZWN0IC0gVGhlIE9wZXJhdGlvbiBvYmplY3RcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nW119IHBhdGhUb0RlZmluaXRpb24gLSBUaGUgcGF0aCBzZWdtZW50cyB0byB0aGUgcGF0aCBkZWZpbml0aW9uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gcHRyIC0gVGhlIEpTT04gUG9pbnRlciB0byB0aGUgcmVzcG9uc2UgZGVmaW5pdGlvblxuICogQHByb3BlcnR5IHtzdHJpbmd9IHN0YXR1c0NvZGUgLSBUaGUgc3RhdHVzIGNvZGVcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUmVzcG9uc2UgKG9wZXJhdGlvbk9iamVjdCwgc3RhdHVzQ29kZSwgZGVmaW5pdGlvbiwgZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQsIHBhdGhUb0RlZmluaXRpb24pIHtcbiAgLy8gQXNzaWduIGxvY2FsIHByb3BlcnRpZXNcbiAgdGhpcy5kZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcbiAgdGhpcy5kZWZpbml0aW9uRnVsbHlSZXNvbHZlZCA9IGRlZmluaXRpb25GdWxseVJlc29sdmVkO1xuICB0aGlzLm9wZXJhdGlvbk9iamVjdCA9IG9wZXJhdGlvbk9iamVjdDtcbiAgdGhpcy5wYXRoVG9EZWZpbml0aW9uID0gcGF0aFRvRGVmaW5pdGlvbjtcbiAgdGhpcy5wdHIgPSBKc29uUmVmcy5wYXRoVG9QdHIocGF0aFRvRGVmaW5pdGlvbik7XG4gIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG5cbiAgLy8gQXNzaWduIGxvY2FsIHByb3BlcnRpZXMgZnJvbSB0aGUgU3dhZ2dlciBkZWZpbml0aW9uIHByb3BlcnRpZXNcbiAgXy5hc3NpZ24odGhpcywgZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQpO1xuXG4gIHRoaXMub3BlcmF0aW9uT2JqZWN0LnBhdGhPYmplY3QuYXBpLl9kZWJ1ZygnICAgICAgICAgICAgJXMgYXQgJXMnLCBzdGF0dXNDb2RlLCB0aGlzLnB0cik7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcmVzcG9uc2UgZXhhbXBsZSBmb3IgdGhlIG1pbWUtdHlwZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW21pbWVUeXBlXSAtIFRoZSBtaW1lIHR5cGVcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcmVzcG9uc2UgZXhhbXBsZSBhcyBhIHN0cmluZyBvciBgdW5kZWZpbmVkYCBpZiB0aGUgcmVzcG9uc2UgY29kZSBhbmQvb3IgbWltZS10eXBlIGlzIG1pc3NpbmdcbiAqL1xuUmVzcG9uc2UucHJvdG90eXBlLmdldEV4YW1wbGUgPSBmdW5jdGlvbiAobWltZVR5cGUpIHtcbiAgdmFyIGV4YW1wbGU7XG5cbiAgaWYgKF8uaXNQbGFpbk9iamVjdCh0aGlzLmRlZmluaXRpb25GdWxseVJlc29sdmVkLmV4YW1wbGVzKSkge1xuICAgIGV4YW1wbGUgPSB0aGlzLmRlZmluaXRpb25GdWxseVJlc29sdmVkLmV4YW1wbGVzW21pbWVUeXBlXTtcbiAgfVxuXG4gIGlmICghXy5pc1VuZGVmaW5lZChleGFtcGxlKSAmJiAhXy5pc1N0cmluZyhleGFtcGxlKSkge1xuICAgIGlmIChtaW1lVHlwZSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nKSB7XG4gICAgICBleGFtcGxlID0gSlNPTi5zdHJpbmdpZnkoZXhhbXBsZSwgbnVsbCwgMik7XG4gICAgfSBlbHNlIGlmIChtaW1lVHlwZSA9PT0gJ2FwcGxpY2F0aW9uL3gteWFtbCcpIHtcbiAgICAgIGV4YW1wbGUgPSBZQU1MLnNhZmVEdW1wKGV4YW1wbGUsIHtpbmRlbnQ6IDJ9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXhhbXBsZTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIHNhbXBsZSB2YWx1ZS5cbiAqXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHNhbXBsZSB2YWx1ZSBmb3IgdGhlIHJlc3BvbnNlLCB3aGljaCBjYW4gYmUgdW5kZWZpbmVkIGlmIHRoZSByZXNwb25zZSBzY2hlbWEgaXMgbm90IHByb3ZpZGVkXG4gKi9cblJlc3BvbnNlLnByb3RvdHlwZS5nZXRTYW1wbGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzYW1wbGU7XG5cbiAgaWYgKCFfLmlzVW5kZWZpbmVkKHRoaXMuZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQuc2NoZW1hKSkge1xuICAgIHNhbXBsZSA9IGhlbHBlcnMuZ2V0SlNPTlNjaGVtYU1vY2tlcigpKHRoaXMuZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQuc2NoZW1hKTtcbiAgfVxuXG4gIHJldHVybiBzYW1wbGU7XG59O1xuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGUgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHttb2R1bGU6U3dheX5TZXJ2ZXJSZXNwb25zZVdyYXBwZXJ9IHJlcyAtIFRoZSByZXNwb25zZSBvciByZXNwb25zZSBsaWtlIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIHttb2R1bGU6U3dheX5WYWxpZGF0aW9uUmVzdWx0c30gVGhlIHZhbGlkYXRpb24gcmVzdWx0c1xuICovXG5SZXNwb25zZS5wcm90b3R5cGUudmFsaWRhdGVSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXMpIHtcbiAgdmFyIHJlc3VsdHMgPSB7XG4gICAgZXJyb3JzOiBbXSxcbiAgICB3YXJuaW5nczogW11cbiAgfTtcbiAgdmFyIGJvZHlWYWx1ZTtcbiAgdmFyIGJ2UmVzdWx0cztcblxuICAvLyBTZXQgc29tZSBkZWZhdWx0IGp1c3QgaW4gY2FzZVxuICBpZiAoXy5pc1VuZGVmaW5lZChyZXMpKSB7XG4gICAgcmVzID0ge307XG4gIH1cblxuICBpZiAoXy5pc1VuZGVmaW5lZChyZXMuaGVhZGVycykpIHtcbiAgICByZXMuaGVhZGVycyA9IHt9O1xuICB9XG5cbiAgLy8gVmFsaWRhdGUgdGhlIENvbnRlbnQtVHlwZSBleGNlcHQgZm9yIHZvaWQgcmVzcG9uc2VzLCAyMDQgcmVzcG9uc2VzIGFuZCAzMDQgcmVzcG9uc2VzIGFzIHRoZXkgaGF2ZSBubyBib2R5XG4gIGlmICghXy5pc1VuZGVmaW5lZCh0aGlzLmRlZmluaXRpb25GdWxseVJlc29sdmVkLnNjaGVtYSkgJiYgXy5pbmRleE9mKFsnMjA0JywgJzMwNCddLCB0aGlzLnN0YXR1c0NvZGUpID09PSAtMSkge1xuICAgIGhlbHBlcnMudmFsaWRhdGVDb250ZW50VHlwZShoZWxwZXJzLmdldENvbnRlbnRUeXBlKHJlcy5oZWFkZXJzKSwgdGhpcy5vcGVyYXRpb25PYmplY3QucHJvZHVjZXMsIHJlc3VsdHMpO1xuICB9XG5cbiAgLy8gVmFsaWRhdGUgdGhlIHJlc3BvbnNlIGhlYWRlcnNcbiAgXy5mb3JFYWNoKHRoaXMuaGVhZGVycywgZnVuY3Rpb24gKHNjaGVtYSwgbmFtZSkge1xuICAgIHZhciBoZWFkZXJWYWx1ZTtcbiAgICB2YXIgaHZSZXN1bHRzO1xuXG4gICAgdHJ5IHtcbiAgICAgIGhlYWRlclZhbHVlID0gaGVscGVycy5jb252ZXJ0VmFsdWUoc2NoZW1hLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbkZvcm1hdDogc2NoZW1hLmNvbGxlY3Rpb25Gb3JtYXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3Zlcmx5IGNhdXRpb3VzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5oZWFkZXJzW25hbWUudG9Mb3dlckNhc2UoKV0gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmhlYWRlcnNbbmFtZV0gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NoZW1hLmRlZmF1bHQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmVzdWx0cy5lcnJvcnMucHVzaCh7XG4gICAgICAgIGNvZGU6ICdJTlZBTElEX1JFU1BPTlNFX0hFQURFUicsXG4gICAgICAgIGVycm9yczogZXJyLmVycm9ycyB8fCBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29kZTogZXJyLmNvZGUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZSxcbiAgICAgICAgICAgIHBhdGg6IGVyci5wYXRoXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBoZWFkZXIgKCcgKyBuYW1lICsgJyk6ICcgKyBlcnIubWVzc2FnZSxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgcGF0aDogZXJyLnBhdGhcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIER1ZSB0byBhbWJpZ3VpdHkgaW4gdGhlIFN3YWdnZXIgMi4wIFNwZWNpZmljYXRpb24gKGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLXNwZWMvaXNzdWVzLzMyMSksIGl0XG4gICAgLy8gaXMgcHJvYmFibHkgbm90IGEgZ29vZCBpZGVhIHRvIGRvIHJlcXVpcmVkbmVzcyBjaGVja3MgZm9yIHJlc3BvbnNlIGhlYWRlcnMuICBUaGlzIG1lYW5zIHdlIHdpbGwgdmFsaWRhdGVcbiAgICAvLyBleGlzdGluZyBoZWFkZXJzIGJ1dCB3aWxsIG5vdCB0aHJvdyBhbiBlcnJvciBpZiBhIGhlYWRlciBpcyBkZWZpbmVkIGluIGEgcmVzcG9uc2Ugc2NoZW1hIGJ1dCBub3QgaW4gdGhlIHJlc3BvbnNlLlxuICAgIC8vXG4gICAgLy8gV2UgYWxzbyBkbyBub3Qgd2FudCB0byB2YWxpZGF0ZSBkYXRlIG9iamVjdHMgYmVjYXVzZSBpdCBpcyByZWR1bmRhbnQuICBJZiB3ZSBoYXZlIGFscmVhZHkgY29udmVydGVkIHRoZSB2YWx1ZVxuICAgIC8vIGZyb20gYSBzdHJpbmcrZm9ybWF0IHRvIGEgZGF0ZSwgd2Uga25vdyBpdCBwYXNzZXMgc2NoZW1hIHZhbGlkYXRpb24uXG4gICAgaWYgKCFfLmlzVW5kZWZpbmVkKGhlYWRlclZhbHVlKSAmJiAhXy5pc0RhdGUoaGVhZGVyVmFsdWUpKSB7XG4gICAgICBodlJlc3VsdHMgPSBoZWxwZXJzLnZhbGlkYXRlQWdhaW5zdFNjaGVtYShqc29uVmFsaWRhdG9yLCBzY2hlbWEsIGhlYWRlclZhbHVlKTtcblxuICAgICAgaWYgKGh2UmVzdWx0cy5lcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXN1bHRzLmVycm9ycy5wdXNoKHtcbiAgICAgICAgICBjb2RlOiAnSU5WQUxJRF9SRVNQT05TRV9IRUFERVInLFxuICAgICAgICAgIGVycm9yczogaHZSZXN1bHRzLmVycm9ycyxcbiAgICAgICAgICAvLyBSZXBvcnQgdGhlIGFjdHVhbCBlcnJvciBpZiB0aGVyZSBpcyBvbmx5IG9uZSBlcnJvci4gIE90aGVyd2lzZSwgcmVwb3J0IGEgSlNPTiBTY2hlbWFcbiAgICAgICAgICAvLyB2YWxpZGF0aW9uIGVycm9yLlxuICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIGhlYWRlciAoJyArIG5hbWUgKyAnKTogJyArIChodlJlc3VsdHMuZXJyb3JzLmxlbmd0aCA+IDEgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVmFsdWUgZmFpbGVkIEpTT04gU2NoZW1hIHZhbGlkYXRpb24nIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHZSZXN1bHRzLmVycm9yc1swXS5tZXNzYWdlKSxcbiAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgIHBhdGg6IFtdXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgLy8gVmFsaWRhdGUgcmVzcG9uc2UgZm9yIG5vbi12b2lkIHJlc3BvbnNlc1xuICBpZiAoIV8uaXNVbmRlZmluZWQodGhpcy5kZWZpbml0aW9uRnVsbHlSZXNvbHZlZC5zY2hlbWEpICYmIF8uaW5kZXhPZihbJzIwNCcsICczMDQnXSwgdGhpcy5zdGF0dXNDb2RlKSA9PT0gLTEpIHtcbiAgICB0cnkge1xuICAgICAgYm9keVZhbHVlID0gaGVscGVycy5jb252ZXJ0VmFsdWUodGhpcy5kZWZpbml0aW9uRnVsbHlSZXNvbHZlZC5zY2hlbWEsIHtcbiAgICAgICAgZW5jb2Rpbmc6IHJlcy5lbmNvZGluZ1xuICAgICAgfSwgcmVzLmJvZHkpO1xuICAgICAgYnZSZXN1bHRzID0gaGVscGVycy52YWxpZGF0ZUFnYWluc3RTY2hlbWEoanNvblZhbGlkYXRvciwgdGhpcy5kZWZpbml0aW9uRnVsbHlSZXNvbHZlZC5zY2hlbWEsIGJvZHlWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBidlJlc3VsdHMgPSB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvZGU6IGVyci5jb2RlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gICAgICAgICAgICBwYXRoOiBlcnIucGF0aFxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoYnZSZXN1bHRzLmVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICByZXN1bHRzLmVycm9ycy5wdXNoKHtcbiAgICAgICAgY29kZTogJ0lOVkFMSURfUkVTUE9OU0VfQk9EWScsXG4gICAgICAgIGVycm9yczogYnZSZXN1bHRzLmVycm9ycyxcbiAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgYm9keTogJyArIChidlJlc3VsdHMuZXJyb3JzLmxlbmd0aCA+IDEgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdWYWx1ZSBmYWlsZWQgSlNPTiBTY2hlbWEgdmFsaWRhdGlvbicgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ2UmVzdWx0cy5lcnJvcnNbMF0ubWVzc2FnZSksXG4gICAgICAgIHBhdGg6IFtdXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0cztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVzcG9uc2U7XG4iLCIvKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1IEFwaWdlZSBDb3Jwb3JhdGlvblxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgXyA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydfJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydfJ10gOiBudWxsKTtcbnZhciBCYXNlNjQgPSAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvd1snQmFzZTY0J10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydCYXNlNjQnXSA6IG51bGwpO1xuXG4vLyBEdWUgdG8gdGhlIGRpZmZlcmVuY2VzIGluIGhvdyBub2RlLmpzIGFuZCB0aGUgYnJvd3NlciB1c2UganMtYmFzZTY0LCB3ZSBuZWVkIHRoaXMgaGFja1xuaWYgKHR5cGVvZiBCYXNlNjQuQmFzZTY0ICE9PSAndW5kZWZpbmVkJykge1xuICBCYXNlNjQgPSBCYXNlNjQuQmFzZTY0O1xufVxuXG4vKipcbiAqIFdlIGhhdmUgdG8gZmlsdGVyIHRoZSBzY2hlbWEgdG8gYXZvaWQgYSBtYXhpbXVtIGNhbGxzdGFjayBpc3N1ZSBieSBkZWxldGluZyB0aGUgZm9ybWF0IHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWEgLSBUaGUgSlNPTiBTY2hlbWEgb2JqZWN0XG4gKlxuICogQHJldHVybnMge29iamVjdH0gVGhlIGZpbHRlcmVkIHNjaGVtYVxuICovXG5mdW5jdGlvbiBmaWx0ZXJTY2hlbWEgKHNjaGVtYSkge1xuICB2YXIgY1NjaGVtYSA9IF8uY2xvbmVEZWVwKHNjaGVtYSk7XG5cbiAgZGVsZXRlIGNTY2hlbWEuZm9ybWF0O1xuXG4gIHJldHVybiBjU2NoZW1hO1xufVxuXG4vLyBCdWlsZCB0aGUgbGlzdCBvZiBjdXN0b20gSlNPTiBTY2hlbWEgZ2VuZXJhdG9yIGZvcm1hdHNcbm1vZHVsZS5leHBvcnRzLmJ5dGUgPSBmdW5jdGlvbiAobW9ja2VyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc2NoZW1hKSB7XG4gICAgcmV0dXJuIEJhc2U2NC5lbmNvZGUobW9ja2VyKGZpbHRlclNjaGVtYShzY2hlbWEpKSk7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5wYXNzd29yZCA9IGZ1bmN0aW9uIChtb2NrZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzY2hlbWEpIHtcbiAgICByZXR1cm4gbW9ja2VyKGZpbHRlclNjaGVtYShzY2hlbWEpKTtcbiAgfVxufTtcbiIsIi8qXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgQXBpZ2VlIENvcnBvcmF0aW9uXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ18nXSA6IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxbJ18nXSA6IG51bGwpO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlICgpIHtcbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzLmludDMyID0gbW9kdWxlLmV4cG9ydHMuaW50NjQgPSBmdW5jdGlvbiAodmFsKSB7XG4gIC8vIHotc2NoZW1hIHNlZW1zIHRvIGNvbnRpbnVlIHByb2Nlc3NpbmcgdGhlIGZvcm1hdCBldmVuIHdoZW4gdGhlIHR5cGUgaXMga25vd24gdG8gYmUgaW52YWxpZCBzbyB3ZSBtdXN0IGRvIGEgdHlwZVxuICAvLyBjaGVjayBwcmlvciB0byB2YWxpZGF0aW5nIHRoaXMgZm9ybWF0LlxuICByZXR1cm4gXy5pc051bWJlcih2YWwpICYmIHZhbCAlIDEgPT09IDA7XG59O1xuXG4vLyBUaGVzZSBmb3JtYXQgdmFsaWRhdG9ycyB3aWxsIGFsd2F5cyByZXR1cm4gJ3RydWUnIGJlY2F1c2UgdGhleSBhcmUgYWxyZWFkeSB0eXBlIHZhbGlkIGFuZCB0aGVyZSBhcmUgbm8gY29uc3RyYWludHNcbi8vIG9uIHRoZSBmb3JtYXQgdGhhdCB3b3VsZCBwcm9kdWNlIGFuIGludmFsaWQgdmFsdWUuXG5tb2R1bGUuZXhwb3J0cy5ieXRlID0gcmV0dXJuVHJ1ZTtcbm1vZHVsZS5leHBvcnRzLmRvdWJsZSA9IHJldHVyblRydWU7XG5tb2R1bGUuZXhwb3J0cy5mbG9hdCA9IHJldHVyblRydWU7XG5tb2R1bGUuZXhwb3J0cy5wYXNzd29yZCA9IHJldHVyblRydWU7XG4iLCIvKlxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1IEFwaWdlZSBDb3Jwb3JhdGlvblxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgXyA9ICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93WydfJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydfJ10gOiBudWxsKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycycpO1xudmFyIEpzb25SZWZzID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3dbJ0pzb25SZWZzJ10gOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsWydKc29uUmVmcyddIDogbnVsbCk7XG52YXIgc3VwcG9ydGVkSHR0cE1ldGhvZHMgPSByZXF1aXJlKCdzd2FnZ2VyLW1ldGhvZHMnKTtcbnZhciBzd2FnZ2VyU2NoZW1hID0gcmVxdWlyZSgnc3dhZ2dlci1zY2hlbWEtb2ZmaWNpYWwvc2NoZW1hJyk7XG5cbmZ1bmN0aW9uIGdldFNjaGVtYVByb3BlcnRpZXMgKHNjaGVtYSkge1xuICB2YXIgcHJvcGVydGllcyA9IF8ua2V5cyhzY2hlbWEucHJvcGVydGllcyk7IC8vIFN0YXJ0IHdpdGggdGhlIGRlZmluZWQgcHJvcGVydGllc1xuXG4gIC8vIEFkZCBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHBhcmVudFxuICBfLmZvckVhY2goc2NoZW1hLmFsbE9mLCBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgXy5mb3JFYWNoKGdldFNjaGVtYVByb3BlcnRpZXMocGFyZW50KSwgZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICBpZiAoXy5pbmRleE9mKHByb3BlcnRpZXMsIHByb3BlcnR5KSA9PT0gLTEpIHtcbiAgICAgICAgcHJvcGVydGllcy5wdXNoKHByb3BlcnR5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHByb3BlcnRpZXM7XG59XG5cbmZ1bmN0aW9uIHdhbGtTY2hlbWEgKGFwaSwgYmxhY2tsaXN0LCBzY2hlbWEsIHBhdGgsIGhhbmRsZXJzLCByZXNwb25zZSkge1xuICB2YXIgdHlwZSA9IHNjaGVtYS50eXBlIHx8ICdvYmplY3QnO1xuXG4gIGZ1bmN0aW9uIHNob3VsZFNraXAgKGNQYXRoKSB7XG4gICAgcmV0dXJuIF8uaW5kZXhPZihibGFja2xpc3QsIEpzb25SZWZzLnBhdGhUb1B0cihjUGF0aCkpID4gLTE7XG4gIH1cblxuICAvLyBEbyBub3QgcHJvY2VzcyBpdGVtcyBpbiB0aGUgYmxhY2tsaXN0IGFzIHRoZXkndmUgYmVlbiBwcm9jZXNzZWQgYWxyZWFkeVxuICBpZiAoc2hvdWxkU2tpcChwYXRoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdhbGtlciAocFNjaGVtYSwgcFBhdGgpIHtcbiAgICAvLyBEbyBub3QgcHJvY2VzcyBpdGVtcyBpbiB0aGUgYmxhY2tsaXN0IGFzIHRoZXkndmUgYmVlbiBwcm9jZXNzZWQgYWxyZWFkeVxuICAgIGlmIChzaG91bGRTa2lwKHBQYXRoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF8uZm9yRWFjaChwU2NoZW1hLCBmdW5jdGlvbiAoaXRlbSwgbmFtZSkge1xuICAgICAgaWYgKF8uaXNOdW1iZXIobmFtZSkpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgd2Fsa1NjaGVtYShhcGksIGJsYWNrbGlzdCwgaXRlbSwgcFBhdGguY29uY2F0KG5hbWUpLCBoYW5kbGVycywgcmVzcG9uc2UpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKCFfLmlzVW5kZWZpbmVkKHNjaGVtYS5zY2hlbWEpKSB7XG4gICAgd2Fsa1NjaGVtYShhcGksIGJsYWNrbGlzdCwgc2NoZW1hLnNjaGVtYSwgcGF0aC5jb25jYXQoJ3NjaGVtYScpLCBoYW5kbGVycywgcmVzcG9uc2UpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdhcnJheScgJiYgIV8uaXNVbmRlZmluZWQoc2NoZW1hLml0ZW1zKSkge1xuICAgIGlmIChfLmlzQXJyYXkoc2NoZW1hLml0ZW1zKSkge1xuICAgICAgd2Fsa2VyKHNjaGVtYS5pdGVtcywgcGF0aC5jb25jYXQoJ2l0ZW1zJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YWxrU2NoZW1hKGFwaSwgYmxhY2tsaXN0LCBzY2hlbWEuaXRlbXMsIHBhdGguY29uY2F0KCdpdGVtcycpLCBoYW5kbGVycywgcmVzcG9uc2UpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgIGlmICghXy5pc1VuZGVmaW5lZChzY2hlbWEuYWRkaXRpb25hbFByb3BlcnRpZXMpKSB7XG4gICAgICB3YWxrU2NoZW1hKGFwaSwgYmxhY2tsaXN0LCBzY2hlbWEuYWRkaXRpb25hbFByb3BlcnRpZXMsIHBhdGguY29uY2F0KCdhZGRpdGlvbmFsUHJvcGVydGllcycpLCBoYW5kbGVycywgcmVzcG9uc2UpO1xuICAgIH1cblxuICAgIF8uZm9yRWFjaChbJ2FsbE9mJywgJ3Byb3BlcnRpZXMnXSwgZnVuY3Rpb24gKHByb3BOYW1lKSB7XG4gICAgICBpZiAoIV8uaXNVbmRlZmluZWQoc2NoZW1hW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgd2Fsa2VyKHNjaGVtYVtwcm9wTmFtZV0sIHBhdGguY29uY2F0KHByb3BOYW1lKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBfLmZvckVhY2goaGFuZGxlcnMsIGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgaGFuZGxlcihhcGksIHJlc3BvbnNlLCBzY2hlbWEsIHBhdGgpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZXMgdGhlIHJlc29sdmVkIFN3YWdnZXIgZG9jdW1lbnQgYWdhaW5zdCB0aGUgU3dhZ2dlciAyLjAgSlNPTiBTY2hlbWEuXG4gKlxuICogQHBhcmFtIHtTd2FnZ2VyQXBpfSBhcGkgLSBUaGUgU3dhZ2dlckFwaSBvYmplY3RcbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBPYmplY3QgY29udGFpbmluZyB0aGUgZXJyb3JzIGFuZCB3YXJuaW5ncyBvZiB0aGUgdmFsaWRhdGlvblxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVN0cnVjdHVyZSAoYXBpKSB7XG4gIHZhciByZXN1bHRzID0gaGVscGVycy52YWxpZGF0ZUFnYWluc3RTY2hlbWEoaGVscGVycy5nZXRKU09OU2NoZW1hVmFsaWRhdG9yKCksIHN3YWdnZXJTY2hlbWEsIGFwaS5kZWZpbml0aW9uRnVsbHlSZXNvbHZlZCk7XG5cbiAgLy8gTWFrZSBjb21wbGV4IEpTT04gU2NoZW1hIHZhbGlkYXRpb24gZXJyb3JzIGVhc2llciB0byB1bmRlcnN0YW5kIChJc3N1ZSAxNSlcbiAgcmVzdWx0cy5lcnJvcnMgPSByZXN1bHRzLmVycm9ycy5tYXAoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgdmFyIGRlZlR5cGUgPSBbJ2FkZGl0aW9uYWxQcm9wZXJ0aWVzJywgJ2l0ZW1zJ10uaW5kZXhPZihlcnJvci5wYXRoW2Vycm9yLnBhdGgubGVuZ3RoIC0gMV0pID4gLTEgP1xuICAgICAgICAgICdzY2hlbWEnIDpcbiAgICAgICAgICBlcnJvci5wYXRoW2Vycm9yLnBhdGgubGVuZ3RoIC0gMl07XG5cbiAgICBpZiAoWydBTllfT0ZfTUlTU0lORycsICdPTkVfT0ZfTUlTU0lORyddLmluZGV4T2YoZXJyb3IuY29kZSkgPiAtMSkge1xuICAgICAgc3dpdGNoIChkZWZUeXBlKSB7XG4gICAgICBjYXNlICdwYXJhbWV0ZXJzJzpcbiAgICAgICAgZGVmVHlwZSA9ICdwYXJhbWV0ZXInO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAncmVzcG9uc2VzJzpcbiAgICAgICAgZGVmVHlwZSA9ICdyZXNwb25zZSc7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzY2hlbWEnOlxuICAgICAgICBkZWZUeXBlICs9ICcgJyArIGVycm9yLnBhdGhbZXJyb3IucGF0aC5sZW5ndGggLSAxXTtcblxuICAgICAgICAvLyBubyBkZWZhdWx0XG4gICAgICB9XG5cbiAgICAgIGVycm9yLm1lc3NhZ2UgPSAnTm90IGEgdmFsaWQgJyArIGRlZlR5cGUgKyAnIGRlZmluaXRpb24nO1xuICAgIH1cblxuICAgIHJldHVybiBlcnJvcjtcbiAgfSk7XG5cbiAgLy8gVHJlYXQgaW52YWxpZC9taXNzaW5nIHJlZmVyZW5jZXMgYXMgc3RydWN0dXJhbCBlcnJvcnNcbiAgXy5lYWNoKGFwaS5yZWZlcmVuY2VzLCBmdW5jdGlvbiAocmVmRGV0YWlscywgcmVmUHRyKSB7XG4gICAgdmFyIHJlZlBhdGggPSBKc29uUmVmcy5wYXRoRnJvbVB0cihyZWZQdHIpO1xuICAgIHZhciBlcnI7XG5cbiAgICBpZiAocmVmRGV0YWlscy5taXNzaW5nKSB7XG4gICAgICBlcnIgPSB7XG4gICAgICAgIGNvZGU6ICdVTlJFU09MVkFCTEVfUkVGRVJFTkNFJyxcbiAgICAgICAgbWVzc2FnZTogJ1JlZmVyZW5jZSBjb3VsZCBub3QgYmUgcmVzb2x2ZWQ6ICcgKyByZWZEZXRhaWxzLnVyaSxcbiAgICAgICAgcGF0aDogcmVmUGF0aC5jb25jYXQoJyRyZWYnKVxuICAgICAgfTtcblxuICAgICAgaWYgKF8uaGFzKHJlZkRldGFpbHMsICdlcnJvcicpKSB7XG4gICAgICAgIGVyci5lcnJvciA9IHJlZkRldGFpbHMuZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdHMuZXJyb3JzLnB1c2goZXJyKTtcbiAgICB9IGVsc2UgaWYgKHJlZkRldGFpbHMudHlwZSA9PT0gJ2ludmFsaWQnKSB7XG4gICAgICByZXN1bHRzLmVycm9ycy5wdXNoKHtcbiAgICAgICAgY29kZTogJ0lOVkFMSURfUkVGRVJFTkNFJyxcbiAgICAgICAgbWVzc2FnZTogcmVmRGV0YWlscy5lcnJvciB8fCAnSW52YWxpZCBKU09OIFJlZmVyZW5jZScsXG4gICAgICAgIHBhdGg6IHJlZlBhdGguY29uY2F0KCckcmVmJylcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoXy5oYXMocmVmRGV0YWlscywgJ3dhcm5pbmcnKSkge1xuICAgICAgLy8ganNvbi1yZWZzIG9ubHkgY3JlYXRlcyB3YXJuaW5ncyBmb3IgSlNPTiBSZWZlcmVuY2VzIHdpdGggc3VwZXJmbHVvdXMgcHJvcGVydGllcyB3aGljaCB3aWxsIGJlIGlnbm9yZWRcbiAgICAgIHJlc3VsdHMud2FybmluZ3MucHVzaCh7XG4gICAgICAgIGNvZGU6ICdFWFRSQV9SRUZFUkVOQ0VfUFJPUEVSVElFUycsXG4gICAgICAgIG1lc3NhZ2U6IHJlZkRldGFpbHMud2FybmluZyxcbiAgICAgICAgcGF0aDogcmVmUGF0aFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcmVzdWx0cztcbn1cblxuLyogU2NoZW1hIE9iamVjdCBWYWxpZGF0b3JzICovXG5cbmZ1bmN0aW9uIHZhbGlkYXRlQXJyYXlUeXBlSXRlbXNFeGlzdGVuY2UgKGFwaSwgcmVzcG9uc2UsIHNjaGVtYSwgcGF0aCkge1xuICBpZiAoc2NoZW1hLnR5cGUgPT09ICdhcnJheScgJiYgXy5pc1VuZGVmaW5lZChzY2hlbWEuaXRlbXMpKSB7XG4gICAgcmVzcG9uc2UuZXJyb3JzLnB1c2goe1xuICAgICAgY29kZTogJ09CSkVDVF9NSVNTSU5HX1JFUVVJUkVEX1BST1BFUlRZJyxcbiAgICAgIG1lc3NhZ2U6ICdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5OiBpdGVtcycsXG4gICAgICBwYXRoOiBwYXRoXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVEZWZhdWx0VmFsdWUgKGFwaSwgcmVzcG9uc2UsIHNjaGVtYSwgcGF0aCkge1xuICB2YXIgcmVzdWx0O1xuXG4gIGlmICghXy5pc1VuZGVmaW5lZChzY2hlbWEuZGVmYXVsdCkpIHtcbiAgICByZXN1bHQgPSBoZWxwZXJzLnZhbGlkYXRlQWdhaW5zdFNjaGVtYShoZWxwZXJzLmdldEpTT05TY2hlbWFWYWxpZGF0b3IoKSwgc2NoZW1hLCBzY2hlbWEuZGVmYXVsdCk7XG5cbiAgICBfLmZvckVhY2gocmVzdWx0LmVycm9ycywgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBlcnJvci5wYXRoID0gcGF0aC5jb25jYXQoZXJyb3IucGF0aC5jb25jYXQoJ2RlZmF1bHQnKSk7XG5cbiAgICAgIHJlc3BvbnNlLmVycm9ycy5wdXNoKGVycm9yKTtcbiAgICB9KTtcblxuICAgIF8uZm9yRWFjaChyZXN1bHQud2FybmluZ3MsIGZ1bmN0aW9uICh3YXJuaW5nKSB7XG4gICAgICB3YXJuaW5nLnBhdGggPSBwYXRoLmNvbmNhdCh3YXJuaW5nLnBhdGgucHVzaCgnZGVmYXVsdCcpKTtcblxuICAgICAgcmVzcG9uc2Uud2FybmluZ3MucHVzaCh3YXJuaW5nKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVNjaGVtYVByb3BlcnRpZXMgKGFwaSwgcmVzcG9uc2UsIHNjaGVtYSwgcGF0aCkge1xuICBfLmZvckVhY2goXy5kaWZmZXJlbmNlKHNjaGVtYS5yZXF1aXJlZCB8fCBbXSwgZ2V0U2NoZW1hUHJvcGVydGllcyhzY2hlbWEpKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXNwb25zZS5lcnJvcnMucHVzaCh7XG4gICAgICBjb2RlOiAnT0JKRUNUX01JU1NJTkdfUkVRVUlSRURfUFJPUEVSVFlfREVGSU5JVElPTicsXG4gICAgICBtZXNzYWdlOiAnTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBkZWZpbml0aW9uOiAnICsgbmFtZSxcbiAgICAgIHBhdGg6IHBhdGhcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIGFsbCByZWZlcmVuY2VzLlxuICpcbiAqICogSWRlbnRpZmllcyBjaXJjdWxhciBpbmhlcml0YW5jZSByZWZlcmVuY2VzXG4gKiAqIElkZW50aWZpZXMgdW5yZWZlcmVuY2VkIHJlZmVyZW5jZWFibGUgZGVmaW5pdGlvbnNcbiAqICogSWRlbnRpZmllcyB1bnJlc29sdmFibGUgcmVmZXJlbmNlc1xuICpcbiAqIEBwYXJhbSB7U3dhZ2dlckFwaX0gYXBpIC0gVGhlIFN3YWdnZXJBcGkgb2JqZWN0XG4gKlxuICogQHJldHVybnMge29iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIGVycm9ycyBhbmQgd2FybmluZ3Mgb2YgdGhlIHZhbGlkYXRpb25cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVSZWZlcmVuY2VzIChhcGkpIHtcbiAgdmFyIGluaGVyaXRhbmNlRGV0YWlscyA9IHt9O1xuICB2YXIgcmVmZXJlbmNlYWJsZSA9IFtdO1xuICB2YXIgcmVmZXJlbmNlcyA9IHt9O1xuICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgZXJyb3JzOiBbXSxcbiAgICB3YXJuaW5nczogW11cbiAgfTtcblxuICBmdW5jdGlvbiBhZGRBbmNlc3RvciAoZHNjLCBhbmMpIHtcbiAgICBpZiAoIV8uaGFzKGluaGVyaXRhbmNlRGV0YWlscywgZHNjKSkge1xuICAgICAgaW5oZXJpdGFuY2VEZXRhaWxzW2RzY10gPSB7XG4gICAgICAgIGxpbmVhZ2U6IFtdLFxuICAgICAgICBwYXJlbnRzOiBbXG4gICAgICAgICAgYW5jXG4gICAgICAgIF1cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGluaGVyaXRhbmNlRGV0YWlsc1tkc2NdLnBhcmVudHMucHVzaChhbmMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFJlZmVyZW5jZSAocmVmLCBwdHIpIHtcbiAgICBpZiAoXy5pbmRleE9mKHJlZmVyZW5jZXMsIHJlZikgPT09IC0xKSB7XG4gICAgICBpZiAoXy5pc1VuZGVmaW5lZChyZWZlcmVuY2VzW3JlZl0pKSB7XG4gICAgICAgIHJlZmVyZW5jZXNbcmVmXSA9IFtdO1xuICAgICAgfVxuXG4gICAgICAvLyBBZGQgcmVmZXJlbmNlcyB0byBhbmNlc3RvcnNcbiAgICAgIGlmIChyZWYuaW5kZXhPZignYWxsT2YnKSA+IC0xKSB7XG4gICAgICAgIGFkZFJlZmVyZW5jZShyZWYuc3Vic3RyaW5nKDAsIHJlZi5sYXN0SW5kZXhPZignL2FsbE9mJykpKTtcbiAgICAgIH1cblxuICAgICAgcmVmZXJlbmNlc1tyZWZdLnB1c2gocHRyKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVTZWN1cml0eVByb2Nlc3NvciAocGF0aCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc2VjdXJpdHksIGluZGV4KSB7XG4gICAgICBfLmZvckVhY2goc2VjdXJpdHksIGZ1bmN0aW9uIChzY29wZXMsIG5hbWUpIHtcbiAgICAgICAgdmFyIHNkUGF0aCA9IFsnc2VjdXJpdHlEZWZpbml0aW9ucycsIG5hbWVdO1xuICAgICAgICB2YXIgc2RQdHIgPSBKc29uUmVmcy5wYXRoVG9QdHIoc2RQYXRoKTtcbiAgICAgICAgdmFyIHNyUGF0aCA9IHBhdGguY29uY2F0KFtpbmRleC50b1N0cmluZygpLCBuYW1lXSk7XG5cbiAgICAgICAgLy8gSWRlbnRpZnkgbWlzc2luZyByZWZlcmVuY2UgdG8gdGhlIHNlY3VyaXR5IGRlZmluaXRpb25cbiAgICAgICAgaWYgKF8uaW5kZXhPZihyZWZlcmVuY2VhYmxlLCBzZFB0cikgPT09IC0xKSB7XG4gICAgICAgICAgcmVzcG9uc2UuZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgY29kZTogJ1VOUkVTT0xWQUJMRV9SRUZFUkVOQ0UnLFxuICAgICAgICAgICAgbWVzc2FnZTogJ1NlY3VyaXR5IGRlZmluaXRpb24gY291bGQgbm90IGJlIHJlc29sdmVkOiAnICsgbmFtZSxcbiAgICAgICAgICAgIHBhdGg6IHNyUGF0aFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZFJlZmVyZW5jZShzZFB0ciwgSnNvblJlZnMucGF0aFRvUHRyKHNyUGF0aCkpO1xuXG4gICAgICAgICAgXy5mb3JFYWNoKHNjb3BlcywgZnVuY3Rpb24gKHNjb3BlLCBzSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBzc3JQYXRoID0gc3JQYXRoLmNvbmNhdChzSW5kZXgudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB2YXIgc3NyUHRyID0gSnNvblJlZnMucGF0aFRvUHRyKHNkUGF0aC5jb25jYXQoWydzY29wZXMnLCBzY29wZV0pKTtcblxuICAgICAgICAgICAgaWYgKF8uaW5kZXhPZihyZWZlcmVuY2VhYmxlLCBzc3JQdHIpID09PSAtMSkge1xuICAgICAgICAgICAgICByZXNwb25zZS5lcnJvcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgY29kZTogJ1VOUkVTT0xWQUJMRV9SRUZFUkVOQ0UnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTZWN1cml0eSBzY29wZSBkZWZpbml0aW9uIGNvdWxkIG5vdCBiZSByZXNvbHZlZDogJyArIHNjb3BlLFxuICAgICAgICAgICAgICAgIHBhdGg6IHNzclBhdGhcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhZGRSZWZlcmVuY2UoSnNvblJlZnMucGF0aFRvUHRyKHNkUGF0aC5jb25jYXQoWydzY29wZXMnLCBzY29wZV0pKSwgc3NyUHRyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdhbGtMaW5lYWdlIChyb290LCBpZCwgbGluZWFnZSkge1xuICAgIHZhciBkZXRhaWxzID0gaW5oZXJpdGFuY2VEZXRhaWxzW2lkIHx8IHJvb3RdO1xuXG4gICAgaWYgKGRldGFpbHMpIHtcbiAgICAgIF8uZWFjaChkZXRhaWxzLnBhcmVudHMsIGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgbGluZWFnZS5wdXNoKHBhcmVudCk7XG5cbiAgICAgICAgaWYgKHJvb3QgIT09IHBhcmVudCkge1xuICAgICAgICAgIHdhbGtMaW5lYWdlKHJvb3QsIHBhcmVudCwgbGluZWFnZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIElkZW50aWZ5IHJlZmVyZW5jZWFibGUgZGVmaW5pdGlvbnNcbiAgXy5mb3JFYWNoKGFwaS5kZWZpbml0aW9uRnVsbHlSZXNvbHZlZC5kZWZpbml0aW9ucywgZnVuY3Rpb24gKGRlZiwgbmFtZSkge1xuICAgIHJlZmVyZW5jZWFibGUucHVzaChKc29uUmVmcy5wYXRoVG9QdHIoWydkZWZpbml0aW9ucycsIG5hbWVdKSk7XG4gIH0pO1xuXG4gIF8uZm9yRWFjaChhcGkuZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQucGFyYW1ldGVycywgZnVuY3Rpb24gKGRlZiwgbmFtZSkge1xuICAgIHJlZmVyZW5jZWFibGUucHVzaChKc29uUmVmcy5wYXRoVG9QdHIoWydwYXJhbWV0ZXJzJywgbmFtZV0pKTtcbiAgfSk7XG5cbiAgXy5mb3JFYWNoKGFwaS5kZWZpbml0aW9uRnVsbHlSZXNvbHZlZC5yZXNwb25zZXMsIGZ1bmN0aW9uIChkZWYsIG5hbWUpIHtcbiAgICByZWZlcmVuY2VhYmxlLnB1c2goSnNvblJlZnMucGF0aFRvUHRyKFsncmVzcG9uc2VzJywgbmFtZV0pKTtcbiAgfSk7XG5cbiAgXy5mb3JFYWNoKGFwaS5kZWZpbml0aW9uRnVsbHlSZXNvbHZlZC5zZWN1cml0eURlZmluaXRpb25zLCBmdW5jdGlvbiAoZGVmLCBuYW1lKSB7XG4gICAgdmFyIHNQYXRoID0gWydzZWN1cml0eURlZmluaXRpb25zJywgbmFtZV07XG5cbiAgICByZWZlcmVuY2VhYmxlLnB1c2goSnNvblJlZnMucGF0aFRvUHRyKHNQYXRoKSk7XG5cbiAgICBfLmZvckVhY2goZGVmLnNjb3BlcywgZnVuY3Rpb24gKGRlc2NyaXB0aW9uLCBzY29wZSkge1xuICAgICAgdmFyIHB0ciA9IEpzb25SZWZzLnBhdGhUb1B0cihzUGF0aC5jb25jYXQoWydzY29wZXMnLCBzY29wZV0pKTtcblxuICAgICAgaWYgKF8uaW5kZXhPZihyZWZlcmVuY2VhYmxlLCBwdHIpID09PSAtMSkge1xuICAgICAgICByZWZlcmVuY2VhYmxlLnB1c2gocHRyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gSWRlbnRpZnkgcmVmZXJlbmNlcyBhbmQgYnVpbGQgaW5oZXJpdGFuY2UgbW9kZWxcbiAgXy5mb3JFYWNoKGFwaS5yZWZlcmVuY2VzLCBmdW5jdGlvbiAobWV0YWRhdGEsIHB0cikge1xuICAgIHZhciBwdHJQYXRoID0gSnNvblJlZnMucGF0aEZyb21QdHIocHRyKTtcblxuICAgIGlmICghXy5oYXMobWV0YWRhdGEsICdtaXNzaW5nJykpIHtcbiAgICAgIGFkZFJlZmVyZW5jZShtZXRhZGF0YS51cmksIHB0cik7XG5cbiAgICAgIGlmIChwdHJQYXRoW3B0clBhdGgubGVuZ3RoIC0gMl0gPT09ICdhbGxPZicpIHtcbiAgICAgICAgYWRkQW5jZXN0b3IoSnNvblJlZnMucGF0aFRvUHRyKHB0clBhdGguc2xpY2UoMCwgcHRyUGF0aC5sZW5ndGggLSAyKSksIG1ldGFkYXRhLnVyaSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyBJZGVudGlmeSBjaXJjdWxhciBpbmhlcml0YW5jZVxuICBfLmZvckVhY2goaW5oZXJpdGFuY2VEZXRhaWxzLCBmdW5jdGlvbiAoZGV0YWlscywgcHRyKSB7XG4gICAgd2Fsa0xpbmVhZ2UocHRyLCB1bmRlZmluZWQsIGRldGFpbHMubGluZWFnZSk7XG5cbiAgICBpZiAoZGV0YWlscy5saW5lYWdlLmxlbmd0aCA+IDEgJiYgZGV0YWlscy5saW5lYWdlW2RldGFpbHMubGluZWFnZS5sZW5ndGggLSAxXSA9PT0gcHRyIHx8XG4gICAgICAgIGRldGFpbHMucGFyZW50c1swXSA9PT0gcHRyKSB7XG4gICAgICByZXNwb25zZS5lcnJvcnMucHVzaCh7XG4gICAgICAgIGNvZGU6ICdDSVJDVUxBUl9JTkhFUklUQU5DRScsXG4gICAgICAgIGxpbmVhZ2U6IFtwdHJdLmNvbmNhdChkZXRhaWxzLmxpbmVhZ2UpLFxuICAgICAgICBtZXNzYWdlOiAnU2NoZW1hIG9iamVjdCBpbmhlcml0cyBmcm9tIGl0c2VsZjogJyArIHB0cixcbiAgICAgICAgcGF0aDogSnNvblJlZnMucGF0aEZyb21QdHIocHRyKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBJZGVudGlmeSByZWZlcmVuY2VzIGFuZCB2YWxpZGF0ZSBtaXNzaW5nIHJlZmVyZW5jZXMgZm9yIG5vbi1KU09OIFJlZmVyZW5jZXMgKHNlY3VyaXR5KVxuICBfLmZvckVhY2goYXBpLmRlZmluaXRpb25GdWxseVJlc29sdmVkLnNlY3VyaXR5LCBjcmVhdGVTZWN1cml0eVByb2Nlc3NvcihbJ3NlY3VyaXR5J10pKTtcblxuICBfLmZvckVhY2goYXBpLmRlZmluaXRpb25GdWxseVJlc29sdmVkLnBhdGhzLCBmdW5jdGlvbiAocGF0aERlZiwgbmFtZSkge1xuICAgIHZhciBwUGF0aCA9IFsncGF0aHMnLCBuYW1lXTtcblxuICAgIF8uZm9yRWFjaChwYXRoRGVmLnNlY3VyaXR5LCBjcmVhdGVTZWN1cml0eVByb2Nlc3NvcihwUGF0aC5jb25jYXQoJ3NlY3VyaXR5JykpKTtcblxuICAgIF8uZm9yRWFjaChwYXRoRGVmLCBmdW5jdGlvbiAob3BlcmF0aW9uRGVmLCBtZXRob2QpIHtcbiAgICAgIC8vIERvIG5vdCBwcm9jZXNzIG5vbi1vcGVyYXRpb25zXG4gICAgICBpZiAoXy5pbmRleE9mKHN1cHBvcnRlZEh0dHBNZXRob2RzLCBtZXRob2QpID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF8uZm9yRWFjaChvcGVyYXRpb25EZWYuc2VjdXJpdHksXG4gICAgICAgICAgICAgICAgY3JlYXRlU2VjdXJpdHlQcm9jZXNzb3IocFBhdGguY29uY2F0KFttZXRob2QsICdzZWN1cml0eSddKSkpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBJZGVudGlmeSB1bnVzZWQgcmVmZXJlbmNlcyAobWlzc2luZyByZWZlcmVuY2VzIGFyZSBhbHJlYWR5IGhhbmRsZWQgYWJvdmUpXG4gIF8uZm9yRWFjaChfLmRpZmZlcmVuY2UocmVmZXJlbmNlYWJsZSwgT2JqZWN0LmtleXMocmVmZXJlbmNlcykpLCBmdW5jdGlvbiAocHRyKSB7XG4gICAgcmVzcG9uc2Uud2FybmluZ3MucHVzaCh7XG4gICAgICBjb2RlOiAnVU5VU0VEX0RFRklOSVRJT04nLFxuICAgICAgbWVzc2FnZTogJ0RlZmluaXRpb24gaXMgbm90IHVzZWQ6ICcgKyBwdHIsXG4gICAgICBwYXRoOiBKc29uUmVmcy5wYXRoRnJvbVB0cihwdHIpXG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiByZXNwb25zZTtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZXMgYWxsIHNjaGVtYSBvYmplY3RzIGFuZCBzY2hlbWEtbGlrZSBvYmplY3RzIChub24tYm9keSBwYXRoIHBhcmFtZXRlcnMpLlxuICpcbiAqICogVmFsaWRhdGVzIGNpcmN1bGFyIHJlZmVyZW5jZXMgcmVsYXRlZCB0byBjb21wb3NpdGlvbi9pbmhlcml0YW5jZVxuICogKiBWYWxpZGF0ZXMgdGhhdCBhbGwgYXJyYXkgdHlwZXMgaGF2ZSB0aGVpciByZXF1aXJlZCBpdGVtcyBwcm9wZXJ0eVxuICogICAgIChAc2VlIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1zcGVjL2lzc3Vlcy8xNzR9KVxuICogKiBWYWxpZGF0ZXMgdGhhdCBhbGwgZGVmYXVsdCB2YWx1ZXMgYXJlIHZhbGlkIGJhc2VkIG9uIGl0cyByZXNwZWN0aXZlIHNjaGVtYVxuICpcbiAqIEBwYXJhbSB7U3dhZ2dlckFwaX0gYXBpIC0gVGhlIFN3YWdnZXJBcGkgb2JqZWN0XG4gKlxuICogQHJldHVybnMge29iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIGVycm9ycyBhbmQgd2FybmluZ3Mgb2YgdGhlIHZhbGlkYXRpb25cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVTY2hlbWFPYmplY3RzIChhcGkpIHtcbiAgLy8gQnVpbGQgYSBibGFja2xpc3QgdG8gYXZvaWQgY2FzY2FkaW5nIGVycm9ycy93YXJuaW5nc1xuICB2YXIgYmxhY2tsaXN0ID0gXy5yZWR1Y2UoYXBpLnJlZmVyZW5jZXMsIGZ1bmN0aW9uIChsaXN0LCBtZXRhZGF0YSwgcHRyKSB7XG4gICAgdmFyIHJlZlBhdGggPSBKc29uUmVmcy5wYXRoRnJvbVB0cihwdHIpO1xuXG4gICAgbGlzdC5wdXNoKEpzb25SZWZzLnBhdGhUb1B0cihyZWZQYXRoKSk7XG5cbiAgICByZXR1cm4gbGlzdDtcbiAgfSwgW10pO1xuICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgZXJyb3JzOiBbXSxcbiAgICB3YXJuaW5nczogW11cbiAgfTtcbiAgdmFyIHZhbGlkYXRvcnMgPSBbXG4gICAgdmFsaWRhdGVBcnJheVR5cGVJdGVtc0V4aXN0ZW5jZSxcbiAgICB2YWxpZGF0ZURlZmF1bHRWYWx1ZSxcbiAgICB2YWxpZGF0ZVNjaGVtYVByb3BlcnRpZXNcbiAgXTtcblxuICBmdW5jdGlvbiB2YWxpZGF0ZVBhcmFtZXRlcnMgKHBhcmFtZXRlcnMsIHBhdGgpIHtcbiAgICBfLmZvckVhY2gocGFyYW1ldGVycywgZnVuY3Rpb24gKHBhcmFtZXRlckRlZiwgbmFtZSkge1xuICAgICAgdmFyIHBQYXRoO1xuXG4gICAgICBpZiAoXy5pc051bWJlcihuYW1lKSkge1xuICAgICAgICBuYW1lID0gbmFtZS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBwUGF0aCA9IHBhdGguY29uY2F0KG5hbWUpO1xuXG4gICAgICAvLyBDcmVhdGUgSlNPTiBTY2hlbWEgZm9yIG5vbi1ib2R5IHBhcmFtZXRlcnNcbiAgICAgIGlmIChwYXJhbWV0ZXJEZWYuaW4gIT09ICdib2R5Jykge1xuICAgICAgICBwYXJhbWV0ZXJEZWYgPSBoZWxwZXJzLmNvbXB1dGVQYXJhbWV0ZXJTY2hlbWEocGFyYW1ldGVyRGVmKTtcbiAgICAgIH1cblxuICAgICAgd2Fsa1NjaGVtYShhcGksIGJsYWNrbGlzdCwgcGFyYW1ldGVyRGVmLCBwUGF0aCwgdmFsaWRhdG9ycywgcmVzcG9uc2UpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGVSZXNwb25zZXMgKHJlc3BvbnNlcywgcGF0aCkge1xuICAgIF8uZm9yRWFjaChyZXNwb25zZXMsIGZ1bmN0aW9uIChyZXNwb25zZURlZiwgbmFtZSkge1xuICAgICAgdmFyIHJQYXRoID0gcGF0aC5jb25jYXQobmFtZSk7XG5cbiAgICAgIF8uZm9yRWFjaChyZXNwb25zZURlZi5oZWFkZXJzLCBmdW5jdGlvbiAoaGVhZGVyLCBoTmFtZSkge1xuICAgICAgICB3YWxrU2NoZW1hKGFwaSwgYmxhY2tsaXN0LCBoZWFkZXIsIHJQYXRoLmNvbmNhdChbJ2hlYWRlcnMnLCBoTmFtZV0pLCB2YWxpZGF0b3JzLCByZXNwb25zZSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFfLmlzVW5kZWZpbmVkKHJlc3BvbnNlRGVmLnNjaGVtYSkpIHtcbiAgICAgICAgd2Fsa1NjaGVtYShhcGksIGJsYWNrbGlzdCwgcmVzcG9uc2VEZWYuc2NoZW1hLCByUGF0aC5jb25jYXQoJ3NjaGVtYScpLCB2YWxpZGF0b3JzLCByZXNwb25zZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvLyBWYWxpZGF0ZSBkZWZpbml0aW9uc1xuICBfLmZvckVhY2goYXBpLmRlZmluaXRpb25GdWxseVJlc29sdmVkLmRlZmluaXRpb25zLCBmdW5jdGlvbiAoZGVmaW5pdGlvbkRlZiwgbmFtZSkge1xuICAgIHdhbGtTY2hlbWEoYXBpLCBibGFja2xpc3QsIGRlZmluaXRpb25EZWYsIFsnZGVmaW5pdGlvbnMnLCBuYW1lXSwgdmFsaWRhdG9ycywgcmVzcG9uc2UpO1xuICB9KTtcblxuICAvLyBWYWxpZGF0ZSBnbG9iYWwgcGFyYW1ldGVyIGRlZmluaXRpb25zXG4gIHZhbGlkYXRlUGFyYW1ldGVycyhhcGkuZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQucGFyYW1ldGVycywgWydwYXJhbWV0ZXJzJ10pO1xuXG4gIC8vIFZhbGlkYXRlIGdsb2JhbCByZXNwb25zZSBkZWZpbml0aW9uc1xuICB2YWxpZGF0ZVJlc3BvbnNlcyhhcGkuZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQucmVzcG9uc2VzLCBbJ3Jlc3BvbnNlcyddKTtcblxuICAvLyBWYWxpZGF0ZSBwYXRocyBhbmQgb3BlcmF0aW9uc1xuICBfLmZvckVhY2goYXBpLmRlZmluaXRpb25GdWxseVJlc29sdmVkLnBhdGhzLCBmdW5jdGlvbiAocGF0aERlZiwgcGF0aCkge1xuICAgIHZhciBwUGF0aCA9IFsncGF0aHMnLCBwYXRoXTtcblxuICAgIC8vIFZhbGlkYXRlIHBhdGgtbGV2ZWwgcGFyYW1ldGVyIGRlZmluaXRpb25zXG4gICAgdmFsaWRhdGVQYXJhbWV0ZXJzKHBhdGhEZWYucGFyYW1ldGVycywgcFBhdGguY29uY2F0KCdwYXJhbWV0ZXJzJykpO1xuXG4gICAgXy5mb3JFYWNoKHBhdGhEZWYsIGZ1bmN0aW9uIChvcGVyYXRpb25EZWYsIG1ldGhvZCkge1xuICAgICAgdmFyIG9QYXRoID0gcFBhdGguY29uY2F0KG1ldGhvZCk7XG5cbiAgICAgIC8vIERvIG5vdCBwcm9jZXNzIG5vbi1vcGVyYXRpb25zXG4gICAgICBpZiAoXy5pbmRleE9mKHN1cHBvcnRlZEh0dHBNZXRob2RzLCBtZXRob2QpID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFZhbGlkYXRlIG9wZXJhdGlvbiBwYXJhbWV0ZXIgZGVmaW5pdGlvbnNcbiAgICAgIHZhbGlkYXRlUGFyYW1ldGVycyhvcGVyYXRpb25EZWYucGFyYW1ldGVycywgb1BhdGguY29uY2F0KCdwYXJhbWV0ZXJzJykpO1xuXG4gICAgICAvLyBWYWxpZGF0ZSBvcGVyYXRpb24gcmVzcG9uc2UgZGVmaW5pdGlvbnNcbiAgICAgIHZhbGlkYXRlUmVzcG9uc2VzKG9wZXJhdGlvbkRlZi5yZXNwb25zZXMsIG9QYXRoLmNvbmNhdCgncmVzcG9uc2VzJykpO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gcmVzcG9uc2U7XG59XG5cbi8qKlxuICogVmFsaWRhdGVzIHBhdGhzIGFuZCBvcGVyYXRpb25zIChXcml0dGVuIGFzIG9uZSB2YWxpZGF0b3IgdG8gYXZvaWQgbXVsdGlwbGUgcGFzc2VzKVxuICpcbiAqICogRW5zdXJlIHRoYXQgcGF0aCBwYXJhbWV0ZXJzIGFyZSBkZWZpbmVkIGZvciBlYWNoIHBhdGggcGFyYW1ldGVyIGRlY2xhcmF0aW9uXG4gKiAqIEVuc3VyZSB0aGF0IGRlZmluZWQgcGF0aCBwYXJhbWV0ZXJzIG1hdGNoIGEgZGVjbGFyZWQgcGF0aCBwYXJhbWV0ZXJcbiAqICogRW5zdXJlIHRoYXQgcGF0aHMgYXJlIGZ1bmN0aW9uYWxseSBkaWZmZXJlbnRcbiAqICogRW5zdXJlIHRoYXQgYW4gb3BlcmF0aW9uIG9ubHkgaGFzIG9uZSBib2R5IHBhcmFtZXRlclxuICogKiBFbnN1cmUgdGhhdCBhbiBvcGVyYXRpb24gaGFzIG9ubHkgYSBib2R5IG9yIGZvcm1EYXRhIHBhcmFtZXRlciBidXQgbm90IGJvdGhcbiAqICogRW5zdXJlIHRoYXQgYWxsIG9wZXJhdGlvbiBwYXJhbWV0ZXJzIGFyZSB1bmlxdWUgKGluICsgbmFtZSlcbiAqICogRW5zdXJlIHRoYXQgYWxsIG9wZXJhdGlvbiBpZHMgYXJlIHVuaXF1ZVxuICogKiBFbnN1cmUgdGhhdCBwYXRoIHBhcmFtZXRlcnMgaGF2ZSBhIG5hbWVcbiAqXG4gKiBAcGFyYW0ge1N3YWdnZXJBcGl9IGFwaSAtIFRoZSBTd2FnZ2VyQXBpIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IE9iamVjdCBjb250YWluaW5nIHRoZSBlcnJvcnMgYW5kIHdhcm5pbmdzIG9mIHRoZSB2YWxpZGF0aW9uXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUGF0aHNBbmRPcGVyYXRpb25zIChhcGkpIHtcbiAgdmFyIHJlc3BvbnNlID0ge1xuICAgIGVycm9yczogW10sXG4gICAgd2FybmluZ3M6IFtdXG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGVEdXBsaWNhdGVQYXJhbWV0ZXIgKHNlZW5QYXJhbWV0ZXJzLCBwYXJhbWV0ZXIsIHBhdGgpIHtcbiAgICB2YXIgcE5hbWUgPSBwYXJhbWV0ZXIuaW4gKyAnOicgKyBwYXJhbWV0ZXIubmFtZTtcblxuICAgIC8vIElkZW50aWZ5IGR1cGxpY2F0ZSBwYXJhbWV0ZXIgbmFtZXNcbiAgICBpZiAoXy5pbmRleE9mKHNlZW5QYXJhbWV0ZXJzLCBwTmFtZSkgPiAtMSkge1xuICAgICAgcmVzcG9uc2UuZXJyb3JzLnB1c2goe1xuICAgICAgICBjb2RlOiAnRFVQTElDQVRFX1BBUkFNRVRFUicsXG4gICAgICAgIG1lc3NhZ2U6ICdPcGVyYXRpb24gY2Fubm90IGhhdmUgZHVwbGljYXRlIHBhcmFtZXRlcnM6ICcgKyBKc29uUmVmcy5wYXRoVG9QdHIocGF0aCksXG4gICAgICAgIHBhdGg6IHBhdGhcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWVuUGFyYW1ldGVycy5wdXNoKHBOYW1lKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VlblBhcmFtZXRlcnM7XG4gIH1cblxuICBfLnJlZHVjZShhcGkuZGVmaW5pdGlvbkZ1bGx5UmVzb2x2ZWQucGF0aHMsIGZ1bmN0aW9uIChtZXRhZGF0YSwgcGF0aERlZiwgcGF0aCkge1xuICAgIHZhciBkZWNsYXJlZFBhdGhQYXJhbWV0ZXJzID0gW107XG4gICAgdmFyIG5vcm1hbGl6ZWRQYXRoID0gcGF0aDtcbiAgICB2YXIgcFBhdGggPSBbJ3BhdGhzJywgcGF0aF07XG5cbiAgICBfLmZvckVhY2gocGF0aC5tYXRjaCgvXFx7KC4qPylcXH0vZyksIGZ1bmN0aW9uIChhcmcsIGluZGV4KSB7XG4gICAgICAvLyBSZWNvcmQgdGhlIHBhdGggcGFyYW1ldGVyIG5hbWVcbiAgICAgIGRlY2xhcmVkUGF0aFBhcmFtZXRlcnMucHVzaChhcmcucmVwbGFjZSgvW3t9XS9nLCAnJykpO1xuXG4gICAgICAvLyBVcGRhdGUgdGhlIG5vcm1hbGl6ZWQgcGF0aFxuICAgICAgbm9ybWFsaXplZFBhdGggPSBub3JtYWxpemVkUGF0aC5yZXBsYWNlKGFyZywgJ2FyZycgKyBpbmRleCk7XG4gICAgfSk7XG5cbiAgICAvLyBJZGVudGlmeSBwYXRocyB3aXRoIGVtcHR5IHBhcmFtZXRlciBkZWNsYXJhdGlvbnNcbiAgICBpZiAoZGVjbGFyZWRQYXRoUGFyYW1ldGVycy5pbmRleE9mKCcnKSA+IC0xKSB7XG4gICAgICByZXNwb25zZS5lcnJvcnMucHVzaCh7XG4gICAgICAgIGNvZGU6ICdFTVBUWV9QQVRIX1BBUkFNRVRFUl9ERUNMQVJBVElPTicsXG4gICAgICAgIG1lc3NhZ2U6ICdQYXRoIHBhcmFtZXRlciBkZWNsYXJhdGlvbiBjYW5ub3QgYmUgZW1wdHk6ICcgKyBwYXRoLFxuICAgICAgICBwYXRoOiBbJ3BhdGhzJywgcGF0aF1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIElkZW5maXR5IHBhdGhzIHRoYXQgYXJlIGZ1bmN0aW9uYWxseSB0aGUgc2FtZVxuICAgIGlmIChfLmluZGV4T2YobWV0YWRhdGEucGF0aHMsIG5vcm1hbGl6ZWRQYXRoKSA+IC0xKSB7XG4gICAgICByZXNwb25zZS5lcnJvcnMucHVzaCh7XG4gICAgICAgIGNvZGU6ICdFUVVJVkFMRU5UX1BBVEgnLFxuICAgICAgICBtZXNzYWdlOiAnRXF1aXZhbGVudCBwYXRoIGFscmVhZHkgZXhpc3RzOiAnICsgcGF0aCxcbiAgICAgICAgcGF0aDogcFBhdGhcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZXRhZGF0YS5wYXRocy5wdXNoKG5vcm1hbGl6ZWRQYXRoKTtcbiAgICB9XG5cbiAgICAvLyBJZGVudGlmeSBkdXBsaWNhdGUgcGF0aC1sZXZlbCBwYXJhbWV0ZXJzIChXZSBkbyB0aGlzIG1hbnVhbGx5IHNpbmNlIFN3YWdnZXJBcGkjZ2V0T3BlcmF0aW9uIGNvbnNvbGlkYXRlcyB0aGVtKVxuICAgIF8ucmVkdWNlKHBhdGhEZWYucGFyYW1ldGVycywgZnVuY3Rpb24gKHNlZW5QYXJhbWV0ZXJzLCBwYXJhbWV0ZXIsIGluZGV4KSB7XG4gICAgICByZXR1cm4gdmFsaWRhdGVEdXBsaWNhdGVQYXJhbWV0ZXIoc2VlblBhcmFtZXRlcnMsIHBhcmFtZXRlciwgcFBhdGguY29uY2F0KFsncGFyYW1ldGVycycsIGluZGV4LnRvU3RyaW5nKCldKSk7XG4gICAgfSwgW10pO1xuXG4gICAgXy5mb3JFYWNoKHBhdGhEZWYsIGZ1bmN0aW9uIChvcGVyYXRpb25EZWYsIG1ldGhvZCkge1xuICAgICAgdmFyIGRlZmluZWRQYXRoUGFyYW1ldGVycyA9IHt9O1xuICAgICAgdmFyIG9QYXRoID0gcFBhdGguY29uY2F0KG1ldGhvZCk7XG4gICAgICB2YXIgb3BlcmF0aW9uSWQgPSBvcGVyYXRpb25EZWYub3BlcmF0aW9uSWQ7XG4gICAgICB2YXIgcGF0aE1ldGFkYXRhO1xuICAgICAgdmFyIHBhcmFtZXRlcnM7XG5cbiAgICAgIC8vIERvIG5vdCBwcm9jZXNzIG5vbi1vcGVyYXRpb25zXG4gICAgICBpZiAoXy5pbmRleE9mKHN1cHBvcnRlZEh0dHBNZXRob2RzLCBtZXRob2QpID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIElkZW50aWZ5IGR1cGxpY2F0ZSBvcGVyYXRpb25JZHNcbiAgICAgIGlmICghXy5pc1VuZGVmaW5lZChvcGVyYXRpb25JZCkpIHtcbiAgICAgICAgaWYgKF8uaW5kZXhPZihtZXRhZGF0YS5vcGVyYXRpb25JZHMsIG9wZXJhdGlvbklkKSAhPT0gLTEpIHtcbiAgICAgICAgICByZXNwb25zZS5lcnJvcnMucHVzaCh7XG4gICAgICAgICAgICBjb2RlOiAnRFVQTElDQVRFX09QRVJBVElPTklEJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdDYW5ub3QgaGF2ZSBtdWx0aXBsZSBvcGVyYXRpb25zIHdpdGggdGhlIHNhbWUgb3BlcmF0aW9uSWQ6ICcgKyBvcGVyYXRpb25JZCxcbiAgICAgICAgICAgIHBhdGg6IG9QYXRoLmNvbmNhdChbJ29wZXJhdGlvbklkJ10pXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWV0YWRhdGEub3BlcmF0aW9uSWRzLnB1c2gob3BlcmF0aW9uSWQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElkZW50aWZ5IGR1cGxpY2F0ZSBvcGVyYXRpb24tbGV2ZWwgcGFyYW1ldGVycyAoV2UgZG8gdGhpcyBtYW51YWxseSBmb3IgdGhlIHNhbWUgcmVhc29ucyBhYm92ZSlcbiAgICAgIF8ucmVkdWNlKG9wZXJhdGlvbkRlZi5wYXJhbWV0ZXJzLCBmdW5jdGlvbiAoc2VlblBhcmFtZXRlcnMsIHBhcmFtZXRlciwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlRHVwbGljYXRlUGFyYW1ldGVyKHNlZW5QYXJhbWV0ZXJzLCBwYXJhbWV0ZXIsIG9QYXRoLmNvbmNhdChbJ3BhcmFtZXRlcnMnLCBpbmRleC50b1N0cmluZygpXSkpO1xuICAgICAgfSwgW10pO1xuXG4gICAgICAvLyBVc2UgU3dhZ2dlckFwaSNnZXRPcGVyYXRpb24gdG8gYXZvaWQgaGF2aW5nIHRvIGNvbnNvbGlkYXRlIHBhcmFtZXRlcnNcbiAgICAgIHBhcmFtZXRlcnMgPSBhcGkuZ2V0T3BlcmF0aW9uKHBhdGgsIG1ldGhvZCkuZ2V0UGFyYW1ldGVycygpO1xuXG4gICAgICBwYXRoTWV0YWRhdGEgPSBfLnJlZHVjZShwYXJhbWV0ZXJzLCBmdW5jdGlvbiAocE1ldGFkYXRhLCBwYXJhbWV0ZXIpIHtcbiAgICAgICAgLy8gUmVjb3JkIHBhdGggcGFyYW1ldGVyc1xuICAgICAgICBpZiAocGFyYW1ldGVyLmluID09PSAncGF0aCcpIHtcbiAgICAgICAgICBkZWZpbmVkUGF0aFBhcmFtZXRlcnNbcGFyYW1ldGVyLm5hbWVdID0gcGFyYW1ldGVyLnB0cjtcbiAgICAgICAgfSBlbHNlIGlmIChwYXJhbWV0ZXIuaW4gPT09ICdib2R5Jykge1xuICAgICAgICAgIHBNZXRhZGF0YS5ib2R5UGFyYW1ldGV0ZXJzICs9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAocGFyYW1ldGVyLmluID09PSAnZm9ybURhdGEnKSB7XG4gICAgICAgICAgcE1ldGFkYXRhLmZvcm1QYXJhbWV0ZXJzICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcE1ldGFkYXRhO1xuICAgICAgfSwge2JvZHlQYXJhbWV0ZXRlcnM6IDAsIGZvcm1QYXJhbWV0ZXJzOiAwfSk7XG5cbiAgICAgIC8vIElkZW50aWZ5IG11bHRpcGxlIGJvZHkgcGFyYW1ldGVyc1xuICAgICAgaWYgKHBhdGhNZXRhZGF0YS5ib2R5UGFyYW1ldGV0ZXJzID4gMSkge1xuICAgICAgICByZXNwb25zZS5lcnJvcnMucHVzaCh7XG4gICAgICAgICAgY29kZTogJ01VTFRJUExFX0JPRFlfUEFSQU1FVEVSUycsXG4gICAgICAgICAgbWVzc2FnZTogJ09wZXJhdGlvbiBjYW5ub3QgaGF2ZSBtdWx0aXBsZSBib2R5IHBhcmFtZXRlcnMnLFxuICAgICAgICAgIHBhdGg6IG9QYXRoXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBJZGVudGlmeSBoYXZpbmcgYm90aCBhIGJvZHkgYW5kIGEgZm9ybSBwYXJhbWV0ZXJcbiAgICAgIGlmIChwYXRoTWV0YWRhdGEuYm9keVBhcmFtZXRldGVycyA+IDAgJiYgcGF0aE1ldGFkYXRhLmZvcm1QYXJhbWV0ZXJzID4gMCkge1xuICAgICAgICByZXNwb25zZS5lcnJvcnMucHVzaCh7XG4gICAgICAgICAgY29kZTogJ0lOVkFMSURfUEFSQU1FVEVSX0NPTUJJTkFUSU9OJyxcbiAgICAgICAgICBtZXNzYWdlOiAnT3BlcmF0aW9uIGNhbm5vdCBoYXZlIGEgYm9keSBwYXJhbWV0ZXIgYW5kIGEgZm9ybURhdGEgcGFyYW1ldGVyJyxcbiAgICAgICAgICBwYXRoOiBvUGF0aFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gSWRlbnRpZnkgdW5kZWZpbmVkIHBhdGggcGFyYW1ldGVyc1xuICAgICAgXy5mb3JFYWNoKF8uZGlmZmVyZW5jZShkZWNsYXJlZFBhdGhQYXJhbWV0ZXJzLCBfLmtleXMoZGVmaW5lZFBhdGhQYXJhbWV0ZXJzKSksIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJlc3BvbnNlLmVycm9ycy5wdXNoKHtcbiAgICAgICAgICBjb2RlOiAnTUlTU0lOR19QQVRIX1BBUkFNRVRFUl9ERUZJTklUSU9OJyxcbiAgICAgICAgICBtZXNzYWdlOiAnUGF0aCBwYXJhbWV0ZXIgaXMgZGVjbGFyZWQgYnV0IGlzIG5vdCBkZWZpbmVkOiAnICsgbmFtZSxcbiAgICAgICAgICBwYXRoOiBvUGF0aFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBJZGVudGlmeSB1bmRlY2xhcmVkIHBhdGggcGFyYW1ldGVyc1xuICAgICAgXy5mb3JFYWNoKF8uZGlmZmVyZW5jZShfLmtleXMoZGVmaW5lZFBhdGhQYXJhbWV0ZXJzKSwgZGVjbGFyZWRQYXRoUGFyYW1ldGVycyksIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJlc3BvbnNlLmVycm9ycy5wdXNoKHtcbiAgICAgICAgICBjb2RlOiAnTUlTU0lOR19QQVRIX1BBUkFNRVRFUl9ERUNMQVJBVElPTicsXG4gICAgICAgICAgbWVzc2FnZTogJ1BhdGggcGFyYW1ldGVyIGlzIGRlZmluZWQgYnV0IGlzIG5vdCBkZWNsYXJlZDogJyArIG5hbWUsXG4gICAgICAgICAgcGF0aDogSnNvblJlZnMucGF0aEZyb21QdHIoZGVmaW5lZFBhdGhQYXJhbWV0ZXJzW25hbWVdKVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9LCB7cGF0aHM6IFtdLCBvcGVyYXRpb25JZHM6IFtdfSk7XG5cbiAgcmV0dXJuIHJlc3BvbnNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAganNvblNjaGVtYVZhbGlkYXRvcjogdmFsaWRhdGVTdHJ1Y3R1cmUsXG4gIHNlbWFudGljVmFsaWRhdG9yczogW1xuICAgIHZhbGlkYXRlUmVmZXJlbmNlcyxcbiAgICB2YWxpZGF0ZVNjaGVtYU9iamVjdHMsXG4gICAgdmFsaWRhdGVQYXRoc0FuZE9wZXJhdGlvbnNcbiAgXVxufTtcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklpSXNJbVpwYkdVaU9pSmxiWEIwZVM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJYWDA9IiwiLyohIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZSB2MS40LjEgYnkgQG1hdGhpYXMgKi9cbjsoZnVuY3Rpb24ocm9vdCkge1xuXG5cdC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgKi9cblx0dmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJlxuXHRcdCFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cdHZhciBmcmVlTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiZcblx0XHQhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblx0dmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbDtcblx0aWYgKFxuXHRcdGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8XG5cdFx0ZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwgfHxcblx0XHRmcmVlR2xvYmFsLnNlbGYgPT09IGZyZWVHbG9iYWxcblx0KSB7XG5cdFx0cm9vdCA9IGZyZWVHbG9iYWw7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGBwdW55Y29kZWAgb2JqZWN0LlxuXHQgKiBAbmFtZSBwdW55Y29kZVxuXHQgKiBAdHlwZSBPYmplY3Rcblx0ICovXG5cdHZhciBwdW55Y29kZSxcblxuXHQvKiogSGlnaGVzdCBwb3NpdGl2ZSBzaWduZWQgMzItYml0IGZsb2F0IHZhbHVlICovXG5cdG1heEludCA9IDIxNDc0ODM2NDcsIC8vIGFrYS4gMHg3RkZGRkZGRiBvciAyXjMxLTFcblxuXHQvKiogQm9vdHN0cmluZyBwYXJhbWV0ZXJzICovXG5cdGJhc2UgPSAzNixcblx0dE1pbiA9IDEsXG5cdHRNYXggPSAyNixcblx0c2tldyA9IDM4LFxuXHRkYW1wID0gNzAwLFxuXHRpbml0aWFsQmlhcyA9IDcyLFxuXHRpbml0aWFsTiA9IDEyOCwgLy8gMHg4MFxuXHRkZWxpbWl0ZXIgPSAnLScsIC8vICdcXHgyRCdcblxuXHQvKiogUmVndWxhciBleHByZXNzaW9ucyAqL1xuXHRyZWdleFB1bnljb2RlID0gL154bi0tLyxcblx0cmVnZXhOb25BU0NJSSA9IC9bXlxceDIwLVxceDdFXS8sIC8vIHVucHJpbnRhYmxlIEFTQ0lJIGNoYXJzICsgbm9uLUFTQ0lJIGNoYXJzXG5cdHJlZ2V4U2VwYXJhdG9ycyA9IC9bXFx4MkVcXHUzMDAyXFx1RkYwRVxcdUZGNjFdL2csIC8vIFJGQyAzNDkwIHNlcGFyYXRvcnNcblxuXHQvKiogRXJyb3IgbWVzc2FnZXMgKi9cblx0ZXJyb3JzID0ge1xuXHRcdCdvdmVyZmxvdyc6ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2VzcycsXG5cdFx0J25vdC1iYXNpYyc6ICdJbGxlZ2FsIGlucHV0ID49IDB4ODAgKG5vdCBhIGJhc2ljIGNvZGUgcG9pbnQpJyxcblx0XHQnaW52YWxpZC1pbnB1dCc6ICdJbnZhbGlkIGlucHV0J1xuXHR9LFxuXG5cdC8qKiBDb252ZW5pZW5jZSBzaG9ydGN1dHMgKi9cblx0YmFzZU1pbnVzVE1pbiA9IGJhc2UgLSB0TWluLFxuXHRmbG9vciA9IE1hdGguZmxvb3IsXG5cdHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUsXG5cblx0LyoqIFRlbXBvcmFyeSB2YXJpYWJsZSAqL1xuXHRrZXk7XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0LyoqXG5cdCAqIEEgZ2VuZXJpYyBlcnJvciB1dGlsaXR5IGZ1bmN0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgZXJyb3IgdHlwZS5cblx0ICogQHJldHVybnMge0Vycm9yfSBUaHJvd3MgYSBgUmFuZ2VFcnJvcmAgd2l0aCB0aGUgYXBwbGljYWJsZSBlcnJvciBtZXNzYWdlLlxuXHQgKi9cblx0ZnVuY3Rpb24gZXJyb3IodHlwZSkge1xuXHRcdHRocm93IG5ldyBSYW5nZUVycm9yKGVycm9yc1t0eXBlXSk7XG5cdH1cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGBBcnJheSNtYXBgIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeSBhcnJheVxuXHQgKiBpdGVtLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IGFycmF5IG9mIHZhbHVlcyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXAoYXJyYXksIGZuKSB7XG5cdFx0dmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0d2hpbGUgKGxlbmd0aC0tKSB7XG5cdFx0XHRyZXN1bHRbbGVuZ3RoXSA9IGZuKGFycmF5W2xlbmd0aF0pO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0LyoqXG5cdCAqIEEgc2ltcGxlIGBBcnJheSNtYXBgLWxpa2Ugd3JhcHBlciB0byB3b3JrIHdpdGggZG9tYWluIG5hbWUgc3RyaW5ncyBvciBlbWFpbFxuXHQgKiBhZGRyZXNzZXMuXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBkb21haW4gVGhlIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeVxuXHQgKiBjaGFyYWN0ZXIuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgc3RyaW5nIG9mIGNoYXJhY3RlcnMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrXG5cdCAqIGZ1bmN0aW9uLlxuXHQgKi9cblx0ZnVuY3Rpb24gbWFwRG9tYWluKHN0cmluZywgZm4pIHtcblx0XHR2YXIgcGFydHMgPSBzdHJpbmcuc3BsaXQoJ0AnKTtcblx0XHR2YXIgcmVzdWx0ID0gJyc7XG5cdFx0aWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdC8vIEluIGVtYWlsIGFkZHJlc3Nlcywgb25seSB0aGUgZG9tYWluIG5hbWUgc2hvdWxkIGJlIHB1bnljb2RlZC4gTGVhdmVcblx0XHRcdC8vIHRoZSBsb2NhbCBwYXJ0IChpLmUuIGV2ZXJ5dGhpbmcgdXAgdG8gYEBgKSBpbnRhY3QuXG5cdFx0XHRyZXN1bHQgPSBwYXJ0c1swXSArICdAJztcblx0XHRcdHN0cmluZyA9IHBhcnRzWzFdO1xuXHRcdH1cblx0XHQvLyBBdm9pZCBgc3BsaXQocmVnZXgpYCBmb3IgSUU4IGNvbXBhdGliaWxpdHkuIFNlZSAjMTcuXG5cdFx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocmVnZXhTZXBhcmF0b3JzLCAnXFx4MkUnKTtcblx0XHR2YXIgbGFiZWxzID0gc3RyaW5nLnNwbGl0KCcuJyk7XG5cdFx0dmFyIGVuY29kZWQgPSBtYXAobGFiZWxzLCBmbikuam9pbignLicpO1xuXHRcdHJldHVybiByZXN1bHQgKyBlbmNvZGVkO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbnVtZXJpYyBjb2RlIHBvaW50cyBvZiBlYWNoIFVuaWNvZGVcblx0ICogY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcuIFdoaWxlIEphdmFTY3JpcHQgdXNlcyBVQ1MtMiBpbnRlcm5hbGx5LFxuXHQgKiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhIHBhaXIgb2Ygc3Vycm9nYXRlIGhhbHZlcyAoZWFjaCBvZiB3aGljaFxuXHQgKiBVQ1MtMiBleHBvc2VzIGFzIHNlcGFyYXRlIGNoYXJhY3RlcnMpIGludG8gYSBzaW5nbGUgY29kZSBwb2ludCxcblx0ICogbWF0Y2hpbmcgVVRGLTE2LlxuXHQgKiBAc2VlIGBwdW55Y29kZS51Y3MyLmVuY29kZWBcblx0ICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG5cdCAqIEBuYW1lIGRlY29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIFRoZSBVbmljb2RlIGlucHV0IHN0cmluZyAoVUNTLTIpLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBuZXcgYXJyYXkgb2YgY29kZSBwb2ludHMuXG5cdCAqL1xuXHRmdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHQgICAgY291bnRlciA9IDAsXG5cdFx0ICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG5cdFx0ICAgIHZhbHVlLFxuXHRcdCAgICBleHRyYTtcblx0XHR3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0dmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0aWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0XHQvLyBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXJcblx0XHRcdFx0ZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0XHRpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHRcblx0XHRcdFx0XHQvLyBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXJcblx0XHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHRcdFx0Y291bnRlci0tO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHN0cmluZyBiYXNlZCBvbiBhbiBhcnJheSBvZiBudW1lcmljIGNvZGUgcG9pbnRzLlxuXHQgKiBAc2VlIGBwdW55Y29kZS51Y3MyLmRlY29kZWBcblx0ICogQG1lbWJlck9mIHB1bnljb2RlLnVjczJcblx0ICogQG5hbWUgZW5jb2RlXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGNvZGVQb2ludHMgVGhlIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBuZXcgVW5pY29kZSBzdHJpbmcgKFVDUy0yKS5cblx0ICovXG5cdGZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0XHRyZXR1cm4gbWFwKGFycmF5LCBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0dmFyIG91dHB1dCA9ICcnO1xuXHRcdFx0aWYgKHZhbHVlID4gMHhGRkZGKSB7XG5cdFx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0XHR2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcblx0XHRcdHJldHVybiBvdXRwdXQ7XG5cdFx0fSkuam9pbignJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBiYXNpYyBjb2RlIHBvaW50IGludG8gYSBkaWdpdC9pbnRlZ2VyLlxuXHQgKiBAc2VlIGBkaWdpdFRvQmFzaWMoKWBcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGNvZGVQb2ludCBUaGUgYmFzaWMgbnVtZXJpYyBjb2RlIHBvaW50IHZhbHVlLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQgKGZvciB1c2UgaW5cblx0ICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpbiB0aGUgcmFuZ2UgYDBgIHRvIGBiYXNlIC0gMWAsIG9yIGBiYXNlYCBpZlxuXHQgKiB0aGUgY29kZSBwb2ludCBkb2VzIG5vdCByZXByZXNlbnQgYSB2YWx1ZS5cblx0ICovXG5cdGZ1bmN0aW9uIGJhc2ljVG9EaWdpdChjb2RlUG9pbnQpIHtcblx0XHRpZiAoY29kZVBvaW50IC0gNDggPCAxMCkge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDIyO1xuXHRcdH1cblx0XHRpZiAoY29kZVBvaW50IC0gNjUgPCAyNikge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDY1O1xuXHRcdH1cblx0XHRpZiAoY29kZVBvaW50IC0gOTcgPCAyNikge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludCAtIDk3O1xuXHRcdH1cblx0XHRyZXR1cm4gYmFzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGRpZ2l0L2ludGVnZXIgaW50byBhIGJhc2ljIGNvZGUgcG9pbnQuXG5cdCAqIEBzZWUgYGJhc2ljVG9EaWdpdCgpYFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gZGlnaXQgVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50LlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYmFzaWMgY29kZSBwb2ludCB3aG9zZSB2YWx1ZSAod2hlbiB1c2VkIGZvclxuXHQgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGlzIGBkaWdpdGAsIHdoaWNoIG5lZWRzIHRvIGJlIGluIHRoZSByYW5nZVxuXHQgKiBgMGAgdG8gYGJhc2UgLSAxYC4gSWYgYGZsYWdgIGlzIG5vbi16ZXJvLCB0aGUgdXBwZXJjYXNlIGZvcm0gaXNcblx0ICogdXNlZDsgZWxzZSwgdGhlIGxvd2VyY2FzZSBmb3JtIGlzIHVzZWQuIFRoZSBiZWhhdmlvciBpcyB1bmRlZmluZWRcblx0ICogaWYgYGZsYWdgIGlzIG5vbi16ZXJvIGFuZCBgZGlnaXRgIGhhcyBubyB1cHBlcmNhc2UgZm9ybS5cblx0ICovXG5cdGZ1bmN0aW9uIGRpZ2l0VG9CYXNpYyhkaWdpdCwgZmxhZykge1xuXHRcdC8vICAwLi4yNSBtYXAgdG8gQVNDSUkgYS4ueiBvciBBLi5aXG5cdFx0Ly8gMjYuLjM1IG1hcCB0byBBU0NJSSAwLi45XG5cdFx0cmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KSAtICgoZmxhZyAhPSAwKSA8PCA1KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBCaWFzIGFkYXB0YXRpb24gZnVuY3Rpb24gYXMgcGVyIHNlY3Rpb24gMy40IG9mIFJGQyAzNDkyLlxuXHQgKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ5MiNzZWN0aW9uLTMuNFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0ZnVuY3Rpb24gYWRhcHQoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7XG5cdFx0dmFyIGsgPSAwO1xuXHRcdGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7XG5cdFx0ZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpO1xuXHRcdGZvciAoLyogbm8gaW5pdGlhbGl6YXRpb24gKi87IGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMTsgayArPSBiYXNlKSB7XG5cdFx0XHRkZWx0YSA9IGZsb29yKGRlbHRhIC8gYmFzZU1pbnVzVE1pbik7XG5cdFx0fVxuXHRcdHJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scyB0byBhIHN0cmluZyBvZiBVbmljb2RlXG5cdCAqIHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuXHRcdC8vIERvbid0IHVzZSBVQ1MtMlxuXHRcdHZhciBvdXRwdXQgPSBbXSxcblx0XHQgICAgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGgsXG5cdFx0ICAgIG91dCxcblx0XHQgICAgaSA9IDAsXG5cdFx0ICAgIG4gPSBpbml0aWFsTixcblx0XHQgICAgYmlhcyA9IGluaXRpYWxCaWFzLFxuXHRcdCAgICBiYXNpYyxcblx0XHQgICAgaixcblx0XHQgICAgaW5kZXgsXG5cdFx0ICAgIG9sZGksXG5cdFx0ICAgIHcsXG5cdFx0ICAgIGssXG5cdFx0ICAgIGRpZ2l0LFxuXHRcdCAgICB0LFxuXHRcdCAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi9cblx0XHQgICAgYmFzZU1pbnVzVDtcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHM6IGxldCBgYmFzaWNgIGJlIHRoZSBudW1iZXIgb2YgaW5wdXQgY29kZVxuXHRcdC8vIHBvaW50cyBiZWZvcmUgdGhlIGxhc3QgZGVsaW1pdGVyLCBvciBgMGAgaWYgdGhlcmUgaXMgbm9uZSwgdGhlbiBjb3B5XG5cdFx0Ly8gdGhlIGZpcnN0IGJhc2ljIGNvZGUgcG9pbnRzIHRvIHRoZSBvdXRwdXQuXG5cblx0XHRiYXNpYyA9IGlucHV0Lmxhc3RJbmRleE9mKGRlbGltaXRlcik7XG5cdFx0aWYgKGJhc2ljIDwgMCkge1xuXHRcdFx0YmFzaWMgPSAwO1xuXHRcdH1cblxuXHRcdGZvciAoaiA9IDA7IGogPCBiYXNpYzsgKytqKSB7XG5cdFx0XHQvLyBpZiBpdCdzIG5vdCBhIGJhc2ljIGNvZGUgcG9pbnRcblx0XHRcdGlmIChpbnB1dC5jaGFyQ29kZUF0KGopID49IDB4ODApIHtcblx0XHRcdFx0ZXJyb3IoJ25vdC1iYXNpYycpO1xuXHRcdFx0fVxuXHRcdFx0b3V0cHV0LnB1c2goaW5wdXQuY2hhckNvZGVBdChqKSk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBkZWNvZGluZyBsb29wOiBzdGFydCBqdXN0IGFmdGVyIHRoZSBsYXN0IGRlbGltaXRlciBpZiBhbnkgYmFzaWMgY29kZVxuXHRcdC8vIHBvaW50cyB3ZXJlIGNvcGllZDsgc3RhcnQgYXQgdGhlIGJlZ2lubmluZyBvdGhlcndpc2UuXG5cblx0XHRmb3IgKGluZGV4ID0gYmFzaWMgPiAwID8gYmFzaWMgKyAxIDogMDsgaW5kZXggPCBpbnB1dExlbmd0aDsgLyogbm8gZmluYWwgZXhwcmVzc2lvbiAqLykge1xuXG5cdFx0XHQvLyBgaW5kZXhgIGlzIHRoZSBpbmRleCBvZiB0aGUgbmV4dCBjaGFyYWN0ZXIgdG8gYmUgY29uc3VtZWQuXG5cdFx0XHQvLyBEZWNvZGUgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlciBpbnRvIGBkZWx0YWAsXG5cdFx0XHQvLyB3aGljaCBnZXRzIGFkZGVkIHRvIGBpYC4gVGhlIG92ZXJmbG93IGNoZWNraW5nIGlzIGVhc2llclxuXHRcdFx0Ly8gaWYgd2UgaW5jcmVhc2UgYGlgIGFzIHdlIGdvLCB0aGVuIHN1YnRyYWN0IG9mZiBpdHMgc3RhcnRpbmdcblx0XHRcdC8vIHZhbHVlIGF0IHRoZSBlbmQgdG8gb2J0YWluIGBkZWx0YWAuXG5cdFx0XHRmb3IgKG9sZGkgPSBpLCB3ID0gMSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG5cblx0XHRcdFx0aWYgKGluZGV4ID49IGlucHV0TGVuZ3RoKSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ2ludmFsaWQtaW5wdXQnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRpZ2l0ID0gYmFzaWNUb0RpZ2l0KGlucHV0LmNoYXJDb2RlQXQoaW5kZXgrKykpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA+PSBiYXNlIHx8IGRpZ2l0ID4gZmxvb3IoKG1heEludCAtIGkpIC8gdykpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGkgKz0gZGlnaXQgKiB3O1xuXHRcdFx0XHR0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcblxuXHRcdFx0XHRpZiAoZGlnaXQgPCB0KSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRiYXNlTWludXNUID0gYmFzZSAtIHQ7XG5cdFx0XHRcdGlmICh3ID4gZmxvb3IobWF4SW50IC8gYmFzZU1pbnVzVCkpIHtcblx0XHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHcgKj0gYmFzZU1pbnVzVDtcblxuXHRcdFx0fVxuXG5cdFx0XHRvdXQgPSBvdXRwdXQubGVuZ3RoICsgMTtcblx0XHRcdGJpYXMgPSBhZGFwdChpIC0gb2xkaSwgb3V0LCBvbGRpID09IDApO1xuXG5cdFx0XHQvLyBgaWAgd2FzIHN1cHBvc2VkIHRvIHdyYXAgYXJvdW5kIGZyb20gYG91dGAgdG8gYDBgLFxuXHRcdFx0Ly8gaW5jcmVtZW50aW5nIGBuYCBlYWNoIHRpbWUsIHNvIHdlJ2xsIGZpeCB0aGF0IG5vdzpcblx0XHRcdGlmIChmbG9vcihpIC8gb3V0KSA+IG1heEludCAtIG4pIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdG4gKz0gZmxvb3IoaSAvIG91dCk7XG5cdFx0XHRpICU9IG91dDtcblxuXHRcdFx0Ly8gSW5zZXJ0IGBuYCBhdCBwb3NpdGlvbiBgaWAgb2YgdGhlIG91dHB1dFxuXHRcdFx0b3V0cHV0LnNwbGljZShpKyssIDAsIG4pO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVjczJlbmNvZGUob3V0cHV0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMgKGUuZy4gYSBkb21haW4gbmFtZSBsYWJlbCkgdG8gYVxuXHQgKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqL1xuXHRmdW5jdGlvbiBlbmNvZGUoaW5wdXQpIHtcblx0XHR2YXIgbixcblx0XHQgICAgZGVsdGEsXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50LFxuXHRcdCAgICBiYXNpY0xlbmd0aCxcblx0XHQgICAgYmlhcyxcblx0XHQgICAgaixcblx0XHQgICAgbSxcblx0XHQgICAgcSxcblx0XHQgICAgayxcblx0XHQgICAgdCxcblx0XHQgICAgY3VycmVudFZhbHVlLFxuXHRcdCAgICBvdXRwdXQgPSBbXSxcblx0XHQgICAgLyoqIGBpbnB1dExlbmd0aGAgd2lsbCBob2xkIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgaW4gYGlucHV0YC4gKi9cblx0XHQgICAgaW5wdXRMZW5ndGgsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsXG5cdFx0ICAgIGJhc2VNaW51c1QsXG5cdFx0ICAgIHFNaW51c1Q7XG5cblx0XHQvLyBDb252ZXJ0IHRoZSBpbnB1dCBpbiBVQ1MtMiB0byBVbmljb2RlXG5cdFx0aW5wdXQgPSB1Y3MyZGVjb2RlKGlucHV0KTtcblxuXHRcdC8vIENhY2hlIHRoZSBsZW5ndGhcblx0XHRpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDtcblxuXHRcdC8vIEluaXRpYWxpemUgdGhlIHN0YXRlXG5cdFx0biA9IGluaXRpYWxOO1xuXHRcdGRlbHRhID0gMDtcblx0XHRiaWFzID0gaW5pdGlhbEJpYXM7XG5cblx0XHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzXG5cdFx0Zm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdGN1cnJlbnRWYWx1ZSA9IGlucHV0W2pdO1xuXHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHtcblx0XHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGN1cnJlbnRWYWx1ZSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGhhbmRsZWRDUENvdW50ID0gYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoO1xuXG5cdFx0Ly8gYGhhbmRsZWRDUENvdW50YCBpcyB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIGhhbmRsZWQ7XG5cdFx0Ly8gYGJhc2ljTGVuZ3RoYCBpcyB0aGUgbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuXG5cdFx0Ly8gRmluaXNoIHRoZSBiYXNpYyBzdHJpbmcgLSBpZiBpdCBpcyBub3QgZW1wdHkgLSB3aXRoIGEgZGVsaW1pdGVyXG5cdFx0aWYgKGJhc2ljTGVuZ3RoKSB7XG5cdFx0XHRvdXRwdXQucHVzaChkZWxpbWl0ZXIpO1xuXHRcdH1cblxuXHRcdC8vIE1haW4gZW5jb2RpbmcgbG9vcDpcblx0XHR3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkge1xuXG5cdFx0XHQvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0XG5cdFx0XHQvLyBsYXJnZXIgb25lOlxuXHRcdFx0Zm9yIChtID0gbWF4SW50LCBqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRcdGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7XG5cdFx0XHRcdFx0bSA9IGN1cnJlbnRWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbmNyZWFzZSBgZGVsdGFgIGVub3VnaCB0byBhZHZhbmNlIHRoZSBkZWNvZGVyJ3MgPG4saT4gc3RhdGUgdG8gPG0sMD4sXG5cdFx0XHQvLyBidXQgZ3VhcmQgYWdhaW5zdCBvdmVyZmxvd1xuXHRcdFx0aGFuZGxlZENQQ291bnRQbHVzT25lID0gaGFuZGxlZENQQ291bnQgKyAxO1xuXHRcdFx0aWYgKG0gLSBuID4gZmxvb3IoKG1heEludCAtIGRlbHRhKSAvIGhhbmRsZWRDUENvdW50UGx1c09uZSkpIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdGRlbHRhICs9IChtIC0gbikgKiBoYW5kbGVkQ1BDb3VudFBsdXNPbmU7XG5cdFx0XHRuID0gbTtcblxuXHRcdFx0Zm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcblx0XHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA8IG4gJiYgKytkZWx0YSA+IG1heEludCkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA9PSBuKSB7XG5cdFx0XHRcdFx0Ly8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXJcblx0XHRcdFx0XHRmb3IgKHEgPSBkZWx0YSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG5cdFx0XHRcdFx0XHR0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcblx0XHRcdFx0XHRcdGlmIChxIDwgdCkge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHFNaW51c1QgPSBxIC0gdDtcblx0XHRcdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0XHRcdG91dHB1dC5wdXNoKFxuXHRcdFx0XHRcdFx0XHRzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCwgMCkpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cSA9IGZsb29yKHFNaW51c1QgLyBiYXNlTWludXNUKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEsIDApKSk7XG5cdFx0XHRcdFx0YmlhcyA9IGFkYXB0KGRlbHRhLCBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsIGhhbmRsZWRDUENvdW50ID09IGJhc2ljTGVuZ3RoKTtcblx0XHRcdFx0XHRkZWx0YSA9IDA7XG5cdFx0XHRcdFx0KytoYW5kbGVkQ1BDb3VudDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQrK2RlbHRhO1xuXHRcdFx0KytuO1xuXG5cdFx0fVxuXHRcdHJldHVybiBvdXRwdXQuam9pbignJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgb3IgYW4gZW1haWwgYWRkcmVzc1xuXHQgKiB0byBVbmljb2RlLiBPbmx5IHRoZSBQdW55Y29kZWQgcGFydHMgb2YgdGhlIGlucHV0IHdpbGwgYmUgY29udmVydGVkLCBpLmUuXG5cdCAqIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IG9uIGEgc3RyaW5nIHRoYXQgaGFzIGFscmVhZHkgYmVlblxuXHQgKiBjb252ZXJ0ZWQgdG8gVW5pY29kZS5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGVkIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG9cblx0ICogY29udmVydCB0byBVbmljb2RlLlxuXHQgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgVW5pY29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gUHVueWNvZGVcblx0ICogc3RyaW5nLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9Vbmljb2RlKGlucHV0KSB7XG5cdFx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0XHRyZXR1cm4gcmVnZXhQdW55Y29kZS50ZXN0KHN0cmluZylcblx0XHRcdFx0PyBkZWNvZGUoc3RyaW5nLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgVW5pY29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgb3IgYW4gZW1haWwgYWRkcmVzcyB0b1xuXHQgKiBQdW55Y29kZS4gT25seSB0aGUgbm9uLUFTQ0lJIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB3aWxsIGJlIGNvbnZlcnRlZCxcblx0ICogaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQncyBhbHJlYWR5IGluXG5cdCAqIEFTQ0lJLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvIGNvbnZlcnQsIGFzIGFcblx0ICogVW5pY29kZSBzdHJpbmcuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBQdW55Y29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gZG9tYWluIG5hbWUgb3Jcblx0ICogZW1haWwgYWRkcmVzcy5cblx0ICovXG5cdGZ1bmN0aW9uIHRvQVNDSUkoaW5wdXQpIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleE5vbkFTQ0lJLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/ICd4bi0tJyArIGVuY29kZShzdHJpbmcpXG5cdFx0XHRcdDogc3RyaW5nO1xuXHRcdH0pO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0LyoqIERlZmluZSB0aGUgcHVibGljIEFQSSAqL1xuXHRwdW55Y29kZSA9IHtcblx0XHQvKipcblx0XHQgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgUHVueWNvZGUuanMgdmVyc2lvbiBudW1iZXIuXG5cdFx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdFx0ICogQHR5cGUgU3RyaW5nXG5cdFx0ICovXG5cdFx0J3ZlcnNpb24nOiAnMS40LjEnLFxuXHRcdC8qKlxuXHRcdCAqIEFuIG9iamVjdCBvZiBtZXRob2RzIHRvIGNvbnZlcnQgZnJvbSBKYXZhU2NyaXB0J3MgaW50ZXJuYWwgY2hhcmFjdGVyXG5cdFx0ICogcmVwcmVzZW50YXRpb24gKFVDUy0yKSB0byBVbmljb2RlIGNvZGUgcG9pbnRzLCBhbmQgYmFjay5cblx0XHQgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cblx0XHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0XHQgKiBAdHlwZSBPYmplY3Rcblx0XHQgKi9cblx0XHQndWNzMic6IHtcblx0XHRcdCdkZWNvZGUnOiB1Y3MyZGVjb2RlLFxuXHRcdFx0J2VuY29kZSc6IHVjczJlbmNvZGVcblx0XHR9LFxuXHRcdCdkZWNvZGUnOiBkZWNvZGUsXG5cdFx0J2VuY29kZSc6IGVuY29kZSxcblx0XHQndG9BU0NJSSc6IHRvQVNDSUksXG5cdFx0J3RvVW5pY29kZSc6IHRvVW5pY29kZVxuXHR9O1xuXG5cdC8qKiBFeHBvc2UgYHB1bnljb2RlYCAqL1xuXHQvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBzcGVjaWZpYyBjb25kaXRpb24gcGF0dGVybnNcblx0Ly8gbGlrZSB0aGUgZm9sbG93aW5nOlxuXHRpZiAoXG5cdFx0dHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmXG5cdFx0dHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiZcblx0XHRkZWZpbmUuYW1kXG5cdCkge1xuXHRcdGRlZmluZSgncHVueWNvZGUnLCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBwdW55Y29kZTtcblx0XHR9KTtcblx0fSBlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiBmcmVlTW9kdWxlKSB7XG5cdFx0aWYgKG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzKSB7XG5cdFx0XHQvLyBpbiBOb2RlLmpzLCBpby5qcywgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSBwdW55Y29kZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gaW4gTmFyd2hhbCBvciBSaW5nb0pTIHYwLjcuMC1cblx0XHRcdGZvciAoa2V5IGluIHB1bnljb2RlKSB7XG5cdFx0XHRcdHB1bnljb2RlLmhhc093blByb3BlcnR5KGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSBwdW55Y29kZVtrZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Ly8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QucHVueWNvZGUgPSBwdW55Y29kZTtcblx0fVxuXG59KHRoaXMpKTtcbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG52YXIgS19NQVhfTEVOR1RIID0gMHg3ZmZmZmZmZlxuZXhwb3J0cy5rTWF4TGVuZ3RoID0gS19NQVhfTEVOR1RIXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFByaW50IHdhcm5pbmcgYW5kIHJlY29tbWVuZCB1c2luZyBgYnVmZmVyYCB2NC54IHdoaWNoIGhhcyBhbiBPYmplY3RcbiAqICAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIFdlIHJlcG9ydCB0aGF0IHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGlmIHRoZSBhcmUgbm90IHN1YmNsYXNzYWJsZVxuICogdXNpbmcgX19wcm90b19fLiBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YFxuICogKFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4KS4gSUUgMTAgbGFja3Mgc3VwcG9ydFxuICogZm9yIF9fcHJvdG9fXyBhbmQgaGFzIGEgYnVnZ3kgdHlwZWQgYXJyYXkgaW1wbGVtZW50YXRpb24uXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gdHlwZWRBcnJheVN1cHBvcnQoKVxuXG5pZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gIGNvbnNvbGUuZXJyb3IoXG4gICAgJ1RoaXMgYnJvd3NlciBsYWNrcyB0eXBlZCBhcnJheSAoVWludDhBcnJheSkgc3VwcG9ydCB3aGljaCBpcyByZXF1aXJlZCBieSAnICtcbiAgICAnYGJ1ZmZlcmAgdjUueC4gVXNlIGBidWZmZXJgIHY0LnggaWYgeW91IHJlcXVpcmUgb2xkIGJyb3dzZXIgc3VwcG9ydC4nXG4gIClcbn1cblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICAvLyBDYW4gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWQ/XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDJcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAncGFyZW50Jywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5idWZmZXJcbiAgfVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdvZmZzZXQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuICAgIHJldHVybiB0aGlzLmJ5dGVPZmZzZXRcbiAgfVxufSlcblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKGxlbmd0aCA+IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgdmFyIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgYnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGJ1ZlxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUoYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgdmFsdWU6IG51bGwsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuZnVuY3Rpb24gZnJvbSAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoaXNBcnJheUJ1ZmZlcih2YWx1ZSkgfHwgKHZhbHVlICYmIGlzQXJyYXlCdWZmZXIodmFsdWUuYnVmZmVyKSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gTm90ZTogQ2hhbmdlIHByb3RvdHlwZSAqYWZ0ZXIqIEJ1ZmZlci5mcm9tIGlzIGRlZmluZWQgdG8gd29ya2Fyb3VuZCBDaHJvbWUgYnVnOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC8xNDhcbkJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbkJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2Moc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlIChzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gYnVmLndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICBidWYgPSBidWYuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlIChhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgYnVmW2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJvZmZzZXRcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcImxlbmd0aFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICB2YXIgYnVmXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBidWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbilcblxuICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gYnVmXG4gICAgfVxuXG4gICAgb2JqLmNvcHkoYnVmLCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcob2JqKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgbnVtYmVySXNOYU4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcigwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgQXJyYXkuaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIEFycmF5LWxpa2UgT2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBLX01BWF9MRU5HVEhgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuIGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlciA9PT0gdHJ1ZVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhidWYpKSB7XG4gICAgICBidWYgPSBCdWZmZXIuZnJvbShidWYpXG4gICAgfVxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfVxuICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IGlzQXJyYXlCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCAoYW5kIHRoZSBgaXMtYnVmZmVyYCBucG0gcGFja2FnZSlcbi8vIHRvIGRldGVjdCBhIEJ1ZmZlciBpbnN0YW5jZS4gSXQncyBub3QgcG9zc2libGUgdG8gdXNlIGBpbnN0YW5jZW9mIEJ1ZmZlcmBcbi8vIHJlbGlhYmx5IGluIGEgYnJvd3NlcmlmeSBjb250ZXh0IGJlY2F1c2UgdGhlcmUgY291bGQgYmUgbXVsdGlwbGUgZGlmZmVyZW50XG4vLyBjb3BpZXMgb2YgdGhlICdidWZmZXInIHBhY2thZ2UgaW4gdXNlLiBUaGlzIG1ldGhvZCB3b3JrcyBldmVuIGZvciBCdWZmZXJcbi8vIGluc3RhbmNlcyB0aGF0IHdlcmUgY3JlYXRlZCBmcm9tIGFub3RoZXIgY29weSBvZiB0aGUgYGJ1ZmZlcmAgcGFja2FnZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE1NFxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZyA9IEJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmdcblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChudW1iZXJJc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChudW1iZXJJc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA+Pj4gMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIChieXRlc1tpICsgMV0gKiAyNTYpKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVVSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5mdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXInKVxuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFVzZSBidWlsdC1pbiB3aGVuIGF2YWlsYWJsZSwgbWlzc2luZyBmcm9tIElFMTFcbiAgICB0aGlzLmNvcHlXaXRoaW4odGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpXG4gIH0gZWxzZSBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHtcbiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmRcbiAgICBmb3IgKHZhciBpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmICgoZW5jb2RpbmcgPT09ICd1dGY4JyAmJiBjb2RlIDwgMTI4KSB8fFxuICAgICAgICAgIGVuY29kaW5nID09PSAnbGF0aW4xJykge1xuICAgICAgICAvLyBGYXN0IHBhdGg6IElmIGB2YWxgIGZpdHMgaW50byBhIHNpbmdsZSBieXRlLCB1c2UgdGhhdCBudW1lcmljIHZhbHVlLlxuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogbmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgdmFsdWUgXCInICsgdmFsICtcbiAgICAgICAgJ1wiIGlzIGludmFsaWQgZm9yIGFyZ3VtZW50IFwidmFsdWVcIicpXG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teKy8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgdGFrZXMgZXF1YWwgc2lnbnMgYXMgZW5kIG9mIHRoZSBCYXNlNjQgZW5jb2RpbmdcbiAgc3RyID0gc3RyLnNwbGl0KCc9JylbMF1cbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0ci50cmltKCkucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG4vLyBBcnJheUJ1ZmZlcnMgZnJvbSBhbm90aGVyIGNvbnRleHQgKGkuZS4gYW4gaWZyYW1lKSBkbyBub3QgcGFzcyB0aGUgYGluc3RhbmNlb2ZgIGNoZWNrXG4vLyBidXQgdGhleSBzaG91bGQgYmUgdHJlYXRlZCBhcyB2YWxpZC4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTY2XG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8XG4gICAgKG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSAnQXJyYXlCdWZmZXInICYmXG4gICAgICB0eXBlb2Ygb2JqLmJ5dGVMZW5ndGggPT09ICdudW1iZXInKVxufVxuXG5mdW5jdGlvbiBudW1iZXJJc05hTiAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG9iaiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwiMTAwXCI6IFwiQ29udGludWVcIixcbiAgXCIxMDFcIjogXCJTd2l0Y2hpbmcgUHJvdG9jb2xzXCIsXG4gIFwiMTAyXCI6IFwiUHJvY2Vzc2luZ1wiLFxuICBcIjIwMFwiOiBcIk9LXCIsXG4gIFwiMjAxXCI6IFwiQ3JlYXRlZFwiLFxuICBcIjIwMlwiOiBcIkFjY2VwdGVkXCIsXG4gIFwiMjAzXCI6IFwiTm9uLUF1dGhvcml0YXRpdmUgSW5mb3JtYXRpb25cIixcbiAgXCIyMDRcIjogXCJObyBDb250ZW50XCIsXG4gIFwiMjA1XCI6IFwiUmVzZXQgQ29udGVudFwiLFxuICBcIjIwNlwiOiBcIlBhcnRpYWwgQ29udGVudFwiLFxuICBcIjIwN1wiOiBcIk11bHRpLVN0YXR1c1wiLFxuICBcIjIwOFwiOiBcIkFscmVhZHkgUmVwb3J0ZWRcIixcbiAgXCIyMjZcIjogXCJJTSBVc2VkXCIsXG4gIFwiMzAwXCI6IFwiTXVsdGlwbGUgQ2hvaWNlc1wiLFxuICBcIjMwMVwiOiBcIk1vdmVkIFBlcm1hbmVudGx5XCIsXG4gIFwiMzAyXCI6IFwiRm91bmRcIixcbiAgXCIzMDNcIjogXCJTZWUgT3RoZXJcIixcbiAgXCIzMDRcIjogXCJOb3QgTW9kaWZpZWRcIixcbiAgXCIzMDVcIjogXCJVc2UgUHJveHlcIixcbiAgXCIzMDdcIjogXCJUZW1wb3JhcnkgUmVkaXJlY3RcIixcbiAgXCIzMDhcIjogXCJQZXJtYW5lbnQgUmVkaXJlY3RcIixcbiAgXCI0MDBcIjogXCJCYWQgUmVxdWVzdFwiLFxuICBcIjQwMVwiOiBcIlVuYXV0aG9yaXplZFwiLFxuICBcIjQwMlwiOiBcIlBheW1lbnQgUmVxdWlyZWRcIixcbiAgXCI0MDNcIjogXCJGb3JiaWRkZW5cIixcbiAgXCI0MDRcIjogXCJOb3QgRm91bmRcIixcbiAgXCI0MDVcIjogXCJNZXRob2QgTm90IEFsbG93ZWRcIixcbiAgXCI0MDZcIjogXCJOb3QgQWNjZXB0YWJsZVwiLFxuICBcIjQwN1wiOiBcIlByb3h5IEF1dGhlbnRpY2F0aW9uIFJlcXVpcmVkXCIsXG4gIFwiNDA4XCI6IFwiUmVxdWVzdCBUaW1lb3V0XCIsXG4gIFwiNDA5XCI6IFwiQ29uZmxpY3RcIixcbiAgXCI0MTBcIjogXCJHb25lXCIsXG4gIFwiNDExXCI6IFwiTGVuZ3RoIFJlcXVpcmVkXCIsXG4gIFwiNDEyXCI6IFwiUHJlY29uZGl0aW9uIEZhaWxlZFwiLFxuICBcIjQxM1wiOiBcIlBheWxvYWQgVG9vIExhcmdlXCIsXG4gIFwiNDE0XCI6IFwiVVJJIFRvbyBMb25nXCIsXG4gIFwiNDE1XCI6IFwiVW5zdXBwb3J0ZWQgTWVkaWEgVHlwZVwiLFxuICBcIjQxNlwiOiBcIlJhbmdlIE5vdCBTYXRpc2ZpYWJsZVwiLFxuICBcIjQxN1wiOiBcIkV4cGVjdGF0aW9uIEZhaWxlZFwiLFxuICBcIjQxOFwiOiBcIkknbSBhIHRlYXBvdFwiLFxuICBcIjQyMVwiOiBcIk1pc2RpcmVjdGVkIFJlcXVlc3RcIixcbiAgXCI0MjJcIjogXCJVbnByb2Nlc3NhYmxlIEVudGl0eVwiLFxuICBcIjQyM1wiOiBcIkxvY2tlZFwiLFxuICBcIjQyNFwiOiBcIkZhaWxlZCBEZXBlbmRlbmN5XCIsXG4gIFwiNDI1XCI6IFwiVW5vcmRlcmVkIENvbGxlY3Rpb25cIixcbiAgXCI0MjZcIjogXCJVcGdyYWRlIFJlcXVpcmVkXCIsXG4gIFwiNDI4XCI6IFwiUHJlY29uZGl0aW9uIFJlcXVpcmVkXCIsXG4gIFwiNDI5XCI6IFwiVG9vIE1hbnkgUmVxdWVzdHNcIixcbiAgXCI0MzFcIjogXCJSZXF1ZXN0IEhlYWRlciBGaWVsZHMgVG9vIExhcmdlXCIsXG4gIFwiNDUxXCI6IFwiVW5hdmFpbGFibGUgRm9yIExlZ2FsIFJlYXNvbnNcIixcbiAgXCI1MDBcIjogXCJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JcIixcbiAgXCI1MDFcIjogXCJOb3QgSW1wbGVtZW50ZWRcIixcbiAgXCI1MDJcIjogXCJCYWQgR2F0ZXdheVwiLFxuICBcIjUwM1wiOiBcIlNlcnZpY2UgVW5hdmFpbGFibGVcIixcbiAgXCI1MDRcIjogXCJHYXRld2F5IFRpbWVvdXRcIixcbiAgXCI1MDVcIjogXCJIVFRQIFZlcnNpb24gTm90IFN1cHBvcnRlZFwiLFxuICBcIjUwNlwiOiBcIlZhcmlhbnQgQWxzbyBOZWdvdGlhdGVzXCIsXG4gIFwiNTA3XCI6IFwiSW5zdWZmaWNpZW50IFN0b3JhZ2VcIixcbiAgXCI1MDhcIjogXCJMb29wIERldGVjdGVkXCIsXG4gIFwiNTA5XCI6IFwiQmFuZHdpZHRoIExpbWl0IEV4Y2VlZGVkXCIsXG4gIFwiNTEwXCI6IFwiTm90IEV4dGVuZGVkXCIsXG4gIFwiNTExXCI6IFwiTmV0d29yayBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZFwiXG59XG4iLCJcInVzZSBzdHJpY3RcIlxuXG52YXIgbmV4dCA9IChnbG9iYWwucHJvY2VzcyAmJiBwcm9jZXNzLm5leHRUaWNrKSB8fCBnbG9iYWwuc2V0SW1tZWRpYXRlIHx8IGZ1bmN0aW9uIChmKSB7XG4gIHNldFRpbWVvdXQoZiwgMClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtYXliZSAoY2IsIHByb21pc2UpIHtcbiAgaWYgKGNiKSB7XG4gICAgcHJvbWlzZVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICBuZXh0KGZ1bmN0aW9uICgpIHsgY2IobnVsbCwgcmVzdWx0KSB9KVxuICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICBuZXh0KGZ1bmN0aW9uICgpIHsgY2IoZXJyKSB9KVxuICAgICAgfSlcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgZWxzZSB7XG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5cbmZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTtcbiAgfVxuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IEJ1ZmZlci5pc0J1ZmZlcjtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnIzAwMDBDQycsICcjMDAwMEZGJywgJyMwMDMzQ0MnLCAnIzAwMzNGRicsICcjMDA2NkNDJywgJyMwMDY2RkYnLCAnIzAwOTlDQycsXG4gICcjMDA5OUZGJywgJyMwMENDMDAnLCAnIzAwQ0MzMycsICcjMDBDQzY2JywgJyMwMENDOTknLCAnIzAwQ0NDQycsICcjMDBDQ0ZGJyxcbiAgJyMzMzAwQ0MnLCAnIzMzMDBGRicsICcjMzMzM0NDJywgJyMzMzMzRkYnLCAnIzMzNjZDQycsICcjMzM2NkZGJywgJyMzMzk5Q0MnLFxuICAnIzMzOTlGRicsICcjMzNDQzAwJywgJyMzM0NDMzMnLCAnIzMzQ0M2NicsICcjMzNDQzk5JywgJyMzM0NDQ0MnLCAnIzMzQ0NGRicsXG4gICcjNjYwMENDJywgJyM2NjAwRkYnLCAnIzY2MzNDQycsICcjNjYzM0ZGJywgJyM2NkNDMDAnLCAnIzY2Q0MzMycsICcjOTkwMENDJyxcbiAgJyM5OTAwRkYnLCAnIzk5MzNDQycsICcjOTkzM0ZGJywgJyM5OUNDMDAnLCAnIzk5Q0MzMycsICcjQ0MwMDAwJywgJyNDQzAwMzMnLFxuICAnI0NDMDA2NicsICcjQ0MwMDk5JywgJyNDQzAwQ0MnLCAnI0NDMDBGRicsICcjQ0MzMzAwJywgJyNDQzMzMzMnLCAnI0NDMzM2NicsXG4gICcjQ0MzMzk5JywgJyNDQzMzQ0MnLCAnI0NDMzNGRicsICcjQ0M2NjAwJywgJyNDQzY2MzMnLCAnI0NDOTkwMCcsICcjQ0M5OTMzJyxcbiAgJyNDQ0NDMDAnLCAnI0NDQ0MzMycsICcjRkYwMDAwJywgJyNGRjAwMzMnLCAnI0ZGMDA2NicsICcjRkYwMDk5JywgJyNGRjAwQ0MnLFxuICAnI0ZGMDBGRicsICcjRkYzMzAwJywgJyNGRjMzMzMnLCAnI0ZGMzM2NicsICcjRkYzMzk5JywgJyNGRjMzQ0MnLCAnI0ZGMzNGRicsXG4gICcjRkY2NjAwJywgJyNGRjY2MzMnLCAnI0ZGOTkwMCcsICcjRkY5OTMzJywgJyNGRkNDMDAnLCAnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnWydkZWZhdWx0J10gPSBjcmVhdGVEZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIEFjdGl2ZSBgZGVidWdgIGluc3RhbmNlcy5cbiAqL1xuZXhwb3J0cy5pbnN0YW5jZXMgPSBbXTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAqL1xuXG5leHBvcnRzLm5hbWVzID0gW107XG5leHBvcnRzLnNraXBzID0gW107XG5cbi8qKlxuICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICpcbiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMgPSB7fTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICB2YXIgaGFzaCA9IDAsIGk7XG5cbiAgZm9yIChpIGluIG5hbWVzcGFjZSkge1xuICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW01hdGguYWJzKGhhc2gpICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cbiAgdmFyIHByZXZUaW1lO1xuXG4gIGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgIC8vIGRpc2FibGVkP1xuICAgIGlmICghZGVidWcuZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgdmFyIHNlbGYgPSBkZWJ1ZztcblxuICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG4gICAgdmFyIGN1cnIgPSArbmV3IERhdGUoKTtcbiAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgcHJldlRpbWUgPSBjdXJyO1xuXG4gICAgLy8gdHVybiB0aGUgYGFyZ3VtZW50c2AgaW50byBhIHByb3BlciBBcnJheVxuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBhcmdzWzBdID0gZXhwb3J0cy5jb2VyY2UoYXJnc1swXSk7XG5cbiAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBhcmdzWzBdKSB7XG4gICAgICAvLyBhbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuICAgICAgYXJncy51bnNoaWZ0KCclTycpO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgZnVuY3Rpb24obWF0Y2gsIGZvcm1hdCkge1xuICAgICAgLy8gaWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSByZXR1cm4gbWF0Y2g7XG4gICAgICBpbmRleCsrO1xuICAgICAgdmFyIGZvcm1hdHRlciA9IGV4cG9ydHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmb3JtYXR0ZXIpIHtcbiAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cbiAgICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICAvLyBhcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuICAgIGV4cG9ydHMuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG4gICAgdmFyIGxvZ0ZuID0gZGVidWcubG9nIHx8IGV4cG9ydHMubG9nIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG4gICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gIH1cblxuICBkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gIGRlYnVnLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKTtcbiAgZGVidWcudXNlQ29sb3JzID0gZXhwb3J0cy51c2VDb2xvcnMoKTtcbiAgZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuICBkZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblxuICAvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuaW5pdCkge1xuICAgIGV4cG9ydHMuaW5pdChkZWJ1Zyk7XG4gIH1cblxuICBleHBvcnRzLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcblxuICByZXR1cm4gZGVidWc7XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICB2YXIgaW5kZXggPSBleHBvcnRzLmluc3RhbmNlcy5pbmRleE9mKHRoaXMpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgZXhwb3J0cy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gIGV4cG9ydHMuc2F2ZShuYW1lc3BhY2VzKTtcblxuICBleHBvcnRzLm5hbWVzID0gW107XG4gIGV4cG9ydHMuc2tpcHMgPSBbXTtcblxuICB2YXIgaTtcbiAgdmFyIHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgdmFyIGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIXNwbGl0W2ldKSBjb250aW51ZTsgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcbiAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGV4cG9ydHMuaW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGluc3RhbmNlID0gZXhwb3J0cy5pbnN0YW5jZXNbaV07XG4gICAgaW5zdGFuY2UuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuICB9XG59XG5cbi8qKlxuICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBleHBvcnRzLmVuYWJsZSgnJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgaWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGksIGxlbjtcbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cbiIsIi8qIVxuICogQGRlc2NyaXB0aW9uIFJlY3Vyc2l2ZSBvYmplY3QgZXh0ZW5kaW5nXG4gKiBAYXV0aG9yIFZpYWNoZXNsYXYgTG90c21hbm92IDxsb3RzbWFub3Y4OUBnbWFpbC5jb20+XG4gKiBAbGljZW5zZSBNSVRcbiAqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxOCBWaWFjaGVzbGF2IExvdHNtYW5vdlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2ZcbiAqIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cbiAqIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG9cbiAqIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mXG4gKiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4gKiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1NcbiAqIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUlxuICogQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSXG4gKiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTlxuICogQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGlzU3BlY2lmaWNWYWx1ZSh2YWwpIHtcblx0cmV0dXJuIChcblx0XHR2YWwgaW5zdGFuY2VvZiBCdWZmZXJcblx0XHR8fCB2YWwgaW5zdGFuY2VvZiBEYXRlXG5cdFx0fHwgdmFsIGluc3RhbmNlb2YgUmVnRXhwXG5cdCkgPyB0cnVlIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNsb25lU3BlY2lmaWNWYWx1ZSh2YWwpIHtcblx0aWYgKHZhbCBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuXHRcdHZhciB4ID0gQnVmZmVyLmFsbG9jXG5cdFx0XHQ/IEJ1ZmZlci5hbGxvYyh2YWwubGVuZ3RoKVxuXHRcdFx0OiBuZXcgQnVmZmVyKHZhbC5sZW5ndGgpO1xuXHRcdHZhbC5jb3B5KHgpO1xuXHRcdHJldHVybiB4O1xuXHR9IGVsc2UgaWYgKHZhbCBpbnN0YW5jZW9mIERhdGUpIHtcblx0XHRyZXR1cm4gbmV3IERhdGUodmFsLmdldFRpbWUoKSk7XG5cdH0gZWxzZSBpZiAodmFsIGluc3RhbmNlb2YgUmVnRXhwKSB7XG5cdFx0cmV0dXJuIG5ldyBSZWdFeHAodmFsKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgc2l0dWF0aW9uJyk7XG5cdH1cbn1cblxuLyoqXG4gKiBSZWN1cnNpdmUgY2xvbmluZyBhcnJheS5cbiAqL1xuZnVuY3Rpb24gZGVlcENsb25lQXJyYXkoYXJyKSB7XG5cdHZhciBjbG9uZSA9IFtdO1xuXHRhcnIuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcblx0XHRpZiAodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0gIT09IG51bGwpIHtcblx0XHRcdGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKSB7XG5cdFx0XHRcdGNsb25lW2luZGV4XSA9IGRlZXBDbG9uZUFycmF5KGl0ZW0pO1xuXHRcdFx0fSBlbHNlIGlmIChpc1NwZWNpZmljVmFsdWUoaXRlbSkpIHtcblx0XHRcdFx0Y2xvbmVbaW5kZXhdID0gY2xvbmVTcGVjaWZpY1ZhbHVlKGl0ZW0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVbaW5kZXhdID0gZGVlcEV4dGVuZCh7fSwgaXRlbSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNsb25lW2luZGV4XSA9IGl0ZW07XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGNsb25lO1xufVxuXG5mdW5jdGlvbiBzYWZlR2V0UHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSkge1xuXHRyZXR1cm4gcHJvcGVydHkgPT09ICdfX3Byb3RvX18nID8gdW5kZWZpbmVkIDogb2JqZWN0W3Byb3BlcnR5XTtcbn1cblxuLyoqXG4gKiBFeHRlbmluZyBvYmplY3QgdGhhdCBlbnRlcmVkIGluIGZpcnN0IGFyZ3VtZW50LlxuICpcbiAqIFJldHVybnMgZXh0ZW5kZWQgb2JqZWN0IG9yIGZhbHNlIGlmIGhhdmUgbm8gdGFyZ2V0IG9iamVjdCBvciBpbmNvcnJlY3QgdHlwZS5cbiAqXG4gKiBJZiB5b3Ugd2lzaCB0byBjbG9uZSBzb3VyY2Ugb2JqZWN0ICh3aXRob3V0IG1vZGlmeSBpdCksIGp1c3QgdXNlIGVtcHR5IG5ld1xuICogb2JqZWN0IGFzIGZpcnN0IGFyZ3VtZW50LCBsaWtlIHRoaXM6XG4gKiAgIGRlZXBFeHRlbmQoe30sIHlvdXJPYmpfMSwgW3lvdXJPYmpfTl0pO1xuICovXG52YXIgZGVlcEV4dGVuZCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKC8qb2JqXzEsIFtvYmpfMl0sIFtvYmpfTl0qLykge1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgdHlwZW9mIGFyZ3VtZW50c1swXSAhPT0gJ29iamVjdCcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzWzBdO1xuXHR9XG5cblx0dmFyIHRhcmdldCA9IGFyZ3VtZW50c1swXTtcblxuXHQvLyBjb252ZXJ0IGFyZ3VtZW50cyB0byBhcnJheSBhbmQgY3V0IG9mZiB0YXJnZXQgb2JqZWN0XG5cdHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuXHR2YXIgdmFsLCBzcmMsIGNsb25lO1xuXG5cdGFyZ3MuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7XG5cdFx0Ly8gc2tpcCBhcmd1bWVudCBpZiBpc24ndCBhbiBvYmplY3QsIGlzIG51bGwsIG9yIGlzIGFuIGFycmF5XG5cdFx0aWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KG9iaikpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0c3JjID0gc2FmZUdldFByb3BlcnR5KHRhcmdldCwga2V5KTsgLy8gc291cmNlIHZhbHVlXG5cdFx0XHR2YWwgPSBzYWZlR2V0UHJvcGVydHkob2JqLCBrZXkpOyAvLyBuZXcgdmFsdWVcblxuXHRcdFx0Ly8gcmVjdXJzaW9uIHByZXZlbnRpb25cblx0XHRcdGlmICh2YWwgPT09IHRhcmdldCkge1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogaWYgbmV3IHZhbHVlIGlzbid0IG9iamVjdCB0aGVuIGp1c3Qgb3ZlcndyaXRlIGJ5IG5ldyB2YWx1ZVxuXHRcdFx0ICogaW5zdGVhZCBvZiBleHRlbmRpbmcuXG5cdFx0XHQgKi9cblx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIHZhbCAhPT0gJ29iamVjdCcgfHwgdmFsID09PSBudWxsKSB7XG5cdFx0XHRcdHRhcmdldFtrZXldID0gdmFsO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdC8vIGp1c3QgY2xvbmUgYXJyYXlzIChhbmQgcmVjdXJzaXZlIGNsb25lIG9iamVjdHMgaW5zaWRlKVxuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcblx0XHRcdFx0dGFyZ2V0W2tleV0gPSBkZWVwQ2xvbmVBcnJheSh2YWwpO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdC8vIGN1c3RvbSBjbG9uaW5nIGFuZCBvdmVyd3JpdGUgZm9yIHNwZWNpZmljIG9iamVjdHNcblx0XHRcdH0gZWxzZSBpZiAoaXNTcGVjaWZpY1ZhbHVlKHZhbCkpIHtcblx0XHRcdFx0dGFyZ2V0W2tleV0gPSBjbG9uZVNwZWNpZmljVmFsdWUodmFsKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHQvLyBvdmVyd3JpdGUgYnkgbmV3IHZhbHVlIGlmIHNvdXJjZSBpc24ndCBvYmplY3Qgb3IgYXJyYXlcblx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIHNyYyAhPT0gJ29iamVjdCcgfHwgc3JjID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkoc3JjKSkge1xuXHRcdFx0XHR0YXJnZXRba2V5XSA9IGRlZXBFeHRlbmQoe30sIHZhbCk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0Ly8gc291cmNlIHZhbHVlIGFuZCBuZXcgdmFsdWUgaXMgb2JqZWN0cyBib3RoLCBleHRlbmRpbmcuLi5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRhcmdldFtrZXldID0gZGVlcEV4dGVuZChzcmMsIHZhbCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG5cblx0cmV0dXJuIHRhcmdldDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkID0gcmVxdWlyZSgnLi91dGlsL2hlbHBlcnMnKTtcblxuJC5maW5kQnlSZWYgPSByZXF1aXJlKCcuL3V0aWwvZmluZC1yZWZlcmVuY2UnKTtcbiQucmVzb2x2ZVNjaGVtYSA9IHJlcXVpcmUoJy4vdXRpbC9yZXNvbHZlLXNjaGVtYScpO1xuJC5ub3JtYWxpemVTY2hlbWEgPSByZXF1aXJlKCcuL3V0aWwvbm9ybWFsaXplLXNjaGVtYScpO1xuXG52YXIgaW5zdGFuY2UgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGYpIHtcbiAgZnVuY3Rpb24gJHJlZihmYWtlcm9vdCwgc2NoZW1hLCByZWZzLCBleCkge1xuICAgIGlmICh0eXBlb2YgZmFrZXJvb3QgPT09ICdvYmplY3QnKSB7XG4gICAgICBleCA9IHJlZnM7XG4gICAgICByZWZzID0gc2NoZW1hO1xuICAgICAgc2NoZW1hID0gZmFrZXJvb3Q7XG4gICAgICBmYWtlcm9vdCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNjaGVtYSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc2NoZW1hIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWZzID09PSAnb2JqZWN0JyAmJiByZWZzICE9PSBudWxsKSB7XG4gICAgICB2YXIgYXV4ID0gcmVmcztcblxuICAgICAgcmVmcyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBrIGluIGF1eCkge1xuICAgICAgICBhdXhba10uaWQgPSBhdXhba10uaWQgfHwgaztcbiAgICAgICAgcmVmcy5wdXNoKGF1eFtrXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWZzICE9PSAndW5kZWZpbmVkJyAmJiAhQXJyYXkuaXNBcnJheShyZWZzKSkge1xuICAgICAgZXggPSAhIXJlZnM7XG4gICAgICByZWZzID0gW107XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHVzaChyZWYpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVmLmlkID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgaWQgPSAkLnJlc29sdmVVUkwoZmFrZXJvb3QsIHJlZi5pZCkucmVwbGFjZSgvXFwvIz8kLywgJycpO1xuXG4gICAgICAgIGlmIChpZC5pbmRleE9mKCcjJykgPiAtMSkge1xuICAgICAgICAgIHZhciBwYXJ0cyA9IGlkLnNwbGl0KCcjJyk7XG5cbiAgICAgICAgICBpZiAocGFydHNbMV0uY2hhckF0KCkgPT09ICcvJykge1xuICAgICAgICAgICAgaWQgPSBwYXJ0c1swXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWQgPSBwYXJ0c1sxXSB8fCBwYXJ0c1swXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoISRyZWYucmVmc1tpZF0pIHtcbiAgICAgICAgICAkcmVmLnJlZnNbaWRdID0gcmVmO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgKHJlZnMgfHwgW10pLmNvbmNhdChbc2NoZW1hXSkuZm9yRWFjaChmdW5jdGlvbihyZWYpIHtcbiAgICAgIHNjaGVtYSA9ICQubm9ybWFsaXplU2NoZW1hKGZha2Vyb290LCByZWYsIHB1c2gpO1xuICAgICAgcHVzaChzY2hlbWEpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuICQucmVzb2x2ZVNjaGVtYShzY2hlbWEsICRyZWYucmVmcywgZXgsIGYpO1xuICB9XG5cbiAgJHJlZi5yZWZzID0ge307XG4gICRyZWYudXRpbCA9ICQ7XG5cbiAgcmV0dXJuICRyZWY7XG59O1xuXG5pbnN0YW5jZS51dGlsID0gJDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsb25lID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmosIHNlZW4pIHtcbiAgc2VlbiA9IHNlZW4gfHwgW107XG5cbiAgaWYgKHNlZW4uaW5kZXhPZihvYmopID4gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSBkZXJlZmVyZW5jZSBjaXJjdWxhciBzdHJ1Y3R1cmVzJyk7XG4gIH1cblxuICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBzZWVuID0gc2Vlbi5jb25jYXQoW29ial0pO1xuXG4gIHZhciB0YXJnZXQgPSBBcnJheS5pc0FycmF5KG9iaikgPyBbXSA6IHt9O1xuXG4gIGZ1bmN0aW9uIGNvcHkoa2V5LCB2YWx1ZSkge1xuICAgIHRhcmdldFtrZXldID0gY2xvbmUodmFsdWUsIHNlZW4pO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuICAgIG9iai5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIGNvcHkoa2V5LCB2YWx1ZSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgY29weShrZXksIG9ialtrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJCA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xuXG5mdW5jdGlvbiBnZXQob2JqLCBwYXRoKSB7XG4gIHZhciBoYXNoID0gcGF0aC5zcGxpdCgnIycpWzFdO1xuXG4gIHZhciBwYXJ0cyA9IGhhc2guc3BsaXQoJy8nKS5zbGljZSgxKTtcblxuICB3aGlsZSAocGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IGRlY29kZVVSSUNvbXBvbmVudChwYXJ0cy5zaGlmdCgpKS5yZXBsYWNlKC9+MS9nLCAnLycpLnJlcGxhY2UoL34wL2csICd+Jyk7XG5cbiAgICBpZiAodHlwZW9mIG9ialtrZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdKU09OIHBvaW50ZXIgbm90IGZvdW5kOiAnICsgcGF0aCk7XG4gICAgfVxuXG4gICAgb2JqID0gb2JqW2tleV07XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG52YXIgZmluZCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaWQsIHJlZnMsIGZpbHRlcikge1xuICB2YXIgdGFyZ2V0ID0gcmVmc1tpZF0gfHwgcmVmc1tpZC5zcGxpdCgnIycpWzFdXSB8fCByZWZzWyQuZ2V0RG9jdW1lbnRVUkkoaWQpXTtcblxuICB0cnkge1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHRhcmdldCA9IGlkLmluZGV4T2YoJyMvJykgPiAtMSA/IGdldCh0YXJnZXQsIGlkKSA6IHRhcmdldDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIga2V5IGluIHJlZnMpIHtcbiAgICAgICAgaWYgKCQucmVzb2x2ZVVSTChyZWZzW2tleV0uaWQsIGlkKSA9PT0gcmVmc1trZXldLmlkKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gcmVmc1trZXldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRhcmdldCA9IGZpbHRlcihpZCwgcmVmcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZmVyZW5jZSBub3QgZm91bmQ6ICcgKyBpZCk7XG4gIH1cblxuICB3aGlsZSAodGFyZ2V0LiRyZWYpIHtcbiAgICB0YXJnZXQgPSBmaW5kKHRhcmdldC4kcmVmLCByZWZzKTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9wanQzMy9lZmIyZjExMzRiYWI5ODYxMTNmZFxuXG5mdW5jdGlvbiBVUkxVdGlscyh1cmwsIGJhc2VVUkwpIHtcbiAgLy8gcmVtb3ZlIGxlYWRpbmcgLi9cbiAgdXJsID0gdXJsLnJlcGxhY2UoL15cXC5cXC8vLCAnJyk7XG5cbiAgdmFyIG0gPSBTdHJpbmcodXJsKS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJykubWF0Y2goL14oW146XFwvPyNdKzopPyg/OlxcL1xcLyg/OihbXjpAXSopKD86OihbXjpAXSopKT9AKT8oKFteOlxcLz8jXSopKD86OihcXGQqKSk/KSk/KFtePyNdKikoXFw/W14jXSopPygjW1xcc1xcU10qKT8vKTtcbiAgaWYgKCFtKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoKTtcbiAgfVxuICB2YXIgaHJlZiA9IG1bMF0gfHwgJyc7XG4gIHZhciBwcm90b2NvbCA9IG1bMV0gfHwgJyc7XG4gIHZhciB1c2VybmFtZSA9IG1bMl0gfHwgJyc7XG4gIHZhciBwYXNzd29yZCA9IG1bM10gfHwgJyc7XG4gIHZhciBob3N0ID0gbVs0XSB8fCAnJztcbiAgdmFyIGhvc3RuYW1lID0gbVs1XSB8fCAnJztcbiAgdmFyIHBvcnQgPSBtWzZdIHx8ICcnO1xuICB2YXIgcGF0aG5hbWUgPSBtWzddIHx8ICcnO1xuICB2YXIgc2VhcmNoID0gbVs4XSB8fCAnJztcbiAgdmFyIGhhc2ggPSBtWzldIHx8ICcnO1xuICBpZiAoYmFzZVVSTCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGJhc2UgPSBuZXcgVVJMVXRpbHMoYmFzZVVSTCk7XG4gICAgdmFyIGZsYWcgPSBwcm90b2NvbCA9PT0gJycgJiYgaG9zdCA9PT0gJycgJiYgdXNlcm5hbWUgPT09ICcnO1xuICAgIGlmIChmbGFnICYmIHBhdGhuYW1lID09PSAnJyAmJiBzZWFyY2ggPT09ICcnKSB7XG4gICAgICBzZWFyY2ggPSBiYXNlLnNlYXJjaDtcbiAgICB9XG4gICAgaWYgKGZsYWcgJiYgcGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIHBhdGhuYW1lID0gKHBhdGhuYW1lICE9PSAnJyA/IChiYXNlLnBhdGhuYW1lLnNsaWNlKDAsIGJhc2UucGF0aG5hbWUubGFzdEluZGV4T2YoJy8nKSArIDEpICsgcGF0aG5hbWUpIDogYmFzZS5wYXRobmFtZSk7XG4gICAgfVxuICAgIC8vIGRvdCBzZWdtZW50cyByZW1vdmFsXG4gICAgdmFyIG91dHB1dCA9IFtdO1xuXG4gICAgcGF0aG5hbWUucmVwbGFjZSgvXFwvP1teXFwvXSsvZywgZnVuY3Rpb24ocCkge1xuICAgICAgaWYgKHAgPT09ICcvLi4nKSB7XG4gICAgICAgIG91dHB1dC5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dC5wdXNoKHApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcGF0aG5hbWUgPSBvdXRwdXQuam9pbignJykgfHwgJy8nO1xuXG4gICAgaWYgKGZsYWcpIHtcbiAgICAgIHBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICBob3N0bmFtZSA9IGJhc2UuaG9zdG5hbWU7XG4gICAgICBob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgcGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgdXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgIH1cbiAgICBpZiAocHJvdG9jb2wgPT09ICcnKSB7XG4gICAgICBwcm90b2NvbCA9IGJhc2UucHJvdG9jb2w7XG4gICAgfVxuICAgIGhyZWYgPSBwcm90b2NvbCArIChob3N0ICE9PSAnJyA/ICcvLycgOiAnJykgKyAodXNlcm5hbWUgIT09ICcnID8gdXNlcm5hbWUgKyAocGFzc3dvcmQgIT09ICcnID8gJzonICsgcGFzc3dvcmQgOiAnJykgKyAnQCcgOiAnJykgKyBob3N0ICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuICB9XG4gIHRoaXMuaHJlZiA9IGhyZWY7XG4gIHRoaXMub3JpZ2luID0gcHJvdG9jb2wgKyAoaG9zdCAhPT0gJycgPyAnLy8nICsgaG9zdCA6ICcnKTtcbiAgdGhpcy5wcm90b2NvbCA9IHByb3RvY29sO1xuICB0aGlzLnVzZXJuYW1lID0gdXNlcm5hbWU7XG4gIHRoaXMucGFzc3dvcmQgPSBwYXNzd29yZDtcbiAgdGhpcy5ob3N0ID0gaG9zdDtcbiAgdGhpcy5ob3N0bmFtZSA9IGhvc3RuYW1lO1xuICB0aGlzLnBvcnQgPSBwb3J0O1xuICB0aGlzLnBhdGhuYW1lID0gcGF0aG5hbWU7XG4gIHRoaXMuc2VhcmNoID0gc2VhcmNoO1xuICB0aGlzLmhhc2ggPSBoYXNoO1xufVxuXG5mdW5jdGlvbiBpc1VSTChwYXRoKSB7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycgJiYgL15cXHcrOlxcL1xcLy8udGVzdChwYXRoKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlVVJJKGhyZWYsIGJhc2UpIHtcbiAgcmV0dXJuIG5ldyBVUkxVdGlscyhocmVmLCBiYXNlKTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVVSTChiYXNlLCBocmVmKSB7XG4gIGJhc2UgPSBiYXNlIHx8ICdodHRwOi8vanNvbi1zY2hlbWEub3JnL3NjaGVtYSMnO1xuXG4gIGhyZWYgPSBwYXJzZVVSSShocmVmLCBiYXNlKTtcbiAgYmFzZSA9IHBhcnNlVVJJKGJhc2UpO1xuXG4gIGlmIChiYXNlLmhhc2ggJiYgIWhyZWYuaGFzaCkge1xuICAgIHJldHVybiBocmVmLmhyZWYgKyBiYXNlLmhhc2g7XG4gIH1cblxuICByZXR1cm4gaHJlZi5ocmVmO1xufVxuXG5mdW5jdGlvbiBnZXREb2N1bWVudFVSSSh1cmkpIHtcbiAgcmV0dXJuIHR5cGVvZiB1cmkgPT09ICdzdHJpbmcnICYmIHVyaS5zcGxpdCgnIycpWzBdO1xufVxuXG5mdW5jdGlvbiBpc0tleXdvcmQocHJvcCkge1xuICByZXR1cm4gcHJvcCA9PT0gJ2VudW0nIHx8IHByb3AgPT09ICdkZWZhdWx0JyB8fCBwcm9wID09PSAncmVxdWlyZWQnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNVUkw6IGlzVVJMLFxuICBwYXJzZVVSSTogcGFyc2VVUkksXG4gIGlzS2V5d29yZDogaXNLZXl3b3JkLFxuICByZXNvbHZlVVJMOiByZXNvbHZlVVJMLFxuICBnZXREb2N1bWVudFVSSTogZ2V0RG9jdW1lbnRVUklcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkID0gcmVxdWlyZSgnLi9oZWxwZXJzJyk7XG5cbnZhciBjbG9uZU9iaiA9IHJlcXVpcmUoJy4vY2xvbmUtb2JqJyk7XG5cbnZhciBTQ0hFTUFfVVJJID0gW1xuICAnaHR0cDovL2pzb24tc2NoZW1hLm9yZy9zY2hlbWEjJyxcbiAgJ2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvc2NoZW1hJyxcbiAgJ2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIycsXG4gICdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSdcbl07XG5cbmZ1bmN0aW9uIGV4cGFuZChvYmosIHBhcmVudCwgY2FsbGJhY2spIHtcbiAgaWYgKG9iaikge1xuICAgIHZhciBpZCA9IHR5cGVvZiBvYmouaWQgPT09ICdzdHJpbmcnID8gb2JqLmlkIDogJyMnO1xuXG4gICAgaWYgKCEkLmlzVVJMKGlkKSkge1xuICAgICAgaWQgPSAkLnJlc29sdmVVUkwocGFyZW50ID09PSBpZCA/IG51bGwgOiBwYXJlbnQsIGlkKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iai4kcmVmID09PSAnc3RyaW5nJyAmJiAhJC5pc1VSTChvYmouJHJlZikpIHtcbiAgICAgIG9iai4kcmVmID0gJC5yZXNvbHZlVVJMKGlkLCBvYmouJHJlZik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvYmouaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBvYmouaWQgPSBwYXJlbnQgPSBpZDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhJC5pc0tleXdvcmQoa2V5KSkge1xuICAgICAgZXhwYW5kKHZhbHVlLCBwYXJlbnQsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sob2JqKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZha2Vyb290LCBzY2hlbWEsIHB1c2gpIHtcbiAgaWYgKHR5cGVvZiBmYWtlcm9vdCA9PT0gJ29iamVjdCcpIHtcbiAgICBwdXNoID0gc2NoZW1hO1xuICAgIHNjaGVtYSA9IGZha2Vyb290O1xuICAgIGZha2Vyb290ID0gbnVsbDtcbiAgfVxuXG4gIHZhciBiYXNlID0gZmFrZXJvb3QgfHwgJycsXG4gICAgICBjb3B5ID0gY2xvbmVPYmooc2NoZW1hKTtcblxuICBpZiAoY29weS4kc2NoZW1hICYmIFNDSEVNQV9VUkkuaW5kZXhPZihjb3B5LiRzY2hlbWEpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc2NoZW1hIHZlcnNpb24gKHY0IG9ubHkpJyk7XG4gIH1cblxuICBiYXNlID0gJC5yZXNvbHZlVVJMKGNvcHkuJHNjaGVtYSB8fCBTQ0hFTUFfVVJJWzBdLCBiYXNlKTtcblxuICBleHBhbmQoY29weSwgJC5yZXNvbHZlVVJMKGNvcHkuaWQgfHwgJyMnLCBiYXNlKSwgcHVzaCk7XG5cbiAgY29weS5pZCA9IGNvcHkuaWQgfHwgYmFzZTtcblxuICByZXR1cm4gY29weTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkID0gcmVxdWlyZSgnLi9oZWxwZXJzJyk7XG5cbnZhciBmaW5kID0gcmVxdWlyZSgnLi9maW5kLXJlZmVyZW5jZScpO1xuXG52YXIgZGVlcEV4dGVuZCA9IHJlcXVpcmUoJ2RlZXAtZXh0ZW5kJyk7XG5cbmZ1bmN0aW9uIGNvcHkoXywgb2JqLCByZWZzLCBwYXJlbnQsIHJlc29sdmUsIGNhbGxiYWNrKSB7XG4gIHZhciB0YXJnZXQgPSAgQXJyYXkuaXNBcnJheShvYmopID8gW10gOiB7fTtcblxuICBpZiAodHlwZW9mIG9iai4kcmVmID09PSAnc3RyaW5nJykge1xuICAgIHZhciBpZCA9IG9iai4kcmVmO1xuICAgIHZhciBiYXNlID0gJC5nZXREb2N1bWVudFVSSShpZCk7XG4gICAgdmFyIGxvY2FsID0gaWQuaW5kZXhPZignIy8nKSA+IC0xO1xuXG4gICAgaWYgKGxvY2FsIHx8IChyZXNvbHZlICYmIGJhc2UgIT09IHBhcmVudCkpIHtcbiAgICAgIHZhciBmaXhlZCA9IGZpbmQoaWQsIHJlZnMsIGNhbGxiYWNrKTtcblxuICAgICAgZGVlcEV4dGVuZChvYmosIGZpeGVkKTtcblxuICAgICAgZGVsZXRlIG9iai4kcmVmO1xuICAgICAgZGVsZXRlIG9iai5pZDtcbiAgICB9XG5cbiAgICBpZiAoX1tpZF0gPiAxMCkge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICBpZiAoX1tpZF0pIHtcbiAgICAgIF9baWRdICs9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9baWRdID0gMTtcbiAgICB9XG4gIH1cblxuXG4gIGZvciAodmFyIHByb3AgaW4gb2JqKSB7XG5cbiAgICBpZiAodHlwZW9mIG9ialtwcm9wXSA9PT0gJ29iamVjdCcgJiYgb2JqW3Byb3BdICE9PSBudWxsICYmICEkLmlzS2V5d29yZChwcm9wKSkge1xuICAgICAgdGFyZ2V0W3Byb3BdID0gY29weShfLCBvYmpbcHJvcF0sIHJlZnMsIHBhcmVudCwgcmVzb2x2ZSwgY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRbcHJvcF0gPSBvYmpbcHJvcF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmosIHJlZnMsIHJlc29sdmUsIGNhbGxiYWNrKSB7XG4gIHZhciBmaXhlZElkID0gJC5yZXNvbHZlVVJMKG9iai4kc2NoZW1hLCBvYmouaWQpLFxuICAgICAgcGFyZW50ID0gJC5nZXREb2N1bWVudFVSSShmaXhlZElkKTtcblxuICByZXR1cm4gY29weSh7fSwgb2JqLCByZWZzLCBwYXJlbnQsIHJlc29sdmUsIGNhbGxiYWNrKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQgaW5kZW50OiA0ICovXG5cblxuLy8gUHJpdmF0ZSBoZWxwZXIgY2xhc3NcbmNsYXNzIFN1YlJhbmdlIHtcbiAgICBjb25zdHJ1Y3Rvcihsb3csIGhpZ2gpIHtcbiAgICAgICAgdGhpcy5sb3cgPSBsb3c7XG4gICAgICAgIHRoaXMuaGlnaCA9IGhpZ2g7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gMSArIGhpZ2ggLSBsb3c7XG4gICAgfVxuXG4gICAgb3ZlcmxhcHMocmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuICEodGhpcy5oaWdoIDwgcmFuZ2UubG93IHx8IHRoaXMubG93ID4gcmFuZ2UuaGlnaCk7XG4gICAgfVxuXG4gICAgdG91Y2hlcyhyYW5nZSkge1xuICAgICAgICByZXR1cm4gISh0aGlzLmhpZ2ggKyAxIDwgcmFuZ2UubG93IHx8IHRoaXMubG93IC0gMSA+IHJhbmdlLmhpZ2gpO1xuICAgIH1cblxuICAgIC8vIFJldHVybnMgaW5jbHVzaXZlIGNvbWJpbmF0aW9uIG9mIFN1YlJhbmdlcyBhcyBhIFN1YlJhbmdlLlxuICAgIGFkZChyYW5nZSkge1xuICAgICAgICByZXR1cm4gbmV3IFN1YlJhbmdlKFxuICAgICAgICAgICAgTWF0aC5taW4odGhpcy5sb3csIHJhbmdlLmxvdyksXG4gICAgICAgICAgICBNYXRoLm1heCh0aGlzLmhpZ2gsIHJhbmdlLmhpZ2gpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJucyBzdWJ0cmFjdGlvbiBvZiBTdWJSYW5nZXMgYXMgYW4gYXJyYXkgb2YgU3ViUmFuZ2VzLlxuICAgIC8vIChUaGVyZSdzIGEgY2FzZSB3aGVyZSBzdWJ0cmFjdGlvbiBkaXZpZGVzIGl0IGluIDIpXG4gICAgc3VidHJhY3QocmFuZ2UpIHtcbiAgICAgICAgaWYgKHJhbmdlLmxvdyA8PSB0aGlzLmxvdyAmJiByYW5nZS5oaWdoID49IHRoaXMuaGlnaCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9IGVsc2UgaWYgKHJhbmdlLmxvdyA+IHRoaXMubG93ICYmIHJhbmdlLmhpZ2ggPCB0aGlzLmhpZ2gpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgbmV3IFN1YlJhbmdlKHRoaXMubG93LCByYW5nZS5sb3cgLSAxKSxcbiAgICAgICAgICAgICAgICBuZXcgU3ViUmFuZ2UocmFuZ2UuaGlnaCArIDEsIHRoaXMuaGlnaClcbiAgICAgICAgICAgIF07XG4gICAgICAgIH0gZWxzZSBpZiAocmFuZ2UubG93IDw9IHRoaXMubG93KSB7XG4gICAgICAgICAgICByZXR1cm4gW25ldyBTdWJSYW5nZShyYW5nZS5oaWdoICsgMSwgdGhpcy5oaWdoKV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW25ldyBTdWJSYW5nZSh0aGlzLmxvdywgcmFuZ2UubG93IC0gMSldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvdyA9PSB0aGlzLmhpZ2ggP1xuICAgICAgICAgICAgdGhpcy5sb3cudG9TdHJpbmcoKSA6IHRoaXMubG93ICsgJy0nICsgdGhpcy5oaWdoO1xuICAgIH1cbn1cblxuXG5jbGFzcyBEUmFuZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGEsIGIpIHtcbiAgICAgICAgdGhpcy5yYW5nZXMgPSBbXTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgICBpZiAoYSAhPSBudWxsKSB0aGlzLmFkZChhLCBiKTtcbiAgICB9XG5cbiAgICBfdXBkYXRlX2xlbmd0aCgpIHtcbiAgICAgICAgdGhpcy5sZW5ndGggPSB0aGlzLnJhbmdlcy5yZWR1Y2UoKHByZXZpb3VzLCByYW5nZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzICsgcmFuZ2UubGVuZ3RoO1xuICAgICAgICB9LCAwKTtcbiAgICB9XG5cbiAgICBhZGQoYSwgYikge1xuICAgICAgICB2YXIgX2FkZCA9IChzdWJyYW5nZSkgPT4ge1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCB0aGlzLnJhbmdlcy5sZW5ndGggJiYgIXN1YnJhbmdlLnRvdWNoZXModGhpcy5yYW5nZXNbaV0pKSB7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG5ld1JhbmdlcyA9IHRoaXMucmFuZ2VzLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCB0aGlzLnJhbmdlcy5sZW5ndGggJiYgc3VicmFuZ2UudG91Y2hlcyh0aGlzLnJhbmdlc1tpXSkpIHtcbiAgICAgICAgICAgICAgICBzdWJyYW5nZSA9IHN1YnJhbmdlLmFkZCh0aGlzLnJhbmdlc1tpXSk7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3UmFuZ2VzLnB1c2goc3VicmFuZ2UpO1xuICAgICAgICAgICAgdGhpcy5yYW5nZXMgPSBuZXdSYW5nZXMuY29uY2F0KHRoaXMucmFuZ2VzLnNsaWNlKGkpKTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZV9sZW5ndGgoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhIGluc3RhbmNlb2YgRFJhbmdlKSB7XG4gICAgICAgICAgICBhLnJhbmdlcy5mb3JFYWNoKF9hZGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGIgPT0gbnVsbCkgYiA9IGE7XG4gICAgICAgICAgICBfYWRkKG5ldyBTdWJSYW5nZShhLCBiKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3VidHJhY3QoYSwgYikge1xuICAgICAgICB2YXIgX3N1YnRyYWN0ID0gKHN1YnJhbmdlKSA9PiB7XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICB3aGlsZSAoaSA8IHRoaXMucmFuZ2VzLmxlbmd0aCAmJiAhc3VicmFuZ2Uub3ZlcmxhcHModGhpcy5yYW5nZXNbaV0pKSB7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG5ld1JhbmdlcyA9IHRoaXMucmFuZ2VzLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCB0aGlzLnJhbmdlcy5sZW5ndGggJiYgc3VicmFuZ2Uub3ZlcmxhcHModGhpcy5yYW5nZXNbaV0pKSB7XG4gICAgICAgICAgICAgICAgbmV3UmFuZ2VzID0gbmV3UmFuZ2VzLmNvbmNhdCh0aGlzLnJhbmdlc1tpXS5zdWJ0cmFjdChzdWJyYW5nZSkpO1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmFuZ2VzID0gbmV3UmFuZ2VzLmNvbmNhdCh0aGlzLnJhbmdlcy5zbGljZShpKSk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVfbGVuZ3RoKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGEgaW5zdGFuY2VvZiBEUmFuZ2UpIHtcbiAgICAgICAgICAgIGEucmFuZ2VzLmZvckVhY2goX3N1YnRyYWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChiID09IG51bGwpIGIgPSBhO1xuICAgICAgICAgICAgX3N1YnRyYWN0KG5ldyBTdWJSYW5nZShhLCBiKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaW50ZXJzZWN0KGEsIGIpIHtcbiAgICAgICAgdmFyIG5ld1JhbmdlcyA9IFtdO1xuICAgICAgICB2YXIgX2ludGVyc2VjdCA9IChzdWJyYW5nZSkgPT4ge1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCB0aGlzLnJhbmdlcy5sZW5ndGggJiYgIXN1YnJhbmdlLm92ZXJsYXBzKHRoaXMucmFuZ2VzW2ldKSkge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChpIDwgdGhpcy5yYW5nZXMubGVuZ3RoICYmIHN1YnJhbmdlLm92ZXJsYXBzKHRoaXMucmFuZ2VzW2ldKSkge1xuICAgICAgICAgICAgICAgIHZhciBsb3cgPSBNYXRoLm1heCh0aGlzLnJhbmdlc1tpXS5sb3csIHN1YnJhbmdlLmxvdyk7XG4gICAgICAgICAgICAgICAgdmFyIGhpZ2ggPSBNYXRoLm1pbih0aGlzLnJhbmdlc1tpXS5oaWdoLCBzdWJyYW5nZS5oaWdoKTtcbiAgICAgICAgICAgICAgICBuZXdSYW5nZXMucHVzaChuZXcgU3ViUmFuZ2UobG93LCBoaWdoKSk7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChhIGluc3RhbmNlb2YgRFJhbmdlKSB7XG4gICAgICAgICAgICBhLnJhbmdlcy5mb3JFYWNoKF9pbnRlcnNlY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGIgPT0gbnVsbCkgYiA9IGE7XG4gICAgICAgICAgICBfaW50ZXJzZWN0KG5ldyBTdWJSYW5nZShhLCBiKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yYW5nZXMgPSBuZXdSYW5nZXM7XG4gICAgICAgIHRoaXMuX3VwZGF0ZV9sZW5ndGgoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaW5kZXgoaW5kZXgpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHRoaXMucmFuZ2VzLmxlbmd0aCAmJiB0aGlzLnJhbmdlc1tpXS5sZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgICAgICAgIGluZGV4IC09IHRoaXMucmFuZ2VzW2ldLmxlbmd0aDtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZXNbaV0ubG93ICsgaW5kZXg7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiAnWyAnICsgdGhpcy5yYW5nZXMuam9pbignLCAnKSArICcgXSc7XG4gICAgfVxuXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRFJhbmdlKHRoaXMpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEUmFuZ2U7XG4iLCIvKiFcbiAqIEBvdmVydmlldyBlczYtcHJvbWlzZSAtIGEgdGlueSBpbXBsZW1lbnRhdGlvbiBvZiBQcm9taXNlcy9BKy5cbiAqIEBjb3B5cmlnaHQgQ29weXJpZ2h0IChjKSAyMDE0IFllaHVkYSBLYXR6LCBUb20gRGFsZSwgU3RlZmFuIFBlbm5lciBhbmQgY29udHJpYnV0b3JzIChDb252ZXJzaW9uIHRvIEVTNiBBUEkgYnkgSmFrZSBBcmNoaWJhbGQpXG4gKiBAbGljZW5zZSAgIExpY2Vuc2VkIHVuZGVyIE1JVCBsaWNlbnNlXG4gKiAgICAgICAgICAgIFNlZSBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc3RlZmFucGVubmVyL2VzNi1wcm9taXNlL21hc3Rlci9MSUNFTlNFXG4gKiBAdmVyc2lvbiAgIHY0LjIuNCszMTRlNDgzMVxuICovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcblx0KGdsb2JhbC5FUzZQcm9taXNlID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBvYmplY3RPckZ1bmN0aW9uKHgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgeDtcbiAgcmV0dXJuIHggIT09IG51bGwgJiYgKHR5cGUgPT09ICdvYmplY3QnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicpO1xufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nO1xufVxuXG5cblxudmFyIF9pc0FycmF5ID0gdm9pZCAwO1xuaWYgKEFycmF5LmlzQXJyYXkpIHtcbiAgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xufSBlbHNlIHtcbiAgX2lzQXJyYXkgPSBmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gIH07XG59XG5cbnZhciBpc0FycmF5ID0gX2lzQXJyYXk7XG5cbnZhciBsZW4gPSAwO1xudmFyIHZlcnR4TmV4dCA9IHZvaWQgMDtcbnZhciBjdXN0b21TY2hlZHVsZXJGbiA9IHZvaWQgMDtcblxudmFyIGFzYXAgPSBmdW5jdGlvbiBhc2FwKGNhbGxiYWNrLCBhcmcpIHtcbiAgcXVldWVbbGVuXSA9IGNhbGxiYWNrO1xuICBxdWV1ZVtsZW4gKyAxXSA9IGFyZztcbiAgbGVuICs9IDI7XG4gIGlmIChsZW4gPT09IDIpIHtcbiAgICAvLyBJZiBsZW4gaXMgMiwgdGhhdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gc2NoZWR1bGUgYW4gYXN5bmMgZmx1c2guXG4gICAgLy8gSWYgYWRkaXRpb25hbCBjYWxsYmFja3MgYXJlIHF1ZXVlZCBiZWZvcmUgdGhlIHF1ZXVlIGlzIGZsdXNoZWQsIHRoZXlcbiAgICAvLyB3aWxsIGJlIHByb2Nlc3NlZCBieSB0aGlzIGZsdXNoIHRoYXQgd2UgYXJlIHNjaGVkdWxpbmcuXG4gICAgaWYgKGN1c3RvbVNjaGVkdWxlckZuKSB7XG4gICAgICBjdXN0b21TY2hlZHVsZXJGbihmbHVzaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjaGVkdWxlRmx1c2goKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNldFNjaGVkdWxlcihzY2hlZHVsZUZuKSB7XG4gIGN1c3RvbVNjaGVkdWxlckZuID0gc2NoZWR1bGVGbjtcbn1cblxuZnVuY3Rpb24gc2V0QXNhcChhc2FwRm4pIHtcbiAgYXNhcCA9IGFzYXBGbjtcbn1cblxudmFyIGJyb3dzZXJXaW5kb3cgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHVuZGVmaW5lZDtcbnZhciBicm93c2VyR2xvYmFsID0gYnJvd3NlcldpbmRvdyB8fCB7fTtcbnZhciBCcm93c2VyTXV0YXRpb25PYnNlcnZlciA9IGJyb3dzZXJHbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBicm93c2VyR2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgaXNOb2RlID0gdHlwZW9mIHNlbGYgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiB7fS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXSc7XG5cbi8vIHRlc3QgZm9yIHdlYiB3b3JrZXIgYnV0IG5vdCBpbiBJRTEwXG52YXIgaXNXb3JrZXIgPSB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBpbXBvcnRTY3JpcHRzICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09ICd1bmRlZmluZWQnO1xuXG4vLyBub2RlXG5mdW5jdGlvbiB1c2VOZXh0VGljaygpIHtcbiAgLy8gbm9kZSB2ZXJzaW9uIDAuMTAueCBkaXNwbGF5cyBhIGRlcHJlY2F0aW9uIHdhcm5pbmcgd2hlbiBuZXh0VGljayBpcyB1c2VkIHJlY3Vyc2l2ZWx5XG4gIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vY3Vqb2pzL3doZW4vaXNzdWVzLzQxMCBmb3IgZGV0YWlsc1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgfTtcbn1cblxuLy8gdmVydHhcbmZ1bmN0aW9uIHVzZVZlcnR4VGltZXIoKSB7XG4gIGlmICh0eXBlb2YgdmVydHhOZXh0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2ZXJ0eE5leHQoZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gdXNlU2V0VGltZW91dCgpO1xufVxuXG5mdW5jdGlvbiB1c2VNdXRhdGlvbk9ic2VydmVyKCkge1xuICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gIHZhciBvYnNlcnZlciA9IG5ldyBCcm93c2VyTXV0YXRpb25PYnNlcnZlcihmbHVzaCk7XG4gIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICBvYnNlcnZlci5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIG5vZGUuZGF0YSA9IGl0ZXJhdGlvbnMgPSArK2l0ZXJhdGlvbnMgJSAyO1xuICB9O1xufVxuXG4vLyB3ZWIgd29ya2VyXG5mdW5jdGlvbiB1c2VNZXNzYWdlQ2hhbm5lbCgpIHtcbiAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmbHVzaDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZSgwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXNlU2V0VGltZW91dCgpIHtcbiAgLy8gU3RvcmUgc2V0VGltZW91dCByZWZlcmVuY2Ugc28gZXM2LXByb21pc2Ugd2lsbCBiZSB1bmFmZmVjdGVkIGJ5XG4gIC8vIG90aGVyIGNvZGUgbW9kaWZ5aW5nIHNldFRpbWVvdXQgKGxpa2Ugc2lub24udXNlRmFrZVRpbWVycygpKVxuICB2YXIgZ2xvYmFsU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdsb2JhbFNldFRpbWVvdXQoZmx1c2gsIDEpO1xuICB9O1xufVxuXG52YXIgcXVldWUgPSBuZXcgQXJyYXkoMTAwMCk7XG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHZhciBjYWxsYmFjayA9IHF1ZXVlW2ldO1xuICAgIHZhciBhcmcgPSBxdWV1ZVtpICsgMV07XG5cbiAgICBjYWxsYmFjayhhcmcpO1xuXG4gICAgcXVldWVbaV0gPSB1bmRlZmluZWQ7XG4gICAgcXVldWVbaSArIDFdID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gYXR0ZW1wdFZlcnR4KCkge1xuICB0cnkge1xuICAgIHZhciB2ZXJ0eCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCkucmVxdWlyZSgndmVydHgnKTtcbiAgICB2ZXJ0eE5leHQgPSB2ZXJ0eC5ydW5Pbkxvb3AgfHwgdmVydHgucnVuT25Db250ZXh0O1xuICAgIHJldHVybiB1c2VWZXJ0eFRpbWVyKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdXNlU2V0VGltZW91dCgpO1xuICB9XG59XG5cbnZhciBzY2hlZHVsZUZsdXNoID0gdm9pZCAwO1xuLy8gRGVjaWRlIHdoYXQgYXN5bmMgbWV0aG9kIHRvIHVzZSB0byB0cmlnZ2VyaW5nIHByb2Nlc3Npbmcgb2YgcXVldWVkIGNhbGxiYWNrczpcbmlmIChpc05vZGUpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU5leHRUaWNrKCk7XG59IGVsc2UgaWYgKEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VNdXRhdGlvbk9ic2VydmVyKCk7XG59IGVsc2UgaWYgKGlzV29ya2VyKSB7XG4gIHNjaGVkdWxlRmx1c2ggPSB1c2VNZXNzYWdlQ2hhbm5lbCgpO1xufSBlbHNlIGlmIChicm93c2VyV2luZG93ID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IGF0dGVtcHRWZXJ0eCgpO1xufSBlbHNlIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZVNldFRpbWVvdXQoKTtcbn1cblxuZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICB2YXIgcGFyZW50ID0gdGhpcztcblxuICB2YXIgY2hpbGQgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcihub29wKTtcblxuICBpZiAoY2hpbGRbUFJPTUlTRV9JRF0gPT09IHVuZGVmaW5lZCkge1xuICAgIG1ha2VQcm9taXNlKGNoaWxkKTtcbiAgfVxuXG4gIHZhciBfc3RhdGUgPSBwYXJlbnQuX3N0YXRlO1xuXG5cbiAgaWYgKF9zdGF0ZSkge1xuICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1tfc3RhdGUgLSAxXTtcbiAgICBhc2FwKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBpbnZva2VDYWxsYmFjayhfc3RhdGUsIGNoaWxkLCBjYWxsYmFjaywgcGFyZW50Ll9yZXN1bHQpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbik7XG4gIH1cblxuICByZXR1cm4gY2hpbGQ7XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yZXNvbHZlYCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgYmVjb21lIHJlc29sdmVkIHdpdGggdGhlXG4gIHBhc3NlZCBgdmFsdWVgLiBJdCBpcyBzaG9ydGhhbmQgZm9yIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgcmVzb2x2ZSgxKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyB2YWx1ZSA9PT0gMVxuICB9KTtcbiAgYGBgXG5cbiAgSW5zdGVhZCBvZiB3cml0aW5nIHRoZSBhYm92ZSwgeW91ciBjb2RlIG5vdyBzaW1wbHkgYmVjb21lcyB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoMSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyB2YWx1ZSA9PT0gMVxuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCByZXNvbHZlXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBbnl9IHZhbHVlIHZhbHVlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZSByZXNvbHZlZCB3aXRoXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHRoYXQgd2lsbCBiZWNvbWUgZnVsZmlsbGVkIHdpdGggdGhlIGdpdmVuXG4gIGB2YWx1ZWBcbiovXG5mdW5jdGlvbiByZXNvbHZlJDEob2JqZWN0KSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgaWYgKG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QuY29uc3RydWN0b3IgPT09IENvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfVxuXG4gIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuICByZXNvbHZlKHByb21pc2UsIG9iamVjdCk7XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG52YXIgUFJPTUlTRV9JRCA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyKTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnZhciBQRU5ESU5HID0gdm9pZCAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xuXG52YXIgVFJZX0NBVENIX0VSUk9SID0geyBlcnJvcjogbnVsbCB9O1xuXG5mdW5jdGlvbiBzZWxmRnVsZmlsbG1lbnQoKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKFwiWW91IGNhbm5vdCByZXNvbHZlIGEgcHJvbWlzZSB3aXRoIGl0c2VsZlwiKTtcbn1cblxuZnVuY3Rpb24gY2Fubm90UmV0dXJuT3duKCkge1xuICByZXR1cm4gbmV3IFR5cGVFcnJvcignQSBwcm9taXNlcyBjYWxsYmFjayBjYW5ub3QgcmV0dXJuIHRoYXQgc2FtZSBwcm9taXNlLicpO1xufVxuXG5mdW5jdGlvbiBnZXRUaGVuKHByb21pc2UpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIFRSWV9DQVRDSF9FUlJPUi5lcnJvciA9IGVycm9yO1xuICAgIHJldHVybiBUUllfQ0FUQ0hfRVJST1I7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJ5VGhlbih0aGVuJCQxLCB2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKSB7XG4gIHRyeSB7XG4gICAgdGhlbiQkMS5jYWxsKHZhbHVlLCBmdWxmaWxsbWVudEhhbmRsZXIsIHJlamVjdGlvbkhhbmRsZXIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIHRoZW5hYmxlLCB0aGVuJCQxKSB7XG4gIGFzYXAoZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICB2YXIgc2VhbGVkID0gZmFsc2U7XG4gICAgdmFyIGVycm9yID0gdHJ5VGhlbih0aGVuJCQxLCB0aGVuYWJsZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoc2VhbGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNlYWxlZCA9IHRydWU7XG4gICAgICBpZiAodGhlbmFibGUgIT09IHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgaWYgKHNlYWxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuXG4gICAgICByZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9LCAnU2V0dGxlOiAnICsgKHByb21pc2UuX2xhYmVsIHx8ICcgdW5rbm93biBwcm9taXNlJykpO1xuXG4gICAgaWYgKCFzZWFsZWQgJiYgZXJyb3IpIHtcbiAgICAgIHNlYWxlZCA9IHRydWU7XG4gICAgICByZWplY3QocHJvbWlzZSwgZXJyb3IpO1xuICAgIH1cbiAgfSwgcHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU93blRoZW5hYmxlKHByb21pc2UsIHRoZW5hYmxlKSB7XG4gIGlmICh0aGVuYWJsZS5fc3RhdGUgPT09IEZVTEZJTExFRCkge1xuICAgIGZ1bGZpbGwocHJvbWlzZSwgdGhlbmFibGUuX3Jlc3VsdCk7XG4gIH0gZWxzZSBpZiAodGhlbmFibGUuX3N0YXRlID09PSBSRUpFQ1RFRCkge1xuICAgIHJlamVjdChwcm9taXNlLCB0aGVuYWJsZS5fcmVzdWx0KTtcbiAgfSBlbHNlIHtcbiAgICBzdWJzY3JpYmUodGhlbmFibGUsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcmV0dXJuIHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSwgdGhlbiQkMSkge1xuICBpZiAobWF5YmVUaGVuYWJsZS5jb25zdHJ1Y3RvciA9PT0gcHJvbWlzZS5jb25zdHJ1Y3RvciAmJiB0aGVuJCQxID09PSB0aGVuICYmIG1heWJlVGhlbmFibGUuY29uc3RydWN0b3IucmVzb2x2ZSA9PT0gcmVzb2x2ZSQxKSB7XG4gICAgaGFuZGxlT3duVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoZW4kJDEgPT09IFRSWV9DQVRDSF9FUlJPUikge1xuICAgICAgcmVqZWN0KHByb21pc2UsIFRSWV9DQVRDSF9FUlJPUi5lcnJvcik7XG4gICAgICBUUllfQ0FUQ0hfRVJST1IuZXJyb3IgPSBudWxsO1xuICAgIH0gZWxzZSBpZiAodGhlbiQkMSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih0aGVuJCQxKSkge1xuICAgICAgaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlKHByb21pc2UsIHZhbHVlKSB7XG4gIGlmIChwcm9taXNlID09PSB2YWx1ZSkge1xuICAgIHJlamVjdChwcm9taXNlLCBzZWxmRnVsZmlsbG1lbnQoKSk7XG4gIH0gZWxzZSBpZiAob2JqZWN0T3JGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIHZhbHVlLCBnZXRUaGVuKHZhbHVlKSk7XG4gIH0gZWxzZSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHVibGlzaFJlamVjdGlvbihwcm9taXNlKSB7XG4gIGlmIChwcm9taXNlLl9vbmVycm9yKSB7XG4gICAgcHJvbWlzZS5fb25lcnJvcihwcm9taXNlLl9yZXN1bHQpO1xuICB9XG5cbiAgcHVibGlzaChwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gZnVsZmlsbChwcm9taXNlLCB2YWx1ZSkge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9taXNlLl9yZXN1bHQgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fc3RhdGUgPSBGVUxGSUxMRUQ7XG5cbiAgaWYgKHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzYXAocHVibGlzaCwgcHJvbWlzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVqZWN0KHByb21pc2UsIHJlYXNvbikge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcHJvbWlzZS5fc3RhdGUgPSBSRUpFQ1RFRDtcbiAgcHJvbWlzZS5fcmVzdWx0ID0gcmVhc29uO1xuXG4gIGFzYXAocHVibGlzaFJlamVjdGlvbiwgcHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICB2YXIgX3N1YnNjcmliZXJzID0gcGFyZW50Ll9zdWJzY3JpYmVycztcbiAgdmFyIGxlbmd0aCA9IF9zdWJzY3JpYmVycy5sZW5ndGg7XG5cblxuICBwYXJlbnQuX29uZXJyb3IgPSBudWxsO1xuXG4gIF9zdWJzY3JpYmVyc1tsZW5ndGhdID0gY2hpbGQ7XG4gIF9zdWJzY3JpYmVyc1tsZW5ndGggKyBGVUxGSUxMRURdID0gb25GdWxmaWxsbWVudDtcbiAgX3N1YnNjcmliZXJzW2xlbmd0aCArIFJFSkVDVEVEXSA9IG9uUmVqZWN0aW9uO1xuXG4gIGlmIChsZW5ndGggPT09IDAgJiYgcGFyZW50Ll9zdGF0ZSkge1xuICAgIGFzYXAocHVibGlzaCwgcGFyZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwdWJsaXNoKHByb21pc2UpIHtcbiAgdmFyIHN1YnNjcmliZXJzID0gcHJvbWlzZS5fc3Vic2NyaWJlcnM7XG4gIHZhciBzZXR0bGVkID0gcHJvbWlzZS5fc3RhdGU7XG5cbiAgaWYgKHN1YnNjcmliZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjaGlsZCA9IHZvaWQgMCxcbiAgICAgIGNhbGxiYWNrID0gdm9pZCAwLFxuICAgICAgZGV0YWlsID0gcHJvbWlzZS5fcmVzdWx0O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic2NyaWJlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICBjaGlsZCA9IHN1YnNjcmliZXJzW2ldO1xuICAgIGNhbGxiYWNrID0gc3Vic2NyaWJlcnNbaSArIHNldHRsZWRdO1xuXG4gICAgaWYgKGNoaWxkKSB7XG4gICAgICBpbnZva2VDYWxsYmFjayhzZXR0bGVkLCBjaGlsZCwgY2FsbGJhY2ssIGRldGFpbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKGRldGFpbCk7XG4gICAgfVxuICB9XG5cbiAgcHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoID0gMDtcbn1cblxuZnVuY3Rpb24gdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCkge1xuICB0cnkge1xuICAgIHJldHVybiBjYWxsYmFjayhkZXRhaWwpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgVFJZX0NBVENIX0VSUk9SLmVycm9yID0gZTtcbiAgICByZXR1cm4gVFJZX0NBVENIX0VSUk9SO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZUNhbGxiYWNrKHNldHRsZWQsIHByb21pc2UsIGNhbGxiYWNrLCBkZXRhaWwpIHtcbiAgdmFyIGhhc0NhbGxiYWNrID0gaXNGdW5jdGlvbihjYWxsYmFjayksXG4gICAgICB2YWx1ZSA9IHZvaWQgMCxcbiAgICAgIGVycm9yID0gdm9pZCAwLFxuICAgICAgc3VjY2VlZGVkID0gdm9pZCAwLFxuICAgICAgZmFpbGVkID0gdm9pZCAwO1xuXG4gIGlmIChoYXNDYWxsYmFjaykge1xuICAgIHZhbHVlID0gdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCk7XG5cbiAgICBpZiAodmFsdWUgPT09IFRSWV9DQVRDSF9FUlJPUikge1xuICAgICAgZmFpbGVkID0gdHJ1ZTtcbiAgICAgIGVycm9yID0gdmFsdWUuZXJyb3I7XG4gICAgICB2YWx1ZS5lcnJvciA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1Y2NlZWRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgICByZWplY3QocHJvbWlzZSwgY2Fubm90UmV0dXJuT3duKCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGRldGFpbDtcbiAgICBzdWNjZWVkZWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHByb21pc2UuX3N0YXRlICE9PSBQRU5ESU5HKSB7XG4gICAgLy8gbm9vcFxuICB9IGVsc2UgaWYgKGhhc0NhbGxiYWNrICYmIHN1Y2NlZWRlZCkge1xuICAgIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICB9IGVsc2UgaWYgKGZhaWxlZCkge1xuICAgIHJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gRlVMRklMTEVEKSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gUkVKRUNURUQpIHtcbiAgICByZWplY3QocHJvbWlzZSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRpYWxpemVQcm9taXNlKHByb21pc2UsIHJlc29sdmVyKSB7XG4gIHRyeSB7XG4gICAgcmVzb2x2ZXIoZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UodmFsdWUpIHtcbiAgICAgIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIHJlamVjdFByb21pc2UocmVhc29uKSB7XG4gICAgICByZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJlamVjdChwcm9taXNlLCBlKTtcbiAgfVxufVxuXG52YXIgaWQgPSAwO1xuZnVuY3Rpb24gbmV4dElkKCkge1xuICByZXR1cm4gaWQrKztcbn1cblxuZnVuY3Rpb24gbWFrZVByb21pc2UocHJvbWlzZSkge1xuICBwcm9taXNlW1BST01JU0VfSURdID0gaWQrKztcbiAgcHJvbWlzZS5fc3RhdGUgPSB1bmRlZmluZWQ7XG4gIHByb21pc2UuX3Jlc3VsdCA9IHVuZGVmaW5lZDtcbiAgcHJvbWlzZS5fc3Vic2NyaWJlcnMgPSBbXTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGlvbkVycm9yKCkge1xuICByZXR1cm4gbmV3IEVycm9yKCdBcnJheSBNZXRob2RzIG11c3QgYmUgcHJvdmlkZWQgYW4gQXJyYXknKTtcbn1cblxudmFyIEVudW1lcmF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEVudW1lcmF0b3IoQ29uc3RydWN0b3IsIGlucHV0KSB7XG4gICAgdGhpcy5faW5zdGFuY2VDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3Rvcihub29wKTtcblxuICAgIGlmICghdGhpcy5wcm9taXNlW1BST01JU0VfSURdKSB7XG4gICAgICBtYWtlUHJvbWlzZSh0aGlzLnByb21pc2UpO1xuICAgIH1cblxuICAgIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgICAgdGhpcy5sZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gICAgICB0aGlzLl9yZW1haW5pbmcgPSBpbnB1dC5sZW5ndGg7XG5cbiAgICAgIHRoaXMuX3Jlc3VsdCA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG5cbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBmdWxmaWxsKHRoaXMucHJvbWlzZSwgdGhpcy5fcmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy5sZW5ndGggfHwgMDtcbiAgICAgICAgdGhpcy5fZW51bWVyYXRlKGlucHV0KTtcbiAgICAgICAgaWYgKHRoaXMuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICAgIGZ1bGZpbGwodGhpcy5wcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlamVjdCh0aGlzLnByb21pc2UsIHZhbGlkYXRpb25FcnJvcigpKTtcbiAgICB9XG4gIH1cblxuICBFbnVtZXJhdG9yLnByb3RvdHlwZS5fZW51bWVyYXRlID0gZnVuY3Rpb24gX2VudW1lcmF0ZShpbnB1dCkge1xuICAgIGZvciAodmFyIGkgPSAwOyB0aGlzLl9zdGF0ZSA9PT0gUEVORElORyAmJiBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuX2VhY2hFbnRyeShpbnB1dFtpXSwgaSk7XG4gICAgfVxuICB9O1xuXG4gIEVudW1lcmF0b3IucHJvdG90eXBlLl9lYWNoRW50cnkgPSBmdW5jdGlvbiBfZWFjaEVudHJ5KGVudHJ5LCBpKSB7XG4gICAgdmFyIGMgPSB0aGlzLl9pbnN0YW5jZUNvbnN0cnVjdG9yO1xuICAgIHZhciByZXNvbHZlJCQxID0gYy5yZXNvbHZlO1xuXG5cbiAgICBpZiAocmVzb2x2ZSQkMSA9PT0gcmVzb2x2ZSQxKSB7XG4gICAgICB2YXIgX3RoZW4gPSBnZXRUaGVuKGVudHJ5KTtcblxuICAgICAgaWYgKF90aGVuID09PSB0aGVuICYmIGVudHJ5Ll9zdGF0ZSAhPT0gUEVORElORykge1xuICAgICAgICB0aGlzLl9zZXR0bGVkQXQoZW50cnkuX3N0YXRlLCBpLCBlbnRyeS5fcmVzdWx0KTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIF90aGVuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMuX3JlbWFpbmluZy0tO1xuICAgICAgICB0aGlzLl9yZXN1bHRbaV0gPSBlbnRyeTtcbiAgICAgIH0gZWxzZSBpZiAoYyA9PT0gUHJvbWlzZSQxKSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IGMobm9vcCk7XG4gICAgICAgIGhhbmRsZU1heWJlVGhlbmFibGUocHJvbWlzZSwgZW50cnksIF90aGVuKTtcbiAgICAgICAgdGhpcy5fd2lsbFNldHRsZUF0KHByb21pc2UsIGkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fd2lsbFNldHRsZUF0KG5ldyBjKGZ1bmN0aW9uIChyZXNvbHZlJCQxKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUkJDEoZW50cnkpO1xuICAgICAgICB9KSwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChyZXNvbHZlJCQxKGVudHJ5KSwgaSk7XG4gICAgfVxuICB9O1xuXG4gIEVudW1lcmF0b3IucHJvdG90eXBlLl9zZXR0bGVkQXQgPSBmdW5jdGlvbiBfc2V0dGxlZEF0KHN0YXRlLCBpLCB2YWx1ZSkge1xuICAgIHZhciBwcm9taXNlID0gdGhpcy5wcm9taXNlO1xuXG5cbiAgICBpZiAocHJvbWlzZS5fc3RhdGUgPT09IFBFTkRJTkcpIHtcbiAgICAgIHRoaXMuX3JlbWFpbmluZy0tO1xuXG4gICAgICBpZiAoc3RhdGUgPT09IFJFSkVDVEVEKSB7XG4gICAgICAgIHJlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9yZXN1bHRbaV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcmVtYWluaW5nID09PSAwKSB7XG4gICAgICBmdWxmaWxsKHByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgfVxuICB9O1xuXG4gIEVudW1lcmF0b3IucHJvdG90eXBlLl93aWxsU2V0dGxlQXQgPSBmdW5jdGlvbiBfd2lsbFNldHRsZUF0KHByb21pc2UsIGkpIHtcbiAgICB2YXIgZW51bWVyYXRvciA9IHRoaXM7XG5cbiAgICBzdWJzY3JpYmUocHJvbWlzZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBlbnVtZXJhdG9yLl9zZXR0bGVkQXQoRlVMRklMTEVELCBpLCB2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcmV0dXJuIGVudW1lcmF0b3IuX3NldHRsZWRBdChSRUpFQ1RFRCwgaSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gRW51bWVyYXRvcjtcbn0oKTtcblxuLyoqXG4gIGBQcm9taXNlLmFsbGAgYWNjZXB0cyBhbiBhcnJheSBvZiBwcm9taXNlcywgYW5kIHJldHVybnMgYSBuZXcgcHJvbWlzZSB3aGljaFxuICBpcyBmdWxmaWxsZWQgd2l0aCBhbiBhcnJheSBvZiBmdWxmaWxsbWVudCB2YWx1ZXMgZm9yIHRoZSBwYXNzZWQgcHJvbWlzZXMsIG9yXG4gIHJlamVjdGVkIHdpdGggdGhlIHJlYXNvbiBvZiB0aGUgZmlyc3QgcGFzc2VkIHByb21pc2UgdG8gYmUgcmVqZWN0ZWQuIEl0IGNhc3RzIGFsbFxuICBlbGVtZW50cyBvZiB0aGUgcGFzc2VkIGl0ZXJhYmxlIHRvIHByb21pc2VzIGFzIGl0IHJ1bnMgdGhpcyBhbGdvcml0aG0uXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IHJlc29sdmUoMSk7XG4gIGxldCBwcm9taXNlMiA9IHJlc29sdmUoMik7XG4gIGxldCBwcm9taXNlMyA9IHJlc29sdmUoMyk7XG4gIGxldCBwcm9taXNlcyA9IFsgcHJvbWlzZTEsIHByb21pc2UyLCBwcm9taXNlMyBdO1xuXG4gIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKGFycmF5KXtcbiAgICAvLyBUaGUgYXJyYXkgaGVyZSB3b3VsZCBiZSBbIDEsIDIsIDMgXTtcbiAgfSk7XG4gIGBgYFxuXG4gIElmIGFueSBvZiB0aGUgYHByb21pc2VzYCBnaXZlbiB0byBgYWxsYCBhcmUgcmVqZWN0ZWQsIHRoZSBmaXJzdCBwcm9taXNlXG4gIHRoYXQgaXMgcmVqZWN0ZWQgd2lsbCBiZSBnaXZlbiBhcyBhbiBhcmd1bWVudCB0byB0aGUgcmV0dXJuZWQgcHJvbWlzZXMnc1xuICByZWplY3Rpb24gaGFuZGxlci4gRm9yIGV4YW1wbGU6XG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IHJlc29sdmUoMSk7XG4gIGxldCBwcm9taXNlMiA9IHJlamVjdChuZXcgRXJyb3IoXCIyXCIpKTtcbiAgbGV0IHByb21pc2UzID0gcmVqZWN0KG5ldyBFcnJvcihcIjNcIikpO1xuICBsZXQgcHJvbWlzZXMgPSBbIHByb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTMgXTtcblxuICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhcnJheSl7XG4gICAgLy8gQ29kZSBoZXJlIG5ldmVyIHJ1bnMgYmVjYXVzZSB0aGVyZSBhcmUgcmVqZWN0ZWQgcHJvbWlzZXMhXG4gIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgLy8gZXJyb3IubWVzc2FnZSA9PT0gXCIyXCJcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgYWxsXG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBcnJheX0gZW50cmllcyBhcnJheSBvZiBwcm9taXNlc1xuICBAcGFyYW0ge1N0cmluZ30gbGFiZWwgb3B0aW9uYWwgc3RyaW5nIGZvciBsYWJlbGluZyB0aGUgcHJvbWlzZS5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gYWxsIGBwcm9taXNlc2AgaGF2ZSBiZWVuXG4gIGZ1bGZpbGxlZCwgb3IgcmVqZWN0ZWQgaWYgYW55IG9mIHRoZW0gYmVjb21lIHJlamVjdGVkLlxuICBAc3RhdGljXG4qL1xuZnVuY3Rpb24gYWxsKGVudHJpZXMpIHtcbiAgcmV0dXJuIG5ldyBFbnVtZXJhdG9yKHRoaXMsIGVudHJpZXMpLnByb21pc2U7XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yYWNlYCByZXR1cm5zIGEgbmV3IHByb21pc2Ugd2hpY2ggaXMgc2V0dGxlZCBpbiB0aGUgc2FtZSB3YXkgYXMgdGhlXG4gIGZpcnN0IHBhc3NlZCBwcm9taXNlIHRvIHNldHRsZS5cblxuICBFeGFtcGxlOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDEnKTtcbiAgICB9LCAyMDApO1xuICB9KTtcblxuICBsZXQgcHJvbWlzZTIgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMicpO1xuICAgIH0sIDEwMCk7XG4gIH0pO1xuXG4gIFByb21pc2UucmFjZShbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIHJlc3VsdCA9PT0gJ3Byb21pc2UgMicgYmVjYXVzZSBpdCB3YXMgcmVzb2x2ZWQgYmVmb3JlIHByb21pc2UxXG4gICAgLy8gd2FzIHJlc29sdmVkLlxuICB9KTtcbiAgYGBgXG5cbiAgYFByb21pc2UucmFjZWAgaXMgZGV0ZXJtaW5pc3RpYyBpbiB0aGF0IG9ubHkgdGhlIHN0YXRlIG9mIHRoZSBmaXJzdFxuICBzZXR0bGVkIHByb21pc2UgbWF0dGVycy4gRm9yIGV4YW1wbGUsIGV2ZW4gaWYgb3RoZXIgcHJvbWlzZXMgZ2l2ZW4gdG8gdGhlXG4gIGBwcm9taXNlc2AgYXJyYXkgYXJndW1lbnQgYXJlIHJlc29sdmVkLCBidXQgdGhlIGZpcnN0IHNldHRsZWQgcHJvbWlzZSBoYXNcbiAgYmVjb21lIHJlamVjdGVkIGJlZm9yZSB0aGUgb3RoZXIgcHJvbWlzZXMgYmVjYW1lIGZ1bGZpbGxlZCwgdGhlIHJldHVybmVkXG4gIHByb21pc2Ugd2lsbCBiZWNvbWUgcmVqZWN0ZWQ6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlc29sdmUoJ3Byb21pc2UgMScpO1xuICAgIH0sIDIwMCk7XG4gIH0pO1xuXG4gIGxldCBwcm9taXNlMiA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcigncHJvbWlzZSAyJykpO1xuICAgIH0sIDEwMCk7XG4gIH0pO1xuXG4gIFByb21pc2UucmFjZShbcHJvbWlzZTEsIHByb21pc2UyXSkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gcmVhc29uLm1lc3NhZ2UgPT09ICdwcm9taXNlIDInIGJlY2F1c2UgcHJvbWlzZSAyIGJlY2FtZSByZWplY3RlZCBiZWZvcmVcbiAgICAvLyBwcm9taXNlIDEgYmVjYW1lIGZ1bGZpbGxlZFxuICB9KTtcbiAgYGBgXG5cbiAgQW4gZXhhbXBsZSByZWFsLXdvcmxkIHVzZSBjYXNlIGlzIGltcGxlbWVudGluZyB0aW1lb3V0czpcblxuICBgYGBqYXZhc2NyaXB0XG4gIFByb21pc2UucmFjZShbYWpheCgnZm9vLmpzb24nKSwgdGltZW91dCg1MDAwKV0pXG4gIGBgYFxuXG4gIEBtZXRob2QgcmFjZVxuICBAc3RhdGljXG4gIEBwYXJhbSB7QXJyYXl9IHByb21pc2VzIGFycmF5IG9mIHByb21pc2VzIHRvIG9ic2VydmVcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2Ugd2hpY2ggc2V0dGxlcyBpbiB0aGUgc2FtZSB3YXkgYXMgdGhlIGZpcnN0IHBhc3NlZFxuICBwcm9taXNlIHRvIHNldHRsZS5cbiovXG5mdW5jdGlvbiByYWNlKGVudHJpZXMpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICBpZiAoIWlzQXJyYXkoZW50cmllcykpIHtcbiAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uIChfLCByZWplY3QpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhbiBhcnJheSB0byByYWNlLicpKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBsZW5ndGggPSBlbnRyaWVzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgQ29uc3RydWN0b3IucmVzb2x2ZShlbnRyaWVzW2ldKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gIGBQcm9taXNlLnJlamVjdGAgcmV0dXJucyBhIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgcGFzc2VkIGByZWFzb25gLlxuICBJdCBpcyBzaG9ydGhhbmQgZm9yIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgcmVqZWN0KG5ldyBFcnJvcignV0hPT1BTJykpO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIENvZGUgaGVyZSBkb2Vzbid0IHJ1biBiZWNhdXNlIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnV0hPT1BTJ1xuICB9KTtcbiAgYGBgXG5cbiAgSW5zdGVhZCBvZiB3cml0aW5nIHRoZSBhYm92ZSwgeW91ciBjb2RlIG5vdyBzaW1wbHkgYmVjb21lcyB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1dIT09QUycpKTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIENvZGUgaGVyZSBkb2Vzbid0IHJ1biBiZWNhdXNlIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAnV0hPT1BTJ1xuICB9KTtcbiAgYGBgXG5cbiAgQG1ldGhvZCByZWplY3RcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FueX0gcmVhc29uIHZhbHVlIHRoYXQgdGhlIHJldHVybmVkIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoLlxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSByZWplY3RlZCB3aXRoIHRoZSBnaXZlbiBgcmVhc29uYC5cbiovXG5mdW5jdGlvbiByZWplY3QkMShyZWFzb24pIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcbiAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCk7XG4gIHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gbmVlZHNSZXNvbHZlcigpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignWW91IG11c3QgcGFzcyBhIHJlc29sdmVyIGZ1bmN0aW9uIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgcHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xufVxuXG5mdW5jdGlvbiBuZWVkc05ldygpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1Byb21pc2UnOiBQbGVhc2UgdXNlIHRoZSAnbmV3JyBvcGVyYXRvciwgdGhpcyBvYmplY3QgY29uc3RydWN0b3IgY2Fubm90IGJlIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLlwiKTtcbn1cblxuLyoqXG4gIFByb21pc2Ugb2JqZWN0cyByZXByZXNlbnQgdGhlIGV2ZW50dWFsIHJlc3VsdCBvZiBhbiBhc3luY2hyb25vdXMgb3BlcmF0aW9uLiBUaGVcbiAgcHJpbWFyeSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCBhIHByb21pc2UgaXMgdGhyb3VnaCBpdHMgYHRoZW5gIG1ldGhvZCwgd2hpY2hcbiAgcmVnaXN0ZXJzIGNhbGxiYWNrcyB0byByZWNlaXZlIGVpdGhlciBhIHByb21pc2UncyBldmVudHVhbCB2YWx1ZSBvciB0aGUgcmVhc29uXG4gIHdoeSB0aGUgcHJvbWlzZSBjYW5ub3QgYmUgZnVsZmlsbGVkLlxuXG4gIFRlcm1pbm9sb2d5XG4gIC0tLS0tLS0tLS0tXG5cbiAgLSBgcHJvbWlzZWAgaXMgYW4gb2JqZWN0IG9yIGZ1bmN0aW9uIHdpdGggYSBgdGhlbmAgbWV0aG9kIHdob3NlIGJlaGF2aW9yIGNvbmZvcm1zIHRvIHRoaXMgc3BlY2lmaWNhdGlvbi5cbiAgLSBgdGhlbmFibGVgIGlzIGFuIG9iamVjdCBvciBmdW5jdGlvbiB0aGF0IGRlZmluZXMgYSBgdGhlbmAgbWV0aG9kLlxuICAtIGB2YWx1ZWAgaXMgYW55IGxlZ2FsIEphdmFTY3JpcHQgdmFsdWUgKGluY2x1ZGluZyB1bmRlZmluZWQsIGEgdGhlbmFibGUsIG9yIGEgcHJvbWlzZSkuXG4gIC0gYGV4Y2VwdGlvbmAgaXMgYSB2YWx1ZSB0aGF0IGlzIHRocm93biB1c2luZyB0aGUgdGhyb3cgc3RhdGVtZW50LlxuICAtIGByZWFzb25gIGlzIGEgdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2h5IGEgcHJvbWlzZSB3YXMgcmVqZWN0ZWQuXG4gIC0gYHNldHRsZWRgIHRoZSBmaW5hbCByZXN0aW5nIHN0YXRlIG9mIGEgcHJvbWlzZSwgZnVsZmlsbGVkIG9yIHJlamVjdGVkLlxuXG4gIEEgcHJvbWlzZSBjYW4gYmUgaW4gb25lIG9mIHRocmVlIHN0YXRlczogcGVuZGluZywgZnVsZmlsbGVkLCBvciByZWplY3RlZC5cblxuICBQcm9taXNlcyB0aGF0IGFyZSBmdWxmaWxsZWQgaGF2ZSBhIGZ1bGZpbGxtZW50IHZhbHVlIGFuZCBhcmUgaW4gdGhlIGZ1bGZpbGxlZFxuICBzdGF0ZS4gIFByb21pc2VzIHRoYXQgYXJlIHJlamVjdGVkIGhhdmUgYSByZWplY3Rpb24gcmVhc29uIGFuZCBhcmUgaW4gdGhlXG4gIHJlamVjdGVkIHN0YXRlLiAgQSBmdWxmaWxsbWVudCB2YWx1ZSBpcyBuZXZlciBhIHRoZW5hYmxlLlxuXG4gIFByb21pc2VzIGNhbiBhbHNvIGJlIHNhaWQgdG8gKnJlc29sdmUqIGEgdmFsdWUuICBJZiB0aGlzIHZhbHVlIGlzIGFsc28gYVxuICBwcm9taXNlLCB0aGVuIHRoZSBvcmlnaW5hbCBwcm9taXNlJ3Mgc2V0dGxlZCBzdGF0ZSB3aWxsIG1hdGNoIHRoZSB2YWx1ZSdzXG4gIHNldHRsZWQgc3RhdGUuICBTbyBhIHByb21pc2UgdGhhdCAqcmVzb2x2ZXMqIGEgcHJvbWlzZSB0aGF0IHJlamVjdHMgd2lsbFxuICBpdHNlbGYgcmVqZWN0LCBhbmQgYSBwcm9taXNlIHRoYXQgKnJlc29sdmVzKiBhIHByb21pc2UgdGhhdCBmdWxmaWxscyB3aWxsXG4gIGl0c2VsZiBmdWxmaWxsLlxuXG5cbiAgQmFzaWMgVXNhZ2U6XG4gIC0tLS0tLS0tLS0tLVxuXG4gIGBgYGpzXG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgLy8gb24gc3VjY2Vzc1xuICAgIHJlc29sdmUodmFsdWUpO1xuXG4gICAgLy8gb24gZmFpbHVyZVxuICAgIHJlamVjdChyZWFzb24pO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAvLyBvbiBmdWxmaWxsbWVudFxuICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAvLyBvbiByZWplY3Rpb25cbiAgfSk7XG4gIGBgYFxuXG4gIEFkdmFuY2VkIFVzYWdlOlxuICAtLS0tLS0tLS0tLS0tLS1cblxuICBQcm9taXNlcyBzaGluZSB3aGVuIGFic3RyYWN0aW5nIGF3YXkgYXN5bmNocm9ub3VzIGludGVyYWN0aW9ucyBzdWNoIGFzXG4gIGBYTUxIdHRwUmVxdWVzdGBzLlxuXG4gIGBgYGpzXG4gIGZ1bmN0aW9uIGdldEpTT04odXJsKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwpO1xuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGhhbmRsZXI7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2pzb24nO1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICB4aHIuc2VuZCgpO1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSB0aGlzLkRPTkUpIHtcbiAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignZ2V0SlNPTjogYCcgKyB1cmwgKyAnYCBmYWlsZWQgd2l0aCBzdGF0dXM6IFsnICsgdGhpcy5zdGF0dXMgKyAnXScpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBnZXRKU09OKCcvcG9zdHMuanNvbicpLnRoZW4oZnVuY3Rpb24oanNvbikge1xuICAgIC8vIG9uIGZ1bGZpbGxtZW50XG4gIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIC8vIG9uIHJlamVjdGlvblxuICB9KTtcbiAgYGBgXG5cbiAgVW5saWtlIGNhbGxiYWNrcywgcHJvbWlzZXMgYXJlIGdyZWF0IGNvbXBvc2FibGUgcHJpbWl0aXZlcy5cblxuICBgYGBqc1xuICBQcm9taXNlLmFsbChbXG4gICAgZ2V0SlNPTignL3Bvc3RzJyksXG4gICAgZ2V0SlNPTignL2NvbW1lbnRzJylcbiAgXSkudGhlbihmdW5jdGlvbih2YWx1ZXMpe1xuICAgIHZhbHVlc1swXSAvLyA9PiBwb3N0c0pTT05cbiAgICB2YWx1ZXNbMV0gLy8gPT4gY29tbWVudHNKU09OXG5cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9KTtcbiAgYGBgXG5cbiAgQGNsYXNzIFByb21pc2VcbiAgQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZXJcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAY29uc3RydWN0b3JcbiovXG5cbnZhciBQcm9taXNlJDEgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByb21pc2UocmVzb2x2ZXIpIHtcbiAgICB0aGlzW1BST01JU0VfSURdID0gbmV4dElkKCk7XG4gICAgdGhpcy5fcmVzdWx0ID0gdGhpcy5fc3RhdGUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc3Vic2NyaWJlcnMgPSBbXTtcblxuICAgIGlmIChub29wICE9PSByZXNvbHZlcikge1xuICAgICAgdHlwZW9mIHJlc29sdmVyICE9PSAnZnVuY3Rpb24nICYmIG5lZWRzUmVzb2x2ZXIoKTtcbiAgICAgIHRoaXMgaW5zdGFuY2VvZiBQcm9taXNlID8gaW5pdGlhbGl6ZVByb21pc2UodGhpcywgcmVzb2x2ZXIpIDogbmVlZHNOZXcoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgVGhlIHByaW1hcnkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggYSBwcm9taXNlIGlzIHRocm91Z2ggaXRzIGB0aGVuYCBtZXRob2QsXG4gIHdoaWNoIHJlZ2lzdGVycyBjYWxsYmFja3MgdG8gcmVjZWl2ZSBlaXRoZXIgYSBwcm9taXNlJ3MgZXZlbnR1YWwgdmFsdWUgb3IgdGhlXG4gIHJlYXNvbiB3aHkgdGhlIHByb21pc2UgY2Fubm90IGJlIGZ1bGZpbGxlZC5cbiAgIGBgYGpzXG4gIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbih1c2VyKXtcbiAgICAvLyB1c2VyIGlzIGF2YWlsYWJsZVxuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHVzZXIgaXMgdW5hdmFpbGFibGUsIGFuZCB5b3UgYXJlIGdpdmVuIHRoZSByZWFzb24gd2h5XG4gIH0pO1xuICBgYGBcbiAgIENoYWluaW5nXG4gIC0tLS0tLS0tXG4gICBUaGUgcmV0dXJuIHZhbHVlIG9mIGB0aGVuYCBpcyBpdHNlbGYgYSBwcm9taXNlLiAgVGhpcyBzZWNvbmQsICdkb3duc3RyZWFtJ1xuICBwcm9taXNlIGlzIHJlc29sdmVkIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZmlyc3QgcHJvbWlzZSdzIGZ1bGZpbGxtZW50XG4gIG9yIHJlamVjdGlvbiBoYW5kbGVyLCBvciByZWplY3RlZCBpZiB0aGUgaGFuZGxlciB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICAgYGBganNcbiAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgcmV0dXJuIHVzZXIubmFtZTtcbiAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIHJldHVybiAnZGVmYXVsdCBuYW1lJztcbiAgfSkudGhlbihmdW5jdGlvbiAodXNlck5hbWUpIHtcbiAgICAvLyBJZiBgZmluZFVzZXJgIGZ1bGZpbGxlZCwgYHVzZXJOYW1lYCB3aWxsIGJlIHRoZSB1c2VyJ3MgbmFtZSwgb3RoZXJ3aXNlIGl0XG4gICAgLy8gd2lsbCBiZSBgJ2RlZmF1bHQgbmFtZSdgXG4gIH0pO1xuICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCB1c2VyLCBidXQgc3RpbGwgdW5oYXBweScpO1xuICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZSdyZSB1bmhhcHB5Jyk7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gbmV2ZXIgcmVhY2hlZFxuICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgLy8gaWYgYGZpbmRVc2VyYCBmdWxmaWxsZWQsIGByZWFzb25gIHdpbGwgYmUgJ0ZvdW5kIHVzZXIsIGJ1dCBzdGlsbCB1bmhhcHB5Jy5cbiAgICAvLyBJZiBgZmluZFVzZXJgIHJlamVjdGVkLCBgcmVhc29uYCB3aWxsIGJlICdgZmluZFVzZXJgIHJlamVjdGVkIGFuZCB3ZSdyZSB1bmhhcHB5Jy5cbiAgfSk7XG4gIGBgYFxuICBJZiB0aGUgZG93bnN0cmVhbSBwcm9taXNlIGRvZXMgbm90IHNwZWNpZnkgYSByZWplY3Rpb24gaGFuZGxlciwgcmVqZWN0aW9uIHJlYXNvbnMgd2lsbCBiZSBwcm9wYWdhdGVkIGZ1cnRoZXIgZG93bnN0cmVhbS5cbiAgIGBgYGpzXG4gIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgIHRocm93IG5ldyBQZWRhZ29naWNhbEV4Y2VwdGlvbignVXBzdHJlYW0gZXJyb3InKTtcbiAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyBuZXZlciByZWFjaGVkXG4gIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gbmV2ZXIgcmVhY2hlZFxuICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgLy8gVGhlIGBQZWRnYWdvY2lhbEV4Y2VwdGlvbmAgaXMgcHJvcGFnYXRlZCBhbGwgdGhlIHdheSBkb3duIHRvIGhlcmVcbiAgfSk7XG4gIGBgYFxuICAgQXNzaW1pbGF0aW9uXG4gIC0tLS0tLS0tLS0tLVxuICAgU29tZXRpbWVzIHRoZSB2YWx1ZSB5b3Ugd2FudCB0byBwcm9wYWdhdGUgdG8gYSBkb3duc3RyZWFtIHByb21pc2UgY2FuIG9ubHkgYmVcbiAgcmV0cmlldmVkIGFzeW5jaHJvbm91c2x5LiBUaGlzIGNhbiBiZSBhY2hpZXZlZCBieSByZXR1cm5pbmcgYSBwcm9taXNlIGluIHRoZVxuICBmdWxmaWxsbWVudCBvciByZWplY3Rpb24gaGFuZGxlci4gVGhlIGRvd25zdHJlYW0gcHJvbWlzZSB3aWxsIHRoZW4gYmUgcGVuZGluZ1xuICB1bnRpbCB0aGUgcmV0dXJuZWQgcHJvbWlzZSBpcyBzZXR0bGVkLiBUaGlzIGlzIGNhbGxlZCAqYXNzaW1pbGF0aW9uKi5cbiAgIGBgYGpzXG4gIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgfSkudGhlbihmdW5jdGlvbiAoY29tbWVudHMpIHtcbiAgICAvLyBUaGUgdXNlcidzIGNvbW1lbnRzIGFyZSBub3cgYXZhaWxhYmxlXG4gIH0pO1xuICBgYGBcbiAgIElmIHRoZSBhc3NpbWxpYXRlZCBwcm9taXNlIHJlamVjdHMsIHRoZW4gdGhlIGRvd25zdHJlYW0gcHJvbWlzZSB3aWxsIGFsc28gcmVqZWN0LlxuICAgYGBganNcbiAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgcmV0dXJuIGZpbmRDb21tZW50c0J5QXV0aG9yKHVzZXIpO1xuICB9KS50aGVuKGZ1bmN0aW9uIChjb21tZW50cykge1xuICAgIC8vIElmIGBmaW5kQ29tbWVudHNCeUF1dGhvcmAgZnVsZmlsbHMsIHdlJ2xsIGhhdmUgdGhlIHZhbHVlIGhlcmVcbiAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIC8vIElmIGBmaW5kQ29tbWVudHNCeUF1dGhvcmAgcmVqZWN0cywgd2UnbGwgaGF2ZSB0aGUgcmVhc29uIGhlcmVcbiAgfSk7XG4gIGBgYFxuICAgU2ltcGxlIEV4YW1wbGVcbiAgLS0tLS0tLS0tLS0tLS1cbiAgIFN5bmNocm9ub3VzIEV4YW1wbGVcbiAgIGBgYGphdmFzY3JpcHRcbiAgbGV0IHJlc3VsdDtcbiAgIHRyeSB7XG4gICAgcmVzdWx0ID0gZmluZFJlc3VsdCgpO1xuICAgIC8vIHN1Y2Nlc3NcbiAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAvLyBmYWlsdXJlXG4gIH1cbiAgYGBgXG4gICBFcnJiYWNrIEV4YW1wbGVcbiAgIGBgYGpzXG4gIGZpbmRSZXN1bHQoZnVuY3Rpb24ocmVzdWx0LCBlcnIpe1xuICAgIGlmIChlcnIpIHtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc3VjY2Vzc1xuICAgIH1cbiAgfSk7XG4gIGBgYFxuICAgUHJvbWlzZSBFeGFtcGxlO1xuICAgYGBgamF2YXNjcmlwdFxuICBmaW5kUmVzdWx0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpe1xuICAgIC8vIHN1Y2Nlc3NcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyBmYWlsdXJlXG4gIH0pO1xuICBgYGBcbiAgIEFkdmFuY2VkIEV4YW1wbGVcbiAgLS0tLS0tLS0tLS0tLS1cbiAgIFN5bmNocm9ub3VzIEV4YW1wbGVcbiAgIGBgYGphdmFzY3JpcHRcbiAgbGV0IGF1dGhvciwgYm9va3M7XG4gICB0cnkge1xuICAgIGF1dGhvciA9IGZpbmRBdXRob3IoKTtcbiAgICBib29rcyAgPSBmaW5kQm9va3NCeUF1dGhvcihhdXRob3IpO1xuICAgIC8vIHN1Y2Nlc3NcbiAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAvLyBmYWlsdXJlXG4gIH1cbiAgYGBgXG4gICBFcnJiYWNrIEV4YW1wbGVcbiAgIGBgYGpzXG4gICBmdW5jdGlvbiBmb3VuZEJvb2tzKGJvb2tzKSB7XG4gICB9XG4gICBmdW5jdGlvbiBmYWlsdXJlKHJlYXNvbikge1xuICAgfVxuICAgZmluZEF1dGhvcihmdW5jdGlvbihhdXRob3IsIGVycil7XG4gICAgaWYgKGVycikge1xuICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgLy8gZmFpbHVyZVxuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICBmaW5kQm9vb2tzQnlBdXRob3IoYXV0aG9yLCBmdW5jdGlvbihib29rcywgZXJyKSB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmb3VuZEJvb2tzKGJvb2tzKTtcbiAgICAgICAgICAgIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgICAgICAgICAgIGZhaWx1cmUocmVhc29uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICBmYWlsdXJlKGVycik7XG4gICAgICB9XG4gICAgICAvLyBzdWNjZXNzXG4gICAgfVxuICB9KTtcbiAgYGBgXG4gICBQcm9taXNlIEV4YW1wbGU7XG4gICBgYGBqYXZhc2NyaXB0XG4gIGZpbmRBdXRob3IoKS5cbiAgICB0aGVuKGZpbmRCb29rc0J5QXV0aG9yKS5cbiAgICB0aGVuKGZ1bmN0aW9uKGJvb2tzKXtcbiAgICAgIC8vIGZvdW5kIGJvb2tzXG4gIH0pLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgfSk7XG4gIGBgYFxuICAgQG1ldGhvZCB0aGVuXG4gIEBwYXJhbSB7RnVuY3Rpb259IG9uRnVsZmlsbGVkXG4gIEBwYXJhbSB7RnVuY3Rpb259IG9uUmVqZWN0ZWRcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfVxuICAqL1xuXG4gIC8qKlxuICBgY2F0Y2hgIGlzIHNpbXBseSBzdWdhciBmb3IgYHRoZW4odW5kZWZpbmVkLCBvblJlamVjdGlvbilgIHdoaWNoIG1ha2VzIGl0IHRoZSBzYW1lXG4gIGFzIHRoZSBjYXRjaCBibG9jayBvZiBhIHRyeS9jYXRjaCBzdGF0ZW1lbnQuXG4gIGBgYGpzXG4gIGZ1bmN0aW9uIGZpbmRBdXRob3IoKXtcbiAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZG4ndCBmaW5kIHRoYXQgYXV0aG9yJyk7XG4gIH1cbiAgLy8gc3luY2hyb25vdXNcbiAgdHJ5IHtcbiAgZmluZEF1dGhvcigpO1xuICB9IGNhdGNoKHJlYXNvbikge1xuICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICB9XG4gIC8vIGFzeW5jIHdpdGggcHJvbWlzZXNcbiAgZmluZEF1dGhvcigpLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gIH0pO1xuICBgYGBcbiAgQG1ldGhvZCBjYXRjaFxuICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGlvblxuICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gIEByZXR1cm4ge1Byb21pc2V9XG4gICovXG5cblxuICBQcm9taXNlLnByb3RvdHlwZS5jYXRjaCA9IGZ1bmN0aW9uIF9jYXRjaChvblJlamVjdGlvbikge1xuICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgb25SZWplY3Rpb24pO1xuICB9O1xuXG4gIC8qKlxuICAgIGBmaW5hbGx5YCB3aWxsIGJlIGludm9rZWQgcmVnYXJkbGVzcyBvZiB0aGUgcHJvbWlzZSdzIGZhdGUganVzdCBhcyBuYXRpdmVcbiAgICB0cnkvY2F0Y2gvZmluYWxseSBiZWhhdmVzXG4gIFxuICAgIFN5bmNocm9ub3VzIGV4YW1wbGU6XG4gIFxuICAgIGBgYGpzXG4gICAgZmluZEF1dGhvcigpIHtcbiAgICAgIGlmIChNYXRoLnJhbmRvbSgpID4gMC41KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBBdXRob3IoKTtcbiAgICB9XG4gIFxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZmluZEF1dGhvcigpOyAvLyBzdWNjZWVkIG9yIGZhaWxcbiAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmluZE90aGVyQXV0aGVyKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIC8vIGFsd2F5cyBydW5zXG4gICAgICAvLyBkb2Vzbid0IGFmZmVjdCB0aGUgcmV0dXJuIHZhbHVlXG4gICAgfVxuICAgIGBgYFxuICBcbiAgICBBc3luY2hyb25vdXMgZXhhbXBsZTpcbiAgXG4gICAgYGBganNcbiAgICBmaW5kQXV0aG9yKCkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgIHJldHVybiBmaW5kT3RoZXJBdXRoZXIoKTtcbiAgICB9KS5maW5hbGx5KGZ1bmN0aW9uKCl7XG4gICAgICAvLyBhdXRob3Igd2FzIGVpdGhlciBmb3VuZCwgb3Igbm90XG4gICAgfSk7XG4gICAgYGBgXG4gIFxuICAgIEBtZXRob2QgZmluYWxseVxuICAgIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cblxuXG4gIFByb21pc2UucHJvdG90eXBlLmZpbmFsbHkgPSBmdW5jdGlvbiBfZmluYWxseShjYWxsYmFjaykge1xuICAgIHZhciBwcm9taXNlID0gdGhpcztcbiAgICB2YXIgY29uc3RydWN0b3IgPSBwcm9taXNlLmNvbnN0cnVjdG9yO1xuXG4gICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBjb25zdHJ1Y3Rvci5yZXNvbHZlKGNhbGxiYWNrKCkpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICByZXR1cm4gY29uc3RydWN0b3IucmVzb2x2ZShjYWxsYmFjaygpKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhyb3cgcmVhc29uO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFByb21pc2U7XG59KCk7XG5cblByb21pc2UkMS5wcm90b3R5cGUudGhlbiA9IHRoZW47XG5Qcm9taXNlJDEuYWxsID0gYWxsO1xuUHJvbWlzZSQxLnJhY2UgPSByYWNlO1xuUHJvbWlzZSQxLnJlc29sdmUgPSByZXNvbHZlJDE7XG5Qcm9taXNlJDEucmVqZWN0ID0gcmVqZWN0JDE7XG5Qcm9taXNlJDEuX3NldFNjaGVkdWxlciA9IHNldFNjaGVkdWxlcjtcblByb21pc2UkMS5fc2V0QXNhcCA9IHNldEFzYXA7XG5Qcm9taXNlJDEuX2FzYXAgPSBhc2FwO1xuXG4vKmdsb2JhbCBzZWxmKi9cbmZ1bmN0aW9uIHBvbHlmaWxsKCkge1xuICB2YXIgbG9jYWwgPSB2b2lkIDA7XG5cbiAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbG9jYWwgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbG9jYWwgPSBzZWxmO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBsb2NhbCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdwb2x5ZmlsbCBmYWlsZWQgYmVjYXVzZSBnbG9iYWwgb2JqZWN0IGlzIHVuYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQnKTtcbiAgICB9XG4gIH1cblxuICB2YXIgUCA9IGxvY2FsLlByb21pc2U7XG5cbiAgaWYgKFApIHtcbiAgICB2YXIgcHJvbWlzZVRvU3RyaW5nID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgcHJvbWlzZVRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFAucmVzb2x2ZSgpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBzaWxlbnRseSBpZ25vcmVkXG4gICAgfVxuXG4gICAgaWYgKHByb21pc2VUb1N0cmluZyA9PT0gJ1tvYmplY3QgUHJvbWlzZV0nICYmICFQLmNhc3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBsb2NhbC5Qcm9taXNlID0gUHJvbWlzZSQxO1xufVxuXG4vLyBTdHJhbmdlIGNvbXBhdC4uXG5Qcm9taXNlJDEucG9seWZpbGwgPSBwb2x5ZmlsbDtcblByb21pc2UkMS5Qcm9taXNlID0gUHJvbWlzZSQxO1xuXG5yZXR1cm4gUHJvbWlzZSQxO1xuXG59KSkpO1xuXG5cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXM2LXByb21pc2UubWFwXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGUgfHwgb2JqZWN0Q3JlYXRlUG9seWZpbGxcbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgb2JqZWN0S2V5c1BvbHlmaWxsXG52YXIgYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIHx8IGZ1bmN0aW9uQmluZFBvbHlmaWxsXG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLCAnX2V2ZW50cycpKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gb2JqZWN0Q3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbnZhciBkZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbnZhciBoYXNEZWZpbmVQcm9wZXJ0eTtcbnRyeSB7XG4gIHZhciBvID0ge307XG4gIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCAneCcsIHsgdmFsdWU6IDAgfSk7XG4gIGhhc0RlZmluZVByb3BlcnR5ID0gby54ID09PSAwO1xufSBjYXRjaCAoZXJyKSB7IGhhc0RlZmluZVByb3BlcnR5ID0gZmFsc2UgfVxuaWYgKGhhc0RlZmluZVByb3BlcnR5KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEVtaXR0ZXIsICdkZWZhdWx0TWF4TGlzdGVuZXJzJywge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0TWF4TGlzdGVuZXJzO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIC8vIGNoZWNrIHdoZXRoZXIgdGhlIGlucHV0IGlzIGEgcG9zaXRpdmUgbnVtYmVyICh3aG9zZSB2YWx1ZSBpcyB6ZXJvIG9yXG4gICAgICAvLyBncmVhdGVyIGFuZCBub3QgYSBOYU4pLlxuICAgICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgYXJnICE9PSBhcmcpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZGVmYXVsdE1heExpc3RlbmVyc1wiIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgICAgIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSBhcmc7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzID0gZGVmYXVsdE1heExpc3RlbmVycztcbn1cblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBpc05hTihuKSlcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcIm5cIiBhcmd1bWVudCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gJGdldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gJGdldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbi8vIFRoZXNlIHN0YW5kYWxvbmUgZW1pdCogZnVuY3Rpb25zIGFyZSB1c2VkIHRvIG9wdGltaXplIGNhbGxpbmcgb2YgZXZlbnRcbi8vIGhhbmRsZXJzIGZvciBmYXN0IGNhc2VzIGJlY2F1c2UgZW1pdCgpIGl0c2VsZiBvZnRlbiBoYXMgYSB2YXJpYWJsZSBudW1iZXIgb2Zcbi8vIGFyZ3VtZW50cyBhbmQgY2FuIGJlIGRlb3B0aW1pemVkIGJlY2F1c2Ugb2YgdGhhdC4gVGhlc2UgZnVuY3Rpb25zIGFsd2F5cyBoYXZlXG4vLyB0aGUgc2FtZSBudW1iZXIgb2YgYXJndW1lbnRzIGFuZCB0aHVzIGRvIG5vdCBnZXQgZGVvcHRpbWl6ZWQsIHNvIHRoZSBjb2RlXG4vLyBpbnNpZGUgdGhlbSBjYW4gZXhlY3V0ZSBmYXN0ZXIuXG5mdW5jdGlvbiBlbWl0Tm9uZShoYW5kbGVyLCBpc0ZuLCBzZWxmKSB7XG4gIGlmIChpc0ZuKVxuICAgIGhhbmRsZXIuY2FsbChzZWxmKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHNlbGYpO1xuICB9XG59XG5mdW5jdGlvbiBlbWl0T25lKGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZzEpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5jYWxsKHNlbGYsIGFyZzEpO1xuICBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZiwgYXJnMSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVtaXRUd28oaGFuZGxlciwgaXNGbiwgc2VsZiwgYXJnMSwgYXJnMikge1xuICBpZiAoaXNGbilcbiAgICBoYW5kbGVyLmNhbGwoc2VsZiwgYXJnMSwgYXJnMik7XG4gIGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBsaXN0ZW5lcnNbaV0uY2FsbChzZWxmLCBhcmcxLCBhcmcyKTtcbiAgfVxufVxuZnVuY3Rpb24gZW1pdFRocmVlKGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5jYWxsKHNlbGYsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZiwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdE1hbnkoaGFuZGxlciwgaXNGbiwgc2VsZiwgYXJncykge1xuICBpZiAoaXNGbilcbiAgICBoYW5kbGVyLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgZXIsIGhhbmRsZXIsIGxlbiwgYXJncywgaSwgZXZlbnRzO1xuICB2YXIgZG9FcnJvciA9ICh0eXBlID09PSAnZXJyb3InKTtcblxuICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMpXG4gICAgZG9FcnJvciA9IChkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PSBudWxsKTtcbiAgZWxzZSBpZiAoIWRvRXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKGRvRXJyb3IpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpXG4gICAgICBlciA9IGFyZ3VtZW50c1sxXTtcbiAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcbiAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBcImVycm9yXCIgZXZlbnQuICgnICsgZXIgKyAnKScpO1xuICAgICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoIWhhbmRsZXIpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBpc0ZuID0gdHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbic7XG4gIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHN3aXRjaCAobGVuKSB7XG4gICAgICAvLyBmYXN0IGNhc2VzXG4gICAgY2FzZSAxOlxuICAgICAgZW1pdE5vbmUoaGFuZGxlciwgaXNGbiwgdGhpcyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICBlbWl0T25lKGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICBlbWl0VHdvKGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIGVtaXRUaHJlZShoYW5kbGVyLCBpc0ZuLCB0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSwgYXJndW1lbnRzWzNdKTtcbiAgICAgIGJyZWFrO1xuICAgICAgLy8gc2xvd2VyXG4gICAgZGVmYXVsdDpcbiAgICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpKyspXG4gICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgZW1pdE1hbnkoaGFuZGxlciwgaXNGbiwgdGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBwcmVwZW5kKSB7XG4gIHZhciBtO1xuICB2YXIgZXZlbnRzO1xuICB2YXIgZXhpc3Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gIGlmICghZXZlbnRzKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBvYmplY3RDcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lcikge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gICAgICAvLyBSZS1hc3NpZ24gYGV2ZW50c2AgYmVjYXVzZSBhIG5ld0xpc3RlbmVyIGhhbmRsZXIgY291bGQgaGF2ZSBjYXVzZWQgdGhlXG4gICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0XG4gICAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgICB9XG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV07XG4gIH1cblxuICBpZiAoIWV4aXN0aW5nKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICAgIGlmIChwcmVwZW5kKSB7XG4gICAgICAgIGV4aXN0aW5nLnVuc2hpZnQobGlzdGVuZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBpZiAoIWV4aXN0aW5nLndhcm5lZCkge1xuICAgICAgbSA9ICRnZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICAgIGlmIChtICYmIG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0pIHtcbiAgICAgICAgZXhpc3Rpbmcud2FybmVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICBleGlzdGluZy5sZW5ndGggKyAnIFwiJyArIFN0cmluZyh0eXBlKSArICdcIiBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgJ2luY3JlYXNlIGxpbWl0LicpO1xuICAgICAgICB3Lm5hbWUgPSAnTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nJztcbiAgICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgICB3LmNvdW50ID0gZXhpc3RpbmcubGVuZ3RoO1xuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgPT09ICdvYmplY3QnICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICAgIGNvbnNvbGUud2FybignJXM6ICVzJywgdy5uYW1lLCB3Lm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgaWYgKCF0aGlzLmZpcmVkKSB7XG4gICAgdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLCB0aGlzLndyYXBGbik7XG4gICAgdGhpcy5maXJlZCA9IHRydWU7XG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0LCBhcmd1bWVudHNbMF0pO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0LCBhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSk7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQsIGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdLFxuICAgICAgICAgICAgYXJndW1lbnRzWzJdKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgdGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCwgYXJncyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IGJpbmQuY2FsbChvbmNlV3JhcHBlciwgc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgdGhpcy5wcmVwZW5kTGlzdGVuZXIodHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4vLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmICghZXZlbnRzKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmICghbGlzdClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBvYmplY3RDcmVhdGUobnVsbCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0Lmxpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwb3NpdGlvbiA9IC0xO1xuXG4gICAgICAgIGZvciAoaSA9IGxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHwgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsTGlzdGVuZXIgPSBsaXN0W2ldLmxpc3RlbmVyO1xuICAgICAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICBpZiAocG9zaXRpb24gPT09IDApXG4gICAgICAgICAgbGlzdC5zaGlmdCgpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBvcmlnaW5hbExpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmICghZXZlbnRzKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICAgICAgaWYgKCFldmVudHMucmVtb3ZlTGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBvYmplY3RDcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gb2JqZWN0Q3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBvYmplY3RLZXlzKGV2ZW50cyk7XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBvYmplY3RDcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgICAgLy8gTElGTyBvcmRlclxuICAgICAgICBmb3IgKGkgPSBsaXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuZnVuY3Rpb24gX2xpc3RlbmVycyh0YXJnZXQsIHR5cGUsIHVud3JhcCkge1xuICB2YXIgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG5cbiAgaWYgKCFldmVudHMpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoIWV2bGlzdGVuZXIpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/IHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG5cbiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoZXZsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdC5vd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKS5cbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpXG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIGxpc3QucG9wKCk7XG59XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gb2JqZWN0Q3JlYXRlUG9seWZpbGwocHJvdG8pIHtcbiAgdmFyIEYgPSBmdW5jdGlvbigpIHt9O1xuICBGLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXR1cm4gbmV3IEY7XG59XG5mdW5jdGlvbiBvYmplY3RLZXlzUG9seWZpbGwob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGsgaW4gb2JqKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaykpIHtcbiAgICBrZXlzLnB1c2goayk7XG4gIH1cbiAgcmV0dXJuIGs7XG59XG5mdW5jdGlvbiBmdW5jdGlvbkJpbmRQb2x5ZmlsbChjb250ZXh0KSB7XG4gIHZhciBmbiA9IHRoaXM7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gIH07XG59XG4iLCIvKipcbiAqXG4gKiBAbmFtZXNwYWNlIGZha2VyLmFkZHJlc3NcbiAqL1xuZnVuY3Rpb24gQWRkcmVzcyAoZmFrZXIpIHtcbiAgdmFyIGYgPSBmYWtlci5mYWtlLFxuICAgICAgSGVscGVycyA9IGZha2VyLmhlbHBlcnM7XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyByYW5kb20gemlwY29kZSBmcm9tIGZvcm1hdC4gSWYgZm9ybWF0IGlzIG5vdCBzcGVjaWZpZWQsIHRoZVxuICAgKiBsb2NhbGUncyB6aXAgZm9ybWF0IGlzIHVzZWQuXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuYWRkcmVzcy56aXBDb2RlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXRcbiAgICovXG4gIHRoaXMuemlwQ29kZSA9IGZ1bmN0aW9uKGZvcm1hdCkge1xuICAgIC8vIGlmIHppcCBmb3JtYXQgaXMgbm90IHNwZWNpZmllZCwgdXNlIHRoZSB6aXAgZm9ybWF0IGRlZmluZWQgZm9yIHRoZSBsb2NhbGVcbiAgICBpZiAodHlwZW9mIGZvcm1hdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBsb2NhbGVGb3JtYXQgPSBmYWtlci5kZWZpbml0aW9ucy5hZGRyZXNzLnBvc3Rjb2RlO1xuICAgICAgaWYgKHR5cGVvZiBsb2NhbGVGb3JtYXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGZvcm1hdCA9IGxvY2FsZUZvcm1hdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvcm1hdCA9IGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQobG9jYWxlRm9ybWF0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIEhlbHBlcnMucmVwbGFjZVN5bWJvbHMoZm9ybWF0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSByYW5kb20gbG9jYWxpemVkIGNpdHkgbmFtZS4gVGhlIGZvcm1hdCBzdHJpbmcgY2FuIGNvbnRhaW4gYW55XG4gICAqIG1ldGhvZCBwcm92aWRlZCBieSBmYWtlciB3cmFwcGVkIGluIGB7e319YCwgZS5nLiBge3tuYW1lLmZpcnN0TmFtZX19YCBpblxuICAgKiBvcmRlciB0byBidWlsZCB0aGUgY2l0eSBuYW1lLlxuICAgKlxuICAgKiBJZiBubyBmb3JtYXQgc3RyaW5nIGlzIHByb3ZpZGVkIG9uZSBvZiB0aGUgZm9sbG93aW5nIGlzIHJhbmRvbWx5IHVzZWQ6XG4gICAqIFxuICAgKiAqIGB7e2FkZHJlc3MuY2l0eVByZWZpeH19IHt7bmFtZS5maXJzdE5hbWV9fXt7YWRkcmVzcy5jaXR5U3VmZml4fX1gXG4gICAqICogYHt7YWRkcmVzcy5jaXR5UHJlZml4fX0ge3tuYW1lLmZpcnN0TmFtZX19YFxuICAgKiAqIGB7e25hbWUuZmlyc3ROYW1lfX17e2FkZHJlc3MuY2l0eVN1ZmZpeH19YFxuICAgKiAqIGB7e25hbWUubGFzdE5hbWV9fXt7YWRkcmVzcy5jaXR5U3VmZml4fX1gXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuYWRkcmVzcy5jaXR5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXRcbiAgICovXG4gIHRoaXMuY2l0eSA9IGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICB2YXIgZm9ybWF0cyA9IFtcbiAgICAgICd7e2FkZHJlc3MuY2l0eVByZWZpeH19IHt7bmFtZS5maXJzdE5hbWV9fXt7YWRkcmVzcy5jaXR5U3VmZml4fX0nLFxuICAgICAgJ3t7YWRkcmVzcy5jaXR5UHJlZml4fX0ge3tuYW1lLmZpcnN0TmFtZX19JyxcbiAgICAgICd7e25hbWUuZmlyc3ROYW1lfX17e2FkZHJlc3MuY2l0eVN1ZmZpeH19JyxcbiAgICAgICd7e25hbWUubGFzdE5hbWV9fXt7YWRkcmVzcy5jaXR5U3VmZml4fX0nXG4gICAgXTtcblxuICAgIGlmICh0eXBlb2YgZm9ybWF0ICE9PSBcIm51bWJlclwiKSB7XG4gICAgICBmb3JtYXQgPSBmYWtlci5yYW5kb20ubnVtYmVyKGZvcm1hdHMubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGYoZm9ybWF0c1tmb3JtYXRdKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIHJhbmRvbSBsb2NhbGl6ZWQgY2l0eSBwcmVmaXhcbiAgICogQG1ldGhvZCBmYWtlci5hZGRyZXNzLmNpdHlQcmVmaXhcbiAgICovXG4gIHRoaXMuY2l0eVByZWZpeCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5hZGRyZXNzLmNpdHlfcHJlZml4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYSByYW5kb20gbG9jYWxpemVkIGNpdHkgc3VmZml4XG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuYWRkcmVzcy5jaXR5U3VmZml4XG4gICAqL1xuICB0aGlzLmNpdHlTdWZmaXggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoZmFrZXIuZGVmaW5pdGlvbnMuYWRkcmVzcy5jaXR5X3N1ZmZpeCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHJhbmRvbSBsb2NhbGl6ZWQgc3RyZWV0IG5hbWVcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5hZGRyZXNzLnN0cmVldE5hbWVcbiAgICovXG4gIHRoaXMuc3RyZWV0TmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB2YXIgc3VmZml4ID0gZmFrZXIuYWRkcmVzcy5zdHJlZXRTdWZmaXgoKTtcbiAgICAgIGlmIChzdWZmaXggIT09IFwiXCIpIHtcbiAgICAgICAgICBzdWZmaXggPSBcIiBcIiArIHN1ZmZpeFxuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGZha2VyLnJhbmRvbS5udW1iZXIoMSkpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgICByZXN1bHQgPSBmYWtlci5uYW1lLmxhc3ROYW1lKCkgKyBzdWZmaXg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE6XG4gICAgICAgICAgcmVzdWx0ID0gZmFrZXIubmFtZS5maXJzdE5hbWUoKSArIHN1ZmZpeDtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvL1xuICAvLyBUT0RPOiBjaGFuZ2UgYWxsIHRoZXNlIG1ldGhvZHMgdGhhdCBhY2NlcHQgYSBib29sZWFuIHRvIGluc3RlYWQgYWNjZXB0IGFuIG9wdGlvbnMgaGFzaC5cbiAgLy9cbiAgLyoqXG4gICAqIFJldHVybnMgYSByYW5kb20gbG9jYWxpemVkIHN0cmVldCBhZGRyZXNzXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuYWRkcmVzcy5zdHJlZXRBZGRyZXNzXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gdXNlRnVsbEFkZHJlc3NcbiAgICovXG4gIHRoaXMuc3RyZWV0QWRkcmVzcyA9IGZ1bmN0aW9uICh1c2VGdWxsQWRkcmVzcykge1xuICAgICAgaWYgKHVzZUZ1bGxBZGRyZXNzID09PSB1bmRlZmluZWQpIHsgdXNlRnVsbEFkZHJlc3MgPSBmYWxzZTsgfVxuICAgICAgdmFyIGFkZHJlc3MgPSBcIlwiO1xuICAgICAgc3dpdGNoIChmYWtlci5yYW5kb20ubnVtYmVyKDIpKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgICAgYWRkcmVzcyA9IEhlbHBlcnMucmVwbGFjZVN5bWJvbFdpdGhOdW1iZXIoXCIjIyMjI1wiKSArIFwiIFwiICsgZmFrZXIuYWRkcmVzcy5zdHJlZXROYW1lKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE6XG4gICAgICAgICAgYWRkcmVzcyA9IEhlbHBlcnMucmVwbGFjZVN5bWJvbFdpdGhOdW1iZXIoXCIjIyMjXCIpICsgIFwiIFwiICsgZmFrZXIuYWRkcmVzcy5zdHJlZXROYW1lKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgICAgYWRkcmVzcyA9IEhlbHBlcnMucmVwbGFjZVN5bWJvbFdpdGhOdW1iZXIoXCIjIyNcIikgKyBcIiBcIiArIGZha2VyLmFkZHJlc3Muc3RyZWV0TmFtZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVzZUZ1bGxBZGRyZXNzID8gKGFkZHJlc3MgKyBcIiBcIiArIGZha2VyLmFkZHJlc3Muc2Vjb25kYXJ5QWRkcmVzcygpKSA6IGFkZHJlc3M7XG4gIH1cblxuICAvKipcbiAgICogc3RyZWV0U3VmZml4XG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuYWRkcmVzcy5zdHJlZXRTdWZmaXhcbiAgICovXG4gIHRoaXMuc3RyZWV0U3VmZml4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoZmFrZXIuZGVmaW5pdGlvbnMuYWRkcmVzcy5zdHJlZXRfc3VmZml4KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIHN0cmVldFByZWZpeFxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmFkZHJlc3Muc3RyZWV0UHJlZml4XG4gICAqL1xuICB0aGlzLnN0cmVldFByZWZpeCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmRlZmluaXRpb25zLmFkZHJlc3Muc3RyZWV0X3ByZWZpeCk7XG4gIH1cblxuICAvKipcbiAgICogc2Vjb25kYXJ5QWRkcmVzc1xuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmFkZHJlc3Muc2Vjb25kYXJ5QWRkcmVzc1xuICAgKi9cbiAgdGhpcy5zZWNvbmRhcnlBZGRyZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIEhlbHBlcnMucmVwbGFjZVN5bWJvbFdpdGhOdW1iZXIoZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChcbiAgICAgICAgICBbXG4gICAgICAgICAgICAgICdBcHQuICMjIycsXG4gICAgICAgICAgICAgICdTdWl0ZSAjIyMnXG4gICAgICAgICAgXVxuICAgICAgKSk7XG4gIH1cblxuICAvKipcbiAgICogY291bnR5XG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuYWRkcmVzcy5jb3VudHlcbiAgICovXG4gIHRoaXMuY291bnR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmRlZmluaXRpb25zLmFkZHJlc3MuY291bnR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBjb3VudHJ5XG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuYWRkcmVzcy5jb3VudHJ5XG4gICAqL1xuICB0aGlzLmNvdW50cnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoZmFrZXIuZGVmaW5pdGlvbnMuYWRkcmVzcy5jb3VudHJ5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBjb3VudHJ5Q29kZVxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmFkZHJlc3MuY291bnRyeUNvZGVcbiAgICovXG4gIHRoaXMuY291bnRyeUNvZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoZmFrZXIuZGVmaW5pdGlvbnMuYWRkcmVzcy5jb3VudHJ5X2NvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIHN0YXRlXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuYWRkcmVzcy5zdGF0ZVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHVzZUFiYnJcbiAgICovXG4gIHRoaXMuc3RhdGUgPSBmdW5jdGlvbiAodXNlQWJicikge1xuICAgICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoZmFrZXIuZGVmaW5pdGlvbnMuYWRkcmVzcy5zdGF0ZSk7XG4gIH1cblxuICAvKipcbiAgICogc3RhdGVBYmJyXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuYWRkcmVzcy5zdGF0ZUFiYnJcbiAgICovXG4gIHRoaXMuc3RhdGVBYmJyID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoZmFrZXIuZGVmaW5pdGlvbnMuYWRkcmVzcy5zdGF0ZV9hYmJyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBsYXRpdHVkZVxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmFkZHJlc3MubGF0aXR1ZGVcbiAgICovXG4gIHRoaXMubGF0aXR1ZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKGZha2VyLnJhbmRvbS5udW1iZXIoMTgwICogMTAwMDApIC8gMTAwMDAuMCAtIDkwLjApLnRvRml4ZWQoNCk7XG4gIH1cblxuICAvKipcbiAgICogbG9uZ2l0dWRlXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuYWRkcmVzcy5sb25naXR1ZGVcbiAgICovXG4gIHRoaXMubG9uZ2l0dWRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIChmYWtlci5yYW5kb20ubnVtYmVyKDM2MCAqIDEwMDAwKSAvIDEwMDAwLjAgLSAxODAuMCkudG9GaXhlZCg0KTtcbiAgfVxuICBcbiAgcmV0dXJuIHRoaXM7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBBZGRyZXNzO1xuIiwiLyoqXG4gKlxuICogQG5hbWVzcGFjZSBmYWtlci5jb21tZXJjZVxuICovXG52YXIgQ29tbWVyY2UgPSBmdW5jdGlvbiAoZmFrZXIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8qKlxuICAgKiBjb2xvclxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmNvbW1lcmNlLmNvbG9yXG4gICAqL1xuICBzZWxmLmNvbG9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5jb21tZXJjZS5jb2xvcik7XG4gIH07XG5cbiAgLyoqXG4gICAqIGRlcGFydG1lbnRcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5jb21tZXJjZS5kZXBhcnRtZW50XG4gICAqL1xuICBzZWxmLmRlcGFydG1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmRlZmluaXRpb25zLmNvbW1lcmNlLmRlcGFydG1lbnQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBwcm9kdWN0TmFtZVxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmNvbW1lcmNlLnByb2R1Y3ROYW1lXG4gICAqL1xuICBzZWxmLnByb2R1Y3ROYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZmFrZXIuY29tbWVyY2UucHJvZHVjdEFkamVjdGl2ZSgpICsgXCIgXCIgK1xuICAgICAgICAgICAgICBmYWtlci5jb21tZXJjZS5wcm9kdWN0TWF0ZXJpYWwoKSArIFwiIFwiICtcbiAgICAgICAgICAgICAgZmFrZXIuY29tbWVyY2UucHJvZHVjdCgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBwcmljZVxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmNvbW1lcmNlLnByaWNlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtaW5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1heFxuICAgKiBAcGFyYW0ge251bWJlcn0gZGVjXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzeW1ib2xcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgc2VsZi5wcmljZSA9IGZ1bmN0aW9uKG1pbiwgbWF4LCBkZWMsIHN5bWJvbCkge1xuICAgICAgbWluID0gbWluIHx8IDA7XG4gICAgICBtYXggPSBtYXggfHwgMTAwMDtcbiAgICAgIGRlYyA9IGRlYyA9PT0gdW5kZWZpbmVkID8gMiA6IGRlYztcbiAgICAgIHN5bWJvbCA9IHN5bWJvbCB8fCAnJztcblxuICAgICAgaWYgKG1pbiA8IDAgfHwgbWF4IDwgMCkge1xuICAgICAgICAgIHJldHVybiBzeW1ib2wgKyAwLjAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmFuZFZhbHVlID0gZmFrZXIucmFuZG9tLm51bWJlcih7IG1heDogbWF4LCBtaW46IG1pbiB9KTtcblxuICAgICAgcmV0dXJuIHN5bWJvbCArIChNYXRoLnJvdW5kKHJhbmRWYWx1ZSAqIE1hdGgucG93KDEwLCBkZWMpKSAvIE1hdGgucG93KDEwLCBkZWMpKS50b0ZpeGVkKGRlYyk7XG4gIH07XG5cbiAgLypcbiAgc2VsZi5jYXRlZ29yaWVzID0gZnVuY3Rpb24obnVtKSB7XG4gICAgICB2YXIgY2F0ZWdvcmllcyA9IFtdO1xuXG4gICAgICBkbyB7XG4gICAgICAgICAgdmFyIGNhdGVnb3J5ID0gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5jb21tZXJjZS5kZXBhcnRtZW50KTtcbiAgICAgICAgICBpZihjYXRlZ29yaWVzLmluZGV4T2YoY2F0ZWdvcnkpID09PSAtMSkge1xuICAgICAgICAgICAgICBjYXRlZ29yaWVzLnB1c2goY2F0ZWdvcnkpO1xuICAgICAgICAgIH1cbiAgICAgIH0gd2hpbGUoY2F0ZWdvcmllcy5sZW5ndGggPCBudW0pO1xuXG4gICAgICByZXR1cm4gY2F0ZWdvcmllcztcbiAgfTtcblxuICAqL1xuICAvKlxuICBzZWxmLm1lcmdlQ2F0ZWdvcmllcyA9IGZ1bmN0aW9uKGNhdGVnb3JpZXMpIHtcbiAgICAgIHZhciBzZXBhcmF0b3IgPSBmYWtlci5kZWZpbml0aW9ucy5zZXBhcmF0b3IgfHwgXCIgJlwiO1xuICAgICAgLy8gVE9ETzogZmluZCB1bmRlZmluZWQgaGVyZVxuICAgICAgY2F0ZWdvcmllcyA9IGNhdGVnb3JpZXMgfHwgZmFrZXIuZGVmaW5pdGlvbnMuY29tbWVyY2UuY2F0ZWdvcmllcztcbiAgICAgIHZhciBjb21tYVNlcGFyYXRlZCA9IGNhdGVnb3JpZXMuc2xpY2UoMCwgLTEpLmpvaW4oJywgJyk7XG5cbiAgICAgIHJldHVybiBbY29tbWFTZXBhcmF0ZWQsIGNhdGVnb3JpZXNbY2F0ZWdvcmllcy5sZW5ndGggLSAxXV0uam9pbihzZXBhcmF0b3IgKyBcIiBcIik7XG4gIH07XG4gICovXG5cbiAgLyoqXG4gICAqIHByb2R1Y3RBZGplY3RpdmVcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5jb21tZXJjZS5wcm9kdWN0QWRqZWN0aXZlXG4gICAqL1xuICBzZWxmLnByb2R1Y3RBZGplY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmRlZmluaXRpb25zLmNvbW1lcmNlLnByb2R1Y3RfbmFtZS5hZGplY3RpdmUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBwcm9kdWN0TWF0ZXJpYWxcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5jb21tZXJjZS5wcm9kdWN0TWF0ZXJpYWxcbiAgICovXG4gIHNlbGYucHJvZHVjdE1hdGVyaWFsID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5jb21tZXJjZS5wcm9kdWN0X25hbWUubWF0ZXJpYWwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBwcm9kdWN0XG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuY29tbWVyY2UucHJvZHVjdFxuICAgKi9cbiAgc2VsZi5wcm9kdWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5jb21tZXJjZS5wcm9kdWN0X25hbWUucHJvZHVjdCk7XG4gIH07XG5cbiAgcmV0dXJuIHNlbGY7XG59O1xuXG5tb2R1bGVbJ2V4cG9ydHMnXSA9IENvbW1lcmNlO1xuIiwiLyoqXG4gKlxuICogQG5hbWVzcGFjZSBmYWtlci5jb21wYW55XG4gKi9cbnZhciBDb21wYW55ID0gZnVuY3Rpb24gKGZha2VyKSB7XG4gIFxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBmID0gZmFrZXIuZmFrZTtcbiAgXG4gIC8qKlxuICAgKiBzdWZmaXhlc1xuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmNvbXBhbnkuc3VmZml4ZXNcbiAgICovXG4gIHRoaXMuc3VmZml4ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gRG9uJ3Qgd2FudCB0aGUgc291cmNlIGFycmF5IGV4cG9zZWQgdG8gbW9kaWZpY2F0aW9uLCBzbyByZXR1cm4gYSBjb3B5XG4gICAgcmV0dXJuIGZha2VyLmRlZmluaXRpb25zLmNvbXBhbnkuc3VmZml4LnNsaWNlKDApO1xuICB9XG5cbiAgLyoqXG4gICAqIGNvbXBhbnlOYW1lXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuY29tcGFueS5jb21wYW55TmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0XG4gICAqL1xuICB0aGlzLmNvbXBhbnlOYW1lID0gZnVuY3Rpb24gKGZvcm1hdCkge1xuXG4gICAgdmFyIGZvcm1hdHMgPSBbXG4gICAgICAne3tuYW1lLmxhc3ROYW1lfX0ge3tjb21wYW55LmNvbXBhbnlTdWZmaXh9fScsXG4gICAgICAne3tuYW1lLmxhc3ROYW1lfX0gLSB7e25hbWUubGFzdE5hbWV9fScsXG4gICAgICAne3tuYW1lLmxhc3ROYW1lfX0sIHt7bmFtZS5sYXN0TmFtZX19IGFuZCB7e25hbWUubGFzdE5hbWV9fSdcbiAgICBdO1xuXG4gICAgaWYgKHR5cGVvZiBmb3JtYXQgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGZvcm1hdCA9IGZha2VyLnJhbmRvbS5udW1iZXIoZm9ybWF0cy5sZW5ndGggLSAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZihmb3JtYXRzW2Zvcm1hdF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIGNvbXBhbnlTdWZmaXhcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5jb21wYW55LmNvbXBhbnlTdWZmaXhcbiAgICovXG4gIHRoaXMuY29tcGFueVN1ZmZpeCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmNvbXBhbnkuc3VmZml4ZXMoKSk7XG4gIH1cblxuICAvKipcbiAgICogY2F0Y2hQaHJhc2VcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5jb21wYW55LmNhdGNoUGhyYXNlXG4gICAqL1xuICB0aGlzLmNhdGNoUGhyYXNlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmKCd7e2NvbXBhbnkuY2F0Y2hQaHJhc2VBZGplY3RpdmV9fSB7e2NvbXBhbnkuY2F0Y2hQaHJhc2VEZXNjcmlwdG9yfX0ge3tjb21wYW55LmNhdGNoUGhyYXNlTm91bn19JylcbiAgfVxuXG4gIC8qKlxuICAgKiBic1xuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmNvbXBhbnkuYnNcbiAgICovXG4gIHRoaXMuYnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGYoJ3t7Y29tcGFueS5ic0FkamVjdGl2ZX19IHt7Y29tcGFueS5ic0J1enp9fSB7e2NvbXBhbnkuYnNOb3VufX0nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBjYXRjaFBocmFzZUFkamVjdGl2ZVxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmNvbXBhbnkuY2F0Y2hQaHJhc2VBZGplY3RpdmVcbiAgICovXG4gIHRoaXMuY2F0Y2hQaHJhc2VBZGplY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5jb21wYW55LmFkamVjdGl2ZSk7XG4gIH1cblxuICAvKipcbiAgICogY2F0Y2hQaHJhc2VEZXNjcmlwdG9yXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuY29tcGFueS5jYXRjaFBocmFzZURlc2NyaXB0b3JcbiAgICovXG4gIHRoaXMuY2F0Y2hQaHJhc2VEZXNjcmlwdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoZmFrZXIuZGVmaW5pdGlvbnMuY29tcGFueS5kZXNjcmlwdG9yKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBjYXRjaFBocmFzZU5vdW5cbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5jb21wYW55LmNhdGNoUGhyYXNlTm91blxuICAgKi9cbiAgdGhpcy5jYXRjaFBocmFzZU5vdW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5jb21wYW55Lm5vdW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIGJzQWRqZWN0aXZlXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuY29tcGFueS5ic0FkamVjdGl2ZVxuICAgKi9cbiAgdGhpcy5ic0FkamVjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmRlZmluaXRpb25zLmNvbXBhbnkuYnNfYWRqZWN0aXZlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBic0J1enpcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5jb21wYW55LmJzQnV6elxuICAgKi9cbiAgdGhpcy5ic0J1enogPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5jb21wYW55LmJzX3ZlcmIpO1xuICB9XG5cbiAgLyoqXG4gICAqIGJzTm91blxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmNvbXBhbnkuYnNOb3VuXG4gICAqL1xuICB0aGlzLmJzTm91biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmRlZmluaXRpb25zLmNvbXBhbnkuYnNfbm91bik7XG4gIH1cbiAgXG59XG5cbm1vZHVsZVsnZXhwb3J0cyddID0gQ29tcGFueTsiLCIvKipcbiAqXG4gKiBAbmFtZXNwYWNlIGZha2VyLmRhdGFiYXNlXG4gKi9cbnZhciBEYXRhYmFzZSA9IGZ1bmN0aW9uIChmYWtlcikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIC8qKlxuICAgKiBjb2x1bW5cbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5kYXRhYmFzZS5jb2x1bW5cbiAgICovXG4gIHNlbGYuY29sdW1uID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoZmFrZXIuZGVmaW5pdGlvbnMuZGF0YWJhc2UuY29sdW1uKTtcbiAgfTtcblxuICBzZWxmLmNvbHVtbi5zY2hlbWEgPSB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkdlbmVyYXRlcyBhIGNvbHVtbiBuYW1lLlwiLFxuICAgIFwic2FtcGxlUmVzdWx0c1wiOiBbXCJpZFwiLCBcInRpdGxlXCIsIFwiY3JlYXRlZEF0XCJdXG4gIH07XG5cbiAgLyoqXG4gICAqIHR5cGVcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5kYXRhYmFzZS50eXBlXG4gICAqL1xuICBzZWxmLnR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5kYXRhYmFzZS50eXBlKTtcbiAgfTtcblxuICBzZWxmLnR5cGUuc2NoZW1hID0ge1xuICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZW5lcmF0ZXMgYSBjb2x1bW4gdHlwZS5cIixcbiAgICBcInNhbXBsZVJlc3VsdHNcIjogW1wiYnl0ZVwiLCBcImludFwiLCBcInZhcmNoYXJcIiwgXCJ0aW1lc3RhbXBcIl1cbiAgfTtcblxuICAvKipcbiAgICogY29sbGF0aW9uXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuZGF0YWJhc2UuY29sbGF0aW9uXG4gICAqL1xuICBzZWxmLmNvbGxhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmRlZmluaXRpb25zLmRhdGFiYXNlLmNvbGxhdGlvbik7XG4gIH07XG5cbiAgc2VsZi5jb2xsYXRpb24uc2NoZW1hID0ge1xuICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZW5lcmF0ZXMgYSBjb2xsYXRpb24uXCIsXG4gICAgXCJzYW1wbGVSZXN1bHRzXCI6IFtcInV0ZjhfdW5pY29kZV9jaVwiLCBcInV0ZjhfYmluXCJdXG4gIH07XG5cbiAgLyoqXG4gICAqIGVuZ2luZVxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmRhdGFiYXNlLmVuZ2luZVxuICAgKi9cbiAgc2VsZi5lbmdpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5kYXRhYmFzZS5lbmdpbmUpO1xuICB9O1xuXG4gIHNlbGYuZW5naW5lLnNjaGVtYSA9IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiR2VuZXJhdGVzIGEgc3RvcmFnZSBlbmdpbmUuXCIsXG4gICAgXCJzYW1wbGVSZXN1bHRzXCI6IFtcIk15SVNBTVwiLCBcIklubm9EQlwiXVxuICB9O1xufTtcblxubW9kdWxlW1wiZXhwb3J0c1wiXSA9IERhdGFiYXNlO1xuIiwiLyoqXG4gKlxuICogQG5hbWVzcGFjZSBmYWtlci5kYXRlXG4gKi9cbnZhciBfRGF0ZSA9IGZ1bmN0aW9uIChmYWtlcikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIC8qKlxuICAgKiBwYXN0XG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuZGF0ZS5wYXN0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5ZWFyc1xuICAgKiBAcGFyYW0ge2RhdGV9IHJlZkRhdGVcbiAgICovXG4gIHNlbGYucGFzdCA9IGZ1bmN0aW9uICh5ZWFycywgcmVmRGF0ZSkge1xuICAgICAgdmFyIGRhdGUgPSAocmVmRGF0ZSkgPyBuZXcgRGF0ZShEYXRlLnBhcnNlKHJlZkRhdGUpKSA6IG5ldyBEYXRlKCk7XG4gICAgICB2YXIgcmFuZ2UgPSB7XG4gICAgICAgIG1pbjogMTAwMCxcbiAgICAgICAgbWF4OiAoeWVhcnMgfHwgMSkgKiAzNjUgKiAyNCAqIDM2MDAgKiAxMDAwXG4gICAgICB9O1xuXG4gICAgICB2YXIgcGFzdCA9IGRhdGUuZ2V0VGltZSgpO1xuICAgICAgcGFzdCAtPSBmYWtlci5yYW5kb20ubnVtYmVyKHJhbmdlKTsgLy8gc29tZSB0aW1lIGZyb20gbm93IHRvIE4geWVhcnMgYWdvLCBpbiBtaWxsaXNlY29uZHNcbiAgICAgIGRhdGUuc2V0VGltZShwYXN0KTtcblxuICAgICAgcmV0dXJuIGRhdGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIGZ1dHVyZVxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmRhdGUuZnV0dXJlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5ZWFyc1xuICAgKiBAcGFyYW0ge2RhdGV9IHJlZkRhdGVcbiAgICovXG4gIHNlbGYuZnV0dXJlID0gZnVuY3Rpb24gKHllYXJzLCByZWZEYXRlKSB7XG4gICAgICB2YXIgZGF0ZSA9IChyZWZEYXRlKSA/IG5ldyBEYXRlKERhdGUucGFyc2UocmVmRGF0ZSkpIDogbmV3IERhdGUoKTtcbiAgICAgIHZhciByYW5nZSA9IHtcbiAgICAgICAgbWluOiAxMDAwLFxuICAgICAgICBtYXg6ICh5ZWFycyB8fCAxKSAqIDM2NSAqIDI0ICogMzYwMCAqIDEwMDBcbiAgICAgIH07XG5cbiAgICAgIHZhciBmdXR1cmUgPSBkYXRlLmdldFRpbWUoKTtcbiAgICAgIGZ1dHVyZSArPSBmYWtlci5yYW5kb20ubnVtYmVyKHJhbmdlKTsgLy8gc29tZSB0aW1lIGZyb20gbm93IHRvIE4geWVhcnMgbGF0ZXIsIGluIG1pbGxpc2Vjb25kc1xuICAgICAgZGF0ZS5zZXRUaW1lKGZ1dHVyZSk7XG5cbiAgICAgIHJldHVybiBkYXRlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBiZXR3ZWVuXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuZGF0ZS5iZXR3ZWVuXG4gICAqIEBwYXJhbSB7ZGF0ZX0gZnJvbVxuICAgKiBAcGFyYW0ge2RhdGV9IHRvXG4gICAqL1xuICBzZWxmLmJldHdlZW4gPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcbiAgICAgIHZhciBmcm9tTWlsbGkgPSBEYXRlLnBhcnNlKGZyb20pO1xuICAgICAgdmFyIGRhdGVPZmZzZXQgPSBmYWtlci5yYW5kb20ubnVtYmVyKERhdGUucGFyc2UodG8pIC0gZnJvbU1pbGxpKTtcblxuICAgICAgdmFyIG5ld0RhdGUgPSBuZXcgRGF0ZShmcm9tTWlsbGkgKyBkYXRlT2Zmc2V0KTtcblxuICAgICAgcmV0dXJuIG5ld0RhdGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIHJlY2VudFxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmRhdGUucmVjZW50XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkYXlzXG4gICAqL1xuICBzZWxmLnJlY2VudCA9IGZ1bmN0aW9uIChkYXlzKSB7XG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICB2YXIgcmFuZ2UgPSB7XG4gICAgICAgIG1pbjogMTAwMCxcbiAgICAgICAgbWF4OiAoZGF5cyB8fCAxKSAqIDI0ICogMzYwMCAqIDEwMDBcbiAgICAgIH07XG5cbiAgICAgIHZhciBmdXR1cmUgPSBkYXRlLmdldFRpbWUoKTtcbiAgICAgIGZ1dHVyZSAtPSBmYWtlci5yYW5kb20ubnVtYmVyKHJhbmdlKTsgLy8gc29tZSB0aW1lIGZyb20gbm93IHRvIE4gZGF5cyBhZ28sIGluIG1pbGxpc2Vjb25kc1xuICAgICAgZGF0ZS5zZXRUaW1lKGZ1dHVyZSk7XG5cbiAgICAgIHJldHVybiBkYXRlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBtb250aFxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmRhdGUubW9udGhcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICovXG4gIHNlbGYubW9udGggPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgIHZhciB0eXBlID0gJ3dpZGUnO1xuICAgICAgaWYgKG9wdGlvbnMuYWJicikge1xuICAgICAgICAgIHR5cGUgPSAnYWJicic7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5jb250ZXh0ICYmIHR5cGVvZiBmYWtlci5kZWZpbml0aW9ucy5kYXRlLm1vbnRoW3R5cGUgKyAnX2NvbnRleHQnXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0eXBlICs9ICdfY29udGV4dCc7XG4gICAgICB9XG5cbiAgICAgIHZhciBzb3VyY2UgPSBmYWtlci5kZWZpbml0aW9ucy5kYXRlLm1vbnRoW3R5cGVdO1xuXG4gICAgICByZXR1cm4gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChzb3VyY2UpO1xuICB9O1xuXG4gIC8qKlxuICAgKiB3ZWVrZGF5XG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAqIEBtZXRob2QgZmFrZXIuZGF0ZS53ZWVrZGF5XG4gICAqL1xuICBzZWxmLndlZWtkYXkgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgIHZhciB0eXBlID0gJ3dpZGUnO1xuICAgICAgaWYgKG9wdGlvbnMuYWJicikge1xuICAgICAgICAgIHR5cGUgPSAnYWJicic7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5jb250ZXh0ICYmIHR5cGVvZiBmYWtlci5kZWZpbml0aW9ucy5kYXRlLndlZWtkYXlbdHlwZSArICdfY29udGV4dCddICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHR5cGUgKz0gJ19jb250ZXh0JztcbiAgICAgIH1cblxuICAgICAgdmFyIHNvdXJjZSA9IGZha2VyLmRlZmluaXRpb25zLmRhdGUud2Vla2RheVt0eXBlXTtcblxuICAgICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoc291cmNlKTtcbiAgfTtcbiAgXG4gIHJldHVybiBzZWxmO1xuICBcbn07XG5cbm1vZHVsZVsnZXhwb3J0cyddID0gX0RhdGU7IiwiLypcbiAgZmFrZS5qcyAtIGdlbmVyYXRvciBtZXRob2QgZm9yIGNvbWJpbmluZyBmYWtlciBtZXRob2RzIGJhc2VkIG9uIHN0cmluZyBpbnB1dFxuXG4qL1xuXG5mdW5jdGlvbiBGYWtlIChmYWtlcikge1xuICBcbiAgLyoqXG4gICAqIEdlbmVyYXRvciBtZXRob2QgZm9yIGNvbWJpbmluZyBmYWtlciBtZXRob2RzIGJhc2VkIG9uIHN0cmluZyBpbnB1dFxuICAgKlxuICAgKiBfX0V4YW1wbGU6X19cbiAgICpcbiAgICogYGBgXG4gICAqIGNvbnNvbGUubG9nKGZha2VyLmZha2UoJ3t7bmFtZS5sYXN0TmFtZX19LCB7e25hbWUuZmlyc3ROYW1lfX0ge3tuYW1lLnN1ZmZpeH19JykpO1xuICAgKiAvL291dHB1dHM6IFwiTWFya3MsIERlYW4gU3IuXCJcbiAgICogYGBgXG4gICAqXG4gICAqIFRoaXMgd2lsbCBpbnRlcnBvbGF0ZSB0aGUgZm9ybWF0IHN0cmluZyB3aXRoIHRoZSB2YWx1ZSBvZiBtZXRob2RzXG4gICAqIFtuYW1lLmxhc3ROYW1lXXtAbGluayBmYWtlci5uYW1lLmxhc3ROYW1lfSwgW25hbWUuZmlyc3ROYW1lXXtAbGluayBmYWtlci5uYW1lLmZpcnN0TmFtZX0sXG4gICAqIGFuZCBbbmFtZS5zdWZmaXhde0BsaW5rIGZha2VyLm5hbWUuc3VmZml4fVxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmZha2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICAgKi9cbiAgdGhpcy5mYWtlID0gZnVuY3Rpb24gZmFrZSAoc3RyKSB7XG4gICAgLy8gc2V0dXAgZGVmYXVsdCByZXNwb25zZSBhcyBlbXB0eSBzdHJpbmdcbiAgICB2YXIgcmVzID0gJyc7XG5cbiAgICAvLyBpZiBpbmNvbWluZyBzdHIgcGFyYW1ldGVyIGlzIG5vdCBwcm92aWRlZCwgcmV0dXJuIGVycm9yIG1lc3NhZ2VcbiAgICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycgfHwgc3RyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmVzID0gJ3N0cmluZyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQhJztcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gZmluZCBmaXJzdCBtYXRjaGluZyB7eyBhbmQgfX1cbiAgICB2YXIgc3RhcnQgPSBzdHIuc2VhcmNoKCd7eycpO1xuICAgIHZhciBlbmQgPSBzdHIuc2VhcmNoKCd9fScpO1xuXG4gICAgLy8gaWYgbm8ge3sgYW5kIH19IGlzIGZvdW5kLCB3ZSBhcmUgZG9uZVxuICAgIGlmIChzdGFydCA9PT0gLTEgJiYgZW5kID09PSAtMSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICAvLyBjb25zb2xlLmxvZygnYXR0ZW1wdGluZyB0byBwYXJzZScsIHN0cik7XG5cbiAgICAvLyBleHRyYWN0IG1ldGhvZCBuYW1lIGZyb20gYmV0d2VlbiB0aGUge3sgfX0gdGhhdCB3ZSBmb3VuZFxuICAgIC8vIGZvciBleGFtcGxlOiB7e25hbWUuZmlyc3ROYW1lfX1cbiAgICB2YXIgdG9rZW4gPSBzdHIuc3Vic3RyKHN0YXJ0ICsgMiwgIGVuZCAtIHN0YXJ0IC0gMik7XG4gICAgdmFyIG1ldGhvZCA9IHRva2VuLnJlcGxhY2UoJ319JywgJycpLnJlcGxhY2UoJ3t7JywgJycpO1xuXG4gICAgLy8gY29uc29sZS5sb2coJ21ldGhvZCcsIG1ldGhvZClcblxuICAgIC8vIGV4dHJhY3QgbWV0aG9kIHBhcmFtZXRlcnNcbiAgICB2YXIgcmVnRXhwID0gL1xcKChbXildKylcXCkvO1xuICAgIHZhciBtYXRjaGVzID0gcmVnRXhwLmV4ZWMobWV0aG9kKTtcbiAgICB2YXIgcGFyYW1ldGVycyA9ICcnO1xuICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICBtZXRob2QgPSBtZXRob2QucmVwbGFjZShyZWdFeHAsICcnKTtcbiAgICAgIHBhcmFtZXRlcnMgPSBtYXRjaGVzWzFdO1xuICAgIH1cblxuICAgIC8vIHNwbGl0IHRoZSBtZXRob2QgaW50byBtb2R1bGUgYW5kIGZ1bmN0aW9uXG4gICAgdmFyIHBhcnRzID0gbWV0aG9kLnNwbGl0KCcuJyk7XG5cbiAgICBpZiAodHlwZW9mIGZha2VyW3BhcnRzWzBdXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1vZHVsZTogJyArIHBhcnRzWzBdKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGZha2VyW3BhcnRzWzBdXVtwYXJ0c1sxXV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtZXRob2Q6ICcgKyBwYXJ0c1swXSArIFwiLlwiICsgcGFydHNbMV0pO1xuICAgIH1cblxuICAgIC8vIGFzc2lnbiB0aGUgZnVuY3Rpb24gZnJvbSB0aGUgbW9kdWxlLmZ1bmN0aW9uIG5hbWVzcGFjZVxuICAgIHZhciBmbiA9IGZha2VyW3BhcnRzWzBdXVtwYXJ0c1sxXV07XG5cbiAgICAvLyBJZiBwYXJhbWV0ZXJzIGFyZSBwb3B1bGF0ZWQgaGVyZSwgdGhleSBhcmUgYWx3YXlzIGdvaW5nIHRvIGJlIG9mIHN0cmluZyB0eXBlXG4gICAgLy8gc2luY2Ugd2UgbWlnaHQgYWN0dWFsbHkgYmUgZGVhbGluZyB3aXRoIGFuIG9iamVjdCBvciBhcnJheSxcbiAgICAvLyB3ZSBhbHdheXMgYXR0ZW1wdCB0byB0aGUgcGFyc2UgdGhlIGluY29taW5nIHBhcmFtZXRlcnMgaW50byBKU09OXG4gICAgdmFyIHBhcmFtcztcbiAgICAvLyBOb3RlOiB3ZSBleHBlcmllbmNlIGEgc21hbGwgcGVyZm9ybWFuY2UgaGl0IGhlcmUgZHVlIHRvIEpTT04ucGFyc2UgdHJ5IC8gY2F0Y2hcbiAgICAvLyBJZiBhbnlvbmUgYWN0dWFsbHkgbmVlZHMgdG8gb3B0aW1pemUgdGhpcyBzcGVjaWZpYyBjb2RlIHBhdGgsIHBsZWFzZSBvcGVuIGEgc3VwcG9ydCBpc3N1ZSBvbiBnaXRodWJcbiAgICB0cnkge1xuICAgICAgcGFyYW1zID0gSlNPTi5wYXJzZShwYXJhbWV0ZXJzKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gc2luY2UgSlNPTi5wYXJzZSB0aHJldyBhbiBlcnJvciwgYXNzdW1lIHBhcmFtZXRlcnMgd2FzIGFjdHVhbGx5IGEgc3RyaW5nXG4gICAgICBwYXJhbXMgPSBwYXJhbWV0ZXJzO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09IFwic3RyaW5nXCIgJiYgcGFyYW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmVzdWx0ID0gZm4uY2FsbCh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gZm4uY2FsbCh0aGlzLCBwYXJhbXMpO1xuICAgIH1cblxuICAgIC8vIHJlcGxhY2UgdGhlIGZvdW5kIHRhZyB3aXRoIHRoZSByZXR1cm5lZCBmYWtlIHZhbHVlXG4gICAgcmVzID0gc3RyLnJlcGxhY2UoJ3t7JyArIHRva2VuICsgJ319JywgcmVzdWx0KTtcblxuICAgIC8vIHJldHVybiB0aGUgcmVzcG9uc2UgcmVjdXJzaXZlbHkgdW50aWwgd2UgYXJlIGRvbmUgZmluZGluZyBhbGwgdGFnc1xuICAgIHJldHVybiBmYWtlKHJlcyk7ICAgIFxuICB9XG4gIFxuICByZXR1cm4gdGhpcztcbiAgXG4gIFxufVxuXG5tb2R1bGVbJ2V4cG9ydHMnXSA9IEZha2U7IiwiLyoqXG4gKiBAbmFtZXNwYWNlIGZha2VyLmZpbmFuY2VcbiAqL1xudmFyIEZpbmFuY2UgPSBmdW5jdGlvbiAoZmFrZXIpIHtcbiAgdmFyIGliYW5MaWIgPSByZXF1aXJlKFwiLi9pYmFuXCIpO1xuICB2YXIgSGVscGVycyA9IGZha2VyLmhlbHBlcnMsXG4gICAgICBzZWxmID0gdGhpcztcblxuICAvKipcbiAgICogYWNjb3VudFxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmZpbmFuY2UuYWNjb3VudFxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gICAqL1xuICBzZWxmLmFjY291bnQgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG5cbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8fCA4O1xuXG4gICAgICB2YXIgdGVtcGxhdGUgPSAnJztcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUgKyAnIyc7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBudWxsO1xuICAgICAgcmV0dXJuIEhlbHBlcnMucmVwbGFjZVN5bWJvbFdpdGhOdW1iZXIodGVtcGxhdGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBhY2NvdW50TmFtZVxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmZpbmFuY2UuYWNjb3VudE5hbWVcbiAgICovXG4gIHNlbGYuYWNjb3VudE5hbWUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgIHJldHVybiBbSGVscGVycy5yYW5kb21pemUoZmFrZXIuZGVmaW5pdGlvbnMuZmluYW5jZS5hY2NvdW50X3R5cGUpLCAnQWNjb3VudCddLmpvaW4oJyAnKTtcbiAgfTtcblxuICAvKipcbiAgICogbWFza1xuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmZpbmFuY2UubWFza1xuICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcGFyZW5zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZWxsaXBzaXNcbiAgICovXG4gIHNlbGYubWFzayA9IGZ1bmN0aW9uIChsZW5ndGgsIHBhcmVucywgZWxsaXBzaXMpIHtcblxuICAgICAgLy9zZXQgZGVmYXVsdHNcbiAgICAgIGxlbmd0aCA9IChsZW5ndGggPT0gMCB8fCAhbGVuZ3RoIHx8IHR5cGVvZiBsZW5ndGggPT0gJ3VuZGVmaW5lZCcpID8gNCA6IGxlbmd0aDtcbiAgICAgIHBhcmVucyA9IChwYXJlbnMgPT09IG51bGwpID8gdHJ1ZSA6IHBhcmVucztcbiAgICAgIGVsbGlwc2lzID0gKGVsbGlwc2lzID09PSBudWxsKSA/IHRydWUgOiBlbGxpcHNpcztcblxuICAgICAgLy9jcmVhdGUgYSB0ZW1wbGF0ZSBmb3IgbGVuZ3RoXG4gICAgICB2YXIgdGVtcGxhdGUgPSAnJztcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUgKyAnIyc7XG4gICAgICB9XG5cbiAgICAgIC8vcHJlZml4IHdpdGggZWxsaXBzaXNcbiAgICAgIHRlbXBsYXRlID0gKGVsbGlwc2lzKSA/IFsnLi4uJywgdGVtcGxhdGVdLmpvaW4oJycpIDogdGVtcGxhdGU7XG5cbiAgICAgIHRlbXBsYXRlID0gKHBhcmVucykgPyBbJygnLCB0ZW1wbGF0ZSwgJyknXS5qb2luKCcnKSA6IHRlbXBsYXRlO1xuXG4gICAgICAvL2dlbmVyYXRlIHJhbmRvbSBudW1iZXJzXG4gICAgICB0ZW1wbGF0ZSA9IEhlbHBlcnMucmVwbGFjZVN5bWJvbFdpdGhOdW1iZXIodGVtcGxhdGUpO1xuXG4gICAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH07XG5cbiAgLy9taW4gYW5kIG1heCB0YWtlIGluIG1pbmltdW0gYW5kIG1heGltdW0gYW1vdW50cywgZGVjIGlzIHRoZSBkZWNpbWFsIHBsYWNlIHlvdSB3YW50IHJvdW5kZWQgdG8sIHN5bWJvbCBpcyAkLCDigqwsIMKjLCBldGNcbiAgLy9OT1RFOiB0aGlzIHJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZhbHVlLCBpZiB5b3Ugd2FudCBhIG51bWJlciB1c2UgcGFyc2VGbG9hdCBhbmQgbm8gc3ltYm9sXG5cbiAgLyoqXG4gICAqIGFtb3VudFxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmZpbmFuY2UuYW1vdW50XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtaW5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1heFxuICAgKiBAcGFyYW0ge251bWJlcn0gZGVjXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzeW1ib2xcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgc2VsZi5hbW91bnQgPSBmdW5jdGlvbiAobWluLCBtYXgsIGRlYywgc3ltYm9sKSB7XG5cbiAgICAgIG1pbiA9IG1pbiB8fCAwO1xuICAgICAgbWF4ID0gbWF4IHx8IDEwMDA7XG4gICAgICBkZWMgPSBkZWMgPT09IHVuZGVmaW5lZCA/IDIgOiBkZWM7XG4gICAgICBzeW1ib2wgPSBzeW1ib2wgfHwgJyc7XG4gICAgICB2YXIgcmFuZFZhbHVlID0gZmFrZXIucmFuZG9tLm51bWJlcih7IG1heDogbWF4LCBtaW46IG1pbiwgcHJlY2lzaW9uOiBNYXRoLnBvdygxMCwgLWRlYykgfSk7XG5cbiAgICAgIHJldHVybiBzeW1ib2wgKyByYW5kVmFsdWUudG9GaXhlZChkZWMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiB0cmFuc2FjdGlvblR5cGVcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5maW5hbmNlLnRyYW5zYWN0aW9uVHlwZVxuICAgKi9cbiAgc2VsZi50cmFuc2FjdGlvblR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gSGVscGVycy5yYW5kb21pemUoZmFrZXIuZGVmaW5pdGlvbnMuZmluYW5jZS50cmFuc2FjdGlvbl90eXBlKTtcbiAgfTtcblxuICAvKipcbiAgICogY3VycmVuY3lDb2RlXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuZmluYW5jZS5jdXJyZW5jeUNvZGVcbiAgICovXG4gIHNlbGYuY3VycmVuY3lDb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZha2VyLnJhbmRvbS5vYmplY3RFbGVtZW50KGZha2VyLmRlZmluaXRpb25zLmZpbmFuY2UuY3VycmVuY3kpWydjb2RlJ107XG4gIH07XG5cbiAgLyoqXG4gICAqIGN1cnJlbmN5TmFtZVxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmZpbmFuY2UuY3VycmVuY3lOYW1lXG4gICAqL1xuICBzZWxmLmN1cnJlbmN5TmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmYWtlci5yYW5kb20ub2JqZWN0RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5maW5hbmNlLmN1cnJlbmN5LCAna2V5Jyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIGN1cnJlbmN5U3ltYm9sXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuZmluYW5jZS5jdXJyZW5jeVN5bWJvbFxuICAgKi9cbiAgc2VsZi5jdXJyZW5jeVN5bWJvbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzeW1ib2w7XG5cbiAgICAgIHdoaWxlICghc3ltYm9sKSB7XG4gICAgICAgICAgc3ltYm9sID0gZmFrZXIucmFuZG9tLm9iamVjdEVsZW1lbnQoZmFrZXIuZGVmaW5pdGlvbnMuZmluYW5jZS5jdXJyZW5jeSlbJ3N5bWJvbCddO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN5bWJvbDtcbiAgfTtcblxuICAvKipcbiAgICogYml0Y29pbkFkZHJlc3NcbiAgICpcbiAgICogQG1ldGhvZCAgZmFrZXIuZmluYW5jZS5iaXRjb2luQWRkcmVzc1xuICAgKi9cbiAgc2VsZi5iaXRjb2luQWRkcmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYWRkcmVzc0xlbmd0aCA9IGZha2VyLnJhbmRvbS5udW1iZXIoeyBtaW46IDI3LCBtYXg6IDM0IH0pO1xuXG4gICAgdmFyIGFkZHJlc3MgPSBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KFsnMScsICczJ10pO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhZGRyZXNzTGVuZ3RoIC0gMTsgaSsrKVxuICAgICAgYWRkcmVzcyArPSBmYWtlci5yYW5kb20uYWxwaGFOdW1lcmljKCkudG9VcHBlckNhc2UoKTtcblxuICAgIHJldHVybiBhZGRyZXNzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBpYmFuXG4gICAqXG4gICAqIEBtZXRob2QgIGZha2VyLmZpbmFuY2UuaWJhblxuICAgKi9cbiAgc2VsZi5pYmFuID0gZnVuY3Rpb24gKGZvcm1hdHRlZCkge1xuICAgICAgdmFyIGliYW5Gb3JtYXQgPSBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGliYW5MaWIuZm9ybWF0cyk7XG4gICAgICB2YXIgcyA9IFwiXCI7XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgZm9yICh2YXIgYiA9IDA7IGIgPCBpYmFuRm9ybWF0LmJiYW4ubGVuZ3RoOyBiKyspIHtcbiAgICAgICAgICB2YXIgYmJhbiA9IGliYW5Gb3JtYXQuYmJhbltiXTtcbiAgICAgICAgICB2YXIgYyA9IGJiYW4uY291bnQ7XG4gICAgICAgICAgY291bnQgKz0gYmJhbi5jb3VudDtcbiAgICAgICAgICB3aGlsZSAoYyA+IDApIHtcbiAgICAgICAgICAgICAgaWYgKGJiYW4udHlwZSA9PSBcImFcIikge1xuICAgICAgICAgICAgICAgICAgcyArPSBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGliYW5MaWIuYWxwaGEpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJiYW4udHlwZSA9PSBcImNcIikge1xuICAgICAgICAgICAgICAgICAgaWYgKGZha2VyLnJhbmRvbS5udW1iZXIoMTAwKSA8IDgwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcyArPSBmYWtlci5yYW5kb20ubnVtYmVyKDkpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBzICs9IGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoaWJhbkxpYi5hbHBoYSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpZiAoYyA+PSAzICYmIGZha2VyLnJhbmRvbS5udW1iZXIoMTAwKSA8IDMwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGZha2VyLnJhbmRvbS5ib29sZWFuKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcyArPSBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGliYW5MaWIucGF0dGVybjEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGMgLT0gMjtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzICs9IGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoaWJhbkxpYi5wYXR0ZXJuMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjLS07XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBzICs9IGZha2VyLnJhbmRvbS5udW1iZXIoOSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYy0tO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzID0gcy5zdWJzdHJpbmcoMCwgY291bnQpO1xuICAgICAgfVxuICAgICAgdmFyIGNoZWNrc3VtID0gOTggLSBpYmFuTGliLm1vZDk3KGliYW5MaWIudG9EaWdpdFN0cmluZyhzICsgaWJhbkZvcm1hdC5jb3VudHJ5ICsgXCIwMFwiKSk7XG4gICAgICBpZiAoY2hlY2tzdW0gPCAxMCkge1xuICAgICAgICAgIGNoZWNrc3VtID0gXCIwXCIgKyBjaGVja3N1bTtcbiAgICAgIH1cbiAgICAgIHZhciBpYmFuID0gaWJhbkZvcm1hdC5jb3VudHJ5ICsgY2hlY2tzdW0gKyBzO1xuICAgICAgcmV0dXJuIGZvcm1hdHRlZCA/IGliYW4ubWF0Y2goLy57MSw0fS9nKS5qb2luKFwiIFwiKSA6IGliYW47XG4gIH07XG5cbiAgLyoqXG4gICAqIGJpY1xuICAgKlxuICAgKiBAbWV0aG9kICBmYWtlci5maW5hbmNlLmJpY1xuICAgKi9cbiAgc2VsZi5iaWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdm93ZWxzID0gW1wiQVwiLCBcIkVcIiwgXCJJXCIsIFwiT1wiLCBcIlVcIl07XG4gICAgICB2YXIgcHJvYiA9IGZha2VyLnJhbmRvbS5udW1iZXIoMTAwKTtcbiAgICAgIHJldHVybiBIZWxwZXJzLnJlcGxhY2VTeW1ib2xzKFwiPz8/XCIpICtcbiAgICAgICAgICBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KHZvd2VscykgK1xuICAgICAgICAgIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoaWJhbkxpYi5pc28zMTY2KSArXG4gICAgICAgICAgSGVscGVycy5yZXBsYWNlU3ltYm9scyhcIj9cIikgKyBcIjFcIiArXG4gICAgICAgICAgKHByb2IgPCAxMCA/XG4gICAgICAgICAgICAgIEhlbHBlcnMucmVwbGFjZVN5bWJvbHMoXCI/XCIgKyBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KHZvd2VscykgKyBcIj9cIikgOlxuICAgICAgICAgIHByb2IgPCA0MCA/XG4gICAgICAgICAgICAgIEhlbHBlcnMucmVwbGFjZVN5bWJvbHMoXCIjIyNcIikgOiBcIlwiKTtcbiAgfTtcbn07XG5cbm1vZHVsZVsnZXhwb3J0cyddID0gRmluYW5jZTtcbiIsIi8qKlxuICpcbiAqIEBuYW1lc3BhY2UgZmFrZXIuaGFja2VyXG4gKi9cbnZhciBIYWNrZXIgPSBmdW5jdGlvbiAoZmFrZXIpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBcbiAgLyoqXG4gICAqIGFiYnJldmlhdGlvblxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmhhY2tlci5hYmJyZXZpYXRpb25cbiAgICovXG4gIHNlbGYuYWJicmV2aWF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmRlZmluaXRpb25zLmhhY2tlci5hYmJyZXZpYXRpb24pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBhZGplY3RpdmVcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5oYWNrZXIuYWRqZWN0aXZlXG4gICAqL1xuICBzZWxmLmFkamVjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5oYWNrZXIuYWRqZWN0aXZlKTtcbiAgfTtcblxuICAvKipcbiAgICogbm91blxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmhhY2tlci5ub3VuXG4gICAqL1xuICBzZWxmLm5vdW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoZmFrZXIuZGVmaW5pdGlvbnMuaGFja2VyLm5vdW4pO1xuICB9O1xuXG4gIC8qKlxuICAgKiB2ZXJiXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuaGFja2VyLnZlcmJcbiAgICovXG4gIHNlbGYudmVyYiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5oYWNrZXIudmVyYik7XG4gIH07XG5cbiAgLyoqXG4gICAqIGluZ3ZlcmJcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5oYWNrZXIuaW5ndmVyYlxuICAgKi9cbiAgc2VsZi5pbmd2ZXJiID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmRlZmluaXRpb25zLmhhY2tlci5pbmd2ZXJiKTtcbiAgfTtcblxuICAvKipcbiAgICogcGhyYXNlXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuaGFja2VyLnBocmFzZVxuICAgKi9cbiAgc2VsZi5waHJhc2UgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICB2YXIgZGF0YSA9IHtcbiAgICAgIGFiYnJldmlhdGlvbjogc2VsZi5hYmJyZXZpYXRpb24sXG4gICAgICBhZGplY3RpdmU6IHNlbGYuYWRqZWN0aXZlLFxuICAgICAgaW5ndmVyYjogc2VsZi5pbmd2ZXJiLFxuICAgICAgbm91bjogc2VsZi5ub3VuLFxuICAgICAgdmVyYjogc2VsZi52ZXJiXG4gICAgfTtcblxuICAgIHZhciBwaHJhc2UgPSBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KFsgXCJJZiB3ZSB7e3ZlcmJ9fSB0aGUge3tub3VufX0sIHdlIGNhbiBnZXQgdG8gdGhlIHt7YWJicmV2aWF0aW9ufX0ge3tub3VufX0gdGhyb3VnaCB0aGUge3thZGplY3RpdmV9fSB7e2FiYnJldmlhdGlvbn19IHt7bm91bn19IVwiLFxuICAgICAgXCJXZSBuZWVkIHRvIHt7dmVyYn19IHRoZSB7e2FkamVjdGl2ZX19IHt7YWJicmV2aWF0aW9ufX0ge3tub3VufX0hXCIsXG4gICAgICBcIlRyeSB0byB7e3ZlcmJ9fSB0aGUge3thYmJyZXZpYXRpb259fSB7e25vdW59fSwgbWF5YmUgaXQgd2lsbCB7e3ZlcmJ9fSB0aGUge3thZGplY3RpdmV9fSB7e25vdW59fSFcIixcbiAgICAgIFwiWW91IGNhbid0IHt7dmVyYn19IHRoZSB7e25vdW59fSB3aXRob3V0IHt7aW5ndmVyYn19IHRoZSB7e2FkamVjdGl2ZX19IHt7YWJicmV2aWF0aW9ufX0ge3tub3VufX0hXCIsXG4gICAgICBcIlVzZSB0aGUge3thZGplY3RpdmV9fSB7e2FiYnJldmlhdGlvbn19IHt7bm91bn19LCB0aGVuIHlvdSBjYW4ge3t2ZXJifX0gdGhlIHt7YWRqZWN0aXZlfX0ge3tub3VufX0hXCIsXG4gICAgICBcIlRoZSB7e2FiYnJldmlhdGlvbn19IHt7bm91bn19IGlzIGRvd24sIHt7dmVyYn19IHRoZSB7e2FkamVjdGl2ZX19IHt7bm91bn19IHNvIHdlIGNhbiB7e3ZlcmJ9fSB0aGUge3thYmJyZXZpYXRpb259fSB7e25vdW59fSFcIixcbiAgICAgIFwie3tpbmd2ZXJifX0gdGhlIHt7bm91bn19IHdvbid0IGRvIGFueXRoaW5nLCB3ZSBuZWVkIHRvIHt7dmVyYn19IHRoZSB7e2FkamVjdGl2ZX19IHt7YWJicmV2aWF0aW9ufX0ge3tub3VufX0hXCIsXG4gICAgICBcIkknbGwge3t2ZXJifX0gdGhlIHt7YWRqZWN0aXZlfX0ge3thYmJyZXZpYXRpb259fSB7e25vdW59fSwgdGhhdCBzaG91bGQge3tub3VufX0gdGhlIHt7YWJicmV2aWF0aW9ufX0ge3tub3VufX0hXCJcbiAgIF0pO1xuXG4gICByZXR1cm4gZmFrZXIuaGVscGVycy5tdXN0YWNoZShwaHJhc2UsIGRhdGEpO1xuXG4gIH07XG4gIFxuICByZXR1cm4gc2VsZjtcbn07XG5cbm1vZHVsZVsnZXhwb3J0cyddID0gSGFja2VyOyIsIi8qKlxuICpcbiAqIEBuYW1lc3BhY2UgZmFrZXIuaGVscGVyc1xuICovXG52YXIgSGVscGVycyA9IGZ1bmN0aW9uIChmYWtlcikge1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvKipcbiAgICogYmFja3dvcmQtY29tcGF0aWJpbGl0eVxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmhlbHBlcnMucmFuZG9taXplXG4gICAqIEBwYXJhbSB7YXJyYXl9IGFycmF5XG4gICAqL1xuICBzZWxmLnJhbmRvbWl6ZSA9IGZ1bmN0aW9uIChhcnJheSkge1xuICAgICAgYXJyYXkgPSBhcnJheSB8fCBbXCJhXCIsIFwiYlwiLCBcImNcIl07XG4gICAgICByZXR1cm4gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChhcnJheSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIHNsdWdpZmllcyBzdHJpbmdcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5oZWxwZXJzLnNsdWdpZnlcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICAgKi9cbiAgc2VsZi5zbHVnaWZ5ID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gc3RyaW5nIHx8IFwiXCI7XG4gICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLyAvZywgJy0nKS5yZXBsYWNlKC9bXlxcd1xcLlxcLV0rL2csICcnKTtcbiAgfTtcblxuICAvKipcbiAgICogcGFyc2VzIHN0cmluZyBmb3IgYSBzeW1ib2wgYW5kIHJlcGxhY2UgaXQgd2l0aCBhIHJhbmRvbSBudW1iZXIgZnJvbSAxLTEwXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuaGVscGVycy5yZXBsYWNlU3ltYm9sV2l0aE51bWJlclxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzeW1ib2wgZGVmYXVsdHMgdG8gYFwiI1wiYFxuICAgKi9cbiAgc2VsZi5yZXBsYWNlU3ltYm9sV2l0aE51bWJlciA9IGZ1bmN0aW9uIChzdHJpbmcsIHN5bWJvbCkge1xuICAgICAgc3RyaW5nID0gc3RyaW5nIHx8IFwiXCI7XG4gICAgICAvLyBkZWZhdWx0IHN5bWJvbCBpcyAnIydcbiAgICAgIGlmIChzeW1ib2wgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN5bWJvbCA9ICcjJztcbiAgICAgIH1cblxuICAgICAgdmFyIHN0ciA9ICcnO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoc3RyaW5nLmNoYXJBdChpKSA9PSBzeW1ib2wpIHtcbiAgICAgICAgICAgICAgc3RyICs9IGZha2VyLnJhbmRvbS5udW1iZXIoOSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3RyICs9IHN0cmluZy5jaGFyQXQoaSk7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICAvKipcbiAgICogcGFyc2VzIHN0cmluZyBmb3Igc3ltYm9scyAobnVtYmVycyBvciBsZXR0ZXJzKSBhbmQgcmVwbGFjZXMgdGhlbSBhcHByb3ByaWF0ZWx5XG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuaGVscGVycy5yZXBsYWNlU3ltYm9sc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gICAqL1xuICBzZWxmLnJlcGxhY2VTeW1ib2xzID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gc3RyaW5nIHx8IFwiXCI7XG4gICAgICB2YXIgYWxwaGEgPSBbJ0EnLCdCJywnQycsJ0QnLCdFJywnRicsJ0cnLCdIJywnSScsJ0onLCdLJywnTCcsJ00nLCdOJywnTycsJ1AnLCdRJywnUicsJ1MnLCdUJywnVScsJ1YnLCdXJywnWCcsJ1knLCdaJ11cbiAgICAgIHZhciBzdHIgPSAnJztcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoc3RyaW5nLmNoYXJBdChpKSA9PSBcIiNcIikge1xuICAgICAgICAgICAgICBzdHIgKz0gZmFrZXIucmFuZG9tLm51bWJlcig5KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0cmluZy5jaGFyQXQoaSkgPT0gXCI/XCIpIHtcbiAgICAgICAgICAgICAgc3RyICs9IGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoYWxwaGEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0ciArPSBzdHJpbmcuY2hhckF0KGkpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHI7XG4gIH07XG5cbiAgLyoqXG4gICAqIHRha2VzIGFuIGFycmF5IGFuZCByZXR1cm5zIGl0IHJhbmRvbWl6ZWRcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5oZWxwZXJzLnNodWZmbGVcbiAgICogQHBhcmFtIHthcnJheX0gb1xuICAgKi9cbiAgc2VsZi5zaHVmZmxlID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgIGlmICh0eXBlb2YgbyA9PT0gJ3VuZGVmaW5lZCcgfHwgby5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbyA9IG8gfHwgW1wiYVwiLCBcImJcIiwgXCJjXCJdO1xuICAgICAgZm9yICh2YXIgaiwgeCwgaSA9IG8ubGVuZ3RoLTE7IGk7IGogPSBmYWtlci5yYW5kb20ubnVtYmVyKGkpLCB4ID0gb1stLWldLCBvW2ldID0gb1tqXSwgb1tqXSA9IHgpO1xuICAgICAgcmV0dXJuIG87XG4gIH07XG5cbiAgLyoqXG4gICAqIG11c3RhY2hlXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuaGVscGVycy5tdXN0YWNoZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhXG4gICAqL1xuICBzZWxmLm11c3RhY2hlID0gZnVuY3Rpb24gKHN0ciwgZGF0YSkge1xuICAgIGlmICh0eXBlb2Ygc3RyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBmb3IodmFyIHAgaW4gZGF0YSkge1xuICAgICAgdmFyIHJlID0gbmV3IFJlZ0V4cCgne3snICsgcCArICd9fScsICdnJylcbiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKHJlLCBkYXRhW3BdKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICAvKipcbiAgICogY3JlYXRlQ2FyZFxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmhlbHBlcnMuY3JlYXRlQ2FyZFxuICAgKi9cbiAgc2VsZi5jcmVhdGVDYXJkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBcIm5hbWVcIjogZmFrZXIubmFtZS5maW5kTmFtZSgpLFxuICAgICAgICAgIFwidXNlcm5hbWVcIjogZmFrZXIuaW50ZXJuZXQudXNlck5hbWUoKSxcbiAgICAgICAgICBcImVtYWlsXCI6IGZha2VyLmludGVybmV0LmVtYWlsKCksXG4gICAgICAgICAgXCJhZGRyZXNzXCI6IHtcbiAgICAgICAgICAgICAgXCJzdHJlZXRBXCI6IGZha2VyLmFkZHJlc3Muc3RyZWV0TmFtZSgpLFxuICAgICAgICAgICAgICBcInN0cmVldEJcIjogZmFrZXIuYWRkcmVzcy5zdHJlZXRBZGRyZXNzKCksXG4gICAgICAgICAgICAgIFwic3RyZWV0Q1wiOiBmYWtlci5hZGRyZXNzLnN0cmVldEFkZHJlc3ModHJ1ZSksXG4gICAgICAgICAgICAgIFwic3RyZWV0RFwiOiBmYWtlci5hZGRyZXNzLnNlY29uZGFyeUFkZHJlc3MoKSxcbiAgICAgICAgICAgICAgXCJjaXR5XCI6IGZha2VyLmFkZHJlc3MuY2l0eSgpLFxuICAgICAgICAgICAgICBcInN0YXRlXCI6IGZha2VyLmFkZHJlc3Muc3RhdGUoKSxcbiAgICAgICAgICAgICAgXCJjb3VudHJ5XCI6IGZha2VyLmFkZHJlc3MuY291bnRyeSgpLFxuICAgICAgICAgICAgICBcInppcGNvZGVcIjogZmFrZXIuYWRkcmVzcy56aXBDb2RlKCksXG4gICAgICAgICAgICAgIFwiZ2VvXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwibGF0XCI6IGZha2VyLmFkZHJlc3MubGF0aXR1ZGUoKSxcbiAgICAgICAgICAgICAgICAgIFwibG5nXCI6IGZha2VyLmFkZHJlc3MubG9uZ2l0dWRlKClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwaG9uZVwiOiBmYWtlci5waG9uZS5waG9uZU51bWJlcigpLFxuICAgICAgICAgIFwid2Vic2l0ZVwiOiBmYWtlci5pbnRlcm5ldC5kb21haW5OYW1lKCksXG4gICAgICAgICAgXCJjb21wYW55XCI6IHtcbiAgICAgICAgICAgICAgXCJuYW1lXCI6IGZha2VyLmNvbXBhbnkuY29tcGFueU5hbWUoKSxcbiAgICAgICAgICAgICAgXCJjYXRjaFBocmFzZVwiOiBmYWtlci5jb21wYW55LmNhdGNoUGhyYXNlKCksXG4gICAgICAgICAgICAgIFwiYnNcIjogZmFrZXIuY29tcGFueS5icygpXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBvc3RzXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJ3b3Jkc1wiOiBmYWtlci5sb3JlbS53b3JkcygpLFxuICAgICAgICAgICAgICAgICAgXCJzZW50ZW5jZVwiOiBmYWtlci5sb3JlbS5zZW50ZW5jZSgpLFxuICAgICAgICAgICAgICAgICAgXCJzZW50ZW5jZXNcIjogZmFrZXIubG9yZW0uc2VudGVuY2VzKCksXG4gICAgICAgICAgICAgICAgICBcInBhcmFncmFwaFwiOiBmYWtlci5sb3JlbS5wYXJhZ3JhcGgoKVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBcIndvcmRzXCI6IGZha2VyLmxvcmVtLndvcmRzKCksXG4gICAgICAgICAgICAgICAgICBcInNlbnRlbmNlXCI6IGZha2VyLmxvcmVtLnNlbnRlbmNlKCksXG4gICAgICAgICAgICAgICAgICBcInNlbnRlbmNlc1wiOiBmYWtlci5sb3JlbS5zZW50ZW5jZXMoKSxcbiAgICAgICAgICAgICAgICAgIFwicGFyYWdyYXBoXCI6IGZha2VyLmxvcmVtLnBhcmFncmFwaCgpXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwid29yZHNcIjogZmFrZXIubG9yZW0ud29yZHMoKSxcbiAgICAgICAgICAgICAgICAgIFwic2VudGVuY2VcIjogZmFrZXIubG9yZW0uc2VudGVuY2UoKSxcbiAgICAgICAgICAgICAgICAgIFwic2VudGVuY2VzXCI6IGZha2VyLmxvcmVtLnNlbnRlbmNlcygpLFxuICAgICAgICAgICAgICAgICAgXCJwYXJhZ3JhcGhcIjogZmFrZXIubG9yZW0ucGFyYWdyYXBoKClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJhY2NvdW50SGlzdG9yeVwiOiBbZmFrZXIuaGVscGVycy5jcmVhdGVUcmFuc2FjdGlvbigpLCBmYWtlci5oZWxwZXJzLmNyZWF0ZVRyYW5zYWN0aW9uKCksIGZha2VyLmhlbHBlcnMuY3JlYXRlVHJhbnNhY3Rpb24oKV1cbiAgICAgIH07XG4gIH07XG5cbiAgLyoqXG4gICAqIGNvbnRleHR1YWxDYXJkXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuaGVscGVycy5jb250ZXh0dWFsQ2FyZFxuICAgKi9cbiAgc2VsZi5jb250ZXh0dWFsQ2FyZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbmFtZSA9IGZha2VyLm5hbWUuZmlyc3ROYW1lKCksXG4gICAgICAgIHVzZXJOYW1lID0gZmFrZXIuaW50ZXJuZXQudXNlck5hbWUobmFtZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgXCJuYW1lXCI6IG5hbWUsXG4gICAgICAgIFwidXNlcm5hbWVcIjogdXNlck5hbWUsXG4gICAgICAgIFwiYXZhdGFyXCI6IGZha2VyLmludGVybmV0LmF2YXRhcigpLFxuICAgICAgICBcImVtYWlsXCI6IGZha2VyLmludGVybmV0LmVtYWlsKHVzZXJOYW1lKSxcbiAgICAgICAgXCJkb2JcIjogZmFrZXIuZGF0ZS5wYXN0KDUwLCBuZXcgRGF0ZShcIlNhdCBTZXAgMjAgMTk5MiAyMTozNTowMiBHTVQrMDIwMCAoQ0VTVClcIikpLFxuICAgICAgICBcInBob25lXCI6IGZha2VyLnBob25lLnBob25lTnVtYmVyKCksXG4gICAgICAgIFwiYWRkcmVzc1wiOiB7XG4gICAgICAgICAgICBcInN0cmVldFwiOiBmYWtlci5hZGRyZXNzLnN0cmVldE5hbWUodHJ1ZSksXG4gICAgICAgICAgICBcInN1aXRlXCI6IGZha2VyLmFkZHJlc3Muc2Vjb25kYXJ5QWRkcmVzcygpLFxuICAgICAgICAgICAgXCJjaXR5XCI6IGZha2VyLmFkZHJlc3MuY2l0eSgpLFxuICAgICAgICAgICAgXCJ6aXBjb2RlXCI6IGZha2VyLmFkZHJlc3MuemlwQ29kZSgpLFxuICAgICAgICAgICAgXCJnZW9cIjoge1xuICAgICAgICAgICAgICAgIFwibGF0XCI6IGZha2VyLmFkZHJlc3MubGF0aXR1ZGUoKSxcbiAgICAgICAgICAgICAgICBcImxuZ1wiOiBmYWtlci5hZGRyZXNzLmxvbmdpdHVkZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwid2Vic2l0ZVwiOiBmYWtlci5pbnRlcm5ldC5kb21haW5OYW1lKCksXG4gICAgICAgIFwiY29tcGFueVwiOiB7XG4gICAgICAgICAgICBcIm5hbWVcIjogZmFrZXIuY29tcGFueS5jb21wYW55TmFtZSgpLFxuICAgICAgICAgICAgXCJjYXRjaFBocmFzZVwiOiBmYWtlci5jb21wYW55LmNhdGNoUGhyYXNlKCksXG4gICAgICAgICAgICBcImJzXCI6IGZha2VyLmNvbXBhbnkuYnMoKVxuICAgICAgICB9XG4gICAgfTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiB1c2VyQ2FyZFxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmhlbHBlcnMudXNlckNhcmRcbiAgICovXG4gIHNlbGYudXNlckNhcmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgIFwibmFtZVwiOiBmYWtlci5uYW1lLmZpbmROYW1lKCksXG4gICAgICAgICAgXCJ1c2VybmFtZVwiOiBmYWtlci5pbnRlcm5ldC51c2VyTmFtZSgpLFxuICAgICAgICAgIFwiZW1haWxcIjogZmFrZXIuaW50ZXJuZXQuZW1haWwoKSxcbiAgICAgICAgICBcImFkZHJlc3NcIjoge1xuICAgICAgICAgICAgICBcInN0cmVldFwiOiBmYWtlci5hZGRyZXNzLnN0cmVldE5hbWUodHJ1ZSksXG4gICAgICAgICAgICAgIFwic3VpdGVcIjogZmFrZXIuYWRkcmVzcy5zZWNvbmRhcnlBZGRyZXNzKCksXG4gICAgICAgICAgICAgIFwiY2l0eVwiOiBmYWtlci5hZGRyZXNzLmNpdHkoKSxcbiAgICAgICAgICAgICAgXCJ6aXBjb2RlXCI6IGZha2VyLmFkZHJlc3MuemlwQ29kZSgpLFxuICAgICAgICAgICAgICBcImdlb1wiOiB7XG4gICAgICAgICAgICAgICAgICBcImxhdFwiOiBmYWtlci5hZGRyZXNzLmxhdGl0dWRlKCksXG4gICAgICAgICAgICAgICAgICBcImxuZ1wiOiBmYWtlci5hZGRyZXNzLmxvbmdpdHVkZSgpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGhvbmVcIjogZmFrZXIucGhvbmUucGhvbmVOdW1iZXIoKSxcbiAgICAgICAgICBcIndlYnNpdGVcIjogZmFrZXIuaW50ZXJuZXQuZG9tYWluTmFtZSgpLFxuICAgICAgICAgIFwiY29tcGFueVwiOiB7XG4gICAgICAgICAgICAgIFwibmFtZVwiOiBmYWtlci5jb21wYW55LmNvbXBhbnlOYW1lKCksXG4gICAgICAgICAgICAgIFwiY2F0Y2hQaHJhc2VcIjogZmFrZXIuY29tcGFueS5jYXRjaFBocmFzZSgpLFxuICAgICAgICAgICAgICBcImJzXCI6IGZha2VyLmNvbXBhbnkuYnMoKVxuICAgICAgICAgIH1cbiAgICAgIH07XG4gIH07XG5cbiAgLyoqXG4gICAqIGNyZWF0ZVRyYW5zYWN0aW9uXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuaGVscGVycy5jcmVhdGVUcmFuc2FjdGlvblxuICAgKi9cbiAgc2VsZi5jcmVhdGVUcmFuc2FjdGlvbiA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgIFwiYW1vdW50XCIgOiBmYWtlci5maW5hbmNlLmFtb3VudCgpLFxuICAgICAgXCJkYXRlXCIgOiBuZXcgRGF0ZSgyMDEyLCAxLCAyKSwgIC8vVE9ETzogYWRkIGEgcmFuZ2VkIGRhdGUgbWV0aG9kXG4gICAgICBcImJ1c2luZXNzXCI6IGZha2VyLmNvbXBhbnkuY29tcGFueU5hbWUoKSxcbiAgICAgIFwibmFtZVwiOiBbZmFrZXIuZmluYW5jZS5hY2NvdW50TmFtZSgpLCBmYWtlci5maW5hbmNlLm1hc2soKV0uam9pbignICcpLFxuICAgICAgXCJ0eXBlXCIgOiBzZWxmLnJhbmRvbWl6ZShmYWtlci5kZWZpbml0aW9ucy5maW5hbmNlLnRyYW5zYWN0aW9uX3R5cGUpLFxuICAgICAgXCJhY2NvdW50XCIgOiBmYWtlci5maW5hbmNlLmFjY291bnQoKVxuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIHNlbGY7XG5cbn07XG5cblxuLypcblN0cmluZy5wcm90b3R5cGUuY2FwaXRhbGl6ZSA9IGZ1bmN0aW9uICgpIHsgLy92MS4wXG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZSgvXFx3Ky9nLCBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGEuc3Vic3RyKDEpLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG59O1xuKi9cblxubW9kdWxlWydleHBvcnRzJ10gPSBIZWxwZXJzO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IHtcbiAgYWxwaGE6IFtcbiAgICAnQScsJ0InLCdDJywnRCcsJ0UnLCdGJywnRycsJ0gnLCdJJywnSicsJ0snLCdMJywnTScsJ04nLCdPJywnUCcsJ1EnLCdSJywnUycsJ1QnLCdVJywnVicsJ1cnLCdYJywnWScsJ1onXG4gIF0sXG4gIHBhdHRlcm4xMDogW1xuICAgIFwiMDFcIiwgXCIwMlwiLCBcIjAzXCIsIFwiMDRcIiwgXCIwNVwiLCBcIjA2XCIsIFwiMDdcIiwgXCIwOFwiLCBcIjA5XCJcbiAgXSxcbiAgcGF0dGVybjEwMDogW1xuICAgIFwiMDAxXCIsIFwiMDAyXCIsIFwiMDAzXCIsIFwiMDA0XCIsIFwiMDA1XCIsIFwiMDA2XCIsIFwiMDA3XCIsIFwiMDA4XCIsIFwiMDA5XCJcbiAgXSxcbiAgdG9EaWdpdFN0cmluZzogZnVuY3Rpb24gKHN0cikge1xuICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bQS1aXS9naSwgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgICAgICByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApIC0gNTU7XG4gICAgICB9KTtcbiAgfSxcbiAgbW9kOTc6IGZ1bmN0aW9uIChkaWdpdFN0cikge1xuICAgICAgdmFyIG0gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaWdpdFN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG0gPSAoKG0gKiAxMCkgKyAoZGlnaXRTdHJbaV0gfDApKSAlIDk3O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG07XG4gIH0sXG4gIGZvcm1hdHM6IFtcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIkFMXCIsXG4gICAgICB0b3RhbDogMjgsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogOFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJjXCIsXG4gICAgICAgICAgY291bnQ6IDE2XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiQUxrayBiYmJzIHNzc3ggY2NjYyBjY2NjIGNjY2MgY2NjY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIkFEXCIsXG4gICAgICB0b3RhbDogMjQsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogOFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJjXCIsXG4gICAgICAgICAgY291bnQ6IDEyXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiQURrayBiYmJiIHNzc3MgY2NjYyBjY2NjIGNjY2NcIlxuICAgIH0sXG4gICAge1xuICAgICAgY291bnRyeTogXCJBVFwiLFxuICAgICAgdG90YWw6IDIwLFxuICAgICAgYmJhbjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxMVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIkFUa2sgYmJiYiBiY2NjIGNjY2MgY2NjY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIkFaXCIsXG4gICAgICB0b3RhbDogMjgsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcImNcIixcbiAgICAgICAgICBjb3VudDogNFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDIwXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiQVprayBiYmJiIGNjY2MgY2NjYyBjY2NjIGNjY2MgY2NjY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIkJIXCIsXG4gICAgICB0b3RhbDogMjIsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcImFcIixcbiAgICAgICAgICBjb3VudDogNFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJjXCIsXG4gICAgICAgICAgY291bnQ6IDE0XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiQkhrayBiYmJiIGNjY2MgY2NjYyBjY2NjIGNjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiQkVcIixcbiAgICAgIHRvdGFsOiAxNixcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAzXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogOVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIkJFa2sgYmJiYyBjY2NjIGNjeHhcIlxuICAgIH0sXG4gICAge1xuICAgICAgY291bnRyeTogXCJCQVwiLFxuICAgICAgdG90YWw6IDIwLFxuICAgICAgYmJhbjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDZcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxMFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIkJBa2sgYmJicyBzc2NjIGNjY2MgY2N4eFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIkJSXCIsXG4gICAgICB0b3RhbDogMjksXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTNcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxMFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJhXCIsXG4gICAgICAgICAgY291bnQ6IDFcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiY1wiLFxuICAgICAgICAgIGNvdW50OiAxXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiQlJrayBiYmJiIGJiYmIgc3NzcyBzY2NjIGNjY2MgY2NjdCBuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiQkdcIixcbiAgICAgIHRvdGFsOiAyMixcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiYVwiLFxuICAgICAgICAgIGNvdW50OiA0XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogNlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJjXCIsXG4gICAgICAgICAgY291bnQ6IDhcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJCR2trIGJiYmIgc3NzcyBkZGNjIGNjY2MgY2NcIlxuICAgIH0sXG4gICAge1xuICAgICAgY291bnRyeTogXCJDUlwiLFxuICAgICAgdG90YWw6IDIxLFxuICAgICAgYmJhbjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDNcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxNFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIkNSa2sgYmJiYyBjY2NjIGNjY2MgY2NjYyBjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiSFJcIixcbiAgICAgIHRvdGFsOiAyMSxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiA3XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTBcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJIUmtrIGJiYmIgYmJiYyBjY2NjIGNjY2MgY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIkNZXCIsXG4gICAgICB0b3RhbDogMjgsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogOFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJjXCIsXG4gICAgICAgICAgY291bnQ6IDE2XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiQ1lrayBiYmJzIHNzc3MgY2NjYyBjY2NjIGNjY2MgY2NjY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIkNaXCIsXG4gICAgICB0b3RhbDogMjQsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxMFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIkNaa2sgYmJiYiBzc3NzIHNzY2MgY2NjYyBjY2NjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiREtcIixcbiAgICAgIHRvdGFsOiAxOCxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiA0XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTBcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJES2trIGJiYmIgY2NjYyBjY2NjIGNjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiRE9cIixcbiAgICAgIHRvdGFsOiAyOCxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiYVwiLFxuICAgICAgICAgIGNvdW50OiA0XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMjBcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJET2trIGJiYmIgY2NjYyBjY2NjIGNjY2MgY2NjYyBjY2NjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiVExcIixcbiAgICAgIHRvdGFsOiAyMyxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAzXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTZcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJUTGtrIGJiYmMgY2NjYyBjY2NjIGNjY2MgY3h4XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiRUVcIixcbiAgICAgIHRvdGFsOiAyMCxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiA0XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJFRWtrIGJic3MgY2NjYyBjY2NjIGNjY3hcIlxuICAgIH0sXG4gICAge1xuICAgICAgY291bnRyeTogXCJGT1wiLFxuICAgICAgdG90YWw6IDE4LFxuICAgICAgYmJhbjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDRcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxMFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIkZPa2sgYmJiYiBjY2NjIGNjY2MgY3hcIlxuICAgIH0sXG4gICAge1xuICAgICAgY291bnRyeTogXCJGSVwiLFxuICAgICAgdG90YWw6IDE4LFxuICAgICAgYmJhbjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDZcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiA4XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiRklrayBiYmJiIGJiY2MgY2NjYyBjeFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIkZSXCIsXG4gICAgICB0b3RhbDogMjcsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiY1wiLFxuICAgICAgICAgIGNvdW50OiAxMVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJGUmtrIGJiYmIgYmdnZyBnZ2NjIGNjY2MgY2NjYyBjeHhcIlxuICAgIH0sXG4gICAge1xuICAgICAgY291bnRyeTogXCJHRVwiLFxuICAgICAgdG90YWw6IDIyLFxuICAgICAgYmJhbjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJjXCIsXG4gICAgICAgICAgY291bnQ6IDJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxNlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIkdFa2sgYmJjYyBjY2NjIGNjY2MgY2NjYyBjY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIkRFXCIsXG4gICAgICB0b3RhbDogMjIsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogOFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDEwXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiREVrayBiYmJiIGJiYmIgY2NjYyBjY2NjIGNjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiR0lcIixcbiAgICAgIHRvdGFsOiAyMyxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiYVwiLFxuICAgICAgICAgIGNvdW50OiA0XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcImNcIixcbiAgICAgICAgICBjb3VudDogMTVcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJHSWtrIGJiYmIgY2NjYyBjY2NjIGNjY2MgY2NjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiR1JcIixcbiAgICAgIHRvdGFsOiAyNyxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiA3XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcImNcIixcbiAgICAgICAgICBjb3VudDogMTZcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJHUmtrIGJiYnMgc3NzYyBjY2NjIGNjY2MgY2NjYyBjY2NcIlxuICAgIH0sXG4gICAge1xuICAgICAgY291bnRyeTogXCJHTFwiLFxuICAgICAgdG90YWw6IDE4LFxuICAgICAgYmJhbjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDRcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxMFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIkdMa2sgYmJiYiBjY2NjIGNjY2MgY2NcIlxuICAgIH0sXG4gICAge1xuICAgICAgY291bnRyeTogXCJHVFwiLFxuICAgICAgdG90YWw6IDI4LFxuICAgICAgYmJhbjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJjXCIsXG4gICAgICAgICAgY291bnQ6IDRcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiY1wiLFxuICAgICAgICAgIGNvdW50OiA0XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcImNcIixcbiAgICAgICAgICBjb3VudDogMTZcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJHVGtrIGJiYmIgbW10dCBjY2NjIGNjY2MgY2NjYyBjY2NjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiSFVcIixcbiAgICAgIHRvdGFsOiAyOCxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiA4XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTZcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJIVWtrIGJiYnMgc3NzayBjY2NjIGNjY2MgY2NjYyBjY2N4XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiSVNcIixcbiAgICAgIHRvdGFsOiAyNixcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiA2XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTZcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJJU2trIGJiYmIgc3NjYyBjY2NjIGlpaWkgaWlpaSBpaVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIklFXCIsXG4gICAgICB0b3RhbDogMjIsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcImNcIixcbiAgICAgICAgICBjb3VudDogNFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDZcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiA4XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiSUVrayBhYWFhIGJiYmIgYmJjYyBjY2NjIGNjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiSUxcIixcbiAgICAgIHRvdGFsOiAyMyxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiA2XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTNcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJJTGtrIGJiYm4gbm5jYyBjY2NjIGNjY2MgY2NjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiSVRcIixcbiAgICAgIHRvdGFsOiAyNyxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiYVwiLFxuICAgICAgICAgIGNvdW50OiAxXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiY1wiLFxuICAgICAgICAgIGNvdW50OiAxMlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIklUa2sgeGFhYSBhYWJiIGJiYmMgY2NjYyBjY2NjIGNjY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIkpPXCIsXG4gICAgICB0b3RhbDogMzAsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcImFcIixcbiAgICAgICAgICBjb3VudDogNFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDRcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxOFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIkpPa2sgYmJiYiBubm5uIGNjY2MgY2NjYyBjY2NjIGNjY2MgY2NcIlxuICAgIH0sXG4gICAge1xuICAgICAgY291bnRyeTogXCJLWlwiLFxuICAgICAgdG90YWw6IDIwLFxuICAgICAgYmJhbjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDNcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiY1wiLFxuICAgICAgICAgIGNvdW50OiAxM1xuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIktaa2sgYmJiYyBjY2NjIGNjY2MgY2NjY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIlhLXCIsXG4gICAgICB0b3RhbDogMjAsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogNFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDEyXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiWEtrayBiYmJiIGNjY2MgY2NjYyBjY2NjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiS1dcIixcbiAgICAgIHRvdGFsOiAzMCxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiYVwiLFxuICAgICAgICAgIGNvdW50OiA0XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcImNcIixcbiAgICAgICAgICBjb3VudDogMjJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJLV2trIGJiYmIgY2NjYyBjY2NjIGNjY2MgY2NjYyBjY2NjIGNjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiTFZcIixcbiAgICAgIHRvdGFsOiAyMSxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiYVwiLFxuICAgICAgICAgIGNvdW50OiA0XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcImNcIixcbiAgICAgICAgICBjb3VudDogMTNcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJMVmtrIGJiYmIgY2NjYyBjY2NjIGNjY2MgY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIkxCXCIsXG4gICAgICB0b3RhbDogMjgsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogNFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJjXCIsXG4gICAgICAgICAgY291bnQ6IDIwXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiTEJrayBiYmJiIGNjY2MgY2NjYyBjY2NjIGNjY2MgY2NjY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIkxJXCIsXG4gICAgICB0b3RhbDogMjEsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogNVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJjXCIsXG4gICAgICAgICAgY291bnQ6IDEyXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiTElrayBiYmJiIGJjY2MgY2NjYyBjY2NjIGNcIlxuICAgIH0sXG4gICAge1xuICAgICAgY291bnRyeTogXCJMVFwiLFxuICAgICAgdG90YWw6IDIwLFxuICAgICAgYmJhbjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxMVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIkxUa2sgYmJiYiBiY2NjIGNjY2MgY2NjY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIkxVXCIsXG4gICAgICB0b3RhbDogMjAsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogM1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJjXCIsXG4gICAgICAgICAgY291bnQ6IDEzXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiTFVrayBiYmJjIGNjY2MgY2NjYyBjY2NjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiTUtcIixcbiAgICAgIHRvdGFsOiAxOSxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAzXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcImNcIixcbiAgICAgICAgICBjb3VudDogMTBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAyXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiTUtrayBiYmJjIGNjY2MgY2NjYyBjeHhcIlxuICAgIH0sXG4gICAge1xuICAgICAgY291bnRyeTogXCJNVFwiLFxuICAgICAgdG90YWw6IDMxLFxuICAgICAgYmJhbjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJhXCIsXG4gICAgICAgICAgY291bnQ6IDRcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiA1XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcImNcIixcbiAgICAgICAgICBjb3VudDogMThcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJNVGtrIGJiYmIgc3NzcyBzY2NjIGNjY2MgY2NjYyBjY2NjIGNjY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIk1SXCIsXG4gICAgICB0b3RhbDogMjcsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxM1xuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIk1Sa2sgYmJiYiBic3NzIHNzY2MgY2NjYyBjY2NjIGN4eFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIk1VXCIsXG4gICAgICB0b3RhbDogMzAsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcImFcIixcbiAgICAgICAgICBjb3VudDogNFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDRcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxNVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJhXCIsXG4gICAgICAgICAgY291bnQ6IDNcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJNVWtrIGJiYmIgYmJzcyBjY2NjIGNjY2MgY2NjYyAwMDBkIGRkXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiTUNcIixcbiAgICAgIHRvdGFsOiAyNyxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxMFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJjXCIsXG4gICAgICAgICAgY291bnQ6IDExXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIk1Da2sgYmJiYiBic3NzIHNzY2MgY2NjYyBjY2NjIGN4eFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIk1EXCIsXG4gICAgICB0b3RhbDogMjQsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcImNcIixcbiAgICAgICAgICBjb3VudDogMlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJjXCIsXG4gICAgICAgICAgY291bnQ6IDE4XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiTURrayBiYmNjIGNjY2MgY2NjYyBjY2NjIGNjY2NcIlxuICAgIH0sXG4gICAge1xuICAgICAgY291bnRyeTogXCJNRVwiLFxuICAgICAgdG90YWw6IDIyLFxuICAgICAgYmJhbjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDNcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxNVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIk1Fa2sgYmJiYyBjY2NjIGNjY2MgY2NjYyB4eFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIk5MXCIsXG4gICAgICB0b3RhbDogMTgsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcImFcIixcbiAgICAgICAgICBjb3VudDogNFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDEwXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiTkxrayBiYmJiIGNjY2MgY2NjYyBjY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIk5PXCIsXG4gICAgICB0b3RhbDogMTUsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogNFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDdcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJOT2trIGJiYmIgY2NjYyBjY3hcIlxuICAgIH0sXG4gICAge1xuICAgICAgY291bnRyeTogXCJQS1wiLFxuICAgICAgdG90YWw6IDI0LFxuICAgICAgYmJhbjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJjXCIsXG4gICAgICAgICAgY291bnQ6IDRcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxNlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIlBLa2sgYmJiYiBjY2NjIGNjY2MgY2NjYyBjY2NjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiUFNcIixcbiAgICAgIHRvdGFsOiAyOSxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiY1wiLFxuICAgICAgICAgIGNvdW50OiA0XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogOVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDEyXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiUFNrayBiYmJiIHh4eHggeHh4eCB4Y2NjIGNjY2MgY2NjYyBjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiUExcIixcbiAgICAgIHRvdGFsOiAyOCxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiA4XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTZcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJQTGtrIGJiYnMgc3NzeCBjY2NjIGNjY2MgY2NjYyBjY2NjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiUFRcIixcbiAgICAgIHRvdGFsOiAyNSxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiA4XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTNcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJQVGtrIGJiYmIgc3NzcyBjY2NjIGNjY2MgY2NjeCB4XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiUUFcIixcbiAgICAgIHRvdGFsOiAyOSxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiYVwiLFxuICAgICAgICAgIGNvdW50OiA0XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcImNcIixcbiAgICAgICAgICBjb3VudDogMjFcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJRQWtrIGJiYmIgY2NjYyBjY2NjIGNjY2MgY2NjYyBjY2NjIGNcIlxuICAgIH0sXG4gICAge1xuICAgICAgY291bnRyeTogXCJST1wiLFxuICAgICAgdG90YWw6IDI0LFxuICAgICAgYmJhbjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJhXCIsXG4gICAgICAgICAgY291bnQ6IDRcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiY1wiLFxuICAgICAgICAgIGNvdW50OiAxNlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIlJPa2sgYmJiYiBjY2NjIGNjY2MgY2NjYyBjY2NjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiU01cIixcbiAgICAgIHRvdGFsOiAyNyxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiYVwiLFxuICAgICAgICAgIGNvdW50OiAxXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiY1wiLFxuICAgICAgICAgIGNvdW50OiAxMlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIlNNa2sgeGFhYSBhYWJiIGJiYmMgY2NjYyBjY2NjIGNjY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIlNBXCIsXG4gICAgICB0b3RhbDogMjQsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJjXCIsXG4gICAgICAgICAgY291bnQ6IDE4XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiU0FrayBiYmNjIGNjY2MgY2NjYyBjY2NjIGNjY2NcIlxuICAgIH0sXG4gICAge1xuICAgICAgY291bnRyeTogXCJSU1wiLFxuICAgICAgdG90YWw6IDIyLFxuICAgICAgYmJhbjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDNcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxNVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIlJTa2sgYmJiYyBjY2NjIGNjY2MgY2NjYyB4eFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIlNLXCIsXG4gICAgICB0b3RhbDogMjQsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxMFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIlNLa2sgYmJiYiBzc3NzIHNzY2MgY2NjYyBjY2NjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiU0lcIixcbiAgICAgIHRvdGFsOiAxOSxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiA1XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTBcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJTSWtrIGJic3Mgc2NjYyBjY2NjIGN4eFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIkVTXCIsXG4gICAgICB0b3RhbDogMjQsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxMFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIkVTa2sgYmJiYiBnZ2dnIHh4Y2MgY2NjYyBjY2NjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiU0VcIixcbiAgICAgIHRvdGFsOiAyNCxcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAzXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogMTdcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZvcm1hdDogXCJTRWtrIGJiYmMgY2NjYyBjY2NjIGNjY2MgY2NjY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIkNIXCIsXG4gICAgICB0b3RhbDogMjEsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogNVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJjXCIsXG4gICAgICAgICAgY291bnQ6IDEyXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiQ0hrayBiYmJiIGJjY2MgY2NjYyBjY2NjIGNcIlxuICAgIH0sXG4gICAge1xuICAgICAgY291bnRyeTogXCJUTlwiLFxuICAgICAgdG90YWw6IDI0LFxuICAgICAgYmJhbjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxNVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIlROa2sgYmJzcyBzY2NjIGNjY2MgY2NjYyBjY2NjXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvdW50cnk6IFwiVFJcIixcbiAgICAgIHRvdGFsOiAyNixcbiAgICAgIGJiYW46IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiA1XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcImNcIixcbiAgICAgICAgICBjb3VudDogMVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJjXCIsXG4gICAgICAgICAgY291bnQ6IDE2XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiVFJrayBiYmJiIGJ4Y2MgY2NjYyBjY2NjIGNjY2MgY2NcIlxuICAgIH0sXG4gICAge1xuICAgICAgY291bnRyeTogXCJBRVwiLFxuICAgICAgdG90YWw6IDIzLFxuICAgICAgYmJhbjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDNcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiAxNlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIkFFa2sgYmJiYyBjY2NjIGNjY2MgY2NjYyBjY2NcIlxuICAgIH0sXG4gICAge1xuICAgICAgY291bnRyeTogXCJHQlwiLFxuICAgICAgdG90YWw6IDIyLFxuICAgICAgYmJhbjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJhXCIsXG4gICAgICAgICAgY291bnQ6IDRcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiblwiLFxuICAgICAgICAgIGNvdW50OiA2XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcIm5cIixcbiAgICAgICAgICBjb3VudDogOFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZm9ybWF0OiBcIkdCa2sgYmJiYiBzc3NzIHNzY2MgY2NjYyBjY1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBjb3VudHJ5OiBcIlZHXCIsXG4gICAgICB0b3RhbDogMjQsXG4gICAgICBiYmFuOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBcImNcIixcbiAgICAgICAgICBjb3VudDogNFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJuXCIsXG4gICAgICAgICAgY291bnQ6IDE2XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmb3JtYXQ6IFwiVkdrayBiYmJiIGNjY2MgY2NjYyBjY2NjIGNjY2NcIlxuICAgIH1cbiAgXSxcbiAgaXNvMzE2NjogW1xuICAgIFwiQUNcIiwgXCJBRFwiLCBcIkFFXCIsIFwiQUZcIiwgXCJBR1wiLCBcIkFJXCIsIFwiQUxcIiwgXCJBTVwiLCBcIkFOXCIsIFwiQU9cIiwgXCJBUVwiLCBcIkFSXCIsIFwiQVNcIixcbiAgICBcIkFUXCIsIFwiQVVcIiwgXCJBV1wiLCBcIkFYXCIsIFwiQVpcIiwgXCJCQVwiLCBcIkJCXCIsIFwiQkRcIiwgXCJCRVwiLCBcIkJGXCIsIFwiQkdcIiwgXCJCSFwiLCBcIkJJXCIsXG4gICAgXCJCSlwiLCBcIkJMXCIsIFwiQk1cIiwgXCJCTlwiLCBcIkJPXCIsIFwiQlFcIiwgXCJCUlwiLCBcIkJTXCIsIFwiQlRcIiwgXCJCVVwiLCBcIkJWXCIsIFwiQldcIiwgXCJCWVwiLFxuICAgIFwiQlpcIiwgXCJDQVwiLCBcIkNDXCIsIFwiQ0RcIiwgXCJDRVwiLCBcIkNGXCIsIFwiQ0dcIiwgXCJDSFwiLCBcIkNJXCIsIFwiQ0tcIiwgXCJDTFwiLCBcIkNNXCIsIFwiQ05cIixcbiAgICBcIkNPXCIsIFwiQ1BcIiwgXCJDUlwiLCBcIkNTXCIsIFwiQ1NcIiwgXCJDVVwiLCBcIkNWXCIsIFwiQ1dcIiwgXCJDWFwiLCBcIkNZXCIsIFwiQ1pcIiwgXCJERFwiLCBcIkRFXCIsXG4gICAgXCJER1wiLCBcIkRKXCIsIFwiREtcIiwgXCJETVwiLCBcIkRPXCIsIFwiRFpcIiwgXCJFQVwiLCBcIkVDXCIsIFwiRUVcIiwgXCJFR1wiLCBcIkVIXCIsIFwiRVJcIiwgXCJFU1wiLFxuICAgIFwiRVRcIiwgXCJFVVwiLCBcIkZJXCIsIFwiRkpcIiwgXCJGS1wiLCBcIkZNXCIsIFwiRk9cIiwgXCJGUlwiLCBcIkZYXCIsIFwiR0FcIiwgXCJHQlwiLCBcIkdEXCIsIFwiR0VcIixcbiAgICBcIkdGXCIsIFwiR0dcIiwgXCJHSFwiLCBcIkdJXCIsIFwiR0xcIiwgXCJHTVwiLCBcIkdOXCIsIFwiR1BcIiwgXCJHUVwiLCBcIkdSXCIsIFwiR1NcIiwgXCJHVFwiLCBcIkdVXCIsXG4gICAgXCJHV1wiLCBcIkdZXCIsIFwiSEtcIiwgXCJITVwiLCBcIkhOXCIsIFwiSFJcIiwgXCJIVFwiLCBcIkhVXCIsIFwiSUNcIiwgXCJJRFwiLCBcIklFXCIsIFwiSUxcIiwgXCJJTVwiLFxuICAgIFwiSU5cIiwgXCJJT1wiLCBcIklRXCIsIFwiSVJcIiwgXCJJU1wiLCBcIklUXCIsIFwiSkVcIiwgXCJKTVwiLCBcIkpPXCIsIFwiSlBcIiwgXCJLRVwiLCBcIktHXCIsIFwiS0hcIixcbiAgICBcIktJXCIsIFwiS01cIiwgXCJLTlwiLCBcIktQXCIsIFwiS1JcIiwgXCJLV1wiLCBcIktZXCIsIFwiS1pcIiwgXCJMQVwiLCBcIkxCXCIsIFwiTENcIiwgXCJMSVwiLCBcIkxLXCIsXG4gICAgXCJMUlwiLCBcIkxTXCIsIFwiTFRcIiwgXCJMVVwiLCBcIkxWXCIsIFwiTFlcIiwgXCJNQVwiLCBcIk1DXCIsIFwiTURcIiwgXCJNRVwiLCBcIk1GXCIsIFwiTUdcIiwgXCJNSFwiLFxuICAgIFwiTUtcIiwgXCJNTFwiLCBcIk1NXCIsIFwiTU5cIiwgXCJNT1wiLCBcIk1QXCIsIFwiTVFcIiwgXCJNUlwiLCBcIk1TXCIsIFwiTVRcIiwgXCJNVVwiLCBcIk1WXCIsIFwiTVdcIixcbiAgICBcIk1YXCIsIFwiTVlcIiwgXCJNWlwiLCBcIk5BXCIsIFwiTkNcIiwgXCJORVwiLCBcIk5GXCIsIFwiTkdcIiwgXCJOSVwiLCBcIk5MXCIsIFwiTk9cIiwgXCJOUFwiLCBcIk5SXCIsXG4gICAgXCJOVFwiLCBcIk5VXCIsIFwiTlpcIiwgXCJPTVwiLCBcIlBBXCIsIFwiUEVcIiwgXCJQRlwiLCBcIlBHXCIsIFwiUEhcIiwgXCJQS1wiLCBcIlBMXCIsIFwiUE1cIiwgXCJQTlwiLFxuICAgIFwiUFJcIiwgXCJQU1wiLCBcIlBUXCIsIFwiUFdcIiwgXCJQWVwiLCBcIlFBXCIsIFwiUkVcIiwgXCJST1wiLCBcIlJTXCIsIFwiUlVcIiwgXCJSV1wiLCBcIlNBXCIsIFwiU0JcIixcbiAgICBcIlNDXCIsIFwiU0RcIiwgXCJTRVwiLCBcIlNHXCIsIFwiU0hcIiwgXCJTSVwiLCBcIlNKXCIsIFwiU0tcIiwgXCJTTFwiLCBcIlNNXCIsIFwiU05cIiwgXCJTT1wiLCBcIlNSXCIsXG4gICAgXCJTU1wiLCBcIlNUXCIsIFwiU1VcIiwgXCJTVlwiLCBcIlNYXCIsIFwiU1lcIiwgXCJTWlwiLCBcIlRBXCIsIFwiVENcIiwgXCJURFwiLCBcIlRGXCIsIFwiVEdcIiwgXCJUSFwiLFxuICAgIFwiVEpcIiwgXCJUS1wiLCBcIlRMXCIsIFwiVE1cIiwgXCJUTlwiLCBcIlRPXCIsIFwiVFJcIiwgXCJUVFwiLCBcIlRWXCIsIFwiVFdcIiwgXCJUWlwiLCBcIlVBXCIsIFwiVUdcIixcbiAgICBcIlVNXCIsIFwiVVNcIiwgXCJVWVwiLCBcIlVaXCIsIFwiVkFcIiwgXCJWQ1wiLCBcIlZFXCIsIFwiVkdcIiwgXCJWSVwiLCBcIlZOXCIsIFwiVlVcIiwgXCJXRlwiLCBcIldTXCIsXG4gICAgXCJZRVwiLCBcIllUXCIsIFwiWVVcIiwgXCJaQVwiLCBcIlpNXCIsIFwiWlJcIiwgXCJaV1wiXG4gIF1cbn0iLCIvKipcbiAqXG4gKiBAbmFtZXNwYWNlIGZha2VyLmltYWdlXG4gKi9cbnZhciBJbWFnZSA9IGZ1bmN0aW9uIChmYWtlcikge1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvKipcbiAgICogaW1hZ2VcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtib29sZWFufSByYW5kb21pemVcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5pbWFnZVxuICAgKi9cbiAgc2VsZi5pbWFnZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCByYW5kb21pemUpIHtcbiAgICB2YXIgY2F0ZWdvcmllcyA9IFtcImFic3RyYWN0XCIsIFwiYW5pbWFsc1wiLCBcImJ1c2luZXNzXCIsIFwiY2F0c1wiLCBcImNpdHlcIiwgXCJmb29kXCIsIFwibmlnaHRsaWZlXCIsIFwiZmFzaGlvblwiLCBcInBlb3BsZVwiLCBcIm5hdHVyZVwiLCBcInNwb3J0c1wiLCBcInRlY2huaWNzXCIsIFwidHJhbnNwb3J0XCJdO1xuICAgIHJldHVybiBzZWxmW2Zha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoY2F0ZWdvcmllcyldKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiBhdmF0YXJcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5hdmF0YXJcbiAgICovXG4gIHNlbGYuYXZhdGFyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmYWtlci5pbnRlcm5ldC5hdmF0YXIoKTtcbiAgfTtcbiAgLyoqXG4gICAqIGltYWdlVXJsXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjYXRlZ29yeVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJhbmRvbWl6ZVxuICAgKiBAbWV0aG9kIGZha2VyLmltYWdlLmltYWdlVXJsXG4gICAqL1xuICBzZWxmLmltYWdlVXJsID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIGNhdGVnb3J5LCByYW5kb21pemUsIGh0dHBzKSB7XG4gICAgICB2YXIgd2lkdGggPSB3aWR0aCB8fCA2NDA7XG4gICAgICB2YXIgaGVpZ2h0ID0gaGVpZ2h0IHx8IDQ4MDtcbiAgICAgIHZhciBwcm90b2NvbCA9ICdodHRwOi8vJztcbiAgICAgIGlmICh0eXBlb2YgaHR0cHMgIT09ICd1bmRlZmluZWQnICYmIGh0dHBzID09PSB0cnVlKSB7XG4gICAgICAgIHByb3RvY29sID0gJ2h0dHBzOi8vJztcbiAgICAgIH1cbiAgICAgIHZhciB1cmwgPSBwcm90b2NvbCArICdsb3JlbXBpeGVsLmNvbS8nICsgd2lkdGggKyAnLycgKyBoZWlnaHQ7XG4gICAgICBpZiAodHlwZW9mIGNhdGVnb3J5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB1cmwgKz0gJy8nICsgY2F0ZWdvcnk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyYW5kb21pemUpIHtcbiAgICAgICAgdXJsICs9ICc/JyArIGZha2VyLnJhbmRvbS5udW1iZXIoKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdXJsO1xuICB9O1xuICAvKipcbiAgICogYWJzdHJhY3RcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtib29sZWFufSByYW5kb21pemVcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5hYnN0cmFjdFxuICAgKi9cbiAgc2VsZi5hYnN0cmFjdCA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCByYW5kb21pemUpIHtcbiAgICByZXR1cm4gZmFrZXIuaW1hZ2UuaW1hZ2VVcmwod2lkdGgsIGhlaWdodCwgJ2Fic3RyYWN0JywgcmFuZG9taXplKTtcbiAgfTtcbiAgLyoqXG4gICAqIGFuaW1hbHNcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtib29sZWFufSByYW5kb21pemVcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5hbmltYWxzXG4gICAqL1xuICBzZWxmLmFuaW1hbHMgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgcmFuZG9taXplKSB7XG4gICAgcmV0dXJuIGZha2VyLmltYWdlLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsICdhbmltYWxzJywgcmFuZG9taXplKTtcbiAgfTtcbiAgLyoqXG4gICAqIGJ1c2luZXNzXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9taXplXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UuYnVzaW5lc3NcbiAgICovXG4gIHNlbGYuYnVzaW5lc3MgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgcmFuZG9taXplKSB7XG4gICAgcmV0dXJuIGZha2VyLmltYWdlLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsICdidXNpbmVzcycsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiBjYXRzXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9taXplXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UuY2F0c1xuICAgKi9cbiAgc2VsZi5jYXRzID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS5pbWFnZVVybCh3aWR0aCwgaGVpZ2h0LCAnY2F0cycsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiBjaXR5XG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9taXplXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UuY2l0eVxuICAgKi9cbiAgc2VsZi5jaXR5ID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS5pbWFnZVVybCh3aWR0aCwgaGVpZ2h0LCAnY2l0eScsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiBmb29kXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9taXplXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UuZm9vZFxuICAgKi9cbiAgc2VsZi5mb29kID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS5pbWFnZVVybCh3aWR0aCwgaGVpZ2h0LCAnZm9vZCcsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiBuaWdodGxpZmVcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtib29sZWFufSByYW5kb21pemVcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5uaWdodGxpZmVcbiAgICovXG4gIHNlbGYubmlnaHRsaWZlID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS5pbWFnZVVybCh3aWR0aCwgaGVpZ2h0LCAnbmlnaHRsaWZlJywgcmFuZG9taXplKTtcbiAgfTtcbiAgLyoqXG4gICAqIGZhc2hpb25cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtib29sZWFufSByYW5kb21pemVcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5mYXNoaW9uXG4gICAqL1xuICBzZWxmLmZhc2hpb24gPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgcmFuZG9taXplKSB7XG4gICAgcmV0dXJuIGZha2VyLmltYWdlLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsICdmYXNoaW9uJywgcmFuZG9taXplKTtcbiAgfTtcbiAgLyoqXG4gICAqIHBlb3BsZVxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJhbmRvbWl6ZVxuICAgKiBAbWV0aG9kIGZha2VyLmltYWdlLnBlb3BsZVxuICAgKi9cbiAgc2VsZi5wZW9wbGUgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgcmFuZG9taXplKSB7XG4gICAgcmV0dXJuIGZha2VyLmltYWdlLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsICdwZW9wbGUnLCByYW5kb21pemUpO1xuICB9O1xuICAvKipcbiAgICogbmF0dXJlXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9taXplXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UubmF0dXJlXG4gICAqL1xuICBzZWxmLm5hdHVyZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCByYW5kb21pemUpIHtcbiAgICByZXR1cm4gZmFrZXIuaW1hZ2UuaW1hZ2VVcmwod2lkdGgsIGhlaWdodCwgJ25hdHVyZScsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiBzcG9ydHNcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtib29sZWFufSByYW5kb21pemVcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5zcG9ydHNcbiAgICovXG4gIHNlbGYuc3BvcnRzID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS5pbWFnZVVybCh3aWR0aCwgaGVpZ2h0LCAnc3BvcnRzJywgcmFuZG9taXplKTtcbiAgfTtcbiAgLyoqXG4gICAqIHRlY2huaWNzXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmFuZG9taXplXG4gICAqIEBtZXRob2QgZmFrZXIuaW1hZ2UudGVjaG5pY3NcbiAgICovXG4gIHNlbGYudGVjaG5pY3MgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgcmFuZG9taXplKSB7XG4gICAgcmV0dXJuIGZha2VyLmltYWdlLmltYWdlVXJsKHdpZHRoLCBoZWlnaHQsICd0ZWNobmljcycsIHJhbmRvbWl6ZSk7XG4gIH07XG4gIC8qKlxuICAgKiB0cmFuc3BvcnRcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQHBhcmFtIHtib29sZWFufSByYW5kb21pemVcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS50cmFuc3BvcnRcbiAgICovXG4gIHNlbGYudHJhbnNwb3J0ID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQsIHJhbmRvbWl6ZSkge1xuICAgIHJldHVybiBmYWtlci5pbWFnZS5pbWFnZVVybCh3aWR0aCwgaGVpZ2h0LCAndHJhbnNwb3J0JywgcmFuZG9taXplKTtcbiAgfTtcbiAgLyoqXG4gICAqIGRhdGFVcmlcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICogQG1ldGhvZCBmYWtlci5pbWFnZS5kYXRhdXJsXG4gICAqL1xuICBzZWxmLmRhdGFVcmkgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCkge1xuICAgIHZhciByYXdQcmVmaXggPSAnZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9VVRGLTgsJztcbiAgICB2YXIgc3ZnU3RyaW5nID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZlcnNpb249XCIxLjFcIiBiYXNlUHJvZmlsZT1cImZ1bGxcIiB3aWR0aD1cIicgKyB3aWR0aCArICdcIiBoZWlnaHQ9XCInICsgaGVpZ2h0ICsgJ1wiPiA8cmVjdCB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgZmlsbD1cImdyZXlcIi8+ICA8dGV4dCB4PVwiMFwiIHk9XCIyMFwiIGZvbnQtc2l6ZT1cIjIwXCIgdGV4dC1hbmNob3I9XCJzdGFydFwiIGZpbGw9XCJ3aGl0ZVwiPicgKyB3aWR0aCArICd4JyArIGhlaWdodCArICc8L3RleHQ+IDwvc3ZnPic7XG4gICAgcmV0dXJuIHJhd1ByZWZpeCArIGVuY29kZVVSSUNvbXBvbmVudChzdmdTdHJpbmcpO1xuICB9O1xufVxuXG5tb2R1bGVbXCJleHBvcnRzXCJdID0gSW1hZ2U7IiwiLypcblxuICAgdGhpcyBpbmRleC5qcyBmaWxlIGlzIHVzZWQgZm9yIGluY2x1ZGluZyB0aGUgZmFrZXIgbGlicmFyeSBhcyBhIENvbW1vbkpTIG1vZHVsZSwgaW5zdGVhZCBvZiBhIGJ1bmRsZVxuXG4gICB5b3UgY2FuIGluY2x1ZGUgdGhlIGZha2VyIGxpYnJhcnkgaW50byB5b3VyIGV4aXN0aW5nIG5vZGUuanMgYXBwbGljYXRpb24gYnkgcmVxdWlyaW5nIHRoZSBlbnRpcmUgL2Zha2VyIGRpcmVjdG9yeVxuXG4gICAgdmFyIGZha2VyID0gcmVxdWlyZSguL2Zha2VyKTtcbiAgICB2YXIgcmFuZG9tTmFtZSA9IGZha2VyLm5hbWUuZmluZE5hbWUoKTtcblxuICAgeW91IGNhbiBhbHNvIHNpbXBseSBpbmNsdWRlIHRoZSBcImZha2VyLmpzXCIgZmlsZSB3aGljaCBpcyB0aGUgYXV0by1nZW5lcmF0ZWQgYnVuZGxlZCB2ZXJzaW9uIG9mIHRoZSBmYWtlciBsaWJyYXJ5XG5cbiAgICB2YXIgZmFrZXIgPSByZXF1aXJlKC4vY3VzdG9tQXBwUGF0aC9mYWtlcik7XG4gICAgdmFyIHJhbmRvbU5hbWUgPSBmYWtlci5uYW1lLmZpbmROYW1lKCk7XG5cblxuICBpZiB5b3UgcGxhbiBvbiBtb2RpZnlpbmcgdGhlIGZha2VyIGxpYnJhcnkgeW91IHNob3VsZCBiZSBwZXJmb3JtaW5nIHlvdXIgY2hhbmdlcyBpbiB0aGUgL2xpYi8gZGlyZWN0b3J5XG5cbiovXG5cbi8qKlxuICpcbiAqIEBuYW1lc3BhY2UgZmFrZXJcbiAqL1xuZnVuY3Rpb24gRmFrZXIgKG9wdHMpIHtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgLy8gYXNzaWduIG9wdGlvbnNcbiAgdmFyIGxvY2FsZXMgPSBzZWxmLmxvY2FsZXMgfHwgb3B0cy5sb2NhbGVzIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gc2VsZi5sb2NhbGUgfHwgb3B0cy5sb2NhbGUgfHwgXCJlblwiO1xuICB2YXIgbG9jYWxlRmFsbGJhY2sgPSBzZWxmLmxvY2FsZUZhbGxiYWNrIHx8IG9wdHMubG9jYWxlRmFsbGJhY2sgfHwgXCJlblwiO1xuXG4gIHNlbGYubG9jYWxlcyA9IGxvY2FsZXM7XG4gIHNlbGYubG9jYWxlID0gbG9jYWxlO1xuICBzZWxmLmxvY2FsZUZhbGxiYWNrID0gbG9jYWxlRmFsbGJhY2s7XG5cbiAgc2VsZi5kZWZpbml0aW9ucyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGJpbmRBbGwob2JqKSB7XG4gICAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24obWV0aCkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygb2JqW21ldGhdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIG9ialttZXRoXSA9IG9ialttZXRoXS5iaW5kKG9iaik7XG4gICAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIEZha2UgPSByZXF1aXJlKCcuL2Zha2UnKTtcbiAgc2VsZi5mYWtlID0gbmV3IEZha2Uoc2VsZikuZmFrZTtcblxuICB2YXIgUmFuZG9tID0gcmVxdWlyZSgnLi9yYW5kb20nKTtcbiAgc2VsZi5yYW5kb20gPSBiaW5kQWxsKG5ldyBSYW5kb20oc2VsZikpO1xuXG4gIHZhciBIZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzJyk7XG4gIHNlbGYuaGVscGVycyA9IG5ldyBIZWxwZXJzKHNlbGYpO1xuXG4gIHZhciBOYW1lID0gcmVxdWlyZSgnLi9uYW1lJyk7XG4gIHNlbGYubmFtZSA9IGJpbmRBbGwobmV3IE5hbWUoc2VsZikpO1xuXG4gIHZhciBBZGRyZXNzID0gcmVxdWlyZSgnLi9hZGRyZXNzJyk7XG4gIHNlbGYuYWRkcmVzcyA9IGJpbmRBbGwobmV3IEFkZHJlc3Moc2VsZikpO1xuXG4gIHZhciBDb21wYW55ID0gcmVxdWlyZSgnLi9jb21wYW55Jyk7XG4gIHNlbGYuY29tcGFueSA9IGJpbmRBbGwobmV3IENvbXBhbnkoc2VsZikpO1xuXG4gIHZhciBGaW5hbmNlID0gcmVxdWlyZSgnLi9maW5hbmNlJyk7XG4gIHNlbGYuZmluYW5jZSA9IGJpbmRBbGwobmV3IEZpbmFuY2Uoc2VsZikpO1xuXG4gIHZhciBJbWFnZSA9IHJlcXVpcmUoJy4vaW1hZ2UnKTtcbiAgc2VsZi5pbWFnZSA9IGJpbmRBbGwobmV3IEltYWdlKHNlbGYpKTtcblxuICB2YXIgTG9yZW0gPSByZXF1aXJlKCcuL2xvcmVtJyk7XG4gIHNlbGYubG9yZW0gPSBiaW5kQWxsKG5ldyBMb3JlbShzZWxmKSk7XG5cbiAgdmFyIEhhY2tlciA9IHJlcXVpcmUoJy4vaGFja2VyJyk7XG4gIHNlbGYuaGFja2VyID0gYmluZEFsbChuZXcgSGFja2VyKHNlbGYpKTtcblxuICB2YXIgSW50ZXJuZXQgPSByZXF1aXJlKCcuL2ludGVybmV0Jyk7XG4gIHNlbGYuaW50ZXJuZXQgPSBiaW5kQWxsKG5ldyBJbnRlcm5ldChzZWxmKSk7XG5cbiAgdmFyIERhdGFiYXNlID0gcmVxdWlyZSgnLi9kYXRhYmFzZScpO1xuICBzZWxmLmRhdGFiYXNlID0gYmluZEFsbChuZXcgRGF0YWJhc2Uoc2VsZikpO1xuXG4gIHZhciBQaG9uZSA9IHJlcXVpcmUoJy4vcGhvbmVfbnVtYmVyJyk7XG4gIHNlbGYucGhvbmUgPSBiaW5kQWxsKG5ldyBQaG9uZShzZWxmKSk7XG5cbiAgdmFyIF9EYXRlID0gcmVxdWlyZSgnLi9kYXRlJyk7XG4gIHNlbGYuZGF0ZSA9IGJpbmRBbGwobmV3IF9EYXRlKHNlbGYpKTtcblxuICB2YXIgQ29tbWVyY2UgPSByZXF1aXJlKCcuL2NvbW1lcmNlJyk7XG4gIHNlbGYuY29tbWVyY2UgPSBiaW5kQWxsKG5ldyBDb21tZXJjZShzZWxmKSk7XG5cbiAgdmFyIFN5c3RlbSA9IHJlcXVpcmUoJy4vc3lzdGVtJyk7XG4gIHNlbGYuc3lzdGVtID0gYmluZEFsbChuZXcgU3lzdGVtKHNlbGYpKTtcblxuICB2YXIgX2RlZmluaXRpb25zID0ge1xuICAgIFwibmFtZVwiOiBbXCJmaXJzdF9uYW1lXCIsIFwibGFzdF9uYW1lXCIsIFwicHJlZml4XCIsIFwic3VmZml4XCIsIFwidGl0bGVcIiwgXCJtYWxlX2ZpcnN0X25hbWVcIiwgXCJmZW1hbGVfZmlyc3RfbmFtZVwiLCBcIm1hbGVfbWlkZGxlX25hbWVcIiwgXCJmZW1hbGVfbWlkZGxlX25hbWVcIiwgXCJtYWxlX2xhc3RfbmFtZVwiLCBcImZlbWFsZV9sYXN0X25hbWVcIl0sXG4gICAgXCJhZGRyZXNzXCI6IFtcImNpdHlfcHJlZml4XCIsIFwiY2l0eV9zdWZmaXhcIiwgXCJzdHJlZXRfc3VmZml4XCIsIFwiY291bnR5XCIsIFwiY291bnRyeVwiLCBcImNvdW50cnlfY29kZVwiLCBcInN0YXRlXCIsIFwic3RhdGVfYWJiclwiLCBcInN0cmVldF9wcmVmaXhcIiwgXCJwb3N0Y29kZVwiXSxcbiAgICBcImNvbXBhbnlcIjogW1wiYWRqZWN0aXZlXCIsIFwibm91blwiLCBcImRlc2NyaXB0b3JcIiwgXCJic19hZGplY3RpdmVcIiwgXCJic19ub3VuXCIsIFwiYnNfdmVyYlwiLCBcInN1ZmZpeFwiXSxcbiAgICBcImxvcmVtXCI6IFtcIndvcmRzXCJdLFxuICAgIFwiaGFja2VyXCI6IFtcImFiYnJldmlhdGlvblwiLCBcImFkamVjdGl2ZVwiLCBcIm5vdW5cIiwgXCJ2ZXJiXCIsIFwiaW5ndmVyYlwiXSxcbiAgICBcInBob25lX251bWJlclwiOiBbXCJmb3JtYXRzXCJdLFxuICAgIFwiZmluYW5jZVwiOiBbXCJhY2NvdW50X3R5cGVcIiwgXCJ0cmFuc2FjdGlvbl90eXBlXCIsIFwiY3VycmVuY3lcIiwgXCJpYmFuXCJdLFxuICAgIFwiaW50ZXJuZXRcIjogW1wiYXZhdGFyX3VyaVwiLCBcImRvbWFpbl9zdWZmaXhcIiwgXCJmcmVlX2VtYWlsXCIsIFwiZXhhbXBsZV9lbWFpbFwiLCBcInBhc3N3b3JkXCJdLFxuICAgIFwiY29tbWVyY2VcIjogW1wiY29sb3JcIiwgXCJkZXBhcnRtZW50XCIsIFwicHJvZHVjdF9uYW1lXCIsIFwicHJpY2VcIiwgXCJjYXRlZ29yaWVzXCJdLFxuICAgIFwiZGF0YWJhc2VcIjogW1wiY29sbGF0aW9uXCIsIFwiY29sdW1uXCIsIFwiZW5naW5lXCIsIFwidHlwZVwiXSxcbiAgICBcInN5c3RlbVwiOiBbXCJtaW1lVHlwZXNcIl0sXG4gICAgXCJkYXRlXCI6IFtcIm1vbnRoXCIsIFwid2Vla2RheVwiXSxcbiAgICBcInRpdGxlXCI6IFwiXCIsXG4gICAgXCJzZXBhcmF0b3JcIjogXCJcIlxuICB9O1xuXG4gIC8vIENyZWF0ZSBhIEdldHRlciBmb3IgYWxsIGRlZmluaXRpb25zLmZvby5iYXIgcHJvcGVydGllc1xuICBPYmplY3Qua2V5cyhfZGVmaW5pdGlvbnMpLmZvckVhY2goZnVuY3Rpb24oZCl7XG4gICAgaWYgKHR5cGVvZiBzZWxmLmRlZmluaXRpb25zW2RdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBzZWxmLmRlZmluaXRpb25zW2RdID0ge307XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBfZGVmaW5pdGlvbnNbZF0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgc2VsZi5kZWZpbml0aW9uc1tkXSA9IF9kZWZpbml0aW9uc1tkXTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBfZGVmaW5pdGlvbnNbZF0uZm9yRWFjaChmdW5jdGlvbihwKXtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLmRlZmluaXRpb25zW2RdLCBwLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZi5sb2NhbGVzW3NlbGYubG9jYWxlXVtkXSA9PT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2Ygc2VsZi5sb2NhbGVzW3NlbGYubG9jYWxlXVtkXVtwXSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgLy8gY2VydGFpbiBsb2NhbGl6YXRpb24gc2V0cyBjb250YWluIGxlc3MgZGF0YSB0aGVuIG90aGVycy5cbiAgICAgICAgICAgIC8vIGluIHRoZSBjYXNlIG9mIGEgbWlzc2luZyBkZWZpbml0aW9uLCB1c2UgdGhlIGRlZmF1bHQgbG9jYWxlRmFsbGJhY2sgdG8gc3Vic3RpdHV0ZSB0aGUgbWlzc2luZyBzZXQgZGF0YVxuICAgICAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIHByb3BlcnR5ICcgKyBkICsgcClcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmxvY2FsZXNbbG9jYWxlRmFsbGJhY2tdW2RdW3BdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyByZXR1cm4gbG9jYWxpemVkIGRhdGFcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmxvY2FsZXNbc2VsZi5sb2NhbGVdW2RdW3BdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG59O1xuXG5GYWtlci5wcm90b3R5cGUuc2VlZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBSYW5kb20gPSByZXF1aXJlKCcuL3JhbmRvbScpO1xuICB0aGlzLnNlZWRWYWx1ZSA9IHZhbHVlO1xuICB0aGlzLnJhbmRvbSA9IG5ldyBSYW5kb20odGhpcywgdGhpcy5zZWVkVmFsdWUpO1xufVxubW9kdWxlWydleHBvcnRzJ10gPSBGYWtlcjtcbiIsInZhciByYW5kb21fdWEgPSByZXF1aXJlKCcuLi92ZW5kb3IvdXNlci1hZ2VudCcpO1xuXG4vKipcbiAqXG4gKiBAbmFtZXNwYWNlIGZha2VyLmludGVybmV0XG4gKi9cbnZhciBJbnRlcm5ldCA9IGZ1bmN0aW9uIChmYWtlcikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIC8qKlxuICAgKiBhdmF0YXJcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5pbnRlcm5ldC5hdmF0YXJcbiAgICovXG4gIHNlbGYuYXZhdGFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoZmFrZXIuZGVmaW5pdGlvbnMuaW50ZXJuZXQuYXZhdGFyX3VyaSk7XG4gIH07XG5cbiAgc2VsZi5hdmF0YXIuc2NoZW1hID0ge1xuICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZW5lcmF0ZXMgYSBVUkwgZm9yIGFuIGF2YXRhci5cIixcbiAgICBcInNhbXBsZVJlc3VsdHNcIjogW1wiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9pZ29yZ2FyeWJhbGRpLzEyOC5qcGdcIl1cbiAgfTtcblxuICAvKipcbiAgICogZW1haWxcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5pbnRlcm5ldC5lbWFpbFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlyc3ROYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsYXN0TmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvdmlkZXJcbiAgICovXG4gIHNlbGYuZW1haWwgPSBmdW5jdGlvbiAoZmlyc3ROYW1lLCBsYXN0TmFtZSwgcHJvdmlkZXIpIHtcbiAgICAgIHByb3ZpZGVyID0gcHJvdmlkZXIgfHwgZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5pbnRlcm5ldC5mcmVlX2VtYWlsKTtcbiAgICAgIHJldHVybiAgZmFrZXIuaGVscGVycy5zbHVnaWZ5KGZha2VyLmludGVybmV0LnVzZXJOYW1lKGZpcnN0TmFtZSwgbGFzdE5hbWUpKSArIFwiQFwiICsgcHJvdmlkZXI7XG4gIH07XG5cbiAgc2VsZi5lbWFpbC5zY2hlbWEgPSB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkdlbmVyYXRlcyBhIHZhbGlkIGVtYWlsIGFkZHJlc3MgYmFzZWQgb24gb3B0aW9uYWwgaW5wdXQgY3JpdGVyaWFcIixcbiAgICBcInNhbXBsZVJlc3VsdHNcIjogW1wiZm9vLmJhckBnbWFpbC5jb21cIl0sXG4gICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgIFwiZmlyc3ROYW1lXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgIFwicmVxdWlyZWRcIjogZmFsc2UsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgZmlyc3QgbmFtZSBvZiB0aGUgdXNlclwiXG4gICAgICB9LFxuICAgICAgXCJsYXN0TmFtZVwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICBcInJlcXVpcmVkXCI6IGZhbHNlLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGxhc3QgbmFtZSBvZiB0aGUgdXNlclwiXG4gICAgICB9LFxuICAgICAgXCJwcm92aWRlclwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICBcInJlcXVpcmVkXCI6IGZhbHNlLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGRvbWFpbiBvZiB0aGUgdXNlclwiXG4gICAgICB9XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogZXhhbXBsZUVtYWlsXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuaW50ZXJuZXQuZXhhbXBsZUVtYWlsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaXJzdE5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxhc3ROYW1lXG4gICAqL1xuICBzZWxmLmV4YW1wbGVFbWFpbCA9IGZ1bmN0aW9uIChmaXJzdE5hbWUsIGxhc3ROYW1lKSB7XG4gICAgICB2YXIgcHJvdmlkZXIgPSBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmRlZmluaXRpb25zLmludGVybmV0LmV4YW1wbGVfZW1haWwpO1xuICAgICAgcmV0dXJuIHNlbGYuZW1haWwoZmlyc3ROYW1lLCBsYXN0TmFtZSwgcHJvdmlkZXIpO1xuICB9O1xuXG4gIC8qKlxuICAgKiB1c2VyTmFtZVxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmludGVybmV0LnVzZXJOYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaXJzdE5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxhc3ROYW1lXG4gICAqL1xuICBzZWxmLnVzZXJOYW1lID0gZnVuY3Rpb24gKGZpcnN0TmFtZSwgbGFzdE5hbWUpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBmaXJzdE5hbWUgPSBmaXJzdE5hbWUgfHwgZmFrZXIubmFtZS5maXJzdE5hbWUoKTtcbiAgICAgIGxhc3ROYW1lID0gbGFzdE5hbWUgfHwgZmFrZXIubmFtZS5sYXN0TmFtZSgpO1xuICAgICAgc3dpdGNoIChmYWtlci5yYW5kb20ubnVtYmVyKDIpKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgICAgcmVzdWx0ID0gZmlyc3ROYW1lICsgZmFrZXIucmFuZG9tLm51bWJlcig5OSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE6XG4gICAgICAgICAgcmVzdWx0ID0gZmlyc3ROYW1lICsgZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChbXCIuXCIsIFwiX1wiXSkgKyBsYXN0TmFtZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgICByZXN1bHQgPSBmaXJzdE5hbWUgKyBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KFtcIi5cIiwgXCJfXCJdKSArIGxhc3ROYW1lICsgZmFrZXIucmFuZG9tLm51bWJlcig5OSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSByZXN1bHQudG9TdHJpbmcoKS5yZXBsYWNlKC8nL2csIFwiXCIpO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoLyAvZywgXCJcIik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHNlbGYudXNlck5hbWUuc2NoZW1hID0ge1xuICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZW5lcmF0ZXMgYSB1c2VybmFtZSBiYXNlZCBvbiBvbmUgb2Ygc2V2ZXJhbCBwYXR0ZXJucy4gVGhlIHBhdHRlcm4gaXMgY2hvc2VuIHJhbmRvbWx5LlwiLFxuICAgIFwic2FtcGxlUmVzdWx0c1wiOiBbXG4gICAgICBcIktpcnN0aW4zOVwiLFxuICAgICAgXCJLaXJzdGluLlNtaXRoXCIsXG4gICAgICBcIktpcnN0aW4uU21pdGgzOVwiLFxuICAgICAgXCJLaXJzdGluU21pdGhcIixcbiAgICAgIFwiS2lyc3RpblNtaXRoMzlcIixcbiAgICBdLFxuICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICBcImZpcnN0TmFtZVwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICBcInJlcXVpcmVkXCI6IGZhbHNlLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGZpcnN0IG5hbWUgb2YgdGhlIHVzZXJcIlxuICAgICAgfSxcbiAgICAgIFwibGFzdE5hbWVcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgXCJyZXF1aXJlZFwiOiBmYWxzZSxcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBsYXN0IG5hbWUgb2YgdGhlIHVzZXJcIlxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogcHJvdG9jb2xcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5pbnRlcm5ldC5wcm90b2NvbFxuICAgKi9cbiAgc2VsZi5wcm90b2NvbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcm90b2NvbHMgPSBbJ2h0dHAnLCdodHRwcyddO1xuICAgICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQocHJvdG9jb2xzKTtcbiAgfTtcblxuICBzZWxmLnByb3RvY29sLnNjaGVtYSA9IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiUmFuZG9tbHkgZ2VuZXJhdGVzIGh0dHAgb3IgaHR0cHNcIixcbiAgICBcInNhbXBsZVJlc3VsdHNcIjogW1wiaHR0cHNcIiwgXCJodHRwXCJdXG4gIH07XG5cbiAgLyoqXG4gICAqIHVybFxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmludGVybmV0LnVybFxuICAgKi9cbiAgc2VsZi51cmwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFrZXIuaW50ZXJuZXQucHJvdG9jb2woKSArICc6Ly8nICsgZmFrZXIuaW50ZXJuZXQuZG9tYWluTmFtZSgpO1xuICB9O1xuXG4gIHNlbGYudXJsLnNjaGVtYSA9IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiR2VuZXJhdGVzIGEgcmFuZG9tIFVSTC4gVGhlIFVSTCBjb3VsZCBiZSBzZWN1cmUgb3IgaW5zZWN1cmUuXCIsXG4gICAgXCJzYW1wbGVSZXN1bHRzXCI6IFtcbiAgICAgIFwiaHR0cDovL3Jhc2hhd24ubmFtZVwiLFxuICAgICAgXCJodHRwczovL3Jhc2hhd24ubmFtZVwiXG4gICAgXVxuICB9O1xuXG4gIC8qKlxuICAgKiBkb21haW5OYW1lXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuaW50ZXJuZXQuZG9tYWluTmFtZVxuICAgKi9cbiAgc2VsZi5kb21haW5OYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZha2VyLmludGVybmV0LmRvbWFpbldvcmQoKSArIFwiLlwiICsgZmFrZXIuaW50ZXJuZXQuZG9tYWluU3VmZml4KCk7XG4gIH07XG5cbiAgc2VsZi5kb21haW5OYW1lLnNjaGVtYSA9IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiR2VuZXJhdGVzIGEgcmFuZG9tIGRvbWFpbiBuYW1lLlwiLFxuICAgIFwic2FtcGxlUmVzdWx0c1wiOiBbXCJtYXJ2aW4ub3JnXCJdXG4gIH07XG5cbiAgLyoqXG4gICAqIGRvbWFpblN1ZmZpeFxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmludGVybmV0LmRvbWFpblN1ZmZpeFxuICAgKi9cbiAgc2VsZi5kb21haW5TdWZmaXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5pbnRlcm5ldC5kb21haW5fc3VmZml4KTtcbiAgfTtcblxuICBzZWxmLmRvbWFpblN1ZmZpeC5zY2hlbWEgPSB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkdlbmVyYXRlcyBhIHJhbmRvbSBkb21haW4gc3VmZml4LlwiLFxuICAgIFwic2FtcGxlUmVzdWx0c1wiOiBbXCJuZXRcIl1cbiAgfTtcblxuICAvKipcbiAgICogZG9tYWluV29yZFxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmludGVybmV0LmRvbWFpbldvcmRcbiAgICovXG4gIHNlbGYuZG9tYWluV29yZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmYWtlci5uYW1lLmZpcnN0TmFtZSgpLnJlcGxhY2UoLyhbXFxcXH4jJip7fS86PD4/fFxcXCInXSkvaWcsICcnKS50b0xvd2VyQ2FzZSgpO1xuICB9O1xuXG4gIHNlbGYuZG9tYWluV29yZC5zY2hlbWEgPSB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkdlbmVyYXRlcyBhIHJhbmRvbSBkb21haW4gd29yZC5cIixcbiAgICBcInNhbXBsZVJlc3VsdHNcIjogW1wiYWx5Y2VcIl1cbiAgfTtcblxuICAvKipcbiAgICogaXBcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5pbnRlcm5ldC5pcFxuICAgKi9cbiAgc2VsZi5pcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByYW5kTnVtID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiAoZmFrZXIucmFuZG9tLm51bWJlcigyNTUpKS50b0ZpeGVkKDApO1xuICAgICAgfTtcblxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICByZXN1bHRbaV0gPSByYW5kTnVtKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQuam9pbihcIi5cIik7XG4gIH07XG5cbiAgc2VsZi5pcC5zY2hlbWEgPSB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkdlbmVyYXRlcyBhIHJhbmRvbSBJUC5cIixcbiAgICBcInNhbXBsZVJlc3VsdHNcIjogW1wiOTcuMjM4LjI0MS4xMVwiXVxuICB9O1xuXG4gIC8qKlxuICAgKiBpcHY2XG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuaW50ZXJuZXQuaXB2NlxuICAgKi9cbiAgc2VsZi5pcHY2ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJhbmRIYXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gKGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoW1wiMFwiLCBcIjFcIiwgXCIyXCIsIFwiM1wiLCBcIjRcIiwgXCI1XCIsIFwiNlwiLCBcIjdcIiwgXCI4XCIsIFwiOVwiLCBcImFcIiwgXCJiXCIsIFwiY1wiLCBcImRcIiwgXCJlXCIsIFwiZlwiXSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICB9O1xuXG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuICAgICAgICByZXN1bHRbaV0gPSByYW5kSGFzaCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKFwiOlwiKTtcbiAgfTtcblxuICBzZWxmLmlwdjYuc2NoZW1hID0ge1xuICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZW5lcmF0ZXMgYSByYW5kb20gSVB2NiBhZGRyZXNzLlwiLFxuICAgIFwic2FtcGxlUmVzdWx0c1wiOiBbXCIyMDAxOjBkYjg6NjI3NjpiMWE3OjUyMTM6MjJmMToyNWRmOmM4YTBcIl1cbiAgfTtcblxuICAvKipcbiAgICogdXNlckFnZW50XG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuaW50ZXJuZXQudXNlckFnZW50XG4gICAqL1xuICBzZWxmLnVzZXJBZ2VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmFuZG9tX3VhLmdlbmVyYXRlKCk7XG4gIH07XG5cbiAgc2VsZi51c2VyQWdlbnQuc2NoZW1hID0ge1xuICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZW5lcmF0ZXMgYSByYW5kb20gdXNlciBhZ2VudC5cIixcbiAgICBcInNhbXBsZVJlc3VsdHNcIjogW1wiTW96aWxsYS81LjAgKE1hY2ludG9zaDsgVTsgUFBDIE1hYyBPUyBYIDEwXzdfNSBydjo2LjA7IFNMKSBBcHBsZVdlYktpdC81MzIuMC4xIChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi83LjEuNiBTYWZhcmkvNTMyLjAuMVwiXVxuICB9O1xuXG4gIC8qKlxuICAgKiBjb2xvclxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmludGVybmV0LmNvbG9yXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiYXNlUmVkMjU1XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiYXNlR3JlZW4yNTVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGJhc2VCbHVlMjU1XG4gICAqL1xuICBzZWxmLmNvbG9yID0gZnVuY3Rpb24gKGJhc2VSZWQyNTUsIGJhc2VHcmVlbjI1NSwgYmFzZUJsdWUyNTUpIHtcbiAgICAgIGJhc2VSZWQyNTUgPSBiYXNlUmVkMjU1IHx8IDA7XG4gICAgICBiYXNlR3JlZW4yNTUgPSBiYXNlR3JlZW4yNTUgfHwgMDtcbiAgICAgIGJhc2VCbHVlMjU1ID0gYmFzZUJsdWUyNTUgfHwgMDtcbiAgICAgIC8vIGJhc2VkIG9uIGF3ZXNvbWUgcmVzcG9uc2UgOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQzMDQ0L2FsZ29yaXRobS10by1yYW5kb21seS1nZW5lcmF0ZS1hbi1hZXN0aGV0aWNhbGx5LXBsZWFzaW5nLWNvbG9yLXBhbGV0dGVcbiAgICAgIHZhciByZWQgPSBNYXRoLmZsb29yKChmYWtlci5yYW5kb20ubnVtYmVyKDI1NikgKyBiYXNlUmVkMjU1KSAvIDIpO1xuICAgICAgdmFyIGdyZWVuID0gTWF0aC5mbG9vcigoZmFrZXIucmFuZG9tLm51bWJlcigyNTYpICsgYmFzZUdyZWVuMjU1KSAvIDIpO1xuICAgICAgdmFyIGJsdWUgPSBNYXRoLmZsb29yKChmYWtlci5yYW5kb20ubnVtYmVyKDI1NikgKyBiYXNlQmx1ZTI1NSkgLyAyKTtcbiAgICAgIHZhciByZWRTdHIgPSByZWQudG9TdHJpbmcoMTYpO1xuICAgICAgdmFyIGdyZWVuU3RyID0gZ3JlZW4udG9TdHJpbmcoMTYpO1xuICAgICAgdmFyIGJsdWVTdHIgPSBibHVlLnRvU3RyaW5nKDE2KTtcbiAgICAgIHJldHVybiAnIycgK1xuICAgICAgICAocmVkU3RyLmxlbmd0aCA9PT0gMSA/ICcwJyA6ICcnKSArIHJlZFN0ciArXG4gICAgICAgIChncmVlblN0ci5sZW5ndGggPT09IDEgPyAnMCcgOiAnJykgKyBncmVlblN0ciArXG4gICAgICAgIChibHVlU3RyLmxlbmd0aCA9PT0gMSA/ICcwJzogJycpICsgYmx1ZVN0cjtcblxuICB9O1xuXG4gIHNlbGYuY29sb3Iuc2NoZW1hID0ge1xuICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZW5lcmF0ZXMgYSByYW5kb20gaGV4YWRlY2ltYWwgY29sb3IuXCIsXG4gICAgXCJzYW1wbGVSZXN1bHRzXCI6IFtcIiMwNjI2N2ZcIl0sXG4gICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgIFwiYmFzZVJlZDI1NVwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiLFxuICAgICAgICBcInJlcXVpcmVkXCI6IGZhbHNlLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHJlZCB2YWx1ZS4gVmFsaWQgdmFsdWVzIGFyZSAwIC0gMjU1LlwiXG4gICAgICB9LFxuICAgICAgXCJiYXNlR3JlZW4yNTVcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIixcbiAgICAgICAgXCJyZXF1aXJlZFwiOiBmYWxzZSxcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBncmVlbiB2YWx1ZS4gVmFsaWQgdmFsdWVzIGFyZSAwIC0gMjU1LlwiXG4gICAgICB9LFxuICAgICAgXCJiYXNlQmx1ZTI1NVwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiLFxuICAgICAgICBcInJlcXVpcmVkXCI6IGZhbHNlLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGJsdWUgdmFsdWUuIFZhbGlkIHZhbHVlcyBhcmUgMCAtIDI1NS5cIlxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogbWFjXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuaW50ZXJuZXQubWFjXG4gICAqL1xuICBzZWxmLm1hYyA9IGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgaSwgbWFjID0gXCJcIjtcbiAgICAgIGZvciAoaT0wOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgIG1hYys9IGZha2VyLnJhbmRvbS5udW1iZXIoMTUpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICBpZiAoaSUyPT0xICYmIGkgIT0gMTEpIHtcbiAgICAgICAgICAgICAgbWFjKz1cIjpcIjtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFjO1xuICB9O1xuXG4gIHNlbGYubWFjLnNjaGVtYSA9IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiR2VuZXJhdGVzIGEgcmFuZG9tIG1hYyBhZGRyZXNzLlwiLFxuICAgIFwic2FtcGxlUmVzdWx0c1wiOiBbXCI3ODowNjpjYzphZTpiMzo4MVwiXVxuICB9O1xuXG4gIC8qKlxuICAgKiBwYXNzd29yZFxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmludGVybmV0LnBhc3N3b3JkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5cbiAgICogQHBhcmFtIHtib29sZWFufSBtZW1vcmFibGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdHRlcm5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeFxuICAgKi9cbiAgIHNlbGYucGFzc3dvcmQgPSBmdW5jdGlvbiAobGVuLCBtZW1vcmFibGUsIHBhdHRlcm4sIHByZWZpeCkge1xuICAgICBsZW4gPSBsZW4gfHwgMTU7XG4gICAgIGlmICh0eXBlb2YgbWVtb3JhYmxlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgbWVtb3JhYmxlID0gZmFsc2U7XG4gICAgIH1cbiAgICAgLypcbiAgICAgICogcGFzc3dvcmQtZ2VuZXJhdG9yICggZnVuY3Rpb24gKVxuICAgICAgKiBDb3B5cmlnaHQoYykgMjAxMS0yMDEzIEJlcm1pIEZlcnJlciA8YmVybWlAYmVybWlsYWJzLmNvbT5cbiAgICAgICogTUlUIExpY2Vuc2VkXG4gICAgICAqL1xuICAgICB2YXIgY29uc29uYW50LCBsZXR0ZXIsIHBhc3N3b3JkLCB2b3dlbDtcbiAgICAgbGV0dGVyID0gL1thLXpBLVpdJC87XG4gICAgIHZvd2VsID0gL1thZWlvdUFFSU9VXSQvO1xuICAgICBjb25zb25hbnQgPSAvW2JjZGZnaGprbG1ucHFyc3R2d3h5ekJDREZHSEpLTE1OUFFSU1RWV1hZWl0kLztcbiAgICAgdmFyIF9wYXNzd29yZCA9IGZ1bmN0aW9uIChsZW5ndGgsIG1lbW9yYWJsZSwgcGF0dGVybiwgcHJlZml4KSB7XG4gICAgICAgdmFyIGNoYXIsIG47XG4gICAgICAgaWYgKGxlbmd0aCA9PSBudWxsKSB7XG4gICAgICAgICBsZW5ndGggPSAxMDtcbiAgICAgICB9XG4gICAgICAgaWYgKG1lbW9yYWJsZSA9PSBudWxsKSB7XG4gICAgICAgICBtZW1vcmFibGUgPSB0cnVlO1xuICAgICAgIH1cbiAgICAgICBpZiAocGF0dGVybiA9PSBudWxsKSB7XG4gICAgICAgICBwYXR0ZXJuID0gL1xcdy87XG4gICAgICAgfVxuICAgICAgIGlmIChwcmVmaXggPT0gbnVsbCkge1xuICAgICAgICAgcHJlZml4ID0gJyc7XG4gICAgICAgfVxuICAgICAgIGlmIChwcmVmaXgubGVuZ3RoID49IGxlbmd0aCkge1xuICAgICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICAgICB9XG4gICAgICAgaWYgKG1lbW9yYWJsZSkge1xuICAgICAgICAgaWYgKHByZWZpeC5tYXRjaChjb25zb25hbnQpKSB7XG4gICAgICAgICAgIHBhdHRlcm4gPSB2b3dlbDtcbiAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgIHBhdHRlcm4gPSBjb25zb25hbnQ7XG4gICAgICAgICB9XG4gICAgICAgfVxuICAgICAgIG4gPSBmYWtlci5yYW5kb20ubnVtYmVyKDk0KSArIDMzO1xuICAgICAgIGNoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKG4pO1xuICAgICAgIGlmIChtZW1vcmFibGUpIHtcbiAgICAgICAgIGNoYXIgPSBjaGFyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgfVxuICAgICAgIGlmICghY2hhci5tYXRjaChwYXR0ZXJuKSkge1xuICAgICAgICAgcmV0dXJuIF9wYXNzd29yZChsZW5ndGgsIG1lbW9yYWJsZSwgcGF0dGVybiwgcHJlZml4KTtcbiAgICAgICB9XG4gICAgICAgcmV0dXJuIF9wYXNzd29yZChsZW5ndGgsIG1lbW9yYWJsZSwgcGF0dGVybiwgXCJcIiArIHByZWZpeCArIGNoYXIpO1xuICAgICB9O1xuICAgICByZXR1cm4gX3Bhc3N3b3JkKGxlbiwgbWVtb3JhYmxlLCBwYXR0ZXJuLCBwcmVmaXgpO1xuICAgfVxuXG4gIHNlbGYucGFzc3dvcmQuc2NoZW1hID0ge1xuICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZW5lcmF0ZXMgYSByYW5kb20gcGFzc3dvcmQuXCIsXG4gICAgXCJzYW1wbGVSZXN1bHRzXCI6IFtcbiAgICAgIFwiQU03emw2TWdcIixcbiAgICAgIFwic3VzZWpvZmVcIlxuICAgIF0sXG4gICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgIFwibGVuZ3RoXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCIsXG4gICAgICAgIFwicmVxdWlyZWRcIjogZmFsc2UsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgaW4gdGhlIHBhc3N3b3JkLlwiXG4gICAgICB9LFxuICAgICAgXCJtZW1vcmFibGVcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgIFwicmVxdWlyZWRcIjogZmFsc2UsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGV0aGVyIGEgcGFzc3dvcmQgc2hvdWxkIGJlIGVhc3kgdG8gcmVtZW1iZXIuXCJcbiAgICAgIH0sXG4gICAgICBcInBhdHRlcm5cIjoge1xuICAgICAgICBcInR5cGVcIjogXCJyZWdleFwiLFxuICAgICAgICBcInJlcXVpcmVkXCI6IGZhbHNlLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSByZWdleCB0byBtYXRjaCBlYWNoIGNoYXJhY3RlciBvZiB0aGUgcGFzc3dvcmQgYWdhaW5zdC4gVGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSBuZWdhdGVkIGlmIHRoZSBtZW1vcmFibGUgc2V0dGluZyBpcyB0dXJuZWQgb24uXCJcbiAgICAgIH0sXG4gICAgICBcInByZWZpeFwiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICBcInJlcXVpcmVkXCI6IGZhbHNlLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSB2YWx1ZSB0byBwcmVwZW5kIHRvIHRoZSBnZW5lcmF0ZWQgcGFzc3dvcmQuIFRoZSBwcmVmaXggY291bnRzIHRvd2FyZHMgdGhlIGxlbmd0aCBvZiB0aGUgcGFzc3dvcmQuXCJcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbn07XG5cblxubW9kdWxlW1wiZXhwb3J0c1wiXSA9IEludGVybmV0O1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCIjIyMjI1wiLFxuICBcIiMjIyNcIixcbiAgXCIjIyNcIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiI3tjaXR5X3ByZWZpeH0gI3tOYW1lLmZpcnN0X25hbWV9I3tjaXR5X3N1ZmZpeH1cIixcbiAgXCIje2NpdHlfcHJlZml4fSAje05hbWUuZmlyc3RfbmFtZX1cIixcbiAgXCIje05hbWUuZmlyc3RfbmFtZX0je2NpdHlfc3VmZml4fVwiLFxuICBcIiN7TmFtZS5sYXN0X25hbWV9I3tjaXR5X3N1ZmZpeH1cIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiTm9ydGhcIixcbiAgXCJFYXN0XCIsXG4gIFwiV2VzdFwiLFxuICBcIlNvdXRoXCIsXG4gIFwiTmV3XCIsXG4gIFwiTGFrZVwiLFxuICBcIlBvcnRcIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwidG93blwiLFxuICBcInRvblwiLFxuICBcImxhbmRcIixcbiAgXCJ2aWxsZVwiLFxuICBcImJlcmdcIixcbiAgXCJidXJnaFwiLFxuICBcImJvcm91Z2hcIixcbiAgXCJidXJ5XCIsXG4gIFwidmlld1wiLFxuICBcInBvcnRcIixcbiAgXCJtb3V0aFwiLFxuICBcInN0YWRcIixcbiAgXCJmdXJ0XCIsXG4gIFwiY2hlc3RlclwiLFxuICBcIm1vdXRoXCIsXG4gIFwiZm9ydFwiLFxuICBcImhhdmVuXCIsXG4gIFwic2lkZVwiLFxuICBcInNoaXJlXCJcbl07XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcIkFmZ2hhbmlzdGFuXCIsXG4gIFwiQWxiYW5pYVwiLFxuICBcIkFsZ2VyaWFcIixcbiAgXCJBbWVyaWNhbiBTYW1vYVwiLFxuICBcIkFuZG9ycmFcIixcbiAgXCJBbmdvbGFcIixcbiAgXCJBbmd1aWxsYVwiLFxuICBcIkFudGFyY3RpY2EgKHRoZSB0ZXJyaXRvcnkgU291dGggb2YgNjAgZGVnIFMpXCIsXG4gIFwiQW50aWd1YSBhbmQgQmFyYnVkYVwiLFxuICBcIkFyZ2VudGluYVwiLFxuICBcIkFybWVuaWFcIixcbiAgXCJBcnViYVwiLFxuICBcIkF1c3RyYWxpYVwiLFxuICBcIkF1c3RyaWFcIixcbiAgXCJBemVyYmFpamFuXCIsXG4gIFwiQmFoYW1hc1wiLFxuICBcIkJhaHJhaW5cIixcbiAgXCJCYW5nbGFkZXNoXCIsXG4gIFwiQmFyYmFkb3NcIixcbiAgXCJCZWxhcnVzXCIsXG4gIFwiQmVsZ2l1bVwiLFxuICBcIkJlbGl6ZVwiLFxuICBcIkJlbmluXCIsXG4gIFwiQmVybXVkYVwiLFxuICBcIkJodXRhblwiLFxuICBcIkJvbGl2aWFcIixcbiAgXCJCb3NuaWEgYW5kIEhlcnplZ292aW5hXCIsXG4gIFwiQm90c3dhbmFcIixcbiAgXCJCb3V2ZXQgSXNsYW5kIChCb3V2ZXRveWEpXCIsXG4gIFwiQnJhemlsXCIsXG4gIFwiQnJpdGlzaCBJbmRpYW4gT2NlYW4gVGVycml0b3J5IChDaGFnb3MgQXJjaGlwZWxhZ28pXCIsXG4gIFwiQnJ1bmVpIERhcnVzc2FsYW1cIixcbiAgXCJCdWxnYXJpYVwiLFxuICBcIkJ1cmtpbmEgRmFzb1wiLFxuICBcIkJ1cnVuZGlcIixcbiAgXCJDYW1ib2RpYVwiLFxuICBcIkNhbWVyb29uXCIsXG4gIFwiQ2FuYWRhXCIsXG4gIFwiQ2FwZSBWZXJkZVwiLFxuICBcIkNheW1hbiBJc2xhbmRzXCIsXG4gIFwiQ2VudHJhbCBBZnJpY2FuIFJlcHVibGljXCIsXG4gIFwiQ2hhZFwiLFxuICBcIkNoaWxlXCIsXG4gIFwiQ2hpbmFcIixcbiAgXCJDaHJpc3RtYXMgSXNsYW5kXCIsXG4gIFwiQ29jb3MgKEtlZWxpbmcpIElzbGFuZHNcIixcbiAgXCJDb2xvbWJpYVwiLFxuICBcIkNvbW9yb3NcIixcbiAgXCJDb25nb1wiLFxuICBcIkNvb2sgSXNsYW5kc1wiLFxuICBcIkNvc3RhIFJpY2FcIixcbiAgXCJDb3RlIGQnSXZvaXJlXCIsXG4gIFwiQ3JvYXRpYVwiLFxuICBcIkN1YmFcIixcbiAgXCJDeXBydXNcIixcbiAgXCJDemVjaCBSZXB1YmxpY1wiLFxuICBcIkRlbm1hcmtcIixcbiAgXCJEamlib3V0aVwiLFxuICBcIkRvbWluaWNhXCIsXG4gIFwiRG9taW5pY2FuIFJlcHVibGljXCIsXG4gIFwiRWN1YWRvclwiLFxuICBcIkVneXB0XCIsXG4gIFwiRWwgU2FsdmFkb3JcIixcbiAgXCJFcXVhdG9yaWFsIEd1aW5lYVwiLFxuICBcIkVyaXRyZWFcIixcbiAgXCJFc3RvbmlhXCIsXG4gIFwiRXRoaW9waWFcIixcbiAgXCJGYXJvZSBJc2xhbmRzXCIsXG4gIFwiRmFsa2xhbmQgSXNsYW5kcyAoTWFsdmluYXMpXCIsXG4gIFwiRmlqaVwiLFxuICBcIkZpbmxhbmRcIixcbiAgXCJGcmFuY2VcIixcbiAgXCJGcmVuY2ggR3VpYW5hXCIsXG4gIFwiRnJlbmNoIFBvbHluZXNpYVwiLFxuICBcIkZyZW5jaCBTb3V0aGVybiBUZXJyaXRvcmllc1wiLFxuICBcIkdhYm9uXCIsXG4gIFwiR2FtYmlhXCIsXG4gIFwiR2VvcmdpYVwiLFxuICBcIkdlcm1hbnlcIixcbiAgXCJHaGFuYVwiLFxuICBcIkdpYnJhbHRhclwiLFxuICBcIkdyZWVjZVwiLFxuICBcIkdyZWVubGFuZFwiLFxuICBcIkdyZW5hZGFcIixcbiAgXCJHdWFkZWxvdXBlXCIsXG4gIFwiR3VhbVwiLFxuICBcIkd1YXRlbWFsYVwiLFxuICBcIkd1ZXJuc2V5XCIsXG4gIFwiR3VpbmVhXCIsXG4gIFwiR3VpbmVhLUJpc3NhdVwiLFxuICBcIkd1eWFuYVwiLFxuICBcIkhhaXRpXCIsXG4gIFwiSGVhcmQgSXNsYW5kIGFuZCBNY0RvbmFsZCBJc2xhbmRzXCIsXG4gIFwiSG9seSBTZWUgKFZhdGljYW4gQ2l0eSBTdGF0ZSlcIixcbiAgXCJIb25kdXJhc1wiLFxuICBcIkhvbmcgS29uZ1wiLFxuICBcIkh1bmdhcnlcIixcbiAgXCJJY2VsYW5kXCIsXG4gIFwiSW5kaWFcIixcbiAgXCJJbmRvbmVzaWFcIixcbiAgXCJJcmFuXCIsXG4gIFwiSXJhcVwiLFxuICBcIklyZWxhbmRcIixcbiAgXCJJc2xlIG9mIE1hblwiLFxuICBcIklzcmFlbFwiLFxuICBcIkl0YWx5XCIsXG4gIFwiSmFtYWljYVwiLFxuICBcIkphcGFuXCIsXG4gIFwiSmVyc2V5XCIsXG4gIFwiSm9yZGFuXCIsXG4gIFwiS2F6YWtoc3RhblwiLFxuICBcIktlbnlhXCIsXG4gIFwiS2lyaWJhdGlcIixcbiAgXCJEZW1vY3JhdGljIFBlb3BsZSdzIFJlcHVibGljIG9mIEtvcmVhXCIsXG4gIFwiUmVwdWJsaWMgb2YgS29yZWFcIixcbiAgXCJLdXdhaXRcIixcbiAgXCJLeXJneXogUmVwdWJsaWNcIixcbiAgXCJMYW8gUGVvcGxlJ3MgRGVtb2NyYXRpYyBSZXB1YmxpY1wiLFxuICBcIkxhdHZpYVwiLFxuICBcIkxlYmFub25cIixcbiAgXCJMZXNvdGhvXCIsXG4gIFwiTGliZXJpYVwiLFxuICBcIkxpYnlhbiBBcmFiIEphbWFoaXJpeWFcIixcbiAgXCJMaWVjaHRlbnN0ZWluXCIsXG4gIFwiTGl0aHVhbmlhXCIsXG4gIFwiTHV4ZW1ib3VyZ1wiLFxuICBcIk1hY2FvXCIsXG4gIFwiTWFjZWRvbmlhXCIsXG4gIFwiTWFkYWdhc2NhclwiLFxuICBcIk1hbGF3aVwiLFxuICBcIk1hbGF5c2lhXCIsXG4gIFwiTWFsZGl2ZXNcIixcbiAgXCJNYWxpXCIsXG4gIFwiTWFsdGFcIixcbiAgXCJNYXJzaGFsbCBJc2xhbmRzXCIsXG4gIFwiTWFydGluaXF1ZVwiLFxuICBcIk1hdXJpdGFuaWFcIixcbiAgXCJNYXVyaXRpdXNcIixcbiAgXCJNYXlvdHRlXCIsXG4gIFwiTWV4aWNvXCIsXG4gIFwiTWljcm9uZXNpYVwiLFxuICBcIk1vbGRvdmFcIixcbiAgXCJNb25hY29cIixcbiAgXCJNb25nb2xpYVwiLFxuICBcIk1vbnRlbmVncm9cIixcbiAgXCJNb250c2VycmF0XCIsXG4gIFwiTW9yb2Njb1wiLFxuICBcIk1vemFtYmlxdWVcIixcbiAgXCJNeWFubWFyXCIsXG4gIFwiTmFtaWJpYVwiLFxuICBcIk5hdXJ1XCIsXG4gIFwiTmVwYWxcIixcbiAgXCJOZXRoZXJsYW5kcyBBbnRpbGxlc1wiLFxuICBcIk5ldGhlcmxhbmRzXCIsXG4gIFwiTmV3IENhbGVkb25pYVwiLFxuICBcIk5ldyBaZWFsYW5kXCIsXG4gIFwiTmljYXJhZ3VhXCIsXG4gIFwiTmlnZXJcIixcbiAgXCJOaWdlcmlhXCIsXG4gIFwiTml1ZVwiLFxuICBcIk5vcmZvbGsgSXNsYW5kXCIsXG4gIFwiTm9ydGhlcm4gTWFyaWFuYSBJc2xhbmRzXCIsXG4gIFwiTm9yd2F5XCIsXG4gIFwiT21hblwiLFxuICBcIlBha2lzdGFuXCIsXG4gIFwiUGFsYXVcIixcbiAgXCJQYWxlc3RpbmlhbiBUZXJyaXRvcnlcIixcbiAgXCJQYW5hbWFcIixcbiAgXCJQYXB1YSBOZXcgR3VpbmVhXCIsXG4gIFwiUGFyYWd1YXlcIixcbiAgXCJQZXJ1XCIsXG4gIFwiUGhpbGlwcGluZXNcIixcbiAgXCJQaXRjYWlybiBJc2xhbmRzXCIsXG4gIFwiUG9sYW5kXCIsXG4gIFwiUG9ydHVnYWxcIixcbiAgXCJQdWVydG8gUmljb1wiLFxuICBcIlFhdGFyXCIsXG4gIFwiUmV1bmlvblwiLFxuICBcIlJvbWFuaWFcIixcbiAgXCJSdXNzaWFuIEZlZGVyYXRpb25cIixcbiAgXCJSd2FuZGFcIixcbiAgXCJTYWludCBCYXJ0aGVsZW15XCIsXG4gIFwiU2FpbnQgSGVsZW5hXCIsXG4gIFwiU2FpbnQgS2l0dHMgYW5kIE5ldmlzXCIsXG4gIFwiU2FpbnQgTHVjaWFcIixcbiAgXCJTYWludCBNYXJ0aW5cIixcbiAgXCJTYWludCBQaWVycmUgYW5kIE1pcXVlbG9uXCIsXG4gIFwiU2FpbnQgVmluY2VudCBhbmQgdGhlIEdyZW5hZGluZXNcIixcbiAgXCJTYW1vYVwiLFxuICBcIlNhbiBNYXJpbm9cIixcbiAgXCJTYW8gVG9tZSBhbmQgUHJpbmNpcGVcIixcbiAgXCJTYXVkaSBBcmFiaWFcIixcbiAgXCJTZW5lZ2FsXCIsXG4gIFwiU2VyYmlhXCIsXG4gIFwiU2V5Y2hlbGxlc1wiLFxuICBcIlNpZXJyYSBMZW9uZVwiLFxuICBcIlNpbmdhcG9yZVwiLFxuICBcIlNsb3Zha2lhIChTbG92YWsgUmVwdWJsaWMpXCIsXG4gIFwiU2xvdmVuaWFcIixcbiAgXCJTb2xvbW9uIElzbGFuZHNcIixcbiAgXCJTb21hbGlhXCIsXG4gIFwiU291dGggQWZyaWNhXCIsXG4gIFwiU291dGggR2VvcmdpYSBhbmQgdGhlIFNvdXRoIFNhbmR3aWNoIElzbGFuZHNcIixcbiAgXCJTcGFpblwiLFxuICBcIlNyaSBMYW5rYVwiLFxuICBcIlN1ZGFuXCIsXG4gIFwiU3VyaW5hbWVcIixcbiAgXCJTdmFsYmFyZCAmIEphbiBNYXllbiBJc2xhbmRzXCIsXG4gIFwiU3dhemlsYW5kXCIsXG4gIFwiU3dlZGVuXCIsXG4gIFwiU3dpdHplcmxhbmRcIixcbiAgXCJTeXJpYW4gQXJhYiBSZXB1YmxpY1wiLFxuICBcIlRhaXdhblwiLFxuICBcIlRhamlraXN0YW5cIixcbiAgXCJUYW56YW5pYVwiLFxuICBcIlRoYWlsYW5kXCIsXG4gIFwiVGltb3ItTGVzdGVcIixcbiAgXCJUb2dvXCIsXG4gIFwiVG9rZWxhdVwiLFxuICBcIlRvbmdhXCIsXG4gIFwiVHJpbmlkYWQgYW5kIFRvYmFnb1wiLFxuICBcIlR1bmlzaWFcIixcbiAgXCJUdXJrZXlcIixcbiAgXCJUdXJrbWVuaXN0YW5cIixcbiAgXCJUdXJrcyBhbmQgQ2FpY29zIElzbGFuZHNcIixcbiAgXCJUdXZhbHVcIixcbiAgXCJVZ2FuZGFcIixcbiAgXCJVa3JhaW5lXCIsXG4gIFwiVW5pdGVkIEFyYWIgRW1pcmF0ZXNcIixcbiAgXCJVbml0ZWQgS2luZ2RvbVwiLFxuICBcIlVuaXRlZCBTdGF0ZXMgb2YgQW1lcmljYVwiLFxuICBcIlVuaXRlZCBTdGF0ZXMgTWlub3IgT3V0bHlpbmcgSXNsYW5kc1wiLFxuICBcIlVydWd1YXlcIixcbiAgXCJVemJla2lzdGFuXCIsXG4gIFwiVmFudWF0dVwiLFxuICBcIlZlbmV6dWVsYVwiLFxuICBcIlZpZXRuYW1cIixcbiAgXCJWaXJnaW4gSXNsYW5kcywgQnJpdGlzaFwiLFxuICBcIlZpcmdpbiBJc2xhbmRzLCBVLlMuXCIsXG4gIFwiV2FsbGlzIGFuZCBGdXR1bmFcIixcbiAgXCJXZXN0ZXJuIFNhaGFyYVwiLFxuICBcIlllbWVuXCIsXG4gIFwiWmFtYmlhXCIsXG4gIFwiWmltYmFid2VcIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiQURcIixcbiAgXCJBRVwiLFxuICBcIkFGXCIsXG4gIFwiQUdcIixcbiAgXCJBSVwiLFxuICBcIkFMXCIsXG4gIFwiQU1cIixcbiAgXCJBT1wiLFxuICBcIkFRXCIsXG4gIFwiQVJcIixcbiAgXCJBU1wiLFxuICBcIkFUXCIsXG4gIFwiQVVcIixcbiAgXCJBV1wiLFxuICBcIkFYXCIsXG4gIFwiQVpcIixcbiAgXCJCQVwiLFxuICBcIkJCXCIsXG4gIFwiQkRcIixcbiAgXCJCRVwiLFxuICBcIkJGXCIsXG4gIFwiQkdcIixcbiAgXCJCSFwiLFxuICBcIkJJXCIsXG4gIFwiQkpcIixcbiAgXCJCTFwiLFxuICBcIkJNXCIsXG4gIFwiQk5cIixcbiAgXCJCT1wiLFxuICBcIkJRXCIsXG4gIFwiQlFcIixcbiAgXCJCUlwiLFxuICBcIkJTXCIsXG4gIFwiQlRcIixcbiAgXCJCVlwiLFxuICBcIkJXXCIsXG4gIFwiQllcIixcbiAgXCJCWlwiLFxuICBcIkNBXCIsXG4gIFwiQ0NcIixcbiAgXCJDRFwiLFxuICBcIkNGXCIsXG4gIFwiQ0dcIixcbiAgXCJDSFwiLFxuICBcIkNJXCIsXG4gIFwiQ0tcIixcbiAgXCJDTFwiLFxuICBcIkNNXCIsXG4gIFwiQ05cIixcbiAgXCJDT1wiLFxuICBcIkNSXCIsXG4gIFwiQ1VcIixcbiAgXCJDVlwiLFxuICBcIkNXXCIsXG4gIFwiQ1hcIixcbiAgXCJDWVwiLFxuICBcIkNaXCIsXG4gIFwiREVcIixcbiAgXCJESlwiLFxuICBcIkRLXCIsXG4gIFwiRE1cIixcbiAgXCJET1wiLFxuICBcIkRaXCIsXG4gIFwiRUNcIixcbiAgXCJFRVwiLFxuICBcIkVHXCIsXG4gIFwiRUhcIixcbiAgXCJFUlwiLFxuICBcIkVTXCIsXG4gIFwiRVRcIixcbiAgXCJGSVwiLFxuICBcIkZKXCIsXG4gIFwiRktcIixcbiAgXCJGTVwiLFxuICBcIkZPXCIsXG4gIFwiRlJcIixcbiAgXCJHQVwiLFxuICBcIkdCXCIsXG4gIFwiR0RcIixcbiAgXCJHRVwiLFxuICBcIkdGXCIsXG4gIFwiR0dcIixcbiAgXCJHSFwiLFxuICBcIkdJXCIsXG4gIFwiR0xcIixcbiAgXCJHTVwiLFxuICBcIkdOXCIsXG4gIFwiR1BcIixcbiAgXCJHUVwiLFxuICBcIkdSXCIsXG4gIFwiR1NcIixcbiAgXCJHVFwiLFxuICBcIkdVXCIsXG4gIFwiR1dcIixcbiAgXCJHWVwiLFxuICBcIkhLXCIsXG4gIFwiSE1cIixcbiAgXCJITlwiLFxuICBcIkhSXCIsXG4gIFwiSFRcIixcbiAgXCJIVVwiLFxuICBcIklEXCIsXG4gIFwiSUVcIixcbiAgXCJJTFwiLFxuICBcIklNXCIsXG4gIFwiSU5cIixcbiAgXCJJT1wiLFxuICBcIklRXCIsXG4gIFwiSVJcIixcbiAgXCJJU1wiLFxuICBcIklUXCIsXG4gIFwiSkVcIixcbiAgXCJKTVwiLFxuICBcIkpPXCIsXG4gIFwiSlBcIixcbiAgXCJLRVwiLFxuICBcIktHXCIsXG4gIFwiS0hcIixcbiAgXCJLSVwiLFxuICBcIktNXCIsXG4gIFwiS05cIixcbiAgXCJLUFwiLFxuICBcIktSXCIsXG4gIFwiS1dcIixcbiAgXCJLWVwiLFxuICBcIktaXCIsXG4gIFwiTEFcIixcbiAgXCJMQlwiLFxuICBcIkxDXCIsXG4gIFwiTElcIixcbiAgXCJMS1wiLFxuICBcIkxSXCIsXG4gIFwiTFNcIixcbiAgXCJMVFwiLFxuICBcIkxVXCIsXG4gIFwiTFZcIixcbiAgXCJMWVwiLFxuICBcIk1BXCIsXG4gIFwiTUNcIixcbiAgXCJNRFwiLFxuICBcIk1FXCIsXG4gIFwiTUZcIixcbiAgXCJNR1wiLFxuICBcIk1IXCIsXG4gIFwiTUtcIixcbiAgXCJNTFwiLFxuICBcIk1NXCIsXG4gIFwiTU5cIixcbiAgXCJNT1wiLFxuICBcIk1QXCIsXG4gIFwiTVFcIixcbiAgXCJNUlwiLFxuICBcIk1TXCIsXG4gIFwiTVRcIixcbiAgXCJNVVwiLFxuICBcIk1WXCIsXG4gIFwiTVdcIixcbiAgXCJNWFwiLFxuICBcIk1ZXCIsXG4gIFwiTVpcIixcbiAgXCJOQVwiLFxuICBcIk5DXCIsXG4gIFwiTkVcIixcbiAgXCJORlwiLFxuICBcIk5HXCIsXG4gIFwiTklcIixcbiAgXCJOTFwiLFxuICBcIk5PXCIsXG4gIFwiTlBcIixcbiAgXCJOUlwiLFxuICBcIk5VXCIsXG4gIFwiTlpcIixcbiAgXCJPTVwiLFxuICBcIlBBXCIsXG4gIFwiUEVcIixcbiAgXCJQRlwiLFxuICBcIlBHXCIsXG4gIFwiUEhcIixcbiAgXCJQS1wiLFxuICBcIlBMXCIsXG4gIFwiUE1cIixcbiAgXCJQTlwiLFxuICBcIlBSXCIsXG4gIFwiUFNcIixcbiAgXCJQVFwiLFxuICBcIlBXXCIsXG4gIFwiUFlcIixcbiAgXCJRQVwiLFxuICBcIlJFXCIsXG4gIFwiUk9cIixcbiAgXCJSU1wiLFxuICBcIlJVXCIsXG4gIFwiUldcIixcbiAgXCJTQVwiLFxuICBcIlNCXCIsXG4gIFwiU0NcIixcbiAgXCJTRFwiLFxuICBcIlNFXCIsXG4gIFwiU0dcIixcbiAgXCJTSFwiLFxuICBcIlNJXCIsXG4gIFwiU0pcIixcbiAgXCJTS1wiLFxuICBcIlNMXCIsXG4gIFwiU01cIixcbiAgXCJTTlwiLFxuICBcIlNPXCIsXG4gIFwiU1JcIixcbiAgXCJTU1wiLFxuICBcIlNUXCIsXG4gIFwiU1ZcIixcbiAgXCJTWFwiLFxuICBcIlNZXCIsXG4gIFwiU1pcIixcbiAgXCJUQ1wiLFxuICBcIlREXCIsXG4gIFwiVEZcIixcbiAgXCJUR1wiLFxuICBcIlRIXCIsXG4gIFwiVEpcIixcbiAgXCJUS1wiLFxuICBcIlRMXCIsXG4gIFwiVE1cIixcbiAgXCJUTlwiLFxuICBcIlRPXCIsXG4gIFwiVFJcIixcbiAgXCJUVFwiLFxuICBcIlRWXCIsXG4gIFwiVFdcIixcbiAgXCJUWlwiLFxuICBcIlVBXCIsXG4gIFwiVUdcIixcbiAgXCJVTVwiLFxuICBcIlVTXCIsXG4gIFwiVVlcIixcbiAgXCJVWlwiLFxuICBcIlZBXCIsXG4gIFwiVkNcIixcbiAgXCJWRVwiLFxuICBcIlZHXCIsXG4gIFwiVklcIixcbiAgXCJWTlwiLFxuICBcIlZVXCIsXG4gIFwiV0ZcIixcbiAgXCJXU1wiLFxuICBcIllFXCIsXG4gIFwiWVRcIixcbiAgXCJaQVwiLFxuICBcIlpNXCIsXG4gIFwiWldcIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiQXZvblwiLFxuICBcIkJlZGZvcmRzaGlyZVwiLFxuICBcIkJlcmtzaGlyZVwiLFxuICBcIkJvcmRlcnNcIixcbiAgXCJCdWNraW5naGFtc2hpcmVcIixcbiAgXCJDYW1icmlkZ2VzaGlyZVwiXG5dO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCJVbml0ZWQgU3RhdGVzIG9mIEFtZXJpY2FcIlxuXTtcbiIsInZhciBhZGRyZXNzID0ge307XG5tb2R1bGVbJ2V4cG9ydHMnXSA9IGFkZHJlc3M7XG5hZGRyZXNzLmNpdHlfcHJlZml4ID0gcmVxdWlyZShcIi4vY2l0eV9wcmVmaXhcIik7XG5hZGRyZXNzLmNpdHlfc3VmZml4ID0gcmVxdWlyZShcIi4vY2l0eV9zdWZmaXhcIik7XG5hZGRyZXNzLmNvdW50eSA9IHJlcXVpcmUoXCIuL2NvdW50eVwiKTtcbmFkZHJlc3MuY291bnRyeSA9IHJlcXVpcmUoXCIuL2NvdW50cnlcIik7XG5hZGRyZXNzLmNvdW50cnlfY29kZSA9IHJlcXVpcmUoXCIuL2NvdW50cnlfY29kZVwiKTtcbmFkZHJlc3MuYnVpbGRpbmdfbnVtYmVyID0gcmVxdWlyZShcIi4vYnVpbGRpbmdfbnVtYmVyXCIpO1xuYWRkcmVzcy5zdHJlZXRfc3VmZml4ID0gcmVxdWlyZShcIi4vc3RyZWV0X3N1ZmZpeFwiKTtcbmFkZHJlc3Muc2Vjb25kYXJ5X2FkZHJlc3MgPSByZXF1aXJlKFwiLi9zZWNvbmRhcnlfYWRkcmVzc1wiKTtcbmFkZHJlc3MucG9zdGNvZGUgPSByZXF1aXJlKFwiLi9wb3N0Y29kZVwiKTtcbmFkZHJlc3MucG9zdGNvZGVfYnlfc3RhdGUgPSByZXF1aXJlKFwiLi9wb3N0Y29kZV9ieV9zdGF0ZVwiKTtcbmFkZHJlc3Muc3RhdGUgPSByZXF1aXJlKFwiLi9zdGF0ZVwiKTtcbmFkZHJlc3Muc3RhdGVfYWJiciA9IHJlcXVpcmUoXCIuL3N0YXRlX2FiYnJcIik7XG5hZGRyZXNzLnRpbWVfem9uZSA9IHJlcXVpcmUoXCIuL3RpbWVfem9uZVwiKTtcbmFkZHJlc3MuY2l0eSA9IHJlcXVpcmUoXCIuL2NpdHlcIik7XG5hZGRyZXNzLnN0cmVldF9uYW1lID0gcmVxdWlyZShcIi4vc3RyZWV0X25hbWVcIik7XG5hZGRyZXNzLnN0cmVldF9hZGRyZXNzID0gcmVxdWlyZShcIi4vc3RyZWV0X2FkZHJlc3NcIik7XG5hZGRyZXNzLmRlZmF1bHRfY291bnRyeSA9IHJlcXVpcmUoXCIuL2RlZmF1bHRfY291bnRyeVwiKTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiIyMjIyNcIixcbiAgXCIjIyMjIy0jIyMjXCJcbl07XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcIiMjIyMjXCIsXG4gIFwiIyMjIyMtIyMjI1wiXG5dO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCJBcHQuICMjI1wiLFxuICBcIlN1aXRlICMjI1wiXG5dO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCJBbGFiYW1hXCIsXG4gIFwiQWxhc2thXCIsXG4gIFwiQXJpem9uYVwiLFxuICBcIkFya2Fuc2FzXCIsXG4gIFwiQ2FsaWZvcm5pYVwiLFxuICBcIkNvbG9yYWRvXCIsXG4gIFwiQ29ubmVjdGljdXRcIixcbiAgXCJEZWxhd2FyZVwiLFxuICBcIkZsb3JpZGFcIixcbiAgXCJHZW9yZ2lhXCIsXG4gIFwiSGF3YWlpXCIsXG4gIFwiSWRhaG9cIixcbiAgXCJJbGxpbm9pc1wiLFxuICBcIkluZGlhbmFcIixcbiAgXCJJb3dhXCIsXG4gIFwiS2Fuc2FzXCIsXG4gIFwiS2VudHVja3lcIixcbiAgXCJMb3Vpc2lhbmFcIixcbiAgXCJNYWluZVwiLFxuICBcIk1hcnlsYW5kXCIsXG4gIFwiTWFzc2FjaHVzZXR0c1wiLFxuICBcIk1pY2hpZ2FuXCIsXG4gIFwiTWlubmVzb3RhXCIsXG4gIFwiTWlzc2lzc2lwcGlcIixcbiAgXCJNaXNzb3VyaVwiLFxuICBcIk1vbnRhbmFcIixcbiAgXCJOZWJyYXNrYVwiLFxuICBcIk5ldmFkYVwiLFxuICBcIk5ldyBIYW1wc2hpcmVcIixcbiAgXCJOZXcgSmVyc2V5XCIsXG4gIFwiTmV3IE1leGljb1wiLFxuICBcIk5ldyBZb3JrXCIsXG4gIFwiTm9ydGggQ2Fyb2xpbmFcIixcbiAgXCJOb3J0aCBEYWtvdGFcIixcbiAgXCJPaGlvXCIsXG4gIFwiT2tsYWhvbWFcIixcbiAgXCJPcmVnb25cIixcbiAgXCJQZW5uc3lsdmFuaWFcIixcbiAgXCJSaG9kZSBJc2xhbmRcIixcbiAgXCJTb3V0aCBDYXJvbGluYVwiLFxuICBcIlNvdXRoIERha290YVwiLFxuICBcIlRlbm5lc3NlZVwiLFxuICBcIlRleGFzXCIsXG4gIFwiVXRhaFwiLFxuICBcIlZlcm1vbnRcIixcbiAgXCJWaXJnaW5pYVwiLFxuICBcIldhc2hpbmd0b25cIixcbiAgXCJXZXN0IFZpcmdpbmlhXCIsXG4gIFwiV2lzY29uc2luXCIsXG4gIFwiV3lvbWluZ1wiXG5dO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCJBTFwiLFxuICBcIkFLXCIsXG4gIFwiQVpcIixcbiAgXCJBUlwiLFxuICBcIkNBXCIsXG4gIFwiQ09cIixcbiAgXCJDVFwiLFxuICBcIkRFXCIsXG4gIFwiRkxcIixcbiAgXCJHQVwiLFxuICBcIkhJXCIsXG4gIFwiSURcIixcbiAgXCJJTFwiLFxuICBcIklOXCIsXG4gIFwiSUFcIixcbiAgXCJLU1wiLFxuICBcIktZXCIsXG4gIFwiTEFcIixcbiAgXCJNRVwiLFxuICBcIk1EXCIsXG4gIFwiTUFcIixcbiAgXCJNSVwiLFxuICBcIk1OXCIsXG4gIFwiTVNcIixcbiAgXCJNT1wiLFxuICBcIk1UXCIsXG4gIFwiTkVcIixcbiAgXCJOVlwiLFxuICBcIk5IXCIsXG4gIFwiTkpcIixcbiAgXCJOTVwiLFxuICBcIk5ZXCIsXG4gIFwiTkNcIixcbiAgXCJORFwiLFxuICBcIk9IXCIsXG4gIFwiT0tcIixcbiAgXCJPUlwiLFxuICBcIlBBXCIsXG4gIFwiUklcIixcbiAgXCJTQ1wiLFxuICBcIlNEXCIsXG4gIFwiVE5cIixcbiAgXCJUWFwiLFxuICBcIlVUXCIsXG4gIFwiVlRcIixcbiAgXCJWQVwiLFxuICBcIldBXCIsXG4gIFwiV1ZcIixcbiAgXCJXSVwiLFxuICBcIldZXCJcbl07XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcIiN7YnVpbGRpbmdfbnVtYmVyfSAje3N0cmVldF9uYW1lfVwiXG5dO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCIje05hbWUuZmlyc3RfbmFtZX0gI3tzdHJlZXRfc3VmZml4fVwiLFxuICBcIiN7TmFtZS5sYXN0X25hbWV9ICN7c3RyZWV0X3N1ZmZpeH1cIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiQWxsZXlcIixcbiAgXCJBdmVudWVcIixcbiAgXCJCcmFuY2hcIixcbiAgXCJCcmlkZ2VcIixcbiAgXCJCcm9va1wiLFxuICBcIkJyb29rc1wiLFxuICBcIkJ1cmdcIixcbiAgXCJCdXJnc1wiLFxuICBcIkJ5cGFzc1wiLFxuICBcIkNhbXBcIixcbiAgXCJDYW55b25cIixcbiAgXCJDYXBlXCIsXG4gIFwiQ2F1c2V3YXlcIixcbiAgXCJDZW50ZXJcIixcbiAgXCJDZW50ZXJzXCIsXG4gIFwiQ2lyY2xlXCIsXG4gIFwiQ2lyY2xlc1wiLFxuICBcIkNsaWZmXCIsXG4gIFwiQ2xpZmZzXCIsXG4gIFwiQ2x1YlwiLFxuICBcIkNvbW1vblwiLFxuICBcIkNvcm5lclwiLFxuICBcIkNvcm5lcnNcIixcbiAgXCJDb3Vyc2VcIixcbiAgXCJDb3VydFwiLFxuICBcIkNvdXJ0c1wiLFxuICBcIkNvdmVcIixcbiAgXCJDb3Zlc1wiLFxuICBcIkNyZWVrXCIsXG4gIFwiQ3Jlc2NlbnRcIixcbiAgXCJDcmVzdFwiLFxuICBcIkNyb3NzaW5nXCIsXG4gIFwiQ3Jvc3Nyb2FkXCIsXG4gIFwiQ3VydmVcIixcbiAgXCJEYWxlXCIsXG4gIFwiRGFtXCIsXG4gIFwiRGl2aWRlXCIsXG4gIFwiRHJpdmVcIixcbiAgXCJEcml2ZVwiLFxuICBcIkRyaXZlc1wiLFxuICBcIkVzdGF0ZVwiLFxuICBcIkVzdGF0ZXNcIixcbiAgXCJFeHByZXNzd2F5XCIsXG4gIFwiRXh0ZW5zaW9uXCIsXG4gIFwiRXh0ZW5zaW9uc1wiLFxuICBcIkZhbGxcIixcbiAgXCJGYWxsc1wiLFxuICBcIkZlcnJ5XCIsXG4gIFwiRmllbGRcIixcbiAgXCJGaWVsZHNcIixcbiAgXCJGbGF0XCIsXG4gIFwiRmxhdHNcIixcbiAgXCJGb3JkXCIsXG4gIFwiRm9yZHNcIixcbiAgXCJGb3Jlc3RcIixcbiAgXCJGb3JnZVwiLFxuICBcIkZvcmdlc1wiLFxuICBcIkZvcmtcIixcbiAgXCJGb3Jrc1wiLFxuICBcIkZvcnRcIixcbiAgXCJGcmVld2F5XCIsXG4gIFwiR2FyZGVuXCIsXG4gIFwiR2FyZGVuc1wiLFxuICBcIkdhdGV3YXlcIixcbiAgXCJHbGVuXCIsXG4gIFwiR2xlbnNcIixcbiAgXCJHcmVlblwiLFxuICBcIkdyZWVuc1wiLFxuICBcIkdyb3ZlXCIsXG4gIFwiR3JvdmVzXCIsXG4gIFwiSGFyYm9yXCIsXG4gIFwiSGFyYm9yc1wiLFxuICBcIkhhdmVuXCIsXG4gIFwiSGVpZ2h0c1wiLFxuICBcIkhpZ2h3YXlcIixcbiAgXCJIaWxsXCIsXG4gIFwiSGlsbHNcIixcbiAgXCJIb2xsb3dcIixcbiAgXCJJbmxldFwiLFxuICBcIklubGV0XCIsXG4gIFwiSXNsYW5kXCIsXG4gIFwiSXNsYW5kXCIsXG4gIFwiSXNsYW5kc1wiLFxuICBcIklzbGFuZHNcIixcbiAgXCJJc2xlXCIsXG4gIFwiSXNsZVwiLFxuICBcIkp1bmN0aW9uXCIsXG4gIFwiSnVuY3Rpb25zXCIsXG4gIFwiS2V5XCIsXG4gIFwiS2V5c1wiLFxuICBcIktub2xsXCIsXG4gIFwiS25vbGxzXCIsXG4gIFwiTGFrZVwiLFxuICBcIkxha2VzXCIsXG4gIFwiTGFuZFwiLFxuICBcIkxhbmRpbmdcIixcbiAgXCJMYW5lXCIsXG4gIFwiTGlnaHRcIixcbiAgXCJMaWdodHNcIixcbiAgXCJMb2FmXCIsXG4gIFwiTG9ja1wiLFxuICBcIkxvY2tzXCIsXG4gIFwiTG9ja3NcIixcbiAgXCJMb2RnZVwiLFxuICBcIkxvZGdlXCIsXG4gIFwiTG9vcFwiLFxuICBcIk1hbGxcIixcbiAgXCJNYW5vclwiLFxuICBcIk1hbm9yc1wiLFxuICBcIk1lYWRvd1wiLFxuICBcIk1lYWRvd3NcIixcbiAgXCJNZXdzXCIsXG4gIFwiTWlsbFwiLFxuICBcIk1pbGxzXCIsXG4gIFwiTWlzc2lvblwiLFxuICBcIk1pc3Npb25cIixcbiAgXCJNb3RvcndheVwiLFxuICBcIk1vdW50XCIsXG4gIFwiTW91bnRhaW5cIixcbiAgXCJNb3VudGFpblwiLFxuICBcIk1vdW50YWluc1wiLFxuICBcIk1vdW50YWluc1wiLFxuICBcIk5lY2tcIixcbiAgXCJPcmNoYXJkXCIsXG4gIFwiT3ZhbFwiLFxuICBcIk92ZXJwYXNzXCIsXG4gIFwiUGFya1wiLFxuICBcIlBhcmtzXCIsXG4gIFwiUGFya3dheVwiLFxuICBcIlBhcmt3YXlzXCIsXG4gIFwiUGFzc1wiLFxuICBcIlBhc3NhZ2VcIixcbiAgXCJQYXRoXCIsXG4gIFwiUGlrZVwiLFxuICBcIlBpbmVcIixcbiAgXCJQaW5lc1wiLFxuICBcIlBsYWNlXCIsXG4gIFwiUGxhaW5cIixcbiAgXCJQbGFpbnNcIixcbiAgXCJQbGFpbnNcIixcbiAgXCJQbGF6YVwiLFxuICBcIlBsYXphXCIsXG4gIFwiUG9pbnRcIixcbiAgXCJQb2ludHNcIixcbiAgXCJQb3J0XCIsXG4gIFwiUG9ydFwiLFxuICBcIlBvcnRzXCIsXG4gIFwiUG9ydHNcIixcbiAgXCJQcmFpcmllXCIsXG4gIFwiUHJhaXJpZVwiLFxuICBcIlJhZGlhbFwiLFxuICBcIlJhbXBcIixcbiAgXCJSYW5jaFwiLFxuICBcIlJhcGlkXCIsXG4gIFwiUmFwaWRzXCIsXG4gIFwiUmVzdFwiLFxuICBcIlJpZGdlXCIsXG4gIFwiUmlkZ2VzXCIsXG4gIFwiUml2ZXJcIixcbiAgXCJSb2FkXCIsXG4gIFwiUm9hZFwiLFxuICBcIlJvYWRzXCIsXG4gIFwiUm9hZHNcIixcbiAgXCJSb3V0ZVwiLFxuICBcIlJvd1wiLFxuICBcIlJ1ZVwiLFxuICBcIlJ1blwiLFxuICBcIlNob2FsXCIsXG4gIFwiU2hvYWxzXCIsXG4gIFwiU2hvcmVcIixcbiAgXCJTaG9yZXNcIixcbiAgXCJTa3l3YXlcIixcbiAgXCJTcHJpbmdcIixcbiAgXCJTcHJpbmdzXCIsXG4gIFwiU3ByaW5nc1wiLFxuICBcIlNwdXJcIixcbiAgXCJTcHVyc1wiLFxuICBcIlNxdWFyZVwiLFxuICBcIlNxdWFyZVwiLFxuICBcIlNxdWFyZXNcIixcbiAgXCJTcXVhcmVzXCIsXG4gIFwiU3RhdGlvblwiLFxuICBcIlN0YXRpb25cIixcbiAgXCJTdHJhdmVudWVcIixcbiAgXCJTdHJhdmVudWVcIixcbiAgXCJTdHJlYW1cIixcbiAgXCJTdHJlYW1cIixcbiAgXCJTdHJlZXRcIixcbiAgXCJTdHJlZXRcIixcbiAgXCJTdHJlZXRzXCIsXG4gIFwiU3VtbWl0XCIsXG4gIFwiU3VtbWl0XCIsXG4gIFwiVGVycmFjZVwiLFxuICBcIlRocm91Z2h3YXlcIixcbiAgXCJUcmFjZVwiLFxuICBcIlRyYWNrXCIsXG4gIFwiVHJhZmZpY3dheVwiLFxuICBcIlRyYWlsXCIsXG4gIFwiVHJhaWxcIixcbiAgXCJUdW5uZWxcIixcbiAgXCJUdW5uZWxcIixcbiAgXCJUdXJucGlrZVwiLFxuICBcIlR1cm5waWtlXCIsXG4gIFwiVW5kZXJwYXNzXCIsXG4gIFwiVW5pb25cIixcbiAgXCJVbmlvbnNcIixcbiAgXCJWYWxsZXlcIixcbiAgXCJWYWxsZXlzXCIsXG4gIFwiVmlhXCIsXG4gIFwiVmlhZHVjdFwiLFxuICBcIlZpZXdcIixcbiAgXCJWaWV3c1wiLFxuICBcIlZpbGxhZ2VcIixcbiAgXCJWaWxsYWdlXCIsXG4gIFwiVmlsbGFnZXNcIixcbiAgXCJWaWxsZVwiLFxuICBcIlZpc3RhXCIsXG4gIFwiVmlzdGFcIixcbiAgXCJXYWxrXCIsXG4gIFwiV2Fsa3NcIixcbiAgXCJXYWxsXCIsXG4gIFwiV2F5XCIsXG4gIFwiV2F5c1wiLFxuICBcIldlbGxcIixcbiAgXCJXZWxsc1wiXG5dO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCJQYWNpZmljL01pZHdheVwiLFxuICBcIlBhY2lmaWMvUGFnb19QYWdvXCIsXG4gIFwiUGFjaWZpYy9Ib25vbHVsdVwiLFxuICBcIkFtZXJpY2EvSnVuZWF1XCIsXG4gIFwiQW1lcmljYS9Mb3NfQW5nZWxlc1wiLFxuICBcIkFtZXJpY2EvVGlqdWFuYVwiLFxuICBcIkFtZXJpY2EvRGVudmVyXCIsXG4gIFwiQW1lcmljYS9QaG9lbml4XCIsXG4gIFwiQW1lcmljYS9DaGlodWFodWFcIixcbiAgXCJBbWVyaWNhL01hemF0bGFuXCIsXG4gIFwiQW1lcmljYS9DaGljYWdvXCIsXG4gIFwiQW1lcmljYS9SZWdpbmFcIixcbiAgXCJBbWVyaWNhL01leGljb19DaXR5XCIsXG4gIFwiQW1lcmljYS9NZXhpY29fQ2l0eVwiLFxuICBcIkFtZXJpY2EvTW9udGVycmV5XCIsXG4gIFwiQW1lcmljYS9HdWF0ZW1hbGFcIixcbiAgXCJBbWVyaWNhL05ld19Zb3JrXCIsXG4gIFwiQW1lcmljYS9JbmRpYW5hL0luZGlhbmFwb2xpc1wiLFxuICBcIkFtZXJpY2EvQm9nb3RhXCIsXG4gIFwiQW1lcmljYS9MaW1hXCIsXG4gIFwiQW1lcmljYS9MaW1hXCIsXG4gIFwiQW1lcmljYS9IYWxpZmF4XCIsXG4gIFwiQW1lcmljYS9DYXJhY2FzXCIsXG4gIFwiQW1lcmljYS9MYV9QYXpcIixcbiAgXCJBbWVyaWNhL1NhbnRpYWdvXCIsXG4gIFwiQW1lcmljYS9TdF9Kb2huc1wiLFxuICBcIkFtZXJpY2EvU2FvX1BhdWxvXCIsXG4gIFwiQW1lcmljYS9BcmdlbnRpbmEvQnVlbm9zX0FpcmVzXCIsXG4gIFwiQW1lcmljYS9HdXlhbmFcIixcbiAgXCJBbWVyaWNhL0dvZHRoYWJcIixcbiAgXCJBdGxhbnRpYy9Tb3V0aF9HZW9yZ2lhXCIsXG4gIFwiQXRsYW50aWMvQXpvcmVzXCIsXG4gIFwiQXRsYW50aWMvQ2FwZV9WZXJkZVwiLFxuICBcIkV1cm9wZS9EdWJsaW5cIixcbiAgXCJFdXJvcGUvTG9uZG9uXCIsXG4gIFwiRXVyb3BlL0xpc2JvblwiLFxuICBcIkV1cm9wZS9Mb25kb25cIixcbiAgXCJBZnJpY2EvQ2FzYWJsYW5jYVwiLFxuICBcIkFmcmljYS9Nb25yb3ZpYVwiLFxuICBcIkV0Yy9VVENcIixcbiAgXCJFdXJvcGUvQmVsZ3JhZGVcIixcbiAgXCJFdXJvcGUvQnJhdGlzbGF2YVwiLFxuICBcIkV1cm9wZS9CdWRhcGVzdFwiLFxuICBcIkV1cm9wZS9ManVibGphbmFcIixcbiAgXCJFdXJvcGUvUHJhZ3VlXCIsXG4gIFwiRXVyb3BlL1NhcmFqZXZvXCIsXG4gIFwiRXVyb3BlL1Nrb3BqZVwiLFxuICBcIkV1cm9wZS9XYXJzYXdcIixcbiAgXCJFdXJvcGUvWmFncmViXCIsXG4gIFwiRXVyb3BlL0JydXNzZWxzXCIsXG4gIFwiRXVyb3BlL0NvcGVuaGFnZW5cIixcbiAgXCJFdXJvcGUvTWFkcmlkXCIsXG4gIFwiRXVyb3BlL1BhcmlzXCIsXG4gIFwiRXVyb3BlL0Ftc3RlcmRhbVwiLFxuICBcIkV1cm9wZS9CZXJsaW5cIixcbiAgXCJFdXJvcGUvQmVybGluXCIsXG4gIFwiRXVyb3BlL1JvbWVcIixcbiAgXCJFdXJvcGUvU3RvY2tob2xtXCIsXG4gIFwiRXVyb3BlL1ZpZW5uYVwiLFxuICBcIkFmcmljYS9BbGdpZXJzXCIsXG4gIFwiRXVyb3BlL0J1Y2hhcmVzdFwiLFxuICBcIkFmcmljYS9DYWlyb1wiLFxuICBcIkV1cm9wZS9IZWxzaW5raVwiLFxuICBcIkV1cm9wZS9LaWV2XCIsXG4gIFwiRXVyb3BlL1JpZ2FcIixcbiAgXCJFdXJvcGUvU29maWFcIixcbiAgXCJFdXJvcGUvVGFsbGlublwiLFxuICBcIkV1cm9wZS9WaWxuaXVzXCIsXG4gIFwiRXVyb3BlL0F0aGVuc1wiLFxuICBcIkV1cm9wZS9Jc3RhbmJ1bFwiLFxuICBcIkV1cm9wZS9NaW5za1wiLFxuICBcIkFzaWEvSmVydXNhbGVtXCIsXG4gIFwiQWZyaWNhL0hhcmFyZVwiLFxuICBcIkFmcmljYS9Kb2hhbm5lc2J1cmdcIixcbiAgXCJFdXJvcGUvTW9zY293XCIsXG4gIFwiRXVyb3BlL01vc2Nvd1wiLFxuICBcIkV1cm9wZS9Nb3Njb3dcIixcbiAgXCJBc2lhL0t1d2FpdFwiLFxuICBcIkFzaWEvUml5YWRoXCIsXG4gIFwiQWZyaWNhL05haXJvYmlcIixcbiAgXCJBc2lhL0JhZ2hkYWRcIixcbiAgXCJBc2lhL1RlaHJhblwiLFxuICBcIkFzaWEvTXVzY2F0XCIsXG4gIFwiQXNpYS9NdXNjYXRcIixcbiAgXCJBc2lhL0Jha3VcIixcbiAgXCJBc2lhL1RiaWxpc2lcIixcbiAgXCJBc2lhL1llcmV2YW5cIixcbiAgXCJBc2lhL0thYnVsXCIsXG4gIFwiQXNpYS9ZZWthdGVyaW5idXJnXCIsXG4gIFwiQXNpYS9LYXJhY2hpXCIsXG4gIFwiQXNpYS9LYXJhY2hpXCIsXG4gIFwiQXNpYS9UYXNoa2VudFwiLFxuICBcIkFzaWEvS29sa2F0YVwiLFxuICBcIkFzaWEvS29sa2F0YVwiLFxuICBcIkFzaWEvS29sa2F0YVwiLFxuICBcIkFzaWEvS29sa2F0YVwiLFxuICBcIkFzaWEvS2F0aG1hbmR1XCIsXG4gIFwiQXNpYS9EaGFrYVwiLFxuICBcIkFzaWEvRGhha2FcIixcbiAgXCJBc2lhL0NvbG9tYm9cIixcbiAgXCJBc2lhL0FsbWF0eVwiLFxuICBcIkFzaWEvTm92b3NpYmlyc2tcIixcbiAgXCJBc2lhL1Jhbmdvb25cIixcbiAgXCJBc2lhL0Jhbmdrb2tcIixcbiAgXCJBc2lhL0Jhbmdrb2tcIixcbiAgXCJBc2lhL0pha2FydGFcIixcbiAgXCJBc2lhL0tyYXNub3lhcnNrXCIsXG4gIFwiQXNpYS9TaGFuZ2hhaVwiLFxuICBcIkFzaWEvQ2hvbmdxaW5nXCIsXG4gIFwiQXNpYS9Ib25nX0tvbmdcIixcbiAgXCJBc2lhL1VydW1xaVwiLFxuICBcIkFzaWEvS3VhbGFfTHVtcHVyXCIsXG4gIFwiQXNpYS9TaW5nYXBvcmVcIixcbiAgXCJBc2lhL1RhaXBlaVwiLFxuICBcIkF1c3RyYWxpYS9QZXJ0aFwiLFxuICBcIkFzaWEvSXJrdXRza1wiLFxuICBcIkFzaWEvVWxhYW5iYWF0YXJcIixcbiAgXCJBc2lhL1Nlb3VsXCIsXG4gIFwiQXNpYS9Ub2t5b1wiLFxuICBcIkFzaWEvVG9reW9cIixcbiAgXCJBc2lhL1Rva3lvXCIsXG4gIFwiQXNpYS9ZYWt1dHNrXCIsXG4gIFwiQXVzdHJhbGlhL0RhcndpblwiLFxuICBcIkF1c3RyYWxpYS9BZGVsYWlkZVwiLFxuICBcIkF1c3RyYWxpYS9NZWxib3VybmVcIixcbiAgXCJBdXN0cmFsaWEvTWVsYm91cm5lXCIsXG4gIFwiQXVzdHJhbGlhL1N5ZG5leVwiLFxuICBcIkF1c3RyYWxpYS9CcmlzYmFuZVwiLFxuICBcIkF1c3RyYWxpYS9Ib2JhcnRcIixcbiAgXCJBc2lhL1ZsYWRpdm9zdG9rXCIsXG4gIFwiUGFjaWZpYy9HdWFtXCIsXG4gIFwiUGFjaWZpYy9Qb3J0X01vcmVzYnlcIixcbiAgXCJBc2lhL01hZ2FkYW5cIixcbiAgXCJBc2lhL01hZ2FkYW5cIixcbiAgXCJQYWNpZmljL05vdW1lYVwiLFxuICBcIlBhY2lmaWMvRmlqaVwiLFxuICBcIkFzaWEvS2FtY2hhdGthXCIsXG4gIFwiUGFjaWZpYy9NYWp1cm9cIixcbiAgXCJQYWNpZmljL0F1Y2tsYW5kXCIsXG4gIFwiUGFjaWZpYy9BdWNrbGFuZFwiLFxuICBcIlBhY2lmaWMvVG9uZ2F0YXB1XCIsXG4gIFwiUGFjaWZpYy9GYWthb2ZvXCIsXG4gIFwiUGFjaWZpYy9BcGlhXCJcbl07XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcIiN7TmFtZS5uYW1lfVwiLFxuICBcIiN7Q29tcGFueS5uYW1lfVwiXG5dO1xuIiwidmFyIGFwcCA9IHt9O1xubW9kdWxlWydleHBvcnRzJ10gPSBhcHA7XG5hcHAubmFtZSA9IHJlcXVpcmUoXCIuL25hbWVcIik7XG5hcHAudmVyc2lvbiA9IHJlcXVpcmUoXCIuL3ZlcnNpb25cIik7XG5hcHAuYXV0aG9yID0gcmVxdWlyZShcIi4vYXV0aG9yXCIpO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCJSZWRob2xkXCIsXG4gIFwiVHJlZWZsZXhcIixcbiAgXCJUcmlwcGxlZGV4XCIsXG4gIFwiS2FubGFtXCIsXG4gIFwiQmlndGF4XCIsXG4gIFwiRGFsdGZyZXNoXCIsXG4gIFwiVG91Z2hqb3lmYXhcIixcbiAgXCJNYXQgTGFtIFRhbVwiLFxuICBcIk90Y29tXCIsXG4gIFwiVHJlcy1aYXBcIixcbiAgXCJZLVNvbG93YXJtXCIsXG4gIFwiVHJlc29tXCIsXG4gIFwiVm9sdHNpbGxhbVwiLFxuICBcIkJpb2RleFwiLFxuICBcIkdyZWVubGFtXCIsXG4gIFwiVml2YVwiLFxuICBcIk1hdHNvZnRcIixcbiAgXCJUZW1wXCIsXG4gIFwiWm9vbGFiXCIsXG4gIFwiU3ViaW5cIixcbiAgXCJSYW5rXCIsXG4gIFwiSm9iXCIsXG4gIFwiU3RyaW5ndG91Z2hcIixcbiAgXCJUaW5cIixcbiAgXCJJdFwiLFxuICBcIkhvbWUgSW5nXCIsXG4gIFwiWmFtaXRcIixcbiAgXCJTb25zaW5nXCIsXG4gIFwiS29ua2xhYlwiLFxuICBcIkFscGhhXCIsXG4gIFwiTGF0bHV4XCIsXG4gIFwiVm95YXRvdWNoXCIsXG4gIFwiQWxwaGF6YXBcIixcbiAgXCJIb2xkbGFtaXNcIixcbiAgXCJaYWFtLURveFwiLFxuICBcIlN1Yi1FeFwiLFxuICBcIlF1byBMdXhcIixcbiAgXCJCYW1pdHlcIixcbiAgXCJWZW50b3NhbnphcFwiLFxuICBcIkxvdHN0cmluZ1wiLFxuICBcIkhhdGl0eVwiLFxuICBcIlRlbXBzb2Z0XCIsXG4gIFwiT3ZlcmhvbGRcIixcbiAgXCJGaXhmbGV4XCIsXG4gIFwiS29ua2x1eFwiLFxuICBcIlpvbnRyYXhcIixcbiAgXCJUYW1wZmxleFwiLFxuICBcIlNwYW5cIixcbiAgXCJOYW1maXhcIixcbiAgXCJUcmFuc2NvZlwiLFxuICBcIlN0aW1cIixcbiAgXCJGaXggU2FuXCIsXG4gIFwiU29uYWlyXCIsXG4gIFwiU3Ryb25naG9sZFwiLFxuICBcIkZpbnRvbmVcIixcbiAgXCJZLWZpbmRcIixcbiAgXCJPcGVsYVwiLFxuICBcIkxvdGx1eFwiLFxuICBcIlJvbnN0cmluZ1wiLFxuICBcIlphdGhpblwiLFxuICBcIkR1b2JhbVwiLFxuICBcIktleWxleFwiXG5dO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCIwLiMuI1wiLFxuICBcIjAuIyNcIixcbiAgXCIjLiMjXCIsXG4gIFwiIy4jXCIsXG4gIFwiIy4jLiNcIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiMjAxMS0xMC0xMlwiLFxuICBcIjIwMTItMTEtMTJcIixcbiAgXCIyMDE1LTExLTExXCIsXG4gIFwiMjAxMy05LTEyXCJcbl07XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcIjEyMzQtMjEyMS0xMjIxLTEyMTFcIixcbiAgXCIxMjEyLTEyMjEtMTEyMS0xMjM0XCIsXG4gIFwiMTIxMS0xMjIxLTEyMzQtMjIwMVwiLFxuICBcIjEyMjgtMTIyMS0xMjIxLTE0MzFcIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwidmlzYVwiLFxuICBcIm1hc3RlcmNhcmRcIixcbiAgXCJhbWVyaWNhbmV4cHJlc3NcIixcbiAgXCJkaXNjb3ZlclwiXG5dO1xuIiwidmFyIGJ1c2luZXNzID0ge307XG5tb2R1bGVbJ2V4cG9ydHMnXSA9IGJ1c2luZXNzO1xuYnVzaW5lc3MuY3JlZGl0X2NhcmRfbnVtYmVycyA9IHJlcXVpcmUoXCIuL2NyZWRpdF9jYXJkX251bWJlcnNcIik7XG5idXNpbmVzcy5jcmVkaXRfY2FyZF9leHBpcnlfZGF0ZXMgPSByZXF1aXJlKFwiLi9jcmVkaXRfY2FyZF9leHBpcnlfZGF0ZXNcIik7XG5idXNpbmVzcy5jcmVkaXRfY2FyZF90eXBlcyA9IHJlcXVpcmUoXCIuL2NyZWRpdF9jYXJkX3R5cGVzXCIpO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCIjIyMtIyMjLSMjIyNcIixcbiAgXCIoIyMjKSAjIyMtIyMjI1wiLFxuICBcIjEtIyMjLSMjIy0jIyMjXCIsXG4gIFwiIyMjLiMjIy4jIyMjXCJcbl07XG4iLCJ2YXIgY2VsbF9waG9uZSA9IHt9O1xubW9kdWxlWydleHBvcnRzJ10gPSBjZWxsX3Bob25lO1xuY2VsbF9waG9uZS5mb3JtYXRzID0gcmVxdWlyZShcIi4vZm9ybWF0c1wiKTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwicmVkXCIsXG4gIFwiZ3JlZW5cIixcbiAgXCJibHVlXCIsXG4gIFwieWVsbG93XCIsXG4gIFwicHVycGxlXCIsXG4gIFwibWludCBncmVlblwiLFxuICBcInRlYWxcIixcbiAgXCJ3aGl0ZVwiLFxuICBcImJsYWNrXCIsXG4gIFwib3JhbmdlXCIsXG4gIFwicGlua1wiLFxuICBcImdyZXlcIixcbiAgXCJtYXJvb25cIixcbiAgXCJ2aW9sZXRcIixcbiAgXCJ0dXJxdW9pc2VcIixcbiAgXCJ0YW5cIixcbiAgXCJza3kgYmx1ZVwiLFxuICBcInNhbG1vblwiLFxuICBcInBsdW1cIixcbiAgXCJvcmNoaWRcIixcbiAgXCJvbGl2ZVwiLFxuICBcIm1hZ2VudGFcIixcbiAgXCJsaW1lXCIsXG4gIFwiaXZvcnlcIixcbiAgXCJpbmRpZ29cIixcbiAgXCJnb2xkXCIsXG4gIFwiZnVjaHNpYVwiLFxuICBcImN5YW5cIixcbiAgXCJhenVyZVwiLFxuICBcImxhdmVuZGVyXCIsXG4gIFwic2lsdmVyXCJcbl07XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcIkJvb2tzXCIsXG4gIFwiTW92aWVzXCIsXG4gIFwiTXVzaWNcIixcbiAgXCJHYW1lc1wiLFxuICBcIkVsZWN0cm9uaWNzXCIsXG4gIFwiQ29tcHV0ZXJzXCIsXG4gIFwiSG9tZVwiLFxuICBcIkdhcmRlblwiLFxuICBcIlRvb2xzXCIsXG4gIFwiR3JvY2VyeVwiLFxuICBcIkhlYWx0aFwiLFxuICBcIkJlYXV0eVwiLFxuICBcIlRveXNcIixcbiAgXCJLaWRzXCIsXG4gIFwiQmFieVwiLFxuICBcIkNsb3RoaW5nXCIsXG4gIFwiU2hvZXNcIixcbiAgXCJKZXdlbGVyeVwiLFxuICBcIlNwb3J0c1wiLFxuICBcIk91dGRvb3JzXCIsXG4gIFwiQXV0b21vdGl2ZVwiLFxuICBcIkluZHVzdHJpYWxcIlxuXTtcbiIsInZhciBjb21tZXJjZSA9IHt9O1xubW9kdWxlWydleHBvcnRzJ10gPSBjb21tZXJjZTtcbmNvbW1lcmNlLmNvbG9yID0gcmVxdWlyZShcIi4vY29sb3JcIik7XG5jb21tZXJjZS5kZXBhcnRtZW50ID0gcmVxdWlyZShcIi4vZGVwYXJ0bWVudFwiKTtcbmNvbW1lcmNlLnByb2R1Y3RfbmFtZSA9IHJlcXVpcmUoXCIuL3Byb2R1Y3RfbmFtZVwiKTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSB7XG4gIFwiYWRqZWN0aXZlXCI6IFtcbiAgICBcIlNtYWxsXCIsXG4gICAgXCJFcmdvbm9taWNcIixcbiAgICBcIlJ1c3RpY1wiLFxuICAgIFwiSW50ZWxsaWdlbnRcIixcbiAgICBcIkdvcmdlb3VzXCIsXG4gICAgXCJJbmNyZWRpYmxlXCIsXG4gICAgXCJGYW50YXN0aWNcIixcbiAgICBcIlByYWN0aWNhbFwiLFxuICAgIFwiU2xlZWtcIixcbiAgICBcIkF3ZXNvbWVcIixcbiAgICBcIkdlbmVyaWNcIixcbiAgICBcIkhhbmRjcmFmdGVkXCIsXG4gICAgXCJIYW5kbWFkZVwiLFxuICAgIFwiTGljZW5zZWRcIixcbiAgICBcIlJlZmluZWRcIixcbiAgICBcIlVuYnJhbmRlZFwiLFxuICAgIFwiVGFzdHlcIlxuICBdLFxuICBcIm1hdGVyaWFsXCI6IFtcbiAgICBcIlN0ZWVsXCIsXG4gICAgXCJXb29kZW5cIixcbiAgICBcIkNvbmNyZXRlXCIsXG4gICAgXCJQbGFzdGljXCIsXG4gICAgXCJDb3R0b25cIixcbiAgICBcIkdyYW5pdGVcIixcbiAgICBcIlJ1YmJlclwiLFxuICAgIFwiTWV0YWxcIixcbiAgICBcIlNvZnRcIixcbiAgICBcIkZyZXNoXCIsXG4gICAgXCJGcm96ZW5cIlxuICBdLFxuICBcInByb2R1Y3RcIjogW1xuICAgIFwiQ2hhaXJcIixcbiAgICBcIkNhclwiLFxuICAgIFwiQ29tcHV0ZXJcIixcbiAgICBcIktleWJvYXJkXCIsXG4gICAgXCJNb3VzZVwiLFxuICAgIFwiQmlrZVwiLFxuICAgIFwiQmFsbFwiLFxuICAgIFwiR2xvdmVzXCIsXG4gICAgXCJQYW50c1wiLFxuICAgIFwiU2hpcnRcIixcbiAgICBcIlRhYmxlXCIsXG4gICAgXCJTaG9lc1wiLFxuICAgIFwiSGF0XCIsXG4gICAgXCJUb3dlbHNcIixcbiAgICBcIlNvYXBcIixcbiAgICBcIlR1bmFcIixcbiAgICBcIkNoaWNrZW5cIixcbiAgICBcIkZpc2hcIixcbiAgICBcIkNoZWVzZVwiLFxuICAgIFwiQmFjb25cIixcbiAgICBcIlBpenphXCIsXG4gICAgXCJTYWxhZFwiLFxuICAgIFwiU2F1c2FnZXNcIixcbiAgICBcIkNoaXBzXCJcbiAgXVxufTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiQWRhcHRpdmVcIixcbiAgXCJBZHZhbmNlZFwiLFxuICBcIkFtZWxpb3JhdGVkXCIsXG4gIFwiQXNzaW1pbGF0ZWRcIixcbiAgXCJBdXRvbWF0ZWRcIixcbiAgXCJCYWxhbmNlZFwiLFxuICBcIkJ1c2luZXNzLWZvY3VzZWRcIixcbiAgXCJDZW50cmFsaXplZFwiLFxuICBcIkNsb25lZFwiLFxuICBcIkNvbXBhdGlibGVcIixcbiAgXCJDb25maWd1cmFibGVcIixcbiAgXCJDcm9zcy1ncm91cFwiLFxuICBcIkNyb3NzLXBsYXRmb3JtXCIsXG4gIFwiQ3VzdG9tZXItZm9jdXNlZFwiLFxuICBcIkN1c3RvbWl6YWJsZVwiLFxuICBcIkRlY2VudHJhbGl6ZWRcIixcbiAgXCJEZS1lbmdpbmVlcmVkXCIsXG4gIFwiRGV2b2x2ZWRcIixcbiAgXCJEaWdpdGl6ZWRcIixcbiAgXCJEaXN0cmlidXRlZFwiLFxuICBcIkRpdmVyc2VcIixcbiAgXCJEb3duLXNpemVkXCIsXG4gIFwiRW5oYW5jZWRcIixcbiAgXCJFbnRlcnByaXNlLXdpZGVcIixcbiAgXCJFcmdvbm9taWNcIixcbiAgXCJFeGNsdXNpdmVcIixcbiAgXCJFeHBhbmRlZFwiLFxuICBcIkV4dGVuZGVkXCIsXG4gIFwiRmFjZSB0byBmYWNlXCIsXG4gIFwiRm9jdXNlZFwiLFxuICBcIkZyb250LWxpbmVcIixcbiAgXCJGdWxseS1jb25maWd1cmFibGVcIixcbiAgXCJGdW5jdGlvbi1iYXNlZFwiLFxuICBcIkZ1bmRhbWVudGFsXCIsXG4gIFwiRnV0dXJlLXByb29mZWRcIixcbiAgXCJHcmFzcy1yb290c1wiLFxuICBcIkhvcml6b250YWxcIixcbiAgXCJJbXBsZW1lbnRlZFwiLFxuICBcIklubm92YXRpdmVcIixcbiAgXCJJbnRlZ3JhdGVkXCIsXG4gIFwiSW50dWl0aXZlXCIsXG4gIFwiSW52ZXJzZVwiLFxuICBcIk1hbmFnZWRcIixcbiAgXCJNYW5kYXRvcnlcIixcbiAgXCJNb25pdG9yZWRcIixcbiAgXCJNdWx0aS1jaGFubmVsbGVkXCIsXG4gIFwiTXVsdGktbGF0ZXJhbFwiLFxuICBcIk11bHRpLWxheWVyZWRcIixcbiAgXCJNdWx0aS10aWVyZWRcIixcbiAgXCJOZXR3b3JrZWRcIixcbiAgXCJPYmplY3QtYmFzZWRcIixcbiAgXCJPcGVuLWFyY2hpdGVjdGVkXCIsXG4gIFwiT3Blbi1zb3VyY2VcIixcbiAgXCJPcGVyYXRpdmVcIixcbiAgXCJPcHRpbWl6ZWRcIixcbiAgXCJPcHRpb25hbFwiLFxuICBcIk9yZ2FuaWNcIixcbiAgXCJPcmdhbml6ZWRcIixcbiAgXCJQZXJzZXZlcmluZ1wiLFxuICBcIlBlcnNpc3RlbnRcIixcbiAgXCJQaGFzZWRcIixcbiAgXCJQb2xhcmlzZWRcIixcbiAgXCJQcmUtZW1wdGl2ZVwiLFxuICBcIlByb2FjdGl2ZVwiLFxuICBcIlByb2ZpdC1mb2N1c2VkXCIsXG4gIFwiUHJvZm91bmRcIixcbiAgXCJQcm9ncmFtbWFibGVcIixcbiAgXCJQcm9ncmVzc2l2ZVwiLFxuICBcIlB1YmxpYy1rZXlcIixcbiAgXCJRdWFsaXR5LWZvY3VzZWRcIixcbiAgXCJSZWFjdGl2ZVwiLFxuICBcIlJlYWxpZ25lZFwiLFxuICBcIlJlLWNvbnRleHR1YWxpemVkXCIsXG4gIFwiUmUtZW5naW5lZXJlZFwiLFxuICBcIlJlZHVjZWRcIixcbiAgXCJSZXZlcnNlLWVuZ2luZWVyZWRcIixcbiAgXCJSaWdodC1zaXplZFwiLFxuICBcIlJvYnVzdFwiLFxuICBcIlNlYW1sZXNzXCIsXG4gIFwiU2VjdXJlZFwiLFxuICBcIlNlbGYtZW5hYmxpbmdcIixcbiAgXCJTaGFyYWJsZVwiLFxuICBcIlN0YW5kLWFsb25lXCIsXG4gIFwiU3RyZWFtbGluZWRcIixcbiAgXCJTd2l0Y2hhYmxlXCIsXG4gIFwiU3luY2hyb25pc2VkXCIsXG4gIFwiU3luZXJnaXN0aWNcIixcbiAgXCJTeW5lcmdpemVkXCIsXG4gIFwiVGVhbS1vcmllbnRlZFwiLFxuICBcIlRvdGFsXCIsXG4gIFwiVHJpcGxlLWJ1ZmZlcmVkXCIsXG4gIFwiVW5pdmVyc2FsXCIsXG4gIFwiVXAtc2l6ZWRcIixcbiAgXCJVcGdyYWRhYmxlXCIsXG4gIFwiVXNlci1jZW50cmljXCIsXG4gIFwiVXNlci1mcmllbmRseVwiLFxuICBcIlZlcnNhdGlsZVwiLFxuICBcIlZpcnR1YWxcIixcbiAgXCJWaXNpb25hcnlcIixcbiAgXCJWaXNpb24tb3JpZW50ZWRcIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiY2xpY2tzLWFuZC1tb3J0YXJcIixcbiAgXCJ2YWx1ZS1hZGRlZFwiLFxuICBcInZlcnRpY2FsXCIsXG4gIFwicHJvYWN0aXZlXCIsXG4gIFwicm9idXN0XCIsXG4gIFwicmV2b2x1dGlvbmFyeVwiLFxuICBcInNjYWxhYmxlXCIsXG4gIFwibGVhZGluZy1lZGdlXCIsXG4gIFwiaW5ub3ZhdGl2ZVwiLFxuICBcImludHVpdGl2ZVwiLFxuICBcInN0cmF0ZWdpY1wiLFxuICBcImUtYnVzaW5lc3NcIixcbiAgXCJtaXNzaW9uLWNyaXRpY2FsXCIsXG4gIFwic3RpY2t5XCIsXG4gIFwib25lLXRvLW9uZVwiLFxuICBcIjI0LzdcIixcbiAgXCJlbmQtdG8tZW5kXCIsXG4gIFwiZ2xvYmFsXCIsXG4gIFwiQjJCXCIsXG4gIFwiQjJDXCIsXG4gIFwiZ3JhbnVsYXJcIixcbiAgXCJmcmljdGlvbmxlc3NcIixcbiAgXCJ2aXJ0dWFsXCIsXG4gIFwidmlyYWxcIixcbiAgXCJkeW5hbWljXCIsXG4gIFwiMjQvMzY1XCIsXG4gIFwiYmVzdC1vZi1icmVlZFwiLFxuICBcImtpbGxlclwiLFxuICBcIm1hZ25ldGljXCIsXG4gIFwiYmxlZWRpbmctZWRnZVwiLFxuICBcIndlYi1lbmFibGVkXCIsXG4gIFwiaW50ZXJhY3RpdmVcIixcbiAgXCJkb3QtY29tXCIsXG4gIFwic2V4eVwiLFxuICBcImJhY2stZW5kXCIsXG4gIFwicmVhbC10aW1lXCIsXG4gIFwiZWZmaWNpZW50XCIsXG4gIFwiZnJvbnQtZW5kXCIsXG4gIFwiZGlzdHJpYnV0ZWRcIixcbiAgXCJzZWFtbGVzc1wiLFxuICBcImV4dGVuc2libGVcIixcbiAgXCJ0dXJuLWtleVwiLFxuICBcIndvcmxkLWNsYXNzXCIsXG4gIFwib3Blbi1zb3VyY2VcIixcbiAgXCJjcm9zcy1wbGF0Zm9ybVwiLFxuICBcImNyb3NzLW1lZGlhXCIsXG4gIFwic3luZXJnaXN0aWNcIixcbiAgXCJicmlja3MtYW5kLWNsaWNrc1wiLFxuICBcIm91dC1vZi10aGUtYm94XCIsXG4gIFwiZW50ZXJwcmlzZVwiLFxuICBcImludGVncmF0ZWRcIixcbiAgXCJpbXBhY3RmdWxcIixcbiAgXCJ3aXJlbGVzc1wiLFxuICBcInRyYW5zcGFyZW50XCIsXG4gIFwibmV4dC1nZW5lcmF0aW9uXCIsXG4gIFwiY3V0dGluZy1lZGdlXCIsXG4gIFwidXNlci1jZW50cmljXCIsXG4gIFwidmlzaW9uYXJ5XCIsXG4gIFwiY3VzdG9taXplZFwiLFxuICBcInViaXF1aXRvdXNcIixcbiAgXCJwbHVnLWFuZC1wbGF5XCIsXG4gIFwiY29sbGFib3JhdGl2ZVwiLFxuICBcImNvbXBlbGxpbmdcIixcbiAgXCJob2xpc3RpY1wiLFxuICBcInJpY2hcIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwic3luZXJnaWVzXCIsXG4gIFwid2ViLXJlYWRpbmVzc1wiLFxuICBcInBhcmFkaWdtc1wiLFxuICBcIm1hcmtldHNcIixcbiAgXCJwYXJ0bmVyc2hpcHNcIixcbiAgXCJpbmZyYXN0cnVjdHVyZXNcIixcbiAgXCJwbGF0Zm9ybXNcIixcbiAgXCJpbml0aWF0aXZlc1wiLFxuICBcImNoYW5uZWxzXCIsXG4gIFwiZXllYmFsbHNcIixcbiAgXCJjb21tdW5pdGllc1wiLFxuICBcIlJPSVwiLFxuICBcInNvbHV0aW9uc1wiLFxuICBcImUtdGFpbGVyc1wiLFxuICBcImUtc2VydmljZXNcIixcbiAgXCJhY3Rpb24taXRlbXNcIixcbiAgXCJwb3J0YWxzXCIsXG4gIFwibmljaGVzXCIsXG4gIFwidGVjaG5vbG9naWVzXCIsXG4gIFwiY29udGVudFwiLFxuICBcInZvcnRhbHNcIixcbiAgXCJzdXBwbHktY2hhaW5zXCIsXG4gIFwiY29udmVyZ2VuY2VcIixcbiAgXCJyZWxhdGlvbnNoaXBzXCIsXG4gIFwiYXJjaGl0ZWN0dXJlc1wiLFxuICBcImludGVyZmFjZXNcIixcbiAgXCJlLW1hcmtldHNcIixcbiAgXCJlLWNvbW1lcmNlXCIsXG4gIFwic3lzdGVtc1wiLFxuICBcImJhbmR3aWR0aFwiLFxuICBcImluZm9tZWRpYXJpZXNcIixcbiAgXCJtb2RlbHNcIixcbiAgXCJtaW5kc2hhcmVcIixcbiAgXCJkZWxpdmVyYWJsZXNcIixcbiAgXCJ1c2Vyc1wiLFxuICBcInNjaGVtYXNcIixcbiAgXCJuZXR3b3Jrc1wiLFxuICBcImFwcGxpY2F0aW9uc1wiLFxuICBcIm1ldHJpY3NcIixcbiAgXCJlLWJ1c2luZXNzXCIsXG4gIFwiZnVuY3Rpb25hbGl0aWVzXCIsXG4gIFwiZXhwZXJpZW5jZXNcIixcbiAgXCJ3ZWIgc2VydmljZXNcIixcbiAgXCJtZXRob2RvbG9naWVzXCJcbl07XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcImltcGxlbWVudFwiLFxuICBcInV0aWxpemVcIixcbiAgXCJpbnRlZ3JhdGVcIixcbiAgXCJzdHJlYW1saW5lXCIsXG4gIFwib3B0aW1pemVcIixcbiAgXCJldm9sdmVcIixcbiAgXCJ0cmFuc2Zvcm1cIixcbiAgXCJlbWJyYWNlXCIsXG4gIFwiZW5hYmxlXCIsXG4gIFwib3JjaGVzdHJhdGVcIixcbiAgXCJsZXZlcmFnZVwiLFxuICBcInJlaW52ZW50XCIsXG4gIFwiYWdncmVnYXRlXCIsXG4gIFwiYXJjaGl0ZWN0XCIsXG4gIFwiZW5oYW5jZVwiLFxuICBcImluY2VudGl2aXplXCIsXG4gIFwibW9ycGhcIixcbiAgXCJlbXBvd2VyXCIsXG4gIFwiZW52aXNpb25lZXJcIixcbiAgXCJtb25ldGl6ZVwiLFxuICBcImhhcm5lc3NcIixcbiAgXCJmYWNpbGl0YXRlXCIsXG4gIFwic2VpemVcIixcbiAgXCJkaXNpbnRlcm1lZGlhdGVcIixcbiAgXCJzeW5lcmdpemVcIixcbiAgXCJzdHJhdGVnaXplXCIsXG4gIFwiZGVwbG95XCIsXG4gIFwiYnJhbmRcIixcbiAgXCJncm93XCIsXG4gIFwidGFyZ2V0XCIsXG4gIFwic3luZGljYXRlXCIsXG4gIFwic3ludGhlc2l6ZVwiLFxuICBcImRlbGl2ZXJcIixcbiAgXCJtZXNoXCIsXG4gIFwiaW5jdWJhdGVcIixcbiAgXCJlbmdhZ2VcIixcbiAgXCJtYXhpbWl6ZVwiLFxuICBcImJlbmNobWFya1wiLFxuICBcImV4cGVkaXRlXCIsXG4gIFwicmVpbnRlcm1lZGlhdGVcIixcbiAgXCJ3aGl0ZWJvYXJkXCIsXG4gIFwidmlzdWFsaXplXCIsXG4gIFwicmVwdXJwb3NlXCIsXG4gIFwiaW5ub3ZhdGVcIixcbiAgXCJzY2FsZVwiLFxuICBcInVubGVhc2hcIixcbiAgXCJkcml2ZVwiLFxuICBcImV4dGVuZFwiLFxuICBcImVuZ2luZWVyXCIsXG4gIFwicmV2b2x1dGlvbml6ZVwiLFxuICBcImdlbmVyYXRlXCIsXG4gIFwiZXhwbG9pdFwiLFxuICBcInRyYW5zaXRpb25cIixcbiAgXCJlLWVuYWJsZVwiLFxuICBcIml0ZXJhdGVcIixcbiAgXCJjdWx0aXZhdGVcIixcbiAgXCJtYXRyaXhcIixcbiAgXCJwcm9kdWN0aXplXCIsXG4gIFwicmVkZWZpbmVcIixcbiAgXCJyZWNvbnRleHR1YWxpemVcIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiMjQgaG91clwiLFxuICBcIjI0LzdcIixcbiAgXCIzcmQgZ2VuZXJhdGlvblwiLFxuICBcIjR0aCBnZW5lcmF0aW9uXCIsXG4gIFwiNXRoIGdlbmVyYXRpb25cIixcbiAgXCI2dGggZ2VuZXJhdGlvblwiLFxuICBcImFjdHVhdGluZ1wiLFxuICBcImFuYWx5emluZ1wiLFxuICBcImFzeW1tZXRyaWNcIixcbiAgXCJhc3luY2hyb25vdXNcIixcbiAgXCJhdHRpdHVkZS1vcmllbnRlZFwiLFxuICBcImJhY2tncm91bmRcIixcbiAgXCJiYW5kd2lkdGgtbW9uaXRvcmVkXCIsXG4gIFwiYmktZGlyZWN0aW9uYWxcIixcbiAgXCJiaWZ1cmNhdGVkXCIsXG4gIFwiYm90dG9tLWxpbmVcIixcbiAgXCJjbGVhci10aGlua2luZ1wiLFxuICBcImNsaWVudC1kcml2ZW5cIixcbiAgXCJjbGllbnQtc2VydmVyXCIsXG4gIFwiY29oZXJlbnRcIixcbiAgXCJjb2hlc2l2ZVwiLFxuICBcImNvbXBvc2l0ZVwiLFxuICBcImNvbnRleHQtc2Vuc2l0aXZlXCIsXG4gIFwiY29udGV4dHVhbGx5LWJhc2VkXCIsXG4gIFwiY29udGVudC1iYXNlZFwiLFxuICBcImRlZGljYXRlZFwiLFxuICBcImRlbWFuZC1kcml2ZW5cIixcbiAgXCJkaWRhY3RpY1wiLFxuICBcImRpcmVjdGlvbmFsXCIsXG4gIFwiZGlzY3JldGVcIixcbiAgXCJkaXNpbnRlcm1lZGlhdGVcIixcbiAgXCJkeW5hbWljXCIsXG4gIFwiZWNvLWNlbnRyaWNcIixcbiAgXCJlbXBvd2VyaW5nXCIsXG4gIFwiZW5jb21wYXNzaW5nXCIsXG4gIFwiZXZlbi1rZWVsZWRcIixcbiAgXCJleGVjdXRpdmVcIixcbiAgXCJleHBsaWNpdFwiLFxuICBcImV4dWRpbmdcIixcbiAgXCJmYXVsdC10b2xlcmFudFwiLFxuICBcImZvcmVncm91bmRcIixcbiAgXCJmcmVzaC10aGlua2luZ1wiLFxuICBcImZ1bGwtcmFuZ2VcIixcbiAgXCJnbG9iYWxcIixcbiAgXCJncmlkLWVuYWJsZWRcIixcbiAgXCJoZXVyaXN0aWNcIixcbiAgXCJoaWdoLWxldmVsXCIsXG4gIFwiaG9saXN0aWNcIixcbiAgXCJob21vZ2VuZW91c1wiLFxuICBcImh1bWFuLXJlc291cmNlXCIsXG4gIFwiaHlicmlkXCIsXG4gIFwiaW1wYWN0ZnVsXCIsXG4gIFwiaW5jcmVtZW50YWxcIixcbiAgXCJpbnRhbmdpYmxlXCIsXG4gIFwiaW50ZXJhY3RpdmVcIixcbiAgXCJpbnRlcm1lZGlhdGVcIixcbiAgXCJsZWFkaW5nIGVkZ2VcIixcbiAgXCJsb2NhbFwiLFxuICBcImxvZ2lzdGljYWxcIixcbiAgXCJtYXhpbWl6ZWRcIixcbiAgXCJtZXRob2RpY2FsXCIsXG4gIFwibWlzc2lvbi1jcml0aWNhbFwiLFxuICBcIm1vYmlsZVwiLFxuICBcIm1vZHVsYXJcIixcbiAgXCJtb3RpdmF0aW5nXCIsXG4gIFwibXVsdGltZWRpYVwiLFxuICBcIm11bHRpLXN0YXRlXCIsXG4gIFwibXVsdGktdGFza2luZ1wiLFxuICBcIm5hdGlvbmFsXCIsXG4gIFwibmVlZHMtYmFzZWRcIixcbiAgXCJuZXV0cmFsXCIsXG4gIFwibmV4dCBnZW5lcmF0aW9uXCIsXG4gIFwibm9uLXZvbGF0aWxlXCIsXG4gIFwib2JqZWN0LW9yaWVudGVkXCIsXG4gIFwib3B0aW1hbFwiLFxuICBcIm9wdGltaXppbmdcIixcbiAgXCJyYWRpY2FsXCIsXG4gIFwicmVhbC10aW1lXCIsXG4gIFwicmVjaXByb2NhbFwiLFxuICBcInJlZ2lvbmFsXCIsXG4gIFwicmVzcG9uc2l2ZVwiLFxuICBcInNjYWxhYmxlXCIsXG4gIFwic2Vjb25kYXJ5XCIsXG4gIFwic29sdXRpb24tb3JpZW50ZWRcIixcbiAgXCJzdGFibGVcIixcbiAgXCJzdGF0aWNcIixcbiAgXCJzeXN0ZW1hdGljXCIsXG4gIFwic3lzdGVtaWNcIixcbiAgXCJzeXN0ZW0td29ydGh5XCIsXG4gIFwidGFuZ2libGVcIixcbiAgXCJ0ZXJ0aWFyeVwiLFxuICBcInRyYW5zaXRpb25hbFwiLFxuICBcInVuaWZvcm1cIixcbiAgXCJ1cHdhcmQtdHJlbmRpbmdcIixcbiAgXCJ1c2VyLWZhY2luZ1wiLFxuICBcInZhbHVlLWFkZGVkXCIsXG4gIFwid2ViLWVuYWJsZWRcIixcbiAgXCJ3ZWxsLW1vZHVsYXRlZFwiLFxuICBcInplcm8gYWRtaW5pc3RyYXRpb25cIixcbiAgXCJ6ZXJvIGRlZmVjdFwiLFxuICBcInplcm8gdG9sZXJhbmNlXCJcbl07XG4iLCJ2YXIgY29tcGFueSA9IHt9O1xubW9kdWxlWydleHBvcnRzJ10gPSBjb21wYW55O1xuY29tcGFueS5zdWZmaXggPSByZXF1aXJlKFwiLi9zdWZmaXhcIik7XG5jb21wYW55LmFkamVjdGl2ZSA9IHJlcXVpcmUoXCIuL2FkamVjdGl2ZVwiKTtcbmNvbXBhbnkuZGVzY3JpcHRvciA9IHJlcXVpcmUoXCIuL2Rlc2NyaXB0b3JcIik7XG5jb21wYW55Lm5vdW4gPSByZXF1aXJlKFwiLi9ub3VuXCIpO1xuY29tcGFueS5ic192ZXJiID0gcmVxdWlyZShcIi4vYnNfdmVyYlwiKTtcbmNvbXBhbnkuYnNfYWRqZWN0aXZlID0gcmVxdWlyZShcIi4vYnNfYWRqZWN0aXZlXCIpO1xuY29tcGFueS5ic19ub3VuID0gcmVxdWlyZShcIi4vYnNfbm91blwiKTtcbmNvbXBhbnkubmFtZSA9IHJlcXVpcmUoXCIuL25hbWVcIik7XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcIiN7TmFtZS5sYXN0X25hbWV9ICN7c3VmZml4fVwiLFxuICBcIiN7TmFtZS5sYXN0X25hbWV9LSN7TmFtZS5sYXN0X25hbWV9XCIsXG4gIFwiI3tOYW1lLmxhc3RfbmFtZX0sICN7TmFtZS5sYXN0X25hbWV9IGFuZCAje05hbWUubGFzdF9uYW1lfVwiXG5dO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCJhYmlsaXR5XCIsXG4gIFwiYWNjZXNzXCIsXG4gIFwiYWRhcHRlclwiLFxuICBcImFsZ29yaXRobVwiLFxuICBcImFsbGlhbmNlXCIsXG4gIFwiYW5hbHl6ZXJcIixcbiAgXCJhcHBsaWNhdGlvblwiLFxuICBcImFwcHJvYWNoXCIsXG4gIFwiYXJjaGl0ZWN0dXJlXCIsXG4gIFwiYXJjaGl2ZVwiLFxuICBcImFydGlmaWNpYWwgaW50ZWxsaWdlbmNlXCIsXG4gIFwiYXJyYXlcIixcbiAgXCJhdHRpdHVkZVwiLFxuICBcImJlbmNobWFya1wiLFxuICBcImJ1ZGdldGFyeSBtYW5hZ2VtZW50XCIsXG4gIFwiY2FwYWJpbGl0eVwiLFxuICBcImNhcGFjaXR5XCIsXG4gIFwiY2hhbGxlbmdlXCIsXG4gIFwiY2lyY3VpdFwiLFxuICBcImNvbGxhYm9yYXRpb25cIixcbiAgXCJjb21wbGV4aXR5XCIsXG4gIFwiY29uY2VwdFwiLFxuICBcImNvbmdsb21lcmF0aW9uXCIsXG4gIFwiY29udGluZ2VuY3lcIixcbiAgXCJjb3JlXCIsXG4gIFwiY3VzdG9tZXIgbG95YWx0eVwiLFxuICBcImRhdGFiYXNlXCIsXG4gIFwiZGF0YS13YXJlaG91c2VcIixcbiAgXCJkZWZpbml0aW9uXCIsXG4gIFwiZW11bGF0aW9uXCIsXG4gIFwiZW5jb2RpbmdcIixcbiAgXCJlbmNyeXB0aW9uXCIsXG4gIFwiZXh0cmFuZXRcIixcbiAgXCJmaXJtd2FyZVwiLFxuICBcImZsZXhpYmlsaXR5XCIsXG4gIFwiZm9jdXMgZ3JvdXBcIixcbiAgXCJmb3JlY2FzdFwiLFxuICBcImZyYW1lXCIsXG4gIFwiZnJhbWV3b3JrXCIsXG4gIFwiZnVuY3Rpb25cIixcbiAgXCJmdW5jdGlvbmFsaXRpZXNcIixcbiAgXCJHcmFwaGljIEludGVyZmFjZVwiLFxuICBcImdyb3Vwd2FyZVwiLFxuICBcIkdyYXBoaWNhbCBVc2VyIEludGVyZmFjZVwiLFxuICBcImhhcmR3YXJlXCIsXG4gIFwiaGVscC1kZXNrXCIsXG4gIFwiaGllcmFyY2h5XCIsXG4gIFwiaHViXCIsXG4gIFwiaW1wbGVtZW50YXRpb25cIixcbiAgXCJpbmZvLW1lZGlhcmllc1wiLFxuICBcImluZnJhc3RydWN0dXJlXCIsXG4gIFwiaW5pdGlhdGl2ZVwiLFxuICBcImluc3RhbGxhdGlvblwiLFxuICBcImluc3RydWN0aW9uIHNldFwiLFxuICBcImludGVyZmFjZVwiLFxuICBcImludGVybmV0IHNvbHV0aW9uXCIsXG4gIFwiaW50cmFuZXRcIixcbiAgXCJrbm93bGVkZ2UgdXNlclwiLFxuICBcImtub3dsZWRnZSBiYXNlXCIsXG4gIFwibG9jYWwgYXJlYSBuZXR3b3JrXCIsXG4gIFwibGV2ZXJhZ2VcIixcbiAgXCJtYXRyaWNlc1wiLFxuICBcIm1hdHJpeFwiLFxuICBcIm1ldGhvZG9sb2d5XCIsXG4gIFwibWlkZGxld2FyZVwiLFxuICBcIm1pZ3JhdGlvblwiLFxuICBcIm1vZGVsXCIsXG4gIFwibW9kZXJhdG9yXCIsXG4gIFwibW9uaXRvcmluZ1wiLFxuICBcIm1vcmF0b3JpdW1cIixcbiAgXCJuZXVyYWwtbmV0XCIsXG4gIFwib3BlbiBhcmNoaXRlY3R1cmVcIixcbiAgXCJvcGVuIHN5c3RlbVwiLFxuICBcIm9yY2hlc3RyYXRpb25cIixcbiAgXCJwYXJhZGlnbVwiLFxuICBcInBhcmFsbGVsaXNtXCIsXG4gIFwicG9saWN5XCIsXG4gIFwicG9ydGFsXCIsXG4gIFwicHJpY2luZyBzdHJ1Y3R1cmVcIixcbiAgXCJwcm9jZXNzIGltcHJvdmVtZW50XCIsXG4gIFwicHJvZHVjdFwiLFxuICBcInByb2R1Y3Rpdml0eVwiLFxuICBcInByb2plY3RcIixcbiAgXCJwcm9qZWN0aW9uXCIsXG4gIFwicHJvdG9jb2xcIixcbiAgXCJzZWN1cmVkIGxpbmVcIixcbiAgXCJzZXJ2aWNlLWRlc2tcIixcbiAgXCJzb2Z0d2FyZVwiLFxuICBcInNvbHV0aW9uXCIsXG4gIFwic3RhbmRhcmRpemF0aW9uXCIsXG4gIFwic3RyYXRlZ3lcIixcbiAgXCJzdHJ1Y3R1cmVcIixcbiAgXCJzdWNjZXNzXCIsXG4gIFwic3VwZXJzdHJ1Y3R1cmVcIixcbiAgXCJzdXBwb3J0XCIsXG4gIFwic3luZXJneVwiLFxuICBcInN5c3RlbSBlbmdpbmVcIixcbiAgXCJ0YXNrLWZvcmNlXCIsXG4gIFwidGhyb3VnaHB1dFwiLFxuICBcInRpbWUtZnJhbWVcIixcbiAgXCJ0b29sc2V0XCIsXG4gIFwidXRpbGlzYXRpb25cIixcbiAgXCJ3ZWJzaXRlXCIsXG4gIFwid29ya2ZvcmNlXCJcbl07XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcIkluY1wiLFxuICBcImFuZCBTb25zXCIsXG4gIFwiTExDXCIsXG4gIFwiR3JvdXBcIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiLzM0IyMtIyMjIyMjLSMjIyNML1wiLFxuICBcIi8zNyMjLSMjIyMjIy0jIyMjTC9cIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiLzMwWzAtNV0jLSMjIyMjIy0jIyNML1wiLFxuICBcIi8zNjgjLSMjIyMjIy0jIyNML1wiXG5dO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCIvNjAxMS0jIyMjLSMjIyMtIyMjTC9cIixcbiAgXCIvNjUjIy0jIyMjLSMjIyMtIyMjTC9cIixcbiAgXCIvNjRbNC05XSMtIyMjIy0jIyMjLSMjI0wvXCIsXG4gIFwiLzYwMTEtNjIjIy0jIyMjLSMjIyMtIyMjTC9cIixcbiAgXCIvNjUjIy02MiMjLSMjIyMtIyMjIy0jIyNML1wiLFxuICBcIi82NFs0LTldIy02MiMjLSMjIyMtIyMjIy0jIyNML1wiXG5dO1xuIiwidmFyIGNyZWRpdF9jYXJkID0ge307XG5tb2R1bGVbJ2V4cG9ydHMnXSA9IGNyZWRpdF9jYXJkO1xuY3JlZGl0X2NhcmQudmlzYSA9IHJlcXVpcmUoXCIuL3Zpc2FcIik7XG5jcmVkaXRfY2FyZC5tYXN0ZXJjYXJkID0gcmVxdWlyZShcIi4vbWFzdGVyY2FyZFwiKTtcbmNyZWRpdF9jYXJkLmRpc2NvdmVyID0gcmVxdWlyZShcIi4vZGlzY292ZXJcIik7XG5jcmVkaXRfY2FyZC5hbWVyaWNhbl9leHByZXNzID0gcmVxdWlyZShcIi4vYW1lcmljYW5fZXhwcmVzc1wiKTtcbmNyZWRpdF9jYXJkLmRpbmVyc19jbHViID0gcmVxdWlyZShcIi4vZGluZXJzX2NsdWJcIik7XG5jcmVkaXRfY2FyZC5qY2IgPSByZXF1aXJlKFwiLi9qY2JcIik7XG5jcmVkaXRfY2FyZC5zd2l0Y2ggPSByZXF1aXJlKFwiLi9zd2l0Y2hcIik7XG5jcmVkaXRfY2FyZC5zb2xvID0gcmVxdWlyZShcIi4vc29sb1wiKTtcbmNyZWRpdF9jYXJkLm1hZXN0cm8gPSByZXF1aXJlKFwiLi9tYWVzdHJvXCIpO1xuY3JlZGl0X2NhcmQubGFzZXIgPSByZXF1aXJlKFwiLi9sYXNlclwiKTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiLzM1MjgtIyMjIy0jIyMjLSMjI0wvXCIsXG4gIFwiLzM1MjktIyMjIy0jIyMjLSMjI0wvXCIsXG4gIFwiLzM1WzMtOF0jLSMjIyMtIyMjIy0jIyNML1wiXG5dO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCIvNjMwNCMjIyMjIyMjIyMjTC9cIixcbiAgXCIvNjcwNiMjIyMjIyMjIyMjTC9cIixcbiAgXCIvNjc3MSMjIyMjIyMjIyMjTC9cIixcbiAgXCIvNjcwOSMjIyMjIyMjIyMjTC9cIixcbiAgXCIvNjMwNCMjIyMjIyMjI3s1LDZ9TC9cIixcbiAgXCIvNjcwNiMjIyMjIyMjI3s1LDZ9TC9cIixcbiAgXCIvNjc3MSMjIyMjIyMjI3s1LDZ9TC9cIixcbiAgXCIvNjcwOSMjIyMjIyMjI3s1LDZ9TC9cIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiLzUwI3s5LDE2fUwvXCIsXG4gIFwiLzVbNi04XSN7OSwxNn1ML1wiLFxuICBcIi81NiMjezksMTZ9TC9cIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiLzVbMS01XSMjLSMjIyMtIyMjIy0jIyNML1wiLFxuICBcIi82NzcxLTg5IyMtIyMjIy0jIyNML1wiXG5dO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCIvNjc2Ny0jIyMjLSMjIyMtIyMjTC9cIixcbiAgXCIvNjc2Ny0jIyMjLSMjIyMtIyMjIy0jTC9cIixcbiAgXCIvNjc2Ny0jIyMjLSMjIyMtIyMjIy0jI0wvXCJcbl07XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcIi82NzU5LSMjIyMtIyMjIy0jIyNML1wiLFxuICBcIi82NzU5LSMjIyMtIyMjIy0jIyMjLSNML1wiLFxuICBcIi82NzU5LSMjIyMtIyMjIy0jIyMjLSMjTC9cIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiLzQjIyMjIyMjIyMjI0wvXCIsXG4gIFwiLzQjIyMtIyMjIy0jIyMjLSMjI0wvXCJcbl07XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcInV0ZjhfdW5pY29kZV9jaVwiLFxuICBcInV0ZjhfZ2VuZXJhbF9jaVwiLFxuICBcInV0ZjhfYmluXCIsXG4gIFwiYXNjaWlfYmluXCIsXG4gIFwiYXNjaWlfZ2VuZXJhbF9jaVwiLFxuICBcImNwMTI1MF9iaW5cIixcbiAgXCJjcDEyNTBfZ2VuZXJhbF9jaVwiXG5dO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCJpZFwiLFxuICBcInRpdGxlXCIsXG4gIFwibmFtZVwiLFxuICBcImVtYWlsXCIsXG4gIFwicGhvbmVcIixcbiAgXCJ0b2tlblwiLFxuICBcImdyb3VwXCIsXG4gIFwiY2F0ZWdvcnlcIixcbiAgXCJwYXNzd29yZFwiLFxuICBcImNvbW1lbnRcIixcbiAgXCJhdmF0YXJcIixcbiAgXCJzdGF0dXNcIixcbiAgXCJjcmVhdGVkQXRcIixcbiAgXCJ1cGRhdGVkQXRcIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiSW5ub0RCXCIsXG4gIFwiTXlJU0FNXCIsXG4gIFwiTUVNT1JZXCIsXG4gIFwiQ1NWXCIsXG4gIFwiQkxBQ0tIT0xFXCIsXG4gIFwiQVJDSElWRVwiXG5dO1xuIiwidmFyIGRhdGFiYXNlID0ge307XG5tb2R1bGVbJ2V4cG9ydHMnXSA9IGRhdGFiYXNlO1xuZGF0YWJhc2UuY29sbGF0aW9uID0gcmVxdWlyZShcIi4vY29sbGF0aW9uXCIpO1xuZGF0YWJhc2UuY29sdW1uID0gcmVxdWlyZShcIi4vY29sdW1uXCIpO1xuZGF0YWJhc2UuZW5naW5lID0gcmVxdWlyZShcIi4vZW5naW5lXCIpO1xuZGF0YWJhc2UudHlwZSA9IHJlcXVpcmUoXCIuL3R5cGVcIik7IiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCJpbnRcIixcbiAgXCJ2YXJjaGFyXCIsXG4gIFwidGV4dFwiLFxuICBcImRhdGVcIixcbiAgXCJkYXRldGltZVwiLFxuICBcInRpbnlpbnRcIixcbiAgXCJ0aW1lXCIsXG4gIFwidGltZXN0YW1wXCIsXG4gIFwic21hbGxpbnRcIixcbiAgXCJtZWRpdW1pbnRcIixcbiAgXCJiaWdpbnRcIixcbiAgXCJkZWNpbWFsXCIsXG4gIFwiZmxvYXRcIixcbiAgXCJkb3VibGVcIixcbiAgXCJyZWFsXCIsXG4gIFwiYml0XCIsXG4gIFwiYm9vbGVhblwiLFxuICBcInNlcmlhbFwiLFxuICBcImJsb2JcIixcbiAgXCJiaW5hcnlcIixcbiAgXCJlbnVtXCIsXG4gIFwic2V0XCIsXG4gIFwiZ2VvbWV0cnlcIixcbiAgXCJwb2ludFwiXG5dO1xuIiwidmFyIGRhdGUgPSB7fTtcbm1vZHVsZVtcImV4cG9ydHNcIl0gPSBkYXRlO1xuZGF0ZS5tb250aCA9IHJlcXVpcmUoXCIuL21vbnRoXCIpO1xuZGF0ZS53ZWVrZGF5ID0gcmVxdWlyZShcIi4vd2Vla2RheVwiKTtcbiIsIi8vIFNvdXJjZTogaHR0cDovL3VuaWNvZGUub3JnL2NsZHIvdHJhYy9icm93c2VyL3RhZ3MvcmVsZWFzZS0yNy9jb21tb24vbWFpbi9lbi54bWwjTDE3OTlcbm1vZHVsZVtcImV4cG9ydHNcIl0gPSB7XG4gIHdpZGU6IFtcbiAgICBcIkphbnVhcnlcIixcbiAgICBcIkZlYnJ1YXJ5XCIsXG4gICAgXCJNYXJjaFwiLFxuICAgIFwiQXByaWxcIixcbiAgICBcIk1heVwiLFxuICAgIFwiSnVuZVwiLFxuICAgIFwiSnVseVwiLFxuICAgIFwiQXVndXN0XCIsXG4gICAgXCJTZXB0ZW1iZXJcIixcbiAgICBcIk9jdG9iZXJcIixcbiAgICBcIk5vdmVtYmVyXCIsXG4gICAgXCJEZWNlbWJlclwiXG4gIF0sXG4gIC8vIFByb3BlcnR5IFwid2lkZV9jb250ZXh0XCIgaXMgb3B0aW9uYWwsIGlmIG5vdCBzZXQgdGhlbiBcIndpZGVcIiB3aWxsIGJlIHVzZWQgaW5zdGVhZFxuICAvLyBJdCBpcyB1c2VkIHRvIHNwZWNpZnkgYSB3b3JkIGluIGNvbnRleHQsIHdoaWNoIG1heSBkaWZmZXIgZnJvbSBhIHN0YW5kLWFsb25lIHdvcmRcbiAgd2lkZV9jb250ZXh0OiBbXG4gICAgXCJKYW51YXJ5XCIsXG4gICAgXCJGZWJydWFyeVwiLFxuICAgIFwiTWFyY2hcIixcbiAgICBcIkFwcmlsXCIsXG4gICAgXCJNYXlcIixcbiAgICBcIkp1bmVcIixcbiAgICBcIkp1bHlcIixcbiAgICBcIkF1Z3VzdFwiLFxuICAgIFwiU2VwdGVtYmVyXCIsXG4gICAgXCJPY3RvYmVyXCIsXG4gICAgXCJOb3ZlbWJlclwiLFxuICAgIFwiRGVjZW1iZXJcIlxuICBdLFxuICBhYmJyOiBbXG4gICAgXCJKYW5cIixcbiAgICBcIkZlYlwiLFxuICAgIFwiTWFyXCIsXG4gICAgXCJBcHJcIixcbiAgICBcIk1heVwiLFxuICAgIFwiSnVuXCIsXG4gICAgXCJKdWxcIixcbiAgICBcIkF1Z1wiLFxuICAgIFwiU2VwXCIsXG4gICAgXCJPY3RcIixcbiAgICBcIk5vdlwiLFxuICAgIFwiRGVjXCJcbiAgXSxcbiAgLy8gUHJvcGVydHkgXCJhYmJyX2NvbnRleHRcIiBpcyBvcHRpb25hbCwgaWYgbm90IHNldCB0aGVuIFwiYWJiclwiIHdpbGwgYmUgdXNlZCBpbnN0ZWFkXG4gIC8vIEl0IGlzIHVzZWQgdG8gc3BlY2lmeSBhIHdvcmQgaW4gY29udGV4dCwgd2hpY2ggbWF5IGRpZmZlciBmcm9tIGEgc3RhbmQtYWxvbmUgd29yZFxuICBhYmJyX2NvbnRleHQ6IFtcbiAgICBcIkphblwiLFxuICAgIFwiRmViXCIsXG4gICAgXCJNYXJcIixcbiAgICBcIkFwclwiLFxuICAgIFwiTWF5XCIsXG4gICAgXCJKdW5cIixcbiAgICBcIkp1bFwiLFxuICAgIFwiQXVnXCIsXG4gICAgXCJTZXBcIixcbiAgICBcIk9jdFwiLFxuICAgIFwiTm92XCIsXG4gICAgXCJEZWNcIlxuICBdXG59O1xuIiwiLy8gU291cmNlOiBodHRwOi8vdW5pY29kZS5vcmcvY2xkci90cmFjL2Jyb3dzZXIvdGFncy9yZWxlYXNlLTI3L2NvbW1vbi9tYWluL2VuLnhtbCNMMTg0N1xubW9kdWxlW1wiZXhwb3J0c1wiXSA9IHtcbiAgd2lkZTogW1xuICAgIFwiU3VuZGF5XCIsXG4gICAgXCJNb25kYXlcIixcbiAgICBcIlR1ZXNkYXlcIixcbiAgICBcIldlZG5lc2RheVwiLFxuICAgIFwiVGh1cnNkYXlcIixcbiAgICBcIkZyaWRheVwiLFxuICAgIFwiU2F0dXJkYXlcIlxuICBdLFxuICAvLyBQcm9wZXJ0eSBcIndpZGVfY29udGV4dFwiIGlzIG9wdGlvbmFsLCBpZiBub3Qgc2V0IHRoZW4gXCJ3aWRlXCIgd2lsbCBiZSB1c2VkIGluc3RlYWRcbiAgLy8gSXQgaXMgdXNlZCB0byBzcGVjaWZ5IGEgd29yZCBpbiBjb250ZXh0LCB3aGljaCBtYXkgZGlmZmVyIGZyb20gYSBzdGFuZC1hbG9uZSB3b3JkXG4gIHdpZGVfY29udGV4dDogW1xuICAgIFwiU3VuZGF5XCIsXG4gICAgXCJNb25kYXlcIixcbiAgICBcIlR1ZXNkYXlcIixcbiAgICBcIldlZG5lc2RheVwiLFxuICAgIFwiVGh1cnNkYXlcIixcbiAgICBcIkZyaWRheVwiLFxuICAgIFwiU2F0dXJkYXlcIlxuICBdLFxuICBhYmJyOiBbXG4gICAgXCJTdW5cIixcbiAgICBcIk1vblwiLFxuICAgIFwiVHVlXCIsXG4gICAgXCJXZWRcIixcbiAgICBcIlRodVwiLFxuICAgIFwiRnJpXCIsXG4gICAgXCJTYXRcIlxuICBdLFxuICAvLyBQcm9wZXJ0eSBcImFiYnJfY29udGV4dFwiIGlzIG9wdGlvbmFsLCBpZiBub3Qgc2V0IHRoZW4gXCJhYmJyXCIgd2lsbCBiZSB1c2VkIGluc3RlYWRcbiAgLy8gSXQgaXMgdXNlZCB0byBzcGVjaWZ5IGEgd29yZCBpbiBjb250ZXh0LCB3aGljaCBtYXkgZGlmZmVyIGZyb20gYSBzdGFuZC1hbG9uZSB3b3JkXG4gIGFiYnJfY29udGV4dDogW1xuICAgIFwiU3VuXCIsXG4gICAgXCJNb25cIixcbiAgICBcIlR1ZVwiLFxuICAgIFwiV2VkXCIsXG4gICAgXCJUaHVcIixcbiAgICBcIkZyaVwiLFxuICAgIFwiU2F0XCJcbiAgXVxufTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiQ2hlY2tpbmdcIixcbiAgXCJTYXZpbmdzXCIsXG4gIFwiTW9uZXkgTWFya2V0XCIsXG4gIFwiSW52ZXN0bWVudFwiLFxuICBcIkhvbWUgTG9hblwiLFxuICBcIkNyZWRpdCBDYXJkXCIsXG4gIFwiQXV0byBMb2FuXCIsXG4gIFwiUGVyc29uYWwgTG9hblwiXG5dO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IHtcbiAgXCJVQUUgRGlyaGFtXCI6IHtcbiAgICBcImNvZGVcIjogXCJBRURcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiQWZnaGFuaVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiQUZOXCIsXG4gICAgXCJzeW1ib2xcIjogXCLYi1wiXG4gIH0sXG4gIFwiTGVrXCI6IHtcbiAgICBcImNvZGVcIjogXCJBTExcIixcbiAgICBcInN5bWJvbFwiOiBcIkxla1wiXG4gIH0sXG4gIFwiQXJtZW5pYW4gRHJhbVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiQU1EXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIk5ldGhlcmxhbmRzIEFudGlsbGlhbiBHdWlsZGVyXCI6IHtcbiAgICBcImNvZGVcIjogXCJBTkdcIixcbiAgICBcInN5bWJvbFwiOiBcIsaSXCJcbiAgfSxcbiAgXCJLd2FuemFcIjoge1xuICAgIFwiY29kZVwiOiBcIkFPQVwiLFxuICAgIFwic3ltYm9sXCI6IFwiXCJcbiAgfSxcbiAgXCJBcmdlbnRpbmUgUGVzb1wiOiB7XG4gICAgXCJjb2RlXCI6IFwiQVJTXCIsXG4gICAgXCJzeW1ib2xcIjogXCIkXCJcbiAgfSxcbiAgXCJBdXN0cmFsaWFuIERvbGxhclwiOiB7XG4gICAgXCJjb2RlXCI6IFwiQVVEXCIsXG4gICAgXCJzeW1ib2xcIjogXCIkXCJcbiAgfSxcbiAgXCJBcnViYW4gR3VpbGRlclwiOiB7XG4gICAgXCJjb2RlXCI6IFwiQVdHXCIsXG4gICAgXCJzeW1ib2xcIjogXCLGklwiXG4gIH0sXG4gIFwiQXplcmJhaWphbmlhbiBNYW5hdFwiOiB7XG4gICAgXCJjb2RlXCI6IFwiQVpOXCIsXG4gICAgXCJzeW1ib2xcIjogXCLQvNCw0L1cIlxuICB9LFxuICBcIkNvbnZlcnRpYmxlIE1hcmtzXCI6IHtcbiAgICBcImNvZGVcIjogXCJCQU1cIixcbiAgICBcInN5bWJvbFwiOiBcIktNXCJcbiAgfSxcbiAgXCJCYXJiYWRvcyBEb2xsYXJcIjoge1xuICAgIFwiY29kZVwiOiBcIkJCRFwiLFxuICAgIFwic3ltYm9sXCI6IFwiJFwiXG4gIH0sXG4gIFwiVGFrYVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiQkRUXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIkJ1bGdhcmlhbiBMZXZcIjoge1xuICAgIFwiY29kZVwiOiBcIkJHTlwiLFxuICAgIFwic3ltYm9sXCI6IFwi0LvQslwiXG4gIH0sXG4gIFwiQmFocmFpbmkgRGluYXJcIjoge1xuICAgIFwiY29kZVwiOiBcIkJIRFwiLFxuICAgIFwic3ltYm9sXCI6IFwiXCJcbiAgfSxcbiAgXCJCdXJ1bmRpIEZyYW5jXCI6IHtcbiAgICBcImNvZGVcIjogXCJCSUZcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiQmVybXVkaWFuIERvbGxhciAoY3VzdG9tYXJpbHkga25vd24gYXMgQmVybXVkYSBEb2xsYXIpXCI6IHtcbiAgICBcImNvZGVcIjogXCJCTURcIixcbiAgICBcInN5bWJvbFwiOiBcIiRcIlxuICB9LFxuICBcIkJydW5laSBEb2xsYXJcIjoge1xuICAgIFwiY29kZVwiOiBcIkJORFwiLFxuICAgIFwic3ltYm9sXCI6IFwiJFwiXG4gIH0sXG4gIFwiQm9saXZpYW5vIE12ZG9sXCI6IHtcbiAgICBcImNvZGVcIjogXCJCT0IgQk9WXCIsXG4gICAgXCJzeW1ib2xcIjogXCIkYlwiXG4gIH0sXG4gIFwiQnJhemlsaWFuIFJlYWxcIjoge1xuICAgIFwiY29kZVwiOiBcIkJSTFwiLFxuICAgIFwic3ltYm9sXCI6IFwiUiRcIlxuICB9LFxuICBcIkJhaGFtaWFuIERvbGxhclwiOiB7XG4gICAgXCJjb2RlXCI6IFwiQlNEXCIsXG4gICAgXCJzeW1ib2xcIjogXCIkXCJcbiAgfSxcbiAgXCJQdWxhXCI6IHtcbiAgICBcImNvZGVcIjogXCJCV1BcIixcbiAgICBcInN5bWJvbFwiOiBcIlBcIlxuICB9LFxuICBcIkJlbGFydXNzaWFuIFJ1YmxlXCI6IHtcbiAgICBcImNvZGVcIjogXCJCWVJcIixcbiAgICBcInN5bWJvbFwiOiBcInAuXCJcbiAgfSxcbiAgXCJCZWxpemUgRG9sbGFyXCI6IHtcbiAgICBcImNvZGVcIjogXCJCWkRcIixcbiAgICBcInN5bWJvbFwiOiBcIkJaJFwiXG4gIH0sXG4gIFwiQ2FuYWRpYW4gRG9sbGFyXCI6IHtcbiAgICBcImNvZGVcIjogXCJDQURcIixcbiAgICBcInN5bWJvbFwiOiBcIiRcIlxuICB9LFxuICBcIkNvbmdvbGVzZSBGcmFuY1wiOiB7XG4gICAgXCJjb2RlXCI6IFwiQ0RGXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIlN3aXNzIEZyYW5jXCI6IHtcbiAgICBcImNvZGVcIjogXCJDSEZcIixcbiAgICBcInN5bWJvbFwiOiBcIkNIRlwiXG4gIH0sXG4gIFwiQ2hpbGVhbiBQZXNvIFVuaWRhZGVzIGRlIGZvbWVudG9cIjoge1xuICAgIFwiY29kZVwiOiBcIkNMUCBDTEZcIixcbiAgICBcInN5bWJvbFwiOiBcIiRcIlxuICB9LFxuICBcIll1YW4gUmVubWluYmlcIjoge1xuICAgIFwiY29kZVwiOiBcIkNOWVwiLFxuICAgIFwic3ltYm9sXCI6IFwiwqVcIlxuICB9LFxuICBcIkNvbG9tYmlhbiBQZXNvIFVuaWRhZCBkZSBWYWxvciBSZWFsXCI6IHtcbiAgICBcImNvZGVcIjogXCJDT1AgQ09VXCIsXG4gICAgXCJzeW1ib2xcIjogXCIkXCJcbiAgfSxcbiAgXCJDb3N0YSBSaWNhbiBDb2xvblwiOiB7XG4gICAgXCJjb2RlXCI6IFwiQ1JDXCIsXG4gICAgXCJzeW1ib2xcIjogXCLigqFcIlxuICB9LFxuICBcIkN1YmFuIFBlc28gUGVzbyBDb252ZXJ0aWJsZVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiQ1VQIENVQ1wiLFxuICAgIFwic3ltYm9sXCI6IFwi4oKxXCJcbiAgfSxcbiAgXCJDYXBlIFZlcmRlIEVzY3Vkb1wiOiB7XG4gICAgXCJjb2RlXCI6IFwiQ1ZFXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIkN6ZWNoIEtvcnVuYVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiQ1pLXCIsXG4gICAgXCJzeW1ib2xcIjogXCJLxI1cIlxuICB9LFxuICBcIkRqaWJvdXRpIEZyYW5jXCI6IHtcbiAgICBcImNvZGVcIjogXCJESkZcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiRGFuaXNoIEtyb25lXCI6IHtcbiAgICBcImNvZGVcIjogXCJES0tcIixcbiAgICBcInN5bWJvbFwiOiBcImtyXCJcbiAgfSxcbiAgXCJEb21pbmljYW4gUGVzb1wiOiB7XG4gICAgXCJjb2RlXCI6IFwiRE9QXCIsXG4gICAgXCJzeW1ib2xcIjogXCJSRCRcIlxuICB9LFxuICBcIkFsZ2VyaWFuIERpbmFyXCI6IHtcbiAgICBcImNvZGVcIjogXCJEWkRcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiS3Jvb25cIjoge1xuICAgIFwiY29kZVwiOiBcIkVFS1wiLFxuICAgIFwic3ltYm9sXCI6IFwiXCJcbiAgfSxcbiAgXCJFZ3lwdGlhbiBQb3VuZFwiOiB7XG4gICAgXCJjb2RlXCI6IFwiRUdQXCIsXG4gICAgXCJzeW1ib2xcIjogXCLCo1wiXG4gIH0sXG4gIFwiTmFrZmFcIjoge1xuICAgIFwiY29kZVwiOiBcIkVSTlwiLFxuICAgIFwic3ltYm9sXCI6IFwiXCJcbiAgfSxcbiAgXCJFdGhpb3BpYW4gQmlyclwiOiB7XG4gICAgXCJjb2RlXCI6IFwiRVRCXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIkV1cm9cIjoge1xuICAgIFwiY29kZVwiOiBcIkVVUlwiLFxuICAgIFwic3ltYm9sXCI6IFwi4oKsXCJcbiAgfSxcbiAgXCJGaWppIERvbGxhclwiOiB7XG4gICAgXCJjb2RlXCI6IFwiRkpEXCIsXG4gICAgXCJzeW1ib2xcIjogXCIkXCJcbiAgfSxcbiAgXCJGYWxrbGFuZCBJc2xhbmRzIFBvdW5kXCI6IHtcbiAgICBcImNvZGVcIjogXCJGS1BcIixcbiAgICBcInN5bWJvbFwiOiBcIsKjXCJcbiAgfSxcbiAgXCJQb3VuZCBTdGVybGluZ1wiOiB7XG4gICAgXCJjb2RlXCI6IFwiR0JQXCIsXG4gICAgXCJzeW1ib2xcIjogXCLCo1wiXG4gIH0sXG4gIFwiTGFyaVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiR0VMXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIkNlZGlcIjoge1xuICAgIFwiY29kZVwiOiBcIkdIU1wiLFxuICAgIFwic3ltYm9sXCI6IFwiXCJcbiAgfSxcbiAgXCJHaWJyYWx0YXIgUG91bmRcIjoge1xuICAgIFwiY29kZVwiOiBcIkdJUFwiLFxuICAgIFwic3ltYm9sXCI6IFwiwqNcIlxuICB9LFxuICBcIkRhbGFzaVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiR01EXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIkd1aW5lYSBGcmFuY1wiOiB7XG4gICAgXCJjb2RlXCI6IFwiR05GXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIlF1ZXR6YWxcIjoge1xuICAgIFwiY29kZVwiOiBcIkdUUVwiLFxuICAgIFwic3ltYm9sXCI6IFwiUVwiXG4gIH0sXG4gIFwiR3V5YW5hIERvbGxhclwiOiB7XG4gICAgXCJjb2RlXCI6IFwiR1lEXCIsXG4gICAgXCJzeW1ib2xcIjogXCIkXCJcbiAgfSxcbiAgXCJIb25nIEtvbmcgRG9sbGFyXCI6IHtcbiAgICBcImNvZGVcIjogXCJIS0RcIixcbiAgICBcInN5bWJvbFwiOiBcIiRcIlxuICB9LFxuICBcIkxlbXBpcmFcIjoge1xuICAgIFwiY29kZVwiOiBcIkhOTFwiLFxuICAgIFwic3ltYm9sXCI6IFwiTFwiXG4gIH0sXG4gIFwiQ3JvYXRpYW4gS3VuYVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiSFJLXCIsXG4gICAgXCJzeW1ib2xcIjogXCJrblwiXG4gIH0sXG4gIFwiR291cmRlIFVTIERvbGxhclwiOiB7XG4gICAgXCJjb2RlXCI6IFwiSFRHIFVTRFwiLFxuICAgIFwic3ltYm9sXCI6IFwiXCJcbiAgfSxcbiAgXCJGb3JpbnRcIjoge1xuICAgIFwiY29kZVwiOiBcIkhVRlwiLFxuICAgIFwic3ltYm9sXCI6IFwiRnRcIlxuICB9LFxuICBcIlJ1cGlhaFwiOiB7XG4gICAgXCJjb2RlXCI6IFwiSURSXCIsXG4gICAgXCJzeW1ib2xcIjogXCJScFwiXG4gIH0sXG4gIFwiTmV3IElzcmFlbGkgU2hlcWVsXCI6IHtcbiAgICBcImNvZGVcIjogXCJJTFNcIixcbiAgICBcInN5bWJvbFwiOiBcIuKCqlwiXG4gIH0sXG4gIFwiSW5kaWFuIFJ1cGVlXCI6IHtcbiAgICBcImNvZGVcIjogXCJJTlJcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiSW5kaWFuIFJ1cGVlIE5ndWx0cnVtXCI6IHtcbiAgICBcImNvZGVcIjogXCJJTlIgQlROXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIklyYXFpIERpbmFyXCI6IHtcbiAgICBcImNvZGVcIjogXCJJUURcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiSXJhbmlhbiBSaWFsXCI6IHtcbiAgICBcImNvZGVcIjogXCJJUlJcIixcbiAgICBcInN5bWJvbFwiOiBcIu+3vFwiXG4gIH0sXG4gIFwiSWNlbGFuZCBLcm9uYVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiSVNLXCIsXG4gICAgXCJzeW1ib2xcIjogXCJrclwiXG4gIH0sXG4gIFwiSmFtYWljYW4gRG9sbGFyXCI6IHtcbiAgICBcImNvZGVcIjogXCJKTURcIixcbiAgICBcInN5bWJvbFwiOiBcIkokXCJcbiAgfSxcbiAgXCJKb3JkYW5pYW4gRGluYXJcIjoge1xuICAgIFwiY29kZVwiOiBcIkpPRFwiLFxuICAgIFwic3ltYm9sXCI6IFwiXCJcbiAgfSxcbiAgXCJZZW5cIjoge1xuICAgIFwiY29kZVwiOiBcIkpQWVwiLFxuICAgIFwic3ltYm9sXCI6IFwiwqVcIlxuICB9LFxuICBcIktlbnlhbiBTaGlsbGluZ1wiOiB7XG4gICAgXCJjb2RlXCI6IFwiS0VTXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIlNvbVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiS0dTXCIsXG4gICAgXCJzeW1ib2xcIjogXCLQu9CyXCJcbiAgfSxcbiAgXCJSaWVsXCI6IHtcbiAgICBcImNvZGVcIjogXCJLSFJcIixcbiAgICBcInN5bWJvbFwiOiBcIuGfm1wiXG4gIH0sXG4gIFwiQ29tb3JvIEZyYW5jXCI6IHtcbiAgICBcImNvZGVcIjogXCJLTUZcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiTm9ydGggS29yZWFuIFdvblwiOiB7XG4gICAgXCJjb2RlXCI6IFwiS1BXXCIsXG4gICAgXCJzeW1ib2xcIjogXCLigqlcIlxuICB9LFxuICBcIldvblwiOiB7XG4gICAgXCJjb2RlXCI6IFwiS1JXXCIsXG4gICAgXCJzeW1ib2xcIjogXCLigqlcIlxuICB9LFxuICBcIkt1d2FpdGkgRGluYXJcIjoge1xuICAgIFwiY29kZVwiOiBcIktXRFwiLFxuICAgIFwic3ltYm9sXCI6IFwiXCJcbiAgfSxcbiAgXCJDYXltYW4gSXNsYW5kcyBEb2xsYXJcIjoge1xuICAgIFwiY29kZVwiOiBcIktZRFwiLFxuICAgIFwic3ltYm9sXCI6IFwiJFwiXG4gIH0sXG4gIFwiVGVuZ2VcIjoge1xuICAgIFwiY29kZVwiOiBcIktaVFwiLFxuICAgIFwic3ltYm9sXCI6IFwi0LvQslwiXG4gIH0sXG4gIFwiS2lwXCI6IHtcbiAgICBcImNvZGVcIjogXCJMQUtcIixcbiAgICBcInN5bWJvbFwiOiBcIuKCrVwiXG4gIH0sXG4gIFwiTGViYW5lc2UgUG91bmRcIjoge1xuICAgIFwiY29kZVwiOiBcIkxCUFwiLFxuICAgIFwic3ltYm9sXCI6IFwiwqNcIlxuICB9LFxuICBcIlNyaSBMYW5rYSBSdXBlZVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiTEtSXCIsXG4gICAgXCJzeW1ib2xcIjogXCLigqhcIlxuICB9LFxuICBcIkxpYmVyaWFuIERvbGxhclwiOiB7XG4gICAgXCJjb2RlXCI6IFwiTFJEXCIsXG4gICAgXCJzeW1ib2xcIjogXCIkXCJcbiAgfSxcbiAgXCJMaXRodWFuaWFuIExpdGFzXCI6IHtcbiAgICBcImNvZGVcIjogXCJMVExcIixcbiAgICBcInN5bWJvbFwiOiBcIkx0XCJcbiAgfSxcbiAgXCJMYXR2aWFuIExhdHNcIjoge1xuICAgIFwiY29kZVwiOiBcIkxWTFwiLFxuICAgIFwic3ltYm9sXCI6IFwiTHNcIlxuICB9LFxuICBcIkxpYnlhbiBEaW5hclwiOiB7XG4gICAgXCJjb2RlXCI6IFwiTFlEXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIk1vcm9jY2FuIERpcmhhbVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiTUFEXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIk1vbGRvdmFuIExldVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiTURMXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIk1hbGFnYXN5IEFyaWFyeVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiTUdBXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIkRlbmFyXCI6IHtcbiAgICBcImNvZGVcIjogXCJNS0RcIixcbiAgICBcInN5bWJvbFwiOiBcItC00LXQvVwiXG4gIH0sXG4gIFwiS3lhdFwiOiB7XG4gICAgXCJjb2RlXCI6IFwiTU1LXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIlR1Z3Jpa1wiOiB7XG4gICAgXCJjb2RlXCI6IFwiTU5UXCIsXG4gICAgXCJzeW1ib2xcIjogXCLigq5cIlxuICB9LFxuICBcIlBhdGFjYVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiTU9QXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIk91Z3VpeWFcIjoge1xuICAgIFwiY29kZVwiOiBcIk1ST1wiLFxuICAgIFwic3ltYm9sXCI6IFwiXCJcbiAgfSxcbiAgXCJNYXVyaXRpdXMgUnVwZWVcIjoge1xuICAgIFwiY29kZVwiOiBcIk1VUlwiLFxuICAgIFwic3ltYm9sXCI6IFwi4oKoXCJcbiAgfSxcbiAgXCJSdWZpeWFhXCI6IHtcbiAgICBcImNvZGVcIjogXCJNVlJcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiS3dhY2hhXCI6IHtcbiAgICBcImNvZGVcIjogXCJNV0tcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiTWV4aWNhbiBQZXNvIE1leGljYW4gVW5pZGFkIGRlIEludmVyc2lvbiAoVURJKVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiTVhOIE1YVlwiLFxuICAgIFwic3ltYm9sXCI6IFwiJFwiXG4gIH0sXG4gIFwiTWFsYXlzaWFuIFJpbmdnaXRcIjoge1xuICAgIFwiY29kZVwiOiBcIk1ZUlwiLFxuICAgIFwic3ltYm9sXCI6IFwiUk1cIlxuICB9LFxuICBcIk1ldGljYWxcIjoge1xuICAgIFwiY29kZVwiOiBcIk1aTlwiLFxuICAgIFwic3ltYm9sXCI6IFwiTVRcIlxuICB9LFxuICBcIk5haXJhXCI6IHtcbiAgICBcImNvZGVcIjogXCJOR05cIixcbiAgICBcInN5bWJvbFwiOiBcIuKCplwiXG4gIH0sXG4gIFwiQ29yZG9iYSBPcm9cIjoge1xuICAgIFwiY29kZVwiOiBcIk5JT1wiLFxuICAgIFwic3ltYm9sXCI6IFwiQyRcIlxuICB9LFxuICBcIk5vcndlZ2lhbiBLcm9uZVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiTk9LXCIsXG4gICAgXCJzeW1ib2xcIjogXCJrclwiXG4gIH0sXG4gIFwiTmVwYWxlc2UgUnVwZWVcIjoge1xuICAgIFwiY29kZVwiOiBcIk5QUlwiLFxuICAgIFwic3ltYm9sXCI6IFwi4oKoXCJcbiAgfSxcbiAgXCJOZXcgWmVhbGFuZCBEb2xsYXJcIjoge1xuICAgIFwiY29kZVwiOiBcIk5aRFwiLFxuICAgIFwic3ltYm9sXCI6IFwiJFwiXG4gIH0sXG4gIFwiUmlhbCBPbWFuaVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiT01SXCIsXG4gICAgXCJzeW1ib2xcIjogXCLvt7xcIlxuICB9LFxuICBcIkJhbGJvYSBVUyBEb2xsYXJcIjoge1xuICAgIFwiY29kZVwiOiBcIlBBQiBVU0RcIixcbiAgICBcInN5bWJvbFwiOiBcIkIvLlwiXG4gIH0sXG4gIFwiTnVldm8gU29sXCI6IHtcbiAgICBcImNvZGVcIjogXCJQRU5cIixcbiAgICBcInN5bWJvbFwiOiBcIlMvLlwiXG4gIH0sXG4gIFwiS2luYVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiUEdLXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIlBoaWxpcHBpbmUgUGVzb1wiOiB7XG4gICAgXCJjb2RlXCI6IFwiUEhQXCIsXG4gICAgXCJzeW1ib2xcIjogXCJQaHBcIlxuICB9LFxuICBcIlBha2lzdGFuIFJ1cGVlXCI6IHtcbiAgICBcImNvZGVcIjogXCJQS1JcIixcbiAgICBcInN5bWJvbFwiOiBcIuKCqFwiXG4gIH0sXG4gIFwiWmxvdHlcIjoge1xuICAgIFwiY29kZVwiOiBcIlBMTlwiLFxuICAgIFwic3ltYm9sXCI6IFwiesWCXCJcbiAgfSxcbiAgXCJHdWFyYW5pXCI6IHtcbiAgICBcImNvZGVcIjogXCJQWUdcIixcbiAgICBcInN5bWJvbFwiOiBcIkdzXCJcbiAgfSxcbiAgXCJRYXRhcmkgUmlhbFwiOiB7XG4gICAgXCJjb2RlXCI6IFwiUUFSXCIsXG4gICAgXCJzeW1ib2xcIjogXCLvt7xcIlxuICB9LFxuICBcIk5ldyBMZXVcIjoge1xuICAgIFwiY29kZVwiOiBcIlJPTlwiLFxuICAgIFwic3ltYm9sXCI6IFwibGVpXCJcbiAgfSxcbiAgXCJTZXJiaWFuIERpbmFyXCI6IHtcbiAgICBcImNvZGVcIjogXCJSU0RcIixcbiAgICBcInN5bWJvbFwiOiBcItCU0LjQvS5cIlxuICB9LFxuICBcIlJ1c3NpYW4gUnVibGVcIjoge1xuICAgIFwiY29kZVwiOiBcIlJVQlwiLFxuICAgIFwic3ltYm9sXCI6IFwi0YDRg9CxXCJcbiAgfSxcbiAgXCJSd2FuZGEgRnJhbmNcIjoge1xuICAgIFwiY29kZVwiOiBcIlJXRlwiLFxuICAgIFwic3ltYm9sXCI6IFwiXCJcbiAgfSxcbiAgXCJTYXVkaSBSaXlhbFwiOiB7XG4gICAgXCJjb2RlXCI6IFwiU0FSXCIsXG4gICAgXCJzeW1ib2xcIjogXCLvt7xcIlxuICB9LFxuICBcIlNvbG9tb24gSXNsYW5kcyBEb2xsYXJcIjoge1xuICAgIFwiY29kZVwiOiBcIlNCRFwiLFxuICAgIFwic3ltYm9sXCI6IFwiJFwiXG4gIH0sXG4gIFwiU2V5Y2hlbGxlcyBSdXBlZVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiU0NSXCIsXG4gICAgXCJzeW1ib2xcIjogXCLigqhcIlxuICB9LFxuICBcIlN1ZGFuZXNlIFBvdW5kXCI6IHtcbiAgICBcImNvZGVcIjogXCJTREdcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiU3dlZGlzaCBLcm9uYVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiU0VLXCIsXG4gICAgXCJzeW1ib2xcIjogXCJrclwiXG4gIH0sXG4gIFwiU2luZ2Fwb3JlIERvbGxhclwiOiB7XG4gICAgXCJjb2RlXCI6IFwiU0dEXCIsXG4gICAgXCJzeW1ib2xcIjogXCIkXCJcbiAgfSxcbiAgXCJTYWludCBIZWxlbmEgUG91bmRcIjoge1xuICAgIFwiY29kZVwiOiBcIlNIUFwiLFxuICAgIFwic3ltYm9sXCI6IFwiwqNcIlxuICB9LFxuICBcIkxlb25lXCI6IHtcbiAgICBcImNvZGVcIjogXCJTTExcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiU29tYWxpIFNoaWxsaW5nXCI6IHtcbiAgICBcImNvZGVcIjogXCJTT1NcIixcbiAgICBcInN5bWJvbFwiOiBcIlNcIlxuICB9LFxuICBcIlN1cmluYW0gRG9sbGFyXCI6IHtcbiAgICBcImNvZGVcIjogXCJTUkRcIixcbiAgICBcInN5bWJvbFwiOiBcIiRcIlxuICB9LFxuICBcIkRvYnJhXCI6IHtcbiAgICBcImNvZGVcIjogXCJTVERcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiRWwgU2FsdmFkb3IgQ29sb24gVVMgRG9sbGFyXCI6IHtcbiAgICBcImNvZGVcIjogXCJTVkMgVVNEXCIsXG4gICAgXCJzeW1ib2xcIjogXCIkXCJcbiAgfSxcbiAgXCJTeXJpYW4gUG91bmRcIjoge1xuICAgIFwiY29kZVwiOiBcIlNZUFwiLFxuICAgIFwic3ltYm9sXCI6IFwiwqNcIlxuICB9LFxuICBcIkxpbGFuZ2VuaVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiU1pMXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIkJhaHRcIjoge1xuICAgIFwiY29kZVwiOiBcIlRIQlwiLFxuICAgIFwic3ltYm9sXCI6IFwi4Li/XCJcbiAgfSxcbiAgXCJTb21vbmlcIjoge1xuICAgIFwiY29kZVwiOiBcIlRKU1wiLFxuICAgIFwic3ltYm9sXCI6IFwiXCJcbiAgfSxcbiAgXCJNYW5hdFwiOiB7XG4gICAgXCJjb2RlXCI6IFwiVE1UXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIlR1bmlzaWFuIERpbmFyXCI6IHtcbiAgICBcImNvZGVcIjogXCJUTkRcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiUGEnYW5nYVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiVE9QXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIlR1cmtpc2ggTGlyYVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiVFJZXCIsXG4gICAgXCJzeW1ib2xcIjogXCJUTFwiXG4gIH0sXG4gIFwiVHJpbmlkYWQgYW5kIFRvYmFnbyBEb2xsYXJcIjoge1xuICAgIFwiY29kZVwiOiBcIlRURFwiLFxuICAgIFwic3ltYm9sXCI6IFwiVFQkXCJcbiAgfSxcbiAgXCJOZXcgVGFpd2FuIERvbGxhclwiOiB7XG4gICAgXCJjb2RlXCI6IFwiVFdEXCIsXG4gICAgXCJzeW1ib2xcIjogXCJOVCRcIlxuICB9LFxuICBcIlRhbnphbmlhbiBTaGlsbGluZ1wiOiB7XG4gICAgXCJjb2RlXCI6IFwiVFpTXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIkhyeXZuaWFcIjoge1xuICAgIFwiY29kZVwiOiBcIlVBSFwiLFxuICAgIFwic3ltYm9sXCI6IFwi4oK0XCJcbiAgfSxcbiAgXCJVZ2FuZGEgU2hpbGxpbmdcIjoge1xuICAgIFwiY29kZVwiOiBcIlVHWFwiLFxuICAgIFwic3ltYm9sXCI6IFwiXCJcbiAgfSxcbiAgXCJVUyBEb2xsYXJcIjoge1xuICAgIFwiY29kZVwiOiBcIlVTRFwiLFxuICAgIFwic3ltYm9sXCI6IFwiJFwiXG4gIH0sXG4gIFwiUGVzbyBVcnVndWF5byBVcnVndWF5IFBlc28gZW4gVW5pZGFkZXMgSW5kZXhhZGFzXCI6IHtcbiAgICBcImNvZGVcIjogXCJVWVUgVVlJXCIsXG4gICAgXCJzeW1ib2xcIjogXCIkVVwiXG4gIH0sXG4gIFwiVXpiZWtpc3RhbiBTdW1cIjoge1xuICAgIFwiY29kZVwiOiBcIlVaU1wiLFxuICAgIFwic3ltYm9sXCI6IFwi0LvQslwiXG4gIH0sXG4gIFwiQm9saXZhciBGdWVydGVcIjoge1xuICAgIFwiY29kZVwiOiBcIlZFRlwiLFxuICAgIFwic3ltYm9sXCI6IFwiQnNcIlxuICB9LFxuICBcIkRvbmdcIjoge1xuICAgIFwiY29kZVwiOiBcIlZORFwiLFxuICAgIFwic3ltYm9sXCI6IFwi4oKrXCJcbiAgfSxcbiAgXCJWYXR1XCI6IHtcbiAgICBcImNvZGVcIjogXCJWVVZcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiVGFsYVwiOiB7XG4gICAgXCJjb2RlXCI6IFwiV1NUXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIkNGQSBGcmFuYyBCRUFDXCI6IHtcbiAgICBcImNvZGVcIjogXCJYQUZcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiU2lsdmVyXCI6IHtcbiAgICBcImNvZGVcIjogXCJYQUdcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiR29sZFwiOiB7XG4gICAgXCJjb2RlXCI6IFwiWEFVXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIkJvbmQgTWFya2V0cyBVbml0cyBFdXJvcGVhbiBDb21wb3NpdGUgVW5pdCAoRVVSQ08pXCI6IHtcbiAgICBcImNvZGVcIjogXCJYQkFcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiRXVyb3BlYW4gTW9uZXRhcnkgVW5pdCAoRS5NLlUuLTYpXCI6IHtcbiAgICBcImNvZGVcIjogXCJYQkJcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiRXVyb3BlYW4gVW5pdCBvZiBBY2NvdW50IDkoRS5VLkEuLTkpXCI6IHtcbiAgICBcImNvZGVcIjogXCJYQkNcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiRXVyb3BlYW4gVW5pdCBvZiBBY2NvdW50IDE3KEUuVS5BLi0xNylcIjoge1xuICAgIFwiY29kZVwiOiBcIlhCRFwiLFxuICAgIFwic3ltYm9sXCI6IFwiXCJcbiAgfSxcbiAgXCJFYXN0IENhcmliYmVhbiBEb2xsYXJcIjoge1xuICAgIFwiY29kZVwiOiBcIlhDRFwiLFxuICAgIFwic3ltYm9sXCI6IFwiJFwiXG4gIH0sXG4gIFwiU0RSXCI6IHtcbiAgICBcImNvZGVcIjogXCJYRFJcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiVUlDLUZyYW5jXCI6IHtcbiAgICBcImNvZGVcIjogXCJYRlVcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiQ0ZBIEZyYW5jIEJDRUFPXCI6IHtcbiAgICBcImNvZGVcIjogXCJYT0ZcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiUGFsbGFkaXVtXCI6IHtcbiAgICBcImNvZGVcIjogXCJYUERcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiQ0ZQIEZyYW5jXCI6IHtcbiAgICBcImNvZGVcIjogXCJYUEZcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiUGxhdGludW1cIjoge1xuICAgIFwiY29kZVwiOiBcIlhQVFwiLFxuICAgIFwic3ltYm9sXCI6IFwiXCJcbiAgfSxcbiAgXCJDb2RlcyBzcGVjaWZpY2FsbHkgcmVzZXJ2ZWQgZm9yIHRlc3RpbmcgcHVycG9zZXNcIjoge1xuICAgIFwiY29kZVwiOiBcIlhUU1wiLFxuICAgIFwic3ltYm9sXCI6IFwiXCJcbiAgfSxcbiAgXCJZZW1lbmkgUmlhbFwiOiB7XG4gICAgXCJjb2RlXCI6IFwiWUVSXCIsXG4gICAgXCJzeW1ib2xcIjogXCLvt7xcIlxuICB9LFxuICBcIlJhbmRcIjoge1xuICAgIFwiY29kZVwiOiBcIlpBUlwiLFxuICAgIFwic3ltYm9sXCI6IFwiUlwiXG4gIH0sXG4gIFwiUmFuZCBMb3RpXCI6IHtcbiAgICBcImNvZGVcIjogXCJaQVIgTFNMXCIsXG4gICAgXCJzeW1ib2xcIjogXCJcIlxuICB9LFxuICBcIlJhbmQgTmFtaWJpYSBEb2xsYXJcIjoge1xuICAgIFwiY29kZVwiOiBcIlpBUiBOQURcIixcbiAgICBcInN5bWJvbFwiOiBcIlwiXG4gIH0sXG4gIFwiWmFtYmlhbiBLd2FjaGFcIjoge1xuICAgIFwiY29kZVwiOiBcIlpNS1wiLFxuICAgIFwic3ltYm9sXCI6IFwiXCJcbiAgfSxcbiAgXCJaaW1iYWJ3ZSBEb2xsYXJcIjoge1xuICAgIFwiY29kZVwiOiBcIlpXTFwiLFxuICAgIFwic3ltYm9sXCI6IFwiXCJcbiAgfVxufTtcbiIsInZhciBmaW5hbmNlID0ge307XG5tb2R1bGVbJ2V4cG9ydHMnXSA9IGZpbmFuY2U7XG5maW5hbmNlLmFjY291bnRfdHlwZSA9IHJlcXVpcmUoXCIuL2FjY291bnRfdHlwZVwiKTtcbmZpbmFuY2UudHJhbnNhY3Rpb25fdHlwZSA9IHJlcXVpcmUoXCIuL3RyYW5zYWN0aW9uX3R5cGVcIik7XG5maW5hbmNlLmN1cnJlbmN5ID0gcmVxdWlyZShcIi4vY3VycmVuY3lcIik7XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcImRlcG9zaXRcIixcbiAgXCJ3aXRoZHJhd2FsXCIsXG4gIFwicGF5bWVudFwiLFxuICBcImludm9pY2VcIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiVENQXCIsXG4gIFwiSFRUUFwiLFxuICBcIlNERFwiLFxuICBcIlJBTVwiLFxuICBcIkdCXCIsXG4gIFwiQ1NTXCIsXG4gIFwiU1NMXCIsXG4gIFwiQUdQXCIsXG4gIFwiU1FMXCIsXG4gIFwiRlRQXCIsXG4gIFwiUENJXCIsXG4gIFwiQUlcIixcbiAgXCJBRFBcIixcbiAgXCJSU1NcIixcbiAgXCJYTUxcIixcbiAgXCJFWEVcIixcbiAgXCJDT01cIixcbiAgXCJIRERcIixcbiAgXCJUSFhcIixcbiAgXCJTTVRQXCIsXG4gIFwiU01TXCIsXG4gIFwiVVNCXCIsXG4gIFwiUE5HXCIsXG4gIFwiU0FTXCIsXG4gIFwiSUJcIixcbiAgXCJTQ1NJXCIsXG4gIFwiSlNPTlwiLFxuICBcIlhTU1wiLFxuICBcIkpCT0RcIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiYXV4aWxpYXJ5XCIsXG4gIFwicHJpbWFyeVwiLFxuICBcImJhY2stZW5kXCIsXG4gIFwiZGlnaXRhbFwiLFxuICBcIm9wZW4tc291cmNlXCIsXG4gIFwidmlydHVhbFwiLFxuICBcImNyb3NzLXBsYXRmb3JtXCIsXG4gIFwicmVkdW5kYW50XCIsXG4gIFwib25saW5lXCIsXG4gIFwiaGFwdGljXCIsXG4gIFwibXVsdGktYnl0ZVwiLFxuICBcImJsdWV0b290aFwiLFxuICBcIndpcmVsZXNzXCIsXG4gIFwiMTA4MHBcIixcbiAgXCJuZXVyYWxcIixcbiAgXCJvcHRpY2FsXCIsXG4gIFwic29saWQgc3RhdGVcIixcbiAgXCJtb2JpbGVcIlxuXTtcbiIsInZhciBoYWNrZXIgPSB7fTtcbm1vZHVsZVsnZXhwb3J0cyddID0gaGFja2VyO1xuaGFja2VyLmFiYnJldmlhdGlvbiA9IHJlcXVpcmUoXCIuL2FiYnJldmlhdGlvblwiKTtcbmhhY2tlci5hZGplY3RpdmUgPSByZXF1aXJlKFwiLi9hZGplY3RpdmVcIik7XG5oYWNrZXIubm91biA9IHJlcXVpcmUoXCIuL25vdW5cIik7XG5oYWNrZXIudmVyYiA9IHJlcXVpcmUoXCIuL3ZlcmJcIik7XG5oYWNrZXIuaW5ndmVyYiA9IHJlcXVpcmUoXCIuL2luZ3ZlcmJcIik7XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcImJhY2tpbmcgdXBcIixcbiAgXCJieXBhc3NpbmdcIixcbiAgXCJoYWNraW5nXCIsXG4gIFwib3ZlcnJpZGluZ1wiLFxuICBcImNvbXByZXNzaW5nXCIsXG4gIFwiY29weWluZ1wiLFxuICBcIm5hdmlnYXRpbmdcIixcbiAgXCJpbmRleGluZ1wiLFxuICBcImNvbm5lY3RpbmdcIixcbiAgXCJnZW5lcmF0aW5nXCIsXG4gIFwicXVhbnRpZnlpbmdcIixcbiAgXCJjYWxjdWxhdGluZ1wiLFxuICBcInN5bnRoZXNpemluZ1wiLFxuICBcInRyYW5zbWl0dGluZ1wiLFxuICBcInByb2dyYW1taW5nXCIsXG4gIFwicGFyc2luZ1wiXG5dO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCJkcml2ZXJcIixcbiAgXCJwcm90b2NvbFwiLFxuICBcImJhbmR3aWR0aFwiLFxuICBcInBhbmVsXCIsXG4gIFwibWljcm9jaGlwXCIsXG4gIFwicHJvZ3JhbVwiLFxuICBcInBvcnRcIixcbiAgXCJjYXJkXCIsXG4gIFwiYXJyYXlcIixcbiAgXCJpbnRlcmZhY2VcIixcbiAgXCJzeXN0ZW1cIixcbiAgXCJzZW5zb3JcIixcbiAgXCJmaXJld2FsbFwiLFxuICBcImhhcmQgZHJpdmVcIixcbiAgXCJwaXhlbFwiLFxuICBcImFsYXJtXCIsXG4gIFwiZmVlZFwiLFxuICBcIm1vbml0b3JcIixcbiAgXCJhcHBsaWNhdGlvblwiLFxuICBcInRyYW5zbWl0dGVyXCIsXG4gIFwiYnVzXCIsXG4gIFwiY2lyY3VpdFwiLFxuICBcImNhcGFjaXRvclwiLFxuICBcIm1hdHJpeFwiXG5dO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCJiYWNrIHVwXCIsXG4gIFwiYnlwYXNzXCIsXG4gIFwiaGFja1wiLFxuICBcIm92ZXJyaWRlXCIsXG4gIFwiY29tcHJlc3NcIixcbiAgXCJjb3B5XCIsXG4gIFwibmF2aWdhdGVcIixcbiAgXCJpbmRleFwiLFxuICBcImNvbm5lY3RcIixcbiAgXCJnZW5lcmF0ZVwiLFxuICBcInF1YW50aWZ5XCIsXG4gIFwiY2FsY3VsYXRlXCIsXG4gIFwic3ludGhlc2l6ZVwiLFxuICBcImlucHV0XCIsXG4gIFwidHJhbnNtaXRcIixcbiAgXCJwcm9ncmFtXCIsXG4gIFwicmVib290XCIsXG4gIFwicGFyc2VcIlxuXTtcbiIsInZhciBlbiA9IHt9O1xubW9kdWxlWydleHBvcnRzJ10gPSBlbjtcbmVuLnRpdGxlID0gXCJFbmdsaXNoXCI7XG5lbi5zZXBhcmF0b3IgPSBcIiAmIFwiO1xuZW4uYWRkcmVzcyA9IHJlcXVpcmUoXCIuL2FkZHJlc3NcIik7XG5lbi5jcmVkaXRfY2FyZCA9IHJlcXVpcmUoXCIuL2NyZWRpdF9jYXJkXCIpO1xuZW4uY29tcGFueSA9IHJlcXVpcmUoXCIuL2NvbXBhbnlcIik7XG5lbi5pbnRlcm5ldCA9IHJlcXVpcmUoXCIuL2ludGVybmV0XCIpO1xuZW4uZGF0YWJhc2UgPSByZXF1aXJlKFwiLi9kYXRhYmFzZVwiKTtcbmVuLmxvcmVtID0gcmVxdWlyZShcIi4vbG9yZW1cIik7XG5lbi5uYW1lID0gcmVxdWlyZShcIi4vbmFtZVwiKTtcbmVuLnBob25lX251bWJlciA9IHJlcXVpcmUoXCIuL3Bob25lX251bWJlclwiKTtcbmVuLmNlbGxfcGhvbmUgPSByZXF1aXJlKFwiLi9jZWxsX3Bob25lXCIpO1xuZW4uYnVzaW5lc3MgPSByZXF1aXJlKFwiLi9idXNpbmVzc1wiKTtcbmVuLmNvbW1lcmNlID0gcmVxdWlyZShcIi4vY29tbWVyY2VcIik7XG5lbi50ZWFtID0gcmVxdWlyZShcIi4vdGVhbVwiKTtcbmVuLmhhY2tlciA9IHJlcXVpcmUoXCIuL2hhY2tlclwiKTtcbmVuLmFwcCA9IHJlcXVpcmUoXCIuL2FwcFwiKTtcbmVuLmZpbmFuY2UgPSByZXF1aXJlKFwiLi9maW5hbmNlXCIpO1xuZW4uZGF0ZSA9IHJlcXVpcmUoXCIuL2RhdGVcIik7XG5lbi5zeXN0ZW0gPSByZXF1aXJlKFwiLi9zeXN0ZW1cIik7XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvamFyamFuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21haGRpZi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zcHJheWFnYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9ydXppbmF2LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL1NreWhhcnRtYW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbW9zY296LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2t1cmFmaXJlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyLzkxYmlsYWwvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaWdvcmdhcnliYWxkaS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jYWxlYm9nZGVuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21hbHlraGludi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qb2VsaGVsaW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva3VzaHNvbGl0YXJ5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2NvcmV5d2ViLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3Nub3dzaGFkZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hcmV1cy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9ob2xkZW53ZWIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaGV5aW1qdWFuaS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9lbnZleC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci91bnRlcmRyZWh0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2NvbGxlZ2VtYW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcGVlamZhbmNoZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYW5keWlzb25saW5lLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3VsdHJhZ2V4LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Z1Y2tfeW91X3R3by8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hZGVsbGVjaGFybGVzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2F0ZW5ldXBvcHVsYXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWhtZXRhbHBiYWxrYW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvU3RpZXZpdXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva2VyZW0vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvb3N2YWxkYXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYW5nZWxjZWJhbGxvcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90aGllcnJ5a29ibGVudHovMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcGV0ZXJsYW5kdC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jYXRhcmluby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci93ZWdsb3YvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYnJhbmRjbGF5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FobWV0c3VsZWsvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbmljb2xhc2ZvbGxpb3QvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvamF5cm9iaW5zb24vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdmljdG9yZXJpeG9uLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2tvbGFnZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9taWNoemVuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21hcmtqZW5raW5zLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL25pY29sYWlfbGFyc2VuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2d0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL25veGR6aW5lLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FsYWdvb24vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaWRpb3QvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWl6a28vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2hhZGVuZ2xlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL211dGx1ODIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc2ltb2JlbnNvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3ZvY2luby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9ndWlpaXBvbnRlcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zb3lqYXZpLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2pvc2hhdXN0aW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdG9tYXNsYXUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvVmluVGhvbWFzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL01hbmlrUmF0aGVlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2xhbmdhdGUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2Vtc2hpZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9sZWVtdW5yb2UvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvX3NoYWhlZGsvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZW5kYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9CaWxsU0tlbm5leS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kaXZ5YS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qb3NoaGVtc2xleS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zaW5kcmVzb3JodXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc29mZmVzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyLzlsZXNzb25zLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2xpbnV4MjkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvQ2hha2ludG9zaC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbmFhbWkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvam9yZWlyYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zaGFkZWVkOS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zY290dGtjbGFyay8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qZWRicmlkZ2VzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3NhbGxlZWRlc2lnbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYXJha2FzaW5hLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FyaWlsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL0JyaWFuUHVya2lzcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9taWNoYWVsbWFydGluaG8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYnVibGllbmtvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2RldmFua29zaGFsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL1phY2hhcnlab3JiYXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdGltbWlsbHdvb2QvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvam9zaHVhc29ydGluby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kYW1lbmxlZXR1cmtzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RvbWFzX2phbm91c2VrLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2hlcnJoYWFzZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9SdXNzZWxsQmlzaG9wLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2JyYWplc2h3YXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2JyYWNjby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9iZXJtb25wYWludGVyLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FiZHVsbGluZGVuaXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaXNhY29zdGEvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc3VwcmIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIveWFsb3poa2luLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2NoYW5kbGVydmR3LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2lhbWdhcnRoLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL192aWN0YS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jb21tYWRlbGltaXRlZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yb3liYXJiZXJ1ay8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9heGVsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3ZsYWRhcmJhdG92LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2ZmYmVsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3N5cm9waWFuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Fua2l0aW5kLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RyYW5lYmxvdy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9mbGFzaG11cnBoeS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9DaHJpc0ZhcmluYTc4LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2JhbGlvbWVnYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zYXNjaGFtdC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qbV9kZW5pcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbm9mZi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9rZW5ueWFkci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jaGF0eXJrby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kaW5neWkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWRzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RlcnJ5eGxpZmUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWFyb25pLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2tpbmRheS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9wcnJzdG4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZWR1YXJkb3N0dWFydC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kaGlsaXBzaXZhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL0dhdmljb0luZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9iYWlyZXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcm9oaXh4LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2JpZ21hbmNoby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9ibGFrZXNpbWtpbnMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbGVlaWlvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RqcnVzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3ViZXJzY2hpem8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva3lsZWZvdW5kcnkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2xhdWRpb2d1Z2xpZXJpLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3JpcHBsZW1kay8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9leGVudHJpY2gvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvamFrZW1vb3JlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2pvYW9lZHVtZWRlaXJvcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9wb29ybWluaS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90ZXJlc2hlbmtvdi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9rZXJ5aWxtYXovMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaGF5ZG5fd29vZHMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcnVkZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9sbHVuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3NnYXVyYXZfYmFnaGVsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2phbWllYnJpdHRhaW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYmFkbGl0dGxlZHVjay8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9waWZhZ29yLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Fncm9tb3YvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYmVuZWZyaXR6LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Vyd2FuaGVzcnkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGllc2VsbGF3cy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qZXJlbWlhaGEvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva29yaWRoYW5keS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jaGFlbnNlbC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbmRyZXdjb2hlbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zbWFjem55LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2dvbnphbG9yb2JhaW5hLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL25hbmRpbmlfbS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zeWRsYXdyZW5jZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jZGhhcnJpc29uLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RnZXJrZW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbGV3aXNhaW5zbGllLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2NoYXJsaWVjd2FpdGUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcm9iYnNjaGlsbGVyLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2ZsZXhycy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYXR0ZGV0YWlscy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yYXF1ZWx3aWxzb24vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva2Fyc2gvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbXJtYXJ0aW5lYXUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvb3Buc3JjZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9oZ2hhcnJ5Z28vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWF4aW1zZXNodWsvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdXhhbGV4LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3NhbWloYWgvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2hhbnBvcnkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc2hhcnZpbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qb3NlbWFycXVlcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qZWZmZmlzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2tyeXN0YWxmaXN0ZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbG9rZXNoX2NvZGVyLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RoZWRhbWlhbmhkZXovMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZHBtYWNoYWRvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Z1bndhdGVyY2F0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RpbW90aHljZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9pdmFuZmlsaXBvdmJnLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3BpY2FyZDEwMi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYXJjb2JhcmJvc2EvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva3Jhc25vdWtob3YvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZzNkLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FkZW1pbHRlci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yaWNrZHQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvb3BlcmF0aW5vLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2J1bmdpd2FuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2h1Z29tYW5vLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2xvZ29yYWRvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2RjX3VzZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaG9yYWNpb2JlbGxhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL1NsYWFwTWUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdGVlcmFnaXQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaXFvbmljZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9pbHlhX3Blc3Rvdi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbmRyZXdhcnJvdy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zc2lza2luZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zdGFuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL0hlbnJ5SG9mZm1hbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yZHNhdW5kZXJzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FkYW1zeHUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY3VyaW91c29mZmljZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90aGVtYWRyYXkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWljaGlnYW5ncmFoYW0vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva29oZXR0ZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9uaWNrZnJhdHRlci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9ydW5uaW5nc2t1bGwvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWFkeXNvbmRlc2lnbnMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYnJlbnRvbl9jbGFya2UvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvamVubnlzaGVuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2JyYWRlbmhhbW0vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva3VydGluYy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbWFucnV6YWluaS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jb3JleWhhZ2dhcmQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvS2FyaW1tb3ZlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Fhcm9uYWxmcmVkLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3d0cnNsZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qaXRhY2hpLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RoZXJlYWxtYXJ2aW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcG1laXNzbmVyLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL29vb216LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2NoYWNreTE0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2plc3NlZGR5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3NoYW5laHVkc29uLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FrbXVyLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL0lzYXJ5QW1haXJhbmkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYXJ0aHVyaG9sY29tYmUxLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2JveG1vZGVsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Voc2FuZGlhcnkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvTHVjYXNQZXJkaWRhby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zaGFsdDBuaS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zd2FwbG9yZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9rYWVsaWZhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3BsYmFiaW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZ3VpbGxlbWJvdGkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYXJpbmRhbV8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcmVuYnlyZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90aGlhZ292ZXJuZXR0aS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qbWlsbHNwYXlzYmlsbHMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWlrZW1haTJhd2Vzb21lLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2plcnZvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21la2FsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3N0YTFleC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yb2JlcmdkLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2ZlbGlwZWNzbC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbmRyZWEyMTEwODcvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZ2FyYW5kLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Rob295ZW5nYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hYm92ZWZ1bmN0aW9uLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3BjcmlkZXNhZ2Fpbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yYW5kb21saWVzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL0JyeWFuSG9yc2V5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2hleWtlbm5ldGgvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGFocGFycmEvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWxsdGhpbmdzc21pdHR5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2RhbnZlcm5vbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9iZXdlaW5yZWljaC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9pbmNyZWFzZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9mYWx2YXJhZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbHhuZHJ1c3Rpbm92LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3NvdXVmLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL29ya3VuY2F5bGFyLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL0FNX0tuMi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9nZWFycGl4ZWxzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Jhc3NhbW9sb2d5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3ZpbWFyZXRob21hcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9rb3NtYXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvU1VMaWlrLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21yamFtZXNub2JsZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zaWx2YW5tdWhsZW1hbm4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc2hhbmVJeEQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbmFjaG8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIveWlnaXRwaW5hcmJhc2kvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYnV6enVzYm9ybmUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWFyb25rd2hpdGUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcm1sZXdpc3VrLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2dpYW5jYXJsb24vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbmJpcmNrZWwvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZF9ubnlfbV9jaGVyLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3NkaWRvbmF0by8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hdGFyaWJveS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hYm90YXAvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva2FyYWxlay8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9wc2Rlc2lnbnVrLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2x1ZHdpY3pha3Bhd2VsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL25lbWFuamFpdmFub3ZpYy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9iYWx1bGkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWhtYWRham1pLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3Zvdmthc29sb3Zldi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zYW1ncm92ZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGVyaWVuem83NzcvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvam9uYXRoYW5zaW1tb25zLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL25lbHNvbmpveWNlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL1MwdWZpNG4zLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3h0b3BoZXJwYXVsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL29ha3RyZWVtZWRpYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9uYXRlc2NodWx0ZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9maW5kaW5namVubnkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbmFtYW5rcmVhdGl2ZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbnRvbnl6b3Rvdi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci93ZV9zb2NpYWwvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbGVlaGFtYmxleS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zb2xpZF9jb2xvci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hYmVsY2FiYW5zLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21iaWxkZXJiYWNoLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2trdXNhYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qb3JkeXZkYm9vbS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jYXJsb3NnYXZpbmEvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcGVjaGtpbmF0b3IvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdmMyNy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yZGJhbm5vbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jcm9ha3gvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc3VyaWJibGVzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2tlcmloZW5hcmUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2F0YWRlbGVvbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9nY21vcmxleS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kdWl2dnYvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc2FzY2hhZHJvc3RlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3ZpY3RvckR1YnVncmFzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3dpbnRvcGlhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21hdHRiaWxvdHRpLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RheWxvcmxpbmcvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWVnZHJhd3MvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWVsbjFrcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYWhtb3VkbWV0d2FsbHkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvU2lsdmVyZWRnZTkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGVyZWtlYnJhZGxleS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9oYXBweXBldGVyMTk4My8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90cmF2aXNfYXJub2xkLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FydGVtX2tvc3RlbmtvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Fkb2JpLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2RheWtpaW5lLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FsZWtfZGp1cmljLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3NjaXBzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21pZ3VlbG1lbmRlcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qdXN0aW5yaGVlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Fsc29icm9va3MvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZnJvbngvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWNmbHlkZXNpZ24vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc2FudGlfdXJzby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbGxmb3JkZXNpZ24vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc3RheXViZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYmVydGJvZXJsYW5kLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21hcm9zaG9sbHkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWRhbW5hYy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jeW50aGlhc2F2YXJkLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL211cmluZ2EvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGFucm8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaGllbWlsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2phY2tpZXNhaWsvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaWR1dWNrLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FudGphbnVzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Fyb29uX3NoYXJtYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kc2hzdGVyLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RoZWhhY2tlci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9taWNoYWVsYnJvb2tzanIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcnlhbm1jbGF1Z2hsaW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2x1YmIzcnJ5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RheWJlbmxvci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci94cmlwdW5vdi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9teWFzdHJvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FkaXR5YXN1dG9tby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kaWdpdGFsbWF2ZXJpY2svMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaGphcnRzdHJvcm4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaXRvbG1hY2gvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdmF1Z2hhbm1vZmZpdHQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWJkb3RzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2lzbmlmZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc2VyZ2V5c2Fmb25vdi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYXovMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc2NyYXBkbmIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2hyaXNtajgzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3ZpdG9ybGVhbC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zb2thbml3YWFsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3pha2kzZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9pbGx5em9yZW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbW9jYWJ5dGUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvb3NtYW5pbmNlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Rqc2hlcm1hbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kYXZpZGhlbXBoaWxsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3dhZ2huZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbmVjb2R5bWljb25lci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9wcmF2ZWVuX3ZpamF5YS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9mYWJicnVjY2kvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdHJhdmlzaGluZXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva3VsZGFya2FsdmlrLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL0VsdF9uLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3BoaWxsYXBpZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvb2tzZWFuamF5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2lkODM1NTU5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2t1ZHJldGtlc2tpbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbmpoZXJvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2R1Y2s0ZnVjay8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zY290dF9yaWxleS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9ub3VmYWxpYnJhaGltLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2gxYnJkLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Jvcmdlc19tYXJjb3MvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGV2aW5oYWxsYWRheS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jaWFyYW5yLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3N0ZWZvb28vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWlrZWJlZWNoYW0vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdG9ueW1pbGxpb24vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvam9zaHVhcmFpY2h1ci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9pcmFlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3BldHJhbmdyLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2RtaXRyaXljaHV0YS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jaGFybGllZ2Fubi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hcmFzaG1hbnRlZ2hpLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FkaGFtZGFubmF3YXkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWluc2xleXdhZ29uLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3N2ZW5sZW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZmFpc2FsYWJpZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9iZXNodXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2FybHlzb24vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZHV0Y2huYWRpYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90ZWRkeXpldHRlcmx1bmQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc2FtdWVsa3JhZnQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYW9pbWVkaWEvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdG9kZHJldy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jb2RlcG9ldF9ydS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hcnR2YXZzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Jlbm9pdGJvdWNhcnQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvam9tYXJtZW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva29sbWFybG9wZXovMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY3JlYXJ0aW5jLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2hvbWthLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2dhYm9yZW50b24vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcm9iaW5jbGVkaWVyZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYXhpbXNvcm9raW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcGxhc3RpY2luZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qMmRlbWUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcGVhY2hhbmFuci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9rYXBhbHVjY2lvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2RlX2FzY2FuaW8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcmlrYXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGF3aWR3dS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYXJjb3JhbWlyZXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYW5nZWxjcmVhdGl2ZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9ycGF0ZXkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcG9wZXkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcmVoYXRrYXRodXJpYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90aGVfcHVycGxlYnVubnkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvMW1hcmtpei8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hamF4eV9ydS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9icmVubXVycmVsbC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kdWRlc3RlaW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvb3NrYXJsZXZpbnNvbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci92aWN0b3JzdHViZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbmVoZnkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdmljaXZhZGVsaW5lLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2xlYW5kcm92YXJhbmRhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3Njb3R0Z2FsbGFudC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci92aWN0b3JfaGF5ZGluLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3Nhd3JiLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3J5aGFuaGFzc2FuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FtYXl2cy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hX2JyaXhlbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9rYXJvbGtyYWtvd2lha18vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaGVya3VsYW5vLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2dlcmFuNy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jZ2dhdXJhdi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jaHJpc193aXRrby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9sb3Nvc2luYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9wb2xhcml0eS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYXR0bGF0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2JyYW5kb25idXJrZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jb25zdGFudHgvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdGV5bG9yZmVsaXovMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY3JhaWdlbGltZWxpYWgvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcmFjaGVscmV2ZWxleS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yZWFibzEwMS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yYWhtZWVuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2t5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3JpY2t5eWVhbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qMDRudG9oLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3NwYnJvbWEvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc2ViYXNodG9uLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2pwZW5pY28vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZnJhbmNpc192ZWdhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL29rdGF5ZWxpcGVrLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2tpa2lsbG8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZmFiYmlhbnovMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbGFycnlnZXJhcmQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvQnJvdW1pWW91c3NlZi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci8wdGhlcnBsYW5ldC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYmlsYWxzaWRkaXF1ZTEvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaW9udXNzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2dycnJfbmwvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbGltaW5oYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yYXdkaWdnaWUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcnlhbmRvd25pZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zZXRobG91ZXkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcGl4YWdlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FycGl0bmovMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc3dpdG1lcjc3Ny8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qb3Nldm5jbGNoLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2thbmlja2FpcmFqLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3B1emlrLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RiYWtkZXNpZ25zLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Jlc2J1anVwaS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zdXBqb2V5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2xvd2llLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2xpbmtpYm9sLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2JhbGludG9yb3N6LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2ltY29kaW5nLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FndXN0aW5jcnVpei8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9ndXNvdG8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdGhvbWFzc2NocmlqZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc3VwZXJvdXRtYW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva2FsbWVycmF1dGFtLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2dhYnJpZWxpemFsby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9nb2plYW55bi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kYXZpZGJhbGRpZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9fdm9qdG8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbGF1cmVuZ3JheS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qeWRlc2lnbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9teW15Ym95LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL25lbGxsZW8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWFyY2lvdG9sZWRvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL25pbmphZDNtMC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90b19zb2hhbS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9oYXNzbHVuc2ZvcmQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbXVyaWRyYWhoYWwvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbGV2aXNhbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9ncmFoYW1rZW5uZXJ5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2xlcGV0aXRvZ3JlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FudG9uZ2Vua2luLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL25lc3NvaWxhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FtYW5kYWJ1emFyZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zYWZyYW5rb3YvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY29jb2xlcm8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZHNzNDkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWF0dDMyMjQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYmx1ZXNpeC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9xdWFpbGFuZHF1YXNhci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9BbGJlcnRvQ29jb2NpLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2xlcGluc2tpLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3NlbWVudGl5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21odWRvYml2bmlrLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RoaWJhdXRfcmUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvb2xnYXJ5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3Nob2piZXJnLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL210b2xva29ubmlrb3YvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYmVyZXRvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL25hdXBpbnRvcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci93ZWdvdHZpY2VzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3hhZGhpeC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYWN4aW0vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcm9kbnlsb2Jvcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYWRjYW1wb3MvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWFkZWJ5dmFkaW0vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYmFydG9zemRhd3lkemlrLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3N1cGVydm92YS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYXJrcmV0emxvZmYvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdm9uYWNob28vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGFyeWx3cy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zdGV2ZWRlc2lnbmVyLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL215bGVzYi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9oZXJiaWd0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2RlcGF1bGF3YWduZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZ2VzaGFuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2dpem1lZWRldmlsMTk5MS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9fc2NvdHRidXJnZXNzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2xpc292c2t5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Rhdmlkc2FzZGEvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYXJ0ZF9zaWduLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL1lvdW5nQ3V0bGFzcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tZ29udG8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaXRzdG90YWxseWFteS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci92aWN0b3JxdWlubi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9vc21vbmQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvb2tzYW5hZnJld2VyLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3phdWVya3JhdXQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaWFta2VpdGhtYXNvbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9uaXRpbmhheWFyYW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbG1qYWJyZXUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWFuZGFsYXJlb3BlbnMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdGhpbmtsZWZ0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3BvbmNob21lbmRpdmlsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2p1YW1wZXJyby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9icnVub2Rlc2lnbjEyMDYvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2FzZXljYXZhbmFnaC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9sdXhlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2RvdGdyaWRsaW5lLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3NwZWR3aWcvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWFkZXd1bGYvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWF0dHNhcGlpLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2hlbGRlcmxlYWwvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2hyaXNzdHVtcGgvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvamF5cGhlbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9uc2Ftb3lsb3YvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2hyaXN2YW5kZXJrb29pLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2p1c3RtZV90aW1vdGh5Zy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9vdG96ay8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9wcmluemFkaS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9ndTV0YWYvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY3lyaWxfZ2FpbGxhcmQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZF9rb2JlbHlhdHNreS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kYW5pbG9jLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL253ZHNoYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yb21hbmJ1bGFoLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3Nra2lyaWxvdi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kdmR3aW5kZW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGFubm9sLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RoZWtldmluam9uZXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvandhbHRlcjE0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RpbWd0aG9tYXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYnVkZGhhc291cmNlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3V4cGlwZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdGhhdG9uZXRvbW15LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2RpYW5zaWdpdHAvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWRyaWVudGhzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2tsaW1ta2EvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZ2thYW0vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGVyZWtjcmFtZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvamVubnl5by8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9uZXJyc29mdC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci94YWxpb25tYWxpay8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9lZGhlbmRlcnNvbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9rZXl1cmk4NS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yb3hhbmVqYW1tZXQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva2ltY29vbC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9lZGtmLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21hdGtpbnMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWxlc3NhbmRyb3JpYmUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvamFja3NvbmxhdGthLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2xlYnJvbmplbm5hbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9rb3N0YXNwdC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9rYXJsa2FuYWxsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21veW5paGFuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2RhbnBsaWVnby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zYXVsaWhpcnZpLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3dlc2xleXRyYW5raW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZmphZ3Vlcm8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYm93YnJpY2svMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWFzaGFhYWFhbC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci95YXNzaXJ5YWh5YS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kcGFycmVsbGkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZm90b21hZ2luLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FrYV9qYW1lcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kZW5pc2VwaXJlcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9pcWJhbHBlcmthc2EvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWFydGluYW5zdHkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvamFyc2VuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3Jfb3kvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvanVzdGlucm9iLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2dhYnJpZWxyb3NzZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWFsZ29yZG9uLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2NhcmxmYWlyY2xvdWdoLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21pY2hhZWxhYmVoc2VyYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9waWVycmVzdG9mZmUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZW5qb3l0aGV0YXUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbG9nYW5qbGFtYmVydC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9ycGVlenkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY29yZXlnaW5uaXZhbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9taWNoYWxocm9uLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21zdmVldC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9saW5nZXN3YXJhbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9rb2xzdmVpbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9wZXRlcjU3Ni8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yZWlkZWlyZWRhbGUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvam9leW11cmRhaC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yYXBoYWVsbmlrc29uLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL212ZGhldXZlbC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYXhsaW5kZXJtYW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvamltbXVpcmhlYWQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYmVncmVhdGl2ZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9mcmFua2llZnJlZXNiaWUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcm9idHVybGluY2t4LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL1RhbGJpX0NvblNlcHQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbG9uZ2xpdmVteXdvcmQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdmFuY2hlc3ovMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWFpa2xhbS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9oZXJtYW5vYnJvdGhlci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yZXpfX19hLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2dyZWdzcXVlZWIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZ3JlZW5iZXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvX3JhZ3pvci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbnRob255c3Vrb3cvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZmx1aWRicnVzaC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kYWN0cnRyLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2plaG5nbHlubi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9iZXJnbWFydGluLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2h1Z29jb3JuZWpvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL19ra2dhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2R6YW50aWV2bS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zYXdhbGF6YXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc292ZXNvdmUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvam9uc2dvdHdvb2QvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYnlyeWFuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3Z5dGF1dGFzX2EvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWl6aGdhbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jaWNlcm9ici8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9uaWxzaGVsbWVyc3Nvbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kMzNwdGhvdWdodC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kYXZlY3JhaWdlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL25ja2pydnMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWxleGFuZGVybWF5ZXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvamN1YmljLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2NyYWlncmNvbGVzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2JhZ2F3YXJtYW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcm9iX3Rob21hczEwLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2NvZmxhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21haWtlbGsvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcnRnaWJib25zLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3J1c3NlbGxfYmF5bGlzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21oZXNzbG93LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2NvZHlzYW5maWxpcHBvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3dlYnRhbnlhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21hZGVieWJyZW50b24vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGNhbG9uYWNpLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3BlcmZlY3RmbG93LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2pqc2lpaS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zYWFyYWJwcmVldC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9rdW1hcnJhamFuMTIxMjMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaWFtc3RlZmZlbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90aGVtaWtlbmFnbGUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2Vla2F5dHdlZXQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbGFycnlib2x0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2NvbnNwaXJhdG9yLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2RhbGxhc2JwZXRlcnMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbjNkbWF4LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RlcnBpbW9zdC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9ieXJuZWNvcmUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIval9kcmFrZV8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2FsZWJqb3ljZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9ydXNzb2VkdS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9ob2FuZ2xvaS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90b2J5c2F4b24vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZ29mcmFzZGVzaWduLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2RpbWFwb3NueXkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdGppc291c2EvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvb2thbmR1bmdlbC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9iaWxseXJvc2hhbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9vc2thbWF5YS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tb3Rpb250aGlua3MvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva25pbG9iLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FzaG9ja2ExOC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYXJyaW1vLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2JhcnRqby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9vbW5penlhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2VybmVzdHNlbWVyZGEvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYW5kcmVhc19wci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9lZGdhcmNocmlzOTkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdGhvbWFzZ2Vpc2VuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2dzZWd1aW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvam9hbm5lZm91cm5pZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGVtZXJzZGVzaWducy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hZGFtbWFyc2Jhci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9uYXNpcndkLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL25fdGFzc29uZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qYXZvcnN6a3kvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdGhlbXJkYXZlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3llY2lkc20vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbmljb2xsZXJpY2gvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2FuYXB1ZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9uaWNvbGVnbHlubi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qdWR6aGluX21pbGVzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Rlc2lnbmVydnptLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2tpYW5vc2hwLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2V2YW5kcml4LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FsdGVyY2h1Y2EvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGhydWJvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21hX3RpYXgvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc3NiYl9tZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kb3JwaGVybi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYXVyaW9sZy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9icnVub19tYXJ0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21hY3RvcHVzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RoZV93aW5zbGV0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2pvZW1kZXNpZ24vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvU2hyaWlpaWltcC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qYWNvYmJlbm5ldHQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbmZlZG9yb2ZmLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2lhbWdsaW15LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FsbGFncmluZ2F1cy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9haWlhaWlhaWkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvb2xhb2x1c29nYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9idXJ5YWtuaWNrLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3dpbTFrLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL25pY2tsYWNrZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hMWNoYXBvbmUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc3RleW52aWxqb2VuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3N0cmlrZXdhbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yeWFua2lya21hbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbmRyZXdhYm9nYWRvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Rvb29vbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qYWdhbjEyMy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hcmlmZnNldGlhd2FuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2VsZW5hZGlzc2kvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbXdhcmtlbnRpbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90aGllcnJ5bWVpZXJfLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3JfZ2FyY2lhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2RtYWNrZXJtYW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYm9yYW50dWxhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2tvbnVzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3NwYWNld29vZF8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcnl1Y2hpMzExLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2V2YW5zaGFqZWQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdHJpc3RhbmxlZ3Jvcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zaG9haWIyNTMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWlzbGlubmtlbGx5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL29rY29rZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdGltcGV0cmljb2xhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3N1bnNoaW5lZGdpcmwvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2hhZGFtaS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbGVjbGFyc29uaXYvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbm9taWRlc2lnbnMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcGV0ZWJlcm5hcmRvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3Njb3R0aWVkdWRlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21pbGxpbmV0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2ltc29wZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaW1hbW11aHQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYmVuamFtaW5fa25pZ2h0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL25lcGR1ZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qb2tpNC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9sYW5jZWd1eWF0dC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9iYm95MTg5NS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbXl3ZWJiYi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yd2V2ZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9oYXJ1aW50ZXNldHRkZW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcmljYnVydG9uLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL25lbHNoZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9iYXRzaXJhaS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9wcmltb3pjaWdsZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvamZmZ3JkbnIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvOGQzay8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9nZW5lc2VsZXpuZXYvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWxfbGkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc291cGVycGhseS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tc2xhcmtpbmEvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvMmZvY2t1cy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jZGF2aXM1NjUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIveGllbC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90dXJrdXR1dWxpLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3V4d2FyZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9sZWJpbm9jbGFyZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9nYXVyYXZqYXNzYWwvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGF2aWRtZXJyaXF1ZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tZHNpc3RvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FuZHJld29mZmljZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva29qb3VyaW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZG5pcm1hbC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9rZXZrYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tcl9zaGl6bml0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FsdWlzaW9fYXpldmVkby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jbG91ZHN0dWRpby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kYW52aWVyaWNoLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FsZXhpdmFuaWNoa2luLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2ZyYW5fbWNoYW15LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3BlcnJldG1hZ2FsaS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9iZXRyYXlkYW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2FkaWtrYXJhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21hdGJlZWRvdGNvbS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qZXJlbXl3b3Jib3lzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2JwYXJ0cmlkZ2UvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWljaGFlbGtvcGVyLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3NpbHYzcmd2bi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbGV2aXppby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qb2huc21pdGhhZ2VuY3kvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbGF3bGJ3b3kvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdml0b3IzNzYvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGVzYXN0cm96by8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90aGltb19jei8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qYXNvbm1hcmtqb25lcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9saGF1c2VybWFubi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci94cmF2aWwvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZ3Vpc2NobWl0dC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci92aWdvYnJvbngvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcGFuZ2hhbDAvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWlndWVsa29vcmVtYW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc3VyZ2VvbmlzdC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jaHJpc3RpYW5vbGlmZi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jYXNwZXJncmwvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaWFta2FybmEvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaXBhdmVsZWsvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcGllcnJlX25lbC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci95MmdyYXBoaWMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc3RlcmxpbmdydWxlcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9lbGJ1c2NhaW5mby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9iZW5ueWppZW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc3R1c2hvbmEvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZXN0ZWJhbnVyaWJlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2VtYnJjZWNyZWF0aW9ucy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kYW5pbGxvcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9lbGxpb3RsZXdpcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jaGFybGVzcnByYXR0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3ZsYWR5bi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9lbW1lZmZlc3MvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2FybG9zYmxhbmNvX2V1LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2xlb25mZWRvdG92LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3JhbmdhZmFuZ3MvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2hyaXNfZnJlZXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdGdvcm10eC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9icnlhbl90b3BoYW0vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvanBzY3JpYmJsZXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWlnaHR5NTUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2FyYm9udHdlbHZlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2lzYWFjZmlmdGgvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaWFtamRlbGVvbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zbm93d3JpdGUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYmFycHV0cm8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZHJld2J5cmVlc2UvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc2FjaGFjb3JhenppLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Jpc3RyaWFuaW9zaXAvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWFnb28wNC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9wZWhhbW9uZGVsbG8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIveWF5dGVlamF5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FfaGFycmlzODgvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWxndW5zYW5hYnJpYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci96Zm9ycmVzdGVyLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL292YWxsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Nhcmxvc2pnc291c2EvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZ2VvYmlrYXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWhfbGljZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9sb29uZXlkb29kbGUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbmVyZGdyOC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kZGdnY2NhYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci96YWNrZWVsZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbm9ybWFuYm94LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2VsX2Z1ZXJ0aXNpbW8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaXNtYWlsX2JpbHRhZ2kvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvanVhbmdvbWV6dy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qbm1ucmQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcGF0cmlja2Nvb21iZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yeWFuam9obnNvbl9tZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYXJrb2xzY2hlc2t5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2plZmZnb2xlbnNraS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9rdmFzbmljLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2dhdWNob21hdHQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWZ1c2luYXR0by8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9rZXZpbm9oLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL29rYW5zdXJyZWVsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FkYW1hd2Vzb21lZmFjZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9lbWlsZWJvdWRlbGluZy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hcmlzaGlfLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2p1YW5tYW1hcnRpbmV6LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3dpa2l6aW5lci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kYW50aG1zLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21rZ2luZm8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdGVycm9ycGl4ZWwvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY3VyaW91c29uYXV0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3ByaGVlbW8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWljaGFlbGNvbGVuc28vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZm9jenppLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21hcnRpcDA3LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RoYW9kYW5nMTcvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvam9obmNhZmF6emEvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcm9iaW5sYXlmaWVsZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9mcmFuY2lzY29hbWsvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWJkdWxoeWV1ay8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYXJrbGFtYi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9lZG9iZW5lLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FuZHJlc2VuZnJlZHJpay8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9taWthZWxqb3JodWx0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Nocmlzc2xvd2lrLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3ZpbmNpYXJ0cy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tZWVsZm9yZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9lbGxpb3Rub2x0ZW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIveWVodWRhYi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci92aWpheWthcnRoaWsvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYmZyb2hzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2pvc2VwX21hcnRpbnMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYXR0YWNrcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zdXI0ZHllLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3R1bXNraS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9pbnN0YWxveC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYW5nb3NhbmdvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3BhdWxmYXJpbm8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva2F6YWt5OTk5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2tpd2l1cG92ZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbnZrem5lbW8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdG9tX2V2ZW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcmF0YnVzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3dvb2RzbWFuMDAxLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2pvc2htZWRlc2tpLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3RoZXdpbGxiZWFyZC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9wc2Fpa2FsaS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qb2VfYmxhY2svMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWxlaW5hZHNheXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWFyY3VzZ29yaWxsaXVzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2hvdGFfdi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qZ2h5bGxlYmVydC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zaGluemUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvamFucGFsb3VuZWsvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvamVyZW1pZXNwb2tlbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9oZXJfcnV1LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2RhbnNvd3Rlci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9mZWxpcGVhcGlyZXNzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21hZ3VnemJyYW5kMmQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcG9zdGVyam9iLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL25hdGhhbGllX2ZzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2JvYmJ5dHdvc2hvZXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZHJlaXpsZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qZXJlbXltb3V0b24vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZWxpc2FiZXRoa2phZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbm90YmFkYXJ0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21vaGFucm9oaXRoLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2psc29sZXJkZWx0b3JvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2l0c2thd3Nhci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zbG93c3BvY2svMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvenZjaGtlbGx5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3dpbGphbnNsb2ZzdHJhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2NyYWlnaGVubmViZXJyeS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90cnViZWF0dG8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvanVhdW1sb2wvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc2Ftc2NvdXRvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL0Jlbm91YXJyYWRlTS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9naXBzeV9yYWYvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbmV0b25ldF9pbC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hcmtva29sZXkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaXRzYWppbWl0aGluZy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zbWFsb25zby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci92aWN0b3JkZWFuZGEvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvX2R3aXRlXy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yaWNoYXJkZ2FycmV0dHMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZ3JlZ3J3aWxraW5zb24vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYW5hdG9saW5pY29sYWUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbHU0c2gxaS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zdGVmYW5vdGlybG9uaS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9vc3RpcmJ1LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2RhcmN5c3RvbmdlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL25haXRhbmFtb3Jlbm8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWljaGFlbGNvbWlza2V5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FkaGlhcmRhbmEvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWFyY29tYW5vXy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kYXZpZGNhemFsaXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZmFsY29uZXJpZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9ncmVna2lsaWFuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2JjcmFkLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2JvbHphbm1hcmNvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2xvd19yZXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdmxhamtpLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3BldGFyX3Byb2cvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvam9ua3Nwci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9ha21hbGZpa3JpLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21mYWNjaGluZWxsby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hdGFuaXNtLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2hhcnJ5X3Npc3RhbGFtLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL211cnJheXN3aWZ0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2JvYndhc3Nlcm1hbm4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZ2F2cjFsMC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYWRzaGVuc2VsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21yX3N1YnRsZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kZXZpbGpob18vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc2FsaW1pYW5vZmYvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvam9ldHJ1ZXNkZWxsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3R3aXR0eXBvcmsvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWlyc2t5bGFyLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2RuZXprdW1hci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kZ2FqamFyLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2NoZXJpZl9iLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3NhbHZhZmMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbG91aXNfY3VycmllLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2RlZWVucmlnaHQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY3liaW5kLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2V5cm9ubi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci92aWNreXNoaXRzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3N3ZWV0ZGVsaXNhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Nib2xsZXIxLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FuZHJlc2RqYXNzby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tZWx2aW5kaWRpdC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbmR5c29sb21vbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90aGFpc3NlbGVuYXRvcl8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbHZvdmVub2svMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZ2l1bGl1c2EvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYmVseWFldl9ycy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9vdmVyY2xvYWNrZWQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva2FtYWxfY2hhbmVtYW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaW5jdWJvODIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaGVsbG9mZXZlcnJyci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9taGFsaWdvd3NraS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zdW5sYW5kaWN0d2luLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2J1NzkyMS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbmR5dGxhdy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qZXJlbWVyeS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9maW5jaGprZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYW5pZ20vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdW11cmdkay8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zY290dGZlbHRoYW0vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZ2Fuc2VyZW5lLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL211dHVfa3Jpc2gvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvam9keXRhZ2dhcnQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbnRmYmxvZy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90YW52ZWVycmFvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2hmYWx1Y2FzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FseGxlcm95ZGV2YWwvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva3VjaW5nYmVsYW5nNC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9iYXJnYW9yb2JhbG8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY29sZ3J1di8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zdGFsZXdpbmUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva3lsZWZyb3N0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2JhdW1hbm56b25lLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FuZ2VsY29sYmVyZy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zYWNoaW5nYXdhcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qanNoYXcxNC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9yYW1hbmF0aGFuX3BkeS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qb2huZGV6ZW1iZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbmlsc2hvZW5zb24vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYnJhbmRvbm1vcnJlYWxlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL251dHp1bWkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYnJhbmRvbmZsYXRzb2RhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3NlcmdleWFsbW9uZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9rbGVmdWUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva2lyYW5nb3BhbC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9iYXVtYW5uX2FsZXgvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWF0dGhld2theV8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvamF5X3dpbGJ1cm4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc2hlc2dhcmVkLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FwcmllbmRlYXUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvam9obnJpb3JkYW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvd2FrZV9ncy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbGVrc2l0YXBwdXJhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Vtc2d1bGFtLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3hpbGFudHJhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2ltb21lbnVpLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3NpcmNhbGViZ3JvdmUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbmV3YnJ1c2hlcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9oc2lueW8yMy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tNHJpby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9rYXRpZW1kYWx5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3M0ZjEvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZWNvbW1lcmNlaWwvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWFybGluamF5YWtvZHkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc3dvb3NoeWN1ZWIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc2FuZ2R0aC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jb2RlcmRpYXovMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYmx1ZWZ4Xy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci92aXZla3BydnIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc2FzaGFfc2hlc3Rha292LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2V1Z2VuZWV3ZWIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGdjbGVnZy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9uMWdodF9jb2Rlci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9kaXhjaGVuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2JsYWtlaGF3a3N3b3J0aC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90cnVlYmxvb2RfMzMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaGFpX25pbmhfbmd1eWVuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21hcmNsZ29uemFsZXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIveWVzbWVjay8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zdGVwaGNvdWUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZG9yb25tYWxraS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9ydWVobGRlc2lnbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbmFzbmFrYXdhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2tpamFubWFoYXJqYW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvd2VhcmVzYXZhcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zdGVmdmRoYW0vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdHdlZXR1YmhhaS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbGVjYXJwZW50aWVyLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2ZpdGVyaWsvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYW50b255cnluZHlhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2QwMG1hei8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90aGVvbmx5emVrZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9taXNzYWFhbXkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvY2FybG9zbS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYW5la2VudGhlLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3JlZXRhamF5ZW5kcmEvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvamVyZW15c2hpbWtvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2p1c3RpbnJncmFoYW0vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc3RlZmFub3pvZmZvbGkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvb3ZlcnJhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21yZWJheTAwNy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zaHZlbG85Ni8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9weXJvbml0ZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci90aGVkanBldGVyc2VuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3J0eXVrbWFldi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9fd2lsbGlhbWd1ZXJyYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbGJlcnRhdWd1c3Rpbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci92aWthc2hwYXRoYWsxOC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9rZXZpbmpvaG5kYXl5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3ZqX2RlbWllbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9jb2xpcnBpeG9pbC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9nb2RkYXJkbGV3aXMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbGFhc2xpLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2pxaXVzcy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9oZXljYW10YXlsb3IvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbmFzdHlhX21hbmUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWFzdGVybWluZGVzaWduLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2NjaW5vamFzc28xLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL255YW5jZWNvbS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zYW5keXdvb2RydWZmLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2JpZ2hhbmRkZXNpZ24vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc2J0cmFuc3BhcmVudC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hdmlkZGF5ZW50b25iYXkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcmljaHdpbGQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva2F5c2l4X2Rpenp5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3R1cjhsZS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zZXllZGhvc3NlaW4xLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3ByaXZldHdhZ25lci8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9lbW1hbmRlbm4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGV2X2Vzc2VudGlhbHMvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvam1mc29jaWFsLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL195YXJkZW5vb24vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWF0ZWFvZHZpdGV6YS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci93ZWF2ZXJtZWRpYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tdWZhZGRhbF9tdy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9oYWZlZXNraGFuLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2FzaGVybmF0YWxpLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3N1bGFxby8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9lZGRpZWNoZW4vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvam9zZWNhcmxvc3BzaC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci92bV9mLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Vucmljb2NpY2NvbmkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGFubWFydGluNzAvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZ21vdXJpZXIvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZG9uamFpbi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tcnhsb2thLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL19wZWRyb3BpbmhvLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2VpdGFyYWZhLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL29zY2Fyb3d1c3UvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvcmFscGhfbGFtLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3BhbmNoYWphbnlhZy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci93b29keWRvdG14LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2plcnJ5YmFpMTkwNy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tYXJzaGFsbGNoZW5fLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL3hhbW9yZXAvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYWlvX19fLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2NoYWFiYW5lX3dhaWwvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdHhjeC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9ha2FzaHNoYXJtYTM5LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2ZhbGxpbmdfc291bC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zYWlucmFqYS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tdWd1a2FtaWwvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvam9oYW5uZXNuZXUvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvbWFya3dpZW5hbmRzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2thcnRoaXBhbnJhai8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9iYWxha2F5dXJpeS8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9hbGFuX3poYW5nXy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9sYXllcnNzc3MvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIva2FzcGVybm9yZGt2aXN0LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL21pcmZhbnF1cmVzaGkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaGFubmFfc21pLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL1ZNaWxlc2N1LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Flb241Ni8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9tX2thbGlicnkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc3JlZWppdGhleHAvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvZGljZXNhbGVzLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2Rob290X2FtaXQvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvc21lbm92LzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2xvbmVzb21lbGVtb24vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdmxhZGltaXJkZXZpYy8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9qb2VsY2lwcmlhbm8vMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvaGFsaWdhbGloYXJ1bi8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9idWxlc3dhcG5pbC8xMjguanBnXCIsXG4gIFwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL3VpZmFjZXMvZmFjZXMvdHdpdHRlci9zZXJlZmthLzEyOC5qcGdcIixcbiAgXCJodHRwczovL3MzLmFtYXpvbmF3cy5jb20vdWlmYWNlcy9mYWNlcy90d2l0dGVyL2lmYXJhZm9ub3cvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdmlrYXN2aW5mb3RlY2gvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvdXJydXRpbWVvbGkvMTI4LmpwZ1wiLFxuICBcImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS91aWZhY2VzL2ZhY2VzL3R3aXR0ZXIvYXJlYW5kYWNvbS8xMjguanBnXCJcbl07XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcImNvbVwiLFxuICBcImJpelwiLFxuICBcImluZm9cIixcbiAgXCJuYW1lXCIsXG4gIFwibmV0XCIsXG4gIFwib3JnXCJcbl07XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcImV4YW1wbGUub3JnXCIsXG4gIFwiZXhhbXBsZS5jb21cIixcbiAgXCJleGFtcGxlLm5ldFwiXG5dO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCJnbWFpbC5jb21cIixcbiAgXCJ5YWhvby5jb21cIixcbiAgXCJob3RtYWlsLmNvbVwiXG5dO1xuIiwidmFyIGludGVybmV0ID0ge307XG5tb2R1bGVbJ2V4cG9ydHMnXSA9IGludGVybmV0O1xuaW50ZXJuZXQuZnJlZV9lbWFpbCA9IHJlcXVpcmUoXCIuL2ZyZWVfZW1haWxcIik7XG5pbnRlcm5ldC5leGFtcGxlX2VtYWlsID0gcmVxdWlyZShcIi4vZXhhbXBsZV9lbWFpbFwiKTtcbmludGVybmV0LmRvbWFpbl9zdWZmaXggPSByZXF1aXJlKFwiLi9kb21haW5fc3VmZml4XCIpO1xuaW50ZXJuZXQuYXZhdGFyX3VyaSA9IHJlcXVpcmUoXCIuL2F2YXRhcl91cmlcIik7XG4iLCJ2YXIgbG9yZW0gPSB7fTtcbm1vZHVsZVsnZXhwb3J0cyddID0gbG9yZW07XG5sb3JlbS53b3JkcyA9IHJlcXVpcmUoXCIuL3dvcmRzXCIpO1xubG9yZW0uc3VwcGxlbWVudGFsID0gcmVxdWlyZShcIi4vc3VwcGxlbWVudGFsXCIpO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCJhYmJhc1wiLFxuICBcImFiZHVjb1wiLFxuICBcImFiZW9cIixcbiAgXCJhYnNjaWRvXCIsXG4gIFwiYWJzY29uZGl0dXNcIixcbiAgXCJhYnNlbnNcIixcbiAgXCJhYnNvcmJlb1wiLFxuICBcImFic3F1ZVwiLFxuICBcImFic3RlcmdvXCIsXG4gIFwiYWJzdW1cIixcbiAgXCJhYnVuZGFuc1wiLFxuICBcImFidXRvclwiLFxuICBcImFjY2Vkb1wiLFxuICBcImFjY2VuZG9cIixcbiAgXCJhY2NlcHR1c1wiLFxuICBcImFjY2lwaW9cIixcbiAgXCJhY2NvbW1vZG9cIixcbiAgXCJhY2N1c2F0b3JcIixcbiAgXCJhY2VyXCIsXG4gIFwiYWNlcmJpdGFzXCIsXG4gIFwiYWNlcnZ1c1wiLFxuICBcImFjaWR1c1wiLFxuICBcImFjaWVzXCIsXG4gIFwiYWNxdWlyb1wiLFxuICBcImFjc2lcIixcbiAgXCJhZGFtb1wiLFxuICBcImFkYXVnZW9cIixcbiAgXCJhZGRvXCIsXG4gIFwiYWRkdWNvXCIsXG4gIFwiYWRlbXB0aW9cIixcbiAgXCJhZGVvXCIsXG4gIFwiYWRlcHRpb1wiLFxuICBcImFkZmVjdHVzXCIsXG4gIFwiYWRmZXJvXCIsXG4gIFwiYWRmaWNpb1wiLFxuICBcImFkZmxpY3RvXCIsXG4gIFwiYWRoYWVyb1wiLFxuICBcImFkaHVjXCIsXG4gIFwiYWRpY2lvXCIsXG4gIFwiYWRpbXBsZW9cIixcbiAgXCJhZGludmVudGl0aWFzXCIsXG4gIFwiYWRpcGlzY29yXCIsXG4gIFwiYWRpdXZvXCIsXG4gIFwiYWRtaW5pc3RyYXRpb1wiLFxuICBcImFkbWlyYXRpb1wiLFxuICBcImFkbWl0dG9cIixcbiAgXCJhZG1vbmVvXCIsXG4gIFwiYWRtb3Zlb1wiLFxuICBcImFkbnVvXCIsXG4gIFwiYWRvcHRvXCIsXG4gIFwiYWRzaWR1ZVwiLFxuICBcImFkc3RyaW5nb1wiLFxuICBcImFkc3Vlc2NvXCIsXG4gIFwiYWRzdW1cIixcbiAgXCJhZHVsYXRpb1wiLFxuICBcImFkdWxlc2NlbnNcIixcbiAgXCJhZHVsdHVzXCIsXG4gIFwiYWR1cm9cIixcbiAgXCJhZHZlbmlvXCIsXG4gIFwiYWR2ZXJzdXNcIixcbiAgXCJhZHZvY29cIixcbiAgXCJhZWRpZmljaXVtXCIsXG4gIFwiYWVnZXJcIixcbiAgXCJhZWdyZVwiLFxuICBcImFlZ3JvdGF0aW9cIixcbiAgXCJhZWdydXNcIixcbiAgXCJhZW5ldXNcIixcbiAgXCJhZXF1aXRhc1wiLFxuICBcImFlcXV1c1wiLFxuICBcImFlclwiLFxuICBcImFlc3Rhc1wiLFxuICBcImFlc3RpdnVzXCIsXG4gIFwiYWVzdHVzXCIsXG4gIFwiYWV0YXNcIixcbiAgXCJhZXRlcm51c1wiLFxuICBcImFnZXJcIixcbiAgXCJhZ2dlcm9cIixcbiAgXCJhZ2dyZWRpb3JcIixcbiAgXCJhZ25pdGlvXCIsXG4gIFwiYWdub3Njb1wiLFxuICBcImFnb1wiLFxuICBcImFpdFwiLFxuICBcImFpdW50XCIsXG4gIFwiYWxpZW51c1wiLFxuICBcImFsaWlcIixcbiAgXCJhbGlvcXVpXCIsXG4gIFwiYWxpcXVhXCIsXG4gIFwiYWxpdXNcIixcbiAgXCJhbGxhdHVzXCIsXG4gIFwiYWxvXCIsXG4gIFwiYWx0ZXJcIixcbiAgXCJhbHR1c1wiLFxuICBcImFsdmV1c1wiLFxuICBcImFtYXJpdHVkb1wiLFxuICBcImFtYml0dXNcIixcbiAgXCJhbWJ1bG9cIixcbiAgXCJhbWljaXRpYVwiLFxuICBcImFtaWN1bHVtXCIsXG4gIFwiYW1pc3Npb1wiLFxuICBcImFtaXRhXCIsXG4gIFwiYW1pdHRvXCIsXG4gIFwiYW1vXCIsXG4gIFwiYW1vclwiLFxuICBcImFtb3Zlb1wiLFxuICBcImFtcGxleHVzXCIsXG4gIFwiYW1wbGl0dWRvXCIsXG4gIFwiYW1wbHVzXCIsXG4gIFwiYW5jaWxsYVwiLFxuICBcImFuZ2VsdXNcIixcbiAgXCJhbmd1bHVzXCIsXG4gIFwiYW5ndXN0dXNcIixcbiAgXCJhbmltYWR2ZXJ0b1wiLFxuICBcImFuaW1pXCIsXG4gIFwiYW5pbXVzXCIsXG4gIFwiYW5udXNcIixcbiAgXCJhbnNlclwiLFxuICBcImFudGVcIixcbiAgXCJhbnRlYVwiLFxuICBcImFudGVwb25vXCIsXG4gIFwiYW50aXF1dXNcIixcbiAgXCJhcGVyaW9cIixcbiAgXCJhcGVydGVcIixcbiAgXCJhcG9zdG9sdXNcIixcbiAgXCJhcHBhcmF0dXNcIixcbiAgXCJhcHBlbGxvXCIsXG4gIFwiYXBwb25vXCIsXG4gIFwiYXBwb3NpdHVzXCIsXG4gIFwiYXBwcm9ib1wiLFxuICBcImFwdG9cIixcbiAgXCJhcHR1c1wiLFxuICBcImFwdWRcIixcbiAgXCJhcXVhXCIsXG4gIFwiYXJhXCIsXG4gIFwiYXJhbmVhXCIsXG4gIFwiYXJiaXRyb1wiLFxuICBcImFyYm9yXCIsXG4gIFwiYXJidXN0dW1cIixcbiAgXCJhcmNhXCIsXG4gIFwiYXJjZW9cIixcbiAgXCJhcmNlc3NvXCIsXG4gIFwiYXJjdXNcIixcbiAgXCJhcmdlbnR1bVwiLFxuICBcImFyZ3VtZW50dW1cIixcbiAgXCJhcmd1b1wiLFxuICBcImFybWFcIixcbiAgXCJhcm1hcml1bVwiLFxuICBcImFybW9cIixcbiAgXCJhcm9cIixcbiAgXCJhcnNcIixcbiAgXCJhcnRpY3VsdXNcIixcbiAgXCJhcnRpZmljaW9zZVwiLFxuICBcImFydG9cIixcbiAgXCJhcnhcIixcbiAgXCJhc2Npc2NvXCIsXG4gIFwiYXNjaXRcIixcbiAgXCJhc3BlclwiLFxuICBcImFzcGljaW9cIixcbiAgXCJhc3BvcnRvXCIsXG4gIFwiYXNzZW50YXRvclwiLFxuICBcImFzdHJ1bVwiLFxuICBcImF0YXZ1c1wiLFxuICBcImF0ZXJcIixcbiAgXCJhdHF1aVwiLFxuICBcImF0cm9jaXRhc1wiLFxuICBcImF0cm94XCIsXG4gIFwiYXR0ZXJvXCIsXG4gIFwiYXR0b2xsb1wiLFxuICBcImF0dG9uYml0dXNcIixcbiAgXCJhdWN0b3JcIixcbiAgXCJhdWN0dXNcIixcbiAgXCJhdWRhY2lhXCIsXG4gIFwiYXVkYXhcIixcbiAgXCJhdWRlbnRpYVwiLFxuICBcImF1ZGVvXCIsXG4gIFwiYXVkaW9cIixcbiAgXCJhdWRpdG9yXCIsXG4gIFwiYXVmZXJvXCIsXG4gIFwiYXVyZXVzXCIsXG4gIFwiYXVyaXNcIixcbiAgXCJhdXJ1bVwiLFxuICBcImF1dFwiLFxuICBcImF1dGVtXCIsXG4gIFwiYXV0dXNcIixcbiAgXCJhdXhpbGl1bVwiLFxuICBcImF2YXJpdGlhXCIsXG4gIFwiYXZhcnVzXCIsXG4gIFwiYXZlaG9cIixcbiAgXCJhdmVydG9cIixcbiAgXCJhdm9jb1wiLFxuICBcImJhaXVsdXNcIixcbiAgXCJiYWxidXNcIixcbiAgXCJiYXJiYVwiLFxuICBcImJhcmR1c1wiLFxuICBcImJhc2l1bVwiLFxuICBcImJlYXR1c1wiLFxuICBcImJlbGxpY3VzXCIsXG4gIFwiYmVsbHVtXCIsXG4gIFwiYmVuZVwiLFxuICBcImJlbmVmaWNpdW1cIixcbiAgXCJiZW5ldm9sZW50aWFcIixcbiAgXCJiZW5pZ25lXCIsXG4gIFwiYmVzdGlhXCIsXG4gIFwiYmlib1wiLFxuICBcImJpc1wiLFxuICBcImJsYW5kaW9yXCIsXG4gIFwiYm9udXNcIixcbiAgXCJib3NcIixcbiAgXCJicmV2aXNcIixcbiAgXCJjYWRvXCIsXG4gIFwiY2FlY3VzXCIsXG4gIFwiY2FlbGVzdGlzXCIsXG4gIFwiY2FlbHVtXCIsXG4gIFwiY2FsYW1pdGFzXCIsXG4gIFwiY2FsY2FyXCIsXG4gIFwiY2FsY29cIixcbiAgXCJjYWxjdWx1c1wiLFxuICBcImNhbGxpZGVcIixcbiAgXCJjYW1wYW5hXCIsXG4gIFwiY2FuZGlkdXNcIixcbiAgXCJjYW5pc1wiLFxuICBcImNhbm9uaWN1c1wiLFxuICBcImNhbnRvXCIsXG4gIFwiY2FwaWxsdXNcIixcbiAgXCJjYXBpb1wiLFxuICBcImNhcGl0dWx1c1wiLFxuICBcImNhcHRvXCIsXG4gIFwiY2FwdXRcIixcbiAgXCJjYXJib1wiLFxuICBcImNhcmNlclwiLFxuICBcImNhcmVvXCIsXG4gIFwiY2FyaWVzXCIsXG4gIFwiY2FyaW9zdXNcIixcbiAgXCJjYXJpdGFzXCIsXG4gIFwiY2FybWVuXCIsXG4gIFwiY2FycG9cIixcbiAgXCJjYXJ1c1wiLFxuICBcImNhc3NvXCIsXG4gIFwiY2FzdGVcIixcbiAgXCJjYXN1c1wiLFxuICBcImNhdGVuYVwiLFxuICBcImNhdGVydmFcIixcbiAgXCJjYXR0dXNcIixcbiAgXCJjYXVkYVwiLFxuICBcImNhdXNhXCIsXG4gIFwiY2F1dGVcIixcbiAgXCJjYXZlb1wiLFxuICBcImNhdnVzXCIsXG4gIFwiY2Vkb1wiLFxuICBcImNlbGVicmVyXCIsXG4gIFwiY2VsZXJcIixcbiAgXCJjZWxvXCIsXG4gIFwiY2VuYVwiLFxuICBcImNlbmFjdWx1bVwiLFxuICBcImNlbm9cIixcbiAgXCJjZW5zdXJhXCIsXG4gIFwiY2VudHVtXCIsXG4gIFwiY2Vybm9cIixcbiAgXCJjZXJudXVzXCIsXG4gIFwiY2VydGVcIixcbiAgXCJjZXJ0b1wiLFxuICBcImNlcnR1c1wiLFxuICBcImNlcnZ1c1wiLFxuICBcImNldGVyYVwiLFxuICBcImNoYXJpc21hXCIsXG4gIFwiY2hpcm9ncmFwaHVtXCIsXG4gIFwiY2lib1wiLFxuICBcImNpYnVzXCIsXG4gIFwiY2ljdXRhXCIsXG4gIFwiY2lsaWNpdW1cIixcbiAgXCJjaW1lbnRhcml1c1wiLFxuICBcImNpbWluYXRpb1wiLFxuICBcImNpbmlzXCIsXG4gIFwiY2lyY3VtdmVuaW9cIixcbiAgXCJjaXRvXCIsXG4gIFwiY2l2aXNcIixcbiAgXCJjaXZpdGFzXCIsXG4gIFwiY2xhbVwiLFxuICBcImNsYW1vXCIsXG4gIFwiY2xhcm9cIixcbiAgXCJjbGFydXNcIixcbiAgXCJjbGF1ZGVvXCIsXG4gIFwiY2xhdXN0cnVtXCIsXG4gIFwiY2xlbWVudGlhXCIsXG4gIFwiY2xpYmFudXNcIixcbiAgXCJjb2FkdW5hdGlvXCIsXG4gIFwiY29hZWdyZXNjb1wiLFxuICBcImNvZXBpXCIsXG4gIFwiY29lcmNlb1wiLFxuICBcImNvZ2l0b1wiLFxuICBcImNvZ25hdHVzXCIsXG4gIFwiY29nbm9tZW5cIixcbiAgXCJjb2dvXCIsXG4gIFwiY29oYWVyb1wiLFxuICBcImNvaGliZW9cIixcbiAgXCJjb2hvcnNcIixcbiAgXCJjb2xsaWdvXCIsXG4gIFwiY29sbG9jb1wiLFxuICBcImNvbGx1bVwiLFxuICBcImNvbG9cIixcbiAgXCJjb2xvclwiLFxuICBcImNvbWFcIixcbiAgXCJjb21iaWJvXCIsXG4gIFwiY29tYnVyb1wiLFxuICBcImNvbWVkb1wiLFxuICBcImNvbWVzXCIsXG4gIFwiY29tZXRlc1wiLFxuICBcImNvbWlzXCIsXG4gIFwiY29taXRhdHVzXCIsXG4gIFwiY29tbWVtb3JvXCIsXG4gIFwiY29tbWlub3JcIixcbiAgXCJjb21tb2RvXCIsXG4gIFwiY29tbXVuaXNcIixcbiAgXCJjb21wYXJvXCIsXG4gIFwiY29tcGVsbG9cIixcbiAgXCJjb21wbGVjdHVzXCIsXG4gIFwiY29tcG9ub1wiLFxuICBcImNvbXByZWhlbmRvXCIsXG4gIFwiY29tcHR1c1wiLFxuICBcImNvbmF0dXNcIixcbiAgXCJjb25jZWRvXCIsXG4gIFwiY29uY2lkb1wiLFxuICBcImNvbmN1bGNvXCIsXG4gIFwiY29uZGljb1wiLFxuICBcImNvbmR1Y29cIixcbiAgXCJjb25mZXJvXCIsXG4gIFwiY29uZmlkb1wiLFxuICBcImNvbmZvcnRvXCIsXG4gIFwiY29uZnVnb1wiLFxuICBcImNvbmdyZWdhdGlvXCIsXG4gIFwiY29uaWNpb1wiLFxuICBcImNvbmllY3RvXCIsXG4gIFwiY29uaXRvclwiLFxuICBcImNvbml1cmF0aW9cIixcbiAgXCJjb25vclwiLFxuICBcImNvbnF1ZXJvclwiLFxuICBcImNvbnNjZW5kb1wiLFxuICBcImNvbnNlcnZvXCIsXG4gIFwiY29uc2lkZXJvXCIsXG4gIFwiY29uc3BlcmdvXCIsXG4gIFwiY29uc3RhbnNcIixcbiAgXCJjb25zdWFzb3JcIixcbiAgXCJjb250YWJlc2NvXCIsXG4gIFwiY29udGVnb1wiLFxuICBcImNvbnRpZ29cIixcbiAgXCJjb250cmFcIixcbiAgXCJjb250dXJib1wiLFxuICBcImNvbnZlbnR1c1wiLFxuICBcImNvbnZvY29cIixcbiAgXCJjb3BpYVwiLFxuICBcImNvcGlvc2VcIixcbiAgXCJjb3JudVwiLFxuICBcImNvcm9uYVwiLFxuICBcImNvcnB1c1wiLFxuICBcImNvcnJlcHRpdXNcIixcbiAgXCJjb3JyaWdvXCIsXG4gIFwiY29ycm9ib3JvXCIsXG4gIFwiY29ycnVtcG9cIixcbiAgXCJjb3J1c2N1c1wiLFxuICBcImNvdGlkaWVcIixcbiAgXCJjcmFwdWxhXCIsXG4gIFwiY3Jhc1wiLFxuICBcImNyYXN0aW51c1wiLFxuICBcImNyZWF0b3JcIixcbiAgXCJjcmViZXJcIixcbiAgXCJjcmVicm9cIixcbiAgXCJjcmVkb1wiLFxuICBcImNyZW9cIixcbiAgXCJjcmVwdGlvXCIsXG4gIFwiY3JlcHVzY3VsdW1cIixcbiAgXCJjcmVzY29cIixcbiAgXCJjcmV0YVwiLFxuICBcImNyaWJyb1wiLFxuICBcImNyaW5pc1wiLFxuICBcImNydWNpYW1lbnR1bVwiLFxuICBcImNydWRlbGlzXCIsXG4gIFwiY3J1ZW50dXNcIixcbiAgXCJjcnVyXCIsXG4gIFwiY3J1c3R1bHVtXCIsXG4gIFwiY3J1eFwiLFxuICBcImN1YmljdWxhcmlzXCIsXG4gIFwiY3ViaXR1bVwiLFxuICBcImN1Ym9cIixcbiAgXCJjdWlcIixcbiAgXCJjdWl1c1wiLFxuICBcImN1bHBhXCIsXG4gIFwiY3VscG9cIixcbiAgXCJjdWx0ZWxsdXNcIixcbiAgXCJjdWx0dXJhXCIsXG4gIFwiY3VtXCIsXG4gIFwiY3VuYWJ1bGFcIixcbiAgXCJjdW5hZVwiLFxuICBcImN1bmN0YXRpb1wiLFxuICBcImN1cGlkaXRhc1wiLFxuICBcImN1cGlvXCIsXG4gIFwiY3VwcGVkaWFcIixcbiAgXCJjdXByZXNzdXNcIixcbiAgXCJjdXJcIixcbiAgXCJjdXJhXCIsXG4gIFwiY3VyYXRpb1wiLFxuICBcImN1cmlhXCIsXG4gIFwiY3VyaW9zaXRhc1wiLFxuICBcImN1cmlzXCIsXG4gIFwiY3Vyb1wiLFxuICBcImN1cnJpY3VsdW1cIixcbiAgXCJjdXJydXNcIixcbiAgXCJjdXJzaW1cIixcbiAgXCJjdXJzb1wiLFxuICBcImN1cnN1c1wiLFxuICBcImN1cnRvXCIsXG4gIFwiY3VydHVzXCIsXG4gIFwiY3Vydm9cIixcbiAgXCJjdXJ2dXNcIixcbiAgXCJjdXN0b2RpYVwiLFxuICBcImRhbW5hdGlvXCIsXG4gIFwiZGFtbm9cIixcbiAgXCJkYXBpZmVyXCIsXG4gIFwiZGViZW9cIixcbiAgXCJkZWJpbGl0b1wiLFxuICBcImRlY2Vuc1wiLFxuICBcImRlY2Vybm9cIixcbiAgXCJkZWNldFwiLFxuICBcImRlY2ltdXNcIixcbiAgXCJkZWNpcGlvXCIsXG4gIFwiZGVjb3JcIixcbiAgXCJkZWNyZXR1bVwiLFxuICBcImRlY3VtYm9cIixcbiAgXCJkZWRlY29yXCIsXG4gIFwiZGVkaWNvXCIsXG4gIFwiZGVkdWNvXCIsXG4gIFwiZGVmYWVjb1wiLFxuICBcImRlZmVuZG9cIixcbiAgXCJkZWZlcm9cIixcbiAgXCJkZWZlc3N1c1wiLFxuICBcImRlZmV0aXNjb3JcIixcbiAgXCJkZWZpY2lvXCIsXG4gIFwiZGVmaWdvXCIsXG4gIFwiZGVmbGVvXCIsXG4gIFwiZGVmbHVvXCIsXG4gIFwiZGVmdW5nb1wiLFxuICBcImRlZ2VuZXJvXCIsXG4gIFwiZGVnZXJvXCIsXG4gIFwiZGVndXN0b1wiLFxuICBcImRlaW5kZVwiLFxuICBcImRlbGVjdGF0aW9cIixcbiAgXCJkZWxlZ29cIixcbiAgXCJkZWxlb1wiLFxuICBcImRlbGliZXJvXCIsXG4gIFwiZGVsaWNhdGVcIixcbiAgXCJkZWxpbnF1b1wiLFxuICBcImRlbHVkb1wiLFxuICBcImRlbWVuc1wiLFxuICBcImRlbWVyZ29cIixcbiAgXCJkZW1pdHRvXCIsXG4gIFwiZGVtb1wiLFxuICBcImRlbW9uc3Ryb1wiLFxuICBcImRlbW9yb3JcIixcbiAgXCJkZW11bGNlb1wiLFxuICBcImRlbXVtXCIsXG4gIFwiZGVuZWdvXCIsXG4gIFwiZGVuaXF1ZVwiLFxuICBcImRlbnNcIixcbiAgXCJkZW51bmNpb1wiLFxuICBcImRlbnVvXCIsXG4gIFwiZGVvcnN1bVwiLFxuICBcImRlcGVyZW9cIixcbiAgXCJkZXBvbm9cIixcbiAgXCJkZXBvcHVsb1wiLFxuICBcImRlcG9ydG9cIixcbiAgXCJkZXByYWVkb3JcIixcbiAgXCJkZXByZWNhdG9yXCIsXG4gIFwiZGVwcmltb1wiLFxuICBcImRlcHJvbW9cIixcbiAgXCJkZXB1bHNvXCIsXG4gIFwiZGVwdXRvXCIsXG4gIFwiZGVyZWxpbnF1b1wiLFxuICBcImRlcmlkZW9cIixcbiAgXCJkZXJpcGlvXCIsXG4gIFwiZGVzaWRlcm9cIixcbiAgXCJkZXNpbm9cIixcbiAgXCJkZXNpcGlvXCIsXG4gIFwiZGVzb2xvXCIsXG4gIFwiZGVzcGFyYXR1c1wiLFxuICBcImRlc3BlY3RvXCIsXG4gIFwiZGVzcGlybWF0aW9cIixcbiAgXCJpbmZpdFwiLFxuICBcImluZmxhbW1hdGlvXCIsXG4gIFwicGFlbnNcIixcbiAgXCJwYXRpb3JcIixcbiAgXCJwYXRyaWFcIixcbiAgXCJwYXRyb2Npbm9yXCIsXG4gIFwicGF0cnV1c1wiLFxuICBcInBhdWNpXCIsXG4gIFwicGF1bGF0aW1cIixcbiAgXCJwYXVwZXJcIixcbiAgXCJwYXhcIixcbiAgXCJwZWNjYXR1c1wiLFxuICBcInBlY2NvXCIsXG4gIFwicGVjdG9cIixcbiAgXCJwZWN0dXNcIixcbiAgXCJwZWN1bmlhXCIsXG4gIFwicGVjdXNcIixcbiAgXCJwZWlvclwiLFxuICBcInBlbFwiLFxuICBcIm9jZXJcIixcbiAgXCJzb2NpdXNcIixcbiAgXCJzb2RhbGl0YXNcIixcbiAgXCJzb2xcIixcbiAgXCJzb2xlb1wiLFxuICBcInNvbGlvXCIsXG4gIFwic29saXR1ZG9cIixcbiAgXCJzb2xpdW1cIixcbiAgXCJzb2xsZXJzXCIsXG4gIFwic29sbGljaXRvXCIsXG4gIFwic29sdW1cIixcbiAgXCJzb2x1c1wiLFxuICBcInNvbHV0aW9cIixcbiAgXCJzb2x2b1wiLFxuICBcInNvbW5pY3Vsb3N1c1wiLFxuICBcInNvbW51c1wiLFxuICBcInNvbml0dXNcIixcbiAgXCJzb25vXCIsXG4gIFwic29waGlzbWF0YVwiLFxuICBcInNvcG9yXCIsXG4gIFwic29yZGVvXCIsXG4gIFwic29ydGl0dXNcIixcbiAgXCJzcGFyZ29cIixcbiAgXCJzcGVjaW9zdXNcIixcbiAgXCJzcGVjdGFjdWx1bVwiLFxuICBcInNwZWN1bHVtXCIsXG4gIFwic3Blcm5vXCIsXG4gIFwic3Blcm9cIixcbiAgXCJzcGVzXCIsXG4gIFwic3BpY3VsdW1cIixcbiAgXCJzcGlyaXR1c1wiLFxuICBcInNwb2xpYXRpb1wiLFxuICBcInNwb250ZVwiLFxuICBcInN0YWJpbGlzXCIsXG4gIFwic3RhdGltXCIsXG4gIFwic3RhdHVhXCIsXG4gIFwic3RlbGxhXCIsXG4gIFwic3RpbGxpY2lkaXVtXCIsXG4gIFwic3RpcGVzXCIsXG4gIFwic3RpcHNcIixcbiAgXCJzdG9cIixcbiAgXCJzdHJlbnV1c1wiLFxuICBcInN0cnVlc1wiLFxuICBcInN0dWRpb1wiLFxuICBcInN0dWx0dXNcIixcbiAgXCJzdWFkZW9cIixcbiAgXCJzdWFzb3JpYVwiLFxuICBcInN1YlwiLFxuICBcInN1Yml0b1wiLFxuICBcInN1Yml1bmdvXCIsXG4gIFwic3VibGltZVwiLFxuICBcInN1Ym5lY3RvXCIsXG4gIFwic3Vic2Vjb1wiLFxuICBcInN1YnN0YW50aWFcIixcbiAgXCJzdWJ2ZW5pb1wiLFxuICBcInN1Y2NlZG9cIixcbiAgXCJzdWNjdXJyb1wiLFxuICBcInN1ZmZpY2lvXCIsXG4gIFwic3VmZm9jb1wiLFxuICBcInN1ZmZyYWdpdW1cIixcbiAgXCJzdWdnZXJvXCIsXG4gIFwic3VpXCIsXG4gIFwic3VsdW1cIixcbiAgXCJzdW1cIixcbiAgXCJzdW1tYVwiLFxuICBcInN1bW1pc3NlXCIsXG4gIFwic3VtbW9wZXJlXCIsXG4gIFwic3Vtb1wiLFxuICBcInN1bXB0dXNcIixcbiAgXCJzdXBlbGxleFwiLFxuICBcInN1cGVyXCIsXG4gIFwic3VwcGVsbGV4XCIsXG4gIFwic3VwcGxhbnRvXCIsXG4gIFwic3VwcG9ub1wiLFxuICBcInN1cHJhXCIsXG4gIFwic3VyY3VsdXNcIixcbiAgXCJzdXJnb1wiLFxuICBcInN1cnN1bVwiLFxuICBcInN1c2NpcGlvXCIsXG4gIFwic3VzcGVuZG9cIixcbiAgXCJzdXN0aW5lb1wiLFxuICBcInN1dXNcIixcbiAgXCJzeW5hZ29nYVwiLFxuICBcInRhYmVsbGFcIixcbiAgXCJ0YWJlcm51c1wiLFxuICBcInRhYmVzY29cIixcbiAgXCJ0YWJnb1wiLFxuICBcInRhYnVsYVwiLFxuICBcInRhY2VvXCIsXG4gIFwidGFjdHVzXCIsXG4gIFwidGFlZGl1bVwiLFxuICBcInRhbGlvXCIsXG4gIFwidGFsaXNcIixcbiAgXCJ0YWx1c1wiLFxuICBcInRhbVwiLFxuICBcInRhbWRpdVwiLFxuICBcInRhbWVuXCIsXG4gIFwidGFtZXRzaVwiLFxuICBcInRhbWlzaXVtXCIsXG4gIFwidGFtcXVhbVwiLFxuICBcInRhbmRlbVwiLFxuICBcInRhbnRpbGx1c1wiLFxuICBcInRhbnR1bVwiLFxuICBcInRhcmR1c1wiLFxuICBcInRlZ29cIixcbiAgXCJ0ZW1lcml0YXNcIixcbiAgXCJ0ZW1wZXJhbnRpYVwiLFxuICBcInRlbXBsdW1cIixcbiAgXCJ0ZW1wdGF0aW9cIixcbiAgXCJ0ZW1wdXNcIixcbiAgXCJ0ZW5heFwiLFxuICBcInRlbmRvXCIsXG4gIFwidGVuZW9cIixcbiAgXCJ0ZW5lclwiLFxuICBcInRlbnVpc1wiLFxuICBcInRlbnVzXCIsXG4gIFwidGVwZXNjb1wiLFxuICBcInRlcGlkdXNcIixcbiAgXCJ0ZXJcIixcbiAgXCJ0ZXJlYnJvXCIsXG4gIFwidGVyZXNcIixcbiAgXCJ0ZXJnYVwiLFxuICBcInRlcmdlb1wiLFxuICBcInRlcmdpdmVyc2F0aW9cIixcbiAgXCJ0ZXJnb1wiLFxuICBcInRlcmd1bVwiLFxuICBcInRlcm1lc1wiLFxuICBcInRlcm1pbmF0aW9cIixcbiAgXCJ0ZXJvXCIsXG4gIFwidGVycmFcIixcbiAgXCJ0ZXJyZW9cIixcbiAgXCJ0ZXJyaXRvXCIsXG4gIFwidGVycm9yXCIsXG4gIFwidGVyc3VzXCIsXG4gIFwidGVydGl1c1wiLFxuICBcInRlc3RpbW9uaXVtXCIsXG4gIFwidGV4b1wiLFxuICBcInRleHRpbGlzXCIsXG4gIFwidGV4dG9yXCIsXG4gIFwidGV4dHVzXCIsXG4gIFwidGhhbGFzc2ludXNcIixcbiAgXCJ0aGVhdHJ1bVwiLFxuICBcInRoZWNhXCIsXG4gIFwidGhlbWFcIixcbiAgXCJ0aGVvbG9ndXNcIixcbiAgXCJ0aGVybWFlXCIsXG4gIFwidGhlc2F1cnVzXCIsXG4gIFwidGhlc2lzXCIsXG4gIFwidGhvcmF4XCIsXG4gIFwidGh5bWJyYVwiLFxuICBcInRoeW11bVwiLFxuICBcInRpYmlcIixcbiAgXCJ0aW1pZHVzXCIsXG4gIFwidGltb3JcIixcbiAgXCJ0aXR1bHVzXCIsXG4gIFwidG9sZXJvXCIsXG4gIFwidG9sbG9cIixcbiAgXCJ0b25kZW9cIixcbiAgXCJ0b25zb3JcIixcbiAgXCJ0b3JxdWVvXCIsXG4gIFwidG9ycmVuc1wiLFxuICBcInRvdFwiLFxuICBcInRvdGlkZW1cIixcbiAgXCJ0b3RpZXNcIixcbiAgXCJ0b3R1c1wiLFxuICBcInRyYWN0b1wiLFxuICBcInRyYWRvXCIsXG4gIFwidHJhaG9cIixcbiAgXCJ0cmFuc1wiLFxuICBcInRyZWRlY2ltXCIsXG4gIFwidHJlbW9cIixcbiAgXCJ0cmVwaWRlXCIsXG4gIFwidHJlc1wiLFxuICBcInRyaWJ1b1wiLFxuICBcInRyaWNlc2ltdXNcIixcbiAgXCJ0cmlkdWFuYVwiLFxuICBcInRyaWdpbnRhXCIsXG4gIFwidHJpcHVkaW9cIixcbiAgXCJ0cmlzdGlzXCIsXG4gIFwidHJpdW1waHVzXCIsXG4gIFwidHJ1Y2lkb1wiLFxuICBcInRydWN1bGVudGVyXCIsXG4gIFwidHViaW5ldXNcIixcbiAgXCJ0dWlcIixcbiAgXCJ0dW1cIixcbiAgXCJ0dW11bHR1c1wiLFxuICBcInR1bmNcIixcbiAgXCJ0dXJiYVwiLFxuICBcInR1cmJvXCIsXG4gIFwidHVycGVcIixcbiAgXCJ0dXJwaXNcIixcbiAgXCJ0dXRhbWVuXCIsXG4gIFwidHV0aXNcIixcbiAgXCJ0eXJhbm51c1wiLFxuICBcInViZXJyaW1lXCIsXG4gIFwidWJpXCIsXG4gIFwidWxjaXNjb3JcIixcbiAgXCJ1bGx1c1wiLFxuICBcInVsdGVyaXVzXCIsXG4gIFwidWx0aW9cIixcbiAgXCJ1bHRyYVwiLFxuICBcInVtYnJhXCIsXG4gIFwidW1lcnVzXCIsXG4gIFwidW1xdWFtXCIsXG4gIFwidW5hXCIsXG4gIFwidW5kZVwiLFxuICBcInVuZGlxdWVcIixcbiAgXCJ1bml2ZXJzZVwiLFxuICBcInVudXNcIixcbiAgXCJ1cmJhbnVzXCIsXG4gIFwidXJic1wiLFxuICBcInVyZWRvXCIsXG4gIFwidXNpdGFzXCIsXG4gIFwidXNxdWVcIixcbiAgXCJ1c3RpbG9cIixcbiAgXCJ1c3R1bG9cIixcbiAgXCJ1c3VzXCIsXG4gIFwidXRlclwiLFxuICBcInV0ZXJxdWVcIixcbiAgXCJ1dGlsaXNcIixcbiAgXCJ1dGlxdWVcIixcbiAgXCJ1dG9yXCIsXG4gIFwidXRwb3RlXCIsXG4gIFwidXRyaW1xdWVcIixcbiAgXCJ1dHJvcXVlXCIsXG4gIFwidXRydW1cIixcbiAgXCJ1eG9yXCIsXG4gIFwidmFjb1wiLFxuICBcInZhY3V1c1wiLFxuICBcInZhZG9cIixcbiAgXCJ2YWVcIixcbiAgXCJ2YWxkZVwiLFxuICBcInZhbGVuc1wiLFxuICBcInZhbGVvXCIsXG4gIFwidmFsZXR1ZG9cIixcbiAgXCJ2YWxpZHVzXCIsXG4gIFwidmFsbHVtXCIsXG4gIFwidmFwdWx1c1wiLFxuICBcInZhcmlldGFzXCIsXG4gIFwidmFyaXVzXCIsXG4gIFwidmVoZW1lbnNcIixcbiAgXCJ2ZWxcIixcbiAgXCJ2ZWxvY2l0ZXJcIixcbiAgXCJ2ZWx1bVwiLFxuICBcInZlbHV0XCIsXG4gIFwidmVuaWFcIixcbiAgXCJ2ZW5pb1wiLFxuICBcInZlbnRpdG9cIixcbiAgXCJ2ZW50b3N1c1wiLFxuICBcInZlbnR1c1wiLFxuICBcInZlbnVzdGFzXCIsXG4gIFwidmVyXCIsXG4gIFwidmVyYmVyYVwiLFxuICBcInZlcmJ1bVwiLFxuICBcInZlcmVcIixcbiAgXCJ2ZXJlY3VuZGlhXCIsXG4gIFwidmVyZW9yXCIsXG4gIFwidmVyZ29cIixcbiAgXCJ2ZXJpdGFzXCIsXG4gIFwidmVyb1wiLFxuICBcInZlcnN1c1wiLFxuICBcInZlcnRvXCIsXG4gIFwidmVydW10YW1lblwiLFxuICBcInZlcnVzXCIsXG4gIFwidmVzY29cIixcbiAgXCJ2ZXNpY2FcIixcbiAgXCJ2ZXNwZXJcIixcbiAgXCJ2ZXNwaWxsb1wiLFxuICBcInZlc3RlclwiLFxuICBcInZlc3RpZ2l1bVwiLFxuICBcInZlc3RydW1cIixcbiAgXCJ2ZXR1c1wiLFxuICBcInZpYVwiLFxuICBcInZpY2ludXNcIixcbiAgXCJ2aWNpc3NpdHVkb1wiLFxuICBcInZpY3RvcmlhXCIsXG4gIFwidmljdHVzXCIsXG4gIFwidmlkZWxpY2V0XCIsXG4gIFwidmlkZW9cIixcbiAgXCJ2aWR1YXRhXCIsXG4gIFwidmlkdW9cIixcbiAgXCJ2aWdpbG9cIixcbiAgXCJ2aWdvclwiLFxuICBcInZpbGljdXNcIixcbiAgXCJ2aWxpc1wiLFxuICBcInZpbGl0YXNcIixcbiAgXCJ2aWxsYVwiLFxuICBcInZpbmNvXCIsXG4gIFwidmluY3VsdW1cIixcbiAgXCJ2aW5kaWNvXCIsXG4gIFwidmluaXRvclwiLFxuICBcInZpbnVtXCIsXG4gIFwidmlyXCIsXG4gIFwidmlyZ2FcIixcbiAgXCJ2aXJnb1wiLFxuICBcInZpcmlkaXNcIixcbiAgXCJ2aXJpbGl0ZXJcIixcbiAgXCJ2aXJ0dXNcIixcbiAgXCJ2aXNcIixcbiAgXCJ2aXNjdXNcIixcbiAgXCJ2aXRhXCIsXG4gIFwidml0aW9zdXNcIixcbiAgXCJ2aXRpdW1cIixcbiAgXCJ2aXRvXCIsXG4gIFwidml2b1wiLFxuICBcInZpeFwiLFxuICBcInZvYmlzXCIsXG4gIFwidm9jaWZlcm9yXCIsXG4gIFwidm9jb1wiLFxuICBcInZvbGF0aWN1c1wiLFxuICBcInZvbG9cIixcbiAgXCJ2b2x1YmlsaXNcIixcbiAgXCJ2b2x1bnRhcml1c1wiLFxuICBcInZvbHVwXCIsXG4gIFwidm9sdXRhYnJ1bVwiLFxuICBcInZvbHZhXCIsXG4gIFwidm9tZXJcIixcbiAgXCJ2b21pY2FcIixcbiAgXCJ2b21pdG9cIixcbiAgXCJ2b3JhZ29cIixcbiAgXCJ2b3JheFwiLFxuICBcInZvcm9cIixcbiAgXCJ2b3NcIixcbiAgXCJ2b3R1bVwiLFxuICBcInZvdmVvXCIsXG4gIFwidm94XCIsXG4gIFwidnVsYXJpdGVyXCIsXG4gIFwidnVsZ2FyaXNcIixcbiAgXCJ2dWxnaXZhZ3VzXCIsXG4gIFwidnVsZ29cIixcbiAgXCJ2dWxndXNcIixcbiAgXCJ2dWxuZXJvXCIsXG4gIFwidnVsbnVzXCIsXG4gIFwidnVscGVzXCIsXG4gIFwidnVsdGljdWx1c1wiLFxuICBcInZ1bHR1b3N1c1wiLFxuICBcInhpcGhpYXNcIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiYWxpYXNcIixcbiAgXCJjb25zZXF1YXR1clwiLFxuICBcImF1dFwiLFxuICBcInBlcmZlcmVuZGlzXCIsXG4gIFwic2l0XCIsXG4gIFwidm9sdXB0YXRlbVwiLFxuICBcImFjY3VzYW50aXVtXCIsXG4gIFwiZG9sb3JlbXF1ZVwiLFxuICBcImFwZXJpYW1cIixcbiAgXCJlYXF1ZVwiLFxuICBcImlwc2FcIixcbiAgXCJxdWFlXCIsXG4gIFwiYWJcIixcbiAgXCJpbGxvXCIsXG4gIFwiaW52ZW50b3JlXCIsXG4gIFwidmVyaXRhdGlzXCIsXG4gIFwiZXRcIixcbiAgXCJxdWFzaVwiLFxuICBcImFyY2hpdGVjdG9cIixcbiAgXCJiZWF0YWVcIixcbiAgXCJ2aXRhZVwiLFxuICBcImRpY3RhXCIsXG4gIFwic3VudFwiLFxuICBcImV4cGxpY2Fib1wiLFxuICBcImFzcGVybmF0dXJcIixcbiAgXCJhdXRcIixcbiAgXCJvZGl0XCIsXG4gIFwiYXV0XCIsXG4gIFwiZnVnaXRcIixcbiAgXCJzZWRcIixcbiAgXCJxdWlhXCIsXG4gIFwiY29uc2VxdXVudHVyXCIsXG4gIFwibWFnbmlcIixcbiAgXCJkb2xvcmVzXCIsXG4gIFwiZW9zXCIsXG4gIFwicXVpXCIsXG4gIFwicmF0aW9uZVwiLFxuICBcInZvbHVwdGF0ZW1cIixcbiAgXCJzZXF1aVwiLFxuICBcIm5lc2NpdW50XCIsXG4gIFwibmVxdWVcIixcbiAgXCJkb2xvcmVtXCIsXG4gIFwiaXBzdW1cIixcbiAgXCJxdWlhXCIsXG4gIFwiZG9sb3JcIixcbiAgXCJzaXRcIixcbiAgXCJhbWV0XCIsXG4gIFwiY29uc2VjdGV0dXJcIixcbiAgXCJhZGlwaXNjaVwiLFxuICBcInZlbGl0XCIsXG4gIFwic2VkXCIsXG4gIFwicXVpYVwiLFxuICBcIm5vblwiLFxuICBcIm51bXF1YW1cIixcbiAgXCJlaXVzXCIsXG4gIFwibW9kaVwiLFxuICBcInRlbXBvcmFcIixcbiAgXCJpbmNpZHVudFwiLFxuICBcInV0XCIsXG4gIFwibGFib3JlXCIsXG4gIFwiZXRcIixcbiAgXCJkb2xvcmVcIixcbiAgXCJtYWduYW1cIixcbiAgXCJhbGlxdWFtXCIsXG4gIFwicXVhZXJhdFwiLFxuICBcInZvbHVwdGF0ZW1cIixcbiAgXCJ1dFwiLFxuICBcImVuaW1cIixcbiAgXCJhZFwiLFxuICBcIm1pbmltYVwiLFxuICBcInZlbmlhbVwiLFxuICBcInF1aXNcIixcbiAgXCJub3N0cnVtXCIsXG4gIFwiZXhlcmNpdGF0aW9uZW1cIixcbiAgXCJ1bGxhbVwiLFxuICBcImNvcnBvcmlzXCIsXG4gIFwibmVtb1wiLFxuICBcImVuaW1cIixcbiAgXCJpcHNhbVwiLFxuICBcInZvbHVwdGF0ZW1cIixcbiAgXCJxdWlhXCIsXG4gIFwidm9sdXB0YXNcIixcbiAgXCJzaXRcIixcbiAgXCJzdXNjaXBpdFwiLFxuICBcImxhYm9yaW9zYW1cIixcbiAgXCJuaXNpXCIsXG4gIFwidXRcIixcbiAgXCJhbGlxdWlkXCIsXG4gIFwiZXhcIixcbiAgXCJlYVwiLFxuICBcImNvbW1vZGlcIixcbiAgXCJjb25zZXF1YXR1clwiLFxuICBcInF1aXNcIixcbiAgXCJhdXRlbVwiLFxuICBcInZlbFwiLFxuICBcImV1bVwiLFxuICBcIml1cmVcIixcbiAgXCJyZXByZWhlbmRlcml0XCIsXG4gIFwicXVpXCIsXG4gIFwiaW5cIixcbiAgXCJlYVwiLFxuICBcInZvbHVwdGF0ZVwiLFxuICBcInZlbGl0XCIsXG4gIFwiZXNzZVwiLFxuICBcInF1YW1cIixcbiAgXCJuaWhpbFwiLFxuICBcIm1vbGVzdGlhZVwiLFxuICBcImV0XCIsXG4gIFwiaXVzdG9cIixcbiAgXCJvZGlvXCIsXG4gIFwiZGlnbmlzc2ltb3NcIixcbiAgXCJkdWNpbXVzXCIsXG4gIFwicXVpXCIsXG4gIFwiYmxhbmRpdGlpc1wiLFxuICBcInByYWVzZW50aXVtXCIsXG4gIFwibGF1ZGFudGl1bVwiLFxuICBcInRvdGFtXCIsXG4gIFwicmVtXCIsXG4gIFwidm9sdXB0YXR1bVwiLFxuICBcImRlbGVuaXRpXCIsXG4gIFwiYXRxdWVcIixcbiAgXCJjb3JydXB0aVwiLFxuICBcInF1b3NcIixcbiAgXCJkb2xvcmVzXCIsXG4gIFwiZXRcIixcbiAgXCJxdWFzXCIsXG4gIFwibW9sZXN0aWFzXCIsXG4gIFwiZXhjZXB0dXJpXCIsXG4gIFwic2ludFwiLFxuICBcIm9jY2FlY2F0aVwiLFxuICBcImN1cGlkaXRhdGVcIixcbiAgXCJub25cIixcbiAgXCJwcm92aWRlbnRcIixcbiAgXCJzZWRcIixcbiAgXCJ1dFwiLFxuICBcInBlcnNwaWNpYXRpc1wiLFxuICBcInVuZGVcIixcbiAgXCJvbW5pc1wiLFxuICBcImlzdGVcIixcbiAgXCJuYXR1c1wiLFxuICBcImVycm9yXCIsXG4gIFwic2ltaWxpcXVlXCIsXG4gIFwic3VudFwiLFxuICBcImluXCIsXG4gIFwiY3VscGFcIixcbiAgXCJxdWlcIixcbiAgXCJvZmZpY2lhXCIsXG4gIFwiZGVzZXJ1bnRcIixcbiAgXCJtb2xsaXRpYVwiLFxuICBcImFuaW1pXCIsXG4gIFwiaWRcIixcbiAgXCJlc3RcIixcbiAgXCJsYWJvcnVtXCIsXG4gIFwiZXRcIixcbiAgXCJkb2xvcnVtXCIsXG4gIFwiZnVnYVwiLFxuICBcImV0XCIsXG4gIFwiaGFydW1cIixcbiAgXCJxdWlkZW1cIixcbiAgXCJyZXJ1bVwiLFxuICBcImZhY2lsaXNcIixcbiAgXCJlc3RcIixcbiAgXCJldFwiLFxuICBcImV4cGVkaXRhXCIsXG4gIFwiZGlzdGluY3Rpb1wiLFxuICBcIm5hbVwiLFxuICBcImxpYmVyb1wiLFxuICBcInRlbXBvcmVcIixcbiAgXCJjdW1cIixcbiAgXCJzb2x1dGFcIixcbiAgXCJub2Jpc1wiLFxuICBcImVzdFwiLFxuICBcImVsaWdlbmRpXCIsXG4gIFwib3B0aW9cIixcbiAgXCJjdW1xdWVcIixcbiAgXCJuaWhpbFwiLFxuICBcImltcGVkaXRcIixcbiAgXCJxdW9cIixcbiAgXCJwb3Jyb1wiLFxuICBcInF1aXNxdWFtXCIsXG4gIFwiZXN0XCIsXG4gIFwicXVpXCIsXG4gIFwibWludXNcIixcbiAgXCJpZFwiLFxuICBcInF1b2RcIixcbiAgXCJtYXhpbWVcIixcbiAgXCJwbGFjZWF0XCIsXG4gIFwiZmFjZXJlXCIsXG4gIFwicG9zc2ltdXNcIixcbiAgXCJvbW5pc1wiLFxuICBcInZvbHVwdGFzXCIsXG4gIFwiYXNzdW1lbmRhXCIsXG4gIFwiZXN0XCIsXG4gIFwib21uaXNcIixcbiAgXCJkb2xvclwiLFxuICBcInJlcGVsbGVuZHVzXCIsXG4gIFwidGVtcG9yaWJ1c1wiLFxuICBcImF1dGVtXCIsXG4gIFwicXVpYnVzZGFtXCIsXG4gIFwiZXRcIixcbiAgXCJhdXRcIixcbiAgXCJjb25zZXF1YXR1clwiLFxuICBcInZlbFwiLFxuICBcImlsbHVtXCIsXG4gIFwicXVpXCIsXG4gIFwiZG9sb3JlbVwiLFxuICBcImV1bVwiLFxuICBcImZ1Z2lhdFwiLFxuICBcInF1b1wiLFxuICBcInZvbHVwdGFzXCIsXG4gIFwibnVsbGFcIixcbiAgXCJwYXJpYXR1clwiLFxuICBcImF0XCIsXG4gIFwidmVyb1wiLFxuICBcImVvc1wiLFxuICBcImV0XCIsXG4gIFwiYWNjdXNhbXVzXCIsXG4gIFwib2ZmaWNpaXNcIixcbiAgXCJkZWJpdGlzXCIsXG4gIFwiYXV0XCIsXG4gIFwicmVydW1cIixcbiAgXCJuZWNlc3NpdGF0aWJ1c1wiLFxuICBcInNhZXBlXCIsXG4gIFwiZXZlbmlldFwiLFxuICBcInV0XCIsXG4gIFwiZXRcIixcbiAgXCJ2b2x1cHRhdGVzXCIsXG4gIFwicmVwdWRpYW5kYWVcIixcbiAgXCJzaW50XCIsXG4gIFwiZXRcIixcbiAgXCJtb2xlc3RpYWVcIixcbiAgXCJub25cIixcbiAgXCJyZWN1c2FuZGFlXCIsXG4gIFwiaXRhcXVlXCIsXG4gIFwiZWFydW1cIixcbiAgXCJyZXJ1bVwiLFxuICBcImhpY1wiLFxuICBcInRlbmV0dXJcIixcbiAgXCJhXCIsXG4gIFwic2FwaWVudGVcIixcbiAgXCJkZWxlY3R1c1wiLFxuICBcInV0XCIsXG4gIFwiYXV0XCIsXG4gIFwicmVpY2llbmRpc1wiLFxuICBcInZvbHVwdGF0aWJ1c1wiLFxuICBcIm1haW9yZXNcIixcbiAgXCJkb2xvcmlidXNcIixcbiAgXCJhc3BlcmlvcmVzXCIsXG4gIFwicmVwZWxsYXRcIlxuXTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiQWFsaXlhaFwiLFxuICBcIkFhcm9uXCIsXG4gIFwiQWJhZ2FpbFwiLFxuICBcIkFiYmV5XCIsXG4gIFwiQWJiaWVcIixcbiAgXCJBYmJpZ2FpbFwiLFxuICBcIkFiYnlcIixcbiAgXCJBYmRpZWxcIixcbiAgXCJBYmR1bFwiLFxuICBcIkFiZHVsbGFoXCIsXG4gIFwiQWJlXCIsXG4gIFwiQWJlbFwiLFxuICBcIkFiZWxhcmRvXCIsXG4gIFwiQWJpZ2FpbFwiLFxuICBcIkFiaWdhbGVcIixcbiAgXCJBYmlnYXlsZVwiLFxuICBcIkFibmVyXCIsXG4gIFwiQWJyYWhhbVwiLFxuICBcIkFkYVwiLFxuICBcIkFkYWhcIixcbiAgXCJBZGFsYmVydG9cIixcbiAgXCJBZGFsaW5lXCIsXG4gIFwiQWRhbVwiLFxuICBcIkFkYW5cIixcbiAgXCJBZGRpZVwiLFxuICBcIkFkZGlzb25cIixcbiAgXCJBZGVsYVwiLFxuICBcIkFkZWxiZXJ0XCIsXG4gIFwiQWRlbGVcIixcbiAgXCJBZGVsaWFcIixcbiAgXCJBZGVsaW5lXCIsXG4gIFwiQWRlbGxcIixcbiAgXCJBZGVsbGFcIixcbiAgXCJBZGVsbGVcIixcbiAgXCJBZGl0eWFcIixcbiAgXCJBZG9sZlwiLFxuICBcIkFkb2xmb1wiLFxuICBcIkFkb2xwaFwiLFxuICBcIkFkb2xwaHVzXCIsXG4gIFwiQWRvbmlzXCIsXG4gIFwiQWRyYWluXCIsXG4gIFwiQWRyaWFuXCIsXG4gIFwiQWRyaWFuYVwiLFxuICBcIkFkcmlhbm5hXCIsXG4gIFwiQWRyaWVsXCIsXG4gIFwiQWRyaWVuXCIsXG4gIFwiQWRyaWVubmVcIixcbiAgXCJBZnRvblwiLFxuICBcIkFnbGFlXCIsXG4gIFwiQWduZXNcIixcbiAgXCJBZ3VzdGluXCIsXG4gIFwiQWd1c3RpbmFcIixcbiAgXCJBaG1hZFwiLFxuICBcIkFobWVkXCIsXG4gIFwiQWlkYVwiLFxuICBcIkFpZGFuXCIsXG4gIFwiQWlkZW5cIixcbiAgXCJBaWxlZW5cIixcbiAgXCJBaW1lZVwiLFxuICBcIkFpc2hhXCIsXG4gIFwiQWl5YW5hXCIsXG4gIFwiQWtlZW1cIixcbiAgXCJBbFwiLFxuICBcIkFsYWluYVwiLFxuICBcIkFsYW5cIixcbiAgXCJBbGFuYVwiLFxuICBcIkFsYW5pc1wiLFxuICBcIkFsYW5uYVwiLFxuICBcIkFsYXluYVwiLFxuICBcIkFsYmFcIixcbiAgXCJBbGJlcnRcIixcbiAgXCJBbGJlcnRhXCIsXG4gIFwiQWxiZXJ0aGFcIixcbiAgXCJBbGJlcnRvXCIsXG4gIFwiQWxiaW5cIixcbiAgXCJBbGJpbmFcIixcbiAgXCJBbGRhXCIsXG4gIFwiQWxkZW5cIixcbiAgXCJBbGVjXCIsXG4gIFwiQWxlZW5cIixcbiAgXCJBbGVqYW5kcmFcIixcbiAgXCJBbGVqYW5kcmluXCIsXG4gIFwiQWxla1wiLFxuICBcIkFsZW5hXCIsXG4gIFwiQWxlbmVcIixcbiAgXCJBbGVzc2FuZHJhXCIsXG4gIFwiQWxlc3NhbmRyb1wiLFxuICBcIkFsZXNzaWFcIixcbiAgXCJBbGV0aGFcIixcbiAgXCJBbGV4XCIsXG4gIFwiQWxleGFcIixcbiAgXCJBbGV4YW5kZXJcIixcbiAgXCJBbGV4YW5kcmFcIixcbiAgXCJBbGV4YW5kcmVcIixcbiAgXCJBbGV4YW5kcmVhXCIsXG4gIFwiQWxleGFuZHJpYVwiLFxuICBcIkFsZXhhbmRyaW5lXCIsXG4gIFwiQWxleGFuZHJvXCIsXG4gIFwiQWxleGFuZVwiLFxuICBcIkFsZXhhbm5lXCIsXG4gIFwiQWxleGllXCIsXG4gIFwiQWxleGlzXCIsXG4gIFwiQWxleHlzXCIsXG4gIFwiQWxleHphbmRlclwiLFxuICBcIkFsZlwiLFxuICBcIkFsZm9uc29cIixcbiAgXCJBbGZvbnpvXCIsXG4gIFwiQWxmb3JkXCIsXG4gIFwiQWxmcmVkXCIsXG4gIFwiQWxmcmVkYVwiLFxuICBcIkFsZnJlZG9cIixcbiAgXCJBbGlcIixcbiAgXCJBbGlhXCIsXG4gIFwiQWxpY2VcIixcbiAgXCJBbGljaWFcIixcbiAgXCJBbGlzYVwiLFxuICBcIkFsaXNoYVwiLFxuICBcIkFsaXNvblwiLFxuICBcIkFsaXZpYVwiLFxuICBcIkFsaXlhXCIsXG4gIFwiQWxpeWFoXCIsXG4gIFwiQWxpemFcIixcbiAgXCJBbGl6ZVwiLFxuICBcIkFsbGFuXCIsXG4gIFwiQWxsZW5cIixcbiAgXCJBbGxlbmVcIixcbiAgXCJBbGxpZVwiLFxuICBcIkFsbGlzb25cIixcbiAgXCJBbGx5XCIsXG4gIFwiQWxwaG9uc29cIixcbiAgXCJBbHRhXCIsXG4gIFwiQWx0aGVhXCIsXG4gIFwiQWx2YVwiLFxuICBcIkFsdmFoXCIsXG4gIFwiQWx2ZW5hXCIsXG4gIFwiQWx2ZXJhXCIsXG4gIFwiQWx2ZXJ0YVwiLFxuICBcIkFsdmluYVwiLFxuICBcIkFsdmlzXCIsXG4gIFwiQWx5Y2VcIixcbiAgXCJBbHljaWFcIixcbiAgXCJBbHlzYVwiLFxuICBcIkFseXNoYVwiLFxuICBcIkFseXNvblwiLFxuICBcIkFseXNzb25cIixcbiAgXCJBbWFsaWFcIixcbiAgXCJBbWFuZGFcIixcbiAgXCJBbWFuaVwiLFxuICBcIkFtYXJhXCIsXG4gIFwiQW1hcmlcIixcbiAgXCJBbWF5YVwiLFxuICBcIkFtYmVyXCIsXG4gIFwiQW1icm9zZVwiLFxuICBcIkFtZWxpYVwiLFxuICBcIkFtZWxpZVwiLFxuICBcIkFtZWx5XCIsXG4gIFwiQW1lcmljYVwiLFxuICBcIkFtZXJpY29cIixcbiAgXCJBbWllXCIsXG4gIFwiQW1pbmFcIixcbiAgXCJBbWlyXCIsXG4gIFwiQW1pcmFcIixcbiAgXCJBbWl5YVwiLFxuICBcIkFtb3NcIixcbiAgXCJBbXBhcm9cIixcbiAgXCJBbXlcIixcbiAgXCJBbXlhXCIsXG4gIFwiQW5hXCIsXG4gIFwiQW5hYmVsXCIsXG4gIFwiQW5hYmVsbGVcIixcbiAgXCJBbmFoaVwiLFxuICBcIkFuYWlzXCIsXG4gIFwiQW5hc3RhY2lvXCIsXG4gIFwiQW5hc3Rhc2lhXCIsXG4gIFwiQW5kZXJzb25cIixcbiAgXCJBbmRyZVwiLFxuICBcIkFuZHJlYW5lXCIsXG4gIFwiQW5kcmVhbm5lXCIsXG4gIFwiQW5kcmVzXCIsXG4gIFwiQW5kcmV3XCIsXG4gIFwiQW5keVwiLFxuICBcIkFuZ2VsXCIsXG4gIFwiQW5nZWxhXCIsXG4gIFwiQW5nZWxpY2FcIixcbiAgXCJBbmdlbGluYVwiLFxuICBcIkFuZ2VsaW5lXCIsXG4gIFwiQW5nZWxpdGFcIixcbiAgXCJBbmdlbG9cIixcbiAgXCJBbmdpZVwiLFxuICBcIkFuZ3VzXCIsXG4gIFwiQW5pYmFsXCIsXG4gIFwiQW5pa2FcIixcbiAgXCJBbmlzc2FcIixcbiAgXCJBbml0YVwiLFxuICBcIkFuaXlhXCIsXG4gIFwiQW5peWFoXCIsXG4gIFwiQW5qYWxpXCIsXG4gIFwiQW5uYVwiLFxuICBcIkFubmFiZWxcIixcbiAgXCJBbm5hYmVsbFwiLFxuICBcIkFubmFiZWxsZVwiLFxuICBcIkFubmFsaXNlXCIsXG4gIFwiQW5uYW1hZVwiLFxuICBcIkFubmFtYXJpZVwiLFxuICBcIkFubmVcIixcbiAgXCJBbm5ldHRhXCIsXG4gIFwiQW5uZXR0ZVwiLFxuICBcIkFubmllXCIsXG4gIFwiQW5zZWxcIixcbiAgXCJBbnNsZXlcIixcbiAgXCJBbnRob255XCIsXG4gIFwiQW50b2luZXR0ZVwiLFxuICBcIkFudG9uZVwiLFxuICBcIkFudG9uZXR0YVwiLFxuICBcIkFudG9uZXR0ZVwiLFxuICBcIkFudG9uaWFcIixcbiAgXCJBbnRvbmlldHRhXCIsXG4gIFwiQW50b25pbmFcIixcbiAgXCJBbnRvbmlvXCIsXG4gIFwiQW50d2FuXCIsXG4gIFwiQW50d29uXCIsXG4gIFwiQW55YVwiLFxuICBcIkFwcmlsXCIsXG4gIFwiQXJhXCIsXG4gIFwiQXJhY2VsaVwiLFxuICBcIkFyYWNlbHlcIixcbiAgXCJBcmNoXCIsXG4gIFwiQXJjaGliYWxkXCIsXG4gIFwiQXJkZWxsYVwiLFxuICBcIkFyZGVuXCIsXG4gIFwiQXJkaXRoXCIsXG4gIFwiQXJlbHlcIixcbiAgXCJBcmlcIixcbiAgXCJBcmlhbmVcIixcbiAgXCJBcmlhbm5hXCIsXG4gIFwiQXJpY1wiLFxuICBcIkFyaWVsXCIsXG4gIFwiQXJpZWxsZVwiLFxuICBcIkFyanVuXCIsXG4gIFwiQXJsZW5lXCIsXG4gIFwiQXJsaWVcIixcbiAgXCJBcmxvXCIsXG4gIFwiQXJtYW5kXCIsXG4gIFwiQXJtYW5kb1wiLFxuICBcIkFybWFuaVwiLFxuICBcIkFybmFsZG9cIixcbiAgXCJBcm5lXCIsXG4gIFwiQXJub1wiLFxuICBcIkFybm9sZFwiLFxuICBcIkFybm9sZG9cIixcbiAgXCJBcm51bGZvXCIsXG4gIFwiQXJvblwiLFxuICBcIkFydFwiLFxuICBcIkFydGh1clwiLFxuICBcIkFydHVyb1wiLFxuICBcIkFydmVsXCIsXG4gIFwiQXJ2aWRcIixcbiAgXCJBcnZpbGxhXCIsXG4gIFwiQXJ5YW5uYVwiLFxuICBcIkFzYVwiLFxuICBcIkFzaGFcIixcbiAgXCJBc2hsZWVcIixcbiAgXCJBc2hsZWlnaFwiLFxuICBcIkFzaGxleVwiLFxuICBcIkFzaGx5XCIsXG4gIFwiQXNobHlublwiLFxuICBcIkFzaHRvblwiLFxuICBcIkFzaHR5blwiLFxuICBcIkFzaWFcIixcbiAgXCJBc3N1bnRhXCIsXG4gIFwiQXN0cmlkXCIsXG4gIFwiQXRoZW5hXCIsXG4gIFwiQXVicmVlXCIsXG4gIFwiQXVicmV5XCIsXG4gIFwiQXVkaWVcIixcbiAgXCJBdWRyYVwiLFxuICBcIkF1ZHJlYW5uZVwiLFxuICBcIkF1ZHJleVwiLFxuICBcIkF1Z3VzdFwiLFxuICBcIkF1Z3VzdGFcIixcbiAgXCJBdWd1c3RpbmVcIixcbiAgXCJBdWd1c3R1c1wiLFxuICBcIkF1cmVsaWFcIixcbiAgXCJBdXJlbGllXCIsXG4gIFwiQXVyZWxpb1wiLFxuICBcIkF1cm9yZVwiLFxuICBcIkF1c3RlblwiLFxuICBcIkF1c3RpblwiLFxuICBcIkF1c3R5blwiLFxuICBcIkF1dHVtblwiLFxuICBcIkF2YVwiLFxuICBcIkF2ZXJ5XCIsXG4gIFwiQXZpc1wiLFxuICBcIkF4ZWxcIixcbiAgXCJBeWFuYVwiLFxuICBcIkF5ZGVuXCIsXG4gIFwiQXlsYVwiLFxuICBcIkF5bGluXCIsXG4gIFwiQmFieVwiLFxuICBcIkJhaWxlZVwiLFxuICBcIkJhaWxleVwiLFxuICBcIkJhcmJhcmFcIixcbiAgXCJCYXJuZXlcIixcbiAgXCJCYXJvblwiLFxuICBcIkJhcnJldHRcIixcbiAgXCJCYXJyeVwiLFxuICBcIkJhcnRcIixcbiAgXCJCYXJ0aG9sb21lXCIsXG4gIFwiQmFydG9uXCIsXG4gIFwiQmF5bGVlXCIsXG4gIFwiQmVhdHJpY2VcIixcbiAgXCJCZWF1XCIsXG4gIFwiQmVhdWxhaFwiLFxuICBcIkJlbGxcIixcbiAgXCJCZWxsYVwiLFxuICBcIkJlbGxlXCIsXG4gIFwiQmVuXCIsXG4gIFwiQmVuZWRpY3RcIixcbiAgXCJCZW5qYW1pblwiLFxuICBcIkJlbm5ldHRcIixcbiAgXCJCZW5uaWVcIixcbiAgXCJCZW5ueVwiLFxuICBcIkJlbnRvblwiLFxuICBcIkJlcmVuaWNlXCIsXG4gIFwiQmVybmFkZXR0ZVwiLFxuICBcIkJlcm5hZGluZVwiLFxuICBcIkJlcm5hcmRcIixcbiAgXCJCZXJuYXJkb1wiLFxuICBcIkJlcm5laWNlXCIsXG4gIFwiQmVybmhhcmRcIixcbiAgXCJCZXJuaWNlXCIsXG4gIFwiQmVybmllXCIsXG4gIFwiQmVybmllY2VcIixcbiAgXCJCZXJuaXRhXCIsXG4gIFwiQmVycnlcIixcbiAgXCJCZXJ0XCIsXG4gIFwiQmVydGFcIixcbiAgXCJCZXJ0aGFcIixcbiAgXCJCZXJ0cmFtXCIsXG4gIFwiQmVydHJhbmRcIixcbiAgXCJCZXJ5bFwiLFxuICBcIkJlc3NpZVwiLFxuICBcIkJldGhcIixcbiAgXCJCZXRoYW55XCIsXG4gIFwiQmV0aGVsXCIsXG4gIFwiQmV0c3lcIixcbiAgXCJCZXR0ZVwiLFxuICBcIkJldHRpZVwiLFxuICBcIkJldHR5XCIsXG4gIFwiQmV0dHllXCIsXG4gIFwiQmV1bGFoXCIsXG4gIFwiQmV2ZXJseVwiLFxuICBcIkJpYW5rYVwiLFxuICBcIkJpbGxcIixcbiAgXCJCaWxsaWVcIixcbiAgXCJCaWxseVwiLFxuICBcIkJpcmRpZVwiLFxuICBcIkJsYWlyXCIsXG4gIFwiQmxhaXNlXCIsXG4gIFwiQmxha2VcIixcbiAgXCJCbGFuY2FcIixcbiAgXCJCbGFuY2hlXCIsXG4gIFwiQmxhemVcIixcbiAgXCJCb1wiLFxuICBcIkJvYmJpZVwiLFxuICBcIkJvYmJ5XCIsXG4gIFwiQm9uaXRhXCIsXG4gIFwiQm9ubmllXCIsXG4gIFwiQm9yaXNcIixcbiAgXCJCb3lkXCIsXG4gIFwiQnJhZFwiLFxuICBcIkJyYWRlblwiLFxuICBcIkJyYWRmb3JkXCIsXG4gIFwiQnJhZGxleVwiLFxuICBcIkJyYWRseVwiLFxuICBcIkJyYWR5XCIsXG4gIFwiQnJhZWRlblwiLFxuICBcIkJyYWluXCIsXG4gIFwiQnJhbmRpXCIsXG4gIFwiQnJhbmRvXCIsXG4gIFwiQnJhbmRvblwiLFxuICBcIkJyYW5kdFwiLFxuICBcIkJyYW5keVwiLFxuICBcIkJyYW5keW5cIixcbiAgXCJCcmFubm9uXCIsXG4gIFwiQnJhbnNvblwiLFxuICBcIkJyYW50XCIsXG4gIFwiQnJhdWxpb1wiLFxuICBcIkJyYXh0b25cIixcbiAgXCJCcmF5YW5cIixcbiAgXCJCcmVhbmFcIixcbiAgXCJCcmVhbm5hXCIsXG4gIFwiQnJlYW5uZVwiLFxuICBcIkJyZW5kYVwiLFxuICBcIkJyZW5kYW5cIixcbiAgXCJCcmVuZGVuXCIsXG4gIFwiQnJlbmRvblwiLFxuICBcIkJyZW5uYVwiLFxuICBcIkJyZW5uYW5cIixcbiAgXCJCcmVubm9uXCIsXG4gIFwiQnJlbnRcIixcbiAgXCJCcmV0XCIsXG4gIFwiQnJldHRcIixcbiAgXCJCcmlhXCIsXG4gIFwiQnJpYW5cIixcbiAgXCJCcmlhbmFcIixcbiAgXCJCcmlhbm5lXCIsXG4gIFwiQnJpY2VcIixcbiAgXCJCcmlkZ2V0XCIsXG4gIFwiQnJpZGdldHRlXCIsXG4gIFwiQnJpZGllXCIsXG4gIFwiQnJpZWxsZVwiLFxuICBcIkJyaWdpdHRlXCIsXG4gIFwiQnJpb25uYVwiLFxuICBcIkJyaXNhXCIsXG4gIFwiQnJpdG5leVwiLFxuICBcIkJyaXR0YW55XCIsXG4gIFwiQnJvY2tcIixcbiAgXCJCcm9kZXJpY2tcIixcbiAgXCJCcm9keVwiLFxuICBcIkJyb29rXCIsXG4gIFwiQnJvb2tlXCIsXG4gIFwiQnJvb2tseW5cIixcbiAgXCJCcm9va3NcIixcbiAgXCJCcm93blwiLFxuICBcIkJydWNlXCIsXG4gIFwiQnJ5YW5hXCIsXG4gIFwiQnJ5Y2VcIixcbiAgXCJCcnljZW5cIixcbiAgXCJCcnlvblwiLFxuICBcIkJ1Y2tcIixcbiAgXCJCdWRcIixcbiAgXCJCdWRkeVwiLFxuICBcIkJ1Zm9yZFwiLFxuICBcIkJ1bGFoXCIsXG4gIFwiQnVyZGV0dGVcIixcbiAgXCJCdXJsZXlcIixcbiAgXCJCdXJuaWNlXCIsXG4gIFwiQnVzdGVyXCIsXG4gIFwiQ2FkZVwiLFxuICBcIkNhZGVuXCIsXG4gIFwiQ2Flc2FyXCIsXG4gIFwiQ2FpdGx5blwiLFxuICBcIkNhbGVcIixcbiAgXCJDYWxlYlwiLFxuICBcIkNhbGVpZ2hcIixcbiAgXCJDYWxpXCIsXG4gIFwiQ2FsaXN0YVwiLFxuICBcIkNhbGxpZVwiLFxuICBcIkNhbWRlblwiLFxuICBcIkNhbWVyb25cIixcbiAgXCJDYW1pbGFcIixcbiAgXCJDYW1pbGxhXCIsXG4gIFwiQ2FtaWxsZVwiLFxuICBcIkNhbXJlblwiLFxuICBcIkNhbXJvblwiLFxuICBcIkNhbXJ5blwiLFxuICBcIkNhbXlsbGVcIixcbiAgXCJDYW5kYWNlXCIsXG4gIFwiQ2FuZGVsYXJpb1wiLFxuICBcIkNhbmRpY2VcIixcbiAgXCJDYW5kaWRhXCIsXG4gIFwiQ2FuZGlkb1wiLFxuICBcIkNhcmFcIixcbiAgXCJDYXJleVwiLFxuICBcIkNhcmlzc2FcIixcbiAgXCJDYXJsZWVcIixcbiAgXCJDYXJsZXRvblwiLFxuICBcIkNhcmxleVwiLFxuICBcIkNhcmxpXCIsXG4gIFwiQ2FybGllXCIsXG4gIFwiQ2FybG9cIixcbiAgXCJDYXJsb3NcIixcbiAgXCJDYXJsb3R0YVwiLFxuICBcIkNhcm1lbFwiLFxuICBcIkNhcm1lbGFcIixcbiAgXCJDYXJtZWxsYVwiLFxuICBcIkNhcm1lbG9cIixcbiAgXCJDYXJtZW5cIixcbiAgXCJDYXJtaW5lXCIsXG4gIFwiQ2Fyb2xcIixcbiAgXCJDYXJvbGFubmVcIixcbiAgXCJDYXJvbGVcIixcbiAgXCJDYXJvbGluYVwiLFxuICBcIkNhcm9saW5lXCIsXG4gIFwiQ2Fyb2x5blwiLFxuICBcIkNhcm9seW5lXCIsXG4gIFwiQ2FycmllXCIsXG4gIFwiQ2Fycm9sbFwiLFxuICBcIkNhcnNvblwiLFxuICBcIkNhcnRlclwiLFxuICBcIkNhcnlcIixcbiAgXCJDYXNhbmRyYVwiLFxuICBcIkNhc2V5XCIsXG4gIFwiQ2FzaW1lclwiLFxuICBcIkNhc2ltaXJcIixcbiAgXCJDYXNwZXJcIixcbiAgXCJDYXNzYW5kcmFcIixcbiAgXCJDYXNzYW5kcmVcIixcbiAgXCJDYXNzaWR5XCIsXG4gIFwiQ2Fzc2llXCIsXG4gIFwiQ2F0YWxpbmFcIixcbiAgXCJDYXRlcmluYVwiLFxuICBcIkNhdGhhcmluZVwiLFxuICBcIkNhdGhlcmluZVwiLFxuICBcIkNhdGhyaW5lXCIsXG4gIFwiQ2F0aHJ5blwiLFxuICBcIkNhdGh5XCIsXG4gIFwiQ2F5bGFcIixcbiAgXCJDZWFzYXJcIixcbiAgXCJDZWNlbGlhXCIsXG4gIFwiQ2VjaWxcIixcbiAgXCJDZWNpbGVcIixcbiAgXCJDZWNpbGlhXCIsXG4gIFwiQ2Vkcmlja1wiLFxuICBcIkNlbGVzdGluZVwiLFxuICBcIkNlbGVzdGlub1wiLFxuICBcIkNlbGlhXCIsXG4gIFwiQ2VsaW5lXCIsXG4gIFwiQ2VzYXJcIixcbiAgXCJDaGFkXCIsXG4gIFwiQ2hhZGRcIixcbiAgXCJDaGFkcmlja1wiLFxuICBcIkNoYWltXCIsXG4gIFwiQ2hhbmNlXCIsXG4gIFwiQ2hhbmRsZXJcIixcbiAgXCJDaGFuZWxcIixcbiAgXCJDaGFuZWxsZVwiLFxuICBcIkNoYXJpdHlcIixcbiAgXCJDaGFybGVuZVwiLFxuICBcIkNoYXJsZXNcIixcbiAgXCJDaGFybGV5XCIsXG4gIFwiQ2hhcmxpZVwiLFxuICBcIkNoYXJsb3R0ZVwiLFxuICBcIkNoYXNlXCIsXG4gIFwiQ2hhc2l0eVwiLFxuICBcIkNoYXVuY2V5XCIsXG4gIFwiQ2hheWFcIixcbiAgXCJDaGF6XCIsXG4gIFwiQ2hlbHNlYVwiLFxuICBcIkNoZWxzZXlcIixcbiAgXCJDaGVsc2llXCIsXG4gIFwiQ2hlc2xleVwiLFxuICBcIkNoZXN0ZXJcIixcbiAgXCJDaGV0XCIsXG4gIFwiQ2hleWFubmVcIixcbiAgXCJDaGV5ZW5uZVwiLFxuICBcIkNobG9lXCIsXG4gIFwiQ2hyaXNcIixcbiAgXCJDaHJpc3RcIixcbiAgXCJDaHJpc3RhXCIsXG4gIFwiQ2hyaXN0ZWxsZVwiLFxuICBcIkNocmlzdGlhblwiLFxuICBcIkNocmlzdGlhbmFcIixcbiAgXCJDaHJpc3RpbmFcIixcbiAgXCJDaHJpc3RpbmVcIixcbiAgXCJDaHJpc3RvcFwiLFxuICBcIkNocmlzdG9waGVcIixcbiAgXCJDaHJpc3RvcGhlclwiLFxuICBcIkNocmlzdHlcIixcbiAgXCJDaHluYVwiLFxuICBcIkNpYXJhXCIsXG4gIFwiQ2ljZXJvXCIsXG4gIFwiQ2llbG9cIixcbiAgXCJDaWVycmFcIixcbiAgXCJDaW5keVwiLFxuICBcIkNpdGxhbGxpXCIsXG4gIFwiQ2xhaXJcIixcbiAgXCJDbGFpcmVcIixcbiAgXCJDbGFyYVwiLFxuICBcIkNsYXJhYmVsbGVcIixcbiAgXCJDbGFyZVwiLFxuICBcIkNsYXJpc3NhXCIsXG4gIFwiQ2xhcmtcIixcbiAgXCJDbGF1ZFwiLFxuICBcIkNsYXVkZVwiLFxuICBcIkNsYXVkaWFcIixcbiAgXCJDbGF1ZGllXCIsXG4gIFwiQ2xhdWRpbmVcIixcbiAgXCJDbGF5XCIsXG4gIFwiQ2xlbWVuc1wiLFxuICBcIkNsZW1lbnRcIixcbiAgXCJDbGVtZW50aW5hXCIsXG4gIFwiQ2xlbWVudGluZVwiLFxuICBcIkNsZW1taWVcIixcbiAgXCJDbGVvXCIsXG4gIFwiQ2xlb3JhXCIsXG4gIFwiQ2xldGFcIixcbiAgXCJDbGV0dXNcIixcbiAgXCJDbGV2ZVwiLFxuICBcIkNsZXZlbGFuZFwiLFxuICBcIkNsaWZmb3JkXCIsXG4gIFwiQ2xpZnRvblwiLFxuICBcIkNsaW50XCIsXG4gIFwiQ2xpbnRvblwiLFxuICBcIkNsb3RpbGRlXCIsXG4gIFwiQ2xvdmlzXCIsXG4gIFwiQ2xveWRcIixcbiAgXCJDbHlkZVwiLFxuICBcIkNvYnlcIixcbiAgXCJDb2R5XCIsXG4gIFwiQ29sYnlcIixcbiAgXCJDb2xlXCIsXG4gIFwiQ29sZW1hblwiLFxuICBcIkNvbGluXCIsXG4gIFwiQ29sbGVlblwiLFxuICBcIkNvbGxpblwiLFxuICBcIkNvbHRcIixcbiAgXCJDb2x0ZW5cIixcbiAgXCJDb2x0b25cIixcbiAgXCJDb2x1bWJ1c1wiLFxuICBcIkNvbmNlcGNpb25cIixcbiAgXCJDb25uZXJcIixcbiAgXCJDb25uaWVcIixcbiAgXCJDb25ub3JcIixcbiAgXCJDb25vclwiLFxuICBcIkNvbnJhZFwiLFxuICBcIkNvbnN0YW5jZVwiLFxuICBcIkNvbnN0YW50aW5cIixcbiAgXCJDb25zdWVsb1wiLFxuICBcIkNvb3BlclwiLFxuICBcIkNvcmFcIixcbiAgXCJDb3JhbGllXCIsXG4gIFwiQ29yYmluXCIsXG4gIFwiQ29yZGVsaWFcIixcbiAgXCJDb3JkZWxsXCIsXG4gIFwiQ29yZGlhXCIsXG4gIFwiQ29yZGllXCIsXG4gIFwiQ29yZW5lXCIsXG4gIFwiQ29yaW5lXCIsXG4gIFwiQ29ybmVsaXVzXCIsXG4gIFwiQ29ybmVsbFwiLFxuICBcIkNvcnJpbmVcIixcbiAgXCJDb3J0ZXpcIixcbiAgXCJDb3J0bmV5XCIsXG4gIFwiQ29yeVwiLFxuICBcIkNvdHlcIixcbiAgXCJDb3VydG5leVwiLFxuICBcIkNveVwiLFxuICBcIkNyYWlnXCIsXG4gIFwiQ3Jhd2ZvcmRcIixcbiAgXCJDcmVvbGFcIixcbiAgXCJDcmlzdGFsXCIsXG4gIFwiQ3Jpc3RpYW5cIixcbiAgXCJDcmlzdGluYVwiLFxuICBcIkNyaXN0b2JhbFwiLFxuICBcIkNyaXN0b3BoZXJcIixcbiAgXCJDcnV6XCIsXG4gIFwiQ3J5c3RhbFwiLFxuICBcIkNyeXN0ZWxcIixcbiAgXCJDdWxsZW5cIixcbiAgXCJDdXJ0XCIsXG4gIFwiQ3VydGlzXCIsXG4gIFwiQ3lkbmV5XCIsXG4gIFwiQ3ludGhpYVwiLFxuICBcIkN5cmlsXCIsXG4gIFwiQ3lydXNcIixcbiAgXCJEYWdtYXJcIixcbiAgXCJEYWhsaWFcIixcbiAgXCJEYWlqYVwiLFxuICBcIkRhaXNoYVwiLFxuICBcIkRhaXN5XCIsXG4gIFwiRGFrb3RhXCIsXG4gIFwiRGFsZVwiLFxuICBcIkRhbGxhc1wiLFxuICBcIkRhbGxpblwiLFxuICBcIkRhbHRvblwiLFxuICBcIkRhbWFyaXNcIixcbiAgXCJEYW1lb25cIixcbiAgXCJEYW1pYW5cIixcbiAgXCJEYW1pZW5cIixcbiAgXCJEYW1pb25cIixcbiAgXCJEYW1vblwiLFxuICBcIkRhblwiLFxuICBcIkRhbmFcIixcbiAgXCJEYW5kcmVcIixcbiAgXCJEYW5lXCIsXG4gIFwiRCdhbmdlbG9cIixcbiAgXCJEYW5nZWxvXCIsXG4gIFwiRGFuaWFsXCIsXG4gIFwiRGFuaWVsYVwiLFxuICBcIkRhbmllbGxhXCIsXG4gIFwiRGFuaWVsbGVcIixcbiAgXCJEYW5pa2FcIixcbiAgXCJEYW5uaWVcIixcbiAgXCJEYW5ueVwiLFxuICBcIkRhbnRlXCIsXG4gIFwiRGFueWthXCIsXG4gIFwiRGFwaG5lXCIsXG4gIFwiRGFwaG5lZVwiLFxuICBcIkRhcGhuZXlcIixcbiAgXCJEYXJieVwiLFxuICBcIkRhcmVuXCIsXG4gIFwiRGFyaWFuXCIsXG4gIFwiRGFyaWFuYVwiLFxuICBcIkRhcmllblwiLFxuICBcIkRhcmlvXCIsXG4gIFwiRGFyaW9uXCIsXG4gIFwiRGFyaXVzXCIsXG4gIFwiRGFybGVuZVwiLFxuICBcIkRhcm9uXCIsXG4gIFwiRGFycmVsXCIsXG4gIFwiRGFycmVsbFwiLFxuICBcIkRhcnJlblwiLFxuICBcIkRhcnJpY2tcIixcbiAgXCJEYXJyaW5cIixcbiAgXCJEYXJyaW9uXCIsXG4gIFwiRGFycm9uXCIsXG4gIFwiRGFycnlsXCIsXG4gIFwiRGFyd2luXCIsXG4gIFwiRGFyeWxcIixcbiAgXCJEYXNoYXduXCIsXG4gIFwiRGFzaWFcIixcbiAgXCJEYXZlXCIsXG4gIFwiRGF2aWRcIixcbiAgXCJEYXZpblwiLFxuICBcIkRhdmlvblwiLFxuICBcIkRhdm9uXCIsXG4gIFwiRGF2b250ZVwiLFxuICBcIkRhd25cIixcbiAgXCJEYXdzb25cIixcbiAgXCJEYXhcIixcbiAgXCJEYXlhbmFcIixcbiAgXCJEYXluYVwiLFxuICBcIkRheW5lXCIsXG4gIFwiRGF5dG9uXCIsXG4gIFwiRGVhblwiLFxuICBcIkRlYW5nZWxvXCIsXG4gIFwiRGVhbm5hXCIsXG4gIFwiRGVib3JhaFwiLFxuICBcIkRlY2xhblwiLFxuICBcIkRlZHJpY1wiLFxuICBcIkRlZHJpY2tcIixcbiAgXCJEZWVcIixcbiAgXCJEZWlvblwiLFxuICBcIkRlamFcIixcbiAgXCJEZWphaFwiLFxuICBcIkRlam9uXCIsXG4gIFwiRGVqdWFuXCIsXG4gIFwiRGVsYW5leVwiLFxuICBcIkRlbGJlcnRcIixcbiAgXCJEZWxmaW5hXCIsXG4gIFwiRGVsaWFcIixcbiAgXCJEZWxpbGFoXCIsXG4gIFwiRGVsbFwiLFxuICBcIkRlbGxhXCIsXG4gIFwiRGVsbWVyXCIsXG4gIFwiRGVsb3Jlc1wiLFxuICBcIkRlbHBoYVwiLFxuICBcIkRlbHBoaWFcIixcbiAgXCJEZWxwaGluZVwiLFxuICBcIkRlbHRhXCIsXG4gIFwiRGVtYXJjb1wiLFxuICBcIkRlbWFyY3VzXCIsXG4gIFwiRGVtYXJpb1wiLFxuICBcIkRlbWV0cmlzXCIsXG4gIFwiRGVtZXRyaXVzXCIsXG4gIFwiRGVtb25kXCIsXG4gIFwiRGVuYVwiLFxuICBcIkRlbmlzXCIsXG4gIFwiRGVubmlzXCIsXG4gIFwiRGVvblwiLFxuICBcIkRlb25kcmVcIixcbiAgXCJEZW9udGFlXCIsXG4gIFwiRGVvbnRlXCIsXG4gIFwiRGVyZWNrXCIsXG4gIFwiRGVyZWtcIixcbiAgXCJEZXJpY2tcIixcbiAgXCJEZXJvblwiLFxuICBcIkRlcnJpY2tcIixcbiAgXCJEZXNoYXVuXCIsXG4gIFwiRGVzaGF3blwiLFxuICBcIkRlc2lyZWVcIixcbiAgXCJEZXNtb25kXCIsXG4gIFwiRGVzc2llXCIsXG4gIFwiRGVzdGFueVwiLFxuICBcIkRlc3RpblwiLFxuICBcIkRlc3RpbmVlXCIsXG4gIFwiRGVzdGluZXlcIixcbiAgXCJEZXN0aW5pXCIsXG4gIFwiRGVzdGlueVwiLFxuICBcIkRldmFuXCIsXG4gIFwiRGV2YW50ZVwiLFxuICBcIkRldmVuXCIsXG4gIFwiRGV2aW5cIixcbiAgXCJEZXZvblwiLFxuICBcIkRldm9udGVcIixcbiAgXCJEZXZ5blwiLFxuICBcIkRld2F5bmVcIixcbiAgXCJEZXdpdHRcIixcbiAgXCJEZXh0ZXJcIixcbiAgXCJEaWFtb25kXCIsXG4gIFwiRGlhbmFcIixcbiAgXCJEaWFubmFcIixcbiAgXCJEaWVnb1wiLFxuICBcIkRpbGxhblwiLFxuICBcIkRpbGxvblwiLFxuICBcIkRpbWl0cmlcIixcbiAgXCJEaW5hXCIsXG4gIFwiRGlub1wiLFxuICBcIkRpb25cIixcbiAgXCJEaXhpZVwiLFxuICBcIkRvY2tcIixcbiAgXCJEb2xseVwiLFxuICBcIkRvbG9yZXNcIixcbiAgXCJEb21lbmljXCIsXG4gIFwiRG9tZW5pY2FcIixcbiAgXCJEb21lbmlja1wiLFxuICBcIkRvbWVuaWNvXCIsXG4gIFwiRG9taW5nb1wiLFxuICBcIkRvbWluaWNcIixcbiAgXCJEb21pbmlxdWVcIixcbiAgXCJEb25cIixcbiAgXCJEb25hbGRcIixcbiAgXCJEb25hdG9cIixcbiAgXCJEb25hdm9uXCIsXG4gIFwiRG9ubmFcIixcbiAgXCJEb25uZWxsXCIsXG4gIFwiRG9ubmllXCIsXG4gIFwiRG9ubnlcIixcbiAgXCJEb3JhXCIsXG4gIFwiRG9yY2FzXCIsXG4gIFwiRG9yaWFuXCIsXG4gIFwiRG9yaXNcIixcbiAgXCJEb3JvdGhlYVwiLFxuICBcIkRvcm90aHlcIixcbiAgXCJEb3JyaXNcIixcbiAgXCJEb3J0aGFcIixcbiAgXCJEb3J0aHlcIixcbiAgXCJEb3VnXCIsXG4gIFwiRG91Z2xhc1wiLFxuICBcIkRvdmllXCIsXG4gIFwiRG95bGVcIixcbiAgXCJEcmFrZVwiLFxuICBcIkRyZXdcIixcbiAgXCJEdWFuZVwiLFxuICBcIkR1ZGxleVwiLFxuICBcIkR1bGNlXCIsXG4gIFwiRHVuY2FuXCIsXG4gIFwiRHVyd2FyZFwiLFxuICBcIkR1c3RpblwiLFxuICBcIkR1c3R5XCIsXG4gIFwiRHdpZ2h0XCIsXG4gIFwiRHlsYW5cIixcbiAgXCJFYXJsXCIsXG4gIFwiRWFybGVuZVwiLFxuICBcIkVhcmxpbmVcIixcbiAgXCJFYXJuZXN0XCIsXG4gIFwiRWFybmVzdGluZVwiLFxuICBcIkVhc3RlclwiLFxuICBcIkVhc3RvblwiLFxuICBcIkViYmFcIixcbiAgXCJFYm9ueVwiLFxuICBcIkVkXCIsXG4gIFwiRWRhXCIsXG4gIFwiRWRkXCIsXG4gIFwiRWRkaWVcIixcbiAgXCJFZGVuXCIsXG4gIFwiRWRnYXJcIixcbiAgXCJFZGdhcmRvXCIsXG4gIFwiRWRpc29uXCIsXG4gIFwiRWRtb25kXCIsXG4gIFwiRWRtdW5kXCIsXG4gIFwiRWRuYVwiLFxuICBcIkVkdWFyZG9cIixcbiAgXCJFZHdhcmRcIixcbiAgXCJFZHdhcmRvXCIsXG4gIFwiRWR3aW5cIixcbiAgXCJFZHdpbmFcIixcbiAgXCJFZHl0aFwiLFxuICBcIkVkeXRoZVwiLFxuICBcIkVmZmllXCIsXG4gIFwiRWZyYWluXCIsXG4gIFwiRWZyZW5cIixcbiAgXCJFaWxlZW5cIixcbiAgXCJFaW5hclwiLFxuICBcIkVpbm9cIixcbiAgXCJFbGFkaW9cIixcbiAgXCJFbGFpbmFcIixcbiAgXCJFbGJlcnRcIixcbiAgXCJFbGRhXCIsXG4gIFwiRWxkb25cIixcbiAgXCJFbGRvcmFcIixcbiAgXCJFbGRyZWRcIixcbiAgXCJFbGRyaWRnZVwiLFxuICBcIkVsZWFub3JhXCIsXG4gIFwiRWxlYW5vcmVcIixcbiAgXCJFbGVhemFyXCIsXG4gIFwiRWxlY3RhXCIsXG4gIFwiRWxlbmFcIixcbiAgXCJFbGVub3JcIixcbiAgXCJFbGVub3JhXCIsXG4gIFwiRWxlb25vcmVcIixcbiAgXCJFbGZyaWVkYVwiLFxuICBcIkVsaVwiLFxuICBcIkVsaWFuXCIsXG4gIFwiRWxpYW5lXCIsXG4gIFwiRWxpYXNcIixcbiAgXCJFbGllemVyXCIsXG4gIFwiRWxpamFoXCIsXG4gIFwiRWxpbm9yXCIsXG4gIFwiRWxpbm9yZVwiLFxuICBcIkVsaXNhXCIsXG4gIFwiRWxpc2FiZXRoXCIsXG4gIFwiRWxpc2VcIixcbiAgXCJFbGlzZW9cIixcbiAgXCJFbGlzaGFcIixcbiAgXCJFbGlzc2FcIixcbiAgXCJFbGl6YVwiLFxuICBcIkVsaXphYmV0aFwiLFxuICBcIkVsbGFcIixcbiAgXCJFbGxlblwiLFxuICBcIkVsbGllXCIsXG4gIFwiRWxsaW90XCIsXG4gIFwiRWxsaW90dFwiLFxuICBcIkVsbGlzXCIsXG4gIFwiRWxsc3dvcnRoXCIsXG4gIFwiRWxtZXJcIixcbiAgXCJFbG1pcmFcIixcbiAgXCJFbG1vXCIsXG4gIFwiRWxtb3JlXCIsXG4gIFwiRWxuYVwiLFxuICBcIkVsbm9yYVwiLFxuICBcIkVsb2R5XCIsXG4gIFwiRWxvaXNhXCIsXG4gIFwiRWxvaXNlXCIsXG4gIFwiRWxvdWlzZVwiLFxuICBcIkVsb3lcIixcbiAgXCJFbHJveVwiLFxuICBcIkVsc2FcIixcbiAgXCJFbHNlXCIsXG4gIFwiRWxzaWVcIixcbiAgXCJFbHRhXCIsXG4gIFwiRWx0b25cIixcbiAgXCJFbHZhXCIsXG4gIFwiRWx2ZXJhXCIsXG4gIFwiRWx2aWVcIixcbiAgXCJFbHZpc1wiLFxuICBcIkVsd2luXCIsXG4gIFwiRWx3eW5cIixcbiAgXCJFbHlzZVwiLFxuICBcIkVseXNzYVwiLFxuICBcIkVsemFcIixcbiAgXCJFbWFudWVsXCIsXG4gIFwiRW1lbGlhXCIsXG4gIFwiRW1lbGllXCIsXG4gIFwiRW1lbHlcIixcbiAgXCJFbWVyYWxkXCIsXG4gIFwiRW1lcnNvblwiLFxuICBcIkVtZXJ5XCIsXG4gIFwiRW1pZVwiLFxuICBcIkVtaWxcIixcbiAgXCJFbWlsZVwiLFxuICBcIkVtaWxpYVwiLFxuICBcIkVtaWxpYW5vXCIsXG4gIFwiRW1pbGllXCIsXG4gIFwiRW1pbGlvXCIsXG4gIFwiRW1pbHlcIixcbiAgXCJFbW1hXCIsXG4gIFwiRW1tYWxlZVwiLFxuICBcIkVtbWFudWVsXCIsXG4gIFwiRW1tYW51ZWxsZVwiLFxuICBcIkVtbWV0XCIsXG4gIFwiRW1tZXR0XCIsXG4gIFwiRW1taWVcIixcbiAgXCJFbW1pdHRcIixcbiAgXCJFbW15XCIsXG4gIFwiRW1vcnlcIixcbiAgXCJFbmFcIixcbiAgXCJFbmlkXCIsXG4gIFwiRW5vY2hcIixcbiAgXCJFbm9sYVwiLFxuICBcIkVub3NcIixcbiAgXCJFbnJpY29cIixcbiAgXCJFbnJpcXVlXCIsXG4gIFwiRXBocmFpbVwiLFxuICBcIkVyYVwiLFxuICBcIkVyaWJlcnRvXCIsXG4gIFwiRXJpY1wiLFxuICBcIkVyaWNhXCIsXG4gIFwiRXJpY2hcIixcbiAgXCJFcmlja1wiLFxuICBcIkVyaWNrYVwiLFxuICBcIkVyaWtcIixcbiAgXCJFcmlrYVwiLFxuICBcIkVyaW5cIixcbiAgXCJFcmxpbmdcIixcbiAgXCJFcm5hXCIsXG4gIFwiRXJuZXN0XCIsXG4gIFwiRXJuZXN0aW5hXCIsXG4gIFwiRXJuZXN0aW5lXCIsXG4gIFwiRXJuZXN0b1wiLFxuICBcIkVybmllXCIsXG4gIFwiRXJ2aW5cIixcbiAgXCJFcndpblwiLFxuICBcIkVyeW5cIixcbiAgXCJFc21lcmFsZGFcIixcbiAgXCJFc3BlcmFuemFcIixcbiAgXCJFc3RhXCIsXG4gIFwiRXN0ZWJhblwiLFxuICBcIkVzdGVmYW5pYVwiLFxuICBcIkVzdGVsXCIsXG4gIFwiRXN0ZWxsXCIsXG4gIFwiRXN0ZWxsYVwiLFxuICBcIkVzdGVsbGVcIixcbiAgXCJFc3RldmFuXCIsXG4gIFwiRXN0aGVyXCIsXG4gIFwiRXN0cmVsbGFcIixcbiAgXCJFdGhhXCIsXG4gIFwiRXRoYW5cIixcbiAgXCJFdGhlbFwiLFxuICBcIkV0aGVseW5cIixcbiAgXCJFdGh5bFwiLFxuICBcIkV0dGllXCIsXG4gIFwiRXVkb3JhXCIsXG4gIFwiRXVnZW5lXCIsXG4gIFwiRXVnZW5pYVwiLFxuICBcIkV1bGFcIixcbiAgXCJFdWxhaFwiLFxuICBcIkV1bGFsaWFcIixcbiAgXCJFdW5hXCIsXG4gIFwiRXVuaWNlXCIsXG4gIFwiRXVzZWJpb1wiLFxuICBcIkV2YVwiLFxuICBcIkV2YWx5blwiLFxuICBcIkV2YW5cIixcbiAgXCJFdmFuZ2VsaW5lXCIsXG4gIFwiRXZhbnNcIixcbiAgXCJFdmVcIixcbiAgXCJFdmVsaW5lXCIsXG4gIFwiRXZlbHluXCIsXG4gIFwiRXZlcmFyZG9cIixcbiAgXCJFdmVyZXR0XCIsXG4gIFwiRXZlcmV0dGVcIixcbiAgXCJFdmVydFwiLFxuICBcIkV2aWVcIixcbiAgXCJFd2FsZFwiLFxuICBcIkV3ZWxsXCIsXG4gIFwiRXpla2llbFwiLFxuICBcIkV6ZXF1aWVsXCIsXG4gIFwiRXpyYVwiLFxuICBcIkZhYmlhblwiLFxuICBcIkZhYmlvbGFcIixcbiAgXCJGYWVcIixcbiAgXCJGYW5uaWVcIixcbiAgXCJGYW5ueVwiLFxuICBcIkZhdGltYVwiLFxuICBcIkZhdXN0aW5vXCIsXG4gIFwiRmF1c3RvXCIsXG4gIFwiRmF2aWFuXCIsXG4gIFwiRmF5XCIsXG4gIFwiRmF5ZVwiLFxuICBcIkZlZGVyaWNvXCIsXG4gIFwiRmVsaWNpYVwiLFxuICBcIkZlbGljaXRhXCIsXG4gIFwiRmVsaWNpdHlcIixcbiAgXCJGZWxpcGFcIixcbiAgXCJGZWxpcGVcIixcbiAgXCJGZWxpeFwiLFxuICBcIkZlbHRvblwiLFxuICBcIkZlcm1pblwiLFxuICBcIkZlcm5cIixcbiAgXCJGZXJuYW5kb1wiLFxuICBcIkZlcm5lXCIsXG4gIFwiRmlkZWxcIixcbiAgXCJGaWxpYmVydG9cIixcbiAgXCJGaWxvbWVuYVwiLFxuICBcIkZpbm5cIixcbiAgXCJGaW9uYVwiLFxuICBcIkZsYXZpZVwiLFxuICBcIkZsYXZpb1wiLFxuICBcIkZsZXRhXCIsXG4gIFwiRmxldGNoZXJcIixcbiAgXCJGbG9cIixcbiAgXCJGbG9yZW5jZVwiLFxuICBcIkZsb3JlbmNpb1wiLFxuICBcIkZsb3JpYW5cIixcbiAgXCJGbG9yaWRhXCIsXG4gIFwiRmxvcmluZVwiLFxuICBcIkZsb3NzaWVcIixcbiAgXCJGbG95XCIsXG4gIFwiRmxveWRcIixcbiAgXCJGb3JkXCIsXG4gIFwiRm9yZXN0XCIsXG4gIFwiRm9ycmVzdFwiLFxuICBcIkZvc3RlclwiLFxuICBcIkZyYW5jZXNcIixcbiAgXCJGcmFuY2VzY2FcIixcbiAgXCJGcmFuY2VzY29cIixcbiAgXCJGcmFuY2lzXCIsXG4gIFwiRnJhbmNpc2NhXCIsXG4gIFwiRnJhbmNpc2NvXCIsXG4gIFwiRnJhbmNvXCIsXG4gIFwiRnJhbmtcIixcbiAgXCJGcmFua2llXCIsXG4gIFwiRnJhbnpcIixcbiAgXCJGcmVkXCIsXG4gIFwiRnJlZGFcIixcbiAgXCJGcmVkZGllXCIsXG4gIFwiRnJlZGR5XCIsXG4gIFwiRnJlZGVyaWNcIixcbiAgXCJGcmVkZXJpY2tcIixcbiAgXCJGcmVkZXJpa1wiLFxuICBcIkZyZWRlcmlxdWVcIixcbiAgXCJGcmVkcmlja1wiLFxuICBcIkZyZWR5XCIsXG4gIFwiRnJlZWRhXCIsXG4gIFwiRnJlZW1hblwiLFxuICBcIkZyZWlkYVwiLFxuICBcIkZyaWRhXCIsXG4gIFwiRnJpZWRhXCIsXG4gIFwiRnJpZWRyaWNoXCIsXG4gIFwiRnJpdHpcIixcbiAgXCJGdXJtYW5cIixcbiAgXCJHYWJlXCIsXG4gIFwiR2FicmllbFwiLFxuICBcIkdhYnJpZWxsYVwiLFxuICBcIkdhYnJpZWxsZVwiLFxuICBcIkdhZXRhbm9cIixcbiAgXCJHYWdlXCIsXG4gIFwiR2FpbFwiLFxuICBcIkdhcmRuZXJcIixcbiAgXCJHYXJldHRcIixcbiAgXCJHYXJmaWVsZFwiLFxuICBcIkdhcmxhbmRcIixcbiAgXCJHYXJuZXRcIixcbiAgXCJHYXJuZXR0XCIsXG4gIFwiR2FycmV0XCIsXG4gIFwiR2FycmV0dFwiLFxuICBcIkdhcnJpY2tcIixcbiAgXCJHYXJyaXNvblwiLFxuICBcIkdhcnJ5XCIsXG4gIFwiR2FydGhcIixcbiAgXCJHYXN0b25cIixcbiAgXCJHYXZpblwiLFxuICBcIkdheVwiLFxuICBcIkdheWxlXCIsXG4gIFwiR2F5bG9yZFwiLFxuICBcIkdlbmVcIixcbiAgXCJHZW5lcmFsXCIsXG4gIFwiR2VuZXNpc1wiLFxuICBcIkdlbmV2aWV2ZVwiLFxuICBcIkdlbm5hcm9cIixcbiAgXCJHZW5vdmV2YVwiLFxuICBcIkdlb1wiLFxuICBcIkdlb2ZmcmV5XCIsXG4gIFwiR2VvcmdlXCIsXG4gIFwiR2VvcmdldHRlXCIsXG4gIFwiR2VvcmdpYW5hXCIsXG4gIFwiR2VvcmdpYW5uYVwiLFxuICBcIkdlb3Zhbm5pXCIsXG4gIFwiR2VvdmFubnlcIixcbiAgXCJHZW92YW55XCIsXG4gIFwiR2VyYWxkXCIsXG4gIFwiR2VyYWxkaW5lXCIsXG4gIFwiR2VyYXJkXCIsXG4gIFwiR2VyYXJkb1wiLFxuICBcIkdlcmRhXCIsXG4gIFwiR2VyaGFyZFwiLFxuICBcIkdlcm1haW5lXCIsXG4gIFwiR2VybWFuXCIsXG4gIFwiR2VycnlcIixcbiAgXCJHZXJzb25cIixcbiAgXCJHZXJ0cnVkZVwiLFxuICBcIkdpYVwiLFxuICBcIkdpYW5uaVwiLFxuICBcIkdpZGVvblwiLFxuICBcIkdpbGJlcnRcIixcbiAgXCJHaWxiZXJ0b1wiLFxuICBcIkdpbGRhXCIsXG4gIFwiR2lsZXNcIixcbiAgXCJHaWxsaWFuXCIsXG4gIFwiR2luYVwiLFxuICBcIkdpbm9cIixcbiAgXCJHaW92YW5pXCIsXG4gIFwiR2lvdmFubmFcIixcbiAgXCJHaW92YW5uaVwiLFxuICBcIkdpb3Zhbm55XCIsXG4gIFwiR2lzc2VsbGVcIixcbiAgXCJHaXVzZXBwZVwiLFxuICBcIkdsYWR5Y2VcIixcbiAgXCJHbGFkeXNcIixcbiAgXCJHbGVuXCIsXG4gIFwiR2xlbmRhXCIsXG4gIFwiR2xlbm5hXCIsXG4gIFwiR2xlbm5pZVwiLFxuICBcIkdsb3JpYVwiLFxuICBcIkdvZGZyZXlcIixcbiAgXCJHb2xkYVwiLFxuICBcIkdvbGRlblwiLFxuICBcIkdvbnphbG9cIixcbiAgXCJHb3Jkb25cIixcbiAgXCJHcmFjZVwiLFxuICBcIkdyYWNpZVwiLFxuICBcIkdyYWNpZWxhXCIsXG4gIFwiR3JhZHlcIixcbiAgXCJHcmFoYW1cIixcbiAgXCJHcmFudFwiLFxuICBcIkdyYW52aWxsZVwiLFxuICBcIkdyYXljZVwiLFxuICBcIkdyYXlzb25cIixcbiAgXCJHcmVlblwiLFxuICBcIkdyZWdcIixcbiAgXCJHcmVnZ1wiLFxuICBcIkdyZWdvcmlhXCIsXG4gIFwiR3JlZ29yaW9cIixcbiAgXCJHcmVnb3J5XCIsXG4gIFwiR3JldGFcIixcbiAgXCJHcmV0Y2hlblwiLFxuICBcIkdyZXlzb25cIixcbiAgXCJHcmlmZmluXCIsXG4gIFwiR3JvdmVyXCIsXG4gIFwiR3VhZGFsdXBlXCIsXG4gIFwiR3VkcnVuXCIsXG4gIFwiR3VpZG9cIixcbiAgXCJHdWlsbGVybW9cIixcbiAgXCJHdWlzZXBwZVwiLFxuICBcIkd1bm5hclwiLFxuICBcIkd1bm5lclwiLFxuICBcIkd1c1wiLFxuICBcIkd1c3NpZVwiLFxuICBcIkd1c3RcIixcbiAgXCJHdXN0YXZlXCIsXG4gIFwiR3V5XCIsXG4gIFwiR3dlblwiLFxuICBcIkd3ZW5kb2x5blwiLFxuICBcIkhhZGxleVwiLFxuICBcIkhhaWxlZVwiLFxuICBcIkhhaWxleVwiLFxuICBcIkhhaWxpZVwiLFxuICBcIkhhbFwiLFxuICBcIkhhbGVpZ2hcIixcbiAgXCJIYWxleVwiLFxuICBcIkhhbGllXCIsXG4gIFwiSGFsbGVcIixcbiAgXCJIYWxsaWVcIixcbiAgXCJIYW5rXCIsXG4gIFwiSGFubmFcIixcbiAgXCJIYW5uYWhcIixcbiAgXCJIYW5zXCIsXG4gIFwiSGFyZHlcIixcbiAgXCJIYXJsZXlcIixcbiAgXCJIYXJtb25cIixcbiAgXCJIYXJtb255XCIsXG4gIFwiSGFyb2xkXCIsXG4gIFwiSGFycmlzb25cIixcbiAgXCJIYXJyeVwiLFxuICBcIkhhcnZleVwiLFxuICBcIkhhc2tlbGxcIixcbiAgXCJIYXNzYW5cIixcbiAgXCJIYXNzaWVcIixcbiAgXCJIYXR0aWVcIixcbiAgXCJIYXZlblwiLFxuICBcIkhheWRlblwiLFxuICBcIkhheWxlZVwiLFxuICBcIkhheWxleVwiLFxuICBcIkhheWxpZVwiLFxuICBcIkhhemVsXCIsXG4gIFwiSGF6bGVcIixcbiAgXCJIZWF0aFwiLFxuICBcIkhlYXRoZXJcIixcbiAgXCJIZWF2ZW5cIixcbiAgXCJIZWJlclwiLFxuICBcIkhlY3RvclwiLFxuICBcIkhlaWRpXCIsXG4gIFwiSGVsZW5cIixcbiAgXCJIZWxlbmFcIixcbiAgXCJIZWxlbmVcIixcbiAgXCJIZWxnYVwiLFxuICBcIkhlbGxlblwiLFxuICBcIkhlbG1lclwiLFxuICBcIkhlbG9pc2VcIixcbiAgXCJIZW5kZXJzb25cIixcbiAgXCJIZW5yaVwiLFxuICBcIkhlbnJpZXR0ZVwiLFxuICBcIkhlbnJ5XCIsXG4gIFwiSGVyYmVydFwiLFxuICBcIkhlcm1hblwiLFxuICBcIkhlcm1hbm5cIixcbiAgXCJIZXJtaW5hXCIsXG4gIFwiSGVybWluaWFcIixcbiAgXCJIZXJtaW5pb1wiLFxuICBcIkhlcnNoZWxcIixcbiAgXCJIZXJ0YVwiLFxuICBcIkhlcnRoYVwiLFxuICBcIkhlc3RlclwiLFxuICBcIkhldHRpZVwiLFxuICBcIkhpbGFyaW9cIixcbiAgXCJIaWxiZXJ0XCIsXG4gIFwiSGlsZGFcIixcbiAgXCJIaWxkZWdhcmRcIixcbiAgXCJIaWxsYXJkXCIsXG4gIFwiSGlsbGFyeVwiLFxuICBcIkhpbG1hXCIsXG4gIFwiSGlsdG9uXCIsXG4gIFwiSGlwb2xpdG9cIixcbiAgXCJIaXJhbVwiLFxuICBcIkhvYmFydFwiLFxuICBcIkhvbGRlblwiLFxuICBcIkhvbGxpZVwiLFxuICBcIkhvbGxpc1wiLFxuICBcIkhvbGx5XCIsXG4gIFwiSG9wZVwiLFxuICBcIkhvcmFjZVwiLFxuICBcIkhvcmFjaW9cIixcbiAgXCJIb3J0ZW5zZVwiLFxuICBcIkhvc2VhXCIsXG4gIFwiSG91c3RvblwiLFxuICBcIkhvd2FyZFwiLFxuICBcIkhvd2VsbFwiLFxuICBcIkhveXRcIixcbiAgXCJIdWJlcnRcIixcbiAgXCJIdWRzb25cIixcbiAgXCJIdWdoXCIsXG4gIFwiSHVsZGFcIixcbiAgXCJIdW1iZXJ0b1wiLFxuICBcIkh1bnRlclwiLFxuICBcIkh5bWFuXCIsXG4gIFwiSWFuXCIsXG4gIFwiSWJyYWhpbVwiLFxuICBcIkljaWVcIixcbiAgXCJJZGFcIixcbiAgXCJJZGVsbFwiLFxuICBcIklkZWxsYVwiLFxuICBcIklnbmFjaW9cIixcbiAgXCJJZ25hdGl1c1wiLFxuICBcIklrZVwiLFxuICBcIklsYVwiLFxuICBcIklsZW5lXCIsXG4gIFwiSWxpYW5hXCIsXG4gIFwiSW1hXCIsXG4gIFwiSW1hbmlcIixcbiAgXCJJbWVsZGFcIixcbiAgXCJJbW1hbnVlbFwiLFxuICBcIkltb2dlbmVcIixcbiAgXCJJbmVzXCIsXG4gIFwiSXJtYVwiLFxuICBcIklydmluZ1wiLFxuICBcIklyd2luXCIsXG4gIFwiSXNhYWNcIixcbiAgXCJJc2FiZWxcIixcbiAgXCJJc2FiZWxsXCIsXG4gIFwiSXNhYmVsbGFcIixcbiAgXCJJc2FiZWxsZVwiLFxuICBcIklzYWNcIixcbiAgXCJJc2Fkb3JlXCIsXG4gIFwiSXNhaVwiLFxuICBcIklzYWlhaFwiLFxuICBcIklzYWlhc1wiLFxuICBcIklzaWRyb1wiLFxuICBcIklzbWFlbFwiLFxuICBcIklzb2JlbFwiLFxuICBcIklzb21cIixcbiAgXCJJc3JhZWxcIixcbiAgXCJJc3NhY1wiLFxuICBcIkl0emVsXCIsXG4gIFwiSXZhXCIsXG4gIFwiSXZhaFwiLFxuICBcIkl2b3J5XCIsXG4gIFwiSXZ5XCIsXG4gIFwiSXphYmVsbGFcIixcbiAgXCJJemFpYWhcIixcbiAgXCJKYWJhcmlcIixcbiAgXCJKYWNlXCIsXG4gIFwiSmFjZXlcIixcbiAgXCJKYWNpbnRoZVwiLFxuICBcIkphY2ludG9cIixcbiAgXCJKYWNrXCIsXG4gIFwiSmFja2VsaW5lXCIsXG4gIFwiSmFja2llXCIsXG4gIFwiSmFja2x5blwiLFxuICBcIkphY2tzb25cIixcbiAgXCJKYWNreVwiLFxuICBcIkphY2x5blwiLFxuICBcIkphY3F1ZWx5blwiLFxuICBcIkphY3F1ZXNcIixcbiAgXCJKYWN5bnRoZVwiLFxuICBcIkphZGFcIixcbiAgXCJKYWRlXCIsXG4gIFwiSmFkZW5cIixcbiAgXCJKYWRvblwiLFxuICBcIkphZHluXCIsXG4gIFwiSmFlZGVuXCIsXG4gIFwiSmFpZGFcIixcbiAgXCJKYWlkZW5cIixcbiAgXCJKYWlseW5cIixcbiAgXCJKYWltZVwiLFxuICBcIkphaXJvXCIsXG4gIFwiSmFrYXlsYVwiLFxuICBcIkpha2VcIixcbiAgXCJKYWtvYlwiLFxuICBcIkphbGVlbFwiLFxuICBcIkphbGVuXCIsXG4gIFwiSmFsb25cIixcbiAgXCJKYWx5blwiLFxuICBcIkphbWFhbFwiLFxuICBcIkphbWFsXCIsXG4gIFwiSmFtYXJcIixcbiAgXCJKYW1hcmN1c1wiLFxuICBcIkphbWVsXCIsXG4gIFwiSmFtZXNvblwiLFxuICBcIkphbWV5XCIsXG4gIFwiSmFtaWVcIixcbiAgXCJKYW1pbFwiLFxuICBcIkphbWlyXCIsXG4gIFwiSmFtaXNvblwiLFxuICBcIkphbW1pZVwiLFxuICBcIkphblwiLFxuICBcIkphbmFcIixcbiAgXCJKYW5hZVwiLFxuICBcIkphbmVcIixcbiAgXCJKYW5lbGxlXCIsXG4gIFwiSmFuZXNzYVwiLFxuICBcIkphbmV0XCIsXG4gIFwiSmFuaWNlXCIsXG4gIFwiSmFuaWNrXCIsXG4gIFwiSmFuaWVcIixcbiAgXCJKYW5pc1wiLFxuICBcIkphbml5YVwiLFxuICBcIkphbm5pZVwiLFxuICBcIkphbnlcIixcbiAgXCJKYXF1YW5cIixcbiAgXCJKYXF1ZWxpblwiLFxuICBcIkphcXVlbGluZVwiLFxuICBcIkphcmVkXCIsXG4gIFwiSmFyZW5cIixcbiAgXCJKYXJvZFwiLFxuICBcIkphcm9uXCIsXG4gIFwiSmFycmVkXCIsXG4gIFwiSmFycmVsbFwiLFxuICBcIkphcnJldFwiLFxuICBcIkphcnJldHRcIixcbiAgXCJKYXJyb2RcIixcbiAgXCJKYXJ2aXNcIixcbiAgXCJKYXNlblwiLFxuICBcIkphc21pblwiLFxuICBcIkphc29uXCIsXG4gIFwiSmFzcGVyXCIsXG4gIFwiSmF1bml0YVwiLFxuICBcIkphdmllclwiLFxuICBcIkphdm9uXCIsXG4gIFwiSmF2b250ZVwiLFxuICBcIkpheVwiLFxuICBcIkpheWNlXCIsXG4gIFwiSmF5Y2VlXCIsXG4gIFwiSmF5ZGFcIixcbiAgXCJKYXlkZVwiLFxuICBcIkpheWRlblwiLFxuICBcIkpheWRvblwiLFxuICBcIkpheWxhblwiLFxuICBcIkpheWxlblwiLFxuICBcIkpheWxpblwiLFxuICBcIkpheWxvblwiLFxuICBcIkpheW1lXCIsXG4gIFwiSmF5bmVcIixcbiAgXCJKYXlzb25cIixcbiAgXCJKYXpseW5cIixcbiAgXCJKYXptaW5cIixcbiAgXCJKYXpteW5cIixcbiAgXCJKYXpteW5lXCIsXG4gIFwiSmVhblwiLFxuICBcIkplYW5ldHRlXCIsXG4gIFwiSmVhbmllXCIsXG4gIFwiSmVhbm5lXCIsXG4gIFwiSmVkXCIsXG4gIFwiSmVkZWRpYWhcIixcbiAgXCJKZWRpZGlhaFwiLFxuICBcIkplZmZcIixcbiAgXCJKZWZmZXJleVwiLFxuICBcIkplZmZlcnlcIixcbiAgXCJKZWZmcmV5XCIsXG4gIFwiSmVmZnJ5XCIsXG4gIFwiSmVuYVwiLFxuICBcIkplbmlmZXJcIixcbiAgXCJKZW5uaWVcIixcbiAgXCJKZW5uaWZlclwiLFxuICBcIkplbm5pbmdzXCIsXG4gIFwiSmVubnlmZXJcIixcbiAgXCJKZW5zZW5cIixcbiAgXCJKZXJhZFwiLFxuICBcIkplcmFsZFwiLFxuICBcIkplcmFtaWVcIixcbiAgXCJKZXJhbXlcIixcbiAgXCJKZXJlbFwiLFxuICBcIkplcmVtaWVcIixcbiAgXCJKZXJlbXlcIixcbiAgXCJKZXJtYWluXCIsXG4gIFwiSmVybWFpbmVcIixcbiAgXCJKZXJtZXlcIixcbiAgXCJKZXJvZFwiLFxuICBcIkplcm9tZVwiLFxuICBcIkplcm9teVwiLFxuICBcIkplcnJlbGxcIixcbiAgXCJKZXJyb2RcIixcbiAgXCJKZXJyb2xkXCIsXG4gIFwiSmVycnlcIixcbiAgXCJKZXNzXCIsXG4gIFwiSmVzc2VcIixcbiAgXCJKZXNzaWNhXCIsXG4gIFwiSmVzc2llXCIsXG4gIFwiSmVzc2lrYVwiLFxuICBcIkplc3N5XCIsXG4gIFwiSmVzc3ljYVwiLFxuICBcIkplc3VzXCIsXG4gIFwiSmV0dFwiLFxuICBcIkpldHRpZVwiLFxuICBcIkpldm9uXCIsXG4gIFwiSmV3ZWxcIixcbiAgXCJKZXdlbGxcIixcbiAgXCJKaWxsaWFuXCIsXG4gIFwiSmltbWllXCIsXG4gIFwiSmltbXlcIixcbiAgXCJKb1wiLFxuICBcIkpvYW5cIixcbiAgXCJKb2FuYVwiLFxuICBcIkpvYW5pZVwiLFxuICBcIkpvYW5uZVwiLFxuICBcIkpvYW5uaWVcIixcbiAgXCJKb2FubnlcIixcbiAgXCJKb2FueVwiLFxuICBcIkpvYXF1aW5cIixcbiAgXCJKb2NlbHluXCIsXG4gIFwiSm9kaWVcIixcbiAgXCJKb2R5XCIsXG4gIFwiSm9lXCIsXG4gIFwiSm9lbFwiLFxuICBcIkpvZWxsZVwiLFxuICBcIkpvZXNwaFwiLFxuICBcIkpvZXlcIixcbiAgXCJKb2hhblwiLFxuICBcIkpvaGFublwiLFxuICBcIkpvaGFubmFcIixcbiAgXCJKb2hhdGhhblwiLFxuICBcIkpvaG5cIixcbiAgXCJKb2huYXRoYW5cIixcbiAgXCJKb2huYXRob25cIixcbiAgXCJKb2hubmllXCIsXG4gIFwiSm9obm55XCIsXG4gIFwiSm9obnBhdWxcIixcbiAgXCJKb2huc29uXCIsXG4gIFwiSm9saWVcIixcbiAgXCJKb25cIixcbiAgXCJKb25hc1wiLFxuICBcIkpvbmF0YW5cIixcbiAgXCJKb25hdGhhblwiLFxuICBcIkpvbmF0aG9uXCIsXG4gIFwiSm9yZGFuXCIsXG4gIFwiSm9yZGFuZVwiLFxuICBcIkpvcmRpXCIsXG4gIFwiSm9yZG9uXCIsXG4gIFwiSm9yZHlcIixcbiAgXCJKb3JkeW5cIixcbiAgXCJKb3JnZVwiLFxuICBcIkpvc2VcIixcbiAgXCJKb3NlZmFcIixcbiAgXCJKb3NlZmluYVwiLFxuICBcIkpvc2VwaFwiLFxuICBcIkpvc2VwaGluZVwiLFxuICBcIkpvc2hcIixcbiAgXCJKb3NodWFcIixcbiAgXCJKb3NodWFoXCIsXG4gIFwiSm9zaWFoXCIsXG4gIFwiSm9zaWFuZVwiLFxuICBcIkpvc2lhbm5lXCIsXG4gIFwiSm9zaWVcIixcbiAgXCJKb3N1ZVwiLFxuICBcIkpvdmFuXCIsXG4gIFwiSm92YW5pXCIsXG4gIFwiSm92YW5ueVwiLFxuICBcIkpvdmFueVwiLFxuICBcIkpveVwiLFxuICBcIkpveWNlXCIsXG4gIFwiSnVhbmFcIixcbiAgXCJKdWFuaXRhXCIsXG4gIFwiSnVkYWhcIixcbiAgXCJKdWRkXCIsXG4gIFwiSnVkZVwiLFxuICBcIkp1ZGdlXCIsXG4gIFwiSnVkc29uXCIsXG4gIFwiSnVkeVwiLFxuICBcIkp1bGVzXCIsXG4gIFwiSnVsaWFcIixcbiAgXCJKdWxpYW5cIixcbiAgXCJKdWxpYW5hXCIsXG4gIFwiSnVsaWFubmVcIixcbiAgXCJKdWxpZVwiLFxuICBcIkp1bGllblwiLFxuICBcIkp1bGlldFwiLFxuICBcIkp1bGlvXCIsXG4gIFwiSnVsaXVzXCIsXG4gIFwiSnVuZVwiLFxuICBcIkp1bmlvclwiLFxuICBcIkp1bml1c1wiLFxuICBcIkp1c3RlblwiLFxuICBcIkp1c3RpY2VcIixcbiAgXCJKdXN0aW5hXCIsXG4gIFwiSnVzdGluZVwiLFxuICBcIkp1c3RvblwiLFxuICBcIkp1c3R1c1wiLFxuICBcIkp1c3R5blwiLFxuICBcIkp1dmVuYWxcIixcbiAgXCJKdXdhblwiLFxuICBcIkthY2V5XCIsXG4gIFwiS2FjaVwiLFxuICBcIkthY2llXCIsXG4gIFwiS2FkZVwiLFxuICBcIkthZGVuXCIsXG4gIFwiS2FkaW5cIixcbiAgXCJLYWVsYVwiLFxuICBcIkthZWx5blwiLFxuICBcIkthaWFcIixcbiAgXCJLYWlsZWVcIixcbiAgXCJLYWlsZXlcIixcbiAgXCJLYWlseW5cIixcbiAgXCJLYWl0bGluXCIsXG4gIFwiS2FpdGx5blwiLFxuICBcIkthbGVcIixcbiAgXCJLYWxlYlwiLFxuICBcIkthbGVpZ2hcIixcbiAgXCJLYWxleVwiLFxuICBcIkthbGlcIixcbiAgXCJLYWxsaWVcIixcbiAgXCJLYW1lcm9uXCIsXG4gIFwiS2FtaWxsZVwiLFxuICBcIkthbXJlblwiLFxuICBcIkthbXJvblwiLFxuICBcIkthbXJ5blwiLFxuICBcIkthbmVcIixcbiAgXCJLYXJhXCIsXG4gIFwiS2FyZWVtXCIsXG4gIFwiS2FyZWxsZVwiLFxuICBcIkthcmVuXCIsXG4gIFwiS2FyaVwiLFxuICBcIkthcmlhbmVcIixcbiAgXCJLYXJpYW5uZVwiLFxuICBcIkthcmluYVwiLFxuICBcIkthcmluZVwiLFxuICBcIkthcmxcIixcbiAgXCJLYXJsZWVcIixcbiAgXCJLYXJsZXlcIixcbiAgXCJLYXJsaVwiLFxuICBcIkthcmxpZVwiLFxuICBcIkthcm9sYW5uXCIsXG4gIFwiS2Fyc29uXCIsXG4gIFwiS2FzYW5kcmFcIixcbiAgXCJLYXNleVwiLFxuICBcIkthc3NhbmRyYVwiLFxuICBcIkthdGFyaW5hXCIsXG4gIFwiS2F0ZWxpblwiLFxuICBcIkthdGVseW5cIixcbiAgXCJLYXRlbHlublwiLFxuICBcIkthdGhhcmluYVwiLFxuICBcIkthdGhlcmluZVwiLFxuICBcIkthdGhlcnluXCIsXG4gIFwiS2F0aGxlZW5cIixcbiAgXCJLYXRobHluXCIsXG4gIFwiS2F0aHJ5blwiLFxuICBcIkthdGhyeW5lXCIsXG4gIFwiS2F0bHluXCIsXG4gIFwiS2F0bHlublwiLFxuICBcIkthdHJpbmFcIixcbiAgXCJLYXRyaW5lXCIsXG4gIFwiS2F0dGllXCIsXG4gIFwiS2F2b25cIixcbiAgXCJLYXlcIixcbiAgXCJLYXlhXCIsXG4gIFwiS2F5Y2VlXCIsXG4gIFwiS2F5ZGVuXCIsXG4gIFwiS2F5bGFcIixcbiAgXCJLYXlsYWhcIixcbiAgXCJLYXlsZWVcIixcbiAgXCJLYXlsZWlnaFwiLFxuICBcIktheWxleVwiLFxuICBcIktheWxpXCIsXG4gIFwiS2F5bGllXCIsXG4gIFwiS2F5bGluXCIsXG4gIFwiS2VhZ2FuXCIsXG4gIFwiS2VhbnVcIixcbiAgXCJLZWFyYVwiLFxuICBcIktlYXRvblwiLFxuICBcIktlZWdhblwiLFxuICBcIktlZWxleVwiLFxuICBcIktlZWx5XCIsXG4gIFwiS2VlbmFuXCIsXG4gIFwiS2VpcmFcIixcbiAgXCJLZWl0aFwiLFxuICBcIktlbGxlblwiLFxuICBcIktlbGxleVwiLFxuICBcIktlbGxpXCIsXG4gIFwiS2VsbGllXCIsXG4gIFwiS2VsbHlcIixcbiAgXCJLZWxzaVwiLFxuICBcIktlbHNpZVwiLFxuICBcIktlbHRvblwiLFxuICBcIktlbHZpblwiLFxuICBcIktlblwiLFxuICBcIktlbmRhbGxcIixcbiAgXCJLZW5kcmFcIixcbiAgXCJLZW5kcmlja1wiLFxuICBcIktlbm5hXCIsXG4gIFwiS2VubmVkaVwiLFxuICBcIktlbm5lZHlcIixcbiAgXCJLZW5uZXRoXCIsXG4gIFwiS2Vubml0aFwiLFxuICBcIktlbm55XCIsXG4gIFwiS2VudG9uXCIsXG4gIFwiS2VueWFcIixcbiAgXCJLZW55YXR0YVwiLFxuICBcIktlbnlvblwiLFxuICBcIktlb25cIixcbiAgXCJLZXNoYXVuXCIsXG4gIFwiS2VzaGF3blwiLFxuICBcIktldmVuXCIsXG4gIFwiS2V2aW5cIixcbiAgXCJLZXZvblwiLFxuICBcIktleW9uXCIsXG4gIFwiS2V5c2hhd25cIixcbiAgXCJLaGFsaWRcIixcbiAgXCJLaGFsaWxcIixcbiAgXCJLaWFuXCIsXG4gIFwiS2lhbmFcIixcbiAgXCJLaWFubmFcIixcbiAgXCJLaWFyYVwiLFxuICBcIktpYXJyYVwiLFxuICBcIktpZWxcIixcbiAgXCJLaWVyYVwiLFxuICBcIktpZXJhblwiLFxuICBcIktpbGV5XCIsXG4gIFwiS2ltXCIsXG4gIFwiS2ltYmVybHlcIixcbiAgXCJLaW5nXCIsXG4gIFwiS2lwXCIsXG4gIFwiS2lyYVwiLFxuICBcIktpcmtcIixcbiAgXCJLaXJzdGVuXCIsXG4gIFwiS2lyc3RpblwiLFxuICBcIktpdHR5XCIsXG4gIFwiS29iZVwiLFxuICBcIktvYnlcIixcbiAgXCJLb2R5XCIsXG4gIFwiS29sYnlcIixcbiAgXCJLb2xlXCIsXG4gIFwiS29yYmluXCIsXG4gIFwiS29yZXlcIixcbiAgXCJLb3J5XCIsXG4gIFwiS3JhaWdcIixcbiAgXCJLcmlzXCIsXG4gIFwiS3Jpc3RhXCIsXG4gIFwiS3Jpc3RpYW5cIixcbiAgXCJLcmlzdGluXCIsXG4gIFwiS3Jpc3RpbmFcIixcbiAgXCJLcmlzdG9mZXJcIixcbiAgXCJLcmlzdG9mZmVyXCIsXG4gIFwiS3Jpc3RvcGhlclwiLFxuICBcIktyaXN0eVwiLFxuICBcIktyeXN0YWxcIixcbiAgXCJLcnlzdGVsXCIsXG4gIFwiS3J5c3RpbmFcIixcbiAgXCJLdXJ0XCIsXG4gIFwiS3VydGlzXCIsXG4gIFwiS3lsYVwiLFxuICBcIkt5bGVcIixcbiAgXCJLeWxlZVwiLFxuICBcIkt5bGVpZ2hcIixcbiAgXCJLeWxlclwiLFxuICBcIkt5bGllXCIsXG4gIFwiS3lyYVwiLFxuICBcIkxhY2V5XCIsXG4gIFwiTGFjeVwiLFxuICBcIkxhZGFyaXVzXCIsXG4gIFwiTGFmYXlldHRlXCIsXG4gIFwiTGFpbGFcIixcbiAgXCJMYWlzaGFcIixcbiAgXCJMYW1hclwiLFxuICBcIkxhbWJlcnRcIixcbiAgXCJMYW1vbnRcIixcbiAgXCJMYW5jZVwiLFxuICBcIkxhbmRlblwiLFxuICBcIkxhbmVcIixcbiAgXCJMYW5leVwiLFxuICBcIkxhcmlzc2FcIixcbiAgXCJMYXJvblwiLFxuICBcIkxhcnJ5XCIsXG4gIFwiTGFydWVcIixcbiAgXCJMYXVyYVwiLFxuICBcIkxhdXJlbFwiLFxuICBcIkxhdXJlblwiLFxuICBcIkxhdXJlbmNlXCIsXG4gIFwiTGF1cmV0dGFcIixcbiAgXCJMYXVyaWFuZVwiLFxuICBcIkxhdXJpYW5uZVwiLFxuICBcIkxhdXJpZVwiLFxuICBcIkxhdXJpbmVcIixcbiAgXCJMYXVyeVwiLFxuICBcIkxhdXJ5blwiLFxuICBcIkxhdmFkYVwiLFxuICBcIkxhdmVyblwiLFxuICBcIkxhdmVybmFcIixcbiAgXCJMYXZlcm5lXCIsXG4gIFwiTGF2aW5hXCIsXG4gIFwiTGF2aW5pYVwiLFxuICBcIkxhdm9uXCIsXG4gIFwiTGF2b25uZVwiLFxuICBcIkxhd3JlbmNlXCIsXG4gIFwiTGF3c29uXCIsXG4gIFwiTGF5bGFcIixcbiAgXCJMYXluZVwiLFxuICBcIkxhemFyb1wiLFxuICBcIkxlYVwiLFxuICBcIkxlYW5uXCIsXG4gIFwiTGVhbm5hXCIsXG4gIFwiTGVhbm5lXCIsXG4gIFwiTGVhdGhhXCIsXG4gIFwiTGVkYVwiLFxuICBcIkxlZVwiLFxuICBcIkxlaWZcIixcbiAgXCJMZWlsYVwiLFxuICBcIkxlaWxhbmlcIixcbiAgXCJMZWxhXCIsXG4gIFwiTGVsYWhcIixcbiAgXCJMZWxhbmRcIixcbiAgXCJMZWxpYVwiLFxuICBcIkxlbXBpXCIsXG4gIFwiTGVtdWVsXCIsXG4gIFwiTGVubmFcIixcbiAgXCJMZW5uaWVcIixcbiAgXCJMZW5ueVwiLFxuICBcIkxlbm9yYVwiLFxuICBcIkxlbm9yZVwiLFxuICBcIkxlb1wiLFxuICBcIkxlb2xhXCIsXG4gIFwiTGVvblwiLFxuICBcIkxlb25hcmRcIixcbiAgXCJMZW9uYXJkb1wiLFxuICBcIkxlb25lXCIsXG4gIFwiTGVvbmVsXCIsXG4gIFwiTGVvbmllXCIsXG4gIFwiTGVvbm9yXCIsXG4gIFwiTGVvbm9yYVwiLFxuICBcIkxlb3BvbGRcIixcbiAgXCJMZW9wb2xkb1wiLFxuICBcIkxlb3JhXCIsXG4gIFwiTGVyYVwiLFxuICBcIkxlc2xleVwiLFxuICBcIkxlc2xpZVwiLFxuICBcIkxlc2x5XCIsXG4gIFwiTGVzc2llXCIsXG4gIFwiTGVzdGVyXCIsXG4gIFwiTGV0YVwiLFxuICBcIkxldGhhXCIsXG4gIFwiTGV0aXRpYVwiLFxuICBcIkxldmlcIixcbiAgXCJMZXdcIixcbiAgXCJMZXdpc1wiLFxuICBcIkxleGlcIixcbiAgXCJMZXhpZVwiLFxuICBcIkxleHVzXCIsXG4gIFwiTGlhXCIsXG4gIFwiTGlhbVwiLFxuICBcIkxpYW5hXCIsXG4gIFwiTGliYmllXCIsXG4gIFwiTGliYnlcIixcbiAgXCJMaWxhXCIsXG4gIFwiTGlsaWFuXCIsXG4gIFwiTGlsaWFuYVwiLFxuICBcIkxpbGlhbmVcIixcbiAgXCJMaWxsYVwiLFxuICBcIkxpbGxpYW5cIixcbiAgXCJMaWxsaWFuYVwiLFxuICBcIkxpbGxpZVwiLFxuICBcIkxpbGx5XCIsXG4gIFwiTGlseVwiLFxuICBcIkxpbHlhblwiLFxuICBcIkxpbmFcIixcbiAgXCJMaW5jb2xuXCIsXG4gIFwiTGluZGFcIixcbiAgXCJMaW5kc2F5XCIsXG4gIFwiTGluZHNleVwiLFxuICBcIkxpbm5lYVwiLFxuICBcIkxpbm5pZVwiLFxuICBcIkxpbndvb2RcIixcbiAgXCJMaW9uZWxcIixcbiAgXCJMaXNhXCIsXG4gIFwiTGlzYW5kcm9cIixcbiAgXCJMaXNldHRlXCIsXG4gIFwiTGl0enlcIixcbiAgXCJMaXphXCIsXG4gIFwiTGl6ZXRoXCIsXG4gIFwiTGl6emllXCIsXG4gIFwiTGxld2VsbHluXCIsXG4gIFwiTGxveWRcIixcbiAgXCJMb2dhblwiLFxuICBcIkxvaXNcIixcbiAgXCJMb2xhXCIsXG4gIFwiTG9saXRhXCIsXG4gIFwiTG9tYVwiLFxuICBcIkxvblwiLFxuICBcIkxvbmRvblwiLFxuICBcIkxvbmllXCIsXG4gIFwiTG9ubmllXCIsXG4gIFwiTG9ubnlcIixcbiAgXCJMb256b1wiLFxuICBcIkxvcmFcIixcbiAgXCJMb3JhaW5lXCIsXG4gIFwiTG9yZW5cIixcbiAgXCJMb3JlbmFcIixcbiAgXCJMb3JlbnpcIixcbiAgXCJMb3JlbnphXCIsXG4gIFwiTG9yZW56b1wiLFxuICBcIkxvcmlcIixcbiAgXCJMb3JpbmVcIixcbiAgXCJMb3JuYVwiLFxuICBcIkxvdHRpZVwiLFxuICBcIkxvdVwiLFxuICBcIkxvdWllXCIsXG4gIFwiTG91aXNhXCIsXG4gIFwiTG91cmRlc1wiLFxuICBcIkxvdXZlbmlhXCIsXG4gIFwiTG93ZWxsXCIsXG4gIFwiTG95XCIsXG4gIFwiTG95YWxcIixcbiAgXCJMb3ljZVwiLFxuICBcIkx1Y2FzXCIsXG4gIFwiTHVjaWFub1wiLFxuICBcIkx1Y2llXCIsXG4gIFwiTHVjaWVubmVcIixcbiAgXCJMdWNpbGVcIixcbiAgXCJMdWNpbmRhXCIsXG4gIFwiTHVjaW9cIixcbiAgXCJMdWNpb3VzXCIsXG4gIFwiTHVjaXVzXCIsXG4gIFwiTHVjeVwiLFxuICBcIkx1ZGllXCIsXG4gIFwiTHVkd2lnXCIsXG4gIFwiTHVlXCIsXG4gIFwiTHVlbGxhXCIsXG4gIFwiTHVpZ2lcIixcbiAgXCJMdWlzXCIsXG4gIFwiTHVpc2FcIixcbiAgXCJMdWthc1wiLFxuICBcIkx1bGFcIixcbiAgXCJMdWx1XCIsXG4gIFwiTHVuYVwiLFxuICBcIkx1cGVcIixcbiAgXCJMdXJhXCIsXG4gIFwiTHVybGluZVwiLFxuICBcIkx1dGhlclwiLFxuICBcIkx1elwiLFxuICBcIkx5ZGFcIixcbiAgXCJMeWRpYVwiLFxuICBcIkx5bGFcIixcbiAgXCJMeW5uXCIsXG4gIFwiTHlyaWNcIixcbiAgXCJMeXNhbm5lXCIsXG4gIFwiTWFiZWxcIixcbiAgXCJNYWJlbGxlXCIsXG4gIFwiTWFibGVcIixcbiAgXCJNYWNcIixcbiAgXCJNYWNleVwiLFxuICBcIk1hY2lcIixcbiAgXCJNYWNpZVwiLFxuICBcIk1hY2tcIixcbiAgXCJNYWNrZW56aWVcIixcbiAgXCJNYWN5XCIsXG4gIFwiTWFkYWxpbmVcIixcbiAgXCJNYWRhbHluXCIsXG4gIFwiTWFkZGlzb25cIixcbiAgXCJNYWRlbGluZVwiLFxuICBcIk1hZGVseW5cIixcbiAgXCJNYWRlbHlublwiLFxuICBcIk1hZGdlXCIsXG4gIFwiTWFkaWVcIixcbiAgXCJNYWRpbHluXCIsXG4gIFwiTWFkaXNlblwiLFxuICBcIk1hZGlzb25cIixcbiAgXCJNYWRpc3luXCIsXG4gIFwiTWFkb25uYVwiLFxuICBcIk1hZHlzb25cIixcbiAgXCJNYWVcIixcbiAgXCJNYWVnYW5cIixcbiAgXCJNYWV2ZVwiLFxuICBcIk1hZmFsZGFcIixcbiAgXCJNYWdhbGlcIixcbiAgXCJNYWdkYWxlblwiLFxuICBcIk1hZ2RhbGVuYVwiLFxuICBcIk1hZ2dpZVwiLFxuICBcIk1hZ25vbGlhXCIsXG4gIFwiTWFnbnVzXCIsXG4gIFwiTWFpYVwiLFxuICBcIk1haWRhXCIsXG4gIFwiTWFpeWFcIixcbiAgXCJNYWpvclwiLFxuICBcIk1ha2F5bGFcIixcbiAgXCJNYWtlbm5hXCIsXG4gIFwiTWFrZW56aWVcIixcbiAgXCJNYWxhY2hpXCIsXG4gIFwiTWFsY29sbVwiLFxuICBcIk1hbGlrYVwiLFxuICBcIk1hbGluZGFcIixcbiAgXCJNYWxsaWVcIixcbiAgXCJNYWxsb3J5XCIsXG4gIFwiTWFsdmluYVwiLFxuICBcIk1hbmR5XCIsXG4gIFwiTWFubGV5XCIsXG4gIFwiTWFudWVsXCIsXG4gIFwiTWFudWVsYVwiLFxuICBcIk1hcmFcIixcbiAgXCJNYXJjXCIsXG4gIFwiTWFyY2VsXCIsXG4gIFwiTWFyY2VsaW5hXCIsXG4gIFwiTWFyY2VsaW5vXCIsXG4gIFwiTWFyY2VsbGFcIixcbiAgXCJNYXJjZWxsZVwiLFxuICBcIk1hcmNlbGx1c1wiLFxuICBcIk1hcmNlbG9cIixcbiAgXCJNYXJjaWFcIixcbiAgXCJNYXJjb1wiLFxuICBcIk1hcmNvc1wiLFxuICBcIk1hcmN1c1wiLFxuICBcIk1hcmdhcmV0XCIsXG4gIFwiTWFyZ2FyZXRlXCIsXG4gIFwiTWFyZ2FyZXR0XCIsXG4gIFwiTWFyZ2FyZXR0YVwiLFxuICBcIk1hcmdhcmV0dGVcIixcbiAgXCJNYXJnYXJpdGFcIixcbiAgXCJNYXJnZVwiLFxuICBcIk1hcmdpZVwiLFxuICBcIk1hcmdvdFwiLFxuICBcIk1hcmdyZXRcIixcbiAgXCJNYXJndWVyaXRlXCIsXG4gIFwiTWFyaWFcIixcbiAgXCJNYXJpYWhcIixcbiAgXCJNYXJpYW1cIixcbiAgXCJNYXJpYW5cIixcbiAgXCJNYXJpYW5hXCIsXG4gIFwiTWFyaWFuZVwiLFxuICBcIk1hcmlhbm5hXCIsXG4gIFwiTWFyaWFubmVcIixcbiAgXCJNYXJpYW5vXCIsXG4gIFwiTWFyaWJlbFwiLFxuICBcIk1hcmllXCIsXG4gIFwiTWFyaWVsYVwiLFxuICBcIk1hcmllbGxlXCIsXG4gIFwiTWFyaWV0dGFcIixcbiAgXCJNYXJpbGllXCIsXG4gIFwiTWFyaWxvdVwiLFxuICBcIk1hcmlseW5lXCIsXG4gIFwiTWFyaW5hXCIsXG4gIFwiTWFyaW9cIixcbiAgXCJNYXJpb25cIixcbiAgXCJNYXJpc2FcIixcbiAgXCJNYXJpc29sXCIsXG4gIFwiTWFyaXR6YVwiLFxuICBcIk1hcmpvbGFpbmVcIixcbiAgXCJNYXJqb3JpZVwiLFxuICBcIk1hcmpvcnlcIixcbiAgXCJNYXJrXCIsXG4gIFwiTWFya3VzXCIsXG4gIFwiTWFybGVlXCIsXG4gIFwiTWFybGVuXCIsXG4gIFwiTWFybGVuZVwiLFxuICBcIk1hcmxleVwiLFxuICBcIk1hcmxpblwiLFxuICBcIk1hcmxvblwiLFxuICBcIk1hcnF1ZXNcIixcbiAgXCJNYXJxdWlzXCIsXG4gIFwiTWFycXVpc2VcIixcbiAgXCJNYXJzaGFsbFwiLFxuICBcIk1hcnRhXCIsXG4gIFwiTWFydGluXCIsXG4gIFwiTWFydGluYVwiLFxuICBcIk1hcnRpbmVcIixcbiAgXCJNYXJ0eVwiLFxuICBcIk1hcnZpblwiLFxuICBcIk1hcnlcIixcbiAgXCJNYXJ5YW1cIixcbiAgXCJNYXJ5amFuZVwiLFxuICBcIk1hcnlzZVwiLFxuICBcIk1hc29uXCIsXG4gIFwiTWF0ZW9cIixcbiAgXCJNYXRoZXdcIixcbiAgXCJNYXRoaWFzXCIsXG4gIFwiTWF0aGlsZGVcIixcbiAgXCJNYXRpbGRhXCIsXG4gIFwiTWF0aWxkZVwiLFxuICBcIk1hdHRcIixcbiAgXCJNYXR0ZW9cIixcbiAgXCJNYXR0aWVcIixcbiAgXCJNYXVkXCIsXG4gIFwiTWF1ZGVcIixcbiAgXCJNYXVkaWVcIixcbiAgXCJNYXVyZWVuXCIsXG4gIFwiTWF1cmljZVwiLFxuICBcIk1hdXJpY2lvXCIsXG4gIFwiTWF1cmluZVwiLFxuICBcIk1hdmVyaWNrXCIsXG4gIFwiTWF2aXNcIixcbiAgXCJNYXhcIixcbiAgXCJNYXhpZVwiLFxuICBcIk1heGltZVwiLFxuICBcIk1heGltaWxpYW5cIixcbiAgXCJNYXhpbWlsbGlhXCIsXG4gIFwiTWF4aW1pbGxpYW5cIixcbiAgXCJNYXhpbW9cIixcbiAgXCJNYXhpbXVzXCIsXG4gIFwiTWF4aW5lXCIsXG4gIFwiTWF4d2VsbFwiLFxuICBcIk1heVwiLFxuICBcIk1heWFcIixcbiAgXCJNYXliZWxsXCIsXG4gIFwiTWF5YmVsbGVcIixcbiAgXCJNYXllXCIsXG4gIFwiTWF5bWllXCIsXG4gIFwiTWF5bmFyZFwiLFxuICBcIk1heXJhXCIsXG4gIFwiTWF6aWVcIixcbiAgXCJNY2theWxhXCIsXG4gIFwiTWNrZW5uYVwiLFxuICBcIk1ja2VuemllXCIsXG4gIFwiTWVhZ2FuXCIsXG4gIFwiTWVhZ2hhblwiLFxuICBcIk1lZGFcIixcbiAgXCJNZWdhbmVcIixcbiAgXCJNZWdnaWVcIixcbiAgXCJNZWdoYW5cIixcbiAgXCJNZWtoaVwiLFxuICBcIk1lbGFueVwiLFxuICBcIk1lbGJhXCIsXG4gIFwiTWVsaXNhXCIsXG4gIFwiTWVsaXNzYVwiLFxuICBcIk1lbGxpZVwiLFxuICBcIk1lbG9keVwiLFxuICBcIk1lbHZpblwiLFxuICBcIk1lbHZpbmFcIixcbiAgXCJNZWx5bmFcIixcbiAgXCJNZWx5c3NhXCIsXG4gIFwiTWVyY2VkZXNcIixcbiAgXCJNZXJlZGl0aFwiLFxuICBcIk1lcmxcIixcbiAgXCJNZXJsZVwiLFxuICBcIk1lcmxpblwiLFxuICBcIk1lcnJpdHRcIixcbiAgXCJNZXJ0aWVcIixcbiAgXCJNZXJ2aW5cIixcbiAgXCJNZXRhXCIsXG4gIFwiTWlhXCIsXG4gIFwiTWljYWVsYVwiLFxuICBcIk1pY2FoXCIsXG4gIFwiTWljaGFlbFwiLFxuICBcIk1pY2hhZWxhXCIsXG4gIFwiTWljaGFsZVwiLFxuICBcIk1pY2hlYWxcIixcbiAgXCJNaWNoZWxcIixcbiAgXCJNaWNoZWxlXCIsXG4gIFwiTWljaGVsbGVcIixcbiAgXCJNaWd1ZWxcIixcbiAgXCJNaWtheWxhXCIsXG4gIFwiTWlrZVwiLFxuICBcIk1pa2VsXCIsXG4gIFwiTWlsYW5cIixcbiAgXCJNaWxlc1wiLFxuICBcIk1pbGZvcmRcIixcbiAgXCJNaWxsZXJcIixcbiAgXCJNaWxsaWVcIixcbiAgXCJNaWxvXCIsXG4gIFwiTWlsdG9uXCIsXG4gIFwiTWluYVwiLFxuICBcIk1pbmVydmFcIixcbiAgXCJNaW5uaWVcIixcbiAgXCJNaXJhY2xlXCIsXG4gIFwiTWlyZWlsbGVcIixcbiAgXCJNaXJleWFcIixcbiAgXCJNaXNhZWxcIixcbiAgXCJNaXNzb3VyaVwiLFxuICBcIk1pc3R5XCIsXG4gIFwiTWl0Y2hlbFwiLFxuICBcIk1pdGNoZWxsXCIsXG4gIFwiTWl0dGllXCIsXG4gIFwiTW9kZXN0YVwiLFxuICBcIk1vZGVzdG9cIixcbiAgXCJNb2hhbWVkXCIsXG4gIFwiTW9oYW1tYWRcIixcbiAgXCJNb2hhbW1lZFwiLFxuICBcIk1vaXNlc1wiLFxuICBcIk1vbGxpZVwiLFxuICBcIk1vbGx5XCIsXG4gIFwiTW9uYVwiLFxuICBcIk1vbmljYVwiLFxuICBcIk1vbmlxdWVcIixcbiAgXCJNb25yb2VcIixcbiAgXCJNb25zZXJyYXRcIixcbiAgXCJNb25zZXJyYXRlXCIsXG4gIFwiTW9udGFuYVwiLFxuICBcIk1vbnRlXCIsXG4gIFwiTW9udHlcIixcbiAgXCJNb3JnYW5cIixcbiAgXCJNb3JpYWhcIixcbiAgXCJNb3JyaXNcIixcbiAgXCJNb3J0aW1lclwiLFxuICBcIk1vcnRvblwiLFxuICBcIk1vc2VcIixcbiAgXCJNb3Nlc1wiLFxuICBcIk1vc2hlXCIsXG4gIFwiTW9zc2llXCIsXG4gIFwiTW96ZWxsXCIsXG4gIFwiTW96ZWxsZVwiLFxuICBcIk11aGFtbWFkXCIsXG4gIFwiTXVyaWVsXCIsXG4gIFwiTXVybFwiLFxuICBcIk11cnBoeVwiLFxuICBcIk11cnJheVwiLFxuICBcIk11c3RhZmFcIixcbiAgXCJNeWFcIixcbiAgXCJNeWFoXCIsXG4gIFwiTXlsZW5lXCIsXG4gIFwiTXlsZXNcIixcbiAgXCJNeXJhXCIsXG4gIFwiTXlyaWFtXCIsXG4gIFwiTXlybFwiLFxuICBcIk15cm5hXCIsXG4gIFwiTXlyb25cIixcbiAgXCJNeXJ0aWNlXCIsXG4gIFwiTXlydGllXCIsXG4gIFwiTXlydGlzXCIsXG4gIFwiTXlydGxlXCIsXG4gIFwiTmFkaWFcIixcbiAgXCJOYWtpYVwiLFxuICBcIk5hbWVcIixcbiAgXCJOYW5uaWVcIixcbiAgXCJOYW9taVwiLFxuICBcIk5hb21pZVwiLFxuICBcIk5hcG9sZW9uXCIsXG4gIFwiTmFyY2lzb1wiLFxuICBcIk5hc2hcIixcbiAgXCJOYXNpclwiLFxuICBcIk5hdFwiLFxuICBcIk5hdGFsaWFcIixcbiAgXCJOYXRhbGllXCIsXG4gIFwiTmF0YXNoYVwiLFxuICBcIk5hdGhhblwiLFxuICBcIk5hdGhhbmFlbFwiLFxuICBcIk5hdGhhbmlhbFwiLFxuICBcIk5hdGhhbmllbFwiLFxuICBcIk5hdGhlblwiLFxuICBcIk5heWVsaVwiLFxuICBcIk5lYWxcIixcbiAgXCJOZWRcIixcbiAgXCJOZWRyYVwiLFxuICBcIk5laGFcIixcbiAgXCJOZWlsXCIsXG4gIFwiTmVsZGFcIixcbiAgXCJOZWxsYVwiLFxuICBcIk5lbGxlXCIsXG4gIFwiTmVsbGllXCIsXG4gIFwiTmVsc1wiLFxuICBcIk5lbHNvblwiLFxuICBcIk5lb21hXCIsXG4gIFwiTmVzdG9yXCIsXG4gIFwiTmV0dGllXCIsXG4gIFwiTmV2YVwiLFxuICBcIk5ld2VsbFwiLFxuICBcIk5ld3RvblwiLFxuICBcIk5pYVwiLFxuICBcIk5pY2hvbGFzXCIsXG4gIFwiTmljaG9sYXVzXCIsXG4gIFwiTmljaG9sZVwiLFxuICBcIk5pY2tcIixcbiAgXCJOaWNrbGF1c1wiLFxuICBcIk5pY2tvbGFzXCIsXG4gIFwiTmljb1wiLFxuICBcIk5pY29sYVwiLFxuICBcIk5pY29sYXNcIixcbiAgXCJOaWNvbGVcIixcbiAgXCJOaWNvbGV0dGVcIixcbiAgXCJOaWdlbFwiLFxuICBcIk5pa2l0YVwiLFxuICBcIk5pa2tpXCIsXG4gIFwiTmlra29cIixcbiAgXCJOaWtvXCIsXG4gIFwiTmlrb2xhc1wiLFxuICBcIk5pbHNcIixcbiAgXCJOaW5hXCIsXG4gIFwiTm9haFwiLFxuICBcIk5vYmxlXCIsXG4gIFwiTm9lXCIsXG4gIFwiTm9lbFwiLFxuICBcIk5vZWxpYVwiLFxuICBcIk5vZW1pXCIsXG4gIFwiTm9lbWllXCIsXG4gIFwiTm9lbXlcIixcbiAgXCJOb2xhXCIsXG4gIFwiTm9sYW5cIixcbiAgXCJOb25hXCIsXG4gIFwiTm9yYVwiLFxuICBcIk5vcmJlcnRcIixcbiAgXCJOb3JiZXJ0b1wiLFxuICBcIk5vcmVuZVwiLFxuICBcIk5vcm1hXCIsXG4gIFwiTm9ycmlzXCIsXG4gIFwiTm9ydmFsXCIsXG4gIFwiTm9yd29vZFwiLFxuICBcIk5vdmFcIixcbiAgXCJOb3ZlbGxhXCIsXG4gIFwiTnlhXCIsXG4gIFwiTnlhaFwiLFxuICBcIk55YXNpYVwiLFxuICBcIk9iaWVcIixcbiAgXCJPY2VhbmVcIixcbiAgXCJPY2llXCIsXG4gIFwiT2N0YXZpYVwiLFxuICBcIk9kYVwiLFxuICBcIk9kZWxsXCIsXG4gIFwiT2Rlc3NhXCIsXG4gIFwiT2RpZVwiLFxuICBcIk9mZWxpYVwiLFxuICBcIk9rZXlcIixcbiAgXCJPbGFcIixcbiAgXCJPbGFmXCIsXG4gIFwiT2xlXCIsXG4gIFwiT2xlblwiLFxuICBcIk9sZXRhXCIsXG4gIFwiT2xnYVwiLFxuICBcIk9saW5cIixcbiAgXCJPbGl2ZXJcIixcbiAgXCJPbGxpZVwiLFxuICBcIk9tYVwiLFxuICBcIk9tYXJpXCIsXG4gIFwiT21lclwiLFxuICBcIk9uYVwiLFxuICBcIk9uaWVcIixcbiAgXCJPcGFsXCIsXG4gIFwiT3BoZWxpYVwiLFxuICBcIk9yYVwiLFxuICBcIk9yYWxcIixcbiAgXCJPcmFuXCIsXG4gIFwiT3JlblwiLFxuICBcIk9yaWVcIixcbiAgXCJPcmluXCIsXG4gIFwiT3Jpb25cIixcbiAgXCJPcmxhbmRcIixcbiAgXCJPcmxhbmRvXCIsXG4gIFwiT3Jsb1wiLFxuICBcIk9ycGhhXCIsXG4gIFwiT3JyaW5cIixcbiAgXCJPcnZhbFwiLFxuICBcIk9ydmlsbGVcIixcbiAgXCJPc2JhbGRvXCIsXG4gIFwiT3Nib3JuZVwiLFxuICBcIk9zY2FyXCIsXG4gIFwiT3N2YWxkb1wiLFxuICBcIk9zd2FsZFwiLFxuICBcIk9zd2FsZG9cIixcbiAgXCJPdGhhXCIsXG4gIFwiT3Rob1wiLFxuICBcIk90aWxpYVwiLFxuICBcIk90aXNcIixcbiAgXCJPdHRpbGllXCIsXG4gIFwiT3R0aXNcIixcbiAgXCJPdHRvXCIsXG4gIFwiT3ZhXCIsXG4gIFwiT3dlblwiLFxuICBcIk96ZWxsYVwiLFxuICBcIlBhYmxvXCIsXG4gIFwiUGFpZ2VcIixcbiAgXCJQYWxtYVwiLFxuICBcIlBhbWVsYVwiLFxuICBcIlBhbnN5XCIsXG4gIFwiUGFvbG9cIixcbiAgXCJQYXJpc1wiLFxuICBcIlBhcmtlclwiLFxuICBcIlBhc2NhbGVcIixcbiAgXCJQYXNxdWFsZVwiLFxuICBcIlBhdFwiLFxuICBcIlBhdGllbmNlXCIsXG4gIFwiUGF0cmljaWFcIixcbiAgXCJQYXRyaWNrXCIsXG4gIFwiUGF0c3lcIixcbiAgXCJQYXR0aWVcIixcbiAgXCJQYXVsXCIsXG4gIFwiUGF1bGFcIixcbiAgXCJQYXVsaW5lXCIsXG4gIFwiUGF4dG9uXCIsXG4gIFwiUGF5dG9uXCIsXG4gIFwiUGVhcmxcIixcbiAgXCJQZWFybGllXCIsXG4gIFwiUGVhcmxpbmVcIixcbiAgXCJQZWRyb1wiLFxuICBcIlBlZ2dpZVwiLFxuICBcIlBlbmVsb3BlXCIsXG4gIFwiUGVyY2l2YWxcIixcbiAgXCJQZXJjeVwiLFxuICBcIlBlcnJ5XCIsXG4gIFwiUGV0ZVwiLFxuICBcIlBldGVyXCIsXG4gIFwiUGV0cmFcIixcbiAgXCJQZXl0b25cIixcbiAgXCJQaGlsaXBcIixcbiAgXCJQaG9lYmVcIixcbiAgXCJQaHlsbGlzXCIsXG4gIFwiUGllcmNlXCIsXG4gIFwiUGllcnJlXCIsXG4gIFwiUGlldHJvXCIsXG4gIFwiUGlua1wiLFxuICBcIlBpbmtpZVwiLFxuICBcIlBpcGVyXCIsXG4gIFwiUG9sbHlcIixcbiAgXCJQb3J0ZXJcIixcbiAgXCJQcmVjaW91c1wiLFxuICBcIlByZXNsZXlcIixcbiAgXCJQcmVzdG9uXCIsXG4gIFwiUHJpY2VcIixcbiAgXCJQcmluY2VcIixcbiAgXCJQcmluY2Vzc1wiLFxuICBcIlByaXNjaWxsYVwiLFxuICBcIlByb3ZpZGVuY2lcIixcbiAgXCJQcnVkZW5jZVwiLFxuICBcIlF1ZWVuXCIsXG4gIFwiUXVlZW5pZVwiLFxuICBcIlF1ZW50aW5cIixcbiAgXCJRdWluY3lcIixcbiAgXCJRdWlublwiLFxuICBcIlF1aW50ZW5cIixcbiAgXCJRdWludG9uXCIsXG4gIFwiUmFjaGFlbFwiLFxuICBcIlJhY2hlbFwiLFxuICBcIlJhY2hlbGxlXCIsXG4gIFwiUmFlXCIsXG4gIFwiUmFlZ2FuXCIsXG4gIFwiUmFmYWVsXCIsXG4gIFwiUmFmYWVsYVwiLFxuICBcIlJhaGVlbVwiLFxuICBcIlJhaHNhYW5cIixcbiAgXCJSYWh1bFwiLFxuICBcIlJhaW5hXCIsXG4gIFwiUmFsZWlnaFwiLFxuICBcIlJhbHBoXCIsXG4gIFwiUmFtaXJvXCIsXG4gIFwiUmFtb25cIixcbiAgXCJSYW1vbmFcIixcbiAgXCJSYW5kYWxcIixcbiAgXCJSYW5kYWxsXCIsXG4gIFwiUmFuZGlcIixcbiAgXCJSYW5keVwiLFxuICBcIlJhbnNvbVwiLFxuICBcIlJhb3VsXCIsXG4gIFwiUmFwaGFlbFwiLFxuICBcIlJhcGhhZWxsZVwiLFxuICBcIlJhcXVlbFwiLFxuICBcIlJhc2hhZFwiLFxuICBcIlJhc2hhd25cIixcbiAgXCJSYXNoZWVkXCIsXG4gIFwiUmF1bFwiLFxuICBcIlJhdmVuXCIsXG4gIFwiUmF5XCIsXG4gIFwiUmF5bW9uZFwiLFxuICBcIlJheW11bmRvXCIsXG4gIFwiUmVhZ2FuXCIsXG4gIFwiUmVhbm5hXCIsXG4gIFwiUmViYVwiLFxuICBcIlJlYmVjYVwiLFxuICBcIlJlYmVjY2FcIixcbiAgXCJSZWJla2FcIixcbiAgXCJSZWJla2FoXCIsXG4gIFwiUmVlY2VcIixcbiAgXCJSZWVkXCIsXG4gIFwiUmVlc2VcIixcbiAgXCJSZWdhblwiLFxuICBcIlJlZ2dpZVwiLFxuICBcIlJlZ2luYWxkXCIsXG4gIFwiUmVpZFwiLFxuICBcIlJlaWxseVwiLFxuICBcIlJlaW5hXCIsXG4gIFwiUmVpbmhvbGRcIixcbiAgXCJSZW1pbmd0b25cIixcbiAgXCJSZW5lXCIsXG4gIFwiUmVuZWVcIixcbiAgXCJSZXNzaWVcIixcbiAgXCJSZXRhXCIsXG4gIFwiUmV0aGFcIixcbiAgXCJSZXR0YVwiLFxuICBcIlJldWJlblwiLFxuICBcIlJldmFcIixcbiAgXCJSZXhcIixcbiAgXCJSZXlcIixcbiAgXCJSZXllc1wiLFxuICBcIlJleW11bmRvXCIsXG4gIFwiUmV5bmFcIixcbiAgXCJSZXlub2xkXCIsXG4gIFwiUmhlYVwiLFxuICBcIlJoZXR0XCIsXG4gIFwiUmhpYW5uYVwiLFxuICBcIlJoaWFubm9uXCIsXG4gIFwiUmhvZGFcIixcbiAgXCJSaWNhcmRvXCIsXG4gIFwiUmljaGFyZFwiLFxuICBcIlJpY2hpZVwiLFxuICBcIlJpY2htb25kXCIsXG4gIFwiUmlja1wiLFxuICBcIlJpY2tleVwiLFxuICBcIlJpY2tpZVwiLFxuICBcIlJpY2t5XCIsXG4gIFwiUmljb1wiLFxuICBcIlJpZ29iZXJ0b1wiLFxuICBcIlJpbGV5XCIsXG4gIFwiUml0YVwiLFxuICBcIlJpdmVyXCIsXG4gIFwiUm9iYlwiLFxuICBcIlJvYmJpZVwiLFxuICBcIlJvYmVydFwiLFxuICBcIlJvYmVydGFcIixcbiAgXCJSb2JlcnRvXCIsXG4gIFwiUm9iaW5cIixcbiAgXCJSb2J5blwiLFxuICBcIlJvY2lvXCIsXG4gIFwiUm9ja3lcIixcbiAgXCJSb2RcIixcbiAgXCJSb2Rlcmlja1wiLFxuICBcIlJvZGdlclwiLFxuICBcIlJvZG9sZm9cIixcbiAgXCJSb2RyaWNrXCIsXG4gIFwiUm9kcmlnb1wiLFxuICBcIlJvZWxcIixcbiAgXCJSb2dlbGlvXCIsXG4gIFwiUm9nZXJcIixcbiAgXCJSb2dlcnNcIixcbiAgXCJSb2xhbmRvXCIsXG4gIFwiUm9sbGluXCIsXG4gIFwiUm9tYVwiLFxuICBcIlJvbWFpbmVcIixcbiAgXCJSb21hblwiLFxuICBcIlJvblwiLFxuICBcIlJvbmFsZG9cIixcbiAgXCJSb25ueVwiLFxuICBcIlJvb3NldmVsdFwiLFxuICBcIlJvcnlcIixcbiAgXCJSb3NhXCIsXG4gIFwiUm9zYWxlZVwiLFxuICBcIlJvc2FsaWFcIixcbiAgXCJSb3NhbGluZFwiLFxuICBcIlJvc2FsaW5kYVwiLFxuICBcIlJvc2FseW5cIixcbiAgXCJSb3NhbW9uZFwiLFxuICBcIlJvc2FubmFcIixcbiAgXCJSb3NhcmlvXCIsXG4gIFwiUm9zY29lXCIsXG4gIFwiUm9zZVwiLFxuICBcIlJvc2VsbGFcIixcbiAgXCJSb3NlbHluXCIsXG4gIFwiUm9zZW1hcmllXCIsXG4gIFwiUm9zZW1hcnlcIixcbiAgXCJSb3NlbmRvXCIsXG4gIFwiUm9zZXR0YVwiLFxuICBcIlJvc2llXCIsXG4gIFwiUm9zaW5hXCIsXG4gIFwiUm9zbHluXCIsXG4gIFwiUm9zc1wiLFxuICBcIlJvc3NpZVwiLFxuICBcIlJvd2FuXCIsXG4gIFwiUm93ZW5hXCIsXG4gIFwiUm93bGFuZFwiLFxuICBcIlJveGFuZVwiLFxuICBcIlJveGFubmVcIixcbiAgXCJSb3lcIixcbiAgXCJSb3lhbFwiLFxuICBcIlJveWNlXCIsXG4gIFwiUm96ZWxsYVwiLFxuICBcIlJ1YmVuXCIsXG4gIFwiUnViaWVcIixcbiAgXCJSdWJ5XCIsXG4gIFwiUnVieWVcIixcbiAgXCJSdWRvbHBoXCIsXG4gIFwiUnVkeVwiLFxuICBcIlJ1cGVydFwiLFxuICBcIlJ1c3NcIixcbiAgXCJSdXNzZWxcIixcbiAgXCJSdXNzZWxsXCIsXG4gIFwiUnVzdHlcIixcbiAgXCJSdXRoXCIsXG4gIFwiUnV0aGVcIixcbiAgXCJSdXRoaWVcIixcbiAgXCJSeWFuXCIsXG4gIFwiUnlhbm5cIixcbiAgXCJSeWRlclwiLFxuICBcIlJ5bGFuXCIsXG4gIFwiUnlsZWVcIixcbiAgXCJSeWxlaWdoXCIsXG4gIFwiUnlsZXlcIixcbiAgXCJTYWJpbmFcIixcbiAgXCJTYWJyaW5hXCIsXG4gIFwiU2FicnluYVwiLFxuICBcIlNhZGllXCIsXG4gIFwiU2FkeWVcIixcbiAgXCJTYWdlXCIsXG4gIFwiU2FpZ2VcIixcbiAgXCJTYWxsaWVcIixcbiAgXCJTYWxseVwiLFxuICBcIlNhbG1hXCIsXG4gIFwiU2FsdmFkb3JcIixcbiAgXCJTYWx2YXRvcmVcIixcbiAgXCJTYW1cIixcbiAgXCJTYW1hbnRhXCIsXG4gIFwiU2FtYW50aGFcIixcbiAgXCJTYW1hcmFcIixcbiAgXCJTYW1pclwiLFxuICBcIlNhbW1pZVwiLFxuICBcIlNhbW15XCIsXG4gIFwiU2Ftc29uXCIsXG4gIFwiU2FuZHJhXCIsXG4gIFwiU2FuZHJpbmVcIixcbiAgXCJTYW5keVwiLFxuICBcIlNhbmZvcmRcIixcbiAgXCJTYW50YVwiLFxuICBcIlNhbnRpYWdvXCIsXG4gIFwiU2FudGluYVwiLFxuICBcIlNhbnRpbm9cIixcbiAgXCJTYW50b3NcIixcbiAgXCJTYXJhaFwiLFxuICBcIlNhcmFpXCIsXG4gIFwiU2FyaW5hXCIsXG4gIFwiU2FzaGFcIixcbiAgXCJTYXVsXCIsXG4gIFwiU2F2YW5haFwiLFxuICBcIlNhdmFubmFcIixcbiAgXCJTYXZhbm5haFwiLFxuICBcIlNhdmlvblwiLFxuICBcIlNjYXJsZXR0XCIsXG4gIFwiU2NodXlsZXJcIixcbiAgXCJTY290XCIsXG4gIFwiU2NvdHRpZVwiLFxuICBcIlNjb3R0eVwiLFxuICBcIlNlYW11c1wiLFxuICBcIlNlYW5cIixcbiAgXCJTZWJhc3RpYW5cIixcbiAgXCJTZWRyaWNrXCIsXG4gIFwiU2VsZW5hXCIsXG4gIFwiU2VsaW5hXCIsXG4gIFwiU2VsbWVyXCIsXG4gIFwiU2VyZW5hXCIsXG4gIFwiU2VyZW5pdHlcIixcbiAgXCJTZXRoXCIsXG4gIFwiU2hhZFwiLFxuICBcIlNoYWluYVwiLFxuICBcIlNoYWtpcmFcIixcbiAgXCJTaGFuYVwiLFxuICBcIlNoYW5lXCIsXG4gIFwiU2hhbmVsXCIsXG4gIFwiU2hhbmVsbGVcIixcbiAgXCJTaGFuaWFcIixcbiAgXCJTaGFuaWVcIixcbiAgXCJTaGFuaXlhXCIsXG4gIFwiU2hhbm5hXCIsXG4gIFwiU2hhbm5vblwiLFxuICBcIlNoYW5ueVwiLFxuICBcIlNoYW5vblwiLFxuICBcIlNoYW55XCIsXG4gIFwiU2hhcm9uXCIsXG4gIFwiU2hhdW5cIixcbiAgXCJTaGF3blwiLFxuICBcIlNoYXduYVwiLFxuICBcIlNoYXlsZWVcIixcbiAgXCJTaGF5bmFcIixcbiAgXCJTaGF5bmVcIixcbiAgXCJTaGVhXCIsXG4gIFwiU2hlaWxhXCIsXG4gIFwiU2hlbGRvblwiLFxuICBcIlNoZW1hclwiLFxuICBcIlNoZXJpZGFuXCIsXG4gIFwiU2hlcm1hblwiLFxuICBcIlNoZXJ3b29kXCIsXG4gIFwiU2hpcmxleVwiLFxuICBcIlNoeWFublwiLFxuICBcIlNoeWFubmVcIixcbiAgXCJTaWJ5bFwiLFxuICBcIlNpZFwiLFxuICBcIlNpZG5leVwiLFxuICBcIlNpZW5uYVwiLFxuICBcIlNpZXJyYVwiLFxuICBcIlNpZ211bmRcIixcbiAgXCJTaWdyaWRcIixcbiAgXCJTaWd1cmRcIixcbiAgXCJTaWxhc1wiLFxuICBcIlNpbVwiLFxuICBcIlNpbWVvblwiLFxuICBcIlNpbW9uZVwiLFxuICBcIlNpbmNlcmVcIixcbiAgXCJTaXN0ZXJcIixcbiAgXCJTa3llXCIsXG4gIFwiU2t5bGFcIixcbiAgXCJTa3lsYXJcIixcbiAgXCJTb2ZpYVwiLFxuICBcIlNvbGVkYWRcIixcbiAgXCJTb2xvblwiLFxuICBcIlNvbmlhXCIsXG4gIFwiU29ubnlcIixcbiAgXCJTb255YVwiLFxuICBcIlNvcGhpYVwiLFxuICBcIlNvcGhpZVwiLFxuICBcIlNwZW5jZXJcIixcbiAgXCJTdGFjZXlcIixcbiAgXCJTdGFjeVwiLFxuICBcIlN0YW5cIixcbiAgXCJTdGFuZm9yZFwiLFxuICBcIlN0YW5sZXlcIixcbiAgXCJTdGFudG9uXCIsXG4gIFwiU3RlZmFuXCIsXG4gIFwiU3RlZmFuaWVcIixcbiAgXCJTdGVsbGFcIixcbiAgXCJTdGVwaGFuXCIsXG4gIFwiU3RlcGhhbmlhXCIsXG4gIFwiU3RlcGhhbmllXCIsXG4gIFwiU3RlcGhhbnlcIixcbiAgXCJTdGVwaGVuXCIsXG4gIFwiU3RlcGhvblwiLFxuICBcIlN0ZXJsaW5nXCIsXG4gIFwiU3RldmVcIixcbiAgXCJTdGV2aWVcIixcbiAgXCJTdGV3YXJ0XCIsXG4gIFwiU3RvbmVcIixcbiAgXCJTdHVhcnRcIixcbiAgXCJTdW1tZXJcIixcbiAgXCJTdW5ueVwiLFxuICBcIlN1c2FuXCIsXG4gIFwiU3VzYW5hXCIsXG4gIFwiU3VzYW5uYVwiLFxuICBcIlN1c2llXCIsXG4gIFwiU3V6YW5uZVwiLFxuICBcIlN2ZW5cIixcbiAgXCJTeWJsZVwiLFxuICBcIlN5ZG5lZVwiLFxuICBcIlN5ZG5leVwiLFxuICBcIlN5ZG5pXCIsXG4gIFwiU3lkbmllXCIsXG4gIFwiU3lsdmFuXCIsXG4gIFwiU3lsdmVzdGVyXCIsXG4gIFwiU3lsdmlhXCIsXG4gIFwiVGFiaXRoYVwiLFxuICBcIlRhZFwiLFxuICBcIlRhbGlhXCIsXG4gIFwiVGFsb25cIixcbiAgXCJUYW1hcmFcIixcbiAgXCJUYW1pYVwiLFxuICBcIlRhbmlhXCIsXG4gIFwiVGFubmVyXCIsXG4gIFwiVGFueWFcIixcbiAgXCJUYXJhXCIsXG4gIFwiVGFyeW5cIixcbiAgXCJUYXRlXCIsXG4gIFwiVGF0dW1cIixcbiAgXCJUYXR5YW5hXCIsXG4gIFwiVGF1cmVhblwiLFxuICBcIlRhdmFyZXNcIixcbiAgXCJUYXlhXCIsXG4gIFwiVGF5bG9yXCIsXG4gIFwiVGVhZ2FuXCIsXG4gIFwiVGVkXCIsXG4gIFwiVGVsbHlcIixcbiAgXCJUZXJlbmNlXCIsXG4gIFwiVGVyZXNhXCIsXG4gIFwiVGVycmFuY2VcIixcbiAgXCJUZXJyZWxsXCIsXG4gIFwiVGVycmVuY2VcIixcbiAgXCJUZXJyaWxsXCIsXG4gIFwiVGVycnlcIixcbiAgXCJUZXNzXCIsXG4gIFwiVGVzc2llXCIsXG4gIFwiVGV2aW5cIixcbiAgXCJUaGFkXCIsXG4gIFwiVGhhZGRldXNcIixcbiAgXCJUaGFsaWFcIixcbiAgXCJUaGVhXCIsXG4gIFwiVGhlbG1hXCIsXG4gIFwiVGhlb1wiLFxuICBcIlRoZW9kb3JhXCIsXG4gIFwiVGhlb2RvcmVcIixcbiAgXCJUaGVyZXNhXCIsXG4gIFwiVGhlcmVzZVwiLFxuICBcIlRoZXJlc2lhXCIsXG4gIFwiVGhlcm9uXCIsXG4gIFwiVGhvbWFzXCIsXG4gIFwiVGhvcmFcIixcbiAgXCJUaHVybWFuXCIsXG4gIFwiVGlhXCIsXG4gIFwiVGlhbmFcIixcbiAgXCJUaWFubmFcIixcbiAgXCJUaWFyYVwiLFxuICBcIlRpZXJyYVwiLFxuICBcIlRpZmZhbnlcIixcbiAgXCJUaWxsbWFuXCIsXG4gIFwiVGltbW90aHlcIixcbiAgXCJUaW1teVwiLFxuICBcIlRpbW90aHlcIixcbiAgXCJUaW5hXCIsXG4gIFwiVGl0b1wiLFxuICBcIlRpdHVzXCIsXG4gIFwiVG9iaW5cIixcbiAgXCJUb2J5XCIsXG4gIFwiVG9kXCIsXG4gIFwiVG9tXCIsXG4gIFwiVG9tYXNcIixcbiAgXCJUb21hc2FcIixcbiAgXCJUb21taWVcIixcbiAgXCJUb25leVwiLFxuICBcIlRvbmlcIixcbiAgXCJUb255XCIsXG4gIFwiVG9yZXlcIixcbiAgXCJUb3JyYW5jZVwiLFxuICBcIlRvcnJleVwiLFxuICBcIlRveVwiLFxuICBcIlRyYWNlXCIsXG4gIFwiVHJhY2V5XCIsXG4gIFwiVHJhY3lcIixcbiAgXCJUcmF2aXNcIixcbiAgXCJUcmF2b25cIixcbiAgXCJUcmVcIixcbiAgXCJUcmVtYWluZVwiLFxuICBcIlRyZW1heW5lXCIsXG4gIFwiVHJlbnRcIixcbiAgXCJUcmVudG9uXCIsXG4gIFwiVHJlc3NhXCIsXG4gIFwiVHJlc3NpZVwiLFxuICBcIlRyZXZhXCIsXG4gIFwiVHJldmVyXCIsXG4gIFwiVHJldmlvblwiLFxuICBcIlRyZXZvclwiLFxuICBcIlRyZXlcIixcbiAgXCJUcmluaXR5XCIsXG4gIFwiVHJpc2hhXCIsXG4gIFwiVHJpc3RpYW5cIixcbiAgXCJUcmlzdGluXCIsXG4gIFwiVHJpc3RvblwiLFxuICBcIlRyb3lcIixcbiAgXCJUcnVkaWVcIixcbiAgXCJUcnljaWFcIixcbiAgXCJUcnlzdGFuXCIsXG4gIFwiVHVybmVyXCIsXG4gIFwiVHdpbGFcIixcbiAgXCJUeWxlclwiLFxuICBcIlR5cmFcIixcbiAgXCJUeXJlZVwiLFxuICBcIlR5cmVla1wiLFxuICBcIlR5cmVsXCIsXG4gIFwiVHlyZWxsXCIsXG4gIFwiVHlyZXNlXCIsXG4gIFwiVHlyaXF1ZVwiLFxuICBcIlR5c2hhd25cIixcbiAgXCJUeXNvblwiLFxuICBcIlViYWxkb1wiLFxuICBcIlVsaWNlc1wiLFxuICBcIlVsaXNlc1wiLFxuICBcIlVuYVwiLFxuICBcIlVuaXF1ZVwiLFxuICBcIlVyYmFuXCIsXG4gIFwiVXJpYWhcIixcbiAgXCJVcmllbFwiLFxuICBcIlVyc3VsYVwiLFxuICBcIlZhZGFcIixcbiAgXCJWYWxlbnRpblwiLFxuICBcIlZhbGVudGluYVwiLFxuICBcIlZhbGVudGluZVwiLFxuICBcIlZhbGVyaWVcIixcbiAgXCJWYWxsaWVcIixcbiAgXCJWYW5cIixcbiAgXCJWYW5jZVwiLFxuICBcIlZhbmVzc2FcIixcbiAgXCJWYXVnaG5cIixcbiAgXCJWZWRhXCIsXG4gIFwiVmVsZGFcIixcbiAgXCJWZWxsYVwiLFxuICBcIlZlbG1hXCIsXG4gIFwiVmVsdmFcIixcbiAgXCJWZW5hXCIsXG4gIFwiVmVyZGFcIixcbiAgXCJWZXJkaWVcIixcbiAgXCJWZXJnaWVcIixcbiAgXCJWZXJsYVwiLFxuICBcIlZlcmxpZVwiLFxuICBcIlZlcm5cIixcbiAgXCJWZXJuYVwiLFxuICBcIlZlcm5lclwiLFxuICBcIlZlcm5pY2VcIixcbiAgXCJWZXJuaWVcIixcbiAgXCJWZXJub25cIixcbiAgXCJWZXJvbmFcIixcbiAgXCJWZXJvbmljYVwiLFxuICBcIlZlc3RhXCIsXG4gIFwiVmljZW50YVwiLFxuICBcIlZpY2VudGVcIixcbiAgXCJWaWNraWVcIixcbiAgXCJWaWNreVwiLFxuICBcIlZpY3RvclwiLFxuICBcIlZpY3RvcmlhXCIsXG4gIFwiVmlkYVwiLFxuICBcIlZpZGFsXCIsXG4gIFwiVmlsbWFcIixcbiAgXCJWaW5jZVwiLFxuICBcIlZpbmNlbnRcIixcbiAgXCJWaW5jZW56YVwiLFxuICBcIlZpbmNlbnpvXCIsXG4gIFwiVmlubmllXCIsXG4gIFwiVmlvbGFcIixcbiAgXCJWaW9sZXRcIixcbiAgXCJWaW9sZXR0ZVwiLFxuICBcIlZpcmdpZVwiLFxuICBcIlZpcmdpbFwiLFxuICBcIlZpcmdpbmlhXCIsXG4gIFwiVmlyZ2luaWVcIixcbiAgXCJWaXRhXCIsXG4gIFwiVml0b1wiLFxuICBcIlZpdmFcIixcbiAgXCJWaXZpYW5cIixcbiAgXCJWaXZpYW5lXCIsXG4gIFwiVml2aWFubmVcIixcbiAgXCJWaXZpZW5cIixcbiAgXCJWaXZpZW5uZVwiLFxuICBcIlZsYWRpbWlyXCIsXG4gIFwiV2FkZVwiLFxuICBcIldhaW5vXCIsXG4gIFwiV2FsZG9cIixcbiAgXCJXYWxrZXJcIixcbiAgXCJXYWxsYWNlXCIsXG4gIFwiV2FsdGVyXCIsXG4gIFwiV2FsdG9uXCIsXG4gIFwiV2FuZGFcIixcbiAgXCJXYXJkXCIsXG4gIFwiV2FycmVuXCIsXG4gIFwiV2F0c29uXCIsXG4gIFwiV2F2YVwiLFxuICBcIldheWxvblwiLFxuICBcIldheW5lXCIsXG4gIFwiV2Vic3RlclwiLFxuICBcIldlbGRvblwiLFxuICBcIldlbGxpbmd0b25cIixcbiAgXCJXZW5kZWxsXCIsXG4gIFwiV2VuZHlcIixcbiAgXCJXZXJuZXJcIixcbiAgXCJXZXN0bGV5XCIsXG4gIFwiV2VzdG9uXCIsXG4gIFwiV2hpdG5leVwiLFxuICBcIldpbGJlclwiLFxuICBcIldpbGJlcnRcIixcbiAgXCJXaWxidXJuXCIsXG4gIFwiV2lsZXlcIixcbiAgXCJXaWxmb3JkXCIsXG4gIFwiV2lsZnJlZFwiLFxuICBcIldpbGZyZWRvXCIsXG4gIFwiV2lsZnJpZFwiLFxuICBcIldpbGhlbG1cIixcbiAgXCJXaWxoZWxtaW5lXCIsXG4gIFwiV2lsbFwiLFxuICBcIldpbGxhXCIsXG4gIFwiV2lsbGFyZFwiLFxuICBcIldpbGxpYW1cIixcbiAgXCJXaWxsaWVcIixcbiAgXCJXaWxsaXNcIixcbiAgXCJXaWxsb3dcIixcbiAgXCJXaWxseVwiLFxuICBcIldpbG1hXCIsXG4gIFwiV2lsbWVyXCIsXG4gIFwiV2lsc29uXCIsXG4gIFwiV2lsdG9uXCIsXG4gIFwiV2luZmllbGRcIixcbiAgXCJXaW5pZnJlZFwiLFxuICBcIldpbm5pZnJlZFwiLFxuICBcIldpbm9uYVwiLFxuICBcIldpbnN0b25cIixcbiAgXCJXb29kcm93XCIsXG4gIFwiV3lhdHRcIixcbiAgXCJXeW1hblwiLFxuICBcIlhhbmRlclwiLFxuICBcIlhhdmllclwiLFxuICBcIlh6YXZpZXJcIixcbiAgXCJZYWRpcmFcIixcbiAgXCJZYXNtZWVuXCIsXG4gIFwiWWFzbWluXCIsXG4gIFwiWWFzbWluZVwiLFxuICBcIllhem1pblwiLFxuICBcIlllc2VuaWFcIixcbiAgXCJZZXNzZW5pYVwiLFxuICBcIllvbGFuZGFcIixcbiAgXCJZb3NoaWtvXCIsXG4gIFwiWXZldHRlXCIsXG4gIFwiWXZvbm5lXCIsXG4gIFwiWmFjaGFyaWFoXCIsXG4gIFwiWmFjaGFyeVwiLFxuICBcIlphY2hlcnlcIixcbiAgXCJaYWNrXCIsXG4gIFwiWmFja2FyeVwiLFxuICBcIlphY2tlcnlcIixcbiAgXCJaYWthcnlcIixcbiAgXCJaYW5kZXJcIixcbiAgXCJaYW5lXCIsXG4gIFwiWmFyaWFcIixcbiAgXCJaZWNoYXJpYWhcIixcbiAgXCJaZWxkYVwiLFxuICBcIlplbGxhXCIsXG4gIFwiWmVsbWFcIixcbiAgXCJaZW5hXCIsXG4gIFwiWmV0dGFcIixcbiAgXCJaaW9uXCIsXG4gIFwiWml0YVwiLFxuICBcIlpvZVwiLFxuICBcIlpvZXlcIixcbiAgXCJab2llXCIsXG4gIFwiWm9pbGFcIixcbiAgXCJab2xhXCIsXG4gIFwiWm9yYVwiLFxuICBcIlp1bGFcIlxuXTtcbiIsInZhciBuYW1lID0ge307XG5tb2R1bGVbJ2V4cG9ydHMnXSA9IG5hbWU7XG5uYW1lLmZpcnN0X25hbWUgPSByZXF1aXJlKFwiLi9maXJzdF9uYW1lXCIpO1xubmFtZS5sYXN0X25hbWUgPSByZXF1aXJlKFwiLi9sYXN0X25hbWVcIik7XG5uYW1lLnByZWZpeCA9IHJlcXVpcmUoXCIuL3ByZWZpeFwiKTtcbm5hbWUuc3VmZml4ID0gcmVxdWlyZShcIi4vc3VmZml4XCIpO1xubmFtZS50aXRsZSA9IHJlcXVpcmUoXCIuL3RpdGxlXCIpO1xubmFtZS5uYW1lID0gcmVxdWlyZShcIi4vbmFtZVwiKTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiQWJib3R0XCIsXG4gIFwiQWJlcm5hdGh5XCIsXG4gIFwiQWJzaGlyZVwiLFxuICBcIkFkYW1zXCIsXG4gIFwiQWx0ZW53ZXJ0aFwiLFxuICBcIkFuZGVyc29uXCIsXG4gIFwiQW5rdW5kaW5nXCIsXG4gIFwiQXJtc3Ryb25nXCIsXG4gIFwiQXVlclwiLFxuICBcIkF1ZmRlcmhhclwiLFxuICBcIkJhaHJpbmdlclwiLFxuICBcIkJhaWxleVwiLFxuICBcIkJhbGlzdHJlcmlcIixcbiAgXCJCYXJyb3dzXCIsXG4gIFwiQmFydGVsbFwiLFxuICBcIkJhcnRvbGV0dGlcIixcbiAgXCJCYXJ0b25cIixcbiAgXCJCYXNoaXJpYW5cIixcbiAgXCJCYXR6XCIsXG4gIFwiQmF1Y2hcIixcbiAgXCJCYXVtYmFjaFwiLFxuICBcIkJheWVyXCIsXG4gIFwiQmVhaGFuXCIsXG4gIFwiQmVhdHR5XCIsXG4gIFwiQmVjaHRlbGFyXCIsXG4gIFwiQmVja2VyXCIsXG4gIFwiQmVkbmFyXCIsXG4gIFwiQmVlclwiLFxuICBcIkJlaWVyXCIsXG4gIFwiQmVyZ2VcIixcbiAgXCJCZXJnbmF1bVwiLFxuICBcIkJlcmdzdHJvbVwiLFxuICBcIkJlcm5oYXJkXCIsXG4gIFwiQmVybmllclwiLFxuICBcIkJpbnNcIixcbiAgXCJCbGFuZGFcIixcbiAgXCJCbGlja1wiLFxuICBcIkJsb2NrXCIsXG4gIFwiQm9kZVwiLFxuICBcIkJvZWhtXCIsXG4gIFwiQm9nYW5cIixcbiAgXCJCb2dpc2ljaFwiLFxuICBcIkJvcmVyXCIsXG4gIFwiQm9zY29cIixcbiAgXCJCb3RzZm9yZFwiLFxuICBcIkJveWVyXCIsXG4gIFwiQm95bGVcIixcbiAgXCJCcmFkdGtlXCIsXG4gIFwiQnJha3VzXCIsXG4gIFwiQnJhdW5cIixcbiAgXCJCcmVpdGVuYmVyZ1wiLFxuICBcIkJyZWtrZVwiLFxuICBcIkJyb3duXCIsXG4gIFwiQnJ1ZW5cIixcbiAgXCJCdWNrcmlkZ2VcIixcbiAgXCJDYXJyb2xsXCIsXG4gIFwiQ2FydGVyXCIsXG4gIFwiQ2FydHdyaWdodFwiLFxuICBcIkNhc3BlclwiLFxuICBcIkNhc3NpblwiLFxuICBcIkNoYW1wbGluXCIsXG4gIFwiQ2hyaXN0aWFuc2VuXCIsXG4gIFwiQ29sZVwiLFxuICBcIkNvbGxpZXJcIixcbiAgXCJDb2xsaW5zXCIsXG4gIFwiQ29ublwiLFxuICBcIkNvbm5lbGx5XCIsXG4gIFwiQ29ucm95XCIsXG4gIFwiQ29uc2lkaW5lXCIsXG4gIFwiQ29ya2VyeVwiLFxuICBcIkNvcm1pZXJcIixcbiAgXCJDb3J3aW5cIixcbiAgXCJDcmVtaW5cIixcbiAgXCJDcmlzdFwiLFxuICBcIkNyb25hXCIsXG4gIFwiQ3JvbmluXCIsXG4gIFwiQ3Jvb2tzXCIsXG4gIFwiQ3J1aWNrc2hhbmtcIixcbiAgXCJDdW1tZXJhdGFcIixcbiAgXCJDdW1taW5nc1wiLFxuICBcIkRhY2hcIixcbiAgXCJEJ0Ftb3JlXCIsXG4gIFwiRGFuaWVsXCIsXG4gIFwiRGFyZVwiLFxuICBcIkRhdWdoZXJ0eVwiLFxuICBcIkRhdmlzXCIsXG4gIFwiRGVja293XCIsXG4gIFwiRGVuZXNpa1wiLFxuICBcIkRpYmJlcnRcIixcbiAgXCJEaWNrZW5zXCIsXG4gIFwiRGlja2lcIixcbiAgXCJEaWNraW5zb25cIixcbiAgXCJEaWV0cmljaFwiLFxuICBcIkRvbm5lbGx5XCIsXG4gIFwiRG9vbGV5XCIsXG4gIFwiRG91Z2xhc1wiLFxuICBcIkRveWxlXCIsXG4gIFwiRHVCdXF1ZVwiLFxuICBcIkR1cmdhblwiLFxuICBcIkViZXJ0XCIsXG4gIFwiRWZmZXJ0elwiLFxuICBcIkVpY2htYW5uXCIsXG4gIFwiRW1hcmRcIixcbiAgXCJFbW1lcmljaFwiLFxuICBcIkVyZG1hblwiLFxuICBcIkVybnNlclwiLFxuICBcIkZhZGVsXCIsXG4gIFwiRmFoZXlcIixcbiAgXCJGYXJyZWxsXCIsXG4gIFwiRmF5XCIsXG4gIFwiRmVlbmV5XCIsXG4gIFwiRmVlc3RcIixcbiAgXCJGZWlsXCIsXG4gIFwiRmVycnlcIixcbiAgXCJGaXNoZXJcIixcbiAgXCJGbGF0bGV5XCIsXG4gIFwiRnJhbWlcIixcbiAgXCJGcmFuZWNraVwiLFxuICBcIkZyaWVzZW5cIixcbiAgXCJGcml0c2NoXCIsXG4gIFwiRnVua1wiLFxuICBcIkdheWxvcmRcIixcbiAgXCJHZXJob2xkXCIsXG4gIFwiR2VybGFjaFwiLFxuICBcIkdpYnNvblwiLFxuICBcIkdpc2xhc29uXCIsXG4gIFwiR2xlYXNvblwiLFxuICBcIkdsZWljaG5lclwiLFxuICBcIkdsb3ZlclwiLFxuICBcIkdvbGRuZXJcIixcbiAgXCJHb29kd2luXCIsXG4gIFwiR29yY3phbnlcIixcbiAgXCJHb3R0bGllYlwiLFxuICBcIkdveWV0dGVcIixcbiAgXCJHcmFkeVwiLFxuICBcIkdyYWhhbVwiLFxuICBcIkdyYW50XCIsXG4gIFwiR3JlZW5cIixcbiAgXCJHcmVlbmZlbGRlclwiLFxuICBcIkdyZWVuaG9sdFwiLFxuICBcIkdyaW1lc1wiLFxuICBcIkd1bGdvd3NraVwiLFxuICBcIkd1c2lrb3dza2lcIixcbiAgXCJHdXRrb3dza2lcIixcbiAgXCJHdXRtYW5uXCIsXG4gIFwiSGFhZ1wiLFxuICBcIkhhY2tldHRcIixcbiAgXCJIYWdlbmVzXCIsXG4gIFwiSGFoblwiLFxuICBcIkhhbGV5XCIsXG4gIFwiSGFsdm9yc29uXCIsXG4gIFwiSGFtaWxsXCIsXG4gIFwiSGFtbWVzXCIsXG4gIFwiSGFuZFwiLFxuICBcIkhhbmVcIixcbiAgXCJIYW5zZW5cIixcbiAgXCJIYXJiZXJcIixcbiAgXCJIYXJyaXNcIixcbiAgXCJIYXJ0bWFublwiLFxuICBcIkhhcnZleVwiLFxuICBcIkhhdWNrXCIsXG4gIFwiSGF5ZXNcIixcbiAgXCJIZWFuZXlcIixcbiAgXCJIZWF0aGNvdGVcIixcbiAgXCJIZWdtYW5uXCIsXG4gIFwiSGVpZGVucmVpY2hcIixcbiAgXCJIZWxsZXJcIixcbiAgXCJIZXJtYW5cIixcbiAgXCJIZXJtYW5uXCIsXG4gIFwiSGVybWlzdG9uXCIsXG4gIFwiSGVyem9nXCIsXG4gIFwiSGVzc2VsXCIsXG4gIFwiSGV0dGluZ2VyXCIsXG4gIFwiSGlja2xlXCIsXG4gIFwiSGlsbGxcIixcbiAgXCJIaWxsc1wiLFxuICBcIkhpbHBlcnRcIixcbiAgXCJIaW50elwiLFxuICBcIkhpcnRoZVwiLFxuICBcIkhvZGtpZXdpY3pcIixcbiAgXCJIb2VnZXJcIixcbiAgXCJIb21lbmlja1wiLFxuICBcIkhvcHBlXCIsXG4gIFwiSG93ZVwiLFxuICBcIkhvd2VsbFwiLFxuICBcIkh1ZHNvblwiLFxuICBcIkh1ZWxcIixcbiAgXCJIdWVsc1wiLFxuICBcIkh5YXR0XCIsXG4gIFwiSmFjb2JpXCIsXG4gIFwiSmFjb2JzXCIsXG4gIFwiSmFjb2Jzb25cIixcbiAgXCJKYWt1Ym93c2tpXCIsXG4gIFwiSmFza29sc2tpXCIsXG4gIFwiSmFzdFwiLFxuICBcIkplbmtpbnNcIixcbiAgXCJKZXJkZVwiLFxuICBcIkpvaG5zXCIsXG4gIFwiSm9obnNvblwiLFxuICBcIkpvaG5zdG9uXCIsXG4gIFwiSm9uZXNcIixcbiAgXCJLYXNzdWxrZVwiLFxuICBcIkthdXR6ZXJcIixcbiAgXCJLZWVibGVyXCIsXG4gIFwiS2VlbGluZ1wiLFxuICBcIktlbW1lclwiLFxuICBcIktlcmx1a2VcIixcbiAgXCJLZXJ0em1hbm5cIixcbiAgXCJLZXNzbGVyXCIsXG4gIFwiS2llaG5cIixcbiAgXCJLaWhuXCIsXG4gIFwiS2lsYmFja1wiLFxuICBcIktpbmdcIixcbiAgXCJLaXJsaW5cIixcbiAgXCJLbGVpblwiLFxuICBcIktsaW5nXCIsXG4gIFwiS2xvY2tvXCIsXG4gIFwiS29jaFwiLFxuICBcIktvZWxwaW5cIixcbiAgXCJLb2VwcFwiLFxuICBcIktvaGxlclwiLFxuICBcIktvbm9wZWxza2lcIixcbiAgXCJLb3NzXCIsXG4gIFwiS292YWNla1wiLFxuICBcIktvemV5XCIsXG4gIFwiS3JhamNpa1wiLFxuICBcIktyZWlnZXJcIixcbiAgXCJLcmlzXCIsXG4gIFwiS3NobGVyaW5cIixcbiAgXCJLdWJcIixcbiAgXCJLdWhpY1wiLFxuICBcIkt1aGxtYW5cIixcbiAgXCJLdWhuXCIsXG4gIFwiS3VsYXNcIixcbiAgXCJLdW5kZVwiLFxuICBcIkt1bnplXCIsXG4gIFwiS3VwaGFsXCIsXG4gIFwiS3V0Y2hcIixcbiAgXCJLdXZhbGlzXCIsXG4gIFwiTGFiYWRpZVwiLFxuICBcIkxha2luXCIsXG4gIFwiTGFuZ1wiLFxuICBcIkxhbmdvc2hcIixcbiAgXCJMYW5nd29ydGhcIixcbiAgXCJMYXJraW5cIixcbiAgXCJMYXJzb25cIixcbiAgXCJMZWFubm9uXCIsXG4gIFwiTGVic2Fja1wiLFxuICBcIkxlZG5lclwiLFxuICBcIkxlZmZsZXJcIixcbiAgXCJMZWdyb3NcIixcbiAgXCJMZWhuZXJcIixcbiAgXCJMZW1rZVwiLFxuICBcIkxlc2NoXCIsXG4gIFwiTGV1c2Noa2VcIixcbiAgXCJMaW5kXCIsXG4gIFwiTGluZGdyZW5cIixcbiAgXCJMaXR0ZWxcIixcbiAgXCJMaXR0bGVcIixcbiAgXCJMb2NrbWFuXCIsXG4gIFwiTG93ZVwiLFxuICBcIkx1Ym93aXR6XCIsXG4gIFwiTHVlaWx3aXR6XCIsXG4gIFwiTHVldHRnZW5cIixcbiAgXCJMeW5jaFwiLFxuICBcIk1hY2Vqa292aWNcIixcbiAgXCJNYWNHeXZlclwiLFxuICBcIk1hZ2dpb1wiLFxuICBcIk1hbm5cIixcbiAgXCJNYW50ZVwiLFxuICBcIk1hcmtzXCIsXG4gIFwiTWFycXVhcmR0XCIsXG4gIFwiTWFydmluXCIsXG4gIFwiTWF5ZXJcIixcbiAgXCJNYXllcnRcIixcbiAgXCJNY0NsdXJlXCIsXG4gIFwiTWNDdWxsb3VnaFwiLFxuICBcIk1jRGVybW90dFwiLFxuICBcIk1jR2x5bm5cIixcbiAgXCJNY0tlbnppZVwiLFxuICBcIk1jTGF1Z2hsaW5cIixcbiAgXCJNZWRodXJzdFwiLFxuICBcIk1lcnR6XCIsXG4gIFwiTWV0elwiLFxuICBcIk1pbGxlclwiLFxuICBcIk1pbGxzXCIsXG4gIFwiTWl0Y2hlbGxcIixcbiAgXCJNb2VuXCIsXG4gIFwiTW9oclwiLFxuICBcIk1vbmFoYW5cIixcbiAgXCJNb29yZVwiLFxuICBcIk1vcmFyXCIsXG4gIFwiTW9yaXNzZXR0ZVwiLFxuICBcIk1vc2Npc2tpXCIsXG4gIFwiTXJhelwiLFxuICBcIk11ZWxsZXJcIixcbiAgXCJNdWxsZXJcIixcbiAgXCJNdXJhemlrXCIsXG4gIFwiTXVycGh5XCIsXG4gIFwiTXVycmF5XCIsXG4gIFwiTmFkZXJcIixcbiAgXCJOaWNvbGFzXCIsXG4gIFwiTmllbm93XCIsXG4gIFwiTmlrb2xhdXNcIixcbiAgXCJOaXR6c2NoZVwiLFxuICBcIk5vbGFuXCIsXG4gIFwiT2JlcmJydW5uZXJcIixcbiAgXCJPJ0Nvbm5lbGxcIixcbiAgXCJPJ0Nvbm5lclwiLFxuICBcIk8nSGFyYVwiLFxuICBcIk8nS2VlZmVcIixcbiAgXCJPJ0tvblwiLFxuICBcIk9rdW5ldmFcIixcbiAgXCJPbHNvblwiLFxuICBcIk9uZHJpY2thXCIsXG4gIFwiTydSZWlsbHlcIixcbiAgXCJPcm5cIixcbiAgXCJPcnRpelwiLFxuICBcIk9zaW5za2lcIixcbiAgXCJQYWNvY2hhXCIsXG4gIFwiUGFkYmVyZ1wiLFxuICBcIlBhZ2FjXCIsXG4gIFwiUGFyaXNpYW5cIixcbiAgXCJQYXJrZXJcIixcbiAgXCJQYXVjZWtcIixcbiAgXCJQZmFubmVyc3RpbGxcIixcbiAgXCJQZmVmZmVyXCIsXG4gIFwiUG9sbGljaFwiLFxuICBcIlBvdXJvc1wiLFxuICBcIlBvd2xvd3NraVwiLFxuICBcIlByZWRvdmljXCIsXG4gIFwiUHJpY2VcIixcbiAgXCJQcm9oYXNrYVwiLFxuICBcIlByb3NhY2NvXCIsXG4gIFwiUHVyZHlcIixcbiAgXCJRdWlnbGV5XCIsXG4gIFwiUXVpdHpvblwiLFxuICBcIlJhdGhcIixcbiAgXCJSYXRrZVwiLFxuICBcIlJhdVwiLFxuICBcIlJheW5vclwiLFxuICBcIlJlaWNoZWxcIixcbiAgXCJSZWljaGVydFwiLFxuICBcIlJlaWxseVwiLFxuICBcIlJlaW5nZXJcIixcbiAgXCJSZW1wZWxcIixcbiAgXCJSZW5uZXJcIixcbiAgXCJSZXlub2xkc1wiLFxuICBcIlJpY2VcIixcbiAgXCJSaXBwaW5cIixcbiAgXCJSaXRjaGllXCIsXG4gIFwiUm9iZWxcIixcbiAgXCJSb2JlcnRzXCIsXG4gIFwiUm9kcmlndWV6XCIsXG4gIFwiUm9nYWhuXCIsXG4gIFwiUm9oYW5cIixcbiAgXCJSb2xmc29uXCIsXG4gIFwiUm9tYWd1ZXJhXCIsXG4gIFwiUm9vYlwiLFxuICBcIlJvc2VuYmF1bVwiLFxuICBcIlJvd2VcIixcbiAgXCJSdWVja2VyXCIsXG4gIFwiUnVub2xmc2RvdHRpclwiLFxuICBcIlJ1bm9sZnNzb25cIixcbiAgXCJSdW50ZVwiLFxuICBcIlJ1c3NlbFwiLFxuICBcIlJ1dGhlcmZvcmRcIixcbiAgXCJSeWFuXCIsXG4gIFwiU2FuZm9yZFwiLFxuICBcIlNhdHRlcmZpZWxkXCIsXG4gIFwiU2F1ZXJcIixcbiAgXCJTYXdheW5cIixcbiAgXCJTY2hhZGVuXCIsXG4gIFwiU2NoYWVmZXJcIixcbiAgXCJTY2hhbWJlcmdlclwiLFxuICBcIlNjaGlsbGVyXCIsXG4gIFwiU2NoaW1tZWxcIixcbiAgXCJTY2hpbm5lclwiLFxuICBcIlNjaG1lbGVyXCIsXG4gIFwiU2NobWlkdFwiLFxuICBcIlNjaG1pdHRcIixcbiAgXCJTY2huZWlkZXJcIixcbiAgXCJTY2hvZW5cIixcbiAgXCJTY2hvd2FsdGVyXCIsXG4gIFwiU2Nocm9lZGVyXCIsXG4gIFwiU2NodWxpc3RcIixcbiAgXCJTY2h1bHR6XCIsXG4gIFwiU2NodW1tXCIsXG4gIFwiU2NodXBwZVwiLFxuICBcIlNjaHVzdGVyXCIsXG4gIFwiU2VuZ2VyXCIsXG4gIFwiU2hhbmFoYW5cIixcbiAgXCJTaGllbGRzXCIsXG4gIFwiU2ltb25pc1wiLFxuICBcIlNpcGVzXCIsXG4gIFwiU2tpbGVzXCIsXG4gIFwiU21pdGhcIixcbiAgXCJTbWl0aGFtXCIsXG4gIFwiU3BlbmNlclwiLFxuICBcIlNwaW5rYVwiLFxuICBcIlNwb3JlclwiLFxuICBcIlN0YW1tXCIsXG4gIFwiU3RhbnRvblwiLFxuICBcIlN0YXJrXCIsXG4gIFwiU3RlaHJcIixcbiAgXCJTdGV1YmVyXCIsXG4gIFwiU3RpZWRlbWFublwiLFxuICBcIlN0b2tlc1wiLFxuICBcIlN0b2x0ZW5iZXJnXCIsXG4gIFwiU3RyYWNrZVwiLFxuICBcIlN0cmVpY2hcIixcbiAgXCJTdHJvbWFuXCIsXG4gIFwiU3Ryb3NpblwiLFxuICBcIlN3YW5pYXdza2lcIixcbiAgXCJTd2lmdFwiLFxuICBcIlRlcnJ5XCIsXG4gIFwiVGhpZWxcIixcbiAgXCJUaG9tcHNvblwiLFxuICBcIlRpbGxtYW5cIixcbiAgXCJUb3JwXCIsXG4gIFwiVG9ycGh5XCIsXG4gIFwiVG93bmVcIixcbiAgXCJUb3lcIixcbiAgXCJUcmFudG93XCIsXG4gIFwiVHJlbWJsYXlcIixcbiAgXCJUcmV1dGVsXCIsXG4gIFwiVHJvbXBcIixcbiAgXCJUdXJjb3R0ZVwiLFxuICBcIlR1cm5lclwiLFxuICBcIlVsbHJpY2hcIixcbiAgXCJVcHRvblwiLFxuICBcIlZhbmRlcnZvcnRcIixcbiAgXCJWZXVtXCIsXG4gIFwiVm9sa21hblwiLFxuICBcIlZvblwiLFxuICBcIlZvblJ1ZWRlblwiLFxuICBcIldhZWxjaGlcIixcbiAgXCJXYWxrZXJcIixcbiAgXCJXYWxzaFwiLFxuICBcIldhbHRlclwiLFxuICBcIldhcmRcIixcbiAgXCJXYXRlcnNcIixcbiAgXCJXYXRzaWNhXCIsXG4gIFwiV2ViZXJcIixcbiAgXCJXZWhuZXJcIixcbiAgXCJXZWltYW5uXCIsXG4gIFwiV2Vpc3NuYXRcIixcbiAgXCJXZWxjaFwiLFxuICBcIldlc3RcIixcbiAgXCJXaGl0ZVwiLFxuICBcIldpZWdhbmRcIixcbiAgXCJXaWxkZXJtYW5cIixcbiAgXCJXaWxraW5zb25cIixcbiAgXCJXaWxsXCIsXG4gIFwiV2lsbGlhbXNvblwiLFxuICBcIldpbGxtc1wiLFxuICBcIldpbmRsZXJcIixcbiAgXCJXaW50aGVpc2VyXCIsXG4gIFwiV2lzb2t5XCIsXG4gIFwiV2lzb3prXCIsXG4gIFwiV2l0dGluZ1wiLFxuICBcIldpemFcIixcbiAgXCJXb2xmXCIsXG4gIFwiV29sZmZcIixcbiAgXCJXdWNrZXJ0XCIsXG4gIFwiV3Vuc2NoXCIsXG4gIFwiV3ltYW5cIixcbiAgXCJZb3N0XCIsXG4gIFwiWXVuZHRcIixcbiAgXCJaYm9uY2FrXCIsXG4gIFwiWmVtbGFrXCIsXG4gIFwiWmllbWFublwiLFxuICBcIlppZW1lXCIsXG4gIFwiWnVsYXVmXCJcbl07XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcIiN7cHJlZml4fSAje2ZpcnN0X25hbWV9ICN7bGFzdF9uYW1lfVwiLFxuICBcIiN7Zmlyc3RfbmFtZX0gI3tsYXN0X25hbWV9ICN7c3VmZml4fVwiLFxuICBcIiN7Zmlyc3RfbmFtZX0gI3tsYXN0X25hbWV9XCIsXG4gIFwiI3tmaXJzdF9uYW1lfSAje2xhc3RfbmFtZX1cIixcbiAgXCIje2ZpcnN0X25hbWV9ICN7bGFzdF9uYW1lfVwiLFxuICBcIiN7Zmlyc3RfbmFtZX0gI3tsYXN0X25hbWV9XCJcbl07XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcIk1yLlwiLFxuICBcIk1ycy5cIixcbiAgXCJNcy5cIixcbiAgXCJNaXNzXCIsXG4gIFwiRHIuXCJcbl07XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcIkpyLlwiLFxuICBcIlNyLlwiLFxuICBcIklcIixcbiAgXCJJSVwiLFxuICBcIklJSVwiLFxuICBcIklWXCIsXG4gIFwiVlwiLFxuICBcIk1EXCIsXG4gIFwiRERTXCIsXG4gIFwiUGhEXCIsXG4gIFwiRFZNXCJcbl07XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0ge1xuICBcImRlc2NyaXB0b3JcIjogW1xuICAgIFwiTGVhZFwiLFxuICAgIFwiU2VuaW9yXCIsXG4gICAgXCJEaXJlY3RcIixcbiAgICBcIkNvcnBvcmF0ZVwiLFxuICAgIFwiRHluYW1pY1wiLFxuICAgIFwiRnV0dXJlXCIsXG4gICAgXCJQcm9kdWN0XCIsXG4gICAgXCJOYXRpb25hbFwiLFxuICAgIFwiUmVnaW9uYWxcIixcbiAgICBcIkRpc3RyaWN0XCIsXG4gICAgXCJDZW50cmFsXCIsXG4gICAgXCJHbG9iYWxcIixcbiAgICBcIkN1c3RvbWVyXCIsXG4gICAgXCJJbnZlc3RvclwiLFxuICAgIFwiRHluYW1pY1wiLFxuICAgIFwiSW50ZXJuYXRpb25hbFwiLFxuICAgIFwiTGVnYWN5XCIsXG4gICAgXCJGb3J3YXJkXCIsXG4gICAgXCJJbnRlcm5hbFwiLFxuICAgIFwiSHVtYW5cIixcbiAgICBcIkNoaWVmXCIsXG4gICAgXCJQcmluY2lwYWxcIlxuICBdLFxuICBcImxldmVsXCI6IFtcbiAgICBcIlNvbHV0aW9uc1wiLFxuICAgIFwiUHJvZ3JhbVwiLFxuICAgIFwiQnJhbmRcIixcbiAgICBcIlNlY3VyaXR5XCIsXG4gICAgXCJSZXNlYXJjaFwiLFxuICAgIFwiTWFya2V0aW5nXCIsXG4gICAgXCJEaXJlY3RpdmVzXCIsXG4gICAgXCJJbXBsZW1lbnRhdGlvblwiLFxuICAgIFwiSW50ZWdyYXRpb25cIixcbiAgICBcIkZ1bmN0aW9uYWxpdHlcIixcbiAgICBcIlJlc3BvbnNlXCIsXG4gICAgXCJQYXJhZGlnbVwiLFxuICAgIFwiVGFjdGljc1wiLFxuICAgIFwiSWRlbnRpdHlcIixcbiAgICBcIk1hcmtldHNcIixcbiAgICBcIkdyb3VwXCIsXG4gICAgXCJEaXZpc2lvblwiLFxuICAgIFwiQXBwbGljYXRpb25zXCIsXG4gICAgXCJPcHRpbWl6YXRpb25cIixcbiAgICBcIk9wZXJhdGlvbnNcIixcbiAgICBcIkluZnJhc3RydWN0dXJlXCIsXG4gICAgXCJJbnRyYW5ldFwiLFxuICAgIFwiQ29tbXVuaWNhdGlvbnNcIixcbiAgICBcIldlYlwiLFxuICAgIFwiQnJhbmRpbmdcIixcbiAgICBcIlF1YWxpdHlcIixcbiAgICBcIkFzc3VyYW5jZVwiLFxuICAgIFwiTW9iaWxpdHlcIixcbiAgICBcIkFjY291bnRzXCIsXG4gICAgXCJEYXRhXCIsXG4gICAgXCJDcmVhdGl2ZVwiLFxuICAgIFwiQ29uZmlndXJhdGlvblwiLFxuICAgIFwiQWNjb3VudGFiaWxpdHlcIixcbiAgICBcIkludGVyYWN0aW9uc1wiLFxuICAgIFwiRmFjdG9yc1wiLFxuICAgIFwiVXNhYmlsaXR5XCIsXG4gICAgXCJNZXRyaWNzXCJcbiAgXSxcbiAgXCJqb2JcIjogW1xuICAgIFwiU3VwZXJ2aXNvclwiLFxuICAgIFwiQXNzb2NpYXRlXCIsXG4gICAgXCJFeGVjdXRpdmVcIixcbiAgICBcIkxpYWlzb25cIixcbiAgICBcIk9mZmljZXJcIixcbiAgICBcIk1hbmFnZXJcIixcbiAgICBcIkVuZ2luZWVyXCIsXG4gICAgXCJTcGVjaWFsaXN0XCIsXG4gICAgXCJEaXJlY3RvclwiLFxuICAgIFwiQ29vcmRpbmF0b3JcIixcbiAgICBcIkFkbWluaXN0cmF0b3JcIixcbiAgICBcIkFyY2hpdGVjdFwiLFxuICAgIFwiQW5hbHlzdFwiLFxuICAgIFwiRGVzaWduZXJcIixcbiAgICBcIlBsYW5uZXJcIixcbiAgICBcIk9yY2hlc3RyYXRvclwiLFxuICAgIFwiVGVjaG5pY2lhblwiLFxuICAgIFwiRGV2ZWxvcGVyXCIsXG4gICAgXCJQcm9kdWNlclwiLFxuICAgIFwiQ29uc3VsdGFudFwiLFxuICAgIFwiQXNzaXN0YW50XCIsXG4gICAgXCJGYWNpbGl0YXRvclwiLFxuICAgIFwiQWdlbnRcIixcbiAgICBcIlJlcHJlc2VudGF0aXZlXCIsXG4gICAgXCJTdHJhdGVnaXN0XCJcbiAgXVxufTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiIyMjLSMjIy0jIyMjXCIsXG4gIFwiKCMjIykgIyMjLSMjIyNcIixcbiAgXCIxLSMjIy0jIyMtIyMjI1wiLFxuICBcIiMjIy4jIyMuIyMjI1wiLFxuICBcIiMjIy0jIyMtIyMjI1wiLFxuICBcIigjIyMpICMjIy0jIyMjXCIsXG4gIFwiMS0jIyMtIyMjLSMjIyNcIixcbiAgXCIjIyMuIyMjLiMjIyNcIixcbiAgXCIjIyMtIyMjLSMjIyMgeCMjI1wiLFxuICBcIigjIyMpICMjIy0jIyMjIHgjIyNcIixcbiAgXCIxLSMjIy0jIyMtIyMjIyB4IyMjXCIsXG4gIFwiIyMjLiMjIy4jIyMjIHgjIyNcIixcbiAgXCIjIyMtIyMjLSMjIyMgeCMjIyNcIixcbiAgXCIoIyMjKSAjIyMtIyMjIyB4IyMjI1wiLFxuICBcIjEtIyMjLSMjIy0jIyMjIHgjIyMjXCIsXG4gIFwiIyMjLiMjIy4jIyMjIHgjIyMjXCIsXG4gIFwiIyMjLSMjIy0jIyMjIHgjIyMjI1wiLFxuICBcIigjIyMpICMjIy0jIyMjIHgjIyMjI1wiLFxuICBcIjEtIyMjLSMjIy0jIyMjIHgjIyMjI1wiLFxuICBcIiMjIy4jIyMuIyMjIyB4IyMjIyNcIlxuXTtcbiIsInZhciBwaG9uZV9udW1iZXIgPSB7fTtcbm1vZHVsZVsnZXhwb3J0cyddID0gcGhvbmVfbnVtYmVyO1xucGhvbmVfbnVtYmVyLmZvcm1hdHMgPSByZXF1aXJlKFwiLi9mb3JtYXRzXCIpO1xuIiwidmFyIHN5c3RlbSA9IHt9O1xubW9kdWxlWydleHBvcnRzJ10gPSBzeXN0ZW07XG5zeXN0ZW0ubWltZVR5cGVzID0gcmVxdWlyZShcIi4vbWltZVR5cGVzXCIpOyIsIi8qXG5cblRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXG5Db3B5cmlnaHQgKGMpIDIwMTQgSm9uYXRoYW4gT25nIG1lQGpvbmdsZWJlcnJ5LmNvbVxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG5vZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG5pbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG50byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG5jb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG5hbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG5USEUgU09GVFdBUkUuXG5cbkRlZmluaXRpb25zIGZyb20gbWltZS1kYiB2MS4yMS4wXG5Gb3IgdXBkYXRlcyBjaGVjazogaHR0cHM6Ly9naXRodWIuY29tL2pzaHR0cC9taW1lLWRiL2Jsb2IvbWFzdGVyL2RiLmpzb25cblxuKi9cblxubW9kdWxlWydleHBvcnRzJ10gPSB7XG4gIFwiYXBwbGljYXRpb24vMWQtaW50ZXJsZWF2ZWQtcGFyaXR5ZmVjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uLzNncGRhc2gtcW9lLXJlcG9ydCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vM2dwcC1pbXMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2EybFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hY3RpdmVtZXNzYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2FsdG8tY29zdG1hcCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYWx0by1jb3N0bWFwZmlsdGVyK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hbHRvLWRpcmVjdG9yeStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYWx0by1lbmRwb2ludGNvc3QranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2FsdG8tZW5kcG9pbnRjb3N0cGFyYW1zK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hbHRvLWVuZHBvaW50cHJvcCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYWx0by1lbmRwb2ludHByb3BwYXJhbXMranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2FsdG8tZXJyb3IranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2FsdG8tbmV0d29ya21hcCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYWx0by1uZXR3b3JrbWFwZmlsdGVyK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hbWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYW5kcmV3LWluc2V0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZXpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hcHBsZWZpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYXBwbGl4d2FyZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hdGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYXRmeFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hdG9tK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXRvbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2F0b21jYXQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXRvbWNhdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2F0b21kZWxldGVkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9hdG9taWNtYWlsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2F0b21zdmMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXRvbXN2Y1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2F0eG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2F1dGgtcG9saWN5K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9iYWNuZXQteGRkK3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9iYXRjaC1zbXRwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Jkb2NcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJiZG9jXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vYmVlcCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2FsZW5kYXIranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NhbGVuZGFyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jYWxsLWNvbXBsZXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2Fscy0xODQwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Nib3JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2NtcCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2N4bWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2N4bWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jZGZ4K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jZG1pLWNhcGFiaWxpdHlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjZG1pYVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NkbWktY29udGFpbmVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2RtaWNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jZG1pLWRvbWFpblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNkbWlkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2RtaS1vYmplY3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjZG1pb1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NkbWktcXVldWVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjZG1pcVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NkbmlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY2VhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NlYS0yMDE4K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jZWxsbWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Nmd1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jbXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY25ycCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY29hcC1ncm91cCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY29tbW9uZ3JvdW5kXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2NvbmZlcmVuY2UtaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY3BsK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jc3JhdHRyc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jc3RhK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9jc3RhZGF0YSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY3N2bStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY3Utc2VlbWVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImN1XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vY3liZXJjYXNoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2RhcnRcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kYXNoK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1kcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Rhc2hkZWx0YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kYXZtb3VudCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkYXZtb3VudFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2RjYS1yZnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZGNkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2RlYy1keFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kaWFsb2ctaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZGljb21cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZGlpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2RpdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kbnNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZG9jYm9vayt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRia1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2Rza3BwK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kc3NjK2RlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRzc2NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9kc3NjK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhkc3NjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZHZjc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlY21hXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZWRpLWNvbnNlbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZWRpLXgxMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9lZGlmYWN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VtZXJnZW5jeWNhbGxkYXRhLmNvbW1lbnQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VtZXJnZW5jeWNhbGxkYXRhLmRldmljZWluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VtZXJnZW5jeWNhbGxkYXRhLnByb3ZpZGVyaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZW1lcmdlbmN5Y2FsbGRhdGEuc2VydmljZWluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VtZXJnZW5jeWNhbGxkYXRhLnN1YnNjcmliZXJpbmZvK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9lbW1hK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImVtbWFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9lbW90aW9ubWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VuY2FwcnRwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2VwcCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZXB1Yit6aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlcHViXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZXNob3BcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZXhpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZXhpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZmFzdGluZm9zZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZmFzdHNvYXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZmR0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9maXRzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2ZvbnQtc2ZudFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9mb250LXRkcGZyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGZyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vZm9udC13b2ZmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid29mZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2ZvbnQtd29mZjJcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3b2ZmMlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2ZyYW1ld29yay1hdHRyaWJ1dGVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9nbWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnbWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9ncHgreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJncHhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9neGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImd4ZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2d6aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vaDIyNFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9oZWxkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9odHRwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2h5cGVyc3R1ZGlvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3RrXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vaWJlLWtleS1yZXF1ZXN0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9pYmUtcGtnLXJlcGx5K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9pYmUtcHAtZGF0YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9pZ2VzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2ltLWlzY29tcG9zaW5nK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9pbmRleFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9pbmRleC5jbWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vaW5kZXgub2JqXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2luZGV4LnJlc3BvbnNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2luZGV4LnZuZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9pbmttbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpbmtcIixcImlua21sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vaW90cFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9pcGZpeFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImlwZml4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vaXBwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2lzdXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vaXRzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9qYXZhLWFyY2hpdmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImphclwiLFwid2FyXCIsXCJlYXJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9qYXZhLXNlcmlhbGl6ZWQtb2JqZWN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZXJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9qYXZhLXZtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjbGFzc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2phdmFzY3JpcHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY2hhcnNldFwiOiBcIlVURi04XCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9qb3NlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2pvc2UranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2pyZCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vanNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqc29uXCIsXCJtYXBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9qc29uLXBhdGNoK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9qc29uLXNlcVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9qc29uNVwiOiB7XG4gICAgXCJleHRlbnNpb25zXCI6IFtcImpzb241XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vanNvbm1sK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianNvbm1sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vandrK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9qd2stc2V0K2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9qd3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24va3BtbC1yZXF1ZXN0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9rcG1sLXJlc3BvbnNlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9sZCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqc29ubGRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9saW5rLWZvcm1hdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9sb2FkLWNvbnRyb2wreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL2xvc3QreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibG9zdHhtbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL2xvc3RzeW5jK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9seGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWFjLWJpbmhleDQwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaHF4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWFjLWNvbXBhY3Rwcm9cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNwdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21hY3dyaXRlaWlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWFkcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtYWRzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWFuaWZlc3QranNvblwiOiB7XG4gICAgXCJjaGFyc2V0XCI6IFwiVVRGLThcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3ZWJtYW5pZmVzdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21hcmNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtcmNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYXJjeG1sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1yY3hcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYXRoZW1hdGljYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1hXCIsXCJuYlwiLFwibWJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYXRobWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWF0aG1sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWF0aG1sLWNvbnRlbnQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21hdGhtbC1wcmVzZW50YXRpb24reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21ibXMtYXNzb2NpYXRlZC1wcm9jZWR1cmUtZGVzY3JpcHRpb24reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21ibXMtZGVyZWdpc3Rlcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWJtcy1lbnZlbG9wZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWJtcy1tc2sreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21ibXMtbXNrLXJlc3BvbnNlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tYm1zLXByb3RlY3Rpb24tZGVzY3JpcHRpb24reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21ibXMtcmVjZXB0aW9uLXJlcG9ydCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWJtcy1yZWdpc3Rlcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWJtcy1yZWdpc3Rlci1yZXNwb25zZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWJtcy1zY2hlZHVsZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWJtcy11c2VyLXNlcnZpY2UtZGVzY3JpcHRpb24reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21ib3hcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtYm94XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWVkaWEtcG9saWN5LWRhdGFzZXQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21lZGlhX2NvbnRyb2wreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21lZGlhc2VydmVyY29udHJvbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtc2NtbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21lcmdlLXBhdGNoK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tZXRhbGluayt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1ldGFsaW5rXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWV0YWxpbms0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1ldGE0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWV0cyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtZXRzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbWY0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21pa2V5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21vZHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibW9kc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL21vc3Mta2V5c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tb3NzLXNpZ25hdHVyZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tb3Nza2V5LWRhdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbW9zc2tleS1yZXF1ZXN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21wMjFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtMjFcIixcIm1wMjFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tcDRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtcDRzXCIsXCJtNHBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tcGVnNC1nZW5lcmljXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21wZWc0LWlvZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9tcGVnNC1pb2QteG10XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21yYi1jb25zdW1lcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbXJiLXB1Ymxpc2greG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21zYy1pdnIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL21zYy1taXhlcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbXN3b3JkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZG9jXCIsXCJkb3RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9teGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJteGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9uYXNkYXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL25ld3MtY2hlY2tncm91cHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbmV3cy1ncm91cGluZm9cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbmV3cy10cmFuc21pc3Npb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vbmxzbWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL25zc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9vY3NwLXJlcXVlc3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vb2NzcC1yZXNwb25zZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJiaW5cIixcImRtc1wiLFwibHJmXCIsXCJtYXJcIixcInNvXCIsXCJkaXN0XCIsXCJkaXN0elwiLFwicGtnXCIsXCJicGtcIixcImR1bXBcIixcImVsY1wiLFwiZGVwbG95XCIsXCJleGVcIixcImRsbFwiLFwiZGViXCIsXCJkbWdcIixcImlzb1wiLFwiaW1nXCIsXCJtc2lcIixcIm1zcFwiLFwibXNtXCIsXCJidWZmZXJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9vZGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvZGFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9vZHhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vb2VicHMtcGFja2FnZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvcGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9vZ2dcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvZ3hcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9vbWRvYyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9tZG9jXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vb25lbm90ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib25ldG9jXCIsXCJvbmV0b2MyXCIsXCJvbmV0bXBcIixcIm9uZXBrZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL294cHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJveHBzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcDJwLW92ZXJsYXkreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Bhcml0eWZlY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wYXRjaC1vcHMtZXJyb3IreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGVyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcGRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGRmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcGR4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BncC1lbmNyeXB0ZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwZ3BcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wZ3Ata2V5c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wZ3Atc2lnbmF0dXJlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXNjXCIsXCJzaWdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9waWNzLXJ1bGVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwcmZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9waWRmK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9waWRmLWRpZmYreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BrY3MxMFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInAxMFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BrY3MxMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wa2NzNy1taW1lXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicDdtXCIsXCJwN2NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wa2NzNy1zaWduYXR1cmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwN3NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wa2NzOFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInA4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcGtpeC1hdHRyLWNlcnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BraXgtY2VydFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNlclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BraXgtY3JsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY3JsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcGtpeC1wa2lwYXRoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGtpcGF0aFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3BraXhjbXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwa2lcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wbHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGxzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcG9jLXNldHRpbmdzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wb3N0c2NyaXB0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhaVwiLFwiZXBzXCIsXCJwc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Byb3ZlbmFuY2UreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Bycy5hbHZlc3RyYW5kLnRpdHJheC1zaGVldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9wcnMuY3d3XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY3d3XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcHJzLmhwdWIremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Bycy5ucHJlbmRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcHJzLnBsdWNrZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcHJzLnJkZi14bWwtY3J5cHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcHJzLnhzZit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcHNrYyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwc2tjeG1sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcXNpZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9yYXB0b3JmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcmRhcCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcmRmK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmRmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcmVnaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyaWZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9yZWxheC1uZy1jb21wYWN0LXN5bnRheFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJuY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3JlbW90ZS1wcmludGluZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9yZXB1dG9uK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9yZXNvdXJjZS1saXN0cyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJybFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Jlc291cmNlLWxpc3RzLWRpZmYreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmxkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcmZjK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9yaXNjb3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcmxtaSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcmxzLXNlcnZpY2VzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcnBraS1naG9zdGJ1c3RlcnNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnYnJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9ycGtpLW1hbmlmZXN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWZ0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcnBraS1yb2FcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyb2FcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9ycGtpLXVwZG93blwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9yc2QreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyc2RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9yc3MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJzc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3J0ZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicnRmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcnRwbG9vcGJhY2tcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vcnR4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NhbWxhc3NlcnRpb24reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NhbWxtZXRhZGF0YSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2JtbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzYm1sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2NhaXAreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NjaW0ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NjdnAtY3YtcmVxdWVzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNjcVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NjdnAtY3YtcmVzcG9uc2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzY3NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zY3ZwLXZwLXJlcXVlc3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzcHFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zY3ZwLXZwLXJlc3BvbnNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3BwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2RwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2RwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2VwK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZXAtZXhpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3Nlc3Npb24taW5mb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZXQtcGF5bWVudFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZXQtcGF5bWVudC1pbml0aWF0aW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2V0cGF5XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc2V0LXJlZ2lzdHJhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZXQtcmVnaXN0cmF0aW9uLWluaXRpYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZXRyZWdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zZ21sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NnbWwtb3Blbi1jYXRhbG9nXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NoZit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzaGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zaWV2ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zaW1wbGUtZmlsdGVyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zaW1wbGUtbWVzc2FnZS1zdW1tYXJ5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NpbXBsZXN5bWJvbGNvbnRhaW5lclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zbWlsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NtaWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic21pXCIsXCJzbWlsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc21wdGUzMzZtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NvYXArZmFzdGluZm9zZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc29hcCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zcGFycWwtcXVlcnlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJycVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NwYXJxbC1yZXN1bHRzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNyeFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NwaXJpdHMtZXZlbnQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NxbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zcmdzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ3JhbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3NyZ3MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ3J4bWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zcnUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3J1XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vc3NkbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNzZGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi9zc21sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNzbWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90YW1wLWFwZXgtdXBkYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RhbXAtYXBleC11cGRhdGUtY29uZmlybVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90YW1wLWNvbW11bml0eS11cGRhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGFtcC1jb21tdW5pdHktdXBkYXRlLWNvbmZpcm1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGFtcC1lcnJvclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90YW1wLXNlcXVlbmNlLWFkanVzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90YW1wLXNlcXVlbmNlLWFkanVzdC1jb25maXJtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RhbXAtc3RhdHVzLXF1ZXJ5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RhbXAtc3RhdHVzLXJlc3BvbnNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RhbXAtdXBkYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RhbXAtdXBkYXRlLWNvbmZpcm1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGFyXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGVpK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRlaVwiLFwidGVpY29ycHVzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGhyYXVkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRmaVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3RpbWVzdGFtcC1xdWVyeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi90aW1lc3RhbXAtcmVwbHlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdGltZXN0YW1wZWQtZGF0YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRzZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3R0bWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3R2ZS10cmlnZ2VyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3VscGZlY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi91cmMtZ3Jwc2hlZXQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3VyYy1yZXNzaGVldCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdXJjLXRhcmdldGRlc2MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3VyYy11aXNvY2tldGRlc2MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZjYXJkK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92Y2FyZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdmVtbWlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdml2aWRlbmNlLnNjcmlwdGZpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC1wcm9zZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAtcHJvc2UtcGMzY2greG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLmFjY2Vzcy10cmFuc2Zlci1ldmVudHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLmJzZit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAubWlkLWNhbGwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLnBpYy1idy1sYXJnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBsYlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLnBpYy1idy1zbWFsbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBzYlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC4zZ3BwLnBpYy1idy12YXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwdmJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5zbXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAuc3J2Y2MtZXh0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5zcnZjYy1pbmZvK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcC5zdGF0ZS1hbmQtZXZlbnQtaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAudXNzZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAyLmJjbWNzaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLjNncHAyLnNtc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM2dwcDIudGNhcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRjYXBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuM20ucG9zdC1pdC1ub3Rlc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInB3blwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hY2NwYWMuc2ltcGx5LmFzb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFzb1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hY2NwYWMuc2ltcGx5LmltcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImltcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hY3Vjb2JvbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFjdVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hY3Vjb3JwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXRjXCIsXCJhY3V0Y1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5haXItYXBwbGljYXRpb24taW5zdGFsbGVyLXBhY2thZ2UremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhaXJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWRvYmUuZmxhc2gubW92aWVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFkb2JlLmZvcm1zY2VudHJhbC5mY2R0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZmNkdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5meHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmeHBcIixcImZ4cGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWRvYmUucGFydGlhbC11cGxvYWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFkb2JlLnhkcCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4ZHBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWRvYmUueGZkZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhmZGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWV0aGVyLmltcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWgtYmFyY29kZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWhlYWQuc3BhY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhaGVhZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5haXJ6aXAuZmlsZXNlY3VyZS5hemZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhemZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYWlyemlwLmZpbGVzZWN1cmUuYXpzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXpzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFtYXpvbi5lYm9va1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXp3XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFtZXJpY2FuZHluYW1pY3MuYWNjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWNjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFtaWdhLmFtaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFtaVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hbXVuZHNlbi5tYXplK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYW5kcm9pZC5wYWNrYWdlLWFyY2hpdmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFwa1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hbmtpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hbnNlci13ZWItY2VydGlmaWNhdGUtaXNzdWUtaW5pdGlhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNpaVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hbnNlci13ZWItZnVuZHMtdHJhbnNmZXItaW5pdGlhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZnRpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFudGl4LmdhbWUtY29tcG9uZW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXR4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFwYWNoZS50aHJpZnQuYmluYXJ5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hcGFjaGUudGhyaWZ0LmNvbXBhY3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFwYWNoZS50aHJpZnQuanNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXBpK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXBwbGUuaW5zdGFsbGVyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1wa2dcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXBwbGUubXBlZ3VybFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm0zdThcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXBwbGUucGtwYXNzXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGtwYXNzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmFyYXN0cmEuc3dpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hcmlzdGFuZXR3b3Jrcy5zd2lcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzd2lcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXJ0c3F1YXJlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5hc3RyYWVhLXNvZnR3YXJlLmlvdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpb3RhXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmF1ZGlvZ3JhcGhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhZXBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYXV0b3BhY2thZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmF2aXN0YXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5iYWxzYW1pcS5ibW1sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYmFsc2FtaXEuYm1wclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYmVraXR6dXItc3RlY2granNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5iaW9wYXgucmRmK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYmx1ZWljZS5tdWx0aXBhc3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtcG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYmx1ZXRvb3RoLmVwLm9vYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYmx1ZXRvb3RoLmxlLm9vYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuYm1pXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYm1pXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmJ1c2luZXNzb2JqZWN0c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJlcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jYWItanNjcmlwdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2Fub24tY3BkbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2Fub24tbGlwc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2VuZGlvLnRoaW5saW5jLmNsaWVudGNvbmZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNlbnR1cnktc3lzdGVtcy50Y3Bfc3RyZWFtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jaGVtZHJhdyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjZHhtbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jaGlwbnV0cy5rYXJhb2tlLW1tZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1tZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jaW5kZXJlbGxhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2R5XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNpcnBhY2suaXNkbi1leHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNpdGF0aW9uc3R5bGVzLnN0eWxlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2xheW1vcmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjbGFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2xvYW50by5ycDlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJycDlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2xvbmsuYzRncm91cFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImM0Z1wiLFwiYzRkXCIsXCJjNGZcIixcImM0cFwiLFwiYzR1XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNsdWV0cnVzdC5jYXJ0b21vYmlsZS1jb25maWdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjMTFhbWNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY2x1ZXRydXN0LmNhcnRvbW9iaWxlLWNvbmZpZy1wa2dcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjMTFhbXpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY29mZmVlc2NyaXB0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jb2xsZWN0aW9uK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY29sbGVjdGlvbi5kb2MranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jb2xsZWN0aW9uLm5leHQranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jb21tZXJjZS1iYXR0ZWxsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY29tbW9uc3BhY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjc3BcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY29udGFjdC5jbXNnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2RiY21zZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jb3Ntb2NhbGxlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNtY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jcmljay5jbGlja2VyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2xreFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jcmljay5jbGlja2VyLmtleWJvYXJkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2xra1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jcmljay5jbGlja2VyLnBhbGV0dGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjbGtwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNyaWNrLmNsaWNrZXIudGVtcGxhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjbGt0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNyaWNrLmNsaWNrZXIud29yZGJhbmtcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjbGt3XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmNyaXRpY2FsdG9vbHMud2JzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndic1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jdGMtcG9zbWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwbWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3RjdC53cyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmN1cHMtcGRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jdXBzLXBvc3RzY3JpcHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmN1cHMtcHBkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHBkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmN1cHMtcmFzdGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jdXBzLXJhd1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3VybFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuY3VybC5jYXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNhclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jdXJsLnBjdXJsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwY3VybFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5jeWFuLmRlYW4ucm9vdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmN5YmFua1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZGFydFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGFydFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kYXRhLXZpc2lvbi5yZHpcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyZHpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZGViaWFuLmJpbmFyeS1wYWNrYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kZWNlLmRhdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1dmZcIixcInV2dmZcIixcInV2ZFwiLFwidXZ2ZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kZWNlLnR0bWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widXZ0XCIsXCJ1dnZ0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRlY2UudW5zcGVjaWZpZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1dnhcIixcInV2dnhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZGVjZS56aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1dnpcIixcInV2dnpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZGVub3ZvLmZjc2VsYXlvdXQtbGlua1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZlX2xhdW5jaFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kZXNtdW1lLW1vdmllXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kaXItYmkucGxhdGUtZGwtbm9zdWZmaXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRtLmRlbGVnYXRpb24reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kbmFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkbmFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZG9jdW1lbnQranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kb2xieS5tbHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1scFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kb2xieS5tb2JpbGUuMVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZG9sYnkubW9iaWxlLjJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRvcmVtaXIuc2NvcmVjbG91ZC1iaW5hcnktZG9jdW1lbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRwZ3JhcGhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkcGdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHJlYW1mYWN0b3J5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGZhY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kcml2ZStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmRzLWtleXBvaW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJrcHh4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR0Zy5sb2NhbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHRnLmxvY2FsLmZsYXNoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kdGcubG9jYWwuaHRtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLmFpdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFpdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kdmIuZHZialwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLmVzZ2NvbnRhaW5lclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLmlwZGNkZnRub3RpZmFjY2Vzc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLmlwZGNlc2dhY2Nlc3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5pcGRjZXNnYWNjZXNzMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLmlwZGNlc2dwZGRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5pcGRjcm9hbWluZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLmlwdHYuYWxmZWMtYmFzZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLmlwdHYuYWxmZWMtZW5oYW5jZW1lbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5ub3RpZi1hZ2dyZWdhdGUtcm9vdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5ub3RpZi1jb250YWluZXIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5kdmIubm90aWYtZ2VuZXJpYyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5ub3RpZi1pYS1tc2dsaXN0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLm5vdGlmLWlhLXJlZ2lzdHJhdGlvbi1yZXF1ZXN0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLm5vdGlmLWlhLXJlZ2lzdHJhdGlvbi1yZXNwb25zZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR2Yi5ub3RpZi1pbml0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLnBmclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHZiLnNlcnZpY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdmNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZHhyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5keW5hZ2VvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ2VvXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmR6clwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZWFzeWthcmFva2UuY2RnZG93bmxvYWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmVjZGlzLXVwZGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZWNvd2luLmNoYXJ0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWFnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmVjb3dpbi5maWxlcmVxdWVzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZWNvd2luLmZpbGV1cGRhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmVjb3dpbi5zZXJpZXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmVjb3dpbi5zZXJpZXNyZXF1ZXN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lY293aW4uc2VyaWVzdXBkYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lbWNsaWVudC5hY2Nlc3NyZXF1ZXN0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZW5saXZlblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm5tbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lbnBoYXNlLmVudm95XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lcHJpbnRzLmRhdGEreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lcHNvbi5lc2ZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlc2ZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXBzb24ubXNmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXNmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmVwc29uLnF1aWNrYW5pbWVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJxYW1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXBzb24uc2FsdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNsdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lcHNvbi5zc2ZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzc2ZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXJpY3Nzb24ucXVpY2tjYWxsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lc3ppZ25vMyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlczNcIixcImV0M1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLmFvYyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kuYXNpYy1lK3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS5hc2ljLXMremlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLmN1Zyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kuaXB0dmNvbW1hbmQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLmlwdHZkaXNjb3ZlcnkreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLmlwdHZwcm9maWxlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS5pcHR2c2FkLWJjK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS5pcHR2c2FkLWNvZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kuaXB0dnNhZC1ucHZyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS5pcHR2c2VydmljZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kuaXB0dnN5bmMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLmlwdHZ1ZXByb2ZpbGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLm1jaWQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLm1oZWc1XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLm92ZXJsb2FkLWNvbnRyb2wtcG9saWN5LWRhdGFzZXQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLnBzdG4reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLnNjaSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV0c2kuc2ltc2VydnMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLnRpbWVzdGFtcC10b2tlblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZXRzaS50c2wreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ldHNpLnRzbC5kZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmV1ZG9yYS5kYXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lenBpeC1hbGJ1bVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImV6MlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5lenBpeC1wYWNrYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZXozXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmYtc2VjdXJlLm1vYmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZmFzdGNvcHktZGlzay1pbWFnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZmRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZmRmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZkc24ubXNlZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtc2VlZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mZHNuLnNlZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZWVkXCIsXCJkYXRhbGVzc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mZnNuc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZmlsbWl0LnpmY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZmludHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZpcmVtb25rZXlzLmNsb3VkY2VsbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZmxvZ3JhcGhpdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdwaFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mbHV4dGltZS5jbGlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZnRjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZvbnQtZm9udGZvcmdlLXNmZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnJhbWVtYWtlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZtXCIsXCJmcmFtZVwiLFwibWFrZXJcIixcImJvb2tcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnJvZ2Fucy5mbmNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmbmNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnJvZ2Fucy5sdGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJsdGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnNjLndlYmxhdW5jaFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZzY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdWppdHN1Lm9hc3lzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2FzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1aml0c3Uub2FzeXMyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2EyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1aml0c3Uub2FzeXMzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2EzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1aml0c3Uub2FzeXNncFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZnNVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdWppdHN1Lm9hc3lzcHJzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYmgyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1aml4ZXJveC5hcnQtZXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1aml4ZXJveC5hcnQ0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdWppeGVyb3guZGRkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGRkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1aml4ZXJveC5kb2N1d29ya3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4ZHdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnVqaXhlcm94LmRvY3V3b3Jrcy5iaW5kZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4YmRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZnVqaXhlcm94LmRvY3V3b3Jrcy5jb250YWluZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmZ1aml4ZXJveC5oYnBsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdXQtbWlzbmV0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5mdXp6eXNoZWV0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZnpzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdlbm9tYXRpeC50dXhlZG9cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0eGRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ2VvK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ2VvY3ViZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdlb2dlYnJhLmZpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnZ2JcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ2VvZ2VicmEudG9vbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdndFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nZW9tZXRyeS1leHBsb3JlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdleFwiLFwiZ3JlXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdlb25leHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJneHRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ2VvcGxhblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImcyd1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nZW9zcGFjZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImczd1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nZXJiZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdsb2JhbHBsYXRmb3JtLmNhcmQtY29udGVudC1tZ3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdsb2JhbHBsYXRmb3JtLmNhcmQtY29udGVudC1tZ3QtcmVzcG9uc2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdteFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdteFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5kb2N1bWVudFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdkb2NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMucHJlc2VudGF0aW9uXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ3NsaWRlc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5zcHJlYWRzaGVldFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdzaGVldFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtZWFydGgua21sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wia21sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdvb2dsZS1lYXJ0aC5rbXpcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJrbXpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ292LnNrLmUtZm9ybSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdvdi5zay5lLWZvcm0remlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5nb3Yuc2sueG1sZGF0YWNvbnRhaW5lcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdyYWZlcVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdxZlwiLFwiZ3FzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdyaWRtcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWFjY291bnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnYWNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWhlbHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnaGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWlkZW50aXR5LW1lc3NhZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnaW1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLWluamVjdG9yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ3J2XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmdyb292ZS10b29sLW1lc3NhZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJndG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLXRvb2wtdGVtcGxhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0cGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuZ3Jvb3ZlLXZjYXJkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widmNnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmhhbCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmhhbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJoYWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaGFuZGhlbGQtZW50ZXJ0YWlubWVudCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ6bW1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaGJjaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhiY2lcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaGNsLWJpcmVwb3J0c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaGVyb2t1K2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaGhlLmxlc3Nvbi1wbGF5ZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJsZXNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaHAtaHBnbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhwZ2xcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaHAtaHBpZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhwaWRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaHAtaHBzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaHBzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmhwLWpseXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqbHRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaHAtcGNsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGNsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmhwLXBjbHhsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGNseGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaHR0cGhvbmVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmh5ZHJvc3RhdGl4LnNvZi1kYXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2ZkLWhkc3R4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmh5cGVyZHJpdmUranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5oem4tM2QtY3Jvc3N3b3JkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pYm0uYWZwbGluZWRhdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmlibS5lbGVjdHJvbmljLW1lZGlhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pYm0ubWluaXBheVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1weVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pYm0ubW9kY2FwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWZwXCIsXCJsaXN0YWZwXCIsXCJsaXN0MzgyMFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pYm0ucmlnaHRzLW1hbmFnZW1lbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpcm1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaWJtLnNlY3VyZS1jb250YWluZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pY2Nwcm9maWxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaWNjXCIsXCJpY21cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaWVlZS4xOTA1XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pZ2xvYWRlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImlnbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbW1lcnZpc2lvbi1pdnBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpdnBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW1tZXJ2aXNpb24taXZ1XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaXZ1XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmltcy5pbXNjY3YxcDFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmltcy5pbXNjY3YxcDJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmltcy5pbXNjY3YxcDNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmltcy5saXMudjIucmVzdWx0K2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW1zLmx0aS52Mi50b29sY29uc3VtZXJwcm9maWxlK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW1zLmx0aS52Mi50b29scHJveHkranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbXMubHRpLnYyLnRvb2xwcm94eS5pZCtqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmltcy5sdGkudjIudG9vbHNldHRpbmdzK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW1zLmx0aS52Mi50b29sc2V0dGluZ3Muc2ltcGxlK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW5mb3JtZWRjb250cm9sLnJtcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmluZm9ybWl4LXZpc2lvbmFyeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW5mb3RlY2gucHJvamVjdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW5mb3RlY2gucHJvamVjdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmlubm9wYXRoLndhbXAubm90aWZpY2F0aW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbnNvcnMuaWdtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaWdtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmludGVyY29uLmZvcm1uZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4cHdcIixcInhweFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbnRlcmdlb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImkyZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pbnRlcnRydXN0LmRpZ2lib3hcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmludGVydHJ1c3Qubm5jcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW50dS5xYm9cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJxYm9cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaW50dS5xZnhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJxZnhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaXB0Yy5nMi5jYXRhbG9naXRlbSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmlwdGMuZzIuY29uY2VwdGl0ZW0reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pcHRjLmcyLmtub3dsZWRnZWl0ZW0reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pcHRjLmcyLm5ld3NpdGVtK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaXB0Yy5nMi5uZXdzbWVzc2FnZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmlwdGMuZzIucGFja2FnZWl0ZW0reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pcHRjLmcyLnBsYW5uaW5naXRlbSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmlwdW5wbHVnZ2VkLnJjcHJvZmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJjcHJvZmlsZVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pcmVwb3NpdG9yeS5wYWNrYWdlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImlycFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5pcy14cHJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4cHJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuaXNhYy5mY3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmY3NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuamFtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiamFtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmphcGFubmV0LWRpcmVjdG9yeS1zZXJ2aWNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5qYXBhbm5ldC1qcG5zdG9yZS13YWtldXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmphcGFubmV0LXBheW1lbnQtd2FrZXVwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5qYXBhbm5ldC1yZWdpc3RyYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmphcGFubmV0LXJlZ2lzdHJhdGlvbi13YWtldXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmphcGFubmV0LXNldHN0b3JlLXdha2V1cFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuamFwYW5uZXQtdmVyaWZpY2F0aW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5qYXBhbm5ldC12ZXJpZmljYXRpb24td2FrZXVwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5qY3AuamF2YW1lLm1pZGxldC1ybXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJybXNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuamlzcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImppc3BcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuam9vc3Quam9kYS1hcmNoaXZlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiam9kYVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5qc2suaXNkbi1uZ25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmthaG9vdHpcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJrdHpcIixcImt0clwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5rZGUua2FyYm9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wia2FyYm9uXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmtkZS5rY2hhcnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjaHJ0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmtkZS5rZm9ybXVsYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImtmb1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5rZGUua2l2aW9cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmbHdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQua2RlLmtvbnRvdXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJrb25cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQua2RlLmtwcmVzZW50ZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJrcHJcIixcImtwdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5rZGUua3NwcmVhZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImtzcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5rZGUua3dvcmRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJrd2RcIixcImt3dFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5rZW5hbWVhYXBwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaHRrZVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5raWRzcGlyYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJraWFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQua2luYXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJrbmVcIixcImtucFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5rb2FuXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2twXCIsXCJza2RcIixcInNrdFwiLFwic2ttXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmtvZGFrLWRlc2NyaXB0b3JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzc2VcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubGFzLmxhcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJsYXN4bWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubGliZXJ0eS1yZXF1ZXN0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubGxhbWFncmFwaGljcy5saWZlLWJhbGFuY2UuZGVza3RvcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImxiZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5sbGFtYWdyYXBoaWNzLmxpZmUtYmFsYW5jZS5leGNoYW5nZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJsYmVcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubG90dXMtMS0yLTNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCIxMjNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubG90dXMtYXBwcm9hY2hcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhcHJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubG90dXMtZnJlZWxhbmNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHJlXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmxvdHVzLW5vdGVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibnNmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLmxvdHVzLW9yZ2FuaXplclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9yZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5sb3R1cy1zY3JlZW5jYW1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzY21cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubG90dXMtd29yZHByb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImx3cFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tYWNwb3J0cy5wb3J0cGtnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicG9ydHBrZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tYXBib3gtdmVjdG9yLXRpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1hcmxpbi5kcm0uYWN0aW9udG9rZW4reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tYXJsaW4uZHJtLmNvbmZ0b2tlbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1hcmxpbi5kcm0ubGljZW5zZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1hcmxpbi5kcm0ubWRjZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubWFzb24ranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tYXhtaW5kLm1heG1pbmQtZGJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1jZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1jZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tZWRjYWxjZGF0YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1jMVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tZWRpYXN0YXRpb24uY2RrZXlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjZGtleVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tZXJpZGlhbi1zbGluZ3Nob3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1mZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtd2ZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubWZtcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1mbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5taWNybytqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1pY3JvZ3JhZnguZmxvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZmxvXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1pY3JvZ3JhZnguaWd4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaWd4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1pY3Jvc29mdC5wb3J0YWJsZS1leGVjdXRhYmxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5taWVsZStqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1pZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1pZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5taW5pc29mdC1ocDMwMDAtc2F2ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubWl0c3ViaXNoaS5taXN0eS1ndWFyZC50cnVzdHdlYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW9iaXVzLmRhZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRhZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tb2JpdXMuZGlzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGlzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1vYml1cy5tYmtcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtYmtcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW9iaXVzLm1xeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1xeVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tb2JpdXMubXNsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXNsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1vYml1cy5wbGNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwbGNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW9iaXVzLnR4ZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInR4ZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tb3BodW4uYXBwbGljYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtcG5cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW9waHVuLmNlcnRpZmljYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXBjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1vdG9yb2xhLmZsZXhzdWl0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW90b3JvbGEuZmxleHN1aXRlLmFkc2lcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1vdG9yb2xhLmZsZXhzdWl0ZS5maXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1vdG9yb2xhLmZsZXhzdWl0ZS5nb3RhcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW90b3JvbGEuZmxleHN1aXRlLmttclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW90b3JvbGEuZmxleHN1aXRlLnR0Y1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW90b3JvbGEuZmxleHN1aXRlLndlbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW90b3JvbGEuaXBybVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubW96aWxsYS54dWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4dWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtM21mZG9jdW1lbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLWFydGdhbHJ5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2lsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLWFzZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtY2FiLWNvbXByZXNzZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjYWJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtY29sb3IuaWNjcHJvZmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhsc1wiLFwieGxtXCIsXCJ4bGFcIixcInhsY1wiLFwieGx0XCIsXCJ4bHdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuYWRkaW4ubWFjcm9lbmFibGVkLjEyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGxhbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5zaGVldC5iaW5hcnkubWFjcm9lbmFibGVkLjEyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGxzYlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC5zaGVldC5tYWNyb2VuYWJsZWQuMTJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4bHNtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnRlbXBsYXRlLm1hY3JvZW5hYmxlZC4xMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhsdG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtZm9udG9iamVjdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZW90XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLWh0bWxoZWxwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2htXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLWltc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImltc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1scm1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJscm1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtb2ZmaWNlLmFjdGl2ZXgreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1vZmZpY2V0aGVtZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRobXhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtb3BlbnR5cGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1wYWNrYWdlLm9iZnVzY2F0ZWQtb3BlbnR5cGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtcGtpLnNlY2NhdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2F0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXBraS5zdGxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN0bFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy1wbGF5cmVhZHkuaW5pdGlhdG9yK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBwdFwiLFwicHBzXCIsXCJwb3RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludC5hZGRpbi5tYWNyb2VuYWJsZWQuMTJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwcGFtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQucHJlc2VudGF0aW9uLm1hY3JvZW5hYmxlZC4xMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBwdG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludC5zbGlkZS5tYWNyb2VuYWJsZWQuMTJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzbGRtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQuc2xpZGVzaG93Lm1hY3JvZW5hYmxlZC4xMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBwc21cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludC50ZW1wbGF0ZS5tYWNyb2VuYWJsZWQuMTJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwb3RtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXByaW50ZGV2aWNlY2FwYWJpbGl0aWVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtcHJpbnRpbmcucHJpbnR0aWNrZXQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXByb2plY3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtcHBcIixcIm1wdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy10bmVmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy13aW5kb3dzLmRldmljZXBhaXJpbmdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXdpbmRvd3MubndwcmludGluZy5vb2JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXdpbmRvd3MucHJpbnRlcnBhaXJpbmdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXdpbmRvd3Mud3NkLm9vYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtd21kcm0ubGljLWNobGctcmVxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy13bWRybS5saWMtcmVzcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtd21kcm0ubWV0ZXItY2hsZy1yZXFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXdtZHJtLm1ldGVyLXJlc3BcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXdvcmQuZG9jdW1lbnQubWFjcm9lbmFibGVkLjEyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZG9jbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tcy13b3JkLnRlbXBsYXRlLm1hY3JvZW5hYmxlZC4xMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRvdG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtd29ya3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3cHNcIixcIndrc1wiLFwid2NtXCIsXCJ3ZGJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXMtd3BsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid3BsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zLXhwc2RvY3VtZW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieHBzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm1zYS1kaXNrLWltYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tc2VxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXNlcVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tc2lnblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXVsdGlhZC5jcmVhdG9yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tdWx0aWFkLmNyZWF0b3IuY2lmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tdXNpYy1uaWZmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tdXNpY2lhblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm11c1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5tdXZlZS5zdHlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1zdHlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubXluZmNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0YWdsZXRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubmNkLmNvbnRyb2xcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5jZC5yZWZlcmVuY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5lcnZhbmFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5ldGZweFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubmV1cm9sYW5ndWFnZS5ubHVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJubHVcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubmludGVuZG8ubml0cm8ucm9tXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5uaW50ZW5kby5zbmVzLnJvbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubml0ZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm50ZlwiLFwibml0ZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub2JsZW5ldC1kaXJlY3RvcnlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJubmRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9ibGVuZXQtc2VhbGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibm5zXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5vYmxlbmV0LXdlYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm5ud1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub2tpYS5jYXRhbG9nc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9raWEuY29ubWwrd2J4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5va2lhLmNvbm1sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9raWEuaXB0di5jb25maWcreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub2tpYS5pc2RzLXJhZGlvLXByZXNldHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5va2lhLmxhbmRtYXJrK3dieG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub2tpYS5sYW5kbWFyayt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5va2lhLmxhbmRtYXJrY29sbGVjdGlvbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5va2lhLm4tZ2FnZS5hYyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5va2lhLm4tZ2FnZS5kYXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibmdkYXRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9raWEubi1nYWdlLnN5bWJpYW4uaW5zdGFsbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm4tZ2FnZVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub2tpYS5uY2RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5va2lhLnBjZCt3YnhtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9raWEucGNkK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm9raWEucmFkaW8tcHJlc2V0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicnBzdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub2tpYS5yYWRpby1wcmVzZXRzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicnBzc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ub3ZhZGlnbS5lZG1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlZG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubm92YWRpZ20uZWR4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZWR4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm5vdmFkaWdtLmV4dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImV4dFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5udHQtbG9jYWwuY29udGVudC1zaGFyZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubnR0LWxvY2FsLmZpbGUtdHJhbnNmZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm50dC1sb2NhbC5vZ3dfcmVtb3RlLWFjY2Vzc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQubnR0LWxvY2FsLnNpcC10YV9yZW1vdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm50dC1sb2NhbC5zaXAtdGFfdGNwX3N0cmVhbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmNoYXJ0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2RjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5jaGFydC10ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm90Y1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZGF0YWJhc2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvZGJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmZvcm11bGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvZGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmZvcm11bGEtdGVtcGxhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvZGZ0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5ncmFwaGljc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9kZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZ3JhcGhpY3MtdGVtcGxhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvdGdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LmltYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2RpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5pbWFnZS10ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm90aVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQucHJlc2VudGF0aW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2RwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5wcmVzZW50YXRpb24tdGVtcGxhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvdHBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnNwcmVhZHNoZWV0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2RzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5zcHJlYWRzaGVldC10ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm90c1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQudGV4dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9kdFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQudGV4dC1tYXN0ZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvZG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHQtdGVtcGxhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvdHRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHQtd2ViXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib3RoXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9iblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2Z0bi5sMTBuK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2lwZi5jb250ZW50YWNjZXNzZG93bmxvYWQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vaXBmLmNvbnRlbnRhY2Nlc3NzdHJlYW1pbmcreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vaXBmLmNzcGctaGV4YmluYXJ5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vaXBmLmRhZS5zdmcreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vaXBmLmRhZS54aHRtbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9pcGYubWlwcHZjb250cm9sbWVzc2FnZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9pcGYucGFlLmdlbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2lwZi5zcGRpc2NvdmVyeSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9pcGYuc3BkbGlzdCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9pcGYudWVwcm9maWxlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub2lwZi51c2VycHJvZmlsZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9scGMtc3VnYXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4b1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEtc2N3cy1jb25maWdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS1zY3dzLWh0dHAtcmVxdWVzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLXNjd3MtaHR0cC1yZXNwb25zZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmJjYXN0LmFzc29jaWF0ZWQtcHJvY2VkdXJlLXBhcmFtZXRlcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5iY2FzdC5kcm0tdHJpZ2dlcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5iY2FzdC5pbWQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuYmNhc3QubHRrbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmJjYXN0Lm5vdGlmaWNhdGlvbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5iY2FzdC5wcm92aXNpb25pbmd0cmlnZ2VyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuYmNhc3Quc2dib290XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuYmNhc3Quc2dkZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5iY2FzdC5zZ2R1XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuYmNhc3Quc2ltcGxlLXN5bWJvbC1jb250YWluZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5iY2FzdC5zbWFydGNhcmQtdHJpZ2dlcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5iY2FzdC5zcHJvdit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5iY2FzdC5zdGttXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuY2FiLWFkZHJlc3MtYm9vayt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5jYWItZmVhdHVyZS1oYW5kbGVyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmNhYi1wY2MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEuY2FiLXN1YnMtaW52aXRlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmNhYi11c2VyLXByZWZzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmRjZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLmRjZGNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5kZDIreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGQyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5kcm0ucmlzZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5ncm91cC11c2FnZS1saXN0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLnBhbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5wb2MuZGV0YWlsZWQtcHJvZ3Jlc3MtcmVwb3J0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLnBvYy5maW5hbC1yZXBvcnQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vbWEucG9jLmdyb3Vwcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5wb2MuaW52b2NhdGlvbi1kZXNjcmlwdG9yK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLnBvYy5vcHRpbWl6ZWQtcHJvZ3Jlc3MtcmVwb3J0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hLnB1c2hcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS5zY2lkbS5tZXNzYWdlcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYS54Y2FwLWRpcmVjdG9yeSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYWRzLWVtYWlsK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub21hZHMtZmlsZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYWRzLWZvbGRlcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9tYWxvYy1zdXBsLWluaXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW5ibG94LmdhbWUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVuYmxveC5nYW1lLWJpbmFyeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbmV5ZS5vZWJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW5vZmZpY2VvcmcuZXh0ZW5zaW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJveHRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuY3VzdG9tLXByb3BlcnRpZXMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5jdXN0b214bWxwcm9wZXJ0aWVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuZHJhd2luZyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmRyYXdpbmdtbC5jaGFydCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmRyYXdpbmdtbC5jaGFydHNoYXBlcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LmRyYXdpbmdtbC5kaWFncmFtY29sb3JzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuZHJhd2luZ21sLmRpYWdyYW1kYXRhK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuZHJhd2luZ21sLmRpYWdyYW1sYXlvdXQreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5kcmF3aW5nbWwuZGlhZ3JhbXN0eWxlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuZXh0ZW5kZWQtcHJvcGVydGllcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLXRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5jb21tZW50YXV0aG9ycyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLmNvbW1lbnRzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuaGFuZG91dG1hc3Rlcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLm5vdGVzbWFzdGVyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwubm90ZXNzbGlkZSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnByZXNlbnRhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBwdHhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwucHJlc2VudGF0aW9uLm1haW4reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5wcmVzcHJvcHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNsZHhcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuc2xpZGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZWxheW91dCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnNsaWRlbWFzdGVyK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuc2xpZGVzaG93XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHBzeFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5zbGlkZXNob3cubWFpbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnNsaWRldXBkYXRlaW5mbyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnRhYmxlc3R5bGVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwudGFncyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwb3R4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnRlbXBsYXRlLm1haW4reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC52aWV3cHJvcHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLXRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLmNhbGNjaGFpbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuY2hhcnRzaGVldCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuY29tbWVudHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLmNvbm5lY3Rpb25zK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5kaWFsb2dzaGVldCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuZXh0ZXJuYWxsaW5rK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5waXZvdGNhY2hlZGVmaW5pdGlvbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwucGl2b3RjYWNoZXJlY29yZHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnBpdm90dGFibGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnF1ZXJ5dGFibGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnJldmlzaW9uaGVhZGVycyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwucmV2aXNpb25sb2creG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoYXJlZHN0cmluZ3MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGxzeFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0Lm1haW4reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0bWV0YWRhdGEreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnN0eWxlcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwudGFibGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnRhYmxlc2luZ2xlY2VsbHMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4bHR4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwudGVtcGxhdGUubWFpbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwudXNlcm5hbWVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC52b2xhdGlsZWRlcGVuZGVuY2llcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwud29ya3NoZWV0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQudGhlbWUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC50aGVtZW92ZXJyaWRlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQudm1sZHJhd2luZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC10ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5jb21tZW50cyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkb2N4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQuZ2xvc3NhcnkreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmRvY3VtZW50Lm1haW4reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmVuZG5vdGVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5mb250dGFibGUreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmZvb3Rlcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZm9vdG5vdGVzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5udW1iZXJpbmcreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLnNldHRpbmdzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5zdHlsZXMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLnRlbXBsYXRlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkb3R4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwudGVtcGxhdGUubWFpbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwud2Vic2V0dGluZ3MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1wYWNrYWdlLmNvcmUtcHJvcGVydGllcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLXBhY2thZ2UuZGlnaXRhbC1zaWduYXR1cmUteG1sc2lnbmF0dXJlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtcGFja2FnZS5yZWxhdGlvbnNoaXBzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3JhY2xlLnJlc291cmNlK2pzb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3JhbmdlLmluZGF0YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3NhLm5ldGRlcGxveVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3NnZW8ubWFwZ3VpZGUucGFja2FnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1ncFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5vc2dpLmJ1bmRsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3NnaS5kcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImRwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm9zZ2kuc3Vic3lzdGVtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZXNhXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLm90cHMuY3Qta2lwK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQub3hsaS5jb3VudGdyYXBoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wYWdlcmR1dHkranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wYWxtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGRiXCIsXCJwcWFcIixcIm9wcmNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucGFub3BseVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucGFvcyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBhb3MueG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBhd2FhZmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBhd1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wY29zXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wZy5mb3JtYXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdHJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucGcub3Nhc2xpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZWk2XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBpYWNjZXNzLmFwcGxpY2F0aW9uLWxpY2VuY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBpY3NlbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImVmaWZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucG1pLndpZGdldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndnXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBvYy5ncm91cC1hZHZlcnRpc2VtZW50K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucG9ja2V0bGVhcm5cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwbGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucG93ZXJidWlsZGVyNlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBiZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wb3dlcmJ1aWxkZXI2LXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBvd2VyYnVpbGRlcjdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBvd2VyYnVpbGRlcjctc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucG93ZXJidWlsZGVyNzVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnBvd2VyYnVpbGRlcjc1LXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnByZW1pbmV0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wcmV2aWV3c3lzdGVtcy5ib3hcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJib3hcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucHJvdGV1cy5tYWdhemluZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1nelwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wdWJsaXNoYXJlLWRlbHRhLXRyZWVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJxcHNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucHZpLnB0aWQxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHRpZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5wd2ctbXVsdGlwbGV4ZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnB3Zy14aHRtbC1wcmludCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnF1YWxjb21tLmJyZXctYXBwLXJlc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucXVhcmsucXVhcmt4cHJlc3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJxeGRcIixcInF4dFwiLFwicXdkXCIsXCJxd3RcIixcInF4bFwiLFwicXhiXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnF1b2JqZWN0LXF1b3hkb2N1bWVudFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFkaXN5cy5tb21sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFkaXN5cy5tc21sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFkaXN5cy5tc21sLWF1ZGl0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFkaXN5cy5tc21sLWF1ZGl0LWNvbmYreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yYWRpc3lzLm1zbWwtYXVkaXQtY29ubit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJhZGlzeXMubXNtbC1hdWRpdC1kaWFsb2creG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yYWRpc3lzLm1zbWwtYXVkaXQtc3RyZWFtK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFkaXN5cy5tc21sLWNvbmYreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yYWRpc3lzLm1zbWwtZGlhbG9nK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFkaXN5cy5tc21sLWRpYWxvZy1iYXNlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFkaXN5cy5tc21sLWRpYWxvZy1mYXgtZGV0ZWN0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFkaXN5cy5tc21sLWRpYWxvZy1mYXgtc2VuZHJlY3YreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yYWRpc3lzLm1zbWwtZGlhbG9nLWdyb3VwK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmFkaXN5cy5tc21sLWRpYWxvZy1zcGVlY2greG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yYWRpc3lzLm1zbWwtZGlhbG9nLXRyYW5zZm9ybSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJhaW5zdG9yLmRhdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJhcGlkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yZWFsdm5jLmJlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImJlZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yZWNvcmRhcmUubXVzaWN4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJteGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucmVjb3JkYXJlLm11c2ljeG1sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm11c2ljeG1sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJlbmxlYXJuLnJscHJpbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJpZy5jcnlwdG9ub3RlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY3J5cHRvbm90ZVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5yaW0uY29kXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjb2RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQucm4tcmVhbG1lZGlhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJybVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ybi1yZWFsbWVkaWEtdmJyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJybXZiXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnJvdXRlNjYubGluazY2K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImxpbms2NlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ycy0yNzR4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5ydWNrdXMuZG93bmxvYWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnMzc21zXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zYWlsaW5ndHJhY2tlci50cmFja1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNibS5jaWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNibS5taWQyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zY3JpYnVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWFsZWQuM2RmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWFsZWQuY3NmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWFsZWQuZG9jXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWFsZWQuZW1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWFsZWQubWh0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWFsZWQubmV0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWFsZWQucHB0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWFsZWQudGlmZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2VhbGVkLnhsc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2VhbGVkbWVkaWEuc29mdHNlYWwuaHRtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc2VhbGVkbWVkaWEuc29mdHNlYWwucGRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zZWVtYWlsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2VlXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNlbWFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZW1hXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNlbWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZW1kXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNlbWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZW1mXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNoYW5hLmluZm9ybWVkLmZvcm1kYXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaWZtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNoYW5hLmluZm9ybWVkLmZvcm10ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIml0cFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zaGFuYS5pbmZvcm1lZC5pbnRlcmNoYW5nZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImlpZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zaGFuYS5pbmZvcm1lZC5wYWNrYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaXBrXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNpbXRlY2gtbWluZG1hcHBlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInR3ZFwiLFwidHdkc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zaXJlbitqc29uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNtYWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtbWZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc21hcnQubm90ZWJvb2tcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNtYXJ0LnRlYWNoZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0ZWFjaGVyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNvZnR3YXJlNjAyLmZpbGxlci5mb3JtK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc29mdHdhcmU2MDIuZmlsbGVyLmZvcm0teG1sLXppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc29sZW50LnNka20reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2RrbVwiLFwic2RrZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zcG90ZmlyZS5keHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkeHBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3BvdGZpcmUuc2ZzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2ZzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNzcy1jb2RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNzcy1kdGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnNzcy1udGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi5jYWxjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZGNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3RhcmRpdmlzaW9uLmRyYXdcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNkYVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zdGFyZGl2aXNpb24uaW1wcmVzc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2RkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN0YXJkaXZpc2lvbi5tYXRoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzbWZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3RhcmRpdmlzaW9uLndyaXRlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2R3XCIsXCJ2b3JcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3RhcmRpdmlzaW9uLndyaXRlci1nbG9iYWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNnbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zdGVwbWFuaWEucGFja2FnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNtemlwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN0ZXBtYW5pYS5zdGVwY2hhcnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzbVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zdHJlZXQtc3RyZWFtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zdW4ud2FkbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwuY2FsY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3hjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwuY2FsYy50ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3RjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwuZHJhd1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3hkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwuZHJhdy50ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3RkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwuaW1wcmVzc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3hpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwuaW1wcmVzcy50ZW1wbGF0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3RpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwubWF0aFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3htXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN1bi54bWwud3JpdGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzeHdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC53cml0ZXIuZ2xvYmFsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzeGdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3VuLnhtbC53cml0ZXIudGVtcGxhdGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN0d1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zdXMtY2FsZW5kYXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdXNcIixcInN1c3BcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3ZkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3ZkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN3aWZ0dmlldy1pY3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN5bWJpYW4uaW5zdGFsbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2lzXCIsXCJzaXN4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN5bmNtbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4c21cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3luY21sLmRtK3dieG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYmRtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnN5bmNtbC5kbSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4ZG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3luY21sLmRtLm5vdGlmaWNhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3luY21sLmRtZGRmK3dieG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zeW5jbWwuZG1kZGYreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zeW5jbWwuZG10bmRzK3dieG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC5zeW5jbWwuZG10bmRzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuc3luY21sLmRzLm5vdGlmaWNhdGlvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudGFvLmludGVudC1tb2R1bGUtYXJjaGl2ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRhb1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC50Y3BkdW1wLnBjYXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwY2FwXCIsXCJjYXBcIixcImRtcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC50bWQubWVkaWFmbGV4LmFwaSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnRtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudG1vYmlsZS1saXZldHZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0bW9cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudHJpZC50cHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0cHRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudHJpc2NhcGUubXhzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXhzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnRydWVhcHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0cmFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudHJ1ZWRvY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudWJpc29mdC53ZWJwbGF5ZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVmZGxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1ZmRcIixcInVmZGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudWlxLnRoZW1lXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widXR6XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVtYWppblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInVtalwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC51bml0eVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInVuaXR5d2ViXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVvbWwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widW9tbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC51cGxhbmV0LmFsZXJ0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC51cGxhbmV0LmFsZXJ0LXdieG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC51cGxhbmV0LmJlYXJlci1jaG9pY2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVwbGFuZXQuYmVhcmVyLWNob2ljZS13YnhtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudXBsYW5ldC5jYWNoZW9wXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC51cGxhbmV0LmNhY2hlb3Atd2J4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVwbGFuZXQuY2hhbm5lbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudXBsYW5ldC5jaGFubmVsLXdieG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC51cGxhbmV0Lmxpc3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVwbGFuZXQubGlzdC13YnhtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudXBsYW5ldC5saXN0Y21kXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC51cGxhbmV0Lmxpc3RjbWQtd2J4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnVwbGFuZXQuc2lnbmFsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC51cmktbWFwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC52YWx2ZS5zb3VyY2UubWF0ZXJpYWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnZjeFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInZjeFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC52ZC1zdHVkeVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudmVjdG9yd29ya3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnZlcmltYXRyaXgudmNhc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudmlkc29mdC52aWRjb25mZXJlbmNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC52aXNpb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInZzZFwiLFwidnN0XCIsXCJ2c3NcIixcInZzd1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC52aXNpb25hcnlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2aXNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQudml2aWRlbmNlLnNjcmlwdGZpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnZzZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInZzZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53YXAuc2ljXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53YXAuc2xjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53YXAud2J4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3YnhtbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53YXAud21sY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndtbGNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud2FwLndtbHNjcmlwdGNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3bWxzY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53ZWJ0dXJib1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInd0YlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53ZmEucDJwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53ZmEud3NjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53aW5kb3dzLmRldmljZXBhaXJpbmdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLndtY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud21mLmJvb3RzdHJhcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud29sZnJhbS5tYXRoZW1hdGljYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud29sZnJhbS5tYXRoZW1hdGljYS5wYWNrYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53b2xmcmFtLnBsYXllclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm5icFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53b3JkcGVyZmVjdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndwZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC53cWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3cWRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud3JxLWhwMzAwMC1sYWJlbGxlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud3Quc3RmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3RmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnd2LmNzcCt3YnhtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud3YuY3NwK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQud3Yuc3NwK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueGFjbWwranNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC54YXJhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGFyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnhmZGxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4ZmRsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnhmZGwud2ViZm9ybVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueG1pK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueG1waWUuY3BrZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueG1waWUuZHBrZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueG1waWUucGxhblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueG1waWUucHBrZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueG1waWUueGxpbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueWFtYWhhLmh2LWRpY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImh2ZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEuaHYtc2NyaXB0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaHZzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnlhbWFoYS5odi12b2ljZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImh2cFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEub3BlbnNjb3JlZm9ybWF0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib3NmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdm5kLnlhbWFoYS5vcGVuc2NvcmVmb3JtYXQub3NmcHZnK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9zZnB2Z1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEucmVtb3RlLXNldHVwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEuc21hZi1hdWRpb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNhZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEuc21hZi1waHJhc2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzcGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQueWFtYWhhLnRocm91Z2gtbmduXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55YW1haGEudHVubmVsLXVkcGVuY2FwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55YW93ZW1lXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC55ZWxsb3dyaXZlci1jdXN0b20tbWVudVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNtcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3ZuZC56dWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ6aXJcIixcInppcnpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92bmQuenphenouZGVjayt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ6YXpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi92b2ljZXhtbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2eG1sXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vdnEtcnRjcHhyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3dhdGNoZXJpbmZvK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi93aG9pc3BwLXF1ZXJ5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3dob2lzcHAtcmVzcG9uc2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vd2lkZ2V0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid2d0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24vd2luaGxwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJobHBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi93aXRhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3dvcmRwZXJmZWN0NS4xXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3dzZGwreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid3NkbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3dzcG9saWN5K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndzcG9saWN5XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC03ei1jb21wcmVzc2VkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCI3elwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtYWJpd29yZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWJ3XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1hY2UtY29tcHJlc3NlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWNlXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1hbWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWFwcGxlLWRpc2tpbWFnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZG1nXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1hdXRob3J3YXJlLWJpblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWFiXCIsXCJ4MzJcIixcInUzMlwiLFwidm94XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1hdXRob3J3YXJlLW1hcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWFtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1hdXRob3J3YXJlLXNlZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWFzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1iY3Bpb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYmNwaW9cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWJkb2NcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJiZG9jXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1iaXR0b3JyZW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0b3JyZW50XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1ibG9yYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYmxiXCIsXCJibG9yYlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtYnppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYnpcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWJ6aXAyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJiejJcIixcImJvelwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtY2JyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjYnJcIixcImNiYVwiLFwiY2J0XCIsXCJjYnpcIixcImNiN1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtY2RsaW5rXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2Y2RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWNmcy1jb21wcmVzc2VkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjZnNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWNoYXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNoYXRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWNoZXNzLXBnblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGduXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1jaHJvbWUtZXh0ZW5zaW9uXCI6IHtcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY3J4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1jb2NvYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJuZ2lueFwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjY29cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWNvbXByZXNzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1jb25mZXJlbmNlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJuc2NcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWNwaW9cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNwaW9cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWNzaFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY3NoXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1kZWJcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1kZWJpYW4tcGFja2FnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGViXCIsXCJ1ZGViXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1kZ2MtY29tcHJlc3NlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGdjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1kaXJlY3RvclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGlyXCIsXCJkY3JcIixcImR4clwiLFwiY3N0XCIsXCJjY3RcIixcImN4dFwiLFwidzNkXCIsXCJmZ2RcIixcInN3YVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZG9vbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid2FkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1kdGJuY3greG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJuY3hcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWR0Ym9vayt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImR0YlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZHRicmVzb3VyY2UreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyZXNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWR2aVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZHZpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1lbnZveVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZXZ5XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1ldmFcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImV2YVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZm9udC1iZGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImJkZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZm9udC1kb3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWZvbnQtZnJhbWVtYWtlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZm9udC1naG9zdHNjcmlwdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ3NmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1mb250LWxpYmdyeFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZm9udC1saW51eC1wc2ZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBzZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZm9udC1vdGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib3RmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1mb250LXBjZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGNmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1mb250LXNuZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic25mXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1mb250LXNwZWVkb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZm9udC1zdW5vcy1uZXdzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1mb250LXR0ZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0dGZcIixcInR0Y1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZm9udC10eXBlMVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGZhXCIsXCJwZmJcIixcInBmbVwiLFwiYWZtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1mb250LXZmb250XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1mcmVlYXJjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhcmNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWZ1dHVyZXNwbGFzaFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3BsXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1nY2EtY29tcHJlc3NlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ2NhXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1nbHVseFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widWx4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1nbnVtZXJpY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ251bWVyaWNcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWdyYW1wcy14bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdyYW1wc1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZ3RhclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ3RhclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtZ3ppcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtaGRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJoZGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LWh0dHBkLXBocFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGhwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1pbnN0YWxsLWluc3RydWN0aW9uc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaW5zdGFsbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtaXNvOTY2MC1pbWFnZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaXNvXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1qYXZhLWFyY2hpdmUtZGlmZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJuZ2lueFwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqYXJkaWZmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1qYXZhLWpubHAtZmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiam5scFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtamF2YXNjcmlwdFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbGF0ZXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImxhdGV4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1sdWEtYnl0ZWNvZGVcIjoge1xuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJsdWFjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1semgtY29tcHJlc3NlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibHpoXCIsXCJsaGFcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1ha2VzZWxmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcIm5naW54XCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJ1blwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbWllXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtaWVcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1vYmlwb2NrZXQtZWJvb2tcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInByY1wiLFwibW9iaVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbXBlZ3VybFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1zLWFwcGxpY2F0aW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhcHBsaWNhdGlvblwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbXMtc2hvcnRjdXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImxua1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbXMtd21kXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3bWRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1zLXdtelwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid216XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tcy14YmFwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4YmFwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tc2FjY2Vzc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWRiXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tc2JpbmRlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2JkXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tc2NhcmRmaWxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjcmRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1zY2xpcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY2xwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tc2Rvcy1wcm9ncmFtXCI6IHtcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZXhlXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tc2Rvd25sb2FkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJleGVcIixcImRsbFwiLFwiY29tXCIsXCJiYXRcIixcIm1zaVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbXNtZWRpYXZpZXdcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm12YlwiLFwibTEzXCIsXCJtMTRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1zbWV0YWZpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndtZlwiLFwid216XCIsXCJlbWZcIixcImVtelwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbXNtb25leVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibW55XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tc3B1Ymxpc2hlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHViXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1tc3NjaGVkdWxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzY2RcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW1zdGVybWluYWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRybVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbXN3cml0ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid3JpXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1uZXRjZGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm5jXCIsXCJjZGZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LW5zLXByb3h5LWF1dG9jb25maWdcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBhY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtbnpiXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJuemJcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXBlcmxcIjoge1xuICAgIFwic291cmNlXCI6IFwibmdpbnhcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGxcIixcInBtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1waWxvdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJuZ2lueFwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwcmNcIixcInBkYlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtcGtjczEyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwMTJcIixcInBmeFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtcGtjczctY2VydGlmaWNhdGVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwN2JcIixcInNwY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtcGtjczctY2VydHJlcXJlc3BcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInA3clwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtcmFyLWNvbXByZXNzZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJhclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtcmVkaGF0LXBhY2thZ2UtbWFuYWdlclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJuZ2lueFwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJycG1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXJlc2VhcmNoLWluZm8tc3lzdGVtc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmlzXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1zZWFcIjoge1xuICAgIFwic291cmNlXCI6IFwibmdpbnhcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2VhXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1zaFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzaFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtc2hhclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2hhclwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzd2ZcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXNpbHZlcmxpZ2h0LWFwcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGFwXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1zcWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNxbFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtc3R1ZmZpdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2l0XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC1zdHVmZml0eFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2l0eFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtc3VicmlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzcnRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXN2NGNwaW9cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN2NGNwaW9cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXN2NGNyY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3Y0Y3JjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC10M3ZtLWltYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0M1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtdGFkc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ2FtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC10YXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1widGFyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC10Y2xcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRjbFwiLFwidGtcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXRleFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widGV4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC10ZXgtdGZtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0Zm1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXRleGluZm9cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRleGluZm9cIixcInRleGlcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXRnaWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9ialwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtdXN0YXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInVzdGFyXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC13YWlzLXNvdXJjZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3JjXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC13ZWItYXBwLW1hbmlmZXN0K2pzb25cIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndlYmFwcFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gteDUwOS1jYS1jZXJ0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkZXJcIixcImNydFwiLFwicGVtXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC14ZmlnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmaWdcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94LXhsaWZmK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGxmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC14cGluc3RhbGxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhwaVwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3gteHpcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInh6XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veC16bWFjaGluZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiejFcIixcInoyXCIsXCJ6M1wiLFwiejRcIixcIno1XCIsXCJ6NlwiLFwiejdcIixcIno4XCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veDQwMC1icFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94YWNtbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veGFtbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhhbWxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94Y2FwLWF0dCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veGNhcC1jYXBzK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94Y2FwLWRpZmYreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGRmXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veGNhcC1lbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veGNhcC1lcnJvcit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veGNhcC1ucyt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veGNvbi1jb25mZXJlbmNlLWluZm8reG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3hjb24tY29uZmVyZW5jZS1pbmZvLWRpZmYreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3hlbmMreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGVuY1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3hodG1sK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGh0bWxcIixcInhodFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3hodG1sLXZvaWNlK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieG1sXCIsXCJ4c2xcIixcInhzZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3htbC1kdGRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImR0ZFwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3htbC1leHRlcm5hbC1wYXJzZWQtZW50aXR5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImFwcGxpY2F0aW9uL3htbC1wYXRjaCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veG1wcCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veG9wK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieG9wXCJdXG4gIH0sXG4gIFwiYXBwbGljYXRpb24veHByb2MreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4cGxcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94c2x0K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhzbHRcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi94c3BmK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieHNwZlwiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3h2K3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm14bWxcIixcInhodm1sXCIsXCJ4dm1sXCIsXCJ4dm1cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi95YW5nXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieWFuZ1wiXVxuICB9LFxuICBcImFwcGxpY2F0aW9uL3lpbit4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ5aW5cIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi96aXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ6aXBcIl1cbiAgfSxcbiAgXCJhcHBsaWNhdGlvbi96bGliXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvLzFkLWludGVybGVhdmVkLXBhcml0eWZlY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby8zMmthZHBjbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby8zZ3BwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvLzNncHAyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2FjM1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9hZHBjbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYWRwXCJdXG4gIH0sXG4gIFwiYXVkaW8vYW1yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2Ftci13YlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9hbXItd2IrXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2FwdHhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vYXNjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2F0cmFjLWFkdmFuY2VkLWxvc3NsZXNzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2F0cmFjLXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vYXRyYWMzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2Jhc2ljXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXVcIixcInNuZFwiXVxuICB9LFxuICBcImF1ZGlvL2J2MTZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vYnYzMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9jbGVhcm1vZGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vY25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZGF0MTJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZGxzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2Rzci1lczIwMTEwOFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9kc3ItZXMyMDIwNTBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZHNyLWVzMjAyMjExXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2Rzci1lczIwMjIxMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9kdlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9kdmk0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2VhYzNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZW5jYXBydHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZXZyY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9ldnJjLXFjcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9ldnJjMFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9ldnJjMVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9ldnJjYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9ldnJjYjBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZXZyY2IxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2V2cmNud1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9ldnJjbncwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2V2cmNudzFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZXZyY3diXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2V2cmN3YjBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZXZyY3diMVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9ldnNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZndkcmVkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2c3MTEtMFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nNzE5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2c3MjJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZzcyMjFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZzcyM1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nNzI2LTE2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2c3MjYtMjRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZzcyNi0zMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nNzI2LTQwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2c3MjhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZzcyOVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nNzI5MVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nNzI5ZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nNzI5ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nc21cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vZ3NtLWVmclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9nc20taHItMDhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vaWxiY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9pcC1tcl92Mi41XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2lzYWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJhdWRpby9sMTZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vbDIwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL2wyNFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhdWRpby9sOFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9scGNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vbWlkaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWlkXCIsXCJtaWRpXCIsXCJrYXJcIixcInJtaVwiXVxuICB9LFxuICBcImF1ZGlvL21vYmlsZS14bWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vbXA0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXA0YVwiLFwibTRhXCJdXG4gIH0sXG4gIFwiYXVkaW8vbXA0YS1sYXRtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL21wYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9tcGEtcm9idXN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL21wZWdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtcGdhXCIsXCJtcDJcIixcIm1wMmFcIixcIm1wM1wiLFwibTJhXCIsXCJtM2FcIl1cbiAgfSxcbiAgXCJhdWRpby9tcGVnNC1nZW5lcmljXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL211c2VwYWNrXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwiYXVkaW8vb2dnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib2dhXCIsXCJvZ2dcIixcInNweFwiXVxuICB9LFxuICBcImF1ZGlvL29wdXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vcGFyaXR5ZmVjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3BjbWFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vcGNtYS13YlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9wY211XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3BjbXUtd2JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vcHJzLnNpZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9xY2VscFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9yYXB0b3JmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vcmVkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3J0cC1lbmMtYWVzY20xMjhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vcnRwLW1pZGlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vcnRwbG9vcGJhY2tcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vcnR4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3MzbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiczNtXCJdXG4gIH0sXG4gIFwiYXVkaW8vc2lsa1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2lsXCJdXG4gIH0sXG4gIFwiYXVkaW8vc212XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3Ntdi1xY3BcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vc212MFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby9zcC1taWRpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3NwZWV4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3QxNDBjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3QzOFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby90ZWxlcGhvbmUtZXZlbnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdG9uZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby91ZW1jbGlwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3VscGZlY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92ZHZpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3Ztci13YlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuM2dwcC5pdWZwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC40c2JcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmF1ZGlva296XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5jZWxwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5jaXNjby5uc2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmNtbGVzLnJhZGlvLWV2ZW50c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuY25zLmFucDFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmNucy5pbmYxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5kZWNlLmF1ZGlvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widXZhXCIsXCJ1dnZhXCJdXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmRpZ2l0YWwtd2luZHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlb2xcIl1cbiAgfSxcbiAgXCJhdWRpby92bmQuZGxuYS5hZHRzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5kb2xieS5oZWFhYy4xXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5kb2xieS5oZWFhYy4yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5kb2xieS5tbHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmRvbGJ5Lm1wc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQuZG9sYnkucGwyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5kb2xieS5wbDJ4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5kb2xieS5wbDJ6XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5kb2xieS5wdWxzZS4xXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5kcmFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkcmFcIl1cbiAgfSxcbiAgXCJhdWRpby92bmQuZHRzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZHRzXCJdXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmR0cy5oZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImR0c2hkXCJdXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmR2Yi5maWxlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5ldmVyYWQucGxqXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5obnMuYXVkaW9cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLmx1Y2VudC52b2ljZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImx2cFwiXVxuICB9LFxuICBcImF1ZGlvL3ZuZC5tcy1wbGF5cmVhZHkubWVkaWEucHlhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHlhXCJdXG4gIH0sXG4gIFwiYXVkaW8vdm5kLm5va2lhLm1vYmlsZS14bWZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLm5vcnRlbC52YmtcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLm51ZXJhLmVjZWxwNDgwMFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImVjZWxwNDgwMFwiXVxuICB9LFxuICBcImF1ZGlvL3ZuZC5udWVyYS5lY2VscDc0NzBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJlY2VscDc0NzBcIl1cbiAgfSxcbiAgXCJhdWRpby92bmQubnVlcmEuZWNlbHA5NjAwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZWNlbHA5NjAwXCJdXG4gIH0sXG4gIFwiYXVkaW8vdm5kLm9jdGVsLnNiY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQucWNlbHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiYXVkaW8vdm5kLnJoZXRvcmV4LjMya2FkcGNtXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC5yaXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyaXBcIl1cbiAgfSxcbiAgXCJhdWRpby92bmQucm4tcmVhbGF1ZGlvXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcImF1ZGlvL3ZuZC5zZWFsZWRtZWRpYS5zb2Z0c2VhbC5tcGVnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImF1ZGlvL3ZuZC52bXguY3ZzZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby92bmQud2F2ZVwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJhdWRpby92b3JiaXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiYXVkaW8vdm9yYmlzLWNvbmZpZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJhdWRpby93YXZcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3YXZcIl1cbiAgfSxcbiAgXCJhdWRpby93YXZlXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid2F2XCJdXG4gIH0sXG4gIFwiYXVkaW8vd2VibVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid2ViYVwiXVxuICB9LFxuICBcImF1ZGlvL3gtYWFjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhYWNcIl1cbiAgfSxcbiAgXCJhdWRpby94LWFpZmZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImFpZlwiLFwiYWlmZlwiLFwiYWlmY1wiXVxuICB9LFxuICBcImF1ZGlvL3gtY2FmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjYWZcIl1cbiAgfSxcbiAgXCJhdWRpby94LWZsYWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZsYWNcIl1cbiAgfSxcbiAgXCJhdWRpby94LW00YVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJuZ2lueFwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtNGFcIl1cbiAgfSxcbiAgXCJhdWRpby94LW1hdHJvc2thXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJta2FcIl1cbiAgfSxcbiAgXCJhdWRpby94LW1wZWd1cmxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm0zdVwiXVxuICB9LFxuICBcImF1ZGlvL3gtbXMtd2F4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3YXhcIl1cbiAgfSxcbiAgXCJhdWRpby94LW1zLXdtYVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid21hXCJdXG4gIH0sXG4gIFwiYXVkaW8veC1wbi1yZWFsYXVkaW9cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJhbVwiLFwicmFcIl1cbiAgfSxcbiAgXCJhdWRpby94LXBuLXJlYWxhdWRpby1wbHVnaW5cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJtcFwiXVxuICB9LFxuICBcImF1ZGlvL3gtcmVhbGF1ZGlvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcIm5naW54XCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJhXCJdXG4gIH0sXG4gIFwiYXVkaW8veC10dGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJhdWRpby94LXdhdlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid2F2XCJdXG4gIH0sXG4gIFwiYXVkaW8veG1cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhtXCJdXG4gIH0sXG4gIFwiY2hlbWljYWwveC1jZHhcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNkeFwiXVxuICB9LFxuICBcImNoZW1pY2FsL3gtY2lmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjaWZcIl1cbiAgfSxcbiAgXCJjaGVtaWNhbC94LWNtZGZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNtZGZcIl1cbiAgfSxcbiAgXCJjaGVtaWNhbC94LWNtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY21sXCJdXG4gIH0sXG4gIFwiY2hlbWljYWwveC1jc21sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjc21sXCJdXG4gIH0sXG4gIFwiY2hlbWljYWwveC1wZGJcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJjaGVtaWNhbC94LXh5elwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieHl6XCJdXG4gIH0sXG4gIFwiZm9udC9vcGVudHlwZVwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wib3RmXCJdXG4gIH0sXG4gIFwiaW1hZ2UvYm1wXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImJtcFwiXVxuICB9LFxuICBcImltYWdlL2NnbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNnbVwiXVxuICB9LFxuICBcImltYWdlL2ZpdHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiaW1hZ2UvZzNmYXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJnM1wiXVxuICB9LFxuICBcImltYWdlL2dpZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdpZlwiXVxuICB9LFxuICBcImltYWdlL2llZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImllZlwiXVxuICB9LFxuICBcImltYWdlL2pwMlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJpbWFnZS9qcGVnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianBlZ1wiLFwianBnXCIsXCJqcGVcIl1cbiAgfSxcbiAgXCJpbWFnZS9qcG1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiaW1hZ2UvanB4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImltYWdlL2t0eFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImt0eFwiXVxuICB9LFxuICBcImltYWdlL25hcGxwc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJpbWFnZS9wanBlZ1wiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJpbWFnZS9wbmdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwbmdcIl1cbiAgfSxcbiAgXCJpbWFnZS9wcnMuYnRpZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImJ0aWZcIl1cbiAgfSxcbiAgXCJpbWFnZS9wcnMucHRpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImltYWdlL3B3Zy1yYXN0ZXJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiaW1hZ2Uvc2dpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZ2lcIl1cbiAgfSxcbiAgXCJpbWFnZS9zdmcreG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdmdcIixcInN2Z3pcIl1cbiAgfSxcbiAgXCJpbWFnZS90MzhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiaW1hZ2UvdGlmZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRpZmZcIixcInRpZlwiXVxuICB9LFxuICBcImltYWdlL3RpZmYtZnhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLmFkb2JlLnBob3Rvc2hvcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicHNkXCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLmFpcnppcC5hY2NlbGVyYXRvci5henZcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLmNucy5pbmYyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImltYWdlL3ZuZC5kZWNlLmdyYXBoaWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1dmlcIixcInV2dmlcIixcInV2Z1wiLFwidXZ2Z1wiXVxuICB9LFxuICBcImltYWdlL3ZuZC5kanZ1XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGp2dVwiLFwiZGp2XCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLmR2Yi5zdWJ0aXRsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN1YlwiXVxuICB9LFxuICBcImltYWdlL3ZuZC5kd2dcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkd2dcIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQuZHhmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZHhmXCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLmZhc3RiaWRzaGVldFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZic1wiXVxuICB9LFxuICBcImltYWdlL3ZuZC5mcHhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmcHhcIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQuZnN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZnN0XCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLmZ1aml4ZXJveC5lZG1pY3MtbW1yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibW1yXCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLmZ1aml4ZXJveC5lZG1pY3MtcmxjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmxjXCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLmdsb2JhbGdyYXBoaWNzLnBnYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJpbWFnZS92bmQubWljcm9zb2Z0Lmljb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLm1peFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJpbWFnZS92bmQubW96aWxsYS5hcG5nXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImltYWdlL3ZuZC5tcy1tb2RpXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibWRpXCJdXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLm1zLXBob3RvXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3ZHBcIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQubmV0LWZweFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm5weFwiXVxuICB9LFxuICBcImltYWdlL3ZuZC5yYWRpYW5jZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJpbWFnZS92bmQuc2VhbGVkLnBuZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJpbWFnZS92bmQuc2VhbGVkbWVkaWEuc29mdHNlYWwuZ2lmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImltYWdlL3ZuZC5zZWFsZWRtZWRpYS5zb2Z0c2VhbC5qcGdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLnN2ZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJpbWFnZS92bmQudGVuY2VudC50YXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwiaW1hZ2Uvdm5kLnZhbHZlLnNvdXJjZS50ZXh0dXJlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImltYWdlL3ZuZC53YXAud2JtcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndibXBcIl1cbiAgfSxcbiAgXCJpbWFnZS92bmQueGlmZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInhpZlwiXVxuICB9LFxuICBcImltYWdlL3ZuZC56YnJ1c2gucGN4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcImltYWdlL3dlYnBcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndlYnBcIl1cbiAgfSxcbiAgXCJpbWFnZS94LTNkc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiM2RzXCJdXG4gIH0sXG4gIFwiaW1hZ2UveC1jbXUtcmFzdGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJyYXNcIl1cbiAgfSxcbiAgXCJpbWFnZS94LWNteFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiY214XCJdXG4gIH0sXG4gIFwiaW1hZ2UveC1mcmVlaGFuZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZmhcIixcImZoY1wiLFwiZmg0XCIsXCJmaDVcIixcImZoN1wiXVxuICB9LFxuICBcImltYWdlL3gtaWNvblwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJpY29cIl1cbiAgfSxcbiAgXCJpbWFnZS94LWpuZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJuZ2lueFwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJqbmdcIl1cbiAgfSxcbiAgXCJpbWFnZS94LW1yc2lkLWltYWdlXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzaWRcIl1cbiAgfSxcbiAgXCJpbWFnZS94LW1zLWJtcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJuZ2lueFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImJtcFwiXVxuICB9LFxuICBcImltYWdlL3gtcGN4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwY3hcIl1cbiAgfSxcbiAgXCJpbWFnZS94LXBpY3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBpY1wiLFwicGN0XCJdXG4gIH0sXG4gIFwiaW1hZ2UveC1wb3J0YWJsZS1hbnltYXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBubVwiXVxuICB9LFxuICBcImltYWdlL3gtcG9ydGFibGUtYml0bWFwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwYm1cIl1cbiAgfSxcbiAgXCJpbWFnZS94LXBvcnRhYmxlLWdyYXltYXBcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInBnbVwiXVxuICB9LFxuICBcImltYWdlL3gtcG9ydGFibGUtcGl4bWFwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwcG1cIl1cbiAgfSxcbiAgXCJpbWFnZS94LXJnYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicmdiXCJdXG4gIH0sXG4gIFwiaW1hZ2UveC10Z2FcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRnYVwiXVxuICB9LFxuICBcImltYWdlL3gteGJpdG1hcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieGJtXCJdXG4gIH0sXG4gIFwiaW1hZ2UveC14Y2ZcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwiaW1hZ2UveC14cGl4bWFwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4cG1cIl1cbiAgfSxcbiAgXCJpbWFnZS94LXh3aW5kb3dkdW1wXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4d2RcIl1cbiAgfSxcbiAgXCJtZXNzYWdlL2NwaW1cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibWVzc2FnZS9kZWxpdmVyeS1zdGF0dXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibWVzc2FnZS9kaXNwb3NpdGlvbi1ub3RpZmljYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibWVzc2FnZS9leHRlcm5hbC1ib2R5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1lc3NhZ2UvZmVlZGJhY2stcmVwb3J0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1lc3NhZ2UvZ2xvYmFsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1lc3NhZ2UvZ2xvYmFsLWRlbGl2ZXJ5LXN0YXR1c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtZXNzYWdlL2dsb2JhbC1kaXNwb3NpdGlvbi1ub3RpZmljYXRpb25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibWVzc2FnZS9nbG9iYWwtaGVhZGVyc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtZXNzYWdlL2h0dHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwibWVzc2FnZS9pbWRuK3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcIm1lc3NhZ2UvbmV3c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtZXNzYWdlL3BhcnRpYWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwibWVzc2FnZS9yZmM4MjJcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImVtbFwiLFwibWltZVwiXVxuICB9LFxuICBcIm1lc3NhZ2Uvcy1odHRwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1lc3NhZ2Uvc2lwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1lc3NhZ2Uvc2lwZnJhZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtZXNzYWdlL3RyYWNraW5nLXN0YXR1c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtZXNzYWdlL3ZuZC5zaS5zaW1wXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1lc3NhZ2Uvdm5kLndmYS53c2NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibW9kZWwvaWdlc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImlnc1wiLFwiaWdlc1wiXVxuICB9LFxuICBcIm1vZGVsL21lc2hcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtc2hcIixcIm1lc2hcIixcInNpbG9cIl1cbiAgfSxcbiAgXCJtb2RlbC92bmQuY29sbGFkYSt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkYWVcIl1cbiAgfSxcbiAgXCJtb2RlbC92bmQuZHdmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZHdmXCJdXG4gIH0sXG4gIFwibW9kZWwvdm5kLmZsYXRsYW5kLjNkbWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibW9kZWwvdm5kLmdkbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImdkbFwiXVxuICB9LFxuICBcIm1vZGVsL3ZuZC5ncy1nZGxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJtb2RlbC92bmQuZ3MuZ2RsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1vZGVsL3ZuZC5ndHdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJndHdcIl1cbiAgfSxcbiAgXCJtb2RlbC92bmQubW9tbCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibW9kZWwvdm5kLm10c1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm10c1wiXVxuICB9LFxuICBcIm1vZGVsL3ZuZC5vcGVuZ2V4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1vZGVsL3ZuZC5wYXJhc29saWQudHJhbnNtaXQuYmluYXJ5XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1vZGVsL3ZuZC5wYXJhc29saWQudHJhbnNtaXQudGV4dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtb2RlbC92bmQudmFsdmUuc291cmNlLmNvbXBpbGVkLW1hcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtb2RlbC92bmQudnR1XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widnR1XCJdXG4gIH0sXG4gIFwibW9kZWwvdnJtbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndybFwiLFwidnJtbFwiXVxuICB9LFxuICBcIm1vZGVsL3gzZCtiaW5hcnlcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIngzZGJcIixcIngzZGJ6XCJdXG4gIH0sXG4gIFwibW9kZWwveDNkK2Zhc3RpbmZvc2V0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm1vZGVsL3gzZCt2cm1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ4M2R2XCIsXCJ4M2R2elwiXVxuICB9LFxuICBcIm1vZGVsL3gzZCt4bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIngzZFwiLFwieDNkelwiXVxuICB9LFxuICBcIm1vZGVsL3gzZC12cm1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm11bHRpcGFydC9hbHRlcm5hdGl2ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJtdWx0aXBhcnQvYXBwbGVkb3VibGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibXVsdGlwYXJ0L2J5dGVyYW5nZXNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibXVsdGlwYXJ0L2RpZ2VzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtdWx0aXBhcnQvZW5jcnlwdGVkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcIm11bHRpcGFydC9mb3JtLWRhdGFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwibXVsdGlwYXJ0L2hlYWRlci1zZXRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibXVsdGlwYXJ0L21peGVkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZVxuICB9LFxuICBcIm11bHRpcGFydC9wYXJhbGxlbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJtdWx0aXBhcnQvcmVsYXRlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2VcbiAgfSxcbiAgXCJtdWx0aXBhcnQvcmVwb3J0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcIm11bHRpcGFydC9zaWduZWRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlXG4gIH0sXG4gIFwibXVsdGlwYXJ0L3ZvaWNlLW1lc3NhZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwibXVsdGlwYXJ0L3gtbWl4ZWQtcmVwbGFjZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0LzFkLWludGVybGVhdmVkLXBhcml0eWZlY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L2NhY2hlLW1hbmlmZXN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJhcHBjYWNoZVwiLFwibWFuaWZlc3RcIl1cbiAgfSxcbiAgXCJ0ZXh0L2NhbGVuZGFyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaWNzXCIsXCJpZmJcIl1cbiAgfSxcbiAgXCJ0ZXh0L2NhbGVuZGVyXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH0sXG4gIFwidGV4dC9jbWRcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJ0ZXh0L2NvZmZlZXNjcmlwdFwiOiB7XG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNvZmZlZVwiLFwibGl0Y29mZmVlXCJdXG4gIH0sXG4gIFwidGV4dC9jc3NcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImNzc1wiXVxuICB9LFxuICBcInRleHQvY3N2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjc3ZcIl1cbiAgfSxcbiAgXCJ0ZXh0L2Nzdi1zY2hlbWFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9kaXJlY3RvcnlcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9kbnNcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9lY21hc2NyaXB0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvZW5jYXBydHBcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9lbnJpY2hlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L2Z3ZHJlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L2dyYW1tYXItcmVmLWxpc3RcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9oanNvblwiOiB7XG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhqc29uXCJdXG4gIH0sXG4gIFwidGV4dC9odG1sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJodG1sXCIsXCJodG1cIixcInNodG1sXCJdXG4gIH0sXG4gIFwidGV4dC9qYWRlXCI6IHtcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiamFkZVwiXVxuICB9LFxuICBcInRleHQvamF2YXNjcmlwdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcInRleHQvamNyLWNuZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L2pzeFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianN4XCJdXG4gIH0sXG4gIFwidGV4dC9sZXNzXCI6IHtcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibGVzc1wiXVxuICB9LFxuICBcInRleHQvbWFya2Rvd25cIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9tYXRobWxcIjoge1xuICAgIFwic291cmNlXCI6IFwibmdpbnhcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibW1sXCJdXG4gIH0sXG4gIFwidGV4dC9taXphclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L24zXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJuM1wiXVxuICB9LFxuICBcInRleHQvcGFyYW1ldGVyc1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3Bhcml0eWZlY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3BsYWluXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0eHRcIixcInRleHRcIixcImNvbmZcIixcImRlZlwiLFwibGlzdFwiLFwibG9nXCIsXCJpblwiLFwiaW5pXCJdXG4gIH0sXG4gIFwidGV4dC9wcm92ZW5hbmNlLW5vdGF0aW9uXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvcHJzLmZhbGxlbnN0ZWluLnJzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3Bycy5saW5lcy50YWdcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJkc2NcIl1cbiAgfSxcbiAgXCJ0ZXh0L3JhcHRvcmZlY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3JlZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3JmYzgyMi1oZWFkZXJzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvcmljaHRleHRcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInJ0eFwiXVxuICB9LFxuICBcInRleHQvcnRmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJydGZcIl1cbiAgfSxcbiAgXCJ0ZXh0L3J0cC1lbmMtYWVzY20xMjhcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC9ydHBsb29wYmFja1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3J0eFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3NnbWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzZ21sXCIsXCJzZ21cIl1cbiAgfSxcbiAgXCJ0ZXh0L3N0eWx1c1wiOiB7XG4gICAgXCJleHRlbnNpb25zXCI6IFtcInN0eWx1c1wiLFwic3R5bFwiXVxuICB9LFxuICBcInRleHQvdDE0MFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3RhYi1zZXBhcmF0ZWQtdmFsdWVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0c3ZcIl1cbiAgfSxcbiAgXCJ0ZXh0L3Ryb2ZmXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widFwiLFwidHJcIixcInJvZmZcIixcIm1hblwiLFwibWVcIixcIm1zXCJdXG4gIH0sXG4gIFwidGV4dC90dXJ0bGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ0dGxcIl1cbiAgfSxcbiAgXCJ0ZXh0L3VscGZlY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3VyaS1saXN0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1cmlcIixcInVyaXNcIixcInVybHNcIl1cbiAgfSxcbiAgXCJ0ZXh0L3ZjYXJkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2Y2FyZFwiXVxuICB9LFxuICBcInRleHQvdm5kLmFcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQuYWJjXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLmN1cmxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjdXJsXCJdXG4gIH0sXG4gIFwidGV4dC92bmQuY3VybC5kY3VybFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZGN1cmxcIl1cbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5jdXJsLm1jdXJsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtY3VybFwiXVxuICB9LFxuICBcInRleHQvdm5kLmN1cmwuc2N1cmxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNjdXJsXCJdXG4gIH0sXG4gIFwidGV4dC92bmQuZGViaWFuLmNvcHlyaWdodFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5kbWNsaWVudHNjcmlwdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5kdmIuc3VidGl0bGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzdWJcIl1cbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5lc21lcnRlYy50aGVtZS1kZXNjcmlwdG9yXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLmZseVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZseVwiXVxuICB9LFxuICBcInRleHQvdm5kLmZtaS5mbGV4c3RvclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZseFwiXVxuICB9LFxuICBcInRleHQvdm5kLmdyYXBodml6XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZ3ZcIl1cbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5pbjNkLjNkbWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCIzZG1sXCJdXG4gIH0sXG4gIFwidGV4dC92bmQuaW4zZC5zcG90XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic3BvdFwiXVxuICB9LFxuICBcInRleHQvdm5kLmlwdGMubmV3c21sXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLmlwdGMubml0ZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5sYXRleC16XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLm1vdG9yb2xhLnJlZmxleFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5tcy1tZWRpYXBhY2thZ2VcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQubmV0MnBob25lLmNvbW1jZW50ZXIuY29tbWFuZFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5yYWRpc3lzLm1zbWwtYmFzaWMtbGF5b3V0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLnNpLnVyaWNhdGFsb2d1ZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC5zdW4uajJtZS5hcHAtZGVzY3JpcHRvclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImphZFwiXVxuICB9LFxuICBcInRleHQvdm5kLnRyb2xsdGVjaC5saW5ndWlzdFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3ZuZC53YXAuc2lcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiXG4gIH0sXG4gIFwidGV4dC92bmQud2FwLnNsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIlxuICB9LFxuICBcInRleHQvdm5kLndhcC53bWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiaWFuYVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3bWxcIl1cbiAgfSxcbiAgXCJ0ZXh0L3ZuZC53YXAud21sc2NyaXB0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImlhbmFcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid21sc1wiXVxuICB9LFxuICBcInRleHQvdnR0XCI6IHtcbiAgICBcImNoYXJzZXRcIjogXCJVVEYtOFwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInZ0dFwiXVxuICB9LFxuICBcInRleHQveC1hc21cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInNcIixcImFzbVwiXVxuICB9LFxuICBcInRleHQveC1jXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJjXCIsXCJjY1wiLFwiY3h4XCIsXCJjcHBcIixcImhcIixcImhoXCIsXCJkaWNcIl1cbiAgfSxcbiAgXCJ0ZXh0L3gtY29tcG9uZW50XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcIm5naW54XCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImh0Y1wiXVxuICB9LFxuICBcInRleHQveC1mb3J0cmFuXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmXCIsXCJmb3JcIixcImY3N1wiLFwiZjkwXCJdXG4gIH0sXG4gIFwidGV4dC94LWd3dC1ycGNcIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWVcbiAgfSxcbiAgXCJ0ZXh0L3gtaGFuZGxlYmFycy10ZW1wbGF0ZVwiOiB7XG4gICAgXCJleHRlbnNpb25zXCI6IFtcImhic1wiXVxuICB9LFxuICBcInRleHQveC1qYXZhLXNvdXJjZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiamF2YVwiXVxuICB9LFxuICBcInRleHQveC1qcXVlcnktdG1wbFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcInRleHQveC1sdWFcIjoge1xuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJsdWFcIl1cbiAgfSxcbiAgXCJ0ZXh0L3gtbWFya2Rvd25cIjoge1xuICAgIFwiY29tcHJlc3NpYmxlXCI6IHRydWUsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm1hcmtkb3duXCIsXCJtZFwiLFwibWtkXCJdXG4gIH0sXG4gIFwidGV4dC94LW5mb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibmZvXCJdXG4gIH0sXG4gIFwidGV4dC94LW9wbWxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm9wbWxcIl1cbiAgfSxcbiAgXCJ0ZXh0L3gtcGFzY2FsXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJwXCIsXCJwYXNcIl1cbiAgfSxcbiAgXCJ0ZXh0L3gtcHJvY2Vzc2luZ1wiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wicGRlXCJdXG4gIH0sXG4gIFwidGV4dC94LXNhc3NcIjoge1xuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzYXNzXCJdXG4gIH0sXG4gIFwidGV4dC94LXNjc3NcIjoge1xuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzY3NzXCJdXG4gIH0sXG4gIFwidGV4dC94LXNldGV4dFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZXR4XCJdXG4gIH0sXG4gIFwidGV4dC94LXNmdlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wic2Z2XCJdXG4gIH0sXG4gIFwidGV4dC94LXN1c2UteW1wXCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ5bXBcIl1cbiAgfSxcbiAgXCJ0ZXh0L3gtdXVlbmNvZGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInV1XCJdXG4gIH0sXG4gIFwidGV4dC94LXZjYWxlbmRhclwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widmNzXCJdXG4gIH0sXG4gIFwidGV4dC94LXZjYXJkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ2Y2ZcIl1cbiAgfSxcbiAgXCJ0ZXh0L3htbFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wieG1sXCJdXG4gIH0sXG4gIFwidGV4dC94bWwtZXh0ZXJuYWwtcGFyc2VkLWVudGl0eVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJpYW5hXCJcbiAgfSxcbiAgXCJ0ZXh0L3lhbWxcIjoge1xuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ5YW1sXCIsXCJ5bWxcIl1cbiAgfSxcbiAgXCJ2aWRlby8xZC1pbnRlcmxlYXZlZC1wYXJpdHlmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJ2aWRlby8zZ3BwXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCIzZ3BcIixcIjNncHBcIl1cbiAgfSxcbiAgXCJ2aWRlby8zZ3BwLXR0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwidmlkZW8vM2dwcDJcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIjNnMlwiXVxuICB9LFxuICBcInZpZGVvL2JtcGVnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwidmlkZW8vYnQ2NTZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJ2aWRlby9jZWxiXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwidmlkZW8vZHZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJ2aWRlby9oMjYxXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJoMjYxXCJdXG4gIH0sXG4gIFwidmlkZW8vaDI2M1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaDI2M1wiXVxuICB9LFxuICBcInZpZGVvL2gyNjMtMTk5OFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcInZpZGVvL2gyNjMtMjAwMFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcInZpZGVvL2gyNjRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImgyNjRcIl1cbiAgfSxcbiAgXCJ2aWRlby9oMjY0LXJjZG9cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJ2aWRlby9oMjY0LXN2Y1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcInZpZGVvL2pwZWdcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImpwZ3ZcIl1cbiAgfSxcbiAgXCJ2aWRlby9qcGVnMjAwMFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcInZpZGVvL2pwbVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wianBtXCIsXCJqcGdtXCJdXG4gIH0sXG4gIFwidmlkZW8vbWoyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtajJcIixcIm1qcDJcIl1cbiAgfSxcbiAgXCJ2aWRlby9tcDFzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwidmlkZW8vbXAycFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcInZpZGVvL21wMnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInRzXCJdXG4gIH0sXG4gIFwidmlkZW8vbXA0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtcDRcIixcIm1wNHZcIixcIm1wZzRcIl1cbiAgfSxcbiAgXCJ2aWRlby9tcDR2LWVzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwidmlkZW8vbXBlZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wibXBlZ1wiLFwibXBnXCIsXCJtcGVcIixcIm0xdlwiLFwibTJ2XCJdXG4gIH0sXG4gIFwidmlkZW8vbXBlZzQtZ2VuZXJpY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcInZpZGVvL21wdlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcInZpZGVvL252XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwidmlkZW8vb2dnXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJvZ3ZcIl1cbiAgfSxcbiAgXCJ2aWRlby9wYXJpdHlmZWNcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJ2aWRlby9wb2ludGVyXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwidmlkZW8vcXVpY2t0aW1lXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJxdFwiLFwibW92XCJdXG4gIH0sXG4gIFwidmlkZW8vcmF3XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwidmlkZW8vcnRwLWVuYy1hZXNjbTEyOFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcInZpZGVvL3J0eFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcInZpZGVvL3NtcHRlMjkybVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcInZpZGVvL3VscGZlY1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcInZpZGVvL3ZjMVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5jY3R2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLmRlY2UuaGRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInV2aFwiLFwidXZ2aFwiXVxuICB9LFxuICBcInZpZGVvL3ZuZC5kZWNlLm1vYmlsZVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widXZtXCIsXCJ1dnZtXCJdXG4gIH0sXG4gIFwidmlkZW8vdm5kLmRlY2UubXA0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLmRlY2UucGRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInV2cFwiLFwidXZ2cFwiXVxuICB9LFxuICBcInZpZGVvL3ZuZC5kZWNlLnNkXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1dnNcIixcInV2dnNcIl1cbiAgfSxcbiAgXCJ2aWRlby92bmQuZGVjZS52aWRlb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widXZ2XCIsXCJ1dnZ2XCJdXG4gIH0sXG4gIFwidmlkZW8vdm5kLmRpcmVjdHYubXBlZ1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5kaXJlY3R2Lm1wZWctdHRzXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLmRsbmEubXBlZy10dHNcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQuZHZiLmZpbGVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImR2YlwiXVxuICB9LFxuICBcInZpZGVvL3ZuZC5mdnRcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZ2dFwiXVxuICB9LFxuICBcInZpZGVvL3ZuZC5obnMudmlkZW9cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQuaXB0dmZvcnVtLjFkcGFyaXR5ZmVjLTEwMTBcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQuaXB0dmZvcnVtLjFkcGFyaXR5ZmVjLTIwMDVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQuaXB0dmZvcnVtLjJkcGFyaXR5ZmVjLTEwMTBcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQuaXB0dmZvcnVtLjJkcGFyaXR5ZmVjLTIwMDVcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQuaXB0dmZvcnVtLnR0c2F2Y1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5pcHR2Zm9ydW0udHRzbXBlZzJcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQubW90b3JvbGEudmlkZW9cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQubW90b3JvbGEudmlkZW9wXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLm1wZWd1cmxcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIm14dVwiLFwibTR1XCJdXG4gIH0sXG4gIFwidmlkZW8vdm5kLm1zLXBsYXlyZWFkeS5tZWRpYS5weXZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcInB5dlwiXVxuICB9LFxuICBcInZpZGVvL3ZuZC5ub2tpYS5pbnRlcmxlYXZlZC1tdWx0aW1lZGlhXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLm5va2lhLnZpZGVvdm9pcFwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5vYmplY3R2aWRlb1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIlxuICB9LFxuICBcInZpZGVvL3ZuZC5zZWFsZWQubXBlZzFcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQuc2VhbGVkLm1wZWc0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLnNlYWxlZC5zd2ZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCJcbiAgfSxcbiAgXCJ2aWRlby92bmQuc2VhbGVkbWVkaWEuc29mdHNlYWwubW92XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiXG4gIH0sXG4gIFwidmlkZW8vdm5kLnV2dnUubXA0XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ1dnVcIixcInV2dnVcIl1cbiAgfSxcbiAgXCJ2aWRlby92bmQudml2b1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widml2XCJdXG4gIH0sXG4gIFwidmlkZW8vd2VibVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid2VibVwiXVxuICB9LFxuICBcInZpZGVvL3gtZjR2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJmNHZcIl1cbiAgfSxcbiAgXCJ2aWRlby94LWZsaVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiZmxpXCJdXG4gIH0sXG4gIFwidmlkZW8veC1mbHZcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJjb21wcmVzc2libGVcIjogZmFsc2UsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImZsdlwiXVxuICB9LFxuICBcInZpZGVvL3gtbTR2XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtNHZcIl1cbiAgfSxcbiAgXCJ2aWRlby94LW1hdHJvc2thXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiY29tcHJlc3NpYmxlXCI6IGZhbHNlLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJta3ZcIixcIm1rM2RcIixcIm1rc1wiXVxuICB9LFxuICBcInZpZGVvL3gtbW5nXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtbmdcIl1cbiAgfSxcbiAgXCJ2aWRlby94LW1zLWFzZlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiYXNmXCIsXCJhc3hcIl1cbiAgfSxcbiAgXCJ2aWRlby94LW1zLXZvYlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1widm9iXCJdXG4gIH0sXG4gIFwidmlkZW8veC1tcy13bVwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid21cIl1cbiAgfSxcbiAgXCJ2aWRlby94LW1zLXdtdlwiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImNvbXByZXNzaWJsZVwiOiBmYWxzZSxcbiAgICBcImV4dGVuc2lvbnNcIjogW1wid212XCJdXG4gIH0sXG4gIFwidmlkZW8veC1tcy13bXhcIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcIndteFwiXVxuICB9LFxuICBcInZpZGVvL3gtbXMtd3Z4XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJ3dnhcIl1cbiAgfSxcbiAgXCJ2aWRlby94LW1zdmlkZW9cIjoge1xuICAgIFwic291cmNlXCI6IFwiYXBhY2hlXCIsXG4gICAgXCJleHRlbnNpb25zXCI6IFtcImF2aVwiXVxuICB9LFxuICBcInZpZGVvL3gtc2dpLW1vdmllXCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJtb3ZpZVwiXVxuICB9LFxuICBcInZpZGVvL3gtc212XCI6IHtcbiAgICBcInNvdXJjZVwiOiBcImFwYWNoZVwiLFxuICAgIFwiZXh0ZW5zaW9uc1wiOiBbXCJzbXZcIl1cbiAgfSxcbiAgXCJ4LWNvbmZlcmVuY2UveC1jb29sdGFsa1wiOiB7XG4gICAgXCJzb3VyY2VcIjogXCJhcGFjaGVcIixcbiAgICBcImV4dGVuc2lvbnNcIjogW1wiaWNlXCJdXG4gIH0sXG4gIFwieC1zaGFkZXIveC1mcmFnbWVudFwiOiB7XG4gICAgXCJjb21wcmVzc2libGVcIjogdHJ1ZVxuICB9LFxuICBcIngtc2hhZGVyL3gtdmVydGV4XCI6IHtcbiAgICBcImNvbXByZXNzaWJsZVwiOiB0cnVlXG4gIH1cbn0iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcImFudHNcIixcbiAgXCJiYXRzXCIsXG4gIFwiYmVhcnNcIixcbiAgXCJiZWVzXCIsXG4gIFwiYmlyZHNcIixcbiAgXCJidWZmYWxvXCIsXG4gIFwiY2F0c1wiLFxuICBcImNoaWNrZW5zXCIsXG4gIFwiY2F0dGxlXCIsXG4gIFwiZG9nc1wiLFxuICBcImRvbHBoaW5zXCIsXG4gIFwiZHVja3NcIixcbiAgXCJlbGVwaGFudHNcIixcbiAgXCJmaXNoZXNcIixcbiAgXCJmb3hlc1wiLFxuICBcImZyb2dzXCIsXG4gIFwiZ2Vlc2VcIixcbiAgXCJnb2F0c1wiLFxuICBcImhvcnNlc1wiLFxuICBcImthbmdhcm9vc1wiLFxuICBcImxpb25zXCIsXG4gIFwibW9ua2V5c1wiLFxuICBcIm93bHNcIixcbiAgXCJveGVuXCIsXG4gIFwicGVuZ3VpbnNcIixcbiAgXCJwZW9wbGVcIixcbiAgXCJwaWdzXCIsXG4gIFwicmFiYml0c1wiLFxuICBcInNoZWVwXCIsXG4gIFwidGlnZXJzXCIsXG4gIFwid2hhbGVzXCIsXG4gIFwid29sdmVzXCIsXG4gIFwiemVicmFzXCIsXG4gIFwiYmFuc2hlZXNcIixcbiAgXCJjcm93c1wiLFxuICBcImJsYWNrIGNhdHNcIixcbiAgXCJjaGltZXJhc1wiLFxuICBcImdob3N0c1wiLFxuICBcImNvbnNwaXJhdG9yc1wiLFxuICBcImRyYWdvbnNcIixcbiAgXCJkd2FydmVzXCIsXG4gIFwiZWx2ZXNcIixcbiAgXCJlbmNoYW50ZXJzXCIsXG4gIFwiZXhvcmNpc3RzXCIsXG4gIFwic29uc1wiLFxuICBcImZvZXNcIixcbiAgXCJnaWFudHNcIixcbiAgXCJnbm9tZXNcIixcbiAgXCJnb2JsaW5zXCIsXG4gIFwiZ29vc2VzXCIsXG4gIFwiZ3JpZmZpbnNcIixcbiAgXCJseWNhbnRocm9wZXNcIixcbiAgXCJuZW1lc2lzXCIsXG4gIFwib2dyZXNcIixcbiAgXCJvcmFjbGVzXCIsXG4gIFwicHJvcGhldHNcIixcbiAgXCJzb3JjZXJvcnNcIixcbiAgXCJzcGlkZXJzXCIsXG4gIFwic3Bpcml0c1wiLFxuICBcInZhbXBpcmVzXCIsXG4gIFwid2FybG9ja3NcIixcbiAgXCJ2aXhlbnNcIixcbiAgXCJ3ZXJld29sdmVzXCIsXG4gIFwid2l0Y2hlc1wiLFxuICBcIndvcnNoaXBlcnNcIixcbiAgXCJ6b21iaWVzXCIsXG4gIFwiZHJ1aWRzXCJcbl07XG4iLCJ2YXIgdGVhbSA9IHt9O1xubW9kdWxlWydleHBvcnRzJ10gPSB0ZWFtO1xudGVhbS5jcmVhdHVyZSA9IHJlcXVpcmUoXCIuL2NyZWF0dXJlXCIpO1xudGVhbS5uYW1lID0gcmVxdWlyZShcIi4vbmFtZVwiKTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiI3tBZGRyZXNzLnN0YXRlfSAje2NyZWF0dXJlfVwiXG5dO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCJVbml0ZWQgU3RhdGVzXCIsXG4gIFwiVW5pdGVkIFN0YXRlcyBvZiBBbWVyaWNhXCIsXG4gIFwiVVNBXCJcbl07XG4iLCJ2YXIgYWRkcmVzcyA9IHt9O1xubW9kdWxlWydleHBvcnRzJ10gPSBhZGRyZXNzO1xuYWRkcmVzcy5kZWZhdWx0X2NvdW50cnkgPSByZXF1aXJlKFwiLi9kZWZhdWx0X2NvdW50cnlcIik7XG5hZGRyZXNzLnBvc3Rjb2RlX2J5X3N0YXRlID0gcmVxdWlyZShcIi4vcG9zdGNvZGVfYnlfc3RhdGVcIik7XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0ge1xuICBcIkFMXCI6IFwiMzUwIyNcIixcbiAgXCJBS1wiOiBcIjk5NSMjXCIsXG4gIFwiQVNcIjogXCI5NjcjI1wiLFxuICBcIkFaXCI6IFwiODUwIyNcIixcbiAgXCJBUlwiOiBcIjcxNyMjXCIsXG4gIFwiQ0FcIjogXCI5MDAjI1wiLFxuICBcIkNPXCI6IFwiODAwIyNcIixcbiAgXCJDVFwiOiBcIjA2MSMjXCIsXG4gIFwiRENcIjogXCIyMDQjI1wiLFxuICBcIkRFXCI6IFwiMTk4IyNcIixcbiAgXCJGTFwiOiBcIjMyMiMjXCIsXG4gIFwiR0FcIjogXCIzMDEjI1wiLFxuICBcIkhJXCI6IFwiOTY3IyNcIixcbiAgXCJJRFwiOiBcIjgzMiMjXCIsXG4gIFwiSUxcIjogXCI2MDAjI1wiLFxuICBcIklOXCI6IFwiNDYzIyNcIixcbiAgXCJJQVwiOiBcIjUxMCMjXCIsXG4gIFwiS1NcIjogXCI2NjYjI1wiLFxuICBcIktZXCI6IFwiNDA0IyNcIixcbiAgXCJMQVwiOiBcIjcwMSMjXCIsXG4gIFwiTUVcIjogXCIwNDIjI1wiLFxuICBcIk1EXCI6IFwiMjEwIyNcIixcbiAgXCJNQVwiOiBcIjAyNiMjXCIsXG4gIFwiTUlcIjogXCI0ODAjI1wiLFxuICBcIk1OXCI6IFwiNTU1IyNcIixcbiAgXCJNU1wiOiBcIjM4NyMjXCIsXG4gIFwiTU9cIjogXCI2NTAjI1wiLFxuICBcIk1UXCI6IFwiNTkwIyNcIixcbiAgXCJORVwiOiBcIjY4OCMjXCIsXG4gIFwiTlZcIjogXCI4OTgjI1wiLFxuICBcIk5IXCI6IFwiMDM2IyNcIixcbiAgXCJOSlwiOiBcIjA3NiMjXCIsXG4gIFwiTk1cIjogXCI4ODAjI1wiLFxuICBcIk5ZXCI6IFwiMTIyIyNcIixcbiAgXCJOQ1wiOiBcIjI4OCMjXCIsXG4gIFwiTkRcIjogXCI1ODYjI1wiLFxuICBcIk9IXCI6IFwiNDQ0IyNcIixcbiAgXCJPS1wiOiBcIjczMCMjXCIsXG4gIFwiT1JcIjogXCI5NzkjI1wiLFxuICBcIlBBXCI6IFwiMTg2IyNcIixcbiAgXCJSSVwiOiBcIjAyOSMjXCIsXG4gIFwiU0NcIjogXCIyOTkjI1wiLFxuICBcIlNEXCI6IFwiNTc3IyNcIixcbiAgXCJUTlwiOiBcIjM4MyMjXCIsXG4gIFwiVFhcIjogXCI3OTgjI1wiLFxuICBcIlVUXCI6IFwiODQ3IyNcIixcbiAgXCJWVFwiOiBcIjA1MCMjXCIsXG4gIFwiVkFcIjogXCIyMjIjI1wiLFxuICBcIldBXCI6IFwiOTkwIyNcIixcbiAgXCJXVlwiOiBcIjI0NyMjXCIsXG4gIFwiV0lcIjogXCI1NDkjI1wiLFxuICBcIldZXCI6IFwiODMxIyNcIlxufTtcbiIsInZhciBlbl9VUyA9IHt9O1xubW9kdWxlWydleHBvcnRzJ10gPSBlbl9VUztcbmVuX1VTLnRpdGxlID0gXCJVbml0ZWQgU3RhdGVzIChFbmdsaXNoKVwiO1xuZW5fVVMuaW50ZXJuZXQgPSByZXF1aXJlKFwiLi9pbnRlcm5ldFwiKTtcbmVuX1VTLmFkZHJlc3MgPSByZXF1aXJlKFwiLi9hZGRyZXNzXCIpO1xuZW5fVVMucGhvbmVfbnVtYmVyID0gcmVxdWlyZShcIi4vcGhvbmVfbnVtYmVyXCIpO1xuIiwibW9kdWxlW1wiZXhwb3J0c1wiXSA9IFtcbiAgXCJjb21cIixcbiAgXCJ1c1wiLFxuICBcImJpelwiLFxuICBcImluZm9cIixcbiAgXCJuYW1lXCIsXG4gIFwibmV0XCIsXG4gIFwib3JnXCJcbl07XG4iLCJ2YXIgaW50ZXJuZXQgPSB7fTtcbm1vZHVsZVsnZXhwb3J0cyddID0gaW50ZXJuZXQ7XG5pbnRlcm5ldC5kb21haW5fc3VmZml4ID0gcmVxdWlyZShcIi4vZG9tYWluX3N1ZmZpeFwiKTtcbiIsIm1vZHVsZVtcImV4cG9ydHNcIl0gPSBbXG4gIFwiMjAxXCIsXG4gIFwiMjAyXCIsXG4gIFwiMjAzXCIsXG4gIFwiMjA1XCIsXG4gIFwiMjA2XCIsXG4gIFwiMjA3XCIsXG4gIFwiMjA4XCIsXG4gIFwiMjA5XCIsXG4gIFwiMjEwXCIsXG4gIFwiMjEyXCIsXG4gIFwiMjEzXCIsXG4gIFwiMjE0XCIsXG4gIFwiMjE1XCIsXG4gIFwiMjE2XCIsXG4gIFwiMjE3XCIsXG4gIFwiMjE4XCIsXG4gIFwiMjE5XCIsXG4gIFwiMjI0XCIsXG4gIFwiMjI1XCIsXG4gIFwiMjI3XCIsXG4gIFwiMjI4XCIsXG4gIFwiMjI5XCIsXG4gIFwiMjMxXCIsXG4gIFwiMjM0XCIsXG4gIFwiMjM5XCIsXG4gIFwiMjQwXCIsXG4gIFwiMjQ4XCIsXG4gIFwiMjUxXCIsXG4gIFwiMjUyXCIsXG4gIFwiMjUzXCIsXG4gIFwiMjU0XCIsXG4gIFwiMjU2XCIsXG4gIFwiMjYwXCIsXG4gIFwiMjYyXCIsXG4gIFwiMjY3XCIsXG4gIFwiMjY5XCIsXG4gIFwiMjcwXCIsXG4gIFwiMjc2XCIsXG4gIFwiMjgxXCIsXG4gIFwiMjgzXCIsXG4gIFwiMzAxXCIsXG4gIFwiMzAyXCIsXG4gIFwiMzAzXCIsXG4gIFwiMzA0XCIsXG4gIFwiMzA1XCIsXG4gIFwiMzA3XCIsXG4gIFwiMzA4XCIsXG4gIFwiMzA5XCIsXG4gIFwiMzEwXCIsXG4gIFwiMzEyXCIsXG4gIFwiMzEzXCIsXG4gIFwiMzE0XCIsXG4gIFwiMzE1XCIsXG4gIFwiMzE2XCIsXG4gIFwiMzE3XCIsXG4gIFwiMzE4XCIsXG4gIFwiMzE5XCIsXG4gIFwiMzIwXCIsXG4gIFwiMzIxXCIsXG4gIFwiMzIzXCIsXG4gIFwiMzMwXCIsXG4gIFwiMzMxXCIsXG4gIFwiMzM0XCIsXG4gIFwiMzM2XCIsXG4gIFwiMzM3XCIsXG4gIFwiMzM5XCIsXG4gIFwiMzQ3XCIsXG4gIFwiMzUxXCIsXG4gIFwiMzUyXCIsXG4gIFwiMzYwXCIsXG4gIFwiMzYxXCIsXG4gIFwiMzg2XCIsXG4gIFwiNDAxXCIsXG4gIFwiNDAyXCIsXG4gIFwiNDA0XCIsXG4gIFwiNDA1XCIsXG4gIFwiNDA2XCIsXG4gIFwiNDA3XCIsXG4gIFwiNDA4XCIsXG4gIFwiNDA5XCIsXG4gIFwiNDEwXCIsXG4gIFwiNDEyXCIsXG4gIFwiNDEzXCIsXG4gIFwiNDE0XCIsXG4gIFwiNDE1XCIsXG4gIFwiNDE3XCIsXG4gIFwiNDE5XCIsXG4gIFwiNDIzXCIsXG4gIFwiNDI0XCIsXG4gIFwiNDI1XCIsXG4gIFwiNDM0XCIsXG4gIFwiNDM1XCIsXG4gIFwiNDQwXCIsXG4gIFwiNDQzXCIsXG4gIFwiNDQ1XCIsXG4gIFwiNDY0XCIsXG4gIFwiNDY5XCIsXG4gIFwiNDcwXCIsXG4gIFwiNDc1XCIsXG4gIFwiNDc4XCIsXG4gIFwiNDc5XCIsXG4gIFwiNDgwXCIsXG4gIFwiNDg0XCIsXG4gIFwiNTAxXCIsXG4gIFwiNTAyXCIsXG4gIFwiNTAzXCIsXG4gIFwiNTA0XCIsXG4gIFwiNTA1XCIsXG4gIFwiNTA3XCIsXG4gIFwiNTA4XCIsXG4gIFwiNTA5XCIsXG4gIFwiNTEwXCIsXG4gIFwiNTEyXCIsXG4gIFwiNTEzXCIsXG4gIFwiNTE1XCIsXG4gIFwiNTE2XCIsXG4gIFwiNTE3XCIsXG4gIFwiNTE4XCIsXG4gIFwiNTIwXCIsXG4gIFwiNTMwXCIsXG4gIFwiNTQwXCIsXG4gIFwiNTQxXCIsXG4gIFwiNTUxXCIsXG4gIFwiNTU3XCIsXG4gIFwiNTU5XCIsXG4gIFwiNTYxXCIsXG4gIFwiNTYyXCIsXG4gIFwiNTYzXCIsXG4gIFwiNTY0XCIsXG4gIFwiNTY3XCIsXG4gIFwiNTcwXCIsXG4gIFwiNTcxXCIsXG4gIFwiNTczXCIsXG4gIFwiNTc0XCIsXG4gIFwiNTgwXCIsXG4gIFwiNTg1XCIsXG4gIFwiNTg2XCIsXG4gIFwiNjAxXCIsXG4gIFwiNjAyXCIsXG4gIFwiNjAzXCIsXG4gIFwiNjA1XCIsXG4gIFwiNjA2XCIsXG4gIFwiNjA3XCIsXG4gIFwiNjA4XCIsXG4gIFwiNjA5XCIsXG4gIFwiNjEwXCIsXG4gIFwiNjEyXCIsXG4gIFwiNjE0XCIsXG4gIFwiNjE1XCIsXG4gIFwiNjE2XCIsXG4gIFwiNjE3XCIsXG4gIFwiNjE4XCIsXG4gIFwiNjE5XCIsXG4gIFwiNjIwXCIsXG4gIFwiNjIzXCIsXG4gIFwiNjI2XCIsXG4gIFwiNjMwXCIsXG4gIFwiNjMxXCIsXG4gIFwiNjM2XCIsXG4gIFwiNjQxXCIsXG4gIFwiNjQ2XCIsXG4gIFwiNjUwXCIsXG4gIFwiNjUxXCIsXG4gIFwiNjYwXCIsXG4gIFwiNjYxXCIsXG4gIFwiNjYyXCIsXG4gIFwiNjY3XCIsXG4gIFwiNjc4XCIsXG4gIFwiNjgyXCIsXG4gIFwiNzAxXCIsXG4gIFwiNzAyXCIsXG4gIFwiNzAzXCIsXG4gIFwiNzA0XCIsXG4gIFwiNzA2XCIsXG4gIFwiNzA3XCIsXG4gIFwiNzA4XCIsXG4gIFwiNzEyXCIsXG4gIFwiNzEzXCIsXG4gIFwiNzE0XCIsXG4gIFwiNzE1XCIsXG4gIFwiNzE2XCIsXG4gIFwiNzE3XCIsXG4gIFwiNzE4XCIsXG4gIFwiNzE5XCIsXG4gIFwiNzIwXCIsXG4gIFwiNzI0XCIsXG4gIFwiNzI3XCIsXG4gIFwiNzMxXCIsXG4gIFwiNzMyXCIsXG4gIFwiNzM0XCIsXG4gIFwiNzM3XCIsXG4gIFwiNzQwXCIsXG4gIFwiNzU0XCIsXG4gIFwiNzU3XCIsXG4gIFwiNzYwXCIsXG4gIFwiNzYzXCIsXG4gIFwiNzY1XCIsXG4gIFwiNzcwXCIsXG4gIFwiNzcyXCIsXG4gIFwiNzczXCIsXG4gIFwiNzc0XCIsXG4gIFwiNzc1XCIsXG4gIFwiNzgxXCIsXG4gIFwiNzg1XCIsXG4gIFwiNzg2XCIsXG4gIFwiODAxXCIsXG4gIFwiODAyXCIsXG4gIFwiODAzXCIsXG4gIFwiODA0XCIsXG4gIFwiODA1XCIsXG4gIFwiODA2XCIsXG4gIFwiODA4XCIsXG4gIFwiODEwXCIsXG4gIFwiODEyXCIsXG4gIFwiODEzXCIsXG4gIFwiODE0XCIsXG4gIFwiODE1XCIsXG4gIFwiODE2XCIsXG4gIFwiODE3XCIsXG4gIFwiODE4XCIsXG4gIFwiODI4XCIsXG4gIFwiODMwXCIsXG4gIFwiODMxXCIsXG4gIFwiODMyXCIsXG4gIFwiODM1XCIsXG4gIFwiODQzXCIsXG4gIFwiODQ1XCIsXG4gIFwiODQ3XCIsXG4gIFwiODQ4XCIsXG4gIFwiODUwXCIsXG4gIFwiODU2XCIsXG4gIFwiODU3XCIsXG4gIFwiODU4XCIsXG4gIFwiODU5XCIsXG4gIFwiODYwXCIsXG4gIFwiODYyXCIsXG4gIFwiODYzXCIsXG4gIFwiODY0XCIsXG4gIFwiODY1XCIsXG4gIFwiODcwXCIsXG4gIFwiODcyXCIsXG4gIFwiODc4XCIsXG4gIFwiOTAxXCIsXG4gIFwiOTAzXCIsXG4gIFwiOTA0XCIsXG4gIFwiOTA2XCIsXG4gIFwiOTA3XCIsXG4gIFwiOTA4XCIsXG4gIFwiOTA5XCIsXG4gIFwiOTEwXCIsXG4gIFwiOTEyXCIsXG4gIFwiOTEzXCIsXG4gIFwiOTE0XCIsXG4gIFwiOTE1XCIsXG4gIFwiOTE2XCIsXG4gIFwiOTE3XCIsXG4gIFwiOTE4XCIsXG4gIFwiOTE5XCIsXG4gIFwiOTIwXCIsXG4gIFwiOTI1XCIsXG4gIFwiOTI4XCIsXG4gIFwiOTMxXCIsXG4gIFwiOTM2XCIsXG4gIFwiOTM3XCIsXG4gIFwiOTQwXCIsXG4gIFwiOTQxXCIsXG4gIFwiOTQ3XCIsXG4gIFwiOTQ5XCIsXG4gIFwiOTUyXCIsXG4gIFwiOTU0XCIsXG4gIFwiOTU2XCIsXG4gIFwiOTU5XCIsXG4gIFwiOTcwXCIsXG4gIFwiOTcxXCIsXG4gIFwiOTcyXCIsXG4gIFwiOTczXCIsXG4gIFwiOTc1XCIsXG4gIFwiOTc4XCIsXG4gIFwiOTc5XCIsXG4gIFwiOTgwXCIsXG4gIFwiOTg0XCIsXG4gIFwiOTg1XCIsXG4gIFwiOTg5XCJcbl07XG4iLCJtb2R1bGVbXCJleHBvcnRzXCJdID0gW1xuICBcIjIwMVwiLFxuICBcIjIwMlwiLFxuICBcIjIwM1wiLFxuICBcIjIwNVwiLFxuICBcIjIwNlwiLFxuICBcIjIwN1wiLFxuICBcIjIwOFwiLFxuICBcIjIwOVwiLFxuICBcIjIxMFwiLFxuICBcIjIxMlwiLFxuICBcIjIxM1wiLFxuICBcIjIxNFwiLFxuICBcIjIxNVwiLFxuICBcIjIxNlwiLFxuICBcIjIxN1wiLFxuICBcIjIxOFwiLFxuICBcIjIxOVwiLFxuICBcIjIyNFwiLFxuICBcIjIyNVwiLFxuICBcIjIyN1wiLFxuICBcIjIyOFwiLFxuICBcIjIyOVwiLFxuICBcIjIzMVwiLFxuICBcIjIzNFwiLFxuICBcIjIzOVwiLFxuICBcIjI0MFwiLFxuICBcIjI0OFwiLFxuICBcIjI1MVwiLFxuICBcIjI1MlwiLFxuICBcIjI1M1wiLFxuICBcIjI1NFwiLFxuICBcIjI1NlwiLFxuICBcIjI2MFwiLFxuICBcIjI2MlwiLFxuICBcIjI2N1wiLFxuICBcIjI2OVwiLFxuICBcIjI3MFwiLFxuICBcIjI3NlwiLFxuICBcIjI4MVwiLFxuICBcIjI4M1wiLFxuICBcIjMwMVwiLFxuICBcIjMwMlwiLFxuICBcIjMwM1wiLFxuICBcIjMwNFwiLFxuICBcIjMwNVwiLFxuICBcIjMwN1wiLFxuICBcIjMwOFwiLFxuICBcIjMwOVwiLFxuICBcIjMxMFwiLFxuICBcIjMxMlwiLFxuICBcIjMxM1wiLFxuICBcIjMxNFwiLFxuICBcIjMxNVwiLFxuICBcIjMxNlwiLFxuICBcIjMxN1wiLFxuICBcIjMxOFwiLFxuICBcIjMxOVwiLFxuICBcIjMyMFwiLFxuICBcIjMyMVwiLFxuICBcIjMyM1wiLFxuICBcIjMzMFwiLFxuICBcIjMzMVwiLFxuICBcIjMzNFwiLFxuICBcIjMzNlwiLFxuICBcIjMzN1wiLFxuICBcIjMzOVwiLFxuICBcIjM0N1wiLFxuICBcIjM1MVwiLFxuICBcIjM1MlwiLFxuICBcIjM2MFwiLFxuICBcIjM2MVwiLFxuICBcIjM4NlwiLFxuICBcIjQwMVwiLFxuICBcIjQwMlwiLFxuICBcIjQwNFwiLFxuICBcIjQwNVwiLFxuICBcIjQwNlwiLFxuICBcIjQwN1wiLFxuICBcIjQwOFwiLFxuICBcIjQwOVwiLFxuICBcIjQxMFwiLFxuICBcIjQxMlwiLFxuICBcIjQxM1wiLFxuICBcIjQxNFwiLFxuICBcIjQxNVwiLFxuICBcIjQxN1wiLFxuICBcIjQxOVwiLFxuICBcIjQyM1wiLFxuICBcIjQyNFwiLFxuICBcIjQyNVwiLFxuICBcIjQzNFwiLFxuICBcIjQzNVwiLFxuICBcIjQ0MFwiLFxuICBcIjQ0M1wiLFxuICBcIjQ0NVwiLFxuICBcIjQ2NFwiLFxuICBcIjQ2OVwiLFxuICBcIjQ3MFwiLFxuICBcIjQ3NVwiLFxuICBcIjQ3OFwiLFxuICBcIjQ3OVwiLFxuICBcIjQ4MFwiLFxuICBcIjQ4NFwiLFxuICBcIjUwMVwiLFxuICBcIjUwMlwiLFxuICBcIjUwM1wiLFxuICBcIjUwNFwiLFxuICBcIjUwNVwiLFxuICBcIjUwN1wiLFxuICBcIjUwOFwiLFxuICBcIjUwOVwiLFxuICBcIjUxMFwiLFxuICBcIjUxMlwiLFxuICBcIjUxM1wiLFxuICBcIjUxNVwiLFxuICBcIjUxNlwiLFxuICBcIjUxN1wiLFxuICBcIjUxOFwiLFxuICBcIjUyMFwiLFxuICBcIjUzMFwiLFxuICBcIjU0MFwiLFxuICBcIjU0MVwiLFxuICBcIjU1MVwiLFxuICBcIjU1N1wiLFxuICBcIjU1OVwiLFxuICBcIjU2MVwiLFxuICBcIjU2MlwiLFxuICBcIjU2M1wiLFxuICBcIjU2NFwiLFxuICBcIjU2N1wiLFxuICBcIjU3MFwiLFxuICBcIjU3MVwiLFxuICBcIjU3M1wiLFxuICBcIjU3NFwiLFxuICBcIjU4MFwiLFxuICBcIjU4NVwiLFxuICBcIjU4NlwiLFxuICBcIjYwMVwiLFxuICBcIjYwMlwiLFxuICBcIjYwM1wiLFxuICBcIjYwNVwiLFxuICBcIjYwNlwiLFxuICBcIjYwN1wiLFxuICBcIjYwOFwiLFxuICBcIjYwOVwiLFxuICBcIjYxMFwiLFxuICBcIjYxMlwiLFxuICBcIjYxNFwiLFxuICBcIjYxNVwiLFxuICBcIjYxNlwiLFxuICBcIjYxN1wiLFxuICBcIjYxOFwiLFxuICBcIjYxOVwiLFxuICBcIjYyMFwiLFxuICBcIjYyM1wiLFxuICBcIjYyNlwiLFxuICBcIjYzMFwiLFxuICBcIjYzMVwiLFxuICBcIjYzNlwiLFxuICBcIjY0MVwiLFxuICBcIjY0NlwiLFxuICBcIjY1MFwiLFxuICBcIjY1MVwiLFxuICBcIjY2MFwiLFxuICBcIjY2MVwiLFxuICBcIjY2MlwiLFxuICBcIjY2N1wiLFxuICBcIjY3OFwiLFxuICBcIjY4MlwiLFxuICBcIjcwMVwiLFxuICBcIjcwMlwiLFxuICBcIjcwM1wiLFxuICBcIjcwNFwiLFxuICBcIjcwNlwiLFxuICBcIjcwN1wiLFxuICBcIjcwOFwiLFxuICBcIjcxMlwiLFxuICBcIjcxM1wiLFxuICBcIjcxNFwiLFxuICBcIjcxNVwiLFxuICBcIjcxNlwiLFxuICBcIjcxN1wiLFxuICBcIjcxOFwiLFxuICBcIjcxOVwiLFxuICBcIjcyMFwiLFxuICBcIjcyNFwiLFxuICBcIjcyN1wiLFxuICBcIjczMVwiLFxuICBcIjczMlwiLFxuICBcIjczNFwiLFxuICBcIjczN1wiLFxuICBcIjc0MFwiLFxuICBcIjc1NFwiLFxuICBcIjc1N1wiLFxuICBcIjc2MFwiLFxuICBcIjc2M1wiLFxuICBcIjc2NVwiLFxuICBcIjc3MFwiLFxuICBcIjc3MlwiLFxuICBcIjc3M1wiLFxuICBcIjc3NFwiLFxuICBcIjc3NVwiLFxuICBcIjc4MVwiLFxuICBcIjc4NVwiLFxuICBcIjc4NlwiLFxuICBcIjgwMVwiLFxuICBcIjgwMlwiLFxuICBcIjgwM1wiLFxuICBcIjgwNFwiLFxuICBcIjgwNVwiLFxuICBcIjgwNlwiLFxuICBcIjgwOFwiLFxuICBcIjgxMFwiLFxuICBcIjgxMlwiLFxuICBcIjgxM1wiLFxuICBcIjgxNFwiLFxuICBcIjgxNVwiLFxuICBcIjgxNlwiLFxuICBcIjgxN1wiLFxuICBcIjgxOFwiLFxuICBcIjgyOFwiLFxuICBcIjgzMFwiLFxuICBcIjgzMVwiLFxuICBcIjgzMlwiLFxuICBcIjgzNVwiLFxuICBcIjg0M1wiLFxuICBcIjg0NVwiLFxuICBcIjg0N1wiLFxuICBcIjg0OFwiLFxuICBcIjg1MFwiLFxuICBcIjg1NlwiLFxuICBcIjg1N1wiLFxuICBcIjg1OFwiLFxuICBcIjg1OVwiLFxuICBcIjg2MFwiLFxuICBcIjg2MlwiLFxuICBcIjg2M1wiLFxuICBcIjg2NFwiLFxuICBcIjg2NVwiLFxuICBcIjg3MFwiLFxuICBcIjg3MlwiLFxuICBcIjg3OFwiLFxuICBcIjkwMVwiLFxuICBcIjkwM1wiLFxuICBcIjkwNFwiLFxuICBcIjkwNlwiLFxuICBcIjkwN1wiLFxuICBcIjkwOFwiLFxuICBcIjkwOVwiLFxuICBcIjkxMFwiLFxuICBcIjkxMlwiLFxuICBcIjkxM1wiLFxuICBcIjkxNFwiLFxuICBcIjkxNVwiLFxuICBcIjkxNlwiLFxuICBcIjkxN1wiLFxuICBcIjkxOFwiLFxuICBcIjkxOVwiLFxuICBcIjkyMFwiLFxuICBcIjkyNVwiLFxuICBcIjkyOFwiLFxuICBcIjkzMVwiLFxuICBcIjkzNlwiLFxuICBcIjkzN1wiLFxuICBcIjk0MFwiLFxuICBcIjk0MVwiLFxuICBcIjk0N1wiLFxuICBcIjk0OVwiLFxuICBcIjk1MlwiLFxuICBcIjk1NFwiLFxuICBcIjk1NlwiLFxuICBcIjk1OVwiLFxuICBcIjk3MFwiLFxuICBcIjk3MVwiLFxuICBcIjk3MlwiLFxuICBcIjk3M1wiLFxuICBcIjk3NVwiLFxuICBcIjk3OFwiLFxuICBcIjk3OVwiLFxuICBcIjk4MFwiLFxuICBcIjk4NFwiLFxuICBcIjk4NVwiLFxuICBcIjk4OVwiXG5dO1xuIiwidmFyIHBob25lX251bWJlciA9IHt9O1xubW9kdWxlWydleHBvcnRzJ10gPSBwaG9uZV9udW1iZXI7XG5waG9uZV9udW1iZXIuYXJlYV9jb2RlID0gcmVxdWlyZShcIi4vYXJlYV9jb2RlXCIpO1xucGhvbmVfbnVtYmVyLmV4Y2hhbmdlX2NvZGUgPSByZXF1aXJlKFwiLi9leGNoYW5nZV9jb2RlXCIpO1xuIiwiXG4vKipcbiAqXG4gKiBAbmFtZXNwYWNlIGZha2VyLmxvcmVtXG4gKi9cbnZhciBMb3JlbSA9IGZ1bmN0aW9uIChmYWtlcikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBIZWxwZXJzID0gZmFrZXIuaGVscGVycztcblxuICAvKipcbiAgICogd29yZFxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmxvcmVtLndvcmRcbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bVxuICAgKi9cbiAgc2VsZi53b3JkID0gZnVuY3Rpb24gKG51bSkge1xuICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmRlZmluaXRpb25zLmxvcmVtLndvcmRzKTtcbiAgfTtcblxuICAvKipcbiAgICogZ2VuZXJhdGVzIGEgc3BhY2Ugc2VwYXJhdGVkIGxpc3Qgb2Ygd29yZHNcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5sb3JlbS53b3Jkc1xuICAgKiBAcGFyYW0ge251bWJlcn0gbnVtIG51bWJlciBvZiB3b3JkcywgZGVmYXVsdHMgdG8gM1xuICAgKi9cbiAgc2VsZi53b3JkcyA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICAgIGlmICh0eXBlb2YgbnVtID09ICd1bmRlZmluZWQnKSB7IG51bSA9IDM7IH1cbiAgICAgIHZhciB3b3JkcyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW07IGkrKykge1xuICAgICAgICB3b3Jkcy5wdXNoKGZha2VyLmxvcmVtLndvcmQoKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd29yZHMuam9pbignICcpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBzZW50ZW5jZVxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmxvcmVtLnNlbnRlbmNlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3b3JkQ291bnQgZGVmYXVsdHMgdG8gYSByYW5kb20gbnVtYmVyIGJldHdlZW4gMyBhbmQgMTBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhbmdlXG4gICAqL1xuICBzZWxmLnNlbnRlbmNlID0gZnVuY3Rpb24gKHdvcmRDb3VudCwgcmFuZ2UpIHtcbiAgICAgIGlmICh0eXBlb2Ygd29yZENvdW50ID09ICd1bmRlZmluZWQnKSB7IHdvcmRDb3VudCA9IGZha2VyLnJhbmRvbS5udW1iZXIoeyBtaW46IDMsIG1heDogMTAgfSk7IH1cbiAgICAgIC8vIGlmICh0eXBlb2YgcmFuZ2UgPT0gJ3VuZGVmaW5lZCcpIHsgcmFuZ2UgPSA3OyB9XG5cbiAgICAgIC8vIHN0cmFuZ2UgaXNzdWUgd2l0aCB0aGUgbm9kZV9taW5fdGVzdCBmYWlsaW5nIGZvciBjYXB0aWFsaXplLCBwbGVhc2UgZml4IGFuZCBhZGQgZmFrZXIubG9yZW0uYmFja1xuICAgICAgLy9yZXR1cm4gIGZha2VyLmxvcmVtLndvcmRzKHdvcmRDb3VudCArIEhlbHBlcnMucmFuZG9tTnVtYmVyKHJhbmdlKSkuam9pbignICcpLmNhcGl0YWxpemUoKTtcblxuICAgICAgdmFyIHNlbnRlbmNlID0gZmFrZXIubG9yZW0ud29yZHMod29yZENvdW50KTtcbiAgICAgIHJldHVybiBzZW50ZW5jZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHNlbnRlbmNlLnNsaWNlKDEpICsgJy4nO1xuICB9O1xuXG4gIC8qKlxuICAgKiBzbHVnXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIubG9yZW0uc2x1Z1xuICAgKiBAcGFyYW0ge251bWJlcn0gd29yZENvdW50IG51bWJlciBvZiB3b3JkcywgZGVmYXVsdHMgdG8gM1xuICAgKi9cbiAgc2VsZi5zbHVnID0gZnVuY3Rpb24gKHdvcmRDb3VudCkge1xuICAgICAgdmFyIHdvcmRzID0gZmFrZXIubG9yZW0ud29yZHMod29yZENvdW50KTtcbiAgICAgIHJldHVybiBIZWxwZXJzLnNsdWdpZnkod29yZHMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBzZW50ZW5jZXNcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5sb3JlbS5zZW50ZW5jZXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNlbnRlbmNlQ291bnQgZGVmYXV0bHMgdG8gYSByYW5kb20gbnVtYmVyIGJldHdlZW4gMiBhbmQgNlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VwYXJhdG9yIGRlZmF1bHRzIHRvIGAnICdgXG4gICAqL1xuICBzZWxmLnNlbnRlbmNlcyA9IGZ1bmN0aW9uIChzZW50ZW5jZUNvdW50LCBzZXBhcmF0b3IpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2VudGVuY2VDb3VudCA9PT0gJ3VuZGVmaW5lZCcpIHsgc2VudGVuY2VDb3VudCA9IGZha2VyLnJhbmRvbS5udW1iZXIoeyBtaW46IDIsIG1heDogNiB9KTt9XG4gICAgICBpZiAodHlwZW9mIHNlcGFyYXRvciA9PSAndW5kZWZpbmVkJykgeyBzZXBhcmF0b3IgPSBcIiBcIjsgfVxuICAgICAgdmFyIHNlbnRlbmNlcyA9IFtdO1xuICAgICAgZm9yIChzZW50ZW5jZUNvdW50OyBzZW50ZW5jZUNvdW50ID4gMDsgc2VudGVuY2VDb3VudC0tKSB7XG4gICAgICAgIHNlbnRlbmNlcy5wdXNoKGZha2VyLmxvcmVtLnNlbnRlbmNlKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbnRlbmNlcy5qb2luKHNlcGFyYXRvcik7XG4gIH07XG5cbiAgLyoqXG4gICAqIHBhcmFncmFwaFxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLmxvcmVtLnBhcmFncmFwaFxuICAgKiBAcGFyYW0ge251bWJlcn0gc2VudGVuY2VDb3VudCBkZWZhdWx0cyB0byAzXG4gICAqL1xuICBzZWxmLnBhcmFncmFwaCA9IGZ1bmN0aW9uIChzZW50ZW5jZUNvdW50KSB7XG4gICAgICBpZiAodHlwZW9mIHNlbnRlbmNlQ291bnQgPT0gJ3VuZGVmaW5lZCcpIHsgc2VudGVuY2VDb3VudCA9IDM7IH1cbiAgICAgIHJldHVybiBmYWtlci5sb3JlbS5zZW50ZW5jZXMoc2VudGVuY2VDb3VudCArIGZha2VyLnJhbmRvbS5udW1iZXIoMykpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBwYXJhZ3JhcGhzXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIubG9yZW0ucGFyYWdyYXBoc1xuICAgKiBAcGFyYW0ge251bWJlcn0gcGFyYWdyYXBoQ291bnQgZGVmYXVsdHMgdG8gM1xuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VwYXJhdG9yIGRlZmF1bHRzIHRvIGAnXFxuIFxccidgXG4gICAqL1xuICBzZWxmLnBhcmFncmFwaHMgPSBmdW5jdGlvbiAocGFyYWdyYXBoQ291bnQsIHNlcGFyYXRvcikge1xuICAgIGlmICh0eXBlb2Ygc2VwYXJhdG9yID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBzZXBhcmF0b3IgPSBcIlxcbiBcXHJcIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXJhZ3JhcGhDb3VudCA9PSAndW5kZWZpbmVkJykgeyBwYXJhZ3JhcGhDb3VudCA9IDM7IH1cbiAgICB2YXIgcGFyYWdyYXBocyA9IFtdO1xuICAgIGZvciAocGFyYWdyYXBoQ291bnQ7IHBhcmFncmFwaENvdW50ID4gMDsgcGFyYWdyYXBoQ291bnQtLSkge1xuICAgICAgICBwYXJhZ3JhcGhzLnB1c2goZmFrZXIubG9yZW0ucGFyYWdyYXBoKCkpO1xuICAgIH1cbiAgICByZXR1cm4gcGFyYWdyYXBocy5qb2luKHNlcGFyYXRvcik7XG4gIH1cblxuICAvKipcbiAgICogcmV0dXJucyByYW5kb20gdGV4dCBiYXNlZCBvbiBhIHJhbmRvbSBsb3JlbSBtZXRob2RcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5sb3JlbS50ZXh0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc1xuICAgKi9cbiAgc2VsZi50ZXh0ID0gZnVuY3Rpb24gbG9yZW1UZXh0ICh0aW1lcykge1xuICAgIHZhciBsb3JlbU1ldGhvZHMgPSBbJ2xvcmVtLndvcmQnLCAnbG9yZW0ud29yZHMnLCAnbG9yZW0uc2VudGVuY2UnLCAnbG9yZW0uc2VudGVuY2VzJywgJ2xvcmVtLnBhcmFncmFwaCcsICdsb3JlbS5wYXJhZ3JhcGhzJywgJ2xvcmVtLmxpbmVzJ107XG4gICAgdmFyIHJhbmRvbUxvcmVtTWV0aG9kID0gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChsb3JlbU1ldGhvZHMpO1xuICAgIHJldHVybiBmYWtlci5mYWtlKCd7eycgKyByYW5kb21Mb3JlbU1ldGhvZCArICd9fScpO1xuICB9O1xuXG4gIC8qKlxuICAgKiByZXR1cm5zIGxpbmVzIG9mIGxvcmVtIHNlcGFyYXRlZCBieSBgJ1xcbidgXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIubG9yZW0ubGluZXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxpbmVDb3VudCBkZWZhdWx0cyB0byBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiAxIGFuZCA1XG4gICAqL1xuICBzZWxmLmxpbmVzID0gZnVuY3Rpb24gbGluZXMgKGxpbmVDb3VudCkge1xuICAgIGlmICh0eXBlb2YgbGluZUNvdW50ID09PSAndW5kZWZpbmVkJykgeyBsaW5lQ291bnQgPSBmYWtlci5yYW5kb20ubnVtYmVyKHsgbWluOiAxLCBtYXg6IDUgfSk7fVxuICAgIHJldHVybiBmYWtlci5sb3JlbS5zZW50ZW5jZXMobGluZUNvdW50LCAnXFxuJylcbiAgfTtcblxuICByZXR1cm4gc2VsZjtcbn07XG5cblxubW9kdWxlW1wiZXhwb3J0c1wiXSA9IExvcmVtO1xuIiwiLyoqXG4gKlxuICogQG5hbWVzcGFjZSBmYWtlci5uYW1lXG4gKi9cbmZ1bmN0aW9uIE5hbWUgKGZha2VyKSB7XG5cbiAgLyoqXG4gICAqIGZpcnN0TmFtZVxuICAgKlxuICAgKiBAbWV0aG9kIGZpcnN0TmFtZVxuICAgKiBAcGFyYW0ge21peGVkfSBnZW5kZXJcbiAgICogQG1lbWJlcm9mIGZha2VyLm5hbWVcbiAgICovXG4gIHRoaXMuZmlyc3ROYW1lID0gZnVuY3Rpb24gKGdlbmRlcikge1xuICAgIGlmICh0eXBlb2YgZmFrZXIuZGVmaW5pdGlvbnMubmFtZS5tYWxlX2ZpcnN0X25hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGZha2VyLmRlZmluaXRpb25zLm5hbWUuZmVtYWxlX2ZpcnN0X25hbWUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIC8vIHNvbWUgbG9jYWxlIGRhdGFzZXRzICggbGlrZSBydSApIGhhdmUgZmlyc3RfbmFtZSBzcGxpdCBieSBnZW5kZXIuIHNpbmNlIHRoZSBuYW1lLmZpcnN0X25hbWUgZmllbGQgZG9lcyBub3QgZXhpc3QgaW4gdGhlc2UgZGF0YXNldHMsXG4gICAgICAvLyB3ZSBtdXN0IHJhbmRvbWx5IHBpY2sgYSBuYW1lIGZyb20gZWl0aGVyIGdlbmRlciBhcnJheSBzbyBmYWtlci5uYW1lLmZpcnN0TmFtZSB3aWxsIHJldHVybiB0aGUgY29ycmVjdCBsb2NhbGUgZGF0YSAoIGFuZCBub3QgZmFsbGJhY2sgKVxuICAgICAgaWYgKHR5cGVvZiBnZW5kZXIgIT09ICdudW1iZXInKSB7XG4gICAgICAgIGdlbmRlciA9IGZha2VyLnJhbmRvbS5udW1iZXIoMSk7XG4gICAgICB9XG4gICAgICBpZiAoZ2VuZGVyID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmxvY2FsZXNbZmFrZXIubG9jYWxlXS5uYW1lLm1hbGVfZmlyc3RfbmFtZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmxvY2FsZXNbZmFrZXIubG9jYWxlXS5uYW1lLmZlbWFsZV9maXJzdF9uYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoZmFrZXIuZGVmaW5pdGlvbnMubmFtZS5maXJzdF9uYW1lKTtcbiAgfTtcblxuICAvKipcbiAgICogbGFzdE5hbWVcbiAgICpcbiAgICogQG1ldGhvZCBsYXN0TmFtZVxuICAgKiBAcGFyYW0ge21peGVkfSBnZW5kZXJcbiAgICogQG1lbWJlcm9mIGZha2VyLm5hbWVcbiAgICovXG4gIHRoaXMubGFzdE5hbWUgPSBmdW5jdGlvbiAoZ2VuZGVyKSB7XG4gICAgaWYgKHR5cGVvZiBmYWtlci5kZWZpbml0aW9ucy5uYW1lLm1hbGVfbGFzdF9uYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBmYWtlci5kZWZpbml0aW9ucy5uYW1lLmZlbWFsZV9sYXN0X25hbWUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIC8vIHNvbWUgbG9jYWxlIGRhdGFzZXRzICggbGlrZSBydSApIGhhdmUgbGFzdF9uYW1lIHNwbGl0IGJ5IGdlbmRlci4gaSBoYXZlIG5vIGlkZWEgaG93IGxhc3QgbmFtZXMgY2FuIGhhdmUgZ2VuZGVycywgYnV0IGFsc28gaSBkbyBub3Qgc3BlYWsgcnVzc2lhblxuICAgICAgLy8gc2VlIGFib3ZlIGNvbW1lbnQgb2YgZmlyc3ROYW1lIG1ldGhvZFxuICAgICAgaWYgKHR5cGVvZiBnZW5kZXIgIT09ICdudW1iZXInKSB7XG4gICAgICAgIGdlbmRlciA9IGZha2VyLnJhbmRvbS5udW1iZXIoMSk7XG4gICAgICB9XG4gICAgICBpZiAoZ2VuZGVyID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmxvY2FsZXNbZmFrZXIubG9jYWxlXS5uYW1lLm1hbGVfbGFzdF9uYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmxvY2FsZXNbZmFrZXIubG9jYWxlXS5uYW1lLmZlbWFsZV9sYXN0X25hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5uYW1lLmxhc3RfbmFtZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIGZpbmROYW1lXG4gICAqXG4gICAqIEBtZXRob2QgZmluZE5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpcnN0TmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGFzdE5hbWVcbiAgICogQHBhcmFtIHttaXhlZH0gZ2VuZGVyXG4gICAqIEBtZW1iZXJvZiBmYWtlci5uYW1lXG4gICAqL1xuICB0aGlzLmZpbmROYW1lID0gZnVuY3Rpb24gKGZpcnN0TmFtZSwgbGFzdE5hbWUsIGdlbmRlcikge1xuICAgICAgdmFyIHIgPSBmYWtlci5yYW5kb20ubnVtYmVyKDgpO1xuICAgICAgdmFyIHByZWZpeCwgc3VmZml4O1xuICAgICAgLy8gaW4gcGFydGljdWxhciBsb2NhbGVzIGZpcnN0IGFuZCBsYXN0IG5hbWVzIHNwbGl0IGJ5IGdlbmRlcixcbiAgICAgIC8vIHRodXMgd2Uga2VlcCBjb25zaXN0ZW5jeSBieSBwYXNzaW5nIDAgYXMgbWFsZSBhbmQgMSBhcyBmZW1hbGVcbiAgICAgIGlmICh0eXBlb2YgZ2VuZGVyICE9PSAnbnVtYmVyJykge1xuICAgICAgICBnZW5kZXIgPSBmYWtlci5yYW5kb20ubnVtYmVyKDEpO1xuICAgICAgfVxuICAgICAgZmlyc3ROYW1lID0gZmlyc3ROYW1lIHx8IGZha2VyLm5hbWUuZmlyc3ROYW1lKGdlbmRlcik7XG4gICAgICBsYXN0TmFtZSA9IGxhc3ROYW1lIHx8IGZha2VyLm5hbWUubGFzdE5hbWUoZ2VuZGVyKTtcbiAgICAgIHN3aXRjaCAocikge1xuICAgICAgY2FzZSAwOlxuICAgICAgICAgIHByZWZpeCA9IGZha2VyLm5hbWUucHJlZml4KGdlbmRlcik7XG4gICAgICAgICAgaWYgKHByZWZpeCkge1xuICAgICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgXCIgXCIgKyBmaXJzdE5hbWUgKyBcIiBcIiArIGxhc3ROYW1lO1xuICAgICAgICAgIH1cbiAgICAgIGNhc2UgMTpcbiAgICAgICAgICBzdWZmaXggPSBmYWtlci5uYW1lLnN1ZmZpeChnZW5kZXIpO1xuICAgICAgICAgIGlmIChzdWZmaXgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0TmFtZSArIFwiIFwiICsgbGFzdE5hbWUgKyBcIiBcIiArIHN1ZmZpeDtcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmaXJzdE5hbWUgKyBcIiBcIiArIGxhc3ROYW1lO1xuICB9O1xuXG4gIC8qKlxuICAgKiBqb2JUaXRsZVxuICAgKlxuICAgKiBAbWV0aG9kIGpvYlRpdGxlXG4gICAqIEBtZW1iZXJvZiBmYWtlci5uYW1lXG4gICAqL1xuICB0aGlzLmpvYlRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAgZmFrZXIubmFtZS5qb2JEZXNjcmlwdG9yKCkgKyBcIiBcIiArXG4gICAgICBmYWtlci5uYW1lLmpvYkFyZWEoKSArIFwiIFwiICtcbiAgICAgIGZha2VyLm5hbWUuam9iVHlwZSgpO1xuICB9O1xuICBcbiAgLyoqXG4gICAqIHByZWZpeFxuICAgKlxuICAgKiBAbWV0aG9kIHByZWZpeFxuICAgKiBAcGFyYW0ge21peGVkfSBnZW5kZXJcbiAgICogQG1lbWJlcm9mIGZha2VyLm5hbWVcbiAgICovXG4gIHRoaXMucHJlZml4ID0gZnVuY3Rpb24gKGdlbmRlcikge1xuICAgIGlmICh0eXBlb2YgZmFrZXIuZGVmaW5pdGlvbnMubmFtZS5tYWxlX3ByZWZpeCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgZmFrZXIuZGVmaW5pdGlvbnMubmFtZS5mZW1hbGVfcHJlZml4ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAodHlwZW9mIGdlbmRlciAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgZ2VuZGVyID0gZmFrZXIucmFuZG9tLm51bWJlcigxKTtcbiAgICAgIH1cbiAgICAgIGlmIChnZW5kZXIgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoZmFrZXIubG9jYWxlc1tmYWtlci5sb2NhbGVdLm5hbWUubWFsZV9wcmVmaXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoZmFrZXIubG9jYWxlc1tmYWtlci5sb2NhbGVdLm5hbWUuZmVtYWxlX3ByZWZpeCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmRlZmluaXRpb25zLm5hbWUucHJlZml4KTtcbiAgfTtcblxuICAvKipcbiAgICogc3VmZml4XG4gICAqXG4gICAqIEBtZXRob2Qgc3VmZml4XG4gICAqIEBtZW1iZXJvZiBmYWtlci5uYW1lXG4gICAqL1xuICB0aGlzLnN1ZmZpeCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmRlZmluaXRpb25zLm5hbWUuc3VmZml4KTtcbiAgfTtcblxuICAvKipcbiAgICogdGl0bGVcbiAgICpcbiAgICogQG1ldGhvZCB0aXRsZVxuICAgKiBAbWVtYmVyb2YgZmFrZXIubmFtZVxuICAgKi9cbiAgdGhpcy50aXRsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgID0gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5uYW1lLnRpdGxlLmRlc2NyaXB0b3IpLFxuICAgICAgICAgIGxldmVsICAgICAgID0gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5uYW1lLnRpdGxlLmxldmVsKSxcbiAgICAgICAgICBqb2IgICAgICAgICA9IGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoZmFrZXIuZGVmaW5pdGlvbnMubmFtZS50aXRsZS5qb2IpO1xuXG4gICAgICByZXR1cm4gZGVzY3JpcHRvciArIFwiIFwiICsgbGV2ZWwgKyBcIiBcIiArIGpvYjtcbiAgfTtcblxuICAvKipcbiAgICogam9iRGVzY3JpcHRvclxuICAgKlxuICAgKiBAbWV0aG9kIGpvYkRlc2NyaXB0b3JcbiAgICogQG1lbWJlcm9mIGZha2VyLm5hbWVcbiAgICovXG4gIHRoaXMuam9iRGVzY3JpcHRvciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChmYWtlci5kZWZpbml0aW9ucy5uYW1lLnRpdGxlLmRlc2NyaXB0b3IpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBqb2JBcmVhXG4gICAqXG4gICAqIEBtZXRob2Qgam9iQXJlYVxuICAgKiBAbWVtYmVyb2YgZmFrZXIubmFtZVxuICAgKi9cbiAgdGhpcy5qb2JBcmVhID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmRlZmluaXRpb25zLm5hbWUudGl0bGUubGV2ZWwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBqb2JUeXBlXG4gICAqXG4gICAqIEBtZXRob2Qgam9iVHlwZVxuICAgKiBAbWVtYmVyb2YgZmFrZXIubmFtZVxuICAgKi9cbiAgdGhpcy5qb2JUeXBlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KGZha2VyLmRlZmluaXRpb25zLm5hbWUudGl0bGUuam9iKTtcbiAgfTtcblxufVxuXG5tb2R1bGVbJ2V4cG9ydHMnXSA9IE5hbWU7XG4iLCIvKipcbiAqXG4gKiBAbmFtZXNwYWNlIGZha2VyLnBob25lXG4gKi9cbnZhciBQaG9uZSA9IGZ1bmN0aW9uIChmYWtlcikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLyoqXG4gICAqIHBob25lTnVtYmVyXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIucGhvbmUucGhvbmVOdW1iZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZvcm1hdFxuICAgKi9cbiAgc2VsZi5waG9uZU51bWJlciA9IGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCBmYWtlci5waG9uZS5waG9uZUZvcm1hdHMoKTtcbiAgICAgIHJldHVybiBmYWtlci5oZWxwZXJzLnJlcGxhY2VTeW1ib2xXaXRoTnVtYmVyKGZvcm1hdCk7XG4gIH07XG5cbiAgLy8gRklYTUU6IHRoaXMgaXMgc3RyYW5nZSBwYXNzaW5nIGluIGFuIGFycmF5IGluZGV4LlxuICAvKipcbiAgICogcGhvbmVOdW1iZXJGb3JtYXRcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5waG9uZS5waG9uZUZvcm1hdHNBcnJheUluZGV4XG4gICAqIEBwYXJhbSBwaG9uZUZvcm1hdHNBcnJheUluZGV4XG4gICAqL1xuICBzZWxmLnBob25lTnVtYmVyRm9ybWF0ID0gZnVuY3Rpb24gKHBob25lRm9ybWF0c0FycmF5SW5kZXgpIHtcbiAgICAgIHBob25lRm9ybWF0c0FycmF5SW5kZXggPSBwaG9uZUZvcm1hdHNBcnJheUluZGV4IHx8IDA7XG4gICAgICByZXR1cm4gZmFrZXIuaGVscGVycy5yZXBsYWNlU3ltYm9sV2l0aE51bWJlcihmYWtlci5kZWZpbml0aW9ucy5waG9uZV9udW1iZXIuZm9ybWF0c1twaG9uZUZvcm1hdHNBcnJheUluZGV4XSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIHBob25lRm9ybWF0c1xuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLnBob25lLnBob25lRm9ybWF0c1xuICAgKi9cbiAgc2VsZi5waG9uZUZvcm1hdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoZmFrZXIuZGVmaW5pdGlvbnMucGhvbmVfbnVtYmVyLmZvcm1hdHMpO1xuICB9O1xuICBcbiAgcmV0dXJuIHNlbGY7XG5cbn07XG5cbm1vZHVsZVsnZXhwb3J0cyddID0gUGhvbmU7IiwidmFyIG1lcnNlbm5lID0gcmVxdWlyZSgnLi4vdmVuZG9yL21lcnNlbm5lJyk7XG5cbi8qKlxuICpcbiAqIEBuYW1lc3BhY2UgZmFrZXIucmFuZG9tXG4gKi9cbmZ1bmN0aW9uIFJhbmRvbSAoZmFrZXIsIHNlZWQpIHtcbiAgLy8gVXNlIGEgdXNlciBwcm92aWRlZCBzZWVkIGlmIGl0IGV4aXN0c1xuICBpZiAoc2VlZCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNlZWQpICYmIHNlZWQubGVuZ3RoKSB7XG4gICAgICBtZXJzZW5uZS5zZWVkX2FycmF5KHNlZWQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIG1lcnNlbm5lLnNlZWQoc2VlZCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiByZXR1cm5zIGEgc2luZ2xlIHJhbmRvbSBudW1iZXIgYmFzZWQgb24gYSBtYXggbnVtYmVyIG9yIHJhbmdlXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIucmFuZG9tLm51bWJlclxuICAgKiBAcGFyYW0ge21peGVkfSBvcHRpb25zXG4gICAqL1xuICB0aGlzLm51bWJlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIG1heDogb3B0aW9uc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5taW4gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIG9wdGlvbnMubWluID0gMDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMubWF4ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBvcHRpb25zLm1heCA9IDk5OTk5O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucHJlY2lzaW9uID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBvcHRpb25zLnByZWNpc2lvbiA9IDE7XG4gICAgfVxuXG4gICAgLy8gTWFrZSB0aGUgcmFuZ2UgaW5jbHVzaXZlIG9mIHRoZSBtYXggdmFsdWVcbiAgICB2YXIgbWF4ID0gb3B0aW9ucy5tYXg7XG4gICAgaWYgKG1heCA+PSAwKSB7XG4gICAgICBtYXggKz0gb3B0aW9ucy5wcmVjaXNpb247XG4gICAgfVxuXG4gICAgdmFyIHJhbmRvbU51bWJlciA9IG9wdGlvbnMucHJlY2lzaW9uICogTWF0aC5mbG9vcihcbiAgICAgIG1lcnNlbm5lLnJhbmQobWF4IC8gb3B0aW9ucy5wcmVjaXNpb24sIG9wdGlvbnMubWluIC8gb3B0aW9ucy5wcmVjaXNpb24pKTtcblxuICAgIHJldHVybiByYW5kb21OdW1iZXI7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiB0YWtlcyBhbiBhcnJheSBhbmQgcmV0dXJucyBhIHJhbmRvbSBlbGVtZW50IG9mIHRoZSBhcnJheVxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnRcbiAgICogQHBhcmFtIHthcnJheX0gYXJyYXlcbiAgICovXG4gIHRoaXMuYXJyYXlFbGVtZW50ID0gZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgICBhcnJheSA9IGFycmF5IHx8IFtcImFcIiwgXCJiXCIsIFwiY1wiXTtcbiAgICAgIHZhciByID0gZmFrZXIucmFuZG9tLm51bWJlcih7IG1heDogYXJyYXkubGVuZ3RoIC0gMSB9KTtcbiAgICAgIHJldHVybiBhcnJheVtyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiB0YWtlcyBhbiBvYmplY3QgYW5kIHJldHVybnMgdGhlIHJhbmRvbWx5IGtleSBvciB2YWx1ZVxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLnJhbmRvbS5vYmplY3RFbGVtZW50XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHttaXhlZH0gZmllbGRcbiAgICovXG4gIHRoaXMub2JqZWN0RWxlbWVudCA9IGZ1bmN0aW9uIChvYmplY3QsIGZpZWxkKSB7XG4gICAgICBvYmplY3QgPSBvYmplY3QgfHwgeyBcImZvb1wiOiBcImJhclwiLCBcInRvb1wiOiBcImNhclwiIH07XG4gICAgICB2YXIgYXJyYXkgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICAgICAgdmFyIGtleSA9IGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoYXJyYXkpO1xuXG4gICAgICByZXR1cm4gZmllbGQgPT09IFwia2V5XCIgPyBrZXkgOiBvYmplY3Rba2V5XTtcbiAgfVxuXG4gIC8qKlxuICAgKiB1dWlkXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIucmFuZG9tLnV1aWRcbiAgICovXG4gIHRoaXMudXVpZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBSRkM0MTIyX1RFTVBMQVRFID0gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCc7XG4gICAgICB2YXIgcmVwbGFjZVBsYWNlaG9sZGVycyA9IGZ1bmN0aW9uIChwbGFjZWhvbGRlcikge1xuICAgICAgICAgIHZhciByYW5kb20gPSBzZWxmLm51bWJlcih7IG1pbjogMCwgbWF4OiAxNSB9KTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBwbGFjZWhvbGRlciA9PSAneCcgPyByYW5kb20gOiAocmFuZG9tICYweDMgfCAweDgpO1xuICAgICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygxNik7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIFJGQzQxMjJfVEVNUExBVEUucmVwbGFjZSgvW3h5XS9nLCByZXBsYWNlUGxhY2Vob2xkZXJzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBib29sZWFuXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIucmFuZG9tLmJvb2xlYW5cbiAgICovXG4gIHRoaXMuYm9vbGVhbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAhIWZha2VyLnJhbmRvbS5udW1iZXIoMSlcbiAgfVxuXG4gIC8vIFRPRE86IGhhdmUgYWJpbGl0eSB0byByZXR1cm4gc3BlY2lmaWMgdHlwZSBvZiB3b3JkPyBBcyBpbjogbm91biwgYWRqZWN0aXZlLCB2ZXJiLCBldGNcbiAgLyoqXG4gICAqIHdvcmRcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5yYW5kb20ud29yZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKi9cbiAgdGhpcy53b3JkID0gZnVuY3Rpb24gcmFuZG9tV29yZCAodHlwZSkge1xuXG4gICAgdmFyIHdvcmRNZXRob2RzID0gW1xuICAgICdjb21tZXJjZS5kZXBhcnRtZW50JyxcbiAgICAnY29tbWVyY2UucHJvZHVjdE5hbWUnLFxuICAgICdjb21tZXJjZS5wcm9kdWN0QWRqZWN0aXZlJyxcbiAgICAnY29tbWVyY2UucHJvZHVjdE1hdGVyaWFsJyxcbiAgICAnY29tbWVyY2UucHJvZHVjdCcsXG4gICAgJ2NvbW1lcmNlLmNvbG9yJyxcblxuICAgICdjb21wYW55LmNhdGNoUGhyYXNlQWRqZWN0aXZlJyxcbiAgICAnY29tcGFueS5jYXRjaFBocmFzZURlc2NyaXB0b3InLFxuICAgICdjb21wYW55LmNhdGNoUGhyYXNlTm91bicsXG4gICAgJ2NvbXBhbnkuYnNBZGplY3RpdmUnLFxuICAgICdjb21wYW55LmJzQnV6eicsXG4gICAgJ2NvbXBhbnkuYnNOb3VuJyxcbiAgICAnYWRkcmVzcy5zdHJlZXRTdWZmaXgnLFxuICAgICdhZGRyZXNzLmNvdW50eScsXG4gICAgJ2FkZHJlc3MuY291bnRyeScsXG4gICAgJ2FkZHJlc3Muc3RhdGUnLFxuXG4gICAgJ2ZpbmFuY2UuYWNjb3VudE5hbWUnLFxuICAgICdmaW5hbmNlLnRyYW5zYWN0aW9uVHlwZScsXG4gICAgJ2ZpbmFuY2UuY3VycmVuY3lOYW1lJyxcblxuICAgICdoYWNrZXIubm91bicsXG4gICAgJ2hhY2tlci52ZXJiJyxcbiAgICAnaGFja2VyLmFkamVjdGl2ZScsXG4gICAgJ2hhY2tlci5pbmd2ZXJiJyxcbiAgICAnaGFja2VyLmFiYnJldmlhdGlvbicsXG5cbiAgICAnbmFtZS5qb2JEZXNjcmlwdG9yJyxcbiAgICAnbmFtZS5qb2JBcmVhJyxcbiAgICAnbmFtZS5qb2JUeXBlJ107XG5cbiAgICAvLyByYW5kb21seSBwaWNrIGZyb20gdGhlIG1hbnkgZmFrZXIgbWV0aG9kcyB0aGF0IGNhbiBnZW5lcmF0ZSB3b3Jkc1xuICAgIHZhciByYW5kb21Xb3JkTWV0aG9kID0gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudCh3b3JkTWV0aG9kcyk7XG4gICAgcmV0dXJuIGZha2VyLmZha2UoJ3t7JyArIHJhbmRvbVdvcmRNZXRob2QgKyAnfX0nKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIHJhbmRvbVdvcmRzXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIucmFuZG9tLndvcmRzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCBkZWZhdWx0cyB0byBhIHJhbmRvbSB2YWx1ZSBiZXR3ZWVuIDEgYW5kIDNcbiAgICovXG4gIHRoaXMud29yZHMgPSBmdW5jdGlvbiByYW5kb21Xb3JkcyAoY291bnQpIHtcbiAgICB2YXIgd29yZHMgPSBbXTtcbiAgICBpZiAodHlwZW9mIGNvdW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjb3VudCA9IGZha2VyLnJhbmRvbS5udW1iZXIoe21pbjoxLCBtYXg6IDN9KTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGk8Y291bnQ7IGkrKykge1xuICAgICAgd29yZHMucHVzaChmYWtlci5yYW5kb20ud29yZCgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHdvcmRzLmpvaW4oJyAnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBsb2NhbGVcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5yYW5kb20uaW1hZ2VcbiAgICovXG4gIHRoaXMuaW1hZ2UgPSBmdW5jdGlvbiByYW5kb21JbWFnZSAoKSB7XG4gICAgcmV0dXJuIGZha2VyLmltYWdlLmltYWdlKCk7XG4gIH1cblxuICAvKipcbiAgICogbG9jYWxlXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIucmFuZG9tLmxvY2FsZVxuICAgKi9cbiAgdGhpcy5sb2NhbGUgPSBmdW5jdGlvbiByYW5kb21Mb2NhbGUgKCkge1xuICAgIHJldHVybiBmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KE9iamVjdC5rZXlzKGZha2VyLmxvY2FsZXMpKTtcbiAgfTtcblxuICAvKipcbiAgICogYWxwaGFOdW1lcmljXG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIucmFuZG9tLmFscGhhTnVtZXJpY1xuICAgKiBAcGFyYW0ge251bWJlcn0gY291bnQgZGVmYXVsdHMgdG8gMVxuICAgKi9cbiAgdGhpcy5hbHBoYU51bWVyaWMgPSBmdW5jdGlvbiBhbHBoYU51bWVyaWMoY291bnQpIHtcbiAgICBpZiAodHlwZW9mIGNvdW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjb3VudCA9IDE7XG4gICAgfVxuXG4gICAgdmFyIHdob2xlU3RyaW5nID0gXCJcIjtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgd2hvbGVTdHJpbmcgKz0gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChbXCIwXCIsIFwiMVwiLCBcIjJcIiwgXCIzXCIsIFwiNFwiLCBcIjVcIiwgXCI2XCIsIFwiN1wiLCBcIjhcIiwgXCI5XCIsIFwiYVwiLCBcImJcIiwgXCJjXCIsIFwiZFwiLCBcImVcIiwgXCJmXCIsIFwiZ1wiLCBcImhcIiwgXCJpXCIsIFwialwiLCBcImtcIiwgXCJsXCIsIFwibVwiLCBcIm5cIiwgXCJvXCIsIFwicFwiLCBcInFcIiwgXCJyXCIsIFwic1wiLCBcInRcIiwgXCJ1XCIsIFwidlwiLCBcIndcIiwgXCJ4XCIsIFwieVwiLCBcInpcIl0pO1xuICAgIH1cblxuICAgIHJldHVybiB3aG9sZVN0cmluZztcbiAgfTtcblxuICByZXR1cm4gdGhpcztcblxufVxuXG5tb2R1bGVbJ2V4cG9ydHMnXSA9IFJhbmRvbTtcbiIsIi8vIGdlbmVyYXRlcyBmYWtlIGRhdGEgZm9yIG1hbnkgY29tcHV0ZXIgc3lzdGVtcyBwcm9wZXJ0aWVzXG5cbi8qKlxuICpcbiAqIEBuYW1lc3BhY2UgZmFrZXIuc3lzdGVtXG4gKi9cbmZ1bmN0aW9uIFN5c3RlbSAoZmFrZXIpIHtcblxuICAvKipcbiAgICogZ2VuZXJhdGVzIGEgZmlsZSBuYW1lIHdpdGggZXh0ZW5zaW9uIG9yIG9wdGlvbmFsIHR5cGVcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5zeXN0ZW0uZmlsZU5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV4dFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKi9cbiAgdGhpcy5maWxlTmFtZSA9IGZ1bmN0aW9uIChleHQsIHR5cGUpIHtcbiAgICB2YXIgc3RyID0gZmFrZXIuZmFrZShcInt7cmFuZG9tLndvcmRzfX0ue3tzeXN0ZW0uZmlsZUV4dH19XCIpO1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKC8gL2csICdfJyk7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UoL1xcLC9nLCAnXycpO1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9cXC0vZywgJ18nKTtcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvXFxcXC9nLCAnXycpO1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9cXC8vZywgJ18nKTtcbiAgICBzdHIgPSBzdHIudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIC8qKlxuICAgKiBjb21tb25GaWxlTmFtZVxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLnN5c3RlbS5jb21tb25GaWxlTmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXh0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAqL1xuICB0aGlzLmNvbW1vbkZpbGVOYW1lID0gZnVuY3Rpb24gKGV4dCwgdHlwZSkge1xuICAgIHZhciBzdHIgPSBmYWtlci5yYW5kb20ud29yZHMoKSArIFwiLlwiICsgKGV4dCB8fCBmYWtlci5zeXN0ZW0uY29tbW9uRmlsZUV4dCgpKTtcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvIC9nLCAnXycpO1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9cXCwvZywgJ18nKTtcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvXFwtL2csICdfJyk7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UoL1xcXFwvZywgJ18nKTtcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvXFwvL2csICdfJyk7XG4gICAgc3RyID0gc3RyLnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICAvKipcbiAgICogbWltZVR5cGVcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5zeXN0ZW0ubWltZVR5cGVcbiAgICovXG4gIHRoaXMubWltZVR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoT2JqZWN0LmtleXMoZmFrZXIuZGVmaW5pdGlvbnMuc3lzdGVtLm1pbWVUeXBlcykpO1xuICB9O1xuXG4gIC8qKlxuICAgKiByZXR1cm5zIGEgY29tbW9ubHkgdXNlZCBmaWxlIHR5cGVcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5zeXN0ZW0uY29tbW9uRmlsZVR5cGVcbiAgICovXG4gIHRoaXMuY29tbW9uRmlsZVR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHR5cGVzID0gWyd2aWRlbycsICdhdWRpbycsICdpbWFnZScsICd0ZXh0JywgJ2FwcGxpY2F0aW9uJ107XG4gICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQodHlwZXMpXG4gIH07XG5cbiAgLyoqXG4gICAqIHJldHVybnMgYSBjb21tb25seSB1c2VkIGZpbGUgZXh0ZW5zaW9uIGJhc2VkIG9uIG9wdGlvbmFsIHR5cGVcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5zeXN0ZW0uY29tbW9uRmlsZUV4dFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgKi9cbiAgdGhpcy5jb21tb25GaWxlRXh0ID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICB2YXIgdHlwZXMgPSBbXG4gICAgICAnYXBwbGljYXRpb24vcGRmJyxcbiAgICAgICdhdWRpby9tcGVnJyxcbiAgICAgICdhdWRpby93YXYnLFxuICAgICAgJ2ltYWdlL3BuZycsXG4gICAgICAnaW1hZ2UvanBlZycsXG4gICAgICAnaW1hZ2UvZ2lmJyxcbiAgICAgICd2aWRlby9tcDQnLFxuICAgICAgJ3ZpZGVvL21wZWcnLFxuICAgICAgJ3RleHQvaHRtbCdcbiAgICBdO1xuICAgIHJldHVybiBmYWtlci5zeXN0ZW0uZmlsZUV4dChmYWtlci5yYW5kb20uYXJyYXlFbGVtZW50KHR5cGVzKSk7XG4gIH07XG5cblxuICAvKipcbiAgICogcmV0dXJucyBhbnkgZmlsZSB0eXBlIGF2YWlsYWJsZSBhcyBtaW1lLXR5cGVcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5zeXN0ZW0uZmlsZVR5cGVcbiAgICovXG4gIHRoaXMuZmlsZVR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHR5cGVzID0gW107XG4gICAgdmFyIG1pbWVzID0gZmFrZXIuZGVmaW5pdGlvbnMuc3lzdGVtLm1pbWVUeXBlcztcbiAgICBPYmplY3Qua2V5cyhtaW1lcykuZm9yRWFjaChmdW5jdGlvbihtKXtcbiAgICAgIHZhciBwYXJ0cyA9IG0uc3BsaXQoJy8nKTtcbiAgICAgIGlmICh0eXBlcy5pbmRleE9mKHBhcnRzWzBdKSA9PT0gLTEpIHtcbiAgICAgICAgdHlwZXMucHVzaChwYXJ0c1swXSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQodHlwZXMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBmaWxlRXh0XG4gICAqXG4gICAqIEBtZXRob2QgZmFrZXIuc3lzdGVtLmZpbGVFeHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1pbWVUeXBlXG4gICAqL1xuICB0aGlzLmZpbGVFeHQgPSBmdW5jdGlvbiAobWltZVR5cGUpIHtcbiAgICB2YXIgZXh0cyA9IFtdO1xuICAgIHZhciBtaW1lcyA9IGZha2VyLmRlZmluaXRpb25zLnN5c3RlbS5taW1lVHlwZXM7XG5cbiAgICAvLyBnZXQgc3BlY2lmaWMgZXh0IGJ5IG1pbWUtdHlwZVxuICAgIGlmICh0eXBlb2YgbWltZXNbbWltZVR5cGVdID09PSBcIm9iamVjdFwiKSB7XG4gICAgICByZXR1cm4gZmFrZXIucmFuZG9tLmFycmF5RWxlbWVudChtaW1lc1ttaW1lVHlwZV0uZXh0ZW5zaW9ucyk7XG4gICAgfVxuXG4gICAgLy8gcmVkdWNlIG1pbWUtdHlwZXMgdG8gdGhvc2Ugd2l0aCBmaWxlLWV4dGVuc2lvbnNcbiAgICBPYmplY3Qua2V5cyhtaW1lcykuZm9yRWFjaChmdW5jdGlvbihtKXtcbiAgICAgIGlmIChtaW1lc1ttXS5leHRlbnNpb25zIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgbWltZXNbbV0uZXh0ZW5zaW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGV4dCl7XG4gICAgICAgICAgZXh0cy5wdXNoKGV4dClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGZha2VyLnJhbmRvbS5hcnJheUVsZW1lbnQoZXh0cyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIG5vdCB5ZXQgaW1wbGVtZW50ZWRcbiAgICpcbiAgICogQG1ldGhvZCBmYWtlci5zeXN0ZW0uZGlyZWN0b3J5UGF0aFxuICAgKi9cbiAgdGhpcy5kaXJlY3RvcnlQYXRoID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIFRPRE9cbiAgfTtcblxuICAvKipcbiAgICogbm90IHlldCBpbXBsZW1lbnRlZFxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLnN5c3RlbS5maWxlUGF0aFxuICAgKi9cbiAgdGhpcy5maWxlUGF0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBUT0RPXG4gIH07XG5cbiAgLyoqXG4gICAqIHNlbXZlclxuICAgKlxuICAgKiBAbWV0aG9kIGZha2VyLnN5c3RlbS5zZW12ZXJcbiAgICovXG4gIHRoaXMuc2VtdmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFtmYWtlci5yYW5kb20ubnVtYmVyKDkpLFxuICAgICAgICAgICAgICBmYWtlci5yYW5kb20ubnVtYmVyKDkpLFxuICAgICAgICAgICAgICBmYWtlci5yYW5kb20ubnVtYmVyKDkpXS5qb2luKCcuJyk7XG4gIH1cblxufVxuXG5tb2R1bGVbJ2V4cG9ydHMnXSA9IFN5c3RlbTtcbiIsInZhciBGYWtlciA9IHJlcXVpcmUoJy4uL2xpYicpO1xudmFyIGZha2VyID0gbmV3IEZha2VyKHsgbG9jYWxlOiAnZW5fVVMnLCBsb2NhbGVGYWxsYmFjazogJ2VuJyB9KTtcbmZha2VyLmxvY2FsZXNbJ2VuX1VTJ10gPSByZXF1aXJlKCcuLi9saWIvbG9jYWxlcy9lbl9VUycpO1xuZmFrZXIubG9jYWxlc1snZW4nXSA9IHJlcXVpcmUoJy4uL2xpYi9sb2NhbGVzL2VuJyk7XG5tb2R1bGVbJ2V4cG9ydHMnXSA9IGZha2VyO1xuIiwiLy8gdGhpcyBwcm9ncmFtIGlzIGEgSmF2YVNjcmlwdCB2ZXJzaW9uIG9mIE1lcnNlbm5lIFR3aXN0ZXIsIHdpdGggY29uY2VhbG1lbnQgYW5kIGVuY2Fwc3VsYXRpb24gaW4gY2xhc3MsXG4vLyBhbiBhbG1vc3Qgc3RyYWlnaHQgY29udmVyc2lvbiBmcm9tIHRoZSBvcmlnaW5hbCBwcm9ncmFtLCBtdDE5OTM3YXIuYyxcbi8vIHRyYW5zbGF0ZWQgYnkgeS4gb2thZGEgb24gSnVseSAxNywgMjAwNi5cbi8vIGFuZCBtb2RpZmllZCBhIGxpdHRsZSBhdCBqdWx5IDIwLCAyMDA2LCBidXQgdGhlcmUgYXJlIG5vdCBhbnkgc3Vic3RhbnRpYWwgZGlmZmVyZW5jZXMuXG4vLyBpbiB0aGlzIHByb2dyYW0sIHByb2NlZHVyZSBkZXNjcmlwdGlvbnMgYW5kIGNvbW1lbnRzIG9mIG9yaWdpbmFsIHNvdXJjZSBjb2RlIHdlcmUgbm90IHJlbW92ZWQuXG4vLyBsaW5lcyBjb21tZW50ZWQgd2l0aCAvL2MvLyB3ZXJlIG9yaWdpbmFsbHkgZGVzY3JpcHRpb25zIG9mIGMgcHJvY2VkdXJlLiBhbmQgYSBmZXcgZm9sbG93aW5nIGxpbmVzIGFyZSBhcHByb3ByaWF0ZSBKYXZhU2NyaXB0IGRlc2NyaXB0aW9ucy5cbi8vIGxpbmVzIGNvbW1lbnRlZCB3aXRoIC8qIGFuZCAqLyBhcmUgb3JpZ2luYWwgY29tbWVudHMuXG4vLyBsaW5lcyBjb21tZW50ZWQgd2l0aCAvLyBhcmUgYWRkaXRpb25hbCBjb21tZW50cyBpbiB0aGlzIEphdmFTY3JpcHQgdmVyc2lvbi5cbi8vIGJlZm9yZSB1c2luZyB0aGlzIHZlcnNpb24sIGNyZWF0ZSBhdCBsZWFzdCBvbmUgaW5zdGFuY2Ugb2YgTWVyc2VubmVUd2lzdGVyMTk5MzcgY2xhc3MsIGFuZCBpbml0aWFsaXplIHRoZSBlYWNoIHN0YXRlLCBnaXZlbiBiZWxvdyBpbiBjIGNvbW1lbnRzLCBvZiBhbGwgdGhlIGluc3RhbmNlcy5cbi8qXG4gICBBIEMtcHJvZ3JhbSBmb3IgTVQxOTkzNywgd2l0aCBpbml0aWFsaXphdGlvbiBpbXByb3ZlZCAyMDAyLzEvMjYuXG4gICBDb2RlZCBieSBUYWt1amkgTmlzaGltdXJhIGFuZCBNYWtvdG8gTWF0c3Vtb3RvLlxuXG4gICBCZWZvcmUgdXNpbmcsIGluaXRpYWxpemUgdGhlIHN0YXRlIGJ5IHVzaW5nIGluaXRfZ2VucmFuZChzZWVkKVxuICAgb3IgaW5pdF9ieV9hcnJheShpbml0X2tleSwga2V5X2xlbmd0aCkuXG5cbiAgIENvcHlyaWdodCAoQykgMTk5NyAtIDIwMDIsIE1ha290byBNYXRzdW1vdG8gYW5kIFRha3VqaSBOaXNoaW11cmEsXG4gICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG4gICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAgIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uc1xuICAgYXJlIG1ldDpcblxuICAgICAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICAgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAgICAgMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAgICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICAgICAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gICAgIDMuIFRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGVcbiAgICAgICAgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuXG4gICAgICAgIHBlcm1pc3Npb24uXG5cbiAgIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAgIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAgIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICAgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIE9XTkVSIE9SXG4gICBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCxcbiAgIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTyxcbiAgIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUlxuICAgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICAgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkdcbiAgIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICAgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cblxuICAgQW55IGZlZWRiYWNrIGlzIHZlcnkgd2VsY29tZS5cbiAgIGh0dHA6Ly93d3cubWF0aC5zY2kuaGlyb3NoaW1hLXUuYWMuanAvfm0tbWF0L01UL2VtdC5odG1sXG4gICBlbWFpbDogbS1tYXQgQCBtYXRoLnNjaS5oaXJvc2hpbWEtdS5hYy5qcCAocmVtb3ZlIHNwYWNlKVxuKi9cblxuZnVuY3Rpb24gTWVyc2VubmVUd2lzdGVyMTk5MzcoKVxue1xuXHQvKiBjb25zdGFudHMgc2hvdWxkIGJlIHNjb3BlZCBpbnNpZGUgdGhlIGNsYXNzICovXG5cdHZhciBOLCBNLCBNQVRSSVhfQSwgVVBQRVJfTUFTSywgTE9XRVJfTUFTSztcblx0LyogUGVyaW9kIHBhcmFtZXRlcnMgKi9cblx0Ly9jLy8jZGVmaW5lIE4gNjI0XG5cdC8vYy8vI2RlZmluZSBNIDM5N1xuXHQvL2MvLyNkZWZpbmUgTUFUUklYX0EgMHg5OTA4YjBkZlVMICAgLyogY29uc3RhbnQgdmVjdG9yIGEgKi9cblx0Ly9jLy8jZGVmaW5lIFVQUEVSX01BU0sgMHg4MDAwMDAwMFVMIC8qIG1vc3Qgc2lnbmlmaWNhbnQgdy1yIGJpdHMgKi9cblx0Ly9jLy8jZGVmaW5lIExPV0VSX01BU0sgMHg3ZmZmZmZmZlVMIC8qIGxlYXN0IHNpZ25pZmljYW50IHIgYml0cyAqL1xuXHROID0gNjI0O1xuXHRNID0gMzk3O1xuXHRNQVRSSVhfQSA9IDB4OTkwOGIwZGY7ICAgLyogY29uc3RhbnQgdmVjdG9yIGEgKi9cblx0VVBQRVJfTUFTSyA9IDB4ODAwMDAwMDA7IC8qIG1vc3Qgc2lnbmlmaWNhbnQgdy1yIGJpdHMgKi9cblx0TE9XRVJfTUFTSyA9IDB4N2ZmZmZmZmY7IC8qIGxlYXN0IHNpZ25pZmljYW50IHIgYml0cyAqL1xuXHQvL2MvL3N0YXRpYyB1bnNpZ25lZCBsb25nIG10W05dOyAvKiB0aGUgYXJyYXkgZm9yIHRoZSBzdGF0ZSB2ZWN0b3IgICovXG5cdC8vYy8vc3RhdGljIGludCBtdGk9TisxOyAvKiBtdGk9PU4rMSBtZWFucyBtdFtOXSBpcyBub3QgaW5pdGlhbGl6ZWQgKi9cblx0dmFyIG10ID0gbmV3IEFycmF5KE4pOyAgIC8qIHRoZSBhcnJheSBmb3IgdGhlIHN0YXRlIHZlY3RvciAgKi9cblx0dmFyIG10aSA9IE4rMTsgICAgICAgICAgIC8qIG10aT09TisxIG1lYW5zIG10W05dIGlzIG5vdCBpbml0aWFsaXplZCAqL1xuXG5cdGZ1bmN0aW9uIHVuc2lnbmVkMzIgKG4xKSAvLyByZXR1cm5zIGEgMzItYml0cyB1bnNpZ2VkIGludGVnZXIgZnJvbSBhbiBvcGVyYW5kIHRvIHdoaWNoIGFwcGxpZWQgYSBiaXQgb3BlcmF0b3IuXG5cdHtcblx0XHRyZXR1cm4gbjEgPCAwID8gKG4xIF4gVVBQRVJfTUFTSykgKyBVUFBFUl9NQVNLIDogbjE7XG5cdH1cblxuXHRmdW5jdGlvbiBzdWJ0cmFjdGlvbjMyIChuMSwgbjIpIC8vIGVtdWxhdGVzIGxvd2VyZmxvdyBvZiBhIGMgMzItYml0cyB1bnNpZ2VkIGludGVnZXIgdmFyaWFibGUsIGluc3RlYWQgb2YgdGhlIG9wZXJhdG9yIC0uIHRoZXNlIGJvdGggYXJndW1lbnRzIG11c3QgYmUgbm9uLW5lZ2F0aXZlIGludGVnZXJzIGV4cHJlc3NpYmxlIHVzaW5nIHVuc2lnbmVkIDMyIGJpdHMuXG5cdHtcblx0XHRyZXR1cm4gbjEgPCBuMiA/IHVuc2lnbmVkMzIoKDB4MTAwMDAwMDAwIC0gKG4yIC0gbjEpKSAmIDB4ZmZmZmZmZmYpIDogbjEgLSBuMjtcblx0fVxuXG5cdGZ1bmN0aW9uIGFkZGl0aW9uMzIgKG4xLCBuMikgLy8gZW11bGF0ZXMgb3ZlcmZsb3cgb2YgYSBjIDMyLWJpdHMgdW5zaWdlZCBpbnRlZ2VyIHZhcmlhYmxlLCBpbnN0ZWFkIG9mIHRoZSBvcGVyYXRvciArLiB0aGVzZSBib3RoIGFyZ3VtZW50cyBtdXN0IGJlIG5vbi1uZWdhdGl2ZSBpbnRlZ2VycyBleHByZXNzaWJsZSB1c2luZyB1bnNpZ25lZCAzMiBiaXRzLlxuXHR7XG5cdFx0cmV0dXJuIHVuc2lnbmVkMzIoKG4xICsgbjIpICYgMHhmZmZmZmZmZilcblx0fVxuXG5cdGZ1bmN0aW9uIG11bHRpcGxpY2F0aW9uMzIgKG4xLCBuMikgLy8gZW11bGF0ZXMgb3ZlcmZsb3cgb2YgYSBjIDMyLWJpdHMgdW5zaWdlZCBpbnRlZ2VyIHZhcmlhYmxlLCBpbnN0ZWFkIG9mIHRoZSBvcGVyYXRvciAqLiB0aGVzZSBib3RoIGFyZ3VtZW50cyBtdXN0IGJlIG5vbi1uZWdhdGl2ZSBpbnRlZ2VycyBleHByZXNzaWJsZSB1c2luZyB1bnNpZ25lZCAzMiBiaXRzLlxuXHR7XG5cdFx0dmFyIHN1bSA9IDA7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAzMjsgKytpKXtcblx0XHRcdGlmICgobjEgPj4+IGkpICYgMHgxKXtcblx0XHRcdFx0c3VtID0gYWRkaXRpb24zMihzdW0sIHVuc2lnbmVkMzIobjIgPDwgaSkpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gc3VtO1xuXHR9XG5cblx0LyogaW5pdGlhbGl6ZXMgbXRbTl0gd2l0aCBhIHNlZWQgKi9cblx0Ly9jLy92b2lkIGluaXRfZ2VucmFuZCh1bnNpZ25lZCBsb25nIHMpXG5cdHRoaXMuaW5pdF9nZW5yYW5kID0gZnVuY3Rpb24gKHMpXG5cdHtcblx0XHQvL2MvL210WzBdPSBzICYgMHhmZmZmZmZmZjtcblx0XHRtdFswXT0gdW5zaWduZWQzMihzICYgMHhmZmZmZmZmZik7XG5cdFx0Zm9yIChtdGk9MTsgbXRpPE47IG10aSsrKSB7XG5cdFx0XHRtdFttdGldID1cblx0XHRcdC8vYy8vKDE4MTI0MzMyNTMgKiAobXRbbXRpLTFdIF4gKG10W210aS0xXSA+PiAzMCkpICsgbXRpKTtcblx0XHRcdGFkZGl0aW9uMzIobXVsdGlwbGljYXRpb24zMigxODEyNDMzMjUzLCB1bnNpZ25lZDMyKG10W210aS0xXSBeIChtdFttdGktMV0gPj4+IDMwKSkpLCBtdGkpO1xuXHRcdFx0LyogU2VlIEtudXRoIFRBT0NQIFZvbDIuIDNyZCBFZC4gUC4xMDYgZm9yIG11bHRpcGxpZXIuICovXG5cdFx0XHQvKiBJbiB0aGUgcHJldmlvdXMgdmVyc2lvbnMsIE1TQnMgb2YgdGhlIHNlZWQgYWZmZWN0ICAgKi9cblx0XHRcdC8qIG9ubHkgTVNCcyBvZiB0aGUgYXJyYXkgbXRbXS4gICAgICAgICAgICAgICAgICAgICAgICAqL1xuXHRcdFx0LyogMjAwMi8wMS8wOSBtb2RpZmllZCBieSBNYWtvdG8gTWF0c3Vtb3RvICAgICAgICAgICAgICovXG5cdFx0XHQvL2MvL210W210aV0gJj0gMHhmZmZmZmZmZjtcblx0XHRcdG10W210aV0gPSB1bnNpZ25lZDMyKG10W210aV0gJiAweGZmZmZmZmZmKTtcblx0XHRcdC8qIGZvciA+MzIgYml0IG1hY2hpbmVzICovXG5cdFx0fVxuXHR9XG5cblx0LyogaW5pdGlhbGl6ZSBieSBhbiBhcnJheSB3aXRoIGFycmF5LWxlbmd0aCAqL1xuXHQvKiBpbml0X2tleSBpcyB0aGUgYXJyYXkgZm9yIGluaXRpYWxpemluZyBrZXlzICovXG5cdC8qIGtleV9sZW5ndGggaXMgaXRzIGxlbmd0aCAqL1xuXHQvKiBzbGlnaHQgY2hhbmdlIGZvciBDKyssIDIwMDQvMi8yNiAqL1xuXHQvL2MvL3ZvaWQgaW5pdF9ieV9hcnJheSh1bnNpZ25lZCBsb25nIGluaXRfa2V5W10sIGludCBrZXlfbGVuZ3RoKVxuXHR0aGlzLmluaXRfYnlfYXJyYXkgPSBmdW5jdGlvbiAoaW5pdF9rZXksIGtleV9sZW5ndGgpXG5cdHtcblx0XHQvL2MvL2ludCBpLCBqLCBrO1xuXHRcdHZhciBpLCBqLCBrO1xuXHRcdC8vYy8vaW5pdF9nZW5yYW5kKDE5NjUwMjE4KTtcblx0XHR0aGlzLmluaXRfZ2VucmFuZCgxOTY1MDIxOCk7XG5cdFx0aT0xOyBqPTA7XG5cdFx0ayA9IChOPmtleV9sZW5ndGggPyBOIDoga2V5X2xlbmd0aCk7XG5cdFx0Zm9yICg7IGs7IGstLSkge1xuXHRcdFx0Ly9jLy9tdFtpXSA9IChtdFtpXSBeICgobXRbaS0xXSBeIChtdFtpLTFdID4+IDMwKSkgKiAxNjY0NTI1KSlcblx0XHRcdC8vYy8vXHQrIGluaXRfa2V5W2pdICsgajsgLyogbm9uIGxpbmVhciAqL1xuXHRcdFx0bXRbaV0gPSBhZGRpdGlvbjMyKGFkZGl0aW9uMzIodW5zaWduZWQzMihtdFtpXSBeIG11bHRpcGxpY2F0aW9uMzIodW5zaWduZWQzMihtdFtpLTFdIF4gKG10W2ktMV0gPj4+IDMwKSksIDE2NjQ1MjUpKSwgaW5pdF9rZXlbal0pLCBqKTtcblx0XHRcdG10W2ldID1cblx0XHRcdC8vYy8vbXRbaV0gJj0gMHhmZmZmZmZmZjsgLyogZm9yIFdPUkRTSVpFID4gMzIgbWFjaGluZXMgKi9cblx0XHRcdHVuc2lnbmVkMzIobXRbaV0gJiAweGZmZmZmZmZmKTtcblx0XHRcdGkrKzsgaisrO1xuXHRcdFx0aWYgKGk+PU4pIHsgbXRbMF0gPSBtdFtOLTFdOyBpPTE7IH1cblx0XHRcdGlmIChqPj1rZXlfbGVuZ3RoKSBqPTA7XG5cdFx0fVxuXHRcdGZvciAoaz1OLTE7IGs7IGstLSkge1xuXHRcdFx0Ly9jLy9tdFtpXSA9IChtdFtpXSBeICgobXRbaS0xXSBeIChtdFtpLTFdID4+IDMwKSkgKiAxNTY2MDgzOTQxKSlcblx0XHRcdC8vYy8vLSBpOyAvKiBub24gbGluZWFyICovXG5cdFx0XHRtdFtpXSA9IHN1YnRyYWN0aW9uMzIodW5zaWduZWQzMigoZGJnPW10W2ldKSBeIG11bHRpcGxpY2F0aW9uMzIodW5zaWduZWQzMihtdFtpLTFdIF4gKG10W2ktMV0gPj4+IDMwKSksIDE1NjYwODM5NDEpKSwgaSk7XG5cdFx0XHQvL2MvL210W2ldICY9IDB4ZmZmZmZmZmY7IC8qIGZvciBXT1JEU0laRSA+IDMyIG1hY2hpbmVzICovXG5cdFx0XHRtdFtpXSA9IHVuc2lnbmVkMzIobXRbaV0gJiAweGZmZmZmZmZmKTtcblx0XHRcdGkrKztcblx0XHRcdGlmIChpPj1OKSB7IG10WzBdID0gbXRbTi0xXTsgaT0xOyB9XG5cdFx0fVxuXHRcdG10WzBdID0gMHg4MDAwMDAwMDsgLyogTVNCIGlzIDE7IGFzc3VyaW5nIG5vbi16ZXJvIGluaXRpYWwgYXJyYXkgKi9cblx0fVxuXG4gICAgLyogbW92ZWQgb3V0c2lkZSBvZiBnZW5yYW5kX2ludDMyKCkgYnkgandhdHRlIDIwMTAtMTEtMTc7IGdlbmVyYXRlIGxlc3MgZ2FyYmFnZSAqL1xuICAgIHZhciBtYWcwMSA9IFsweDAsIE1BVFJJWF9BXTtcblxuXHQvKiBnZW5lcmF0ZXMgYSByYW5kb20gbnVtYmVyIG9uIFswLDB4ZmZmZmZmZmZdLWludGVydmFsICovXG5cdC8vYy8vdW5zaWduZWQgbG9uZyBnZW5yYW5kX2ludDMyKHZvaWQpXG5cdHRoaXMuZ2VucmFuZF9pbnQzMiA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHQvL2MvL3Vuc2lnbmVkIGxvbmcgeTtcblx0XHQvL2MvL3N0YXRpYyB1bnNpZ25lZCBsb25nIG1hZzAxWzJdPXsweDBVTCwgTUFUUklYX0F9O1xuXHRcdHZhciB5O1xuXHRcdC8qIG1hZzAxW3hdID0geCAqIE1BVFJJWF9BICBmb3IgeD0wLDEgKi9cblxuXHRcdGlmIChtdGkgPj0gTikgeyAvKiBnZW5lcmF0ZSBOIHdvcmRzIGF0IG9uZSB0aW1lICovXG5cdFx0XHQvL2MvL2ludCBraztcblx0XHRcdHZhciBraztcblxuXHRcdFx0aWYgKG10aSA9PSBOKzEpICAgLyogaWYgaW5pdF9nZW5yYW5kKCkgaGFzIG5vdCBiZWVuIGNhbGxlZCwgKi9cblx0XHRcdFx0Ly9jLy9pbml0X2dlbnJhbmQoNTQ4OSk7IC8qIGEgZGVmYXVsdCBpbml0aWFsIHNlZWQgaXMgdXNlZCAqL1xuXHRcdFx0XHR0aGlzLmluaXRfZ2VucmFuZCg1NDg5KTsgLyogYSBkZWZhdWx0IGluaXRpYWwgc2VlZCBpcyB1c2VkICovXG5cblx0XHRcdGZvciAoa2s9MDtrazxOLU07a2srKykge1xuXHRcdFx0XHQvL2MvL3kgPSAobXRba2tdJlVQUEVSX01BU0spfChtdFtraysxXSZMT1dFUl9NQVNLKTtcblx0XHRcdFx0Ly9jLy9tdFtra10gPSBtdFtraytNXSBeICh5ID4+IDEpIF4gbWFnMDFbeSAmIDB4MV07XG5cdFx0XHRcdHkgPSB1bnNpZ25lZDMyKChtdFtra10mVVBQRVJfTUFTSyl8KG10W2trKzFdJkxPV0VSX01BU0spKTtcblx0XHRcdFx0bXRba2tdID0gdW5zaWduZWQzMihtdFtraytNXSBeICh5ID4+PiAxKSBeIG1hZzAxW3kgJiAweDFdKTtcblx0XHRcdH1cblx0XHRcdGZvciAoO2trPE4tMTtraysrKSB7XG5cdFx0XHRcdC8vYy8veSA9IChtdFtra10mVVBQRVJfTUFTSyl8KG10W2trKzFdJkxPV0VSX01BU0spO1xuXHRcdFx0XHQvL2MvL210W2trXSA9IG10W2trKyhNLU4pXSBeICh5ID4+IDEpIF4gbWFnMDFbeSAmIDB4MV07XG5cdFx0XHRcdHkgPSB1bnNpZ25lZDMyKChtdFtra10mVVBQRVJfTUFTSyl8KG10W2trKzFdJkxPV0VSX01BU0spKTtcblx0XHRcdFx0bXRba2tdID0gdW5zaWduZWQzMihtdFtraysoTS1OKV0gXiAoeSA+Pj4gMSkgXiBtYWcwMVt5ICYgMHgxXSk7XG5cdFx0XHR9XG5cdFx0XHQvL2MvL3kgPSAobXRbTi0xXSZVUFBFUl9NQVNLKXwobXRbMF0mTE9XRVJfTUFTSyk7XG5cdFx0XHQvL2MvL210W04tMV0gPSBtdFtNLTFdIF4gKHkgPj4gMSkgXiBtYWcwMVt5ICYgMHgxXTtcblx0XHRcdHkgPSB1bnNpZ25lZDMyKChtdFtOLTFdJlVQUEVSX01BU0spfChtdFswXSZMT1dFUl9NQVNLKSk7XG5cdFx0XHRtdFtOLTFdID0gdW5zaWduZWQzMihtdFtNLTFdIF4gKHkgPj4+IDEpIF4gbWFnMDFbeSAmIDB4MV0pO1xuXHRcdFx0bXRpID0gMDtcblx0XHR9XG5cblx0XHR5ID0gbXRbbXRpKytdO1xuXG5cdFx0LyogVGVtcGVyaW5nICovXG5cdFx0Ly9jLy95IF49ICh5ID4+IDExKTtcblx0XHQvL2MvL3kgXj0gKHkgPDwgNykgJiAweDlkMmM1NjgwO1xuXHRcdC8vYy8veSBePSAoeSA8PCAxNSkgJiAweGVmYzYwMDAwO1xuXHRcdC8vYy8veSBePSAoeSA+PiAxOCk7XG5cdFx0eSA9IHVuc2lnbmVkMzIoeSBeICh5ID4+PiAxMSkpO1xuXHRcdHkgPSB1bnNpZ25lZDMyKHkgXiAoKHkgPDwgNykgJiAweDlkMmM1NjgwKSk7XG5cdFx0eSA9IHVuc2lnbmVkMzIoeSBeICgoeSA8PCAxNSkgJiAweGVmYzYwMDAwKSk7XG5cdFx0eSA9IHVuc2lnbmVkMzIoeSBeICh5ID4+PiAxOCkpO1xuXG5cdFx0cmV0dXJuIHk7XG5cdH1cblxuXHQvKiBnZW5lcmF0ZXMgYSByYW5kb20gbnVtYmVyIG9uIFswLDB4N2ZmZmZmZmZdLWludGVydmFsICovXG5cdC8vYy8vbG9uZyBnZW5yYW5kX2ludDMxKHZvaWQpXG5cdHRoaXMuZ2VucmFuZF9pbnQzMSA9IGZ1bmN0aW9uICgpXG5cdHtcblx0XHQvL2MvL3JldHVybiAoZ2VucmFuZF9pbnQzMigpPj4xKTtcblx0XHRyZXR1cm4gKHRoaXMuZ2VucmFuZF9pbnQzMigpPj4+MSk7XG5cdH1cblxuXHQvKiBnZW5lcmF0ZXMgYSByYW5kb20gbnVtYmVyIG9uIFswLDFdLXJlYWwtaW50ZXJ2YWwgKi9cblx0Ly9jLy9kb3VibGUgZ2VucmFuZF9yZWFsMSh2b2lkKVxuXHR0aGlzLmdlbnJhbmRfcmVhbDEgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0Ly9jLy9yZXR1cm4gZ2VucmFuZF9pbnQzMigpKigxLjAvNDI5NDk2NzI5NS4wKTtcblx0XHRyZXR1cm4gdGhpcy5nZW5yYW5kX2ludDMyKCkqKDEuMC80Mjk0OTY3Mjk1LjApO1xuXHRcdC8qIGRpdmlkZWQgYnkgMl4zMi0xICovXG5cdH1cblxuXHQvKiBnZW5lcmF0ZXMgYSByYW5kb20gbnVtYmVyIG9uIFswLDEpLXJlYWwtaW50ZXJ2YWwgKi9cblx0Ly9jLy9kb3VibGUgZ2VucmFuZF9yZWFsMih2b2lkKVxuXHR0aGlzLmdlbnJhbmRfcmVhbDIgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0Ly9jLy9yZXR1cm4gZ2VucmFuZF9pbnQzMigpKigxLjAvNDI5NDk2NzI5Ni4wKTtcblx0XHRyZXR1cm4gdGhpcy5nZW5yYW5kX2ludDMyKCkqKDEuMC80Mjk0OTY3Mjk2LjApO1xuXHRcdC8qIGRpdmlkZWQgYnkgMl4zMiAqL1xuXHR9XG5cblx0LyogZ2VuZXJhdGVzIGEgcmFuZG9tIG51bWJlciBvbiAoMCwxKS1yZWFsLWludGVydmFsICovXG5cdC8vYy8vZG91YmxlIGdlbnJhbmRfcmVhbDModm9pZClcblx0dGhpcy5nZW5yYW5kX3JlYWwzID0gZnVuY3Rpb24gKClcblx0e1xuXHRcdC8vYy8vcmV0dXJuICgoZ2VucmFuZF9pbnQzMigpKSArIDAuNSkqKDEuMC80Mjk0OTY3Mjk2LjApO1xuXHRcdHJldHVybiAoKHRoaXMuZ2VucmFuZF9pbnQzMigpKSArIDAuNSkqKDEuMC80Mjk0OTY3Mjk2LjApO1xuXHRcdC8qIGRpdmlkZWQgYnkgMl4zMiAqL1xuXHR9XG5cblx0LyogZ2VuZXJhdGVzIGEgcmFuZG9tIG51bWJlciBvbiBbMCwxKSB3aXRoIDUzLWJpdCByZXNvbHV0aW9uKi9cblx0Ly9jLy9kb3VibGUgZ2VucmFuZF9yZXM1Myh2b2lkKVxuXHR0aGlzLmdlbnJhbmRfcmVzNTMgPSBmdW5jdGlvbiAoKVxuXHR7XG5cdFx0Ly9jLy91bnNpZ25lZCBsb25nIGE9Z2VucmFuZF9pbnQzMigpPj41LCBiPWdlbnJhbmRfaW50MzIoKT4+Njtcblx0XHR2YXIgYT10aGlzLmdlbnJhbmRfaW50MzIoKT4+PjUsIGI9dGhpcy5nZW5yYW5kX2ludDMyKCk+Pj42O1xuXHRcdHJldHVybihhKjY3MTA4ODY0LjArYikqKDEuMC85MDA3MTk5MjU0NzQwOTkyLjApO1xuXHR9XG5cdC8qIFRoZXNlIHJlYWwgdmVyc2lvbnMgYXJlIGR1ZSB0byBJc2FrdSBXYWRhLCAyMDAyLzAxLzA5IGFkZGVkICovXG59XG5cbi8vICBFeHBvcnRzOiBQdWJsaWMgQVBJXG5cbi8vICBFeHBvcnQgdGhlIHR3aXN0ZXIgY2xhc3NcbmV4cG9ydHMuTWVyc2VubmVUd2lzdGVyMTk5MzcgPSBNZXJzZW5uZVR3aXN0ZXIxOTkzNztcblxuLy8gIEV4cG9ydCBhIHNpbXBsaWZpZWQgZnVuY3Rpb24gdG8gZ2VuZXJhdGUgcmFuZG9tIG51bWJlcnNcbnZhciBnZW4gPSBuZXcgTWVyc2VubmVUd2lzdGVyMTk5Mzc7XG5nZW4uaW5pdF9nZW5yYW5kKChuZXcgRGF0ZSkuZ2V0VGltZSgpICUgMTAwMDAwMDAwMCk7XG5cbi8vIEFkZGVkIG1heCwgbWluIHJhbmdlIGZ1bmN0aW9uYWxpdHksIE1hcmFrIFNxdWlyZXMgU2VwdCAxMSAyMDE0XG5leHBvcnRzLnJhbmQgPSBmdW5jdGlvbihtYXgsIG1pbikge1xuICAgIGlmIChtYXggPT09IHVuZGVmaW5lZClcbiAgICAgICAge1xuICAgICAgICBtaW4gPSAwO1xuICAgICAgICBtYXggPSAzMjc2ODtcbiAgICAgICAgfVxuICAgIHJldHVybiBNYXRoLmZsb29yKGdlbi5nZW5yYW5kX3JlYWwyKCkgKiAobWF4IC0gbWluKSArIG1pbik7XG59XG5leHBvcnRzLnNlZWQgPSBmdW5jdGlvbihTKSB7XG4gICAgaWYgKHR5cGVvZihTKSAhPSAnbnVtYmVyJylcbiAgICAgICAge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZWVkKFMpIG11c3QgdGFrZSBudW1lcmljIGFyZ3VtZW50OyBpcyBcIiArIHR5cGVvZihTKSk7XG4gICAgICAgIH1cbiAgICBnZW4uaW5pdF9nZW5yYW5kKFMpO1xufVxuZXhwb3J0cy5zZWVkX2FycmF5ID0gZnVuY3Rpb24oQSkge1xuICAgIGlmICh0eXBlb2YoQSkgIT0gJ29iamVjdCcpXG4gICAgICAgIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2VlZF9hcnJheShBKSBtdXN0IHRha2UgYXJyYXkgb2YgbnVtYmVyczsgaXMgXCIgKyB0eXBlb2YoQSkpO1xuICAgICAgICB9XG4gICAgZ2VuLmluaXRfYnlfYXJyYXkoQSk7XG59XG4iLCIvKlxuXG5Db3B5cmlnaHQgKGMpIDIwMTItMjAxNCBKZWZmcmV5IE1lYWxvXG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZFxuZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb25cbnRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmRcbnRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlXG5Tb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRVxuV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SXG5DT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG5PVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5CYXNlZCBsb29zZWx5IG9uIEx1a2EgUHVzaWMncyBQSFAgU2NyaXB0OiBodHRwOi8vMzYwcGVyY2VudHMuY29tL3Bvc3RzL3BocC1yYW5kb20tdXNlci1hZ2VudC1nZW5lcmF0b3IvXG5cblRoZSBsaWNlbnNlIGZvciB0aGF0IHNjcmlwdCBpcyBhcyBmb2xsb3dzOlxuXG5cIlRIRSBCRUVSLVdBUkUgTElDRU5TRVwiIChSZXZpc2lvbiA0Mik6XG5cbjxwdXNpYzkzQGdtYWlsLmNvbT4gd3JvdGUgdGhpcyBmaWxlLiBBcyBsb25nIGFzIHlvdSByZXRhaW4gdGhpcyBub3RpY2UgeW91IGNhbiBkbyB3aGF0ZXZlciB5b3Ugd2FudCB3aXRoIHRoaXMgc3R1ZmYuXG5JZiB3ZSBtZWV0IHNvbWUgZGF5LCBhbmQgeW91IHRoaW5rIHRoaXMgc3R1ZmYgaXMgd29ydGggaXQsIHlvdSBjYW4gYnV5IG1lIGEgYmVlciBpbiByZXR1cm4uIEx1a2EgUHVzaWNcbiovXG5cbmZ1bmN0aW9uIHJuZChhLCBiKSB7XG4gICAgLy9jYWxsaW5nIHJuZCgpIHdpdGggbm8gYXJndW1lbnRzIGlzIGlkZW50aWNhbCB0byBybmQoMCwgMTAwKVxuICAgIGEgPSBhIHx8IDA7XG4gICAgYiA9IGIgfHwgMTAwO1xuXG4gICAgaWYgKHR5cGVvZiBiID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgYSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgLy9ybmQoaW50IG1pbiwgaW50IG1heCkgcmV0dXJucyBpbnRlZ2VyIGJldHdlZW4gbWluLCBtYXhcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAobWluLCBtYXgpIHtcbiAgICAgICAgICAgIGlmIChtaW4gPiBtYXgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZXhwZWN0ZWQgbWluIDw9IG1heDsgZ290IG1pbiA9ICcgKyBtaW4gKyAnLCBtYXggPSAnICsgbWF4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluO1xuICAgICAgICB9KGEsIGIpKTtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpID09PSBcIltvYmplY3QgQXJyYXldXCIpIHtcbiAgICAgICAgLy9yZXR1cm5zIGEgcmFuZG9tIGVsZW1lbnQgZnJvbSBhcnJheSAoYSksIGV2ZW4gd2VpZ2h0aW5nXG4gICAgICAgIHJldHVybiBhW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGEubGVuZ3RoKV07XG4gICAgfVxuXG4gICAgaWYgKGEgJiYgdHlwZW9mIGEgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vcmV0dXJucyBhIHJhbmRvbSBrZXkgZnJvbSB0aGUgcGFzc2VkIG9iamVjdDsga2V5cyBhcmUgd2VpZ2h0ZWQgYnkgdGhlIGRlY2ltYWwgcHJvYmFiaWxpdHkgaW4gdGhlaXIgdmFsdWVcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICB2YXIgcmFuZCA9IHJuZCgwLCAxMDApIC8gMTAwLCBtaW4gPSAwLCBtYXggPSAwLCBrZXksIHJldHVybl92YWw7XG5cbiAgICAgICAgICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBtYXggPSBvYmpba2V5XSArIG1pbjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuX3ZhbCA9IGtleTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmQgPj0gbWluICYmIHJhbmQgPD0gbWF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtaW4gPSBtaW4gKyBvYmpba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXR1cm5fdmFsO1xuICAgICAgICB9KGEpKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8gcm5kLiAoJyArIChiID8gYSArICcsICcgKyBiIDogYSkgKyAnKScpO1xufVxuXG5mdW5jdGlvbiByYW5kb21MYW5nKCkge1xuICAgIHJldHVybiBybmQoWydBQicsICdBRicsICdBTicsICdBUicsICdBUycsICdBWicsICdCRScsICdCRycsICdCTicsICdCTycsICdCUicsICdCUycsICdDQScsICdDRScsICdDTycsICdDUycsXG4gICAgICAgICAgICAgICAgJ0NVJywgJ0NZJywgJ0RBJywgJ0RFJywgJ0VMJywgJ0VOJywgJ0VPJywgJ0VTJywgJ0VUJywgJ0VVJywgJ0ZBJywgJ0ZJJywgJ0ZKJywgJ0ZPJywgJ0ZSJywgJ0ZZJyxcbiAgICAgICAgICAgICAgICAnR0EnLCAnR0QnLCAnR0wnLCAnR1YnLCAnSEUnLCAnSEknLCAnSFInLCAnSFQnLCAnSFUnLCAnSFknLCAnSUQnLCAnSVMnLCAnSVQnLCAnSkEnLCAnSlYnLCAnS0EnLFxuICAgICAgICAgICAgICAgICdLRycsICdLTycsICdLVScsICdLVycsICdLWScsICdMQScsICdMQicsICdMSScsICdMTicsICdMVCcsICdMVicsICdNRycsICdNSycsICdNTicsICdNTycsICdNUycsXG4gICAgICAgICAgICAgICAgJ01UJywgJ01ZJywgJ05CJywgJ05FJywgJ05MJywgJ05OJywgJ05PJywgJ09DJywgJ1BMJywgJ1BUJywgJ1JNJywgJ1JPJywgJ1JVJywgJ1NDJywgJ1NFJywgJ1NLJyxcbiAgICAgICAgICAgICAgICAnU0wnLCAnU08nLCAnU1EnLCAnU1InLCAnU1YnLCAnU1cnLCAnVEsnLCAnVFInLCAnVFknLCAnVUsnLCAnVVInLCAnVVonLCAnVkknLCAnVk8nLCAnWUknLCAnWkgnXSk7XG59XG5cbmZ1bmN0aW9uIHJhbmRvbUJyb3dzZXJBbmRPUygpIHtcbiAgICB2YXIgYnJvd3NlciA9IHJuZCh7XG4gICAgICAgIGNocm9tZTogICAgLjQ1MTMyODEwNTY2LFxuICAgICAgICBpZXhwbG9yZXI6IC4yNzQ3NzA2MTgzNixcbiAgICAgICAgZmlyZWZveDogICAuMTkzODQxNzA2MDgsXG4gICAgICAgIHNhZmFyaTogICAgLjA2MTg2NzgxMTE4LFxuICAgICAgICBvcGVyYTogICAgIC4wMTU3NDIzNjk1NVxuICAgIH0pLFxuICAgIG9zID0ge1xuICAgICAgICBjaHJvbWU6ICB7d2luOiAuODksICBtYWM6IC4wOSAsIGxpbjogLjAyfSxcbiAgICAgICAgZmlyZWZveDoge3dpbjogLjgzLCAgbWFjOiAuMTYsICBsaW46IC4wMX0sXG4gICAgICAgIG9wZXJhOiAgIHt3aW46IC45MSwgIG1hYzogLjAzICwgbGluOiAuMDZ9LFxuICAgICAgICBzYWZhcmk6ICB7d2luOiAuMDQgLCBtYWM6IC45NiAgfSxcbiAgICAgICAgaWV4cGxvcmVyOiBbJ3dpbiddXG4gICAgfTtcblxuICAgIHJldHVybiBbYnJvd3Nlciwgcm5kKG9zW2Jyb3dzZXJdKV07XG59XG5cbmZ1bmN0aW9uIHJhbmRvbVByb2MoYXJjaCkge1xuICAgIHZhciBwcm9jcyA9IHtcbiAgICAgICAgbGluOlsnaTY4NicsICd4ODZfNjQnXSxcbiAgICAgICAgbWFjOiB7J0ludGVsJyA6IC40OCwgJ1BQQyc6IC4wMSwgJ1U7IEludGVsJzouNDgsICdVOyBQUEMnIDouMDF9LFxuICAgICAgICB3aW46WycnLCAnV09XNjQnLCAnV2luNjQ7IHg2NCddXG4gICAgfTtcbiAgICByZXR1cm4gcm5kKHByb2NzW2FyY2hdKTtcbn1cblxuZnVuY3Rpb24gcmFuZG9tUmV2aXNpb24oZG90cykge1xuICAgIHZhciByZXR1cm5fdmFsID0gJyc7XG4gICAgLy9nZW5lcmF0ZSBhIHJhbmRvbSByZXZpc2lvblxuICAgIC8vZG90cyA9IDIgcmV0dXJucyAueC55IHdoZXJlIHggJiB5IGFyZSBiZXR3ZWVuIDAgYW5kIDlcbiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IGRvdHM7IHgrKykge1xuICAgICAgICByZXR1cm5fdmFsICs9ICcuJyArIHJuZCgwLCA5KTtcbiAgICB9XG4gICAgcmV0dXJuIHJldHVybl92YWw7XG59XG5cbnZhciB2ZXJzaW9uX3N0cmluZyA9IHtcbiAgICBuZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFtybmQoMSwgNCksIHJuZCgwLCA5KSwgcm5kKDEwMDAwLCA5OTk5OSksIHJuZCgwLCA5KV0uam9pbignLicpO1xuICAgIH0sXG4gICAgbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJuZCg1LCA2KSArICcuJyArIHJuZCgwLCAzKTtcbiAgICB9LFxuICAgIGllOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBybmQoNywgMTEpO1xuICAgIH0sXG4gICAgdHJpZGVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcm5kKDMsIDcpICsgJy4nICsgcm5kKDAsIDEpO1xuICAgIH0sXG4gICAgb3N4OiBmdW5jdGlvbiAoZGVsaW0pIHtcbiAgICAgICAgcmV0dXJuIFsxMCwgcm5kKDUsIDEwKSwgcm5kKDAsIDkpXS5qb2luKGRlbGltIHx8ICcuJyk7XG4gICAgfSxcbiAgICBjaHJvbWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFtybmQoMTMsIDM5KSwgMCwgcm5kKDgwMCwgODk5KSwgMF0uam9pbignLicpO1xuICAgIH0sXG4gICAgcHJlc3RvOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnMi45LicgKyBybmQoMTYwLCAxOTApO1xuICAgIH0sXG4gICAgcHJlc3RvMjogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcm5kKDEwLCAxMikgKyAnLjAwJztcbiAgICB9LFxuICAgIHNhZmFyaTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcm5kKDUzMSwgNTM4KSArICcuJyArIHJuZCgwLCAyKSArICcuJyArIHJuZCgwLDIpO1xuICAgIH1cbn07XG5cbnZhciBicm93c2VyID0ge1xuICAgIGZpcmVmb3g6IGZ1bmN0aW9uIGZpcmVmb3goYXJjaCkge1xuICAgICAgICAvL2h0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvR2Vja29fdXNlcl9hZ2VudF9zdHJpbmdfcmVmZXJlbmNlXG4gICAgICAgIHZhciBmaXJlZm94X3ZlciA9IHJuZCg1LCAxNSkgKyByYW5kb21SZXZpc2lvbigyKSxcbiAgICAgICAgICAgIGdlY2tvX3ZlciA9ICdHZWNrby8yMDEwMDEwMSBGaXJlZm94LycgKyBmaXJlZm94X3ZlcixcbiAgICAgICAgICAgIHByb2MgPSByYW5kb21Qcm9jKGFyY2gpLFxuICAgICAgICAgICAgb3NfdmVyID0gKGFyY2ggPT09ICd3aW4nKSA/ICcoV2luZG93cyBOVCAnICsgdmVyc2lvbl9zdHJpbmcubnQoKSArICgocHJvYykgPyAnOyAnICsgcHJvYyA6ICcnKVxuICAgICAgICAgICAgOiAoYXJjaCA9PT0gJ21hYycpID8gJyhNYWNpbnRvc2g7ICcgKyBwcm9jICsgJyBNYWMgT1MgWCAnICsgdmVyc2lvbl9zdHJpbmcub3N4KClcbiAgICAgICAgICAgIDogJyhYMTE7IExpbnV4ICcgKyBwcm9jO1xuXG4gICAgICAgIHJldHVybiAnTW96aWxsYS81LjAgJyArIG9zX3ZlciArICc7IHJ2OicgKyBmaXJlZm94X3Zlci5zbGljZSgwLCAtMikgKyAnKSAnICsgZ2Vja29fdmVyO1xuICAgIH0sXG5cbiAgICBpZXhwbG9yZXI6IGZ1bmN0aW9uIGlleHBsb3JlcigpIHtcbiAgICAgICAgdmFyIHZlciA9IHZlcnNpb25fc3RyaW5nLmllKCk7XG5cbiAgICAgICAgaWYgKHZlciA+PSAxMSkge1xuICAgICAgICAgICAgLy9odHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg4NjkzMDEodj12cy44NSkuYXNweFxuICAgICAgICAgICAgcmV0dXJuICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LicgKyBybmQoMSwzKSArICc7IFRyaWRlbnQvNy4wOyAnICsgcm5kKFsnVG91Y2g7ICcsICcnXSkgKyAncnY6MTEuMCkgbGlrZSBHZWNrbyc7XG4gICAgICAgIH1cblxuICAgICAgICAvL2h0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9tczUzNzUwMyh2PXZzLjg1KS5hc3B4XG4gICAgICAgIHJldHVybiAnTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgJyArIHZlciArICcuMDsgV2luZG93cyBOVCAnICsgdmVyc2lvbl9zdHJpbmcubnQoKSArICc7IFRyaWRlbnQvJyArXG4gICAgICAgICAgICB2ZXJzaW9uX3N0cmluZy50cmlkZW50KCkgKyAoKHJuZCgwLCAxKSA9PT0gMSkgPyAnOyAuTkVUIENMUiAnICsgdmVyc2lvbl9zdHJpbmcubmV0KCkgOiAnJykgKyAnKSc7XG4gICAgfSxcblxuICAgIG9wZXJhOiBmdW5jdGlvbiBvcGVyYShhcmNoKSB7XG4gICAgICAgIC8vaHR0cDovL3d3dy5vcGVyYS5jb20vZG9jcy9oaXN0b3J5L1xuICAgICAgICB2YXIgcHJlc3RvX3ZlciA9ICcgUHJlc3RvLycgKyB2ZXJzaW9uX3N0cmluZy5wcmVzdG8oKSArICcgVmVyc2lvbi8nICsgdmVyc2lvbl9zdHJpbmcucHJlc3RvMigpICsgJyknLFxuICAgICAgICAgICAgb3NfdmVyID0gKGFyY2ggPT09ICd3aW4nKSA/ICcoV2luZG93cyBOVCAnICsgdmVyc2lvbl9zdHJpbmcubnQoKSArICc7IFU7ICcgKyByYW5kb21MYW5nKCkgKyBwcmVzdG9fdmVyXG4gICAgICAgICAgICA6IChhcmNoID09PSAnbGluJykgPyAnKFgxMTsgTGludXggJyArIHJhbmRvbVByb2MoYXJjaCkgKyAnOyBVOyAnICsgcmFuZG9tTGFuZygpICsgcHJlc3RvX3ZlclxuICAgICAgICAgICAgOiAnKE1hY2ludG9zaDsgSW50ZWwgTWFjIE9TIFggJyArIHZlcnNpb25fc3RyaW5nLm9zeCgpICsgJyBVOyAnICsgcmFuZG9tTGFuZygpICsgJyBQcmVzdG8vJyArXG4gICAgICAgICAgICB2ZXJzaW9uX3N0cmluZy5wcmVzdG8oKSArICcgVmVyc2lvbi8nICsgdmVyc2lvbl9zdHJpbmcucHJlc3RvMigpICsgJyknO1xuXG4gICAgICAgIHJldHVybiAnT3BlcmEvJyArIHJuZCg5LCAxNCkgKyAnLicgKyBybmQoMCwgOTkpICsgJyAnICsgb3NfdmVyO1xuICAgIH0sXG5cbiAgICBzYWZhcmk6IGZ1bmN0aW9uIHNhZmFyaShhcmNoKSB7XG4gICAgICAgIHZhciBzYWZhcmkgPSB2ZXJzaW9uX3N0cmluZy5zYWZhcmkoKSxcbiAgICAgICAgICAgIHZlciA9IHJuZCg0LCA3KSArICcuJyArIHJuZCgwLDEpICsgJy4nICsgcm5kKDAsMTApLFxuICAgICAgICAgICAgb3NfdmVyID0gKGFyY2ggPT09ICdtYWMnKSA/ICcoTWFjaW50b3NoOyAnICsgcmFuZG9tUHJvYygnbWFjJykgKyAnIE1hYyBPUyBYICcrIHZlcnNpb25fc3RyaW5nLm9zeCgnXycpICsgJyBydjonICsgcm5kKDIsIDYpICsgJy4wOyAnKyByYW5kb21MYW5nKCkgKyAnKSAnXG4gICAgICAgICAgICA6ICcoV2luZG93czsgVTsgV2luZG93cyBOVCAnICsgdmVyc2lvbl9zdHJpbmcubnQoKSArICcpJztcblxuICAgICAgICByZXR1cm4gJ01vemlsbGEvNS4wICcgKyBvc192ZXIgKyAnQXBwbGVXZWJLaXQvJyArIHNhZmFyaSArICcgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLycgKyB2ZXIgKyAnIFNhZmFyaS8nICsgc2FmYXJpO1xuICAgIH0sXG5cbiAgICBjaHJvbWU6IGZ1bmN0aW9uIGNocm9tZShhcmNoKSB7XG4gICAgICAgIHZhciBzYWZhcmkgPSB2ZXJzaW9uX3N0cmluZy5zYWZhcmkoKSxcbiAgICAgICAgICAgIG9zX3ZlciA9IChhcmNoID09PSAnbWFjJykgPyAnKE1hY2ludG9zaDsgJyArIHJhbmRvbVByb2MoJ21hYycpICsgJyBNYWMgT1MgWCAnICsgdmVyc2lvbl9zdHJpbmcub3N4KCdfJykgKyAnKSAnXG4gICAgICAgICAgICA6IChhcmNoID09PSAnd2luJykgPyAnKFdpbmRvd3M7IFU7IFdpbmRvd3MgTlQgJyArIHZlcnNpb25fc3RyaW5nLm50KCkgKyAnKSdcbiAgICAgICAgICAgIDogJyhYMTE7IExpbnV4ICcgKyByYW5kb21Qcm9jKGFyY2gpO1xuXG4gICAgICAgIHJldHVybiAnTW96aWxsYS81LjAgJyArIG9zX3ZlciArICcgQXBwbGVXZWJLaXQvJyArIHNhZmFyaSArICcgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvJyArIHZlcnNpb25fc3RyaW5nLmNocm9tZSgpICsgJyBTYWZhcmkvJyArIHNhZmFyaTtcbiAgICB9XG59O1xuXG5leHBvcnRzLmdlbmVyYXRlID0gZnVuY3Rpb24gZ2VuZXJhdGUoKSB7XG4gICAgdmFyIHJhbmRvbSA9IHJhbmRvbUJyb3dzZXJBbmRPUygpO1xuICAgIHJldHVybiBicm93c2VyW3JhbmRvbVswXV0ocmFuZG9tWzFdKTtcbn07XG4iLCJmdW5jdGlvbiBmb3JtYXQoZm10KSB7XG4gIHZhciByZSA9IC8oJT8pKCUoW2pkc10pKS9nXG4gICAgLCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgaWYoYXJncy5sZW5ndGgpIHtcbiAgICBmbXQgPSBmbXQucmVwbGFjZShyZSwgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZWQsIHB0biwgZmxhZykge1xuICAgICAgdmFyIGFyZyA9IGFyZ3Muc2hpZnQoKTtcbiAgICAgIHN3aXRjaChmbGFnKSB7XG4gICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgIGFyZyA9ICcnICsgYXJnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICBhcmcgPSBOdW1iZXIoYXJnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnaic6XG4gICAgICAgICAgYXJnID0gSlNPTi5zdHJpbmdpZnkoYXJnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmKCFlc2NhcGVkKSB7XG4gICAgICAgIHJldHVybiBhcmc7IFxuICAgICAgfVxuICAgICAgYXJncy51bnNoaWZ0KGFyZyk7XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSlcbiAgfVxuXG4gIC8vIGFyZ3VtZW50cyByZW1haW4gYWZ0ZXIgZm9ybWF0dGluZ1xuICBpZihhcmdzLmxlbmd0aCkge1xuICAgIGZtdCArPSAnICcgKyBhcmdzLmpvaW4oJyAnKTtcbiAgfVxuXG4gIC8vIHVwZGF0ZSBlc2NhcGVkICUlIHZhbHVlc1xuICBmbXQgPSBmbXQucmVwbGFjZSgvJXsyLDJ9L2csICclJyk7XG5cbiAgcmV0dXJuICcnICsgZm10O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvcm1hdDtcbiIsInZhciBodHRwID0gcmVxdWlyZSgnaHR0cCcpXG52YXIgdXJsID0gcmVxdWlyZSgndXJsJylcblxudmFyIGh0dHBzID0gbW9kdWxlLmV4cG9ydHNcblxuZm9yICh2YXIga2V5IGluIGh0dHApIHtcbiAgaWYgKGh0dHAuaGFzT3duUHJvcGVydHkoa2V5KSkgaHR0cHNba2V5XSA9IGh0dHBba2V5XVxufVxuXG5odHRwcy5yZXF1ZXN0ID0gZnVuY3Rpb24gKHBhcmFtcywgY2IpIHtcbiAgcGFyYW1zID0gdmFsaWRhdGVQYXJhbXMocGFyYW1zKVxuICByZXR1cm4gaHR0cC5yZXF1ZXN0LmNhbGwodGhpcywgcGFyYW1zLCBjYilcbn1cblxuaHR0cHMuZ2V0ID0gZnVuY3Rpb24gKHBhcmFtcywgY2IpIHtcbiAgcGFyYW1zID0gdmFsaWRhdGVQYXJhbXMocGFyYW1zKVxuICByZXR1cm4gaHR0cC5nZXQuY2FsbCh0aGlzLCBwYXJhbXMsIGNiKVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVBhcmFtcyAocGFyYW1zKSB7XG4gIGlmICh0eXBlb2YgcGFyYW1zID09PSAnc3RyaW5nJykge1xuICAgIHBhcmFtcyA9IHVybC5wYXJzZShwYXJhbXMpXG4gIH1cbiAgaWYgKCFwYXJhbXMucHJvdG9jb2wpIHtcbiAgICBwYXJhbXMucHJvdG9jb2wgPSAnaHR0cHM6J1xuICB9XG4gIGlmIChwYXJhbXMucHJvdG9jb2wgIT09ICdodHRwczonKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdQcm90b2NvbCBcIicgKyBwYXJhbXMucHJvdG9jb2wgKyAnXCIgbm90IHN1cHBvcnRlZC4gRXhwZWN0ZWQgXCJodHRwczpcIicpXG4gIH1cbiAgcmV0dXJuIHBhcmFtc1xufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgKGlzQnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikgfHwgISFvYmouX2lzQnVmZmVyKVxufVxuXG5mdW5jdGlvbiBpc0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzQnVmZmVyKG9iai5zbGljZSgwLCAwKSlcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB5YW1sID0gcmVxdWlyZSgnLi9saWIvanMteWFtbC5qcycpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0geWFtbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuXG52YXIgbG9hZGVyID0gcmVxdWlyZSgnLi9qcy15YW1sL2xvYWRlcicpO1xudmFyIGR1bXBlciA9IHJlcXVpcmUoJy4vanMteWFtbC9kdW1wZXInKTtcblxuXG5mdW5jdGlvbiBkZXByZWNhdGVkKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uICcgKyBuYW1lICsgJyBpcyBkZXByZWNhdGVkIGFuZCBjYW5ub3QgYmUgdXNlZC4nKTtcbiAgfTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cy5UeXBlICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9qcy15YW1sL3R5cGUnKTtcbm1vZHVsZS5leHBvcnRzLlNjaGVtYSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2pzLXlhbWwvc2NoZW1hJyk7XG5tb2R1bGUuZXhwb3J0cy5GQUlMU0FGRV9TQ0hFTUEgICAgID0gcmVxdWlyZSgnLi9qcy15YW1sL3NjaGVtYS9mYWlsc2FmZScpO1xubW9kdWxlLmV4cG9ydHMuSlNPTl9TQ0hFTUEgICAgICAgICA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvanNvbicpO1xubW9kdWxlLmV4cG9ydHMuQ09SRV9TQ0hFTUEgICAgICAgICA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvY29yZScpO1xubW9kdWxlLmV4cG9ydHMuREVGQVVMVF9TQUZFX1NDSEVNQSA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvZGVmYXVsdF9zYWZlJyk7XG5tb2R1bGUuZXhwb3J0cy5ERUZBVUxUX0ZVTExfU0NIRU1BID0gcmVxdWlyZSgnLi9qcy15YW1sL3NjaGVtYS9kZWZhdWx0X2Z1bGwnKTtcbm1vZHVsZS5leHBvcnRzLmxvYWQgICAgICAgICAgICAgICAgPSBsb2FkZXIubG9hZDtcbm1vZHVsZS5leHBvcnRzLmxvYWRBbGwgICAgICAgICAgICAgPSBsb2FkZXIubG9hZEFsbDtcbm1vZHVsZS5leHBvcnRzLnNhZmVMb2FkICAgICAgICAgICAgPSBsb2FkZXIuc2FmZUxvYWQ7XG5tb2R1bGUuZXhwb3J0cy5zYWZlTG9hZEFsbCAgICAgICAgID0gbG9hZGVyLnNhZmVMb2FkQWxsO1xubW9kdWxlLmV4cG9ydHMuZHVtcCAgICAgICAgICAgICAgICA9IGR1bXBlci5kdW1wO1xubW9kdWxlLmV4cG9ydHMuc2FmZUR1bXAgICAgICAgICAgICA9IGR1bXBlci5zYWZlRHVtcDtcbm1vZHVsZS5leHBvcnRzLllBTUxFeGNlcHRpb24gICAgICAgPSByZXF1aXJlKCcuL2pzLXlhbWwvZXhjZXB0aW9uJyk7XG5cbi8vIERlcHJlY2F0ZWQgc2NoZW1hIG5hbWVzIGZyb20gSlMtWUFNTCAyLjAueFxubW9kdWxlLmV4cG9ydHMuTUlOSU1BTF9TQ0hFTUEgPSByZXF1aXJlKCcuL2pzLXlhbWwvc2NoZW1hL2ZhaWxzYWZlJyk7XG5tb2R1bGUuZXhwb3J0cy5TQUZFX1NDSEVNQSAgICA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvZGVmYXVsdF9zYWZlJyk7XG5tb2R1bGUuZXhwb3J0cy5ERUZBVUxUX1NDSEVNQSA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvZGVmYXVsdF9mdWxsJyk7XG5cbi8vIERlcHJlY2F0ZWQgZnVuY3Rpb25zIGZyb20gSlMtWUFNTCAxLngueFxubW9kdWxlLmV4cG9ydHMuc2NhbiAgICAgICAgICAgPSBkZXByZWNhdGVkKCdzY2FuJyk7XG5tb2R1bGUuZXhwb3J0cy5wYXJzZSAgICAgICAgICA9IGRlcHJlY2F0ZWQoJ3BhcnNlJyk7XG5tb2R1bGUuZXhwb3J0cy5jb21wb3NlICAgICAgICA9IGRlcHJlY2F0ZWQoJ2NvbXBvc2UnKTtcbm1vZHVsZS5leHBvcnRzLmFkZENvbnN0cnVjdG9yID0gZGVwcmVjYXRlZCgnYWRkQ29uc3RydWN0b3InKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuXG5mdW5jdGlvbiBpc05vdGhpbmcoc3ViamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBzdWJqZWN0ID09PSAndW5kZWZpbmVkJykgfHwgKHN1YmplY3QgPT09IG51bGwpO1xufVxuXG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHN1YmplY3QpIHtcbiAgcmV0dXJuICh0eXBlb2Ygc3ViamVjdCA9PT0gJ29iamVjdCcpICYmIChzdWJqZWN0ICE9PSBudWxsKTtcbn1cblxuXG5mdW5jdGlvbiB0b0FycmF5KHNlcXVlbmNlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHNlcXVlbmNlKSkgcmV0dXJuIHNlcXVlbmNlO1xuICBlbHNlIGlmIChpc05vdGhpbmcoc2VxdWVuY2UpKSByZXR1cm4gW107XG5cbiAgcmV0dXJuIFsgc2VxdWVuY2UgXTtcbn1cblxuXG5mdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGluZGV4LCBsZW5ndGgsIGtleSwgc291cmNlS2V5cztcblxuICBpZiAoc291cmNlKSB7XG4gICAgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gc291cmNlS2V5cy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICBrZXkgPSBzb3VyY2VLZXlzW2luZGV4XTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuXG5mdW5jdGlvbiByZXBlYXQoc3RyaW5nLCBjb3VudCkge1xuICB2YXIgcmVzdWx0ID0gJycsIGN5Y2xlO1xuXG4gIGZvciAoY3ljbGUgPSAwOyBjeWNsZSA8IGNvdW50OyBjeWNsZSArPSAxKSB7XG4gICAgcmVzdWx0ICs9IHN0cmluZztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cblxuZnVuY3Rpb24gaXNOZWdhdGl2ZVplcm8obnVtYmVyKSB7XG4gIHJldHVybiAobnVtYmVyID09PSAwKSAmJiAoTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZID09PSAxIC8gbnVtYmVyKTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cy5pc05vdGhpbmcgICAgICA9IGlzTm90aGluZztcbm1vZHVsZS5leHBvcnRzLmlzT2JqZWN0ICAgICAgID0gaXNPYmplY3Q7XG5tb2R1bGUuZXhwb3J0cy50b0FycmF5ICAgICAgICA9IHRvQXJyYXk7XG5tb2R1bGUuZXhwb3J0cy5yZXBlYXQgICAgICAgICA9IHJlcGVhdDtcbm1vZHVsZS5leHBvcnRzLmlzTmVnYXRpdmVaZXJvID0gaXNOZWdhdGl2ZVplcm87XG5tb2R1bGUuZXhwb3J0cy5leHRlbmQgICAgICAgICA9IGV4dGVuZDtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyplc2xpbnQtZGlzYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSovXG5cbnZhciBjb21tb24gICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9jb21tb24nKTtcbnZhciBZQU1MRXhjZXB0aW9uICAgICAgID0gcmVxdWlyZSgnLi9leGNlcHRpb24nKTtcbnZhciBERUZBVUxUX0ZVTExfU0NIRU1BID0gcmVxdWlyZSgnLi9zY2hlbWEvZGVmYXVsdF9mdWxsJyk7XG52YXIgREVGQVVMVF9TQUZFX1NDSEVNQSA9IHJlcXVpcmUoJy4vc2NoZW1hL2RlZmF1bHRfc2FmZScpO1xuXG52YXIgX3RvU3RyaW5nICAgICAgID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBfaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgQ0hBUl9UQUIgICAgICAgICAgICAgICAgICA9IDB4MDk7IC8qIFRhYiAqL1xudmFyIENIQVJfTElORV9GRUVEICAgICAgICAgICAgPSAweDBBOyAvKiBMRiAqL1xudmFyIENIQVJfU1BBQ0UgICAgICAgICAgICAgICAgPSAweDIwOyAvKiBTcGFjZSAqL1xudmFyIENIQVJfRVhDTEFNQVRJT04gICAgICAgICAgPSAweDIxOyAvKiAhICovXG52YXIgQ0hBUl9ET1VCTEVfUVVPVEUgICAgICAgICA9IDB4MjI7IC8qIFwiICovXG52YXIgQ0hBUl9TSEFSUCAgICAgICAgICAgICAgICA9IDB4MjM7IC8qICMgKi9cbnZhciBDSEFSX1BFUkNFTlQgICAgICAgICAgICAgID0gMHgyNTsgLyogJSAqL1xudmFyIENIQVJfQU1QRVJTQU5EICAgICAgICAgICAgPSAweDI2OyAvKiAmICovXG52YXIgQ0hBUl9TSU5HTEVfUVVPVEUgICAgICAgICA9IDB4Mjc7IC8qICcgKi9cbnZhciBDSEFSX0FTVEVSSVNLICAgICAgICAgICAgID0gMHgyQTsgLyogKiAqL1xudmFyIENIQVJfQ09NTUEgICAgICAgICAgICAgICAgPSAweDJDOyAvKiAsICovXG52YXIgQ0hBUl9NSU5VUyAgICAgICAgICAgICAgICA9IDB4MkQ7IC8qIC0gKi9cbnZhciBDSEFSX0NPTE9OICAgICAgICAgICAgICAgID0gMHgzQTsgLyogOiAqL1xudmFyIENIQVJfR1JFQVRFUl9USEFOICAgICAgICAgPSAweDNFOyAvKiA+ICovXG52YXIgQ0hBUl9RVUVTVElPTiAgICAgICAgICAgICA9IDB4M0Y7IC8qID8gKi9cbnZhciBDSEFSX0NPTU1FUkNJQUxfQVQgICAgICAgID0gMHg0MDsgLyogQCAqL1xudmFyIENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVCAgPSAweDVCOyAvKiBbICovXG52YXIgQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVCA9IDB4NUQ7IC8qIF0gKi9cbnZhciBDSEFSX0dSQVZFX0FDQ0VOVCAgICAgICAgID0gMHg2MDsgLyogYCAqL1xudmFyIENIQVJfTEVGVF9DVVJMWV9CUkFDS0VUICAgPSAweDdCOyAvKiB7ICovXG52YXIgQ0hBUl9WRVJUSUNBTF9MSU5FICAgICAgICA9IDB4N0M7IC8qIHwgKi9cbnZhciBDSEFSX1JJR0hUX0NVUkxZX0JSQUNLRVQgID0gMHg3RDsgLyogfSAqL1xuXG52YXIgRVNDQVBFX1NFUVVFTkNFUyA9IHt9O1xuXG5FU0NBUEVfU0VRVUVOQ0VTWzB4MDBdICAgPSAnXFxcXDAnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDA3XSAgID0gJ1xcXFxhJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwOF0gICA9ICdcXFxcYic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MDldICAgPSAnXFxcXHQnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDBBXSAgID0gJ1xcXFxuJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgwQl0gICA9ICdcXFxcdic7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MENdICAgPSAnXFxcXGYnO1xuRVNDQVBFX1NFUVVFTkNFU1sweDBEXSAgID0gJ1xcXFxyJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgxQl0gICA9ICdcXFxcZSc7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MjJdICAgPSAnXFxcXFwiJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHg1Q10gICA9ICdcXFxcXFxcXCc7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4ODVdICAgPSAnXFxcXE4nO1xuRVNDQVBFX1NFUVVFTkNFU1sweEEwXSAgID0gJ1xcXFxfJztcbkVTQ0FQRV9TRVFVRU5DRVNbMHgyMDI4XSA9ICdcXFxcTCc7XG5FU0NBUEVfU0VRVUVOQ0VTWzB4MjAyOV0gPSAnXFxcXFAnO1xuXG52YXIgREVQUkVDQVRFRF9CT09MRUFOU19TWU5UQVggPSBbXG4gICd5JywgJ1knLCAneWVzJywgJ1llcycsICdZRVMnLCAnb24nLCAnT24nLCAnT04nLFxuICAnbicsICdOJywgJ25vJywgJ05vJywgJ05PJywgJ29mZicsICdPZmYnLCAnT0ZGJ1xuXTtcblxuZnVuY3Rpb24gY29tcGlsZVN0eWxlTWFwKHNjaGVtYSwgbWFwKSB7XG4gIHZhciByZXN1bHQsIGtleXMsIGluZGV4LCBsZW5ndGgsIHRhZywgc3R5bGUsIHR5cGU7XG5cbiAgaWYgKG1hcCA9PT0gbnVsbCkgcmV0dXJuIHt9O1xuXG4gIHJlc3VsdCA9IHt9O1xuICBrZXlzID0gT2JqZWN0LmtleXMobWFwKTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgdGFnID0ga2V5c1tpbmRleF07XG4gICAgc3R5bGUgPSBTdHJpbmcobWFwW3RhZ10pO1xuXG4gICAgaWYgKHRhZy5zbGljZSgwLCAyKSA9PT0gJyEhJykge1xuICAgICAgdGFnID0gJ3RhZzp5YW1sLm9yZywyMDAyOicgKyB0YWcuc2xpY2UoMik7XG4gICAgfVxuICAgIHR5cGUgPSBzY2hlbWEuY29tcGlsZWRUeXBlTWFwWydmYWxsYmFjayddW3RhZ107XG5cbiAgICBpZiAodHlwZSAmJiBfaGFzT3duUHJvcGVydHkuY2FsbCh0eXBlLnN0eWxlQWxpYXNlcywgc3R5bGUpKSB7XG4gICAgICBzdHlsZSA9IHR5cGUuc3R5bGVBbGlhc2VzW3N0eWxlXTtcbiAgICB9XG5cbiAgICByZXN1bHRbdGFnXSA9IHN0eWxlO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZW5jb2RlSGV4KGNoYXJhY3Rlcikge1xuICB2YXIgc3RyaW5nLCBoYW5kbGUsIGxlbmd0aDtcblxuICBzdHJpbmcgPSBjaGFyYWN0ZXIudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG5cbiAgaWYgKGNoYXJhY3RlciA8PSAweEZGKSB7XG4gICAgaGFuZGxlID0gJ3gnO1xuICAgIGxlbmd0aCA9IDI7XG4gIH0gZWxzZSBpZiAoY2hhcmFjdGVyIDw9IDB4RkZGRikge1xuICAgIGhhbmRsZSA9ICd1JztcbiAgICBsZW5ndGggPSA0O1xuICB9IGVsc2UgaWYgKGNoYXJhY3RlciA8PSAweEZGRkZGRkZGKSB7XG4gICAgaGFuZGxlID0gJ1UnO1xuICAgIGxlbmd0aCA9IDg7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ2NvZGUgcG9pbnQgd2l0aGluIGEgc3RyaW5nIG1heSBub3QgYmUgZ3JlYXRlciB0aGFuIDB4RkZGRkZGRkYnKTtcbiAgfVxuXG4gIHJldHVybiAnXFxcXCcgKyBoYW5kbGUgKyBjb21tb24ucmVwZWF0KCcwJywgbGVuZ3RoIC0gc3RyaW5nLmxlbmd0aCkgKyBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIFN0YXRlKG9wdGlvbnMpIHtcbiAgdGhpcy5zY2hlbWEgICAgICAgPSBvcHRpb25zWydzY2hlbWEnXSB8fCBERUZBVUxUX0ZVTExfU0NIRU1BO1xuICB0aGlzLmluZGVudCAgICAgICA9IE1hdGgubWF4KDEsIChvcHRpb25zWydpbmRlbnQnXSB8fCAyKSk7XG4gIHRoaXMuc2tpcEludmFsaWQgID0gb3B0aW9uc1snc2tpcEludmFsaWQnXSB8fCBmYWxzZTtcbiAgdGhpcy5mbG93TGV2ZWwgICAgPSAoY29tbW9uLmlzTm90aGluZyhvcHRpb25zWydmbG93TGV2ZWwnXSkgPyAtMSA6IG9wdGlvbnNbJ2Zsb3dMZXZlbCddKTtcbiAgdGhpcy5zdHlsZU1hcCAgICAgPSBjb21waWxlU3R5bGVNYXAodGhpcy5zY2hlbWEsIG9wdGlvbnNbJ3N0eWxlcyddIHx8IG51bGwpO1xuICB0aGlzLnNvcnRLZXlzICAgICA9IG9wdGlvbnNbJ3NvcnRLZXlzJ10gfHwgZmFsc2U7XG4gIHRoaXMubGluZVdpZHRoICAgID0gb3B0aW9uc1snbGluZVdpZHRoJ10gfHwgODA7XG4gIHRoaXMubm9SZWZzICAgICAgID0gb3B0aW9uc1snbm9SZWZzJ10gfHwgZmFsc2U7XG4gIHRoaXMubm9Db21wYXRNb2RlID0gb3B0aW9uc1snbm9Db21wYXRNb2RlJ10gfHwgZmFsc2U7XG4gIHRoaXMuY29uZGVuc2VGbG93ID0gb3B0aW9uc1snY29uZGVuc2VGbG93J10gfHwgZmFsc2U7XG5cbiAgdGhpcy5pbXBsaWNpdFR5cGVzID0gdGhpcy5zY2hlbWEuY29tcGlsZWRJbXBsaWNpdDtcbiAgdGhpcy5leHBsaWNpdFR5cGVzID0gdGhpcy5zY2hlbWEuY29tcGlsZWRFeHBsaWNpdDtcblxuICB0aGlzLnRhZyA9IG51bGw7XG4gIHRoaXMucmVzdWx0ID0gJyc7XG5cbiAgdGhpcy5kdXBsaWNhdGVzID0gW107XG4gIHRoaXMudXNlZER1cGxpY2F0ZXMgPSBudWxsO1xufVxuXG4vLyBJbmRlbnRzIGV2ZXJ5IGxpbmUgaW4gYSBzdHJpbmcuIEVtcHR5IGxpbmVzIChcXG4gb25seSkgYXJlIG5vdCBpbmRlbnRlZC5cbmZ1bmN0aW9uIGluZGVudFN0cmluZyhzdHJpbmcsIHNwYWNlcykge1xuICB2YXIgaW5kID0gY29tbW9uLnJlcGVhdCgnICcsIHNwYWNlcyksXG4gICAgICBwb3NpdGlvbiA9IDAsXG4gICAgICBuZXh0ID0gLTEsXG4gICAgICByZXN1bHQgPSAnJyxcbiAgICAgIGxpbmUsXG4gICAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXG4gIHdoaWxlIChwb3NpdGlvbiA8IGxlbmd0aCkge1xuICAgIG5leHQgPSBzdHJpbmcuaW5kZXhPZignXFxuJywgcG9zaXRpb24pO1xuICAgIGlmIChuZXh0ID09PSAtMSkge1xuICAgICAgbGluZSA9IHN0cmluZy5zbGljZShwb3NpdGlvbik7XG4gICAgICBwb3NpdGlvbiA9IGxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGluZSA9IHN0cmluZy5zbGljZShwb3NpdGlvbiwgbmV4dCArIDEpO1xuICAgICAgcG9zaXRpb24gPSBuZXh0ICsgMTtcbiAgICB9XG5cbiAgICBpZiAobGluZS5sZW5ndGggJiYgbGluZSAhPT0gJ1xcbicpIHJlc3VsdCArPSBpbmQ7XG5cbiAgICByZXN1bHQgKz0gbGluZTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlTmV4dExpbmUoc3RhdGUsIGxldmVsKSB7XG4gIHJldHVybiAnXFxuJyArIGNvbW1vbi5yZXBlYXQoJyAnLCBzdGF0ZS5pbmRlbnQgKiBsZXZlbCk7XG59XG5cbmZ1bmN0aW9uIHRlc3RJbXBsaWNpdFJlc29sdmluZyhzdGF0ZSwgc3RyKSB7XG4gIHZhciBpbmRleCwgbGVuZ3RoLCB0eXBlO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBzdGF0ZS5pbXBsaWNpdFR5cGVzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICB0eXBlID0gc3RhdGUuaW1wbGljaXRUeXBlc1tpbmRleF07XG5cbiAgICBpZiAodHlwZS5yZXNvbHZlKHN0cikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLy8gWzMzXSBzLXdoaXRlIDo6PSBzLXNwYWNlIHwgcy10YWJcbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZShjKSB7XG4gIHJldHVybiBjID09PSBDSEFSX1NQQUNFIHx8IGMgPT09IENIQVJfVEFCO1xufVxuXG4vLyBSZXR1cm5zIHRydWUgaWYgdGhlIGNoYXJhY3RlciBjYW4gYmUgcHJpbnRlZCB3aXRob3V0IGVzY2FwaW5nLlxuLy8gRnJvbSBZQU1MIDEuMjogXCJhbnkgYWxsb3dlZCBjaGFyYWN0ZXJzIGtub3duIHRvIGJlIG5vbi1wcmludGFibGVcbi8vIHNob3VsZCBhbHNvIGJlIGVzY2FwZWQuIFtIb3dldmVyLF0gVGhpcyBpc27igJl0IG1hbmRhdG9yeVwiXG4vLyBEZXJpdmVkIGZyb20gbmItY2hhciAtIFxcdCAtICN4ODUgLSAjeEEwIC0gI3gyMDI4IC0gI3gyMDI5LlxuZnVuY3Rpb24gaXNQcmludGFibGUoYykge1xuICByZXR1cm4gICgweDAwMDIwIDw9IGMgJiYgYyA8PSAweDAwMDA3RSlcbiAgICAgIHx8ICgoMHgwMDBBMSA8PSBjICYmIGMgPD0gMHgwMEQ3RkYpICYmIGMgIT09IDB4MjAyOCAmJiBjICE9PSAweDIwMjkpXG4gICAgICB8fCAoKDB4MEUwMDAgPD0gYyAmJiBjIDw9IDB4MDBGRkZEKSAmJiBjICE9PSAweEZFRkYgLyogQk9NICovKVxuICAgICAgfHwgICgweDEwMDAwIDw9IGMgJiYgYyA8PSAweDEwRkZGRik7XG59XG5cbi8vIFNpbXBsaWZpZWQgdGVzdCBmb3IgdmFsdWVzIGFsbG93ZWQgYWZ0ZXIgdGhlIGZpcnN0IGNoYXJhY3RlciBpbiBwbGFpbiBzdHlsZS5cbmZ1bmN0aW9uIGlzUGxhaW5TYWZlKGMpIHtcbiAgLy8gVXNlcyBhIHN1YnNldCBvZiBuYi1jaGFyIC0gYy1mbG93LWluZGljYXRvciAtIFwiOlwiIC0gXCIjXCJcbiAgLy8gd2hlcmUgbmItY2hhciA6Oj0gYy1wcmludGFibGUgLSBiLWNoYXIgLSBjLWJ5dGUtb3JkZXItbWFyay5cbiAgcmV0dXJuIGlzUHJpbnRhYmxlKGMpICYmIGMgIT09IDB4RkVGRlxuICAgIC8vIC0gYy1mbG93LWluZGljYXRvclxuICAgICYmIGMgIT09IENIQVJfQ09NTUFcbiAgICAmJiBjICE9PSBDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVRcbiAgICAmJiBjICE9PSBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUXG4gICAgJiYgYyAhPT0gQ0hBUl9MRUZUX0NVUkxZX0JSQUNLRVRcbiAgICAmJiBjICE9PSBDSEFSX1JJR0hUX0NVUkxZX0JSQUNLRVRcbiAgICAvLyAtIFwiOlwiIC0gXCIjXCJcbiAgICAmJiBjICE9PSBDSEFSX0NPTE9OXG4gICAgJiYgYyAhPT0gQ0hBUl9TSEFSUDtcbn1cblxuLy8gU2ltcGxpZmllZCB0ZXN0IGZvciB2YWx1ZXMgYWxsb3dlZCBhcyB0aGUgZmlyc3QgY2hhcmFjdGVyIGluIHBsYWluIHN0eWxlLlxuZnVuY3Rpb24gaXNQbGFpblNhZmVGaXJzdChjKSB7XG4gIC8vIFVzZXMgYSBzdWJzZXQgb2YgbnMtY2hhciAtIGMtaW5kaWNhdG9yXG4gIC8vIHdoZXJlIG5zLWNoYXIgPSBuYi1jaGFyIC0gcy13aGl0ZS5cbiAgcmV0dXJuIGlzUHJpbnRhYmxlKGMpICYmIGMgIT09IDB4RkVGRlxuICAgICYmICFpc1doaXRlc3BhY2UoYykgLy8gLSBzLXdoaXRlXG4gICAgLy8gLSAoYy1pbmRpY2F0b3IgOjo9XG4gICAgLy8g4oCcLeKAnSB8IOKAnD/igJ0gfCDigJw64oCdIHwg4oCcLOKAnSB8IOKAnFvigJ0gfCDigJxd4oCdIHwg4oCce+KAnSB8IOKAnH3igJ1cbiAgICAmJiBjICE9PSBDSEFSX01JTlVTXG4gICAgJiYgYyAhPT0gQ0hBUl9RVUVTVElPTlxuICAgICYmIGMgIT09IENIQVJfQ09MT05cbiAgICAmJiBjICE9PSBDSEFSX0NPTU1BXG4gICAgJiYgYyAhPT0gQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VUXG4gICAgJiYgYyAhPT0gQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVFxuICAgICYmIGMgIT09IENIQVJfTEVGVF9DVVJMWV9CUkFDS0VUXG4gICAgJiYgYyAhPT0gQ0hBUl9SSUdIVF9DVVJMWV9CUkFDS0VUXG4gICAgLy8gfCDigJwj4oCdIHwg4oCcJuKAnSB8IOKAnCrigJ0gfCDigJwh4oCdIHwg4oCcfOKAnSB8IOKAnD7igJ0gfCDigJwn4oCdIHwg4oCcXCLigJ1cbiAgICAmJiBjICE9PSBDSEFSX1NIQVJQXG4gICAgJiYgYyAhPT0gQ0hBUl9BTVBFUlNBTkRcbiAgICAmJiBjICE9PSBDSEFSX0FTVEVSSVNLXG4gICAgJiYgYyAhPT0gQ0hBUl9FWENMQU1BVElPTlxuICAgICYmIGMgIT09IENIQVJfVkVSVElDQUxfTElORVxuICAgICYmIGMgIT09IENIQVJfR1JFQVRFUl9USEFOXG4gICAgJiYgYyAhPT0gQ0hBUl9TSU5HTEVfUVVPVEVcbiAgICAmJiBjICE9PSBDSEFSX0RPVUJMRV9RVU9URVxuICAgIC8vIHwg4oCcJeKAnSB8IOKAnEDigJ0gfCDigJxg4oCdKVxuICAgICYmIGMgIT09IENIQVJfUEVSQ0VOVFxuICAgICYmIGMgIT09IENIQVJfQ09NTUVSQ0lBTF9BVFxuICAgICYmIGMgIT09IENIQVJfR1JBVkVfQUNDRU5UO1xufVxuXG4vLyBEZXRlcm1pbmVzIHdoZXRoZXIgYmxvY2sgaW5kZW50YXRpb24gaW5kaWNhdG9yIGlzIHJlcXVpcmVkLlxuZnVuY3Rpb24gbmVlZEluZGVudEluZGljYXRvcihzdHJpbmcpIHtcbiAgdmFyIGxlYWRpbmdTcGFjZVJlID0gL15cXG4qIC87XG4gIHJldHVybiBsZWFkaW5nU3BhY2VSZS50ZXN0KHN0cmluZyk7XG59XG5cbnZhciBTVFlMRV9QTEFJTiAgID0gMSxcbiAgICBTVFlMRV9TSU5HTEUgID0gMixcbiAgICBTVFlMRV9MSVRFUkFMID0gMyxcbiAgICBTVFlMRV9GT0xERUQgID0gNCxcbiAgICBTVFlMRV9ET1VCTEUgID0gNTtcblxuLy8gRGV0ZXJtaW5lcyB3aGljaCBzY2FsYXIgc3R5bGVzIGFyZSBwb3NzaWJsZSBhbmQgcmV0dXJucyB0aGUgcHJlZmVycmVkIHN0eWxlLlxuLy8gbGluZVdpZHRoID0gLTEgPT4gbm8gbGltaXQuXG4vLyBQcmUtY29uZGl0aW9uczogc3RyLmxlbmd0aCA+IDAuXG4vLyBQb3N0LWNvbmRpdGlvbnM6XG4vLyAgICBTVFlMRV9QTEFJTiBvciBTVFlMRV9TSU5HTEUgPT4gbm8gXFxuIGFyZSBpbiB0aGUgc3RyaW5nLlxuLy8gICAgU1RZTEVfTElURVJBTCA9PiBubyBsaW5lcyBhcmUgc3VpdGFibGUgZm9yIGZvbGRpbmcgKG9yIGxpbmVXaWR0aCBpcyAtMSkuXG4vLyAgICBTVFlMRV9GT0xERUQgPT4gYSBsaW5lID4gbGluZVdpZHRoIGFuZCBjYW4gYmUgZm9sZGVkIChhbmQgbGluZVdpZHRoICE9IC0xKS5cbmZ1bmN0aW9uIGNob29zZVNjYWxhclN0eWxlKHN0cmluZywgc2luZ2xlTGluZU9ubHksIGluZGVudFBlckxldmVsLCBsaW5lV2lkdGgsIHRlc3RBbWJpZ3VvdXNUeXBlKSB7XG4gIHZhciBpO1xuICB2YXIgY2hhcjtcbiAgdmFyIGhhc0xpbmVCcmVhayA9IGZhbHNlO1xuICB2YXIgaGFzRm9sZGFibGVMaW5lID0gZmFsc2U7IC8vIG9ubHkgY2hlY2tlZCBpZiBzaG91bGRUcmFja1dpZHRoXG4gIHZhciBzaG91bGRUcmFja1dpZHRoID0gbGluZVdpZHRoICE9PSAtMTtcbiAgdmFyIHByZXZpb3VzTGluZUJyZWFrID0gLTE7IC8vIGNvdW50IHRoZSBmaXJzdCBsaW5lIGNvcnJlY3RseVxuICB2YXIgcGxhaW4gPSBpc1BsYWluU2FmZUZpcnN0KHN0cmluZy5jaGFyQ29kZUF0KDApKVxuICAgICAgICAgICYmICFpc1doaXRlc3BhY2Uoc3RyaW5nLmNoYXJDb2RlQXQoc3RyaW5nLmxlbmd0aCAtIDEpKTtcblxuICBpZiAoc2luZ2xlTGluZU9ubHkpIHtcbiAgICAvLyBDYXNlOiBubyBibG9jayBzdHlsZXMuXG4gICAgLy8gQ2hlY2sgZm9yIGRpc2FsbG93ZWQgY2hhcmFjdGVycyB0byBydWxlIG91dCBwbGFpbiBhbmQgc2luZ2xlLlxuICAgIGZvciAoaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoYXIgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICAgIGlmICghaXNQcmludGFibGUoY2hhcikpIHtcbiAgICAgICAgcmV0dXJuIFNUWUxFX0RPVUJMRTtcbiAgICAgIH1cbiAgICAgIHBsYWluID0gcGxhaW4gJiYgaXNQbGFpblNhZmUoY2hhcik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIENhc2U6IGJsb2NrIHN0eWxlcyBwZXJtaXR0ZWQuXG4gICAgZm9yIChpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGkrKykge1xuICAgICAgY2hhciA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgaWYgKGNoYXIgPT09IENIQVJfTElORV9GRUVEKSB7XG4gICAgICAgIGhhc0xpbmVCcmVhayA9IHRydWU7XG4gICAgICAgIC8vIENoZWNrIGlmIGFueSBsaW5lIGNhbiBiZSBmb2xkZWQuXG4gICAgICAgIGlmIChzaG91bGRUcmFja1dpZHRoKSB7XG4gICAgICAgICAgaGFzRm9sZGFibGVMaW5lID0gaGFzRm9sZGFibGVMaW5lIHx8XG4gICAgICAgICAgICAvLyBGb2xkYWJsZSBsaW5lID0gdG9vIGxvbmcsIGFuZCBub3QgbW9yZS1pbmRlbnRlZC5cbiAgICAgICAgICAgIChpIC0gcHJldmlvdXNMaW5lQnJlYWsgLSAxID4gbGluZVdpZHRoICYmXG4gICAgICAgICAgICAgc3RyaW5nW3ByZXZpb3VzTGluZUJyZWFrICsgMV0gIT09ICcgJyk7XG4gICAgICAgICAgcHJldmlvdXNMaW5lQnJlYWsgPSBpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFpc1ByaW50YWJsZShjaGFyKSkge1xuICAgICAgICByZXR1cm4gU1RZTEVfRE9VQkxFO1xuICAgICAgfVxuICAgICAgcGxhaW4gPSBwbGFpbiAmJiBpc1BsYWluU2FmZShjaGFyKTtcbiAgICB9XG4gICAgLy8gaW4gY2FzZSB0aGUgZW5kIGlzIG1pc3NpbmcgYSBcXG5cbiAgICBoYXNGb2xkYWJsZUxpbmUgPSBoYXNGb2xkYWJsZUxpbmUgfHwgKHNob3VsZFRyYWNrV2lkdGggJiZcbiAgICAgIChpIC0gcHJldmlvdXNMaW5lQnJlYWsgLSAxID4gbGluZVdpZHRoICYmXG4gICAgICAgc3RyaW5nW3ByZXZpb3VzTGluZUJyZWFrICsgMV0gIT09ICcgJykpO1xuICB9XG4gIC8vIEFsdGhvdWdoIGV2ZXJ5IHN0eWxlIGNhbiByZXByZXNlbnQgXFxuIHdpdGhvdXQgZXNjYXBpbmcsIHByZWZlciBibG9jayBzdHlsZXNcbiAgLy8gZm9yIG11bHRpbGluZSwgc2luY2UgdGhleSdyZSBtb3JlIHJlYWRhYmxlIGFuZCB0aGV5IGRvbid0IGFkZCBlbXB0eSBsaW5lcy5cbiAgLy8gQWxzbyBwcmVmZXIgZm9sZGluZyBhIHN1cGVyLWxvbmcgbGluZS5cbiAgaWYgKCFoYXNMaW5lQnJlYWsgJiYgIWhhc0ZvbGRhYmxlTGluZSkge1xuICAgIC8vIFN0cmluZ3MgaW50ZXJwcmV0YWJsZSBhcyBhbm90aGVyIHR5cGUgaGF2ZSB0byBiZSBxdW90ZWQ7XG4gICAgLy8gZS5nLiB0aGUgc3RyaW5nICd0cnVlJyB2cy4gdGhlIGJvb2xlYW4gdHJ1ZS5cbiAgICByZXR1cm4gcGxhaW4gJiYgIXRlc3RBbWJpZ3VvdXNUeXBlKHN0cmluZylcbiAgICAgID8gU1RZTEVfUExBSU4gOiBTVFlMRV9TSU5HTEU7XG4gIH1cbiAgLy8gRWRnZSBjYXNlOiBibG9jayBpbmRlbnRhdGlvbiBpbmRpY2F0b3IgY2FuIG9ubHkgaGF2ZSBvbmUgZGlnaXQuXG4gIGlmIChpbmRlbnRQZXJMZXZlbCA+IDkgJiYgbmVlZEluZGVudEluZGljYXRvcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIFNUWUxFX0RPVUJMRTtcbiAgfVxuICAvLyBBdCB0aGlzIHBvaW50IHdlIGtub3cgYmxvY2sgc3R5bGVzIGFyZSB2YWxpZC5cbiAgLy8gUHJlZmVyIGxpdGVyYWwgc3R5bGUgdW5sZXNzIHdlIHdhbnQgdG8gZm9sZC5cbiAgcmV0dXJuIGhhc0ZvbGRhYmxlTGluZSA/IFNUWUxFX0ZPTERFRCA6IFNUWUxFX0xJVEVSQUw7XG59XG5cbi8vIE5vdGU6IGxpbmUgYnJlYWtpbmcvZm9sZGluZyBpcyBpbXBsZW1lbnRlZCBmb3Igb25seSB0aGUgZm9sZGVkIHN0eWxlLlxuLy8gTkIuIFdlIGRyb3AgdGhlIGxhc3QgdHJhaWxpbmcgbmV3bGluZSAoaWYgYW55KSBvZiBhIHJldHVybmVkIGJsb2NrIHNjYWxhclxuLy8gIHNpbmNlIHRoZSBkdW1wZXIgYWRkcyBpdHMgb3duIG5ld2xpbmUuIFRoaXMgYWx3YXlzIHdvcmtzOlxuLy8gICAg4oCiIE5vIGVuZGluZyBuZXdsaW5lID0+IHVuYWZmZWN0ZWQ7IGFscmVhZHkgdXNpbmcgc3RyaXAgXCItXCIgY2hvbXBpbmcuXG4vLyAgICDigKIgRW5kaW5nIG5ld2xpbmUgICAgPT4gcmVtb3ZlZCB0aGVuIHJlc3RvcmVkLlxuLy8gIEltcG9ydGFudGx5LCB0aGlzIGtlZXBzIHRoZSBcIitcIiBjaG9tcCBpbmRpY2F0b3IgZnJvbSBnYWluaW5nIGFuIGV4dHJhIGxpbmUuXG5mdW5jdGlvbiB3cml0ZVNjYWxhcihzdGF0ZSwgc3RyaW5nLCBsZXZlbCwgaXNrZXkpIHtcbiAgc3RhdGUuZHVtcCA9IChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHN0cmluZy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBcIicnXCI7XG4gICAgfVxuICAgIGlmICghc3RhdGUubm9Db21wYXRNb2RlICYmXG4gICAgICAgIERFUFJFQ0FURURfQk9PTEVBTlNfU1lOVEFYLmluZGV4T2Yoc3RyaW5nKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBcIidcIiArIHN0cmluZyArIFwiJ1wiO1xuICAgIH1cblxuICAgIHZhciBpbmRlbnQgPSBzdGF0ZS5pbmRlbnQgKiBNYXRoLm1heCgxLCBsZXZlbCk7IC8vIG5vIDAtaW5kZW50IHNjYWxhcnNcbiAgICAvLyBBcyBpbmRlbnRhdGlvbiBnZXRzIGRlZXBlciwgbGV0IHRoZSB3aWR0aCBkZWNyZWFzZSBtb25vdG9uaWNhbGx5XG4gICAgLy8gdG8gdGhlIGxvd2VyIGJvdW5kIG1pbihzdGF0ZS5saW5lV2lkdGgsIDQwKS5cbiAgICAvLyBOb3RlIHRoYXQgdGhpcyBpbXBsaWVzXG4gICAgLy8gIHN0YXRlLmxpbmVXaWR0aCDiiaQgNDAgKyBzdGF0ZS5pbmRlbnQ6IHdpZHRoIGlzIGZpeGVkIGF0IHRoZSBsb3dlciBib3VuZC5cbiAgICAvLyAgc3RhdGUubGluZVdpZHRoID4gNDAgKyBzdGF0ZS5pbmRlbnQ6IHdpZHRoIGRlY3JlYXNlcyB1bnRpbCB0aGUgbG93ZXIgYm91bmQuXG4gICAgLy8gVGhpcyBiZWhhdmVzIGJldHRlciB0aGFuIGEgY29uc3RhbnQgbWluaW11bSB3aWR0aCB3aGljaCBkaXNhbGxvd3MgbmFycm93ZXIgb3B0aW9ucyxcbiAgICAvLyBvciBhbiBpbmRlbnQgdGhyZXNob2xkIHdoaWNoIGNhdXNlcyB0aGUgd2lkdGggdG8gc3VkZGVubHkgaW5jcmVhc2UuXG4gICAgdmFyIGxpbmVXaWR0aCA9IHN0YXRlLmxpbmVXaWR0aCA9PT0gLTFcbiAgICAgID8gLTEgOiBNYXRoLm1heChNYXRoLm1pbihzdGF0ZS5saW5lV2lkdGgsIDQwKSwgc3RhdGUubGluZVdpZHRoIC0gaW5kZW50KTtcblxuICAgIC8vIFdpdGhvdXQga25vd2luZyBpZiBrZXlzIGFyZSBpbXBsaWNpdC9leHBsaWNpdCwgYXNzdW1lIGltcGxpY2l0IGZvciBzYWZldHkuXG4gICAgdmFyIHNpbmdsZUxpbmVPbmx5ID0gaXNrZXlcbiAgICAgIC8vIE5vIGJsb2NrIHN0eWxlcyBpbiBmbG93IG1vZGUuXG4gICAgICB8fCAoc3RhdGUuZmxvd0xldmVsID4gLTEgJiYgbGV2ZWwgPj0gc3RhdGUuZmxvd0xldmVsKTtcbiAgICBmdW5jdGlvbiB0ZXN0QW1iaWd1aXR5KHN0cmluZykge1xuICAgICAgcmV0dXJuIHRlc3RJbXBsaWNpdFJlc29sdmluZyhzdGF0ZSwgc3RyaW5nKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGNob29zZVNjYWxhclN0eWxlKHN0cmluZywgc2luZ2xlTGluZU9ubHksIHN0YXRlLmluZGVudCwgbGluZVdpZHRoLCB0ZXN0QW1iaWd1aXR5KSkge1xuICAgICAgY2FzZSBTVFlMRV9QTEFJTjpcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIGNhc2UgU1RZTEVfU0lOR0xFOlxuICAgICAgICByZXR1cm4gXCInXCIgKyBzdHJpbmcucmVwbGFjZSgvJy9nLCBcIicnXCIpICsgXCInXCI7XG4gICAgICBjYXNlIFNUWUxFX0xJVEVSQUw6XG4gICAgICAgIHJldHVybiAnfCcgKyBibG9ja0hlYWRlcihzdHJpbmcsIHN0YXRlLmluZGVudClcbiAgICAgICAgICArIGRyb3BFbmRpbmdOZXdsaW5lKGluZGVudFN0cmluZyhzdHJpbmcsIGluZGVudCkpO1xuICAgICAgY2FzZSBTVFlMRV9GT0xERUQ6XG4gICAgICAgIHJldHVybiAnPicgKyBibG9ja0hlYWRlcihzdHJpbmcsIHN0YXRlLmluZGVudClcbiAgICAgICAgICArIGRyb3BFbmRpbmdOZXdsaW5lKGluZGVudFN0cmluZyhmb2xkU3RyaW5nKHN0cmluZywgbGluZVdpZHRoKSwgaW5kZW50KSk7XG4gICAgICBjYXNlIFNUWUxFX0RPVUJMRTpcbiAgICAgICAgcmV0dXJuICdcIicgKyBlc2NhcGVTdHJpbmcoc3RyaW5nLCBsaW5lV2lkdGgpICsgJ1wiJztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdpbXBvc3NpYmxlIGVycm9yOiBpbnZhbGlkIHNjYWxhciBzdHlsZScpO1xuICAgIH1cbiAgfSgpKTtcbn1cblxuLy8gUHJlLWNvbmRpdGlvbnM6IHN0cmluZyBpcyB2YWxpZCBmb3IgYSBibG9jayBzY2FsYXIsIDEgPD0gaW5kZW50UGVyTGV2ZWwgPD0gOS5cbmZ1bmN0aW9uIGJsb2NrSGVhZGVyKHN0cmluZywgaW5kZW50UGVyTGV2ZWwpIHtcbiAgdmFyIGluZGVudEluZGljYXRvciA9IG5lZWRJbmRlbnRJbmRpY2F0b3Ioc3RyaW5nKSA/IFN0cmluZyhpbmRlbnRQZXJMZXZlbCkgOiAnJztcblxuICAvLyBub3RlIHRoZSBzcGVjaWFsIGNhc2U6IHRoZSBzdHJpbmcgJ1xcbicgY291bnRzIGFzIGEgXCJ0cmFpbGluZ1wiIGVtcHR5IGxpbmUuXG4gIHZhciBjbGlwID0gICAgICAgICAgc3RyaW5nW3N0cmluZy5sZW5ndGggLSAxXSA9PT0gJ1xcbic7XG4gIHZhciBrZWVwID0gY2xpcCAmJiAoc3RyaW5nW3N0cmluZy5sZW5ndGggLSAyXSA9PT0gJ1xcbicgfHwgc3RyaW5nID09PSAnXFxuJyk7XG4gIHZhciBjaG9tcCA9IGtlZXAgPyAnKycgOiAoY2xpcCA/ICcnIDogJy0nKTtcblxuICByZXR1cm4gaW5kZW50SW5kaWNhdG9yICsgY2hvbXAgKyAnXFxuJztcbn1cblxuLy8gKFNlZSB0aGUgbm90ZSBmb3Igd3JpdGVTY2FsYXIuKVxuZnVuY3Rpb24gZHJvcEVuZGluZ05ld2xpbmUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmdbc3RyaW5nLmxlbmd0aCAtIDFdID09PSAnXFxuJyA/IHN0cmluZy5zbGljZSgwLCAtMSkgOiBzdHJpbmc7XG59XG5cbi8vIE5vdGU6IGEgbG9uZyBsaW5lIHdpdGhvdXQgYSBzdWl0YWJsZSBicmVhayBwb2ludCB3aWxsIGV4Y2VlZCB0aGUgd2lkdGggbGltaXQuXG4vLyBQcmUtY29uZGl0aW9uczogZXZlcnkgY2hhciBpbiBzdHIgaXNQcmludGFibGUsIHN0ci5sZW5ndGggPiAwLCB3aWR0aCA+IDAuXG5mdW5jdGlvbiBmb2xkU3RyaW5nKHN0cmluZywgd2lkdGgpIHtcbiAgLy8gSW4gZm9sZGVkIHN0eWxlLCAkayQgY29uc2VjdXRpdmUgbmV3bGluZXMgb3V0cHV0IGFzICRrKzEkIG5ld2xpbmVz4oCUXG4gIC8vIHVubGVzcyB0aGV5J3JlIGJlZm9yZSBvciBhZnRlciBhIG1vcmUtaW5kZW50ZWQgbGluZSwgb3IgYXQgdGhlIHZlcnlcbiAgLy8gYmVnaW5uaW5nIG9yIGVuZCwgaW4gd2hpY2ggY2FzZSAkayQgbWFwcyB0byAkayQuXG4gIC8vIFRoZXJlZm9yZSwgcGFyc2UgZWFjaCBjaHVuayBhcyBuZXdsaW5lKHMpIGZvbGxvd2VkIGJ5IGEgY29udGVudCBsaW5lLlxuICB2YXIgbGluZVJlID0gLyhcXG4rKShbXlxcbl0qKS9nO1xuXG4gIC8vIGZpcnN0IGxpbmUgKHBvc3NpYmx5IGFuIGVtcHR5IGxpbmUpXG4gIHZhciByZXN1bHQgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBuZXh0TEYgPSBzdHJpbmcuaW5kZXhPZignXFxuJyk7XG4gICAgbmV4dExGID0gbmV4dExGICE9PSAtMSA/IG5leHRMRiA6IHN0cmluZy5sZW5ndGg7XG4gICAgbGluZVJlLmxhc3RJbmRleCA9IG5leHRMRjtcbiAgICByZXR1cm4gZm9sZExpbmUoc3RyaW5nLnNsaWNlKDAsIG5leHRMRiksIHdpZHRoKTtcbiAgfSgpKTtcbiAgLy8gSWYgd2UgaGF2ZW4ndCByZWFjaGVkIHRoZSBmaXJzdCBjb250ZW50IGxpbmUgeWV0LCBkb24ndCBhZGQgYW4gZXh0cmEgXFxuLlxuICB2YXIgcHJldk1vcmVJbmRlbnRlZCA9IHN0cmluZ1swXSA9PT0gJ1xcbicgfHwgc3RyaW5nWzBdID09PSAnICc7XG4gIHZhciBtb3JlSW5kZW50ZWQ7XG5cbiAgLy8gcmVzdCBvZiB0aGUgbGluZXNcbiAgdmFyIG1hdGNoO1xuICB3aGlsZSAoKG1hdGNoID0gbGluZVJlLmV4ZWMoc3RyaW5nKSkpIHtcbiAgICB2YXIgcHJlZml4ID0gbWF0Y2hbMV0sIGxpbmUgPSBtYXRjaFsyXTtcbiAgICBtb3JlSW5kZW50ZWQgPSAobGluZVswXSA9PT0gJyAnKTtcbiAgICByZXN1bHQgKz0gcHJlZml4XG4gICAgICArICghcHJldk1vcmVJbmRlbnRlZCAmJiAhbW9yZUluZGVudGVkICYmIGxpbmUgIT09ICcnXG4gICAgICAgID8gJ1xcbicgOiAnJylcbiAgICAgICsgZm9sZExpbmUobGluZSwgd2lkdGgpO1xuICAgIHByZXZNb3JlSW5kZW50ZWQgPSBtb3JlSW5kZW50ZWQ7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBHcmVlZHkgbGluZSBicmVha2luZy5cbi8vIFBpY2tzIHRoZSBsb25nZXN0IGxpbmUgdW5kZXIgdGhlIGxpbWl0IGVhY2ggdGltZSxcbi8vIG90aGVyd2lzZSBzZXR0bGVzIGZvciB0aGUgc2hvcnRlc3QgbGluZSBvdmVyIHRoZSBsaW1pdC5cbi8vIE5CLiBNb3JlLWluZGVudGVkIGxpbmVzICpjYW5ub3QqIGJlIGZvbGRlZCwgYXMgdGhhdCB3b3VsZCBhZGQgYW4gZXh0cmEgXFxuLlxuZnVuY3Rpb24gZm9sZExpbmUobGluZSwgd2lkdGgpIHtcbiAgaWYgKGxpbmUgPT09ICcnIHx8IGxpbmVbMF0gPT09ICcgJykgcmV0dXJuIGxpbmU7XG5cbiAgLy8gU2luY2UgYSBtb3JlLWluZGVudGVkIGxpbmUgYWRkcyBhIFxcbiwgYnJlYWtzIGNhbid0IGJlIGZvbGxvd2VkIGJ5IGEgc3BhY2UuXG4gIHZhciBicmVha1JlID0gLyBbXiBdL2c7IC8vIG5vdGU6IHRoZSBtYXRjaCBpbmRleCB3aWxsIGFsd2F5cyBiZSA8PSBsZW5ndGgtMi5cbiAgdmFyIG1hdGNoO1xuICAvLyBzdGFydCBpcyBhbiBpbmNsdXNpdmUgaW5kZXguIGVuZCwgY3VyciwgYW5kIG5leHQgYXJlIGV4Y2x1c2l2ZS5cbiAgdmFyIHN0YXJ0ID0gMCwgZW5kLCBjdXJyID0gMCwgbmV4dCA9IDA7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICAvLyBJbnZhcmlhbnRzOiAwIDw9IHN0YXJ0IDw9IGxlbmd0aC0xLlxuICAvLyAgIDAgPD0gY3VyciA8PSBuZXh0IDw9IG1heCgwLCBsZW5ndGgtMikuIGN1cnIgLSBzdGFydCA8PSB3aWR0aC5cbiAgLy8gSW5zaWRlIHRoZSBsb29wOlxuICAvLyAgIEEgbWF0Y2ggaW1wbGllcyBsZW5ndGggPj0gMiwgc28gY3VyciBhbmQgbmV4dCBhcmUgPD0gbGVuZ3RoLTIuXG4gIHdoaWxlICgobWF0Y2ggPSBicmVha1JlLmV4ZWMobGluZSkpKSB7XG4gICAgbmV4dCA9IG1hdGNoLmluZGV4O1xuICAgIC8vIG1haW50YWluIGludmFyaWFudDogY3VyciAtIHN0YXJ0IDw9IHdpZHRoXG4gICAgaWYgKG5leHQgLSBzdGFydCA+IHdpZHRoKSB7XG4gICAgICBlbmQgPSAoY3VyciA+IHN0YXJ0KSA/IGN1cnIgOiBuZXh0OyAvLyBkZXJpdmUgZW5kIDw9IGxlbmd0aC0yXG4gICAgICByZXN1bHQgKz0gJ1xcbicgKyBsaW5lLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgLy8gc2tpcCB0aGUgc3BhY2UgdGhhdCB3YXMgb3V0cHV0IGFzIFxcblxuICAgICAgc3RhcnQgPSBlbmQgKyAxOyAgICAgICAgICAgICAgICAgICAgLy8gZGVyaXZlIHN0YXJ0IDw9IGxlbmd0aC0xXG4gICAgfVxuICAgIGN1cnIgPSBuZXh0O1xuICB9XG5cbiAgLy8gQnkgdGhlIGludmFyaWFudHMsIHN0YXJ0IDw9IGxlbmd0aC0xLCBzbyB0aGVyZSBpcyBzb21ldGhpbmcgbGVmdCBvdmVyLlxuICAvLyBJdCBpcyBlaXRoZXIgdGhlIHdob2xlIHN0cmluZyBvciBhIHBhcnQgc3RhcnRpbmcgZnJvbSBub24td2hpdGVzcGFjZS5cbiAgcmVzdWx0ICs9ICdcXG4nO1xuICAvLyBJbnNlcnQgYSBicmVhayBpZiB0aGUgcmVtYWluZGVyIGlzIHRvbyBsb25nIGFuZCB0aGVyZSBpcyBhIGJyZWFrIGF2YWlsYWJsZS5cbiAgaWYgKGxpbmUubGVuZ3RoIC0gc3RhcnQgPiB3aWR0aCAmJiBjdXJyID4gc3RhcnQpIHtcbiAgICByZXN1bHQgKz0gbGluZS5zbGljZShzdGFydCwgY3VycikgKyAnXFxuJyArIGxpbmUuc2xpY2UoY3VyciArIDEpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCArPSBsaW5lLnNsaWNlKHN0YXJ0KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQuc2xpY2UoMSk7IC8vIGRyb3AgZXh0cmEgXFxuIGpvaW5lclxufVxuXG4vLyBFc2NhcGVzIGEgZG91YmxlLXF1b3RlZCBzdHJpbmcuXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcoc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgdmFyIGNoYXIsIG5leHRDaGFyO1xuICB2YXIgZXNjYXBlU2VxO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hhciA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgIC8vIENoZWNrIGZvciBzdXJyb2dhdGUgcGFpcnMgKHJlZmVyZW5jZSBVbmljb2RlIDMuMCBzZWN0aW9uIFwiMy43IFN1cnJvZ2F0ZXNcIikuXG4gICAgaWYgKGNoYXIgPj0gMHhEODAwICYmIGNoYXIgPD0gMHhEQkZGLyogaGlnaCBzdXJyb2dhdGUgKi8pIHtcbiAgICAgIG5leHRDaGFyID0gc3RyaW5nLmNoYXJDb2RlQXQoaSArIDEpO1xuICAgICAgaWYgKG5leHRDaGFyID49IDB4REMwMCAmJiBuZXh0Q2hhciA8PSAweERGRkYvKiBsb3cgc3Vycm9nYXRlICovKSB7XG4gICAgICAgIC8vIENvbWJpbmUgdGhlIHN1cnJvZ2F0ZSBwYWlyIGFuZCBzdG9yZSBpdCBlc2NhcGVkLlxuICAgICAgICByZXN1bHQgKz0gZW5jb2RlSGV4KChjaGFyIC0gMHhEODAwKSAqIDB4NDAwICsgbmV4dENoYXIgLSAweERDMDAgKyAweDEwMDAwKTtcbiAgICAgICAgLy8gQWR2YW5jZSBpbmRleCBvbmUgZXh0cmEgc2luY2Ugd2UgYWxyZWFkeSB1c2VkIHRoYXQgY2hhciBoZXJlLlxuICAgICAgICBpKys7IGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBlc2NhcGVTZXEgPSBFU0NBUEVfU0VRVUVOQ0VTW2NoYXJdO1xuICAgIHJlc3VsdCArPSAhZXNjYXBlU2VxICYmIGlzUHJpbnRhYmxlKGNoYXIpXG4gICAgICA/IHN0cmluZ1tpXVxuICAgICAgOiBlc2NhcGVTZXEgfHwgZW5jb2RlSGV4KGNoYXIpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gd3JpdGVGbG93U2VxdWVuY2Uoc3RhdGUsIGxldmVsLCBvYmplY3QpIHtcbiAgdmFyIF9yZXN1bHQgPSAnJyxcbiAgICAgIF90YWcgICAgPSBzdGF0ZS50YWcsXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aDtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAvLyBXcml0ZSBvbmx5IHZhbGlkIGVsZW1lbnRzLlxuICAgIGlmICh3cml0ZU5vZGUoc3RhdGUsIGxldmVsLCBvYmplY3RbaW5kZXhdLCBmYWxzZSwgZmFsc2UpKSB7XG4gICAgICBpZiAoaW5kZXggIT09IDApIF9yZXN1bHQgKz0gJywnICsgKCFzdGF0ZS5jb25kZW5zZUZsb3cgPyAnICcgOiAnJyk7XG4gICAgICBfcmVzdWx0ICs9IHN0YXRlLmR1bXA7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9ICdbJyArIF9yZXN1bHQgKyAnXSc7XG59XG5cbmZ1bmN0aW9uIHdyaXRlQmxvY2tTZXF1ZW5jZShzdGF0ZSwgbGV2ZWwsIG9iamVjdCwgY29tcGFjdCkge1xuICB2YXIgX3Jlc3VsdCA9ICcnLFxuICAgICAgX3RhZyAgICA9IHN0YXRlLnRhZyxcbiAgICAgIGluZGV4LFxuICAgICAgbGVuZ3RoO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIC8vIFdyaXRlIG9ubHkgdmFsaWQgZWxlbWVudHMuXG4gICAgaWYgKHdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwgKyAxLCBvYmplY3RbaW5kZXhdLCB0cnVlLCB0cnVlKSkge1xuICAgICAgaWYgKCFjb21wYWN0IHx8IGluZGV4ICE9PSAwKSB7XG4gICAgICAgIF9yZXN1bHQgKz0gZ2VuZXJhdGVOZXh0TGluZShzdGF0ZSwgbGV2ZWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuZHVtcCAmJiBDSEFSX0xJTkVfRkVFRCA9PT0gc3RhdGUuZHVtcC5jaGFyQ29kZUF0KDApKSB7XG4gICAgICAgIF9yZXN1bHQgKz0gJy0nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3Jlc3VsdCArPSAnLSAnO1xuICAgICAgfVxuXG4gICAgICBfcmVzdWx0ICs9IHN0YXRlLmR1bXA7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9IF9yZXN1bHQgfHwgJ1tdJzsgLy8gRW1wdHkgc2VxdWVuY2UgaWYgbm8gdmFsaWQgdmFsdWVzLlxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb3dNYXBwaW5nKHN0YXRlLCBsZXZlbCwgb2JqZWN0KSB7XG4gIHZhciBfcmVzdWx0ICAgICAgID0gJycsXG4gICAgICBfdGFnICAgICAgICAgID0gc3RhdGUudGFnLFxuICAgICAgb2JqZWN0S2V5TGlzdCA9IE9iamVjdC5rZXlzKG9iamVjdCksXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aCxcbiAgICAgIG9iamVjdEtleSxcbiAgICAgIG9iamVjdFZhbHVlLFxuICAgICAgcGFpckJ1ZmZlcjtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0S2V5TGlzdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpckJ1ZmZlciA9IHN0YXRlLmNvbmRlbnNlRmxvdyA/ICdcIicgOiAnJztcblxuICAgIGlmIChpbmRleCAhPT0gMCkgcGFpckJ1ZmZlciArPSAnLCAnO1xuXG4gICAgb2JqZWN0S2V5ID0gb2JqZWN0S2V5TGlzdFtpbmRleF07XG4gICAgb2JqZWN0VmFsdWUgPSBvYmplY3Rbb2JqZWN0S2V5XTtcblxuICAgIGlmICghd3JpdGVOb2RlKHN0YXRlLCBsZXZlbCwgb2JqZWN0S2V5LCBmYWxzZSwgZmFsc2UpKSB7XG4gICAgICBjb250aW51ZTsgLy8gU2tpcCB0aGlzIHBhaXIgYmVjYXVzZSBvZiBpbnZhbGlkIGtleTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuZHVtcC5sZW5ndGggPiAxMDI0KSBwYWlyQnVmZmVyICs9ICc/ICc7XG5cbiAgICBwYWlyQnVmZmVyICs9IHN0YXRlLmR1bXAgKyAoc3RhdGUuY29uZGVuc2VGbG93ID8gJ1wiJyA6ICcnKSArICc6JyArIChzdGF0ZS5jb25kZW5zZUZsb3cgPyAnJyA6ICcgJyk7XG5cbiAgICBpZiAoIXdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwsIG9iamVjdFZhbHVlLCBmYWxzZSwgZmFsc2UpKSB7XG4gICAgICBjb250aW51ZTsgLy8gU2tpcCB0aGlzIHBhaXIgYmVjYXVzZSBvZiBpbnZhbGlkIHZhbHVlLlxuICAgIH1cblxuICAgIHBhaXJCdWZmZXIgKz0gc3RhdGUuZHVtcDtcblxuICAgIC8vIEJvdGgga2V5IGFuZCB2YWx1ZSBhcmUgdmFsaWQuXG4gICAgX3Jlc3VsdCArPSBwYWlyQnVmZmVyO1xuICB9XG5cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9ICd7JyArIF9yZXN1bHQgKyAnfSc7XG59XG5cbmZ1bmN0aW9uIHdyaXRlQmxvY2tNYXBwaW5nKHN0YXRlLCBsZXZlbCwgb2JqZWN0LCBjb21wYWN0KSB7XG4gIHZhciBfcmVzdWx0ICAgICAgID0gJycsXG4gICAgICBfdGFnICAgICAgICAgID0gc3RhdGUudGFnLFxuICAgICAgb2JqZWN0S2V5TGlzdCA9IE9iamVjdC5rZXlzKG9iamVjdCksXG4gICAgICBpbmRleCxcbiAgICAgIGxlbmd0aCxcbiAgICAgIG9iamVjdEtleSxcbiAgICAgIG9iamVjdFZhbHVlLFxuICAgICAgZXhwbGljaXRQYWlyLFxuICAgICAgcGFpckJ1ZmZlcjtcblxuICAvLyBBbGxvdyBzb3J0aW5nIGtleXMgc28gdGhhdCB0aGUgb3V0cHV0IGZpbGUgaXMgZGV0ZXJtaW5pc3RpY1xuICBpZiAoc3RhdGUuc29ydEtleXMgPT09IHRydWUpIHtcbiAgICAvLyBEZWZhdWx0IHNvcnRpbmdcbiAgICBvYmplY3RLZXlMaXN0LnNvcnQoKTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc3RhdGUuc29ydEtleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBDdXN0b20gc29ydCBmdW5jdGlvblxuICAgIG9iamVjdEtleUxpc3Quc29ydChzdGF0ZS5zb3J0S2V5cyk7XG4gIH0gZWxzZSBpZiAoc3RhdGUuc29ydEtleXMpIHtcbiAgICAvLyBTb21ldGhpbmcgaXMgd3JvbmdcbiAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignc29ydEtleXMgbXVzdCBiZSBhIGJvb2xlYW4gb3IgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdEtleUxpc3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHBhaXJCdWZmZXIgPSAnJztcblxuICAgIGlmICghY29tcGFjdCB8fCBpbmRleCAhPT0gMCkge1xuICAgICAgcGFpckJ1ZmZlciArPSBnZW5lcmF0ZU5leHRMaW5lKHN0YXRlLCBsZXZlbCk7XG4gICAgfVxuXG4gICAgb2JqZWN0S2V5ID0gb2JqZWN0S2V5TGlzdFtpbmRleF07XG4gICAgb2JqZWN0VmFsdWUgPSBvYmplY3Rbb2JqZWN0S2V5XTtcblxuICAgIGlmICghd3JpdGVOb2RlKHN0YXRlLCBsZXZlbCArIDEsIG9iamVjdEtleSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSkpIHtcbiAgICAgIGNvbnRpbnVlOyAvLyBTa2lwIHRoaXMgcGFpciBiZWNhdXNlIG9mIGludmFsaWQga2V5LlxuICAgIH1cblxuICAgIGV4cGxpY2l0UGFpciA9IChzdGF0ZS50YWcgIT09IG51bGwgJiYgc3RhdGUudGFnICE9PSAnPycpIHx8XG4gICAgICAgICAgICAgICAgICAgKHN0YXRlLmR1bXAgJiYgc3RhdGUuZHVtcC5sZW5ndGggPiAxMDI0KTtcblxuICAgIGlmIChleHBsaWNpdFBhaXIpIHtcbiAgICAgIGlmIChzdGF0ZS5kdW1wICYmIENIQVJfTElORV9GRUVEID09PSBzdGF0ZS5kdW1wLmNoYXJDb2RlQXQoMCkpIHtcbiAgICAgICAgcGFpckJ1ZmZlciArPSAnPyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWlyQnVmZmVyICs9ICc/ICc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGFpckJ1ZmZlciArPSBzdGF0ZS5kdW1wO1xuXG4gICAgaWYgKGV4cGxpY2l0UGFpcikge1xuICAgICAgcGFpckJ1ZmZlciArPSBnZW5lcmF0ZU5leHRMaW5lKHN0YXRlLCBsZXZlbCk7XG4gICAgfVxuXG4gICAgaWYgKCF3cml0ZU5vZGUoc3RhdGUsIGxldmVsICsgMSwgb2JqZWN0VmFsdWUsIHRydWUsIGV4cGxpY2l0UGFpcikpIHtcbiAgICAgIGNvbnRpbnVlOyAvLyBTa2lwIHRoaXMgcGFpciBiZWNhdXNlIG9mIGludmFsaWQgdmFsdWUuXG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLmR1bXAgJiYgQ0hBUl9MSU5FX0ZFRUQgPT09IHN0YXRlLmR1bXAuY2hhckNvZGVBdCgwKSkge1xuICAgICAgcGFpckJ1ZmZlciArPSAnOic7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhaXJCdWZmZXIgKz0gJzogJztcbiAgICB9XG5cbiAgICBwYWlyQnVmZmVyICs9IHN0YXRlLmR1bXA7XG5cbiAgICAvLyBCb3RoIGtleSBhbmQgdmFsdWUgYXJlIHZhbGlkLlxuICAgIF9yZXN1bHQgKz0gcGFpckJ1ZmZlcjtcbiAgfVxuXG4gIHN0YXRlLnRhZyA9IF90YWc7XG4gIHN0YXRlLmR1bXAgPSBfcmVzdWx0IHx8ICd7fSc7IC8vIEVtcHR5IG1hcHBpbmcgaWYgbm8gdmFsaWQgcGFpcnMuXG59XG5cbmZ1bmN0aW9uIGRldGVjdFR5cGUoc3RhdGUsIG9iamVjdCwgZXhwbGljaXQpIHtcbiAgdmFyIF9yZXN1bHQsIHR5cGVMaXN0LCBpbmRleCwgbGVuZ3RoLCB0eXBlLCBzdHlsZTtcblxuICB0eXBlTGlzdCA9IGV4cGxpY2l0ID8gc3RhdGUuZXhwbGljaXRUeXBlcyA6IHN0YXRlLmltcGxpY2l0VHlwZXM7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHR5cGVMaXN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICB0eXBlID0gdHlwZUxpc3RbaW5kZXhdO1xuXG4gICAgaWYgKCh0eXBlLmluc3RhbmNlT2YgIHx8IHR5cGUucHJlZGljYXRlKSAmJlxuICAgICAgICAoIXR5cGUuaW5zdGFuY2VPZiB8fCAoKHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnKSAmJiAob2JqZWN0IGluc3RhbmNlb2YgdHlwZS5pbnN0YW5jZU9mKSkpICYmXG4gICAgICAgICghdHlwZS5wcmVkaWNhdGUgIHx8IHR5cGUucHJlZGljYXRlKG9iamVjdCkpKSB7XG5cbiAgICAgIHN0YXRlLnRhZyA9IGV4cGxpY2l0ID8gdHlwZS50YWcgOiAnPyc7XG5cbiAgICAgIGlmICh0eXBlLnJlcHJlc2VudCkge1xuICAgICAgICBzdHlsZSA9IHN0YXRlLnN0eWxlTWFwW3R5cGUudGFnXSB8fCB0eXBlLmRlZmF1bHRTdHlsZTtcblxuICAgICAgICBpZiAoX3RvU3RyaW5nLmNhbGwodHlwZS5yZXByZXNlbnQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nKSB7XG4gICAgICAgICAgX3Jlc3VsdCA9IHR5cGUucmVwcmVzZW50KG9iamVjdCwgc3R5bGUpO1xuICAgICAgICB9IGVsc2UgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKHR5cGUucmVwcmVzZW50LCBzdHlsZSkpIHtcbiAgICAgICAgICBfcmVzdWx0ID0gdHlwZS5yZXByZXNlbnRbc3R5bGVdKG9iamVjdCwgc3R5bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCchPCcgKyB0eXBlLnRhZyArICc+IHRhZyByZXNvbHZlciBhY2NlcHRzIG5vdCBcIicgKyBzdHlsZSArICdcIiBzdHlsZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUuZHVtcCA9IF9yZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLy8gU2VyaWFsaXplcyBgb2JqZWN0YCBhbmQgd3JpdGVzIGl0IHRvIGdsb2JhbCBgcmVzdWx0YC5cbi8vIFJldHVybnMgdHJ1ZSBvbiBzdWNjZXNzLCBvciBmYWxzZSBvbiBpbnZhbGlkIG9iamVjdC5cbi8vXG5mdW5jdGlvbiB3cml0ZU5vZGUoc3RhdGUsIGxldmVsLCBvYmplY3QsIGJsb2NrLCBjb21wYWN0LCBpc2tleSkge1xuICBzdGF0ZS50YWcgPSBudWxsO1xuICBzdGF0ZS5kdW1wID0gb2JqZWN0O1xuXG4gIGlmICghZGV0ZWN0VHlwZShzdGF0ZSwgb2JqZWN0LCBmYWxzZSkpIHtcbiAgICBkZXRlY3RUeXBlKHN0YXRlLCBvYmplY3QsIHRydWUpO1xuICB9XG5cbiAgdmFyIHR5cGUgPSBfdG9TdHJpbmcuY2FsbChzdGF0ZS5kdW1wKTtcblxuICBpZiAoYmxvY2spIHtcbiAgICBibG9jayA9IChzdGF0ZS5mbG93TGV2ZWwgPCAwIHx8IHN0YXRlLmZsb3dMZXZlbCA+IGxldmVsKTtcbiAgfVxuXG4gIHZhciBvYmplY3RPckFycmF5ID0gdHlwZSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgfHwgdHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICAgIGR1cGxpY2F0ZUluZGV4LFxuICAgICAgZHVwbGljYXRlO1xuXG4gIGlmIChvYmplY3RPckFycmF5KSB7XG4gICAgZHVwbGljYXRlSW5kZXggPSBzdGF0ZS5kdXBsaWNhdGVzLmluZGV4T2Yob2JqZWN0KTtcbiAgICBkdXBsaWNhdGUgPSBkdXBsaWNhdGVJbmRleCAhPT0gLTE7XG4gIH1cblxuICBpZiAoKHN0YXRlLnRhZyAhPT0gbnVsbCAmJiBzdGF0ZS50YWcgIT09ICc/JykgfHwgZHVwbGljYXRlIHx8IChzdGF0ZS5pbmRlbnQgIT09IDIgJiYgbGV2ZWwgPiAwKSkge1xuICAgIGNvbXBhY3QgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChkdXBsaWNhdGUgJiYgc3RhdGUudXNlZER1cGxpY2F0ZXNbZHVwbGljYXRlSW5kZXhdKSB7XG4gICAgc3RhdGUuZHVtcCA9ICcqcmVmXycgKyBkdXBsaWNhdGVJbmRleDtcbiAgfSBlbHNlIHtcbiAgICBpZiAob2JqZWN0T3JBcnJheSAmJiBkdXBsaWNhdGUgJiYgIXN0YXRlLnVzZWREdXBsaWNhdGVzW2R1cGxpY2F0ZUluZGV4XSkge1xuICAgICAgc3RhdGUudXNlZER1cGxpY2F0ZXNbZHVwbGljYXRlSW5kZXhdID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICBpZiAoYmxvY2sgJiYgKE9iamVjdC5rZXlzKHN0YXRlLmR1bXApLmxlbmd0aCAhPT0gMCkpIHtcbiAgICAgICAgd3JpdGVCbG9ja01hcHBpbmcoc3RhdGUsIGxldmVsLCBzdGF0ZS5kdW1wLCBjb21wYWN0KTtcbiAgICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICAgIHN0YXRlLmR1bXAgPSAnJnJlZl8nICsgZHVwbGljYXRlSW5kZXggKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cml0ZUZsb3dNYXBwaW5nKHN0YXRlLCBsZXZlbCwgc3RhdGUuZHVtcCk7XG4gICAgICAgIGlmIChkdXBsaWNhdGUpIHtcbiAgICAgICAgICBzdGF0ZS5kdW1wID0gJyZyZWZfJyArIGR1cGxpY2F0ZUluZGV4ICsgJyAnICsgc3RhdGUuZHVtcDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgaWYgKGJsb2NrICYmIChzdGF0ZS5kdW1wLmxlbmd0aCAhPT0gMCkpIHtcbiAgICAgICAgd3JpdGVCbG9ja1NlcXVlbmNlKHN0YXRlLCBsZXZlbCwgc3RhdGUuZHVtcCwgY29tcGFjdCk7XG4gICAgICAgIGlmIChkdXBsaWNhdGUpIHtcbiAgICAgICAgICBzdGF0ZS5kdW1wID0gJyZyZWZfJyArIGR1cGxpY2F0ZUluZGV4ICsgc3RhdGUuZHVtcDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JpdGVGbG93U2VxdWVuY2Uoc3RhdGUsIGxldmVsLCBzdGF0ZS5kdW1wKTtcbiAgICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICAgIHN0YXRlLmR1bXAgPSAnJnJlZl8nICsgZHVwbGljYXRlSW5kZXggKyAnICcgKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnW29iamVjdCBTdHJpbmddJykge1xuICAgICAgaWYgKHN0YXRlLnRhZyAhPT0gJz8nKSB7XG4gICAgICAgIHdyaXRlU2NhbGFyKHN0YXRlLCBzdGF0ZS5kdW1wLCBsZXZlbCwgaXNrZXkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhdGUuc2tpcEludmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCd1bmFjY2VwdGFibGUga2luZCBvZiBhbiBvYmplY3QgdG8gZHVtcCAnICsgdHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnRhZyAhPT0gbnVsbCAmJiBzdGF0ZS50YWcgIT09ICc/Jykge1xuICAgICAgc3RhdGUuZHVtcCA9ICchPCcgKyBzdGF0ZS50YWcgKyAnPiAnICsgc3RhdGUuZHVtcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0RHVwbGljYXRlUmVmZXJlbmNlcyhvYmplY3QsIHN0YXRlKSB7XG4gIHZhciBvYmplY3RzID0gW10sXG4gICAgICBkdXBsaWNhdGVzSW5kZXhlcyA9IFtdLFxuICAgICAgaW5kZXgsXG4gICAgICBsZW5ndGg7XG5cbiAgaW5zcGVjdE5vZGUob2JqZWN0LCBvYmplY3RzLCBkdXBsaWNhdGVzSW5kZXhlcyk7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGR1cGxpY2F0ZXNJbmRleGVzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBzdGF0ZS5kdXBsaWNhdGVzLnB1c2gob2JqZWN0c1tkdXBsaWNhdGVzSW5kZXhlc1tpbmRleF1dKTtcbiAgfVxuICBzdGF0ZS51c2VkRHVwbGljYXRlcyA9IG5ldyBBcnJheShsZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBpbnNwZWN0Tm9kZShvYmplY3QsIG9iamVjdHMsIGR1cGxpY2F0ZXNJbmRleGVzKSB7XG4gIHZhciBvYmplY3RLZXlMaXN0LFxuICAgICAgaW5kZXgsXG4gICAgICBsZW5ndGg7XG5cbiAgaWYgKG9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0Jykge1xuICAgIGluZGV4ID0gb2JqZWN0cy5pbmRleE9mKG9iamVjdCk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgaWYgKGR1cGxpY2F0ZXNJbmRleGVzLmluZGV4T2YoaW5kZXgpID09PSAtMSkge1xuICAgICAgICBkdXBsaWNhdGVzSW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb2JqZWN0cy5wdXNoKG9iamVjdCk7XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICAgICAgaW5zcGVjdE5vZGUob2JqZWN0W2luZGV4XSwgb2JqZWN0cywgZHVwbGljYXRlc0luZGV4ZXMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3RLZXlMaXN0ID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICAgICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0S2V5TGlzdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICAgICAgaW5zcGVjdE5vZGUob2JqZWN0W29iamVjdEtleUxpc3RbaW5kZXhdXSwgb2JqZWN0cywgZHVwbGljYXRlc0luZGV4ZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGR1bXAoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIHN0YXRlID0gbmV3IFN0YXRlKG9wdGlvbnMpO1xuXG4gIGlmICghc3RhdGUubm9SZWZzKSBnZXREdXBsaWNhdGVSZWZlcmVuY2VzKGlucHV0LCBzdGF0ZSk7XG5cbiAgaWYgKHdyaXRlTm9kZShzdGF0ZSwgMCwgaW5wdXQsIHRydWUsIHRydWUpKSByZXR1cm4gc3RhdGUuZHVtcCArICdcXG4nO1xuXG4gIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gc2FmZUR1bXAoaW5wdXQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGR1bXAoaW5wdXQsIGNvbW1vbi5leHRlbmQoeyBzY2hlbWE6IERFRkFVTFRfU0FGRV9TQ0hFTUEgfSwgb3B0aW9ucykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5kdW1wICAgICA9IGR1bXA7XG5tb2R1bGUuZXhwb3J0cy5zYWZlRHVtcCA9IHNhZmVEdW1wO1xuIiwiLy8gWUFNTCBlcnJvciBjbGFzcy4gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy84NDU4OTg0XG4vL1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBZQU1MRXhjZXB0aW9uKHJlYXNvbiwgbWFyaykge1xuICAvLyBTdXBlciBjb25zdHJ1Y3RvclxuICBFcnJvci5jYWxsKHRoaXMpO1xuXG4gIHRoaXMubmFtZSA9ICdZQU1MRXhjZXB0aW9uJztcbiAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gIHRoaXMubWFyayA9IG1hcms7XG4gIHRoaXMubWVzc2FnZSA9ICh0aGlzLnJlYXNvbiB8fCAnKHVua25vd24gcmVhc29uKScpICsgKHRoaXMubWFyayA/ICcgJyArIHRoaXMubWFyay50b1N0cmluZygpIDogJycpO1xuXG4gIC8vIEluY2x1ZGUgc3RhY2sgdHJhY2UgaW4gZXJyb3Igb2JqZWN0XG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIC8vIENocm9tZSBhbmQgTm9kZUpTXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgLy8gRkYsIElFIDEwKyBhbmQgU2FmYXJpIDYrLiBGYWxsYmFjayBmb3Igb3RoZXJzXG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2sgfHwgJyc7XG4gIH1cbn1cblxuXG4vLyBJbmhlcml0IGZyb20gRXJyb3JcbllBTUxFeGNlcHRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuWUFNTEV4Y2VwdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBZQU1MRXhjZXB0aW9uO1xuXG5cbllBTUxFeGNlcHRpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoY29tcGFjdCkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5uYW1lICsgJzogJztcblxuICByZXN1bHQgKz0gdGhpcy5yZWFzb24gfHwgJyh1bmtub3duIHJlYXNvbiknO1xuXG4gIGlmICghY29tcGFjdCAmJiB0aGlzLm1hcmspIHtcbiAgICByZXN1bHQgKz0gJyAnICsgdGhpcy5tYXJrLnRvU3RyaW5nKCk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFlBTUxFeGNlcHRpb247XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qZXNsaW50LWRpc2FibGUgbWF4LWxlbixuby11c2UtYmVmb3JlLWRlZmluZSovXG5cbnZhciBjb21tb24gICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9jb21tb24nKTtcbnZhciBZQU1MRXhjZXB0aW9uICAgICAgID0gcmVxdWlyZSgnLi9leGNlcHRpb24nKTtcbnZhciBNYXJrICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9tYXJrJyk7XG52YXIgREVGQVVMVF9TQUZFX1NDSEVNQSA9IHJlcXVpcmUoJy4vc2NoZW1hL2RlZmF1bHRfc2FmZScpO1xudmFyIERFRkFVTFRfRlVMTF9TQ0hFTUEgPSByZXF1aXJlKCcuL3NjaGVtYS9kZWZhdWx0X2Z1bGwnKTtcblxuXG52YXIgX2hhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuXG52YXIgQ09OVEVYVF9GTE9XX0lOICAgPSAxO1xudmFyIENPTlRFWFRfRkxPV19PVVQgID0gMjtcbnZhciBDT05URVhUX0JMT0NLX0lOICA9IDM7XG52YXIgQ09OVEVYVF9CTE9DS19PVVQgPSA0O1xuXG5cbnZhciBDSE9NUElOR19DTElQICA9IDE7XG52YXIgQ0hPTVBJTkdfU1RSSVAgPSAyO1xudmFyIENIT01QSU5HX0tFRVAgID0gMztcblxuXG52YXIgUEFUVEVSTl9OT05fUFJJTlRBQkxFICAgICAgICAgPSAvW1xceDAwLVxceDA4XFx4MEJcXHgwQ1xceDBFLVxceDFGXFx4N0YtXFx4ODRcXHg4Ni1cXHg5RlxcdUZGRkVcXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXS87XG52YXIgUEFUVEVSTl9OT05fQVNDSUlfTElORV9CUkVBS1MgPSAvW1xceDg1XFx1MjAyOFxcdTIwMjldLztcbnZhciBQQVRURVJOX0ZMT1dfSU5ESUNBVE9SUyAgICAgICA9IC9bLFxcW1xcXVxce1xcfV0vO1xudmFyIFBBVFRFUk5fVEFHX0hBTkRMRSAgICAgICAgICAgID0gL14oPzohfCEhfCFbYS16XFwtXSshKSQvaTtcbnZhciBQQVRURVJOX1RBR19VUkkgICAgICAgICAgICAgICA9IC9eKD86IXxbXixcXFtcXF1cXHtcXH1dKSg/OiVbMC05YS1mXXsyfXxbMC05YS16XFwtIztcXC9cXD86QCY9XFwrXFwkLF9cXC4hflxcKidcXChcXClcXFtcXF1dKSokL2k7XG5cblxuZnVuY3Rpb24gaXNfRU9MKGMpIHtcbiAgcmV0dXJuIChjID09PSAweDBBLyogTEYgKi8pIHx8IChjID09PSAweDBELyogQ1IgKi8pO1xufVxuXG5mdW5jdGlvbiBpc19XSElURV9TUEFDRShjKSB7XG4gIHJldHVybiAoYyA9PT0gMHgwOS8qIFRhYiAqLykgfHwgKGMgPT09IDB4MjAvKiBTcGFjZSAqLyk7XG59XG5cbmZ1bmN0aW9uIGlzX1dTX09SX0VPTChjKSB7XG4gIHJldHVybiAoYyA9PT0gMHgwOS8qIFRhYiAqLykgfHxcbiAgICAgICAgIChjID09PSAweDIwLyogU3BhY2UgKi8pIHx8XG4gICAgICAgICAoYyA9PT0gMHgwQS8qIExGICovKSB8fFxuICAgICAgICAgKGMgPT09IDB4MEQvKiBDUiAqLyk7XG59XG5cbmZ1bmN0aW9uIGlzX0ZMT1dfSU5ESUNBVE9SKGMpIHtcbiAgcmV0dXJuIGMgPT09IDB4MkMvKiAsICovIHx8XG4gICAgICAgICBjID09PSAweDVCLyogWyAqLyB8fFxuICAgICAgICAgYyA9PT0gMHg1RC8qIF0gKi8gfHxcbiAgICAgICAgIGMgPT09IDB4N0IvKiB7ICovIHx8XG4gICAgICAgICBjID09PSAweDdELyogfSAqLztcbn1cblxuZnVuY3Rpb24gZnJvbUhleENvZGUoYykge1xuICB2YXIgbGM7XG5cbiAgaWYgKCgweDMwLyogMCAqLyA8PSBjKSAmJiAoYyA8PSAweDM5LyogOSAqLykpIHtcbiAgICByZXR1cm4gYyAtIDB4MzA7XG4gIH1cblxuICAvKmVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UqL1xuICBsYyA9IGMgfCAweDIwO1xuXG4gIGlmICgoMHg2MS8qIGEgKi8gPD0gbGMpICYmIChsYyA8PSAweDY2LyogZiAqLykpIHtcbiAgICByZXR1cm4gbGMgLSAweDYxICsgMTA7XG4gIH1cblxuICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZWRIZXhMZW4oYykge1xuICBpZiAoYyA9PT0gMHg3OC8qIHggKi8pIHsgcmV0dXJuIDI7IH1cbiAgaWYgKGMgPT09IDB4NzUvKiB1ICovKSB7IHJldHVybiA0OyB9XG4gIGlmIChjID09PSAweDU1LyogVSAqLykgeyByZXR1cm4gODsgfVxuICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gZnJvbURlY2ltYWxDb2RlKGMpIHtcbiAgaWYgKCgweDMwLyogMCAqLyA8PSBjKSAmJiAoYyA8PSAweDM5LyogOSAqLykpIHtcbiAgICByZXR1cm4gYyAtIDB4MzA7XG4gIH1cblxuICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIHNpbXBsZUVzY2FwZVNlcXVlbmNlKGMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgaW5kZW50ICovXG4gIHJldHVybiAoYyA9PT0gMHgzMC8qIDAgKi8pID8gJ1xceDAwJyA6XG4gICAgICAgIChjID09PSAweDYxLyogYSAqLykgPyAnXFx4MDcnIDpcbiAgICAgICAgKGMgPT09IDB4NjIvKiBiICovKSA/ICdcXHgwOCcgOlxuICAgICAgICAoYyA9PT0gMHg3NC8qIHQgKi8pID8gJ1xceDA5JyA6XG4gICAgICAgIChjID09PSAweDA5LyogVGFiICovKSA/ICdcXHgwOScgOlxuICAgICAgICAoYyA9PT0gMHg2RS8qIG4gKi8pID8gJ1xceDBBJyA6XG4gICAgICAgIChjID09PSAweDc2LyogdiAqLykgPyAnXFx4MEInIDpcbiAgICAgICAgKGMgPT09IDB4NjYvKiBmICovKSA/ICdcXHgwQycgOlxuICAgICAgICAoYyA9PT0gMHg3Mi8qIHIgKi8pID8gJ1xceDBEJyA6XG4gICAgICAgIChjID09PSAweDY1LyogZSAqLykgPyAnXFx4MUInIDpcbiAgICAgICAgKGMgPT09IDB4MjAvKiBTcGFjZSAqLykgPyAnICcgOlxuICAgICAgICAoYyA9PT0gMHgyMi8qIFwiICovKSA/ICdcXHgyMicgOlxuICAgICAgICAoYyA9PT0gMHgyRi8qIC8gKi8pID8gJy8nIDpcbiAgICAgICAgKGMgPT09IDB4NUMvKiBcXCAqLykgPyAnXFx4NUMnIDpcbiAgICAgICAgKGMgPT09IDB4NEUvKiBOICovKSA/ICdcXHg4NScgOlxuICAgICAgICAoYyA9PT0gMHg1Ri8qIF8gKi8pID8gJ1xceEEwJyA6XG4gICAgICAgIChjID09PSAweDRDLyogTCAqLykgPyAnXFx1MjAyOCcgOlxuICAgICAgICAoYyA9PT0gMHg1MC8qIFAgKi8pID8gJ1xcdTIwMjknIDogJyc7XG59XG5cbmZ1bmN0aW9uIGNoYXJGcm9tQ29kZXBvaW50KGMpIHtcbiAgaWYgKGMgPD0gMHhGRkZGKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG4gIH1cbiAgLy8gRW5jb2RlIFVURi0xNiBzdXJyb2dhdGUgcGFpclxuICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9VVEYtMTYjQ29kZV9wb2ludHNfVS4yQjAxMDAwMF90b19VLjJCMTBGRkZGXG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKFxuICAgICgoYyAtIDB4MDEwMDAwKSA+PiAxMCkgKyAweEQ4MDAsXG4gICAgKChjIC0gMHgwMTAwMDApICYgMHgwM0ZGKSArIDB4REMwMFxuICApO1xufVxuXG52YXIgc2ltcGxlRXNjYXBlQ2hlY2sgPSBuZXcgQXJyYXkoMjU2KTsgLy8gaW50ZWdlciwgZm9yIGZhc3QgYWNjZXNzXG52YXIgc2ltcGxlRXNjYXBlTWFwID0gbmV3IEFycmF5KDI1Nik7XG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gIHNpbXBsZUVzY2FwZUNoZWNrW2ldID0gc2ltcGxlRXNjYXBlU2VxdWVuY2UoaSkgPyAxIDogMDtcbiAgc2ltcGxlRXNjYXBlTWFwW2ldID0gc2ltcGxlRXNjYXBlU2VxdWVuY2UoaSk7XG59XG5cblxuZnVuY3Rpb24gU3RhdGUoaW5wdXQsIG9wdGlvbnMpIHtcbiAgdGhpcy5pbnB1dCA9IGlucHV0O1xuXG4gIHRoaXMuZmlsZW5hbWUgID0gb3B0aW9uc1snZmlsZW5hbWUnXSAgfHwgbnVsbDtcbiAgdGhpcy5zY2hlbWEgICAgPSBvcHRpb25zWydzY2hlbWEnXSAgICB8fCBERUZBVUxUX0ZVTExfU0NIRU1BO1xuICB0aGlzLm9uV2FybmluZyA9IG9wdGlvbnNbJ29uV2FybmluZyddIHx8IG51bGw7XG4gIHRoaXMubGVnYWN5ICAgID0gb3B0aW9uc1snbGVnYWN5J10gICAgfHwgZmFsc2U7XG4gIHRoaXMuanNvbiAgICAgID0gb3B0aW9uc1snanNvbiddICAgICAgfHwgZmFsc2U7XG4gIHRoaXMubGlzdGVuZXIgID0gb3B0aW9uc1snbGlzdGVuZXInXSAgfHwgbnVsbDtcblxuICB0aGlzLmltcGxpY2l0VHlwZXMgPSB0aGlzLnNjaGVtYS5jb21waWxlZEltcGxpY2l0O1xuICB0aGlzLnR5cGVNYXAgICAgICAgPSB0aGlzLnNjaGVtYS5jb21waWxlZFR5cGVNYXA7XG5cbiAgdGhpcy5sZW5ndGggICAgID0gaW5wdXQubGVuZ3RoO1xuICB0aGlzLnBvc2l0aW9uICAgPSAwO1xuICB0aGlzLmxpbmUgICAgICAgPSAwO1xuICB0aGlzLmxpbmVTdGFydCAgPSAwO1xuICB0aGlzLmxpbmVJbmRlbnQgPSAwO1xuXG4gIHRoaXMuZG9jdW1lbnRzID0gW107XG5cbiAgLypcbiAgdGhpcy52ZXJzaW9uO1xuICB0aGlzLmNoZWNrTGluZUJyZWFrcztcbiAgdGhpcy50YWdNYXA7XG4gIHRoaXMuYW5jaG9yTWFwO1xuICB0aGlzLnRhZztcbiAgdGhpcy5hbmNob3I7XG4gIHRoaXMua2luZDtcbiAgdGhpcy5yZXN1bHQ7Ki9cblxufVxuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlRXJyb3Ioc3RhdGUsIG1lc3NhZ2UpIHtcbiAgcmV0dXJuIG5ldyBZQU1MRXhjZXB0aW9uKFxuICAgIG1lc3NhZ2UsXG4gICAgbmV3IE1hcmsoc3RhdGUuZmlsZW5hbWUsIHN0YXRlLmlucHV0LCBzdGF0ZS5wb3NpdGlvbiwgc3RhdGUubGluZSwgKHN0YXRlLnBvc2l0aW9uIC0gc3RhdGUubGluZVN0YXJ0KSkpO1xufVxuXG5mdW5jdGlvbiB0aHJvd0Vycm9yKHN0YXRlLCBtZXNzYWdlKSB7XG4gIHRocm93IGdlbmVyYXRlRXJyb3Ioc3RhdGUsIG1lc3NhZ2UpO1xufVxuXG5mdW5jdGlvbiB0aHJvd1dhcm5pbmcoc3RhdGUsIG1lc3NhZ2UpIHtcbiAgaWYgKHN0YXRlLm9uV2FybmluZykge1xuICAgIHN0YXRlLm9uV2FybmluZy5jYWxsKG51bGwsIGdlbmVyYXRlRXJyb3Ioc3RhdGUsIG1lc3NhZ2UpKTtcbiAgfVxufVxuXG5cbnZhciBkaXJlY3RpdmVIYW5kbGVycyA9IHtcblxuICBZQU1MOiBmdW5jdGlvbiBoYW5kbGVZYW1sRGlyZWN0aXZlKHN0YXRlLCBuYW1lLCBhcmdzKSB7XG5cbiAgICB2YXIgbWF0Y2gsIG1ham9yLCBtaW5vcjtcblxuICAgIGlmIChzdGF0ZS52ZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnZHVwbGljYXRpb24gb2YgJVlBTUwgZGlyZWN0aXZlJyk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAxKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnWUFNTCBkaXJlY3RpdmUgYWNjZXB0cyBleGFjdGx5IG9uZSBhcmd1bWVudCcpO1xuICAgIH1cblxuICAgIG1hdGNoID0gL14oWzAtOV0rKVxcLihbMC05XSspJC8uZXhlYyhhcmdzWzBdKTtcblxuICAgIGlmIChtYXRjaCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2lsbC1mb3JtZWQgYXJndW1lbnQgb2YgdGhlIFlBTUwgZGlyZWN0aXZlJyk7XG4gICAgfVxuXG4gICAgbWFqb3IgPSBwYXJzZUludChtYXRjaFsxXSwgMTApO1xuICAgIG1pbm9yID0gcGFyc2VJbnQobWF0Y2hbMl0sIDEwKTtcblxuICAgIGlmIChtYWpvciAhPT0gMSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuYWNjZXB0YWJsZSBZQU1MIHZlcnNpb24gb2YgdGhlIGRvY3VtZW50Jyk7XG4gICAgfVxuXG4gICAgc3RhdGUudmVyc2lvbiA9IGFyZ3NbMF07XG4gICAgc3RhdGUuY2hlY2tMaW5lQnJlYWtzID0gKG1pbm9yIDwgMik7XG5cbiAgICBpZiAobWlub3IgIT09IDEgJiYgbWlub3IgIT09IDIpIHtcbiAgICAgIHRocm93V2FybmluZyhzdGF0ZSwgJ3Vuc3VwcG9ydGVkIFlBTUwgdmVyc2lvbiBvZiB0aGUgZG9jdW1lbnQnKTtcbiAgICB9XG4gIH0sXG5cbiAgVEFHOiBmdW5jdGlvbiBoYW5kbGVUYWdEaXJlY3RpdmUoc3RhdGUsIG5hbWUsIGFyZ3MpIHtcblxuICAgIHZhciBoYW5kbGUsIHByZWZpeDtcblxuICAgIGlmIChhcmdzLmxlbmd0aCAhPT0gMikge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ1RBRyBkaXJlY3RpdmUgYWNjZXB0cyBleGFjdGx5IHR3byBhcmd1bWVudHMnKTtcbiAgICB9XG5cbiAgICBoYW5kbGUgPSBhcmdzWzBdO1xuICAgIHByZWZpeCA9IGFyZ3NbMV07XG5cbiAgICBpZiAoIVBBVFRFUk5fVEFHX0hBTkRMRS50ZXN0KGhhbmRsZSkpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdpbGwtZm9ybWVkIHRhZyBoYW5kbGUgKGZpcnN0IGFyZ3VtZW50KSBvZiB0aGUgVEFHIGRpcmVjdGl2ZScpO1xuICAgIH1cblxuICAgIGlmIChfaGFzT3duUHJvcGVydHkuY2FsbChzdGF0ZS50YWdNYXAsIGhhbmRsZSkpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd0aGVyZSBpcyBhIHByZXZpb3VzbHkgZGVjbGFyZWQgc3VmZml4IGZvciBcIicgKyBoYW5kbGUgKyAnXCIgdGFnIGhhbmRsZScpO1xuICAgIH1cblxuICAgIGlmICghUEFUVEVSTl9UQUdfVVJJLnRlc3QocHJlZml4KSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2lsbC1mb3JtZWQgdGFnIHByZWZpeCAoc2Vjb25kIGFyZ3VtZW50KSBvZiB0aGUgVEFHIGRpcmVjdGl2ZScpO1xuICAgIH1cblxuICAgIHN0YXRlLnRhZ01hcFtoYW5kbGVdID0gcHJlZml4O1xuICB9XG59O1xuXG5cbmZ1bmN0aW9uIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBzdGFydCwgZW5kLCBjaGVja0pzb24pIHtcbiAgdmFyIF9wb3NpdGlvbiwgX2xlbmd0aCwgX2NoYXJhY3RlciwgX3Jlc3VsdDtcblxuICBpZiAoc3RhcnQgPCBlbmQpIHtcbiAgICBfcmVzdWx0ID0gc3RhdGUuaW5wdXQuc2xpY2Uoc3RhcnQsIGVuZCk7XG5cbiAgICBpZiAoY2hlY2tKc29uKSB7XG4gICAgICBmb3IgKF9wb3NpdGlvbiA9IDAsIF9sZW5ndGggPSBfcmVzdWx0Lmxlbmd0aDsgX3Bvc2l0aW9uIDwgX2xlbmd0aDsgX3Bvc2l0aW9uICs9IDEpIHtcbiAgICAgICAgX2NoYXJhY3RlciA9IF9yZXN1bHQuY2hhckNvZGVBdChfcG9zaXRpb24pO1xuICAgICAgICBpZiAoIShfY2hhcmFjdGVyID09PSAweDA5IHx8XG4gICAgICAgICAgICAgICgweDIwIDw9IF9jaGFyYWN0ZXIgJiYgX2NoYXJhY3RlciA8PSAweDEwRkZGRikpKSB7XG4gICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2V4cGVjdGVkIHZhbGlkIEpTT04gY2hhcmFjdGVyJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFBBVFRFUk5fTk9OX1BSSU5UQUJMRS50ZXN0KF9yZXN1bHQpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGhlIHN0cmVhbSBjb250YWlucyBub24tcHJpbnRhYmxlIGNoYXJhY3RlcnMnKTtcbiAgICB9XG5cbiAgICBzdGF0ZS5yZXN1bHQgKz0gX3Jlc3VsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZU1hcHBpbmdzKHN0YXRlLCBkZXN0aW5hdGlvbiwgc291cmNlLCBvdmVycmlkYWJsZUtleXMpIHtcbiAgdmFyIHNvdXJjZUtleXMsIGtleSwgaW5kZXgsIHF1YW50aXR5O1xuXG4gIGlmICghY29tbW9uLmlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAnY2Fubm90IG1lcmdlIG1hcHBpbmdzOyB0aGUgcHJvdmlkZWQgc291cmNlIG9iamVjdCBpcyB1bmFjY2VwdGFibGUnKTtcbiAgfVxuXG4gIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gIGZvciAoaW5kZXggPSAwLCBxdWFudGl0eSA9IHNvdXJjZUtleXMubGVuZ3RoOyBpbmRleCA8IHF1YW50aXR5OyBpbmRleCArPSAxKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpbmRleF07XG5cbiAgICBpZiAoIV9oYXNPd25Qcm9wZXJ0eS5jYWxsKGRlc3RpbmF0aW9uLCBrZXkpKSB7XG4gICAgICBkZXN0aW5hdGlvbltrZXldID0gc291cmNlW2tleV07XG4gICAgICBvdmVycmlkYWJsZUtleXNba2V5XSA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHN0b3JlTWFwcGluZ1BhaXIoc3RhdGUsIF9yZXN1bHQsIG92ZXJyaWRhYmxlS2V5cywga2V5VGFnLCBrZXlOb2RlLCB2YWx1ZU5vZGUsIHN0YXJ0TGluZSwgc3RhcnRQb3MpIHtcbiAgdmFyIGluZGV4LCBxdWFudGl0eTtcblxuICBrZXlOb2RlID0gU3RyaW5nKGtleU5vZGUpO1xuXG4gIGlmIChfcmVzdWx0ID09PSBudWxsKSB7XG4gICAgX3Jlc3VsdCA9IHt9O1xuICB9XG5cbiAgaWYgKGtleVRhZyA9PT0gJ3RhZzp5YW1sLm9yZywyMDAyOm1lcmdlJykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlTm9kZSkpIHtcbiAgICAgIGZvciAoaW5kZXggPSAwLCBxdWFudGl0eSA9IHZhbHVlTm9kZS5sZW5ndGg7IGluZGV4IDwgcXVhbnRpdHk7IGluZGV4ICs9IDEpIHtcbiAgICAgICAgbWVyZ2VNYXBwaW5ncyhzdGF0ZSwgX3Jlc3VsdCwgdmFsdWVOb2RlW2luZGV4XSwgb3ZlcnJpZGFibGVLZXlzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbWVyZ2VNYXBwaW5ncyhzdGF0ZSwgX3Jlc3VsdCwgdmFsdWVOb2RlLCBvdmVycmlkYWJsZUtleXMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoIXN0YXRlLmpzb24gJiZcbiAgICAgICAgIV9oYXNPd25Qcm9wZXJ0eS5jYWxsKG92ZXJyaWRhYmxlS2V5cywga2V5Tm9kZSkgJiZcbiAgICAgICAgX2hhc093blByb3BlcnR5LmNhbGwoX3Jlc3VsdCwga2V5Tm9kZSkpIHtcbiAgICAgIHN0YXRlLmxpbmUgPSBzdGFydExpbmUgfHwgc3RhdGUubGluZTtcbiAgICAgIHN0YXRlLnBvc2l0aW9uID0gc3RhcnRQb3MgfHwgc3RhdGUucG9zaXRpb247XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnZHVwbGljYXRlZCBtYXBwaW5nIGtleScpO1xuICAgIH1cbiAgICBfcmVzdWx0W2tleU5vZGVdID0gdmFsdWVOb2RlO1xuICAgIGRlbGV0ZSBvdmVycmlkYWJsZUtleXNba2V5Tm9kZV07XG4gIH1cblxuICByZXR1cm4gX3Jlc3VsdDtcbn1cblxuZnVuY3Rpb24gcmVhZExpbmVCcmVhayhzdGF0ZSkge1xuICB2YXIgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoY2ggPT09IDB4MEEvKiBMRiAqLykge1xuICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gIH0gZWxzZSBpZiAoY2ggPT09IDB4MEQvKiBDUiAqLykge1xuICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgaWYgKHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pID09PSAweDBBLyogTEYgKi8pIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICdhIGxpbmUgYnJlYWsgaXMgZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIHN0YXRlLmxpbmUgKz0gMTtcbiAgc3RhdGUubGluZVN0YXJ0ID0gc3RhdGUucG9zaXRpb247XG59XG5cbmZ1bmN0aW9uIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIGFsbG93Q29tbWVudHMsIGNoZWNrSW5kZW50KSB7XG4gIHZhciBsaW5lQnJlYWtzID0gMCxcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgd2hpbGUgKGNoICE9PSAwKSB7XG4gICAgd2hpbGUgKGlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIH1cblxuICAgIGlmIChhbGxvd0NvbW1lbnRzICYmIGNoID09PSAweDIzLyogIyAqLykge1xuICAgICAgZG8ge1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICB9IHdoaWxlIChjaCAhPT0gMHgwQS8qIExGICovICYmIGNoICE9PSAweDBELyogQ1IgKi8gJiYgY2ggIT09IDApO1xuICAgIH1cblxuICAgIGlmIChpc19FT0woY2gpKSB7XG4gICAgICByZWFkTGluZUJyZWFrKHN0YXRlKTtcblxuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcbiAgICAgIGxpbmVCcmVha3MrKztcbiAgICAgIHN0YXRlLmxpbmVJbmRlbnQgPSAwO1xuXG4gICAgICB3aGlsZSAoY2ggPT09IDB4MjAvKiBTcGFjZSAqLykge1xuICAgICAgICBzdGF0ZS5saW5lSW5kZW50Kys7XG4gICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNoZWNrSW5kZW50ICE9PSAtMSAmJiBsaW5lQnJlYWtzICE9PSAwICYmIHN0YXRlLmxpbmVJbmRlbnQgPCBjaGVja0luZGVudCkge1xuICAgIHRocm93V2FybmluZyhzdGF0ZSwgJ2RlZmljaWVudCBpbmRlbnRhdGlvbicpO1xuICB9XG5cbiAgcmV0dXJuIGxpbmVCcmVha3M7XG59XG5cbmZ1bmN0aW9uIHRlc3REb2N1bWVudFNlcGFyYXRvcihzdGF0ZSkge1xuICB2YXIgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb24sXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoX3Bvc2l0aW9uKTtcblxuICAvLyBDb25kaXRpb24gc3RhdGUucG9zaXRpb24gPT09IHN0YXRlLmxpbmVTdGFydCBpcyB0ZXN0ZWRcbiAgLy8gaW4gcGFyZW50IG9uIGVhY2ggY2FsbCwgZm9yIGVmZmljaWVuY3kuIE5vIG5lZWRzIHRvIHRlc3QgaGVyZSBhZ2Fpbi5cbiAgaWYgKChjaCA9PT0gMHgyRC8qIC0gKi8gfHwgY2ggPT09IDB4MkUvKiAuICovKSAmJlxuICAgICAgY2ggPT09IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoX3Bvc2l0aW9uICsgMSkgJiZcbiAgICAgIGNoID09PSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KF9wb3NpdGlvbiArIDIpKSB7XG5cbiAgICBfcG9zaXRpb24gKz0gMztcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChfcG9zaXRpb24pO1xuXG4gICAgaWYgKGNoID09PSAwIHx8IGlzX1dTX09SX0VPTChjaCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gd3JpdGVGb2xkZWRMaW5lcyhzdGF0ZSwgY291bnQpIHtcbiAgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgc3RhdGUucmVzdWx0ICs9ICcgJztcbiAgfSBlbHNlIGlmIChjb3VudCA+IDEpIHtcbiAgICBzdGF0ZS5yZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnXFxuJywgY291bnQgLSAxKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHJlYWRQbGFpblNjYWxhcihzdGF0ZSwgbm9kZUluZGVudCwgd2l0aGluRmxvd0NvbGxlY3Rpb24pIHtcbiAgdmFyIHByZWNlZGluZyxcbiAgICAgIGZvbGxvd2luZyxcbiAgICAgIGNhcHR1cmVTdGFydCxcbiAgICAgIGNhcHR1cmVFbmQsXG4gICAgICBoYXNQZW5kaW5nQ29udGVudCxcbiAgICAgIF9saW5lLFxuICAgICAgX2xpbmVTdGFydCxcbiAgICAgIF9saW5lSW5kZW50LFxuICAgICAgX2tpbmQgPSBzdGF0ZS5raW5kLFxuICAgICAgX3Jlc3VsdCA9IHN0YXRlLnJlc3VsdCxcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGlzX1dTX09SX0VPTChjaCkgICAgICB8fFxuICAgICAgaXNfRkxPV19JTkRJQ0FUT1IoY2gpIHx8XG4gICAgICBjaCA9PT0gMHgyMy8qICMgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDI2LyogJiAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4MkEvKiAqICovICAgIHx8XG4gICAgICBjaCA9PT0gMHgyMS8qICEgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDdDLyogfCAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4M0UvKiA+ICovICAgIHx8XG4gICAgICBjaCA9PT0gMHgyNy8qICcgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDIyLyogXCIgKi8gICAgfHxcbiAgICAgIGNoID09PSAweDI1LyogJSAqLyAgICB8fFxuICAgICAgY2ggPT09IDB4NDAvKiBAICovICAgIHx8XG4gICAgICBjaCA9PT0gMHg2MC8qIGAgKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoY2ggPT09IDB4M0YvKiA/ICovIHx8IGNoID09PSAweDJELyogLSAqLykge1xuICAgIGZvbGxvd2luZyA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKTtcblxuICAgIGlmIChpc19XU19PUl9FT0woZm9sbG93aW5nKSB8fFxuICAgICAgICB3aXRoaW5GbG93Q29sbGVjdGlvbiAmJiBpc19GTE9XX0lORElDQVRPUihmb2xsb3dpbmcpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUua2luZCA9ICdzY2FsYXInO1xuICBzdGF0ZS5yZXN1bHQgPSAnJztcbiAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuICBoYXNQZW5kaW5nQ29udGVudCA9IGZhbHNlO1xuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIGlmIChjaCA9PT0gMHgzQS8qIDogKi8pIHtcbiAgICAgIGZvbGxvd2luZyA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKTtcblxuICAgICAgaWYgKGlzX1dTX09SX0VPTChmb2xsb3dpbmcpIHx8XG4gICAgICAgICAgd2l0aGluRmxvd0NvbGxlY3Rpb24gJiYgaXNfRkxPV19JTkRJQ0FUT1IoZm9sbG93aW5nKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAoY2ggPT09IDB4MjMvKiAjICovKSB7XG4gICAgICBwcmVjZWRpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uIC0gMSk7XG5cbiAgICAgIGlmIChpc19XU19PUl9FT0wocHJlY2VkaW5nKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAoKHN0YXRlLnBvc2l0aW9uID09PSBzdGF0ZS5saW5lU3RhcnQgJiYgdGVzdERvY3VtZW50U2VwYXJhdG9yKHN0YXRlKSkgfHxcbiAgICAgICAgICAgICAgIHdpdGhpbkZsb3dDb2xsZWN0aW9uICYmIGlzX0ZMT1dfSU5ESUNBVE9SKGNoKSkge1xuICAgICAgYnJlYWs7XG5cbiAgICB9IGVsc2UgaWYgKGlzX0VPTChjaCkpIHtcbiAgICAgIF9saW5lID0gc3RhdGUubGluZTtcbiAgICAgIF9saW5lU3RhcnQgPSBzdGF0ZS5saW5lU3RhcnQ7XG4gICAgICBfbGluZUluZGVudCA9IHN0YXRlLmxpbmVJbmRlbnQ7XG4gICAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCBmYWxzZSwgLTEpO1xuXG4gICAgICBpZiAoc3RhdGUubGluZUluZGVudCA+PSBub2RlSW5kZW50KSB7XG4gICAgICAgIGhhc1BlbmRpbmdDb250ZW50ID0gdHJ1ZTtcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5wb3NpdGlvbiA9IGNhcHR1cmVFbmQ7XG4gICAgICAgIHN0YXRlLmxpbmUgPSBfbGluZTtcbiAgICAgICAgc3RhdGUubGluZVN0YXJ0ID0gX2xpbmVTdGFydDtcbiAgICAgICAgc3RhdGUubGluZUluZGVudCA9IF9saW5lSW5kZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaGFzUGVuZGluZ0NvbnRlbnQpIHtcbiAgICAgIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQsIGZhbHNlKTtcbiAgICAgIHdyaXRlRm9sZGVkTGluZXMoc3RhdGUsIHN0YXRlLmxpbmUgLSBfbGluZSk7XG4gICAgICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gICAgICBoYXNQZW5kaW5nQ29udGVudCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghaXNfV0hJVEVfU1BBQ0UoY2gpKSB7XG4gICAgICBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb24gKyAxO1xuICAgIH1cblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgfVxuXG4gIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQsIGZhbHNlKTtcblxuICBpZiAoc3RhdGUucmVzdWx0KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzdGF0ZS5raW5kID0gX2tpbmQ7XG4gIHN0YXRlLnJlc3VsdCA9IF9yZXN1bHQ7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcmVhZFNpbmdsZVF1b3RlZFNjYWxhcihzdGF0ZSwgbm9kZUluZGVudCkge1xuICB2YXIgY2gsXG4gICAgICBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQ7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoY2ggIT09IDB4MjcvKiAnICovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RhdGUua2luZCA9ICdzY2FsYXInO1xuICBzdGF0ZS5yZXN1bHQgPSAnJztcbiAgc3RhdGUucG9zaXRpb24rKztcbiAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gIHdoaWxlICgoY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSkgIT09IDApIHtcbiAgICBpZiAoY2ggPT09IDB4MjcvKiAnICovKSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBzdGF0ZS5wb3NpdGlvbiwgdHJ1ZSk7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICAgIGlmIChjaCA9PT0gMHgyNy8qICcgKi8pIHtcbiAgICAgICAgY2FwdHVyZVN0YXJ0ID0gc3RhdGUucG9zaXRpb247XG4gICAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgICAgIGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIGlmIChpc19FT0woY2gpKSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBjYXB0dXJlRW5kLCB0cnVlKTtcbiAgICAgIHdyaXRlRm9sZGVkTGluZXMoc3RhdGUsIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIGZhbHNlLCBub2RlSW5kZW50KSk7XG4gICAgICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG5cbiAgICB9IGVsc2UgaWYgKHN0YXRlLnBvc2l0aW9uID09PSBzdGF0ZS5saW5lU3RhcnQgJiYgdGVzdERvY3VtZW50U2VwYXJhdG9yKHN0YXRlKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuZXhwZWN0ZWQgZW5kIG9mIHRoZSBkb2N1bWVudCB3aXRoaW4gYSBzaW5nbGUgcXVvdGVkIHNjYWxhcicpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgICBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gICAgfVxuICB9XG5cbiAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuZXhwZWN0ZWQgZW5kIG9mIHRoZSBzdHJlYW0gd2l0aGluIGEgc2luZ2xlIHF1b3RlZCBzY2FsYXInKTtcbn1cblxuZnVuY3Rpb24gcmVhZERvdWJsZVF1b3RlZFNjYWxhcihzdGF0ZSwgbm9kZUluZGVudCkge1xuICB2YXIgY2FwdHVyZVN0YXJ0LFxuICAgICAgY2FwdHVyZUVuZCxcbiAgICAgIGhleExlbmd0aCxcbiAgICAgIGhleFJlc3VsdCxcbiAgICAgIHRtcCxcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoICE9PSAweDIyLyogXCIgKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGF0ZS5raW5kID0gJ3NjYWxhcic7XG4gIHN0YXRlLnJlc3VsdCA9ICcnO1xuICBzdGF0ZS5wb3NpdGlvbisrO1xuICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG5cbiAgd2hpbGUgKChjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pKSAhPT0gMCkge1xuICAgIGlmIChjaCA9PT0gMHgyMi8qIFwiICovKSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBzdGF0ZS5wb3NpdGlvbiwgdHJ1ZSk7XG4gICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICB9IGVsc2UgaWYgKGNoID09PSAweDVDLyogXFwgKi8pIHtcbiAgICAgIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIHN0YXRlLnBvc2l0aW9uLCB0cnVlKTtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICAgICAgaWYgKGlzX0VPTChjaCkpIHtcbiAgICAgICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgZmFsc2UsIG5vZGVJbmRlbnQpO1xuXG4gICAgICAgIC8vIFRPRE86IHJld29yayB0byBpbmxpbmUgZm4gd2l0aCBubyB0eXBlIGNhc3Q/XG4gICAgICB9IGVsc2UgaWYgKGNoIDwgMjU2ICYmIHNpbXBsZUVzY2FwZUNoZWNrW2NoXSkge1xuICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gc2ltcGxlRXNjYXBlTWFwW2NoXTtcbiAgICAgICAgc3RhdGUucG9zaXRpb24rKztcblxuICAgICAgfSBlbHNlIGlmICgodG1wID0gZXNjYXBlZEhleExlbihjaCkpID4gMCkge1xuICAgICAgICBoZXhMZW5ndGggPSB0bXA7XG4gICAgICAgIGhleFJlc3VsdCA9IDA7XG5cbiAgICAgICAgZm9yICg7IGhleExlbmd0aCA+IDA7IGhleExlbmd0aC0tKSB7XG4gICAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuXG4gICAgICAgICAgaWYgKCh0bXAgPSBmcm9tSGV4Q29kZShjaCkpID49IDApIHtcbiAgICAgICAgICAgIGhleFJlc3VsdCA9IChoZXhSZXN1bHQgPDwgNCkgKyB0bXA7XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2V4cGVjdGVkIGhleGFkZWNpbWFsIGNoYXJhY3RlcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlLnJlc3VsdCArPSBjaGFyRnJvbUNvZGVwb2ludChoZXhSZXN1bHQpO1xuXG4gICAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmtub3duIGVzY2FwZSBzZXF1ZW5jZScpO1xuICAgICAgfVxuXG4gICAgICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG5cbiAgICB9IGVsc2UgaWYgKGlzX0VPTChjaCkpIHtcbiAgICAgIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQsIHRydWUpO1xuICAgICAgd3JpdGVGb2xkZWRMaW5lcyhzdGF0ZSwgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgZmFsc2UsIG5vZGVJbmRlbnQpKTtcbiAgICAgIGNhcHR1cmVTdGFydCA9IGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcblxuICAgIH0gZWxzZSBpZiAoc3RhdGUucG9zaXRpb24gPT09IHN0YXRlLmxpbmVTdGFydCAmJiB0ZXN0RG9jdW1lbnRTZXBhcmF0b3Ioc3RhdGUpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5leHBlY3RlZCBlbmQgb2YgdGhlIGRvY3VtZW50IHdpdGhpbiBhIGRvdWJsZSBxdW90ZWQgc2NhbGFyJyk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucG9zaXRpb24rKztcbiAgICAgIGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICB9XG4gIH1cblxuICB0aHJvd0Vycm9yKHN0YXRlLCAndW5leHBlY3RlZCBlbmQgb2YgdGhlIHN0cmVhbSB3aXRoaW4gYSBkb3VibGUgcXVvdGVkIHNjYWxhcicpO1xufVxuXG5mdW5jdGlvbiByZWFkRmxvd0NvbGxlY3Rpb24oc3RhdGUsIG5vZGVJbmRlbnQpIHtcbiAgdmFyIHJlYWROZXh0ID0gdHJ1ZSxcbiAgICAgIF9saW5lLFxuICAgICAgX3RhZyAgICAgPSBzdGF0ZS50YWcsXG4gICAgICBfcmVzdWx0LFxuICAgICAgX2FuY2hvciAgPSBzdGF0ZS5hbmNob3IsXG4gICAgICBmb2xsb3dpbmcsXG4gICAgICB0ZXJtaW5hdG9yLFxuICAgICAgaXNQYWlyLFxuICAgICAgaXNFeHBsaWNpdFBhaXIsXG4gICAgICBpc01hcHBpbmcsXG4gICAgICBvdmVycmlkYWJsZUtleXMgPSB7fSxcbiAgICAgIGtleU5vZGUsXG4gICAgICBrZXlUYWcsXG4gICAgICB2YWx1ZU5vZGUsXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCA9PT0gMHg1Qi8qIFsgKi8pIHtcbiAgICB0ZXJtaW5hdG9yID0gMHg1RDsvKiBdICovXG4gICAgaXNNYXBwaW5nID0gZmFsc2U7XG4gICAgX3Jlc3VsdCA9IFtdO1xuICB9IGVsc2UgaWYgKGNoID09PSAweDdCLyogeyAqLykge1xuICAgIHRlcm1pbmF0b3IgPSAweDdEOy8qIH0gKi9cbiAgICBpc01hcHBpbmcgPSB0cnVlO1xuICAgIF9yZXN1bHQgPSB7fTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgc3RhdGUuYW5jaG9yTWFwW3N0YXRlLmFuY2hvcl0gPSBfcmVzdWx0O1xuICB9XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIG5vZGVJbmRlbnQpO1xuXG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICAgIGlmIChjaCA9PT0gdGVybWluYXRvcikge1xuICAgICAgc3RhdGUucG9zaXRpb24rKztcbiAgICAgIHN0YXRlLnRhZyA9IF90YWc7XG4gICAgICBzdGF0ZS5hbmNob3IgPSBfYW5jaG9yO1xuICAgICAgc3RhdGUua2luZCA9IGlzTWFwcGluZyA/ICdtYXBwaW5nJyA6ICdzZXF1ZW5jZSc7XG4gICAgICBzdGF0ZS5yZXN1bHQgPSBfcmVzdWx0O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmICghcmVhZE5leHQpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdtaXNzZWQgY29tbWEgYmV0d2VlbiBmbG93IGNvbGxlY3Rpb24gZW50cmllcycpO1xuICAgIH1cblxuICAgIGtleVRhZyA9IGtleU5vZGUgPSB2YWx1ZU5vZGUgPSBudWxsO1xuICAgIGlzUGFpciA9IGlzRXhwbGljaXRQYWlyID0gZmFsc2U7XG5cbiAgICBpZiAoY2ggPT09IDB4M0YvKiA/ICovKSB7XG4gICAgICBmb2xsb3dpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMSk7XG5cbiAgICAgIGlmIChpc19XU19PUl9FT0woZm9sbG93aW5nKSkge1xuICAgICAgICBpc1BhaXIgPSBpc0V4cGxpY2l0UGFpciA9IHRydWU7XG4gICAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIG5vZGVJbmRlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9saW5lID0gc3RhdGUubGluZTtcbiAgICBjb21wb3NlTm9kZShzdGF0ZSwgbm9kZUluZGVudCwgQ09OVEVYVF9GTE9XX0lOLCBmYWxzZSwgdHJ1ZSk7XG4gICAga2V5VGFnID0gc3RhdGUudGFnO1xuICAgIGtleU5vZGUgPSBzdGF0ZS5yZXN1bHQ7XG4gICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgbm9kZUluZGVudCk7XG5cbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKChpc0V4cGxpY2l0UGFpciB8fCBzdGF0ZS5saW5lID09PSBfbGluZSkgJiYgY2ggPT09IDB4M0EvKiA6ICovKSB7XG4gICAgICBpc1BhaXIgPSB0cnVlO1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgbm9kZUluZGVudCk7XG4gICAgICBjb21wb3NlTm9kZShzdGF0ZSwgbm9kZUluZGVudCwgQ09OVEVYVF9GTE9XX0lOLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB2YWx1ZU5vZGUgPSBzdGF0ZS5yZXN1bHQ7XG4gICAgfVxuXG4gICAgaWYgKGlzTWFwcGluZykge1xuICAgICAgc3RvcmVNYXBwaW5nUGFpcihzdGF0ZSwgX3Jlc3VsdCwgb3ZlcnJpZGFibGVLZXlzLCBrZXlUYWcsIGtleU5vZGUsIHZhbHVlTm9kZSk7XG4gICAgfSBlbHNlIGlmIChpc1BhaXIpIHtcbiAgICAgIF9yZXN1bHQucHVzaChzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBudWxsLCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgdmFsdWVOb2RlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9yZXN1bHQucHVzaChrZXlOb2RlKTtcbiAgICB9XG5cbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCBub2RlSW5kZW50KTtcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICBpZiAoY2ggPT09IDB4MkMvKiAsICovKSB7XG4gICAgICByZWFkTmV4dCA9IHRydWU7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlYWROZXh0ID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuZXhwZWN0ZWQgZW5kIG9mIHRoZSBzdHJlYW0gd2l0aGluIGEgZmxvdyBjb2xsZWN0aW9uJyk7XG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9ja1NjYWxhcihzdGF0ZSwgbm9kZUluZGVudCkge1xuICB2YXIgY2FwdHVyZVN0YXJ0LFxuICAgICAgZm9sZGluZyxcbiAgICAgIGNob21waW5nICAgICAgID0gQ0hPTVBJTkdfQ0xJUCxcbiAgICAgIGRpZFJlYWRDb250ZW50ID0gZmFsc2UsXG4gICAgICBkZXRlY3RlZEluZGVudCA9IGZhbHNlLFxuICAgICAgdGV4dEluZGVudCAgICAgPSBub2RlSW5kZW50LFxuICAgICAgZW1wdHlMaW5lcyAgICAgPSAwLFxuICAgICAgYXRNb3JlSW5kZW50ZWQgPSBmYWxzZSxcbiAgICAgIHRtcCxcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoID09PSAweDdDLyogfCAqLykge1xuICAgIGZvbGRpbmcgPSBmYWxzZTtcbiAgfSBlbHNlIGlmIChjaCA9PT0gMHgzRS8qID4gKi8pIHtcbiAgICBmb2xkaW5nID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGF0ZS5raW5kID0gJ3NjYWxhcic7XG4gIHN0YXRlLnJlc3VsdCA9ICcnO1xuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICAgIGlmIChjaCA9PT0gMHgyQi8qICsgKi8gfHwgY2ggPT09IDB4MkQvKiAtICovKSB7XG4gICAgICBpZiAoQ0hPTVBJTkdfQ0xJUCA9PT0gY2hvbXBpbmcpIHtcbiAgICAgICAgY2hvbXBpbmcgPSAoY2ggPT09IDB4MkIvKiArICovKSA/IENIT01QSU5HX0tFRVAgOiBDSE9NUElOR19TVFJJUDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdyZXBlYXQgb2YgYSBjaG9tcGluZyBtb2RlIGlkZW50aWZpZXInKTtcbiAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAoKHRtcCA9IGZyb21EZWNpbWFsQ29kZShjaCkpID49IDApIHtcbiAgICAgIGlmICh0bXAgPT09IDApIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2JhZCBleHBsaWNpdCBpbmRlbnRhdGlvbiB3aWR0aCBvZiBhIGJsb2NrIHNjYWxhcjsgaXQgY2Fubm90IGJlIGxlc3MgdGhhbiBvbmUnKTtcbiAgICAgIH0gZWxzZSBpZiAoIWRldGVjdGVkSW5kZW50KSB7XG4gICAgICAgIHRleHRJbmRlbnQgPSBub2RlSW5kZW50ICsgdG1wIC0gMTtcbiAgICAgICAgZGV0ZWN0ZWRJbmRlbnQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3JlcGVhdCBvZiBhbiBpbmRlbnRhdGlvbiB3aWR0aCBpZGVudGlmaWVyJyk7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKGlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgIGRvIHsgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pOyB9XG4gICAgd2hpbGUgKGlzX1dISVRFX1NQQUNFKGNoKSk7XG5cbiAgICBpZiAoY2ggPT09IDB4MjMvKiAjICovKSB7XG4gICAgICBkbyB7IGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTsgfVxuICAgICAgd2hpbGUgKCFpc19FT0woY2gpICYmIChjaCAhPT0gMCkpO1xuICAgIH1cbiAgfVxuXG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIHJlYWRMaW5lQnJlYWsoc3RhdGUpO1xuICAgIHN0YXRlLmxpbmVJbmRlbnQgPSAwO1xuXG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICAgIHdoaWxlICgoIWRldGVjdGVkSW5kZW50IHx8IHN0YXRlLmxpbmVJbmRlbnQgPCB0ZXh0SW5kZW50KSAmJlxuICAgICAgICAgICAoY2ggPT09IDB4MjAvKiBTcGFjZSAqLykpIHtcbiAgICAgIHN0YXRlLmxpbmVJbmRlbnQrKztcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAoIWRldGVjdGVkSW5kZW50ICYmIHN0YXRlLmxpbmVJbmRlbnQgPiB0ZXh0SW5kZW50KSB7XG4gICAgICB0ZXh0SW5kZW50ID0gc3RhdGUubGluZUluZGVudDtcbiAgICB9XG5cbiAgICBpZiAoaXNfRU9MKGNoKSkge1xuICAgICAgZW1wdHlMaW5lcysrO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gRW5kIG9mIHRoZSBzY2FsYXIuXG4gICAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPCB0ZXh0SW5kZW50KSB7XG5cbiAgICAgIC8vIFBlcmZvcm0gdGhlIGNob21waW5nLlxuICAgICAgaWYgKGNob21waW5nID09PSBDSE9NUElOR19LRUVQKSB7XG4gICAgICAgIHN0YXRlLnJlc3VsdCArPSBjb21tb24ucmVwZWF0KCdcXG4nLCBkaWRSZWFkQ29udGVudCA/IDEgKyBlbXB0eUxpbmVzIDogZW1wdHlMaW5lcyk7XG4gICAgICB9IGVsc2UgaWYgKGNob21waW5nID09PSBDSE9NUElOR19DTElQKSB7XG4gICAgICAgIGlmIChkaWRSZWFkQ29udGVudCkgeyAvLyBpLmUuIG9ubHkgaWYgdGhlIHNjYWxhciBpcyBub3QgZW1wdHkuXG4gICAgICAgICAgc3RhdGUucmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEJyZWFrIHRoaXMgYHdoaWxlYCBjeWNsZSBhbmQgZ28gdG8gdGhlIGZ1bmNpdG9uJ3MgZXBpbG9ndWUuXG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBGb2xkZWQgc3R5bGU6IHVzZSBmYW5jeSBydWxlcyB0byBoYW5kbGUgbGluZSBicmVha3MuXG4gICAgaWYgKGZvbGRpbmcpIHtcblxuICAgICAgLy8gTGluZXMgc3RhcnRpbmcgd2l0aCB3aGl0ZSBzcGFjZSBjaGFyYWN0ZXJzIChtb3JlLWluZGVudGVkIGxpbmVzKSBhcmUgbm90IGZvbGRlZC5cbiAgICAgIGlmIChpc19XSElURV9TUEFDRShjaCkpIHtcbiAgICAgICAgYXRNb3JlSW5kZW50ZWQgPSB0cnVlO1xuICAgICAgICAvLyBleGNlcHQgZm9yIHRoZSBmaXJzdCBjb250ZW50IGxpbmUgKGNmLiBFeGFtcGxlIDguMSlcbiAgICAgICAgc3RhdGUucmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJ1xcbicsIGRpZFJlYWRDb250ZW50ID8gMSArIGVtcHR5TGluZXMgOiBlbXB0eUxpbmVzKTtcblxuICAgICAgLy8gRW5kIG9mIG1vcmUtaW5kZW50ZWQgYmxvY2suXG4gICAgICB9IGVsc2UgaWYgKGF0TW9yZUluZGVudGVkKSB7XG4gICAgICAgIGF0TW9yZUluZGVudGVkID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLnJlc3VsdCArPSBjb21tb24ucmVwZWF0KCdcXG4nLCBlbXB0eUxpbmVzICsgMSk7XG5cbiAgICAgIC8vIEp1c3Qgb25lIGxpbmUgYnJlYWsgLSBwZXJjZWl2ZSBhcyB0aGUgc2FtZSBsaW5lLlxuICAgICAgfSBlbHNlIGlmIChlbXB0eUxpbmVzID09PSAwKSB7XG4gICAgICAgIGlmIChkaWRSZWFkQ29udGVudCkgeyAvLyBpLmUuIG9ubHkgaWYgd2UgaGF2ZSBhbHJlYWR5IHJlYWQgc29tZSBzY2FsYXIgY29udGVudC5cbiAgICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gJyAnO1xuICAgICAgICB9XG5cbiAgICAgIC8vIFNldmVyYWwgbGluZSBicmVha3MgLSBwZXJjZWl2ZSBhcyBkaWZmZXJlbnQgbGluZXMuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5yZXN1bHQgKz0gY29tbW9uLnJlcGVhdCgnXFxuJywgZW1wdHlMaW5lcyk7XG4gICAgICB9XG5cbiAgICAvLyBMaXRlcmFsIHN0eWxlOiBqdXN0IGFkZCBleGFjdCBudW1iZXIgb2YgbGluZSBicmVha3MgYmV0d2VlbiBjb250ZW50IGxpbmVzLlxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBLZWVwIGFsbCBsaW5lIGJyZWFrcyBleGNlcHQgdGhlIGhlYWRlciBsaW5lIGJyZWFrLlxuICAgICAgc3RhdGUucmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoJ1xcbicsIGRpZFJlYWRDb250ZW50ID8gMSArIGVtcHR5TGluZXMgOiBlbXB0eUxpbmVzKTtcbiAgICB9XG5cbiAgICBkaWRSZWFkQ29udGVudCA9IHRydWU7XG4gICAgZGV0ZWN0ZWRJbmRlbnQgPSB0cnVlO1xuICAgIGVtcHR5TGluZXMgPSAwO1xuICAgIGNhcHR1cmVTdGFydCA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgd2hpbGUgKCFpc19FT0woY2gpICYmIChjaCAhPT0gMCkpIHtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBzdGF0ZS5wb3NpdGlvbiwgZmFsc2UpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9ja1NlcXVlbmNlKHN0YXRlLCBub2RlSW5kZW50KSB7XG4gIHZhciBfbGluZSxcbiAgICAgIF90YWcgICAgICA9IHN0YXRlLnRhZyxcbiAgICAgIF9hbmNob3IgICA9IHN0YXRlLmFuY2hvcixcbiAgICAgIF9yZXN1bHQgICA9IFtdLFxuICAgICAgZm9sbG93aW5nLFxuICAgICAgZGV0ZWN0ZWQgID0gZmFsc2UsXG4gICAgICBjaDtcblxuICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgc3RhdGUuYW5jaG9yTWFwW3N0YXRlLmFuY2hvcl0gPSBfcmVzdWx0O1xuICB9XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICB3aGlsZSAoY2ggIT09IDApIHtcblxuICAgIGlmIChjaCAhPT0gMHgyRC8qIC0gKi8pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGZvbGxvd2luZyA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKTtcblxuICAgIGlmICghaXNfV1NfT1JfRU9MKGZvbGxvd2luZykpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGRldGVjdGVkID0gdHJ1ZTtcbiAgICBzdGF0ZS5wb3NpdGlvbisrO1xuXG4gICAgaWYgKHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKSkge1xuICAgICAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPD0gbm9kZUluZGVudCkge1xuICAgICAgICBfcmVzdWx0LnB1c2gobnVsbCk7XG4gICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9saW5lID0gc3RhdGUubGluZTtcbiAgICBjb21wb3NlTm9kZShzdGF0ZSwgbm9kZUluZGVudCwgQ09OVEVYVF9CTE9DS19JTiwgZmFsc2UsIHRydWUpO1xuICAgIF9yZXN1bHQucHVzaChzdGF0ZS5yZXN1bHQpO1xuICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICBpZiAoKHN0YXRlLmxpbmUgPT09IF9saW5lIHx8IHN0YXRlLmxpbmVJbmRlbnQgPiBub2RlSW5kZW50KSAmJiAoY2ggIT09IDApKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnYmFkIGluZGVudGF0aW9uIG9mIGEgc2VxdWVuY2UgZW50cnknKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPCBub2RlSW5kZW50KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoZGV0ZWN0ZWQpIHtcbiAgICBzdGF0ZS50YWcgPSBfdGFnO1xuICAgIHN0YXRlLmFuY2hvciA9IF9hbmNob3I7XG4gICAgc3RhdGUua2luZCA9ICdzZXF1ZW5jZSc7XG4gICAgc3RhdGUucmVzdWx0ID0gX3Jlc3VsdDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9ja01hcHBpbmcoc3RhdGUsIG5vZGVJbmRlbnQsIGZsb3dJbmRlbnQpIHtcbiAgdmFyIGZvbGxvd2luZyxcbiAgICAgIGFsbG93Q29tcGFjdCxcbiAgICAgIF9saW5lLFxuICAgICAgX3BvcyxcbiAgICAgIF90YWcgICAgICAgICAgPSBzdGF0ZS50YWcsXG4gICAgICBfYW5jaG9yICAgICAgID0gc3RhdGUuYW5jaG9yLFxuICAgICAgX3Jlc3VsdCAgICAgICA9IHt9LFxuICAgICAgb3ZlcnJpZGFibGVLZXlzID0ge30sXG4gICAgICBrZXlUYWcgICAgICAgID0gbnVsbCxcbiAgICAgIGtleU5vZGUgICAgICAgPSBudWxsLFxuICAgICAgdmFsdWVOb2RlICAgICA9IG51bGwsXG4gICAgICBhdEV4cGxpY2l0S2V5ID0gZmFsc2UsXG4gICAgICBkZXRlY3RlZCAgICAgID0gZmFsc2UsXG4gICAgICBjaDtcblxuICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgc3RhdGUuYW5jaG9yTWFwW3N0YXRlLmFuY2hvcl0gPSBfcmVzdWx0O1xuICB9XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICBmb2xsb3dpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMSk7XG4gICAgX2xpbmUgPSBzdGF0ZS5saW5lOyAvLyBTYXZlIHRoZSBjdXJyZW50IGxpbmUuXG4gICAgX3BvcyA9IHN0YXRlLnBvc2l0aW9uO1xuXG4gICAgLy9cbiAgICAvLyBFeHBsaWNpdCBub3RhdGlvbiBjYXNlLiBUaGVyZSBhcmUgdHdvIHNlcGFyYXRlIGJsb2NrczpcbiAgICAvLyBmaXJzdCBmb3IgdGhlIGtleSAoZGVub3RlZCBieSBcIj9cIikgYW5kIHNlY29uZCBmb3IgdGhlIHZhbHVlIChkZW5vdGVkIGJ5IFwiOlwiKVxuICAgIC8vXG4gICAgaWYgKChjaCA9PT0gMHgzRi8qID8gKi8gfHwgY2ggPT09IDB4M0EvKiA6ICovKSAmJiBpc19XU19PUl9FT0woZm9sbG93aW5nKSkge1xuXG4gICAgICBpZiAoY2ggPT09IDB4M0YvKiA/ICovKSB7XG4gICAgICAgIGlmIChhdEV4cGxpY2l0S2V5KSB7XG4gICAgICAgICAgc3RvcmVNYXBwaW5nUGFpcihzdGF0ZSwgX3Jlc3VsdCwgb3ZlcnJpZGFibGVLZXlzLCBrZXlUYWcsIGtleU5vZGUsIG51bGwpO1xuICAgICAgICAgIGtleVRhZyA9IGtleU5vZGUgPSB2YWx1ZU5vZGUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgZGV0ZWN0ZWQgPSB0cnVlO1xuICAgICAgICBhdEV4cGxpY2l0S2V5ID0gdHJ1ZTtcbiAgICAgICAgYWxsb3dDb21wYWN0ID0gdHJ1ZTtcblxuICAgICAgfSBlbHNlIGlmIChhdEV4cGxpY2l0S2V5KSB7XG4gICAgICAgIC8vIGkuZS4gMHgzQS8qIDogKi8gPT09IGNoYXJhY3RlciBhZnRlciB0aGUgZXhwbGljaXQga2V5LlxuICAgICAgICBhdEV4cGxpY2l0S2V5ID0gZmFsc2U7XG4gICAgICAgIGFsbG93Q29tcGFjdCA9IHRydWU7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdpbmNvbXBsZXRlIGV4cGxpY2l0IG1hcHBpbmcgcGFpcjsgYSBrZXkgbm9kZSBpcyBtaXNzZWQ7IG9yIGZvbGxvd2VkIGJ5IGEgbm9uLXRhYnVsYXRlZCBlbXB0eSBsaW5lJyk7XG4gICAgICB9XG5cbiAgICAgIHN0YXRlLnBvc2l0aW9uICs9IDE7XG4gICAgICBjaCA9IGZvbGxvd2luZztcblxuICAgIC8vXG4gICAgLy8gSW1wbGljaXQgbm90YXRpb24gY2FzZS4gRmxvdy1zdHlsZSBub2RlIGFzIHRoZSBrZXkgZmlyc3QsIHRoZW4gXCI6XCIsIGFuZCB0aGUgdmFsdWUuXG4gICAgLy9cbiAgICB9IGVsc2UgaWYgKGNvbXBvc2VOb2RlKHN0YXRlLCBmbG93SW5kZW50LCBDT05URVhUX0ZMT1dfT1VULCBmYWxzZSwgdHJ1ZSkpIHtcblxuICAgICAgaWYgKHN0YXRlLmxpbmUgPT09IF9saW5lKSB7XG4gICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICAgICAgd2hpbGUgKGlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaCA9PT0gMHgzQS8qIDogKi8pIHtcbiAgICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICAgICAgICBpZiAoIWlzX1dTX09SX0VPTChjaCkpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdhIHdoaXRlc3BhY2UgY2hhcmFjdGVyIGlzIGV4cGVjdGVkIGFmdGVyIHRoZSBrZXktdmFsdWUgc2VwYXJhdG9yIHdpdGhpbiBhIGJsb2NrIG1hcHBpbmcnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYXRFeHBsaWNpdEtleSkge1xuICAgICAgICAgICAgc3RvcmVNYXBwaW5nUGFpcihzdGF0ZSwgX3Jlc3VsdCwgb3ZlcnJpZGFibGVLZXlzLCBrZXlUYWcsIGtleU5vZGUsIG51bGwpO1xuICAgICAgICAgICAga2V5VGFnID0ga2V5Tm9kZSA9IHZhbHVlTm9kZSA9IG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGV0ZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgIGF0RXhwbGljaXRLZXkgPSBmYWxzZTtcbiAgICAgICAgICBhbGxvd0NvbXBhY3QgPSBmYWxzZTtcbiAgICAgICAgICBrZXlUYWcgPSBzdGF0ZS50YWc7XG4gICAgICAgICAga2V5Tm9kZSA9IHN0YXRlLnJlc3VsdDtcblxuICAgICAgICB9IGVsc2UgaWYgKGRldGVjdGVkKSB7XG4gICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2NhbiBub3QgcmVhZCBhbiBpbXBsaWNpdCBtYXBwaW5nIHBhaXI7IGEgY29sb24gaXMgbWlzc2VkJyk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZS50YWcgPSBfdGFnO1xuICAgICAgICAgIHN0YXRlLmFuY2hvciA9IF9hbmNob3I7XG4gICAgICAgICAgcmV0dXJuIHRydWU7IC8vIEtlZXAgdGhlIHJlc3VsdCBvZiBgY29tcG9zZU5vZGVgLlxuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSBpZiAoZGV0ZWN0ZWQpIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2NhbiBub3QgcmVhZCBhIGJsb2NrIG1hcHBpbmcgZW50cnk7IGEgbXVsdGlsaW5lIGtleSBtYXkgbm90IGJlIGFuIGltcGxpY2l0IGtleScpO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS50YWcgPSBfdGFnO1xuICAgICAgICBzdGF0ZS5hbmNob3IgPSBfYW5jaG9yO1xuICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gS2VlcCB0aGUgcmVzdWx0IG9mIGBjb21wb3NlTm9kZWAuXG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7IC8vIFJlYWRpbmcgaXMgZG9uZS4gR28gdG8gdGhlIGVwaWxvZ3VlLlxuICAgIH1cblxuICAgIC8vXG4gICAgLy8gQ29tbW9uIHJlYWRpbmcgY29kZSBmb3IgYm90aCBleHBsaWNpdCBhbmQgaW1wbGljaXQgbm90YXRpb25zLlxuICAgIC8vXG4gICAgaWYgKHN0YXRlLmxpbmUgPT09IF9saW5lIHx8IHN0YXRlLmxpbmVJbmRlbnQgPiBub2RlSW5kZW50KSB7XG4gICAgICBpZiAoY29tcG9zZU5vZGUoc3RhdGUsIG5vZGVJbmRlbnQsIENPTlRFWFRfQkxPQ0tfT1VULCB0cnVlLCBhbGxvd0NvbXBhY3QpKSB7XG4gICAgICAgIGlmIChhdEV4cGxpY2l0S2V5KSB7XG4gICAgICAgICAga2V5Tm9kZSA9IHN0YXRlLnJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZU5vZGUgPSBzdGF0ZS5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFhdEV4cGxpY2l0S2V5KSB7XG4gICAgICAgIHN0b3JlTWFwcGluZ1BhaXIoc3RhdGUsIF9yZXN1bHQsIG92ZXJyaWRhYmxlS2V5cywga2V5VGFnLCBrZXlOb2RlLCB2YWx1ZU5vZGUsIF9saW5lLCBfcG9zKTtcbiAgICAgICAga2V5VGFnID0ga2V5Tm9kZSA9IHZhbHVlTm9kZSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPiBub2RlSW5kZW50ICYmIChjaCAhPT0gMCkpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdiYWQgaW5kZW50YXRpb24gb2YgYSBtYXBwaW5nIGVudHJ5Jyk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50IDwgbm9kZUluZGVudCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLy9cbiAgLy8gRXBpbG9ndWUuXG4gIC8vXG5cbiAgLy8gU3BlY2lhbCBjYXNlOiBsYXN0IG1hcHBpbmcncyBub2RlIGNvbnRhaW5zIG9ubHkgdGhlIGtleSBpbiBleHBsaWNpdCBub3RhdGlvbi5cbiAgaWYgKGF0RXhwbGljaXRLZXkpIHtcbiAgICBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgbnVsbCk7XG4gIH1cblxuICAvLyBFeHBvc2UgdGhlIHJlc3VsdGluZyBtYXBwaW5nLlxuICBpZiAoZGV0ZWN0ZWQpIHtcbiAgICBzdGF0ZS50YWcgPSBfdGFnO1xuICAgIHN0YXRlLmFuY2hvciA9IF9hbmNob3I7XG4gICAgc3RhdGUua2luZCA9ICdtYXBwaW5nJztcbiAgICBzdGF0ZS5yZXN1bHQgPSBfcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGRldGVjdGVkO1xufVxuXG5mdW5jdGlvbiByZWFkVGFnUHJvcGVydHkoc3RhdGUpIHtcbiAgdmFyIF9wb3NpdGlvbixcbiAgICAgIGlzVmVyYmF0aW0gPSBmYWxzZSxcbiAgICAgIGlzTmFtZWQgICAgPSBmYWxzZSxcbiAgICAgIHRhZ0hhbmRsZSxcbiAgICAgIHRhZ05hbWUsXG4gICAgICBjaDtcblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuXG4gIGlmIChjaCAhPT0gMHgyMS8qICEgKi8pIHJldHVybiBmYWxzZTtcblxuICBpZiAoc3RhdGUudGFnICE9PSBudWxsKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2R1cGxpY2F0aW9uIG9mIGEgdGFnIHByb3BlcnR5Jyk7XG4gIH1cblxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoID09PSAweDNDLyogPCAqLykge1xuICAgIGlzVmVyYmF0aW0gPSB0cnVlO1xuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcblxuICB9IGVsc2UgaWYgKGNoID09PSAweDIxLyogISAqLykge1xuICAgIGlzTmFtZWQgPSB0cnVlO1xuICAgIHRhZ0hhbmRsZSA9ICchISc7XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuXG4gIH0gZWxzZSB7XG4gICAgdGFnSGFuZGxlID0gJyEnO1xuICB9XG5cbiAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb247XG5cbiAgaWYgKGlzVmVyYmF0aW0pIHtcbiAgICBkbyB7IGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTsgfVxuICAgIHdoaWxlIChjaCAhPT0gMCAmJiBjaCAhPT0gMHgzRS8qID4gKi8pO1xuXG4gICAgaWYgKHN0YXRlLnBvc2l0aW9uIDwgc3RhdGUubGVuZ3RoKSB7XG4gICAgICB0YWdOYW1lID0gc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uLCBzdGF0ZS5wb3NpdGlvbik7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmV4cGVjdGVkIGVuZCBvZiB0aGUgc3RyZWFtIHdpdGhpbiBhIHZlcmJhdGltIHRhZycpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoY2ggIT09IDAgJiYgIWlzX1dTX09SX0VPTChjaCkpIHtcblxuICAgICAgaWYgKGNoID09PSAweDIxLyogISAqLykge1xuICAgICAgICBpZiAoIWlzTmFtZWQpIHtcbiAgICAgICAgICB0YWdIYW5kbGUgPSBzdGF0ZS5pbnB1dC5zbGljZShfcG9zaXRpb24gLSAxLCBzdGF0ZS5wb3NpdGlvbiArIDEpO1xuXG4gICAgICAgICAgaWYgKCFQQVRURVJOX1RBR19IQU5ETEUudGVzdCh0YWdIYW5kbGUpKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCAnbmFtZWQgdGFnIGhhbmRsZSBjYW5ub3QgY29udGFpbiBzdWNoIGNoYXJhY3RlcnMnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpc05hbWVkID0gdHJ1ZTtcbiAgICAgICAgICBfcG9zaXRpb24gPSBzdGF0ZS5wb3NpdGlvbiArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3RhZyBzdWZmaXggY2Fubm90IGNvbnRhaW4gZXhjbGFtYXRpb24gbWFya3MnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgdGFnTmFtZSA9IHN0YXRlLmlucHV0LnNsaWNlKF9wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24pO1xuXG4gICAgaWYgKFBBVFRFUk5fRkxPV19JTkRJQ0FUT1JTLnRlc3QodGFnTmFtZSkpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd0YWcgc3VmZml4IGNhbm5vdCBjb250YWluIGZsb3cgaW5kaWNhdG9yIGNoYXJhY3RlcnMnKTtcbiAgICB9XG4gIH1cblxuICBpZiAodGFnTmFtZSAmJiAhUEFUVEVSTl9UQUdfVVJJLnRlc3QodGFnTmFtZSkpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGFnIG5hbWUgY2Fubm90IGNvbnRhaW4gc3VjaCBjaGFyYWN0ZXJzOiAnICsgdGFnTmFtZSk7XG4gIH1cblxuICBpZiAoaXNWZXJiYXRpbSkge1xuICAgIHN0YXRlLnRhZyA9IHRhZ05hbWU7XG5cbiAgfSBlbHNlIGlmIChfaGFzT3duUHJvcGVydHkuY2FsbChzdGF0ZS50YWdNYXAsIHRhZ0hhbmRsZSkpIHtcbiAgICBzdGF0ZS50YWcgPSBzdGF0ZS50YWdNYXBbdGFnSGFuZGxlXSArIHRhZ05hbWU7XG5cbiAgfSBlbHNlIGlmICh0YWdIYW5kbGUgPT09ICchJykge1xuICAgIHN0YXRlLnRhZyA9ICchJyArIHRhZ05hbWU7XG5cbiAgfSBlbHNlIGlmICh0YWdIYW5kbGUgPT09ICchIScpIHtcbiAgICBzdGF0ZS50YWcgPSAndGFnOnlhbWwub3JnLDIwMDI6JyArIHRhZ05hbWU7XG5cbiAgfSBlbHNlIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5kZWNsYXJlZCB0YWcgaGFuZGxlIFwiJyArIHRhZ0hhbmRsZSArICdcIicpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJlYWRBbmNob3JQcm9wZXJ0eShzdGF0ZSkge1xuICB2YXIgX3Bvc2l0aW9uLFxuICAgICAgY2g7XG5cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcblxuICBpZiAoY2ggIT09IDB4MjYvKiAmICovKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICdkdXBsaWNhdGlvbiBvZiBhbiBhbmNob3IgcHJvcGVydHknKTtcbiAgfVxuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb247XG5cbiAgd2hpbGUgKGNoICE9PSAwICYmICFpc19XU19PUl9FT0woY2gpICYmICFpc19GTE9XX0lORElDQVRPUihjaCkpIHtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gIH1cblxuICBpZiAoc3RhdGUucG9zaXRpb24gPT09IF9wb3NpdGlvbikge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICduYW1lIG9mIGFuIGFuY2hvciBub2RlIG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgY2hhcmFjdGVyJyk7XG4gIH1cblxuICBzdGF0ZS5hbmNob3IgPSBzdGF0ZS5pbnB1dC5zbGljZShfcG9zaXRpb24sIHN0YXRlLnBvc2l0aW9uKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJlYWRBbGlhcyhzdGF0ZSkge1xuICB2YXIgX3Bvc2l0aW9uLCBhbGlhcyxcbiAgICAgIGNoO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKGNoICE9PSAweDJBLyogKiAqLykgcmV0dXJuIGZhbHNlO1xuXG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb247XG5cbiAgd2hpbGUgKGNoICE9PSAwICYmICFpc19XU19PUl9FT0woY2gpICYmICFpc19GTE9XX0lORElDQVRPUihjaCkpIHtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gIH1cblxuICBpZiAoc3RhdGUucG9zaXRpb24gPT09IF9wb3NpdGlvbikge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICduYW1lIG9mIGFuIGFsaWFzIG5vZGUgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBjaGFyYWN0ZXInKTtcbiAgfVxuXG4gIGFsaWFzID0gc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uLCBzdGF0ZS5wb3NpdGlvbik7XG5cbiAgaWYgKCFzdGF0ZS5hbmNob3JNYXAuaGFzT3duUHJvcGVydHkoYWxpYXMpKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuaWRlbnRpZmllZCBhbGlhcyBcIicgKyBhbGlhcyArICdcIicpO1xuICB9XG5cbiAgc3RhdGUucmVzdWx0ID0gc3RhdGUuYW5jaG9yTWFwW2FsaWFzXTtcbiAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29tcG9zZU5vZGUoc3RhdGUsIHBhcmVudEluZGVudCwgbm9kZUNvbnRleHQsIGFsbG93VG9TZWVrLCBhbGxvd0NvbXBhY3QpIHtcbiAgdmFyIGFsbG93QmxvY2tTdHlsZXMsXG4gICAgICBhbGxvd0Jsb2NrU2NhbGFycyxcbiAgICAgIGFsbG93QmxvY2tDb2xsZWN0aW9ucyxcbiAgICAgIGluZGVudFN0YXR1cyA9IDEsIC8vIDE6IHRoaXM+cGFyZW50LCAwOiB0aGlzPXBhcmVudCwgLTE6IHRoaXM8cGFyZW50XG4gICAgICBhdE5ld0xpbmUgID0gZmFsc2UsXG4gICAgICBoYXNDb250ZW50ID0gZmFsc2UsXG4gICAgICB0eXBlSW5kZXgsXG4gICAgICB0eXBlUXVhbnRpdHksXG4gICAgICB0eXBlLFxuICAgICAgZmxvd0luZGVudCxcbiAgICAgIGJsb2NrSW5kZW50O1xuXG4gIGlmIChzdGF0ZS5saXN0ZW5lciAhPT0gbnVsbCkge1xuICAgIHN0YXRlLmxpc3RlbmVyKCdvcGVuJywgc3RhdGUpO1xuICB9XG5cbiAgc3RhdGUudGFnICAgID0gbnVsbDtcbiAgc3RhdGUuYW5jaG9yID0gbnVsbDtcbiAgc3RhdGUua2luZCAgID0gbnVsbDtcbiAgc3RhdGUucmVzdWx0ID0gbnVsbDtcblxuICBhbGxvd0Jsb2NrU3R5bGVzID0gYWxsb3dCbG9ja1NjYWxhcnMgPSBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgPVxuICAgIENPTlRFWFRfQkxPQ0tfT1VUID09PSBub2RlQ29udGV4dCB8fFxuICAgIENPTlRFWFRfQkxPQ0tfSU4gID09PSBub2RlQ29udGV4dDtcblxuICBpZiAoYWxsb3dUb1NlZWspIHtcbiAgICBpZiAoc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpKSB7XG4gICAgICBhdE5ld0xpbmUgPSB0cnVlO1xuXG4gICAgICBpZiAoc3RhdGUubGluZUluZGVudCA+IHBhcmVudEluZGVudCkge1xuICAgICAgICBpbmRlbnRTdGF0dXMgPSAxO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50ID09PSBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgaW5kZW50U3RhdHVzID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGluZUluZGVudCA8IHBhcmVudEluZGVudCkge1xuICAgICAgICBpbmRlbnRTdGF0dXMgPSAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoaW5kZW50U3RhdHVzID09PSAxKSB7XG4gICAgd2hpbGUgKHJlYWRUYWdQcm9wZXJ0eShzdGF0ZSkgfHwgcmVhZEFuY2hvclByb3BlcnR5KHN0YXRlKSkge1xuICAgICAgaWYgKHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKSkge1xuICAgICAgICBhdE5ld0xpbmUgPSB0cnVlO1xuICAgICAgICBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgPSBhbGxvd0Jsb2NrU3R5bGVzO1xuXG4gICAgICAgIGlmIChzdGF0ZS5saW5lSW5kZW50ID4gcGFyZW50SW5kZW50KSB7XG4gICAgICAgICAgaW5kZW50U3RhdHVzID0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50ID09PSBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgICBpbmRlbnRTdGF0dXMgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPCBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgICBpbmRlbnRTdGF0dXMgPSAtMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxsb3dCbG9ja0NvbGxlY3Rpb25zID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGFsbG93QmxvY2tDb2xsZWN0aW9ucykge1xuICAgIGFsbG93QmxvY2tDb2xsZWN0aW9ucyA9IGF0TmV3TGluZSB8fCBhbGxvd0NvbXBhY3Q7XG4gIH1cblxuICBpZiAoaW5kZW50U3RhdHVzID09PSAxIHx8IENPTlRFWFRfQkxPQ0tfT1VUID09PSBub2RlQ29udGV4dCkge1xuICAgIGlmIChDT05URVhUX0ZMT1dfSU4gPT09IG5vZGVDb250ZXh0IHx8IENPTlRFWFRfRkxPV19PVVQgPT09IG5vZGVDb250ZXh0KSB7XG4gICAgICBmbG93SW5kZW50ID0gcGFyZW50SW5kZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBmbG93SW5kZW50ID0gcGFyZW50SW5kZW50ICsgMTtcbiAgICB9XG5cbiAgICBibG9ja0luZGVudCA9IHN0YXRlLnBvc2l0aW9uIC0gc3RhdGUubGluZVN0YXJ0O1xuXG4gICAgaWYgKGluZGVudFN0YXR1cyA9PT0gMSkge1xuICAgICAgaWYgKGFsbG93QmxvY2tDb2xsZWN0aW9ucyAmJlxuICAgICAgICAgIChyZWFkQmxvY2tTZXF1ZW5jZShzdGF0ZSwgYmxvY2tJbmRlbnQpIHx8XG4gICAgICAgICAgIHJlYWRCbG9ja01hcHBpbmcoc3RhdGUsIGJsb2NrSW5kZW50LCBmbG93SW5kZW50KSkgfHxcbiAgICAgICAgICByZWFkRmxvd0NvbGxlY3Rpb24oc3RhdGUsIGZsb3dJbmRlbnQpKSB7XG4gICAgICAgIGhhc0NvbnRlbnQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKChhbGxvd0Jsb2NrU2NhbGFycyAmJiByZWFkQmxvY2tTY2FsYXIoc3RhdGUsIGZsb3dJbmRlbnQpKSB8fFxuICAgICAgICAgICAgcmVhZFNpbmdsZVF1b3RlZFNjYWxhcihzdGF0ZSwgZmxvd0luZGVudCkgfHxcbiAgICAgICAgICAgIHJlYWREb3VibGVRdW90ZWRTY2FsYXIoc3RhdGUsIGZsb3dJbmRlbnQpKSB7XG4gICAgICAgICAgaGFzQ29udGVudCA9IHRydWU7XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWFkQWxpYXMoc3RhdGUpKSB7XG4gICAgICAgICAgaGFzQ29udGVudCA9IHRydWU7XG5cbiAgICAgICAgICBpZiAoc3RhdGUudGFnICE9PSBudWxsIHx8IHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2FsaWFzIG5vZGUgc2hvdWxkIG5vdCBoYXZlIGFueSBwcm9wZXJ0aWVzJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAocmVhZFBsYWluU2NhbGFyKHN0YXRlLCBmbG93SW5kZW50LCBDT05URVhUX0ZMT1dfSU4gPT09IG5vZGVDb250ZXh0KSkge1xuICAgICAgICAgIGhhc0NvbnRlbnQgPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKHN0YXRlLnRhZyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgc3RhdGUudGFnID0gJz8nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICAgICAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IHN0YXRlLnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaW5kZW50U3RhdHVzID09PSAwKSB7XG4gICAgICAvLyBTcGVjaWFsIGNhc2U6IGJsb2NrIHNlcXVlbmNlcyBhcmUgYWxsb3dlZCB0byBoYXZlIHNhbWUgaW5kZW50YXRpb24gbGV2ZWwgYXMgdGhlIHBhcmVudC5cbiAgICAgIC8vIGh0dHA6Ly93d3cueWFtbC5vcmcvc3BlYy8xLjIvc3BlYy5odG1sI2lkMjc5OTc4NFxuICAgICAgaGFzQ29udGVudCA9IGFsbG93QmxvY2tDb2xsZWN0aW9ucyAmJiByZWFkQmxvY2tTZXF1ZW5jZShzdGF0ZSwgYmxvY2tJbmRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS50YWcgIT09IG51bGwgJiYgc3RhdGUudGFnICE9PSAnIScpIHtcbiAgICBpZiAoc3RhdGUudGFnID09PSAnPycpIHtcbiAgICAgIGZvciAodHlwZUluZGV4ID0gMCwgdHlwZVF1YW50aXR5ID0gc3RhdGUuaW1wbGljaXRUeXBlcy5sZW5ndGg7IHR5cGVJbmRleCA8IHR5cGVRdWFudGl0eTsgdHlwZUluZGV4ICs9IDEpIHtcbiAgICAgICAgdHlwZSA9IHN0YXRlLmltcGxpY2l0VHlwZXNbdHlwZUluZGV4XTtcblxuICAgICAgICAvLyBJbXBsaWNpdCByZXNvbHZpbmcgaXMgbm90IGFsbG93ZWQgZm9yIG5vbi1zY2FsYXIgdHlwZXMsIGFuZCAnPydcbiAgICAgICAgLy8gbm9uLXNwZWNpZmljIHRhZyBpcyBvbmx5IGFzc2lnbmVkIHRvIHBsYWluIHNjYWxhcnMuIFNvLCBpdCBpc24ndFxuICAgICAgICAvLyBuZWVkZWQgdG8gY2hlY2sgZm9yICdraW5kJyBjb25mb3JtaXR5LlxuXG4gICAgICAgIGlmICh0eXBlLnJlc29sdmUoc3RhdGUucmVzdWx0KSkgeyAvLyBgc3RhdGUucmVzdWx0YCB1cGRhdGVkIGluIHJlc29sdmVyIGlmIG1hdGNoZWRcbiAgICAgICAgICBzdGF0ZS5yZXN1bHQgPSB0eXBlLmNvbnN0cnVjdChzdGF0ZS5yZXN1bHQpO1xuICAgICAgICAgIHN0YXRlLnRhZyA9IHR5cGUudGFnO1xuICAgICAgICAgIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHN0YXRlLmFuY2hvck1hcFtzdGF0ZS5hbmNob3JdID0gc3RhdGUucmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX2hhc093blByb3BlcnR5LmNhbGwoc3RhdGUudHlwZU1hcFtzdGF0ZS5raW5kIHx8ICdmYWxsYmFjayddLCBzdGF0ZS50YWcpKSB7XG4gICAgICB0eXBlID0gc3RhdGUudHlwZU1hcFtzdGF0ZS5raW5kIHx8ICdmYWxsYmFjayddW3N0YXRlLnRhZ107XG5cbiAgICAgIGlmIChzdGF0ZS5yZXN1bHQgIT09IG51bGwgJiYgdHlwZS5raW5kICE9PSBzdGF0ZS5raW5kKSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmFjY2VwdGFibGUgbm9kZSBraW5kIGZvciAhPCcgKyBzdGF0ZS50YWcgKyAnPiB0YWc7IGl0IHNob3VsZCBiZSBcIicgKyB0eXBlLmtpbmQgKyAnXCIsIG5vdCBcIicgKyBzdGF0ZS5raW5kICsgJ1wiJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdHlwZS5yZXNvbHZlKHN0YXRlLnJlc3VsdCkpIHsgLy8gYHN0YXRlLnJlc3VsdGAgdXBkYXRlZCBpbiByZXNvbHZlciBpZiBtYXRjaGVkXG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsICdjYW5ub3QgcmVzb2x2ZSBhIG5vZGUgd2l0aCAhPCcgKyBzdGF0ZS50YWcgKyAnPiBleHBsaWNpdCB0YWcnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLnJlc3VsdCA9IHR5cGUuY29uc3RydWN0KHN0YXRlLnJlc3VsdCk7XG4gICAgICAgIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICAgICAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IHN0YXRlLnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5rbm93biB0YWcgITwnICsgc3RhdGUudGFnICsgJz4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUubGlzdGVuZXIgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5saXN0ZW5lcignY2xvc2UnLCBzdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLnRhZyAhPT0gbnVsbCB8fCAgc3RhdGUuYW5jaG9yICE9PSBudWxsIHx8IGhhc0NvbnRlbnQ7XG59XG5cbmZ1bmN0aW9uIHJlYWREb2N1bWVudChzdGF0ZSkge1xuICB2YXIgZG9jdW1lbnRTdGFydCA9IHN0YXRlLnBvc2l0aW9uLFxuICAgICAgX3Bvc2l0aW9uLFxuICAgICAgZGlyZWN0aXZlTmFtZSxcbiAgICAgIGRpcmVjdGl2ZUFyZ3MsXG4gICAgICBoYXNEaXJlY3RpdmVzID0gZmFsc2UsXG4gICAgICBjaDtcblxuICBzdGF0ZS52ZXJzaW9uID0gbnVsbDtcbiAgc3RhdGUuY2hlY2tMaW5lQnJlYWtzID0gc3RhdGUubGVnYWN5O1xuICBzdGF0ZS50YWdNYXAgPSB7fTtcbiAgc3RhdGUuYW5jaG9yTWFwID0ge307XG5cbiAgd2hpbGUgKChjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pKSAhPT0gMCkge1xuICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcblxuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG5cbiAgICBpZiAoc3RhdGUubGluZUluZGVudCA+IDAgfHwgY2ggIT09IDB4MjUvKiAlICovKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBoYXNEaXJlY3RpdmVzID0gdHJ1ZTtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb247XG5cbiAgICB3aGlsZSAoY2ggIT09IDAgJiYgIWlzX1dTX09SX0VPTChjaCkpIHtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBkaXJlY3RpdmVOYW1lID0gc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uLCBzdGF0ZS5wb3NpdGlvbik7XG4gICAgZGlyZWN0aXZlQXJncyA9IFtdO1xuXG4gICAgaWYgKGRpcmVjdGl2ZU5hbWUubGVuZ3RoIDwgMSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2RpcmVjdGl2ZSBuYW1lIG11c3Qgbm90IGJlIGxlc3MgdGhhbiBvbmUgY2hhcmFjdGVyIGluIGxlbmd0aCcpO1xuICAgIH1cblxuICAgIHdoaWxlIChjaCAhPT0gMCkge1xuICAgICAgd2hpbGUgKGlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaCA9PT0gMHgyMy8qICMgKi8pIHtcbiAgICAgICAgZG8geyBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7IH1cbiAgICAgICAgd2hpbGUgKGNoICE9PSAwICYmICFpc19FT0woY2gpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc19FT0woY2gpKSBicmVhaztcblxuICAgICAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb247XG5cbiAgICAgIHdoaWxlIChjaCAhPT0gMCAmJiAhaXNfV1NfT1JfRU9MKGNoKSkge1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGRpcmVjdGl2ZUFyZ3MucHVzaChzdGF0ZS5pbnB1dC5zbGljZShfcG9zaXRpb24sIHN0YXRlLnBvc2l0aW9uKSk7XG4gICAgfVxuXG4gICAgaWYgKGNoICE9PSAwKSByZWFkTGluZUJyZWFrKHN0YXRlKTtcblxuICAgIGlmIChfaGFzT3duUHJvcGVydHkuY2FsbChkaXJlY3RpdmVIYW5kbGVycywgZGlyZWN0aXZlTmFtZSkpIHtcbiAgICAgIGRpcmVjdGl2ZUhhbmRsZXJzW2RpcmVjdGl2ZU5hbWVdKHN0YXRlLCBkaXJlY3RpdmVOYW1lLCBkaXJlY3RpdmVBcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3dXYXJuaW5nKHN0YXRlLCAndW5rbm93biBkb2N1bWVudCBkaXJlY3RpdmUgXCInICsgZGlyZWN0aXZlTmFtZSArICdcIicpO1xuICAgIH1cbiAgfVxuXG4gIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcblxuICBpZiAoc3RhdGUubGluZUluZGVudCA9PT0gMCAmJlxuICAgICAgc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbikgICAgID09PSAweDJELyogLSAqLyAmJlxuICAgICAgc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbiArIDEpID09PSAweDJELyogLSAqLyAmJlxuICAgICAgc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbiArIDIpID09PSAweDJELyogLSAqLykge1xuICAgIHN0YXRlLnBvc2l0aW9uICs9IDM7XG4gICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpO1xuXG4gIH0gZWxzZSBpZiAoaGFzRGlyZWN0aXZlcykge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICdkaXJlY3RpdmVzIGVuZCBtYXJrIGlzIGV4cGVjdGVkJyk7XG4gIH1cblxuICBjb21wb3NlTm9kZShzdGF0ZSwgc3RhdGUubGluZUluZGVudCAtIDEsIENPTlRFWFRfQkxPQ0tfT1VULCBmYWxzZSwgdHJ1ZSk7XG4gIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcblxuICBpZiAoc3RhdGUuY2hlY2tMaW5lQnJlYWtzICYmXG4gICAgICBQQVRURVJOX05PTl9BU0NJSV9MSU5FX0JSRUFLUy50ZXN0KHN0YXRlLmlucHV0LnNsaWNlKGRvY3VtZW50U3RhcnQsIHN0YXRlLnBvc2l0aW9uKSkpIHtcbiAgICB0aHJvd1dhcm5pbmcoc3RhdGUsICdub24tQVNDSUkgbGluZSBicmVha3MgYXJlIGludGVycHJldGVkIGFzIGNvbnRlbnQnKTtcbiAgfVxuXG4gIHN0YXRlLmRvY3VtZW50cy5wdXNoKHN0YXRlLnJlc3VsdCk7XG5cbiAgaWYgKHN0YXRlLnBvc2l0aW9uID09PSBzdGF0ZS5saW5lU3RhcnQgJiYgdGVzdERvY3VtZW50U2VwYXJhdG9yKHN0YXRlKSkge1xuXG4gICAgaWYgKHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pID09PSAweDJFLyogLiAqLykge1xuICAgICAgc3RhdGUucG9zaXRpb24gKz0gMztcbiAgICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHN0YXRlLnBvc2l0aW9uIDwgKHN0YXRlLmxlbmd0aCAtIDEpKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ2VuZCBvZiB0aGUgc3RyZWFtIG9yIGEgZG9jdW1lbnQgc2VwYXJhdG9yIGlzIGV4cGVjdGVkJyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuO1xuICB9XG59XG5cblxuZnVuY3Rpb24gbG9hZERvY3VtZW50cyhpbnB1dCwgb3B0aW9ucykge1xuICBpbnB1dCA9IFN0cmluZyhpbnB1dCk7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmIChpbnB1dC5sZW5ndGggIT09IDApIHtcblxuICAgIC8vIEFkZCB0YWlsaW5nIGBcXG5gIGlmIG5vdCBleGlzdHNcbiAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChpbnB1dC5sZW5ndGggLSAxKSAhPT0gMHgwQS8qIExGICovICYmXG4gICAgICAgIGlucHV0LmNoYXJDb2RlQXQoaW5wdXQubGVuZ3RoIC0gMSkgIT09IDB4MEQvKiBDUiAqLykge1xuICAgICAgaW5wdXQgKz0gJ1xcbic7XG4gICAgfVxuXG4gICAgLy8gU3RyaXAgQk9NXG4gICAgaWYgKGlucHV0LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgICAgaW5wdXQgPSBpbnB1dC5zbGljZSgxKTtcbiAgICB9XG4gIH1cblxuICB2YXIgc3RhdGUgPSBuZXcgU3RhdGUoaW5wdXQsIG9wdGlvbnMpO1xuXG4gIC8vIFVzZSAwIGFzIHN0cmluZyB0ZXJtaW5hdG9yLiBUaGF0IHNpZ25pZmljYW50bHkgc2ltcGxpZmllcyBib3VuZHMgY2hlY2suXG4gIHN0YXRlLmlucHV0ICs9ICdcXDAnO1xuXG4gIHdoaWxlIChzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSA9PT0gMHgyMC8qIFNwYWNlICovKSB7XG4gICAgc3RhdGUubGluZUluZGVudCArPSAxO1xuICAgIHN0YXRlLnBvc2l0aW9uICs9IDE7XG4gIH1cblxuICB3aGlsZSAoc3RhdGUucG9zaXRpb24gPCAoc3RhdGUubGVuZ3RoIC0gMSkpIHtcbiAgICByZWFkRG9jdW1lbnQoc3RhdGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlLmRvY3VtZW50cztcbn1cblxuXG5mdW5jdGlvbiBsb2FkQWxsKGlucHV0LCBpdGVyYXRvciwgb3B0aW9ucykge1xuICB2YXIgZG9jdW1lbnRzID0gbG9hZERvY3VtZW50cyhpbnB1dCwgb3B0aW9ucyksIGluZGV4LCBsZW5ndGg7XG5cbiAgaWYgKHR5cGVvZiBpdGVyYXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBkb2N1bWVudHM7XG4gIH1cblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gZG9jdW1lbnRzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBpdGVyYXRvcihkb2N1bWVudHNbaW5kZXhdKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGxvYWQoaW5wdXQsIG9wdGlvbnMpIHtcbiAgdmFyIGRvY3VtZW50cyA9IGxvYWREb2N1bWVudHMoaW5wdXQsIG9wdGlvbnMpO1xuXG4gIGlmIChkb2N1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgLyplc2xpbnQtZGlzYWJsZSBuby11bmRlZmluZWQqL1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAoZG9jdW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBkb2N1bWVudHNbMF07XG4gIH1cbiAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ2V4cGVjdGVkIGEgc2luZ2xlIGRvY3VtZW50IGluIHRoZSBzdHJlYW0sIGJ1dCBmb3VuZCBtb3JlJyk7XG59XG5cblxuZnVuY3Rpb24gc2FmZUxvYWRBbGwoaW5wdXQsIG91dHB1dCwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIG91dHB1dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGxvYWRBbGwoaW5wdXQsIG91dHB1dCwgY29tbW9uLmV4dGVuZCh7IHNjaGVtYTogREVGQVVMVF9TQUZFX1NDSEVNQSB9LCBvcHRpb25zKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxvYWRBbGwoaW5wdXQsIGNvbW1vbi5leHRlbmQoeyBzY2hlbWE6IERFRkFVTFRfU0FGRV9TQ0hFTUEgfSwgb3B0aW9ucykpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc2FmZUxvYWQoaW5wdXQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGxvYWQoaW5wdXQsIGNvbW1vbi5leHRlbmQoeyBzY2hlbWE6IERFRkFVTFRfU0FGRV9TQ0hFTUEgfSwgb3B0aW9ucykpO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzLmxvYWRBbGwgICAgID0gbG9hZEFsbDtcbm1vZHVsZS5leHBvcnRzLmxvYWQgICAgICAgID0gbG9hZDtcbm1vZHVsZS5leHBvcnRzLnNhZmVMb2FkQWxsID0gc2FmZUxvYWRBbGw7XG5tb2R1bGUuZXhwb3J0cy5zYWZlTG9hZCAgICA9IHNhZmVMb2FkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuXG5cbmZ1bmN0aW9uIE1hcmsobmFtZSwgYnVmZmVyLCBwb3NpdGlvbiwgbGluZSwgY29sdW1uKSB7XG4gIHRoaXMubmFtZSAgICAgPSBuYW1lO1xuICB0aGlzLmJ1ZmZlciAgID0gYnVmZmVyO1xuICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gIHRoaXMubGluZSAgICAgPSBsaW5lO1xuICB0aGlzLmNvbHVtbiAgID0gY29sdW1uO1xufVxuXG5cbk1hcmsucHJvdG90eXBlLmdldFNuaXBwZXQgPSBmdW5jdGlvbiBnZXRTbmlwcGV0KGluZGVudCwgbWF4TGVuZ3RoKSB7XG4gIHZhciBoZWFkLCBzdGFydCwgdGFpbCwgZW5kLCBzbmlwcGV0O1xuXG4gIGlmICghdGhpcy5idWZmZXIpIHJldHVybiBudWxsO1xuXG4gIGluZGVudCA9IGluZGVudCB8fCA0O1xuICBtYXhMZW5ndGggPSBtYXhMZW5ndGggfHwgNzU7XG5cbiAgaGVhZCA9ICcnO1xuICBzdGFydCA9IHRoaXMucG9zaXRpb247XG5cbiAgd2hpbGUgKHN0YXJ0ID4gMCAmJiAnXFx4MDBcXHJcXG5cXHg4NVxcdTIwMjhcXHUyMDI5Jy5pbmRleE9mKHRoaXMuYnVmZmVyLmNoYXJBdChzdGFydCAtIDEpKSA9PT0gLTEpIHtcbiAgICBzdGFydCAtPSAxO1xuICAgIGlmICh0aGlzLnBvc2l0aW9uIC0gc3RhcnQgPiAobWF4TGVuZ3RoIC8gMiAtIDEpKSB7XG4gICAgICBoZWFkID0gJyAuLi4gJztcbiAgICAgIHN0YXJ0ICs9IDU7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0YWlsID0gJyc7XG4gIGVuZCA9IHRoaXMucG9zaXRpb247XG5cbiAgd2hpbGUgKGVuZCA8IHRoaXMuYnVmZmVyLmxlbmd0aCAmJiAnXFx4MDBcXHJcXG5cXHg4NVxcdTIwMjhcXHUyMDI5Jy5pbmRleE9mKHRoaXMuYnVmZmVyLmNoYXJBdChlbmQpKSA9PT0gLTEpIHtcbiAgICBlbmQgKz0gMTtcbiAgICBpZiAoZW5kIC0gdGhpcy5wb3NpdGlvbiA+IChtYXhMZW5ndGggLyAyIC0gMSkpIHtcbiAgICAgIHRhaWwgPSAnIC4uLiAnO1xuICAgICAgZW5kIC09IDU7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzbmlwcGV0ID0gdGhpcy5idWZmZXIuc2xpY2Uoc3RhcnQsIGVuZCk7XG5cbiAgcmV0dXJuIGNvbW1vbi5yZXBlYXQoJyAnLCBpbmRlbnQpICsgaGVhZCArIHNuaXBwZXQgKyB0YWlsICsgJ1xcbicgK1xuICAgICAgICAgY29tbW9uLnJlcGVhdCgnICcsIGluZGVudCArIHRoaXMucG9zaXRpb24gLSBzdGFydCArIGhlYWQubGVuZ3RoKSArICdeJztcbn07XG5cblxuTWFyay5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhjb21wYWN0KSB7XG4gIHZhciBzbmlwcGV0LCB3aGVyZSA9ICcnO1xuXG4gIGlmICh0aGlzLm5hbWUpIHtcbiAgICB3aGVyZSArPSAnaW4gXCInICsgdGhpcy5uYW1lICsgJ1wiICc7XG4gIH1cblxuICB3aGVyZSArPSAnYXQgbGluZSAnICsgKHRoaXMubGluZSArIDEpICsgJywgY29sdW1uICcgKyAodGhpcy5jb2x1bW4gKyAxKTtcblxuICBpZiAoIWNvbXBhY3QpIHtcbiAgICBzbmlwcGV0ID0gdGhpcy5nZXRTbmlwcGV0KCk7XG5cbiAgICBpZiAoc25pcHBldCkge1xuICAgICAgd2hlcmUgKz0gJzpcXG4nICsgc25pcHBldDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gd2hlcmU7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gTWFyaztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyplc2xpbnQtZGlzYWJsZSBtYXgtbGVuKi9cblxudmFyIGNvbW1vbiAgICAgICAgPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIFlBTUxFeGNlcHRpb24gPSByZXF1aXJlKCcuL2V4Y2VwdGlvbicpO1xudmFyIFR5cGUgICAgICAgICAgPSByZXF1aXJlKCcuL3R5cGUnKTtcblxuXG5mdW5jdGlvbiBjb21waWxlTGlzdChzY2hlbWEsIG5hbWUsIHJlc3VsdCkge1xuICB2YXIgZXhjbHVkZSA9IFtdO1xuXG4gIHNjaGVtYS5pbmNsdWRlLmZvckVhY2goZnVuY3Rpb24gKGluY2x1ZGVkU2NoZW1hKSB7XG4gICAgcmVzdWx0ID0gY29tcGlsZUxpc3QoaW5jbHVkZWRTY2hlbWEsIG5hbWUsIHJlc3VsdCk7XG4gIH0pO1xuXG4gIHNjaGVtYVtuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uIChjdXJyZW50VHlwZSkge1xuICAgIHJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uIChwcmV2aW91c1R5cGUsIHByZXZpb3VzSW5kZXgpIHtcbiAgICAgIGlmIChwcmV2aW91c1R5cGUudGFnID09PSBjdXJyZW50VHlwZS50YWcgJiYgcHJldmlvdXNUeXBlLmtpbmQgPT09IGN1cnJlbnRUeXBlLmtpbmQpIHtcbiAgICAgICAgZXhjbHVkZS5wdXNoKHByZXZpb3VzSW5kZXgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVzdWx0LnB1c2goY3VycmVudFR5cGUpO1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0LmZpbHRlcihmdW5jdGlvbiAodHlwZSwgaW5kZXgpIHtcbiAgICByZXR1cm4gZXhjbHVkZS5pbmRleE9mKGluZGV4KSA9PT0gLTE7XG4gIH0pO1xufVxuXG5cbmZ1bmN0aW9uIGNvbXBpbGVNYXAoLyogbGlzdHMuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgc2NhbGFyOiB7fSxcbiAgICAgICAgc2VxdWVuY2U6IHt9LFxuICAgICAgICBtYXBwaW5nOiB7fSxcbiAgICAgICAgZmFsbGJhY2s6IHt9XG4gICAgICB9LCBpbmRleCwgbGVuZ3RoO1xuXG4gIGZ1bmN0aW9uIGNvbGxlY3RUeXBlKHR5cGUpIHtcbiAgICByZXN1bHRbdHlwZS5raW5kXVt0eXBlLnRhZ10gPSByZXN1bHRbJ2ZhbGxiYWNrJ11bdHlwZS50YWddID0gdHlwZTtcbiAgfVxuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIGFyZ3VtZW50c1tpbmRleF0uZm9yRWFjaChjb2xsZWN0VHlwZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuXG5mdW5jdGlvbiBTY2hlbWEoZGVmaW5pdGlvbikge1xuICB0aGlzLmluY2x1ZGUgID0gZGVmaW5pdGlvbi5pbmNsdWRlICB8fCBbXTtcbiAgdGhpcy5pbXBsaWNpdCA9IGRlZmluaXRpb24uaW1wbGljaXQgfHwgW107XG4gIHRoaXMuZXhwbGljaXQgPSBkZWZpbml0aW9uLmV4cGxpY2l0IHx8IFtdO1xuXG4gIHRoaXMuaW1wbGljaXQuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIGlmICh0eXBlLmxvYWRLaW5kICYmIHR5cGUubG9hZEtpbmQgIT09ICdzY2FsYXInKSB7XG4gICAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignVGhlcmUgaXMgYSBub24tc2NhbGFyIHR5cGUgaW4gdGhlIGltcGxpY2l0IGxpc3Qgb2YgYSBzY2hlbWEuIEltcGxpY2l0IHJlc29sdmluZyBvZiBzdWNoIHR5cGVzIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgfVxuICB9KTtcblxuICB0aGlzLmNvbXBpbGVkSW1wbGljaXQgPSBjb21waWxlTGlzdCh0aGlzLCAnaW1wbGljaXQnLCBbXSk7XG4gIHRoaXMuY29tcGlsZWRFeHBsaWNpdCA9IGNvbXBpbGVMaXN0KHRoaXMsICdleHBsaWNpdCcsIFtdKTtcbiAgdGhpcy5jb21waWxlZFR5cGVNYXAgID0gY29tcGlsZU1hcCh0aGlzLmNvbXBpbGVkSW1wbGljaXQsIHRoaXMuY29tcGlsZWRFeHBsaWNpdCk7XG59XG5cblxuU2NoZW1hLkRFRkFVTFQgPSBudWxsO1xuXG5cblNjaGVtYS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGVTY2hlbWEoKSB7XG4gIHZhciBzY2hlbWFzLCB0eXBlcztcblxuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDE6XG4gICAgICBzY2hlbWFzID0gU2NoZW1hLkRFRkFVTFQ7XG4gICAgICB0eXBlcyA9IGFyZ3VtZW50c1swXTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAyOlxuICAgICAgc2NoZW1hcyA9IGFyZ3VtZW50c1swXTtcbiAgICAgIHR5cGVzID0gYXJndW1lbnRzWzFdO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ1dyb25nIG51bWJlciBvZiBhcmd1bWVudHMgZm9yIFNjaGVtYS5jcmVhdGUgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIHNjaGVtYXMgPSBjb21tb24udG9BcnJheShzY2hlbWFzKTtcbiAgdHlwZXMgPSBjb21tb24udG9BcnJheSh0eXBlcyk7XG5cbiAgaWYgKCFzY2hlbWFzLmV2ZXJ5KGZ1bmN0aW9uIChzY2hlbWEpIHsgcmV0dXJuIHNjaGVtYSBpbnN0YW5jZW9mIFNjaGVtYTsgfSkpIHtcbiAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignU3BlY2lmaWVkIGxpc3Qgb2Ygc3VwZXIgc2NoZW1hcyAob3IgYSBzaW5nbGUgU2NoZW1hIG9iamVjdCkgY29udGFpbnMgYSBub24tU2NoZW1hIG9iamVjdC4nKTtcbiAgfVxuXG4gIGlmICghdHlwZXMuZXZlcnkoZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIHR5cGUgaW5zdGFuY2VvZiBUeXBlOyB9KSkge1xuICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdTcGVjaWZpZWQgbGlzdCBvZiBZQU1MIHR5cGVzIChvciBhIHNpbmdsZSBUeXBlIG9iamVjdCkgY29udGFpbnMgYSBub24tVHlwZSBvYmplY3QuJyk7XG4gIH1cblxuICByZXR1cm4gbmV3IFNjaGVtYSh7XG4gICAgaW5jbHVkZTogc2NoZW1hcyxcbiAgICBleHBsaWNpdDogdHlwZXNcbiAgfSk7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gU2NoZW1hO1xuIiwiLy8gU3RhbmRhcmQgWUFNTCdzIENvcmUgc2NoZW1hLlxuLy8gaHR0cDovL3d3dy55YW1sLm9yZy9zcGVjLzEuMi9zcGVjLmh0bWwjaWQyODA0OTIzXG4vL1xuLy8gTk9URTogSlMtWUFNTCBkb2VzIG5vdCBzdXBwb3J0IHNjaGVtYS1zcGVjaWZpYyB0YWcgcmVzb2x1dGlvbiByZXN0cmljdGlvbnMuXG4vLyBTbywgQ29yZSBzY2hlbWEgaGFzIG5vIGRpc3RpbmN0aW9ucyBmcm9tIEpTT04gc2NoZW1hIGlzIEpTLVlBTUwuXG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBTY2hlbWEgPSByZXF1aXJlKCcuLi9zY2hlbWEnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBTY2hlbWEoe1xuICBpbmNsdWRlOiBbXG4gICAgcmVxdWlyZSgnLi9qc29uJylcbiAgXVxufSk7XG4iLCIvLyBKUy1ZQU1MJ3MgZGVmYXVsdCBzY2hlbWEgZm9yIGBsb2FkYCBmdW5jdGlvbi5cbi8vIEl0IGlzIG5vdCBkZXNjcmliZWQgaW4gdGhlIFlBTUwgc3BlY2lmaWNhdGlvbi5cbi8vXG4vLyBUaGlzIHNjaGVtYSBpcyBiYXNlZCBvbiBKUy1ZQU1MJ3MgZGVmYXVsdCBzYWZlIHNjaGVtYSBhbmQgaW5jbHVkZXNcbi8vIEphdmFTY3JpcHQtc3BlY2lmaWMgdHlwZXM6ICEhanMvdW5kZWZpbmVkLCAhIWpzL3JlZ2V4cCBhbmQgISFqcy9mdW5jdGlvbi5cbi8vXG4vLyBBbHNvIHRoaXMgc2NoZW1hIGlzIHVzZWQgYXMgZGVmYXVsdCBiYXNlIHNjaGVtYSBhdCBgU2NoZW1hLmNyZWF0ZWAgZnVuY3Rpb24uXG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBTY2hlbWEgPSByZXF1aXJlKCcuLi9zY2hlbWEnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFNjaGVtYS5ERUZBVUxUID0gbmV3IFNjaGVtYSh7XG4gIGluY2x1ZGU6IFtcbiAgICByZXF1aXJlKCcuL2RlZmF1bHRfc2FmZScpXG4gIF0sXG4gIGV4cGxpY2l0OiBbXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9qcy91bmRlZmluZWQnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL2pzL3JlZ2V4cCcpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvanMvZnVuY3Rpb24nKVxuICBdXG59KTtcbiIsIi8vIEpTLVlBTUwncyBkZWZhdWx0IHNjaGVtYSBmb3IgYHNhZmVMb2FkYCBmdW5jdGlvbi5cbi8vIEl0IGlzIG5vdCBkZXNjcmliZWQgaW4gdGhlIFlBTUwgc3BlY2lmaWNhdGlvbi5cbi8vXG4vLyBUaGlzIHNjaGVtYSBpcyBiYXNlZCBvbiBzdGFuZGFyZCBZQU1MJ3MgQ29yZSBzY2hlbWEgYW5kIGluY2x1ZGVzIG1vc3Qgb2Zcbi8vIGV4dHJhIHR5cGVzIGRlc2NyaWJlZCBhdCBZQU1MIHRhZyByZXBvc2l0b3J5LiAoaHR0cDovL3lhbWwub3JnL3R5cGUvKVxuXG5cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgU2NoZW1hID0gcmVxdWlyZSgnLi4vc2NoZW1hJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgU2NoZW1hKHtcbiAgaW5jbHVkZTogW1xuICAgIHJlcXVpcmUoJy4vY29yZScpXG4gIF0sXG4gIGltcGxpY2l0OiBbXG4gICAgcmVxdWlyZSgnLi4vdHlwZS90aW1lc3RhbXAnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL21lcmdlJylcbiAgXSxcbiAgZXhwbGljaXQ6IFtcbiAgICByZXF1aXJlKCcuLi90eXBlL2JpbmFyeScpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvb21hcCcpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvcGFpcnMnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL3NldCcpXG4gIF1cbn0pO1xuIiwiLy8gU3RhbmRhcmQgWUFNTCdzIEZhaWxzYWZlIHNjaGVtYS5cbi8vIGh0dHA6Ly93d3cueWFtbC5vcmcvc3BlYy8xLjIvc3BlYy5odG1sI2lkMjgwMjM0NlxuXG5cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgU2NoZW1hID0gcmVxdWlyZSgnLi4vc2NoZW1hJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgU2NoZW1hKHtcbiAgZXhwbGljaXQ6IFtcbiAgICByZXF1aXJlKCcuLi90eXBlL3N0cicpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvc2VxJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9tYXAnKVxuICBdXG59KTtcbiIsIi8vIFN0YW5kYXJkIFlBTUwncyBKU09OIHNjaGVtYS5cbi8vIGh0dHA6Ly93d3cueWFtbC5vcmcvc3BlYy8xLjIvc3BlYy5odG1sI2lkMjgwMzIzMVxuLy9cbi8vIE5PVEU6IEpTLVlBTUwgZG9lcyBub3Qgc3VwcG9ydCBzY2hlbWEtc3BlY2lmaWMgdGFnIHJlc29sdXRpb24gcmVzdHJpY3Rpb25zLlxuLy8gU28sIHRoaXMgc2NoZW1hIGlzIG5vdCBzdWNoIHN0cmljdCBhcyBkZWZpbmVkIGluIHRoZSBZQU1MIHNwZWNpZmljYXRpb24uXG4vLyBJdCBhbGxvd3MgbnVtYmVycyBpbiBiaW5hcnkgbm90YWlvbiwgdXNlIGBOdWxsYCBhbmQgYE5VTExgIGFzIGBudWxsYCwgZXRjLlxuXG5cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgU2NoZW1hID0gcmVxdWlyZSgnLi4vc2NoZW1hJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgU2NoZW1hKHtcbiAgaW5jbHVkZTogW1xuICAgIHJlcXVpcmUoJy4vZmFpbHNhZmUnKVxuICBdLFxuICBpbXBsaWNpdDogW1xuICAgIHJlcXVpcmUoJy4uL3R5cGUvbnVsbCcpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvYm9vbCcpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvaW50JyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9mbG9hdCcpXG4gIF1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgWUFNTEV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vZXhjZXB0aW9uJyk7XG5cbnZhciBUWVBFX0NPTlNUUlVDVE9SX09QVElPTlMgPSBbXG4gICdraW5kJyxcbiAgJ3Jlc29sdmUnLFxuICAnY29uc3RydWN0JyxcbiAgJ2luc3RhbmNlT2YnLFxuICAncHJlZGljYXRlJyxcbiAgJ3JlcHJlc2VudCcsXG4gICdkZWZhdWx0U3R5bGUnLFxuICAnc3R5bGVBbGlhc2VzJ1xuXTtcblxudmFyIFlBTUxfTk9ERV9LSU5EUyA9IFtcbiAgJ3NjYWxhcicsXG4gICdzZXF1ZW5jZScsXG4gICdtYXBwaW5nJ1xuXTtcblxuZnVuY3Rpb24gY29tcGlsZVN0eWxlQWxpYXNlcyhtYXApIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuXG4gIGlmIChtYXAgIT09IG51bGwpIHtcbiAgICBPYmplY3Qua2V5cyhtYXApLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICBtYXBbc3R5bGVdLmZvckVhY2goZnVuY3Rpb24gKGFsaWFzKSB7XG4gICAgICAgIHJlc3VsdFtTdHJpbmcoYWxpYXMpXSA9IHN0eWxlO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBUeXBlKHRhZywgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKFRZUEVfQ09OU1RSVUNUT1JfT1BUSU9OUy5pbmRleE9mKG5hbWUpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ1Vua25vd24gb3B0aW9uIFwiJyArIG5hbWUgKyAnXCIgaXMgbWV0IGluIGRlZmluaXRpb24gb2YgXCInICsgdGFnICsgJ1wiIFlBTUwgdHlwZS4nKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFRPRE86IEFkZCB0YWcgZm9ybWF0IGNoZWNrLlxuICB0aGlzLnRhZyAgICAgICAgICA9IHRhZztcbiAgdGhpcy5raW5kICAgICAgICAgPSBvcHRpb25zWydraW5kJ10gICAgICAgICB8fCBudWxsO1xuICB0aGlzLnJlc29sdmUgICAgICA9IG9wdGlvbnNbJ3Jlc29sdmUnXSAgICAgIHx8IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH07XG4gIHRoaXMuY29uc3RydWN0ICAgID0gb3B0aW9uc1snY29uc3RydWN0J10gICAgfHwgZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGE7IH07XG4gIHRoaXMuaW5zdGFuY2VPZiAgID0gb3B0aW9uc1snaW5zdGFuY2VPZiddICAgfHwgbnVsbDtcbiAgdGhpcy5wcmVkaWNhdGUgICAgPSBvcHRpb25zWydwcmVkaWNhdGUnXSAgICB8fCBudWxsO1xuICB0aGlzLnJlcHJlc2VudCAgICA9IG9wdGlvbnNbJ3JlcHJlc2VudCddICAgIHx8IG51bGw7XG4gIHRoaXMuZGVmYXVsdFN0eWxlID0gb3B0aW9uc1snZGVmYXVsdFN0eWxlJ10gfHwgbnVsbDtcbiAgdGhpcy5zdHlsZUFsaWFzZXMgPSBjb21waWxlU3R5bGVBbGlhc2VzKG9wdGlvbnNbJ3N0eWxlQWxpYXNlcyddIHx8IG51bGwpO1xuXG4gIGlmIChZQU1MX05PREVfS0lORFMuaW5kZXhPZih0aGlzLmtpbmQpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdVbmtub3duIGtpbmQgXCInICsgdGhpcy5raW5kICsgJ1wiIGlzIHNwZWNpZmllZCBmb3IgXCInICsgdGFnICsgJ1wiIFlBTUwgdHlwZS4nKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFR5cGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSovXG5cbnZhciBOb2RlQnVmZmVyO1xuXG50cnkge1xuICAvLyBBIHRyaWNrIGZvciBicm93c2VyaWZpZWQgdmVyc2lvbiwgdG8gbm90IGluY2x1ZGUgYEJ1ZmZlcmAgc2hpbVxuICB2YXIgX3JlcXVpcmUgPSByZXF1aXJlO1xuICBOb2RlQnVmZmVyID0gX3JlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbn0gY2F0Y2ggKF9fKSB7fVxuXG52YXIgVHlwZSAgICAgICA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxuXG4vLyBbIDY0LCA2NSwgNjYgXSAtPiBbIHBhZGRpbmcsIENSLCBMRiBdXG52YXIgQkFTRTY0X01BUCA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVxcblxccic7XG5cblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxCaW5hcnkoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBjb2RlLCBpZHgsIGJpdGxlbiA9IDAsIG1heCA9IGRhdGEubGVuZ3RoLCBtYXAgPSBCQVNFNjRfTUFQO1xuXG4gIC8vIENvbnZlcnQgb25lIGJ5IG9uZS5cbiAgZm9yIChpZHggPSAwOyBpZHggPCBtYXg7IGlkeCsrKSB7XG4gICAgY29kZSA9IG1hcC5pbmRleE9mKGRhdGEuY2hhckF0KGlkeCkpO1xuXG4gICAgLy8gU2tpcCBDUi9MRlxuICAgIGlmIChjb2RlID4gNjQpIGNvbnRpbnVlO1xuXG4gICAgLy8gRmFpbCBvbiBpbGxlZ2FsIGNoYXJhY3RlcnNcbiAgICBpZiAoY29kZSA8IDApIHJldHVybiBmYWxzZTtcblxuICAgIGJpdGxlbiArPSA2O1xuICB9XG5cbiAgLy8gSWYgdGhlcmUgYXJlIGFueSBiaXRzIGxlZnQsIHNvdXJjZSB3YXMgY29ycnVwdGVkXG4gIHJldHVybiAoYml0bGVuICUgOCkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxCaW5hcnkoZGF0YSkge1xuICB2YXIgaWR4LCB0YWlsYml0cyxcbiAgICAgIGlucHV0ID0gZGF0YS5yZXBsYWNlKC9bXFxyXFxuPV0vZywgJycpLCAvLyByZW1vdmUgQ1IvTEYgJiBwYWRkaW5nIHRvIHNpbXBsaWZ5IHNjYW5cbiAgICAgIG1heCA9IGlucHV0Lmxlbmd0aCxcbiAgICAgIG1hcCA9IEJBU0U2NF9NQVAsXG4gICAgICBiaXRzID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIC8vIENvbGxlY3QgYnkgNio0IGJpdHMgKDMgYnl0ZXMpXG5cbiAgZm9yIChpZHggPSAwOyBpZHggPCBtYXg7IGlkeCsrKSB7XG4gICAgaWYgKChpZHggJSA0ID09PSAwKSAmJiBpZHgpIHtcbiAgICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDE2KSAmIDB4RkYpO1xuICAgICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gOCkgJiAweEZGKTtcbiAgICAgIHJlc3VsdC5wdXNoKGJpdHMgJiAweEZGKTtcbiAgICB9XG5cbiAgICBiaXRzID0gKGJpdHMgPDwgNikgfCBtYXAuaW5kZXhPZihpbnB1dC5jaGFyQXQoaWR4KSk7XG4gIH1cblxuICAvLyBEdW1wIHRhaWxcblxuICB0YWlsYml0cyA9IChtYXggJSA0KSAqIDY7XG5cbiAgaWYgKHRhaWxiaXRzID09PSAwKSB7XG4gICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gMTYpICYgMHhGRik7XG4gICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gOCkgJiAweEZGKTtcbiAgICByZXN1bHQucHVzaChiaXRzICYgMHhGRik7XG4gIH0gZWxzZSBpZiAodGFpbGJpdHMgPT09IDE4KSB7XG4gICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gMTApICYgMHhGRik7XG4gICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gMikgJiAweEZGKTtcbiAgfSBlbHNlIGlmICh0YWlsYml0cyA9PT0gMTIpIHtcbiAgICByZXN1bHQucHVzaCgoYml0cyA+PiA0KSAmIDB4RkYpO1xuICB9XG5cbiAgLy8gV3JhcCBpbnRvIEJ1ZmZlciBmb3IgTm9kZUpTIGFuZCBsZWF2ZSBBcnJheSBmb3IgYnJvd3NlclxuICBpZiAoTm9kZUJ1ZmZlcikge1xuICAgIC8vIFN1cHBvcnQgbm9kZSA2LisgQnVmZmVyIEFQSSB3aGVuIGF2YWlsYWJsZVxuICAgIHJldHVybiBOb2RlQnVmZmVyLmZyb20gPyBOb2RlQnVmZmVyLmZyb20ocmVzdWx0KSA6IG5ldyBOb2RlQnVmZmVyKHJlc3VsdCk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRZYW1sQmluYXJ5KG9iamVjdCAvKiwgc3R5bGUqLykge1xuICB2YXIgcmVzdWx0ID0gJycsIGJpdHMgPSAwLCBpZHgsIHRhaWwsXG4gICAgICBtYXggPSBvYmplY3QubGVuZ3RoLFxuICAgICAgbWFwID0gQkFTRTY0X01BUDtcblxuICAvLyBDb252ZXJ0IGV2ZXJ5IHRocmVlIGJ5dGVzIHRvIDQgQVNDSUkgY2hhcmFjdGVycy5cblxuICBmb3IgKGlkeCA9IDA7IGlkeCA8IG1heDsgaWR4KyspIHtcbiAgICBpZiAoKGlkeCAlIDMgPT09IDApICYmIGlkeCkge1xuICAgICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxOCkgJiAweDNGXTtcbiAgICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gMTIpICYgMHgzRl07XG4gICAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDYpICYgMHgzRl07XG4gICAgICByZXN1bHQgKz0gbWFwW2JpdHMgJiAweDNGXTtcbiAgICB9XG5cbiAgICBiaXRzID0gKGJpdHMgPDwgOCkgKyBvYmplY3RbaWR4XTtcbiAgfVxuXG4gIC8vIER1bXAgdGFpbFxuXG4gIHRhaWwgPSBtYXggJSAzO1xuXG4gIGlmICh0YWlsID09PSAwKSB7XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxOCkgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDEyKSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gNikgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwW2JpdHMgJiAweDNGXTtcbiAgfSBlbHNlIGlmICh0YWlsID09PSAyKSB7XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxMCkgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDQpICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA8PCAyKSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICB9IGVsc2UgaWYgKHRhaWwgPT09IDEpIHtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDIpICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA8PCA0KSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaXNCaW5hcnkob2JqZWN0KSB7XG4gIHJldHVybiBOb2RlQnVmZmVyICYmIE5vZGVCdWZmZXIuaXNCdWZmZXIob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6YmluYXJ5Jywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxCaW5hcnksXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEJpbmFyeSxcbiAgcHJlZGljYXRlOiBpc0JpbmFyeSxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRZYW1sQmluYXJ5XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sQm9vbGVhbihkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIG1heCA9IGRhdGEubGVuZ3RoO1xuXG4gIHJldHVybiAobWF4ID09PSA0ICYmIChkYXRhID09PSAndHJ1ZScgfHwgZGF0YSA9PT0gJ1RydWUnIHx8IGRhdGEgPT09ICdUUlVFJykpIHx8XG4gICAgICAgICAobWF4ID09PSA1ICYmIChkYXRhID09PSAnZmFsc2UnIHx8IGRhdGEgPT09ICdGYWxzZScgfHwgZGF0YSA9PT0gJ0ZBTFNFJykpO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sQm9vbGVhbihkYXRhKSB7XG4gIHJldHVybiBkYXRhID09PSAndHJ1ZScgfHxcbiAgICAgICAgIGRhdGEgPT09ICdUcnVlJyB8fFxuICAgICAgICAgZGF0YSA9PT0gJ1RSVUUnO1xufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4ob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgQm9vbGVhbl0nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpib29sJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxCb29sZWFuLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxCb29sZWFuLFxuICBwcmVkaWNhdGU6IGlzQm9vbGVhbixcbiAgcmVwcmVzZW50OiB7XG4gICAgbG93ZXJjYXNlOiBmdW5jdGlvbiAob2JqZWN0KSB7IHJldHVybiBvYmplY3QgPyAndHJ1ZScgOiAnZmFsc2UnOyB9LFxuICAgIHVwcGVyY2FzZTogZnVuY3Rpb24gKG9iamVjdCkgeyByZXR1cm4gb2JqZWN0ID8gJ1RSVUUnIDogJ0ZBTFNFJzsgfSxcbiAgICBjYW1lbGNhc2U6IGZ1bmN0aW9uIChvYmplY3QpIHsgcmV0dXJuIG9iamVjdCA/ICdUcnVlJyA6ICdGYWxzZSc7IH1cbiAgfSxcbiAgZGVmYXVsdFN0eWxlOiAnbG93ZXJjYXNlJ1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBUeXBlICAgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbnZhciBZQU1MX0ZMT0FUX1BBVFRFUk4gPSBuZXcgUmVnRXhwKFxuICAvLyAyLjVlNCwgMi41IGFuZCBpbnRlZ2Vyc1xuICAnXig/OlstK10/KD86MHxbMS05XVswLTlfXSopKD86XFxcXC5bMC05X10qKT8oPzpbZUVdWy0rXT9bMC05XSspPycgK1xuICAvLyAuMmU0LCAuMlxuICAvLyBzcGVjaWFsIGNhc2UsIHNlZW1zIG5vdCBmcm9tIHNwZWNcbiAgJ3xcXFxcLlswLTlfXSsoPzpbZUVdWy0rXT9bMC05XSspPycgK1xuICAvLyAyMDo1OVxuICAnfFstK10/WzAtOV1bMC05X10qKD86OlswLTVdP1swLTldKStcXFxcLlswLTlfXSonICtcbiAgLy8gLmluZlxuICAnfFstK10/XFxcXC4oPzppbmZ8SW5mfElORiknICtcbiAgLy8gLm5hblxuICAnfFxcXFwuKD86bmFufE5hTnxOQU4pKSQnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxGbG9hdChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKCFZQU1MX0ZMT0FUX1BBVFRFUk4udGVzdChkYXRhKSB8fFxuICAgICAgLy8gUXVpY2sgaGFjayB0byBub3QgYWxsb3cgaW50ZWdlcnMgZW5kIHdpdGggYF9gXG4gICAgICAvLyBQcm9iYWJseSBzaG91bGQgdXBkYXRlIHJlZ2V4cCAmIGNoZWNrIHNwZWVkXG4gICAgICBkYXRhW2RhdGEubGVuZ3RoIC0gMV0gPT09ICdfJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sRmxvYXQoZGF0YSkge1xuICB2YXIgdmFsdWUsIHNpZ24sIGJhc2UsIGRpZ2l0cztcblxuICB2YWx1ZSAgPSBkYXRhLnJlcGxhY2UoL18vZywgJycpLnRvTG93ZXJDYXNlKCk7XG4gIHNpZ24gICA9IHZhbHVlWzBdID09PSAnLScgPyAtMSA6IDE7XG4gIGRpZ2l0cyA9IFtdO1xuXG4gIGlmICgnKy0nLmluZGV4T2YodmFsdWVbMF0pID49IDApIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDEpO1xuICB9XG5cbiAgaWYgKHZhbHVlID09PSAnLmluZicpIHtcbiAgICByZXR1cm4gKHNpZ24gPT09IDEpID8gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuXG4gIH0gZWxzZSBpZiAodmFsdWUgPT09ICcubmFuJykge1xuICAgIHJldHVybiBOYU47XG5cbiAgfSBlbHNlIGlmICh2YWx1ZS5pbmRleE9mKCc6JykgPj0gMCkge1xuICAgIHZhbHVlLnNwbGl0KCc6JykuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgICAgZGlnaXRzLnVuc2hpZnQocGFyc2VGbG9hdCh2LCAxMCkpO1xuICAgIH0pO1xuXG4gICAgdmFsdWUgPSAwLjA7XG4gICAgYmFzZSA9IDE7XG5cbiAgICBkaWdpdHMuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgdmFsdWUgKz0gZCAqIGJhc2U7XG4gICAgICBiYXNlICo9IDYwO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNpZ24gKiB2YWx1ZTtcblxuICB9XG4gIHJldHVybiBzaWduICogcGFyc2VGbG9hdCh2YWx1ZSwgMTApO1xufVxuXG5cbnZhciBTQ0lFTlRJRklDX1dJVEhPVVRfRE9UID0gL15bLStdP1swLTldK2UvO1xuXG5mdW5jdGlvbiByZXByZXNlbnRZYW1sRmxvYXQob2JqZWN0LCBzdHlsZSkge1xuICB2YXIgcmVzO1xuXG4gIGlmIChpc05hTihvYmplY3QpKSB7XG4gICAgc3dpdGNoIChzdHlsZSkge1xuICAgICAgY2FzZSAnbG93ZXJjYXNlJzogcmV0dXJuICcubmFuJztcbiAgICAgIGNhc2UgJ3VwcGVyY2FzZSc6IHJldHVybiAnLk5BTic7XG4gICAgICBjYXNlICdjYW1lbGNhc2UnOiByZXR1cm4gJy5OYU4nO1xuICAgIH1cbiAgfSBlbHNlIGlmIChOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgPT09IG9iamVjdCkge1xuICAgIHN3aXRjaCAoc3R5bGUpIHtcbiAgICAgIGNhc2UgJ2xvd2VyY2FzZSc6IHJldHVybiAnLmluZic7XG4gICAgICBjYXNlICd1cHBlcmNhc2UnOiByZXR1cm4gJy5JTkYnO1xuICAgICAgY2FzZSAnY2FtZWxjYXNlJzogcmV0dXJuICcuSW5mJztcbiAgICB9XG4gIH0gZWxzZSBpZiAoTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZID09PSBvYmplY3QpIHtcbiAgICBzd2l0Y2ggKHN0eWxlKSB7XG4gICAgICBjYXNlICdsb3dlcmNhc2UnOiByZXR1cm4gJy0uaW5mJztcbiAgICAgIGNhc2UgJ3VwcGVyY2FzZSc6IHJldHVybiAnLS5JTkYnO1xuICAgICAgY2FzZSAnY2FtZWxjYXNlJzogcmV0dXJuICctLkluZic7XG4gICAgfVxuICB9IGVsc2UgaWYgKGNvbW1vbi5pc05lZ2F0aXZlWmVybyhvYmplY3QpKSB7XG4gICAgcmV0dXJuICctMC4wJztcbiAgfVxuXG4gIHJlcyA9IG9iamVjdC50b1N0cmluZygxMCk7XG5cbiAgLy8gSlMgc3RyaW5naWZpZXIgY2FuIGJ1aWxkIHNjaWVudGlmaWMgZm9ybWF0IHdpdGhvdXQgZG90czogNWUtMTAwLFxuICAvLyB3aGlsZSBZQU1MIHJlcXVyZXMgZG90OiA1LmUtMTAwLiBGaXggaXQgd2l0aCBzaW1wbGUgaGFja1xuXG4gIHJldHVybiBTQ0lFTlRJRklDX1dJVEhPVVRfRE9ULnRlc3QocmVzKSA/IHJlcy5yZXBsYWNlKCdlJywgJy5lJykgOiByZXM7XG59XG5cbmZ1bmN0aW9uIGlzRmxvYXQob2JqZWN0KSB7XG4gIHJldHVybiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IE51bWJlcl0nKSAmJlxuICAgICAgICAgKG9iamVjdCAlIDEgIT09IDAgfHwgY29tbW9uLmlzTmVnYXRpdmVaZXJvKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sRmxvYXQsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEZsb2F0LFxuICBwcmVkaWNhdGU6IGlzRmxvYXQsXG4gIHJlcHJlc2VudDogcmVwcmVzZW50WWFtbEZsb2F0LFxuICBkZWZhdWx0U3R5bGU6ICdsb3dlcmNhc2UnXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xudmFyIFR5cGUgICA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxuZnVuY3Rpb24gaXNIZXhDb2RlKGMpIHtcbiAgcmV0dXJuICgoMHgzMC8qIDAgKi8gPD0gYykgJiYgKGMgPD0gMHgzOS8qIDkgKi8pKSB8fFxuICAgICAgICAgKCgweDQxLyogQSAqLyA8PSBjKSAmJiAoYyA8PSAweDQ2LyogRiAqLykpIHx8XG4gICAgICAgICAoKDB4NjEvKiBhICovIDw9IGMpICYmIChjIDw9IDB4NjYvKiBmICovKSk7XG59XG5cbmZ1bmN0aW9uIGlzT2N0Q29kZShjKSB7XG4gIHJldHVybiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzcvKiA3ICovKSk7XG59XG5cbmZ1bmN0aW9uIGlzRGVjQ29kZShjKSB7XG4gIHJldHVybiAoKDB4MzAvKiAwICovIDw9IGMpICYmIChjIDw9IDB4MzkvKiA5ICovKSk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sSW50ZWdlcihkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIG1heCA9IGRhdGEubGVuZ3RoLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgaGFzRGlnaXRzID0gZmFsc2UsXG4gICAgICBjaDtcblxuICBpZiAoIW1heCkgcmV0dXJuIGZhbHNlO1xuXG4gIGNoID0gZGF0YVtpbmRleF07XG5cbiAgLy8gc2lnblxuICBpZiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJysnKSB7XG4gICAgY2ggPSBkYXRhWysraW5kZXhdO1xuICB9XG5cbiAgaWYgKGNoID09PSAnMCcpIHtcbiAgICAvLyAwXG4gICAgaWYgKGluZGV4ICsgMSA9PT0gbWF4KSByZXR1cm4gdHJ1ZTtcbiAgICBjaCA9IGRhdGFbKytpbmRleF07XG5cbiAgICAvLyBiYXNlIDIsIGJhc2UgOCwgYmFzZSAxNlxuXG4gICAgaWYgKGNoID09PSAnYicpIHtcbiAgICAgIC8vIGJhc2UgMlxuICAgICAgaW5kZXgrKztcblxuICAgICAgZm9yICg7IGluZGV4IDwgbWF4OyBpbmRleCsrKSB7XG4gICAgICAgIGNoID0gZGF0YVtpbmRleF07XG4gICAgICAgIGlmIChjaCA9PT0gJ18nKSBjb250aW51ZTtcbiAgICAgICAgaWYgKGNoICE9PSAnMCcgJiYgY2ggIT09ICcxJykgcmV0dXJuIGZhbHNlO1xuICAgICAgICBoYXNEaWdpdHMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc0RpZ2l0cyAmJiBjaCAhPT0gJ18nO1xuICAgIH1cblxuXG4gICAgaWYgKGNoID09PSAneCcpIHtcbiAgICAgIC8vIGJhc2UgMTZcbiAgICAgIGluZGV4Kys7XG5cbiAgICAgIGZvciAoOyBpbmRleCA8IG1heDsgaW5kZXgrKykge1xuICAgICAgICBjaCA9IGRhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoY2ggPT09ICdfJykgY29udGludWU7XG4gICAgICAgIGlmICghaXNIZXhDb2RlKGRhdGEuY2hhckNvZGVBdChpbmRleCkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGhhc0RpZ2l0cyA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzRGlnaXRzICYmIGNoICE9PSAnXyc7XG4gICAgfVxuXG4gICAgLy8gYmFzZSA4XG4gICAgZm9yICg7IGluZGV4IDwgbWF4OyBpbmRleCsrKSB7XG4gICAgICBjaCA9IGRhdGFbaW5kZXhdO1xuICAgICAgaWYgKGNoID09PSAnXycpIGNvbnRpbnVlO1xuICAgICAgaWYgKCFpc09jdENvZGUoZGF0YS5jaGFyQ29kZUF0KGluZGV4KSkpIHJldHVybiBmYWxzZTtcbiAgICAgIGhhc0RpZ2l0cyA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBoYXNEaWdpdHMgJiYgY2ggIT09ICdfJztcbiAgfVxuXG4gIC8vIGJhc2UgMTAgKGV4Y2VwdCAwKSBvciBiYXNlIDYwXG5cbiAgLy8gdmFsdWUgc2hvdWxkIG5vdCBzdGFydCB3aXRoIGBfYDtcbiAgaWYgKGNoID09PSAnXycpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKDsgaW5kZXggPCBtYXg7IGluZGV4KyspIHtcbiAgICBjaCA9IGRhdGFbaW5kZXhdO1xuICAgIGlmIChjaCA9PT0gJ18nKSBjb250aW51ZTtcbiAgICBpZiAoY2ggPT09ICc6JykgYnJlYWs7XG4gICAgaWYgKCFpc0RlY0NvZGUoZGF0YS5jaGFyQ29kZUF0KGluZGV4KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaGFzRGlnaXRzID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIFNob3VsZCBoYXZlIGRpZ2l0cyBhbmQgc2hvdWxkIG5vdCBlbmQgd2l0aCBgX2BcbiAgaWYgKCFoYXNEaWdpdHMgfHwgY2ggPT09ICdfJykgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIGlmICFiYXNlNjAgLSBkb25lO1xuICBpZiAoY2ggIT09ICc6JykgcmV0dXJuIHRydWU7XG5cbiAgLy8gYmFzZTYwIGFsbW9zdCBub3QgdXNlZCwgbm8gbmVlZHMgdG8gb3B0aW1pemVcbiAgcmV0dXJuIC9eKDpbMC01XT9bMC05XSkrJC8udGVzdChkYXRhLnNsaWNlKGluZGV4KSk7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxJbnRlZ2VyKGRhdGEpIHtcbiAgdmFyIHZhbHVlID0gZGF0YSwgc2lnbiA9IDEsIGNoLCBiYXNlLCBkaWdpdHMgPSBbXTtcblxuICBpZiAodmFsdWUuaW5kZXhPZignXycpICE9PSAtMSkge1xuICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXy9nLCAnJyk7XG4gIH1cblxuICBjaCA9IHZhbHVlWzBdO1xuXG4gIGlmIChjaCA9PT0gJy0nIHx8IGNoID09PSAnKycpIHtcbiAgICBpZiAoY2ggPT09ICctJykgc2lnbiA9IC0xO1xuICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMSk7XG4gICAgY2ggPSB2YWx1ZVswXTtcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PT0gJzAnKSByZXR1cm4gMDtcblxuICBpZiAoY2ggPT09ICcwJykge1xuICAgIGlmICh2YWx1ZVsxXSA9PT0gJ2InKSByZXR1cm4gc2lnbiAqIHBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCAyKTtcbiAgICBpZiAodmFsdWVbMV0gPT09ICd4JykgcmV0dXJuIHNpZ24gKiBwYXJzZUludCh2YWx1ZSwgMTYpO1xuICAgIHJldHVybiBzaWduICogcGFyc2VJbnQodmFsdWUsIDgpO1xuICB9XG5cbiAgaWYgKHZhbHVlLmluZGV4T2YoJzonKSAhPT0gLTEpIHtcbiAgICB2YWx1ZS5zcGxpdCgnOicpLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICAgIGRpZ2l0cy51bnNoaWZ0KHBhcnNlSW50KHYsIDEwKSk7XG4gICAgfSk7XG5cbiAgICB2YWx1ZSA9IDA7XG4gICAgYmFzZSA9IDE7XG5cbiAgICBkaWdpdHMuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgdmFsdWUgKz0gKGQgKiBiYXNlKTtcbiAgICAgIGJhc2UgKj0gNjA7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2lnbiAqIHZhbHVlO1xuXG4gIH1cblxuICByZXR1cm4gc2lnbiAqIHBhcnNlSW50KHZhbHVlLCAxMCk7XG59XG5cbmZ1bmN0aW9uIGlzSW50ZWdlcihvYmplY3QpIHtcbiAgcmV0dXJuIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSkgPT09ICdbb2JqZWN0IE51bWJlcl0nICYmXG4gICAgICAgICAob2JqZWN0ICUgMSA9PT0gMCAmJiAhY29tbW9uLmlzTmVnYXRpdmVaZXJvKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbEludGVnZXIsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEludGVnZXIsXG4gIHByZWRpY2F0ZTogaXNJbnRlZ2VyLFxuICByZXByZXNlbnQ6IHtcbiAgICBiaW5hcnk6ICAgICAgZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqID49IDAgPyAnMGInICsgb2JqLnRvU3RyaW5nKDIpIDogJy0wYicgKyBvYmoudG9TdHJpbmcoMikuc2xpY2UoMSk7IH0sXG4gICAgb2N0YWw6ICAgICAgIGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiA+PSAwID8gJzAnICArIG9iai50b1N0cmluZyg4KSA6ICctMCcgICsgb2JqLnRvU3RyaW5nKDgpLnNsaWNlKDEpOyB9LFxuICAgIGRlY2ltYWw6ICAgICBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmoudG9TdHJpbmcoMTApOyB9LFxuICAgIC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbiAgICBoZXhhZGVjaW1hbDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqID49IDAgPyAnMHgnICsgb2JqLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpIDogICctMHgnICsgb2JqLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpLnNsaWNlKDEpOyB9XG4gIH0sXG4gIGRlZmF1bHRTdHlsZTogJ2RlY2ltYWwnLFxuICBzdHlsZUFsaWFzZXM6IHtcbiAgICBiaW5hcnk6ICAgICAgWyAyLCAgJ2JpbicgXSxcbiAgICBvY3RhbDogICAgICAgWyA4LCAgJ29jdCcgXSxcbiAgICBkZWNpbWFsOiAgICAgWyAxMCwgJ2RlYycgXSxcbiAgICBoZXhhZGVjaW1hbDogWyAxNiwgJ2hleCcgXVxuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVzcHJpbWE7XG5cbi8vIEJyb3dzZXJpZmllZCB2ZXJzaW9uIGRvZXMgbm90IGhhdmUgZXNwcmltYVxuLy9cbi8vIDEuIEZvciBub2RlLmpzIGp1c3QgcmVxdWlyZSBtb2R1bGUgYXMgZGVwc1xuLy8gMi4gRm9yIGJyb3dzZXIgdHJ5IHRvIHJlcXVpcmUgbXVkdWxlIHZpYSBleHRlcm5hbCBBTUQgc3lzdGVtLlxuLy8gICAgSWYgbm90IGZvdW5kIC0gdHJ5IHRvIGZhbGxiYWNrIHRvIHdpbmRvdy5lc3ByaW1hLiBJZiBub3Rcbi8vICAgIGZvdW5kIHRvbyAtIHRoZW4gZmFpbCB0byBwYXJzZS5cbi8vXG50cnkge1xuICAvLyB3b3JrYXJvdW5kIHRvIGV4Y2x1ZGUgcGFja2FnZSBmcm9tIGJyb3dzZXJpZnkgbGlzdC5cbiAgdmFyIF9yZXF1aXJlID0gcmVxdWlyZTtcbiAgZXNwcmltYSA9IF9yZXF1aXJlKCdlc3ByaW1hJyk7XG59IGNhdGNoIChfKSB7XG4gIC8qZ2xvYmFsIHdpbmRvdyAqL1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIGVzcHJpbWEgPSB3aW5kb3cuZXNwcmltYTtcbn1cblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi8uLi90eXBlJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVKYXZhc2NyaXB0RnVuY3Rpb24oZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHRyeSB7XG4gICAgdmFyIHNvdXJjZSA9ICcoJyArIGRhdGEgKyAnKScsXG4gICAgICAgIGFzdCAgICA9IGVzcHJpbWEucGFyc2Uoc291cmNlLCB7IHJhbmdlOiB0cnVlIH0pO1xuXG4gICAgaWYgKGFzdC50eXBlICAgICAgICAgICAgICAgICAgICAhPT0gJ1Byb2dyYW0nICAgICAgICAgICAgIHx8XG4gICAgICAgIGFzdC5ib2R5Lmxlbmd0aCAgICAgICAgICAgICAhPT0gMSAgICAgICAgICAgICAgICAgICAgIHx8XG4gICAgICAgIGFzdC5ib2R5WzBdLnR5cGUgICAgICAgICAgICAhPT0gJ0V4cHJlc3Npb25TdGF0ZW1lbnQnIHx8XG4gICAgICAgIChhc3QuYm9keVswXS5leHByZXNzaW9uLnR5cGUgIT09ICdBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbicgJiZcbiAgICAgICAgICBhc3QuYm9keVswXS5leHByZXNzaW9uLnR5cGUgIT09ICdGdW5jdGlvbkV4cHJlc3Npb24nKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29uc3RydWN0SmF2YXNjcmlwdEZ1bmN0aW9uKGRhdGEpIHtcbiAgLypqc2xpbnQgZXZpbDp0cnVlKi9cblxuICB2YXIgc291cmNlID0gJygnICsgZGF0YSArICcpJyxcbiAgICAgIGFzdCAgICA9IGVzcHJpbWEucGFyc2Uoc291cmNlLCB7IHJhbmdlOiB0cnVlIH0pLFxuICAgICAgcGFyYW1zID0gW10sXG4gICAgICBib2R5O1xuXG4gIGlmIChhc3QudHlwZSAgICAgICAgICAgICAgICAgICAgIT09ICdQcm9ncmFtJyAgICAgICAgICAgICB8fFxuICAgICAgYXN0LmJvZHkubGVuZ3RoICAgICAgICAgICAgICE9PSAxICAgICAgICAgICAgICAgICAgICAgfHxcbiAgICAgIGFzdC5ib2R5WzBdLnR5cGUgICAgICAgICAgICAhPT0gJ0V4cHJlc3Npb25TdGF0ZW1lbnQnIHx8XG4gICAgICAoYXN0LmJvZHlbMF0uZXhwcmVzc2lvbi50eXBlICE9PSAnQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24nICYmXG4gICAgICAgIGFzdC5ib2R5WzBdLmV4cHJlc3Npb24udHlwZSAhPT0gJ0Z1bmN0aW9uRXhwcmVzc2lvbicpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcmVzb2x2ZSBmdW5jdGlvbicpO1xuICB9XG5cbiAgYXN0LmJvZHlbMF0uZXhwcmVzc2lvbi5wYXJhbXMuZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICBwYXJhbXMucHVzaChwYXJhbS5uYW1lKTtcbiAgfSk7XG5cbiAgYm9keSA9IGFzdC5ib2R5WzBdLmV4cHJlc3Npb24uYm9keS5yYW5nZTtcblxuICAvLyBFc3ByaW1hJ3MgcmFuZ2VzIGluY2x1ZGUgdGhlIGZpcnN0ICd7JyBhbmQgdGhlIGxhc3QgJ30nIGNoYXJhY3RlcnMgb25cbiAgLy8gZnVuY3Rpb24gZXhwcmVzc2lvbnMuIFNvIGN1dCB0aGVtIG91dC5cbiAgaWYgKGFzdC5ib2R5WzBdLmV4cHJlc3Npb24uYm9keS50eXBlID09PSAnQmxvY2tTdGF0ZW1lbnQnKSB7XG4gICAgLyplc2xpbnQtZGlzYWJsZSBuby1uZXctZnVuYyovXG4gICAgcmV0dXJuIG5ldyBGdW5jdGlvbihwYXJhbXMsIHNvdXJjZS5zbGljZShib2R5WzBdICsgMSwgYm9keVsxXSAtIDEpKTtcbiAgfVxuICAvLyBFUzYgYXJyb3cgZnVuY3Rpb25zIGNhbiBvbWl0IHRoZSBCbG9ja1N0YXRlbWVudC4gSW4gdGhhdCBjYXNlLCBqdXN0IHJldHVyblxuICAvLyB0aGUgYm9keS5cbiAgLyplc2xpbnQtZGlzYWJsZSBuby1uZXctZnVuYyovXG4gIHJldHVybiBuZXcgRnVuY3Rpb24ocGFyYW1zLCAncmV0dXJuICcgKyBzb3VyY2Uuc2xpY2UoYm9keVswXSwgYm9keVsxXSkpO1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRKYXZhc2NyaXB0RnVuY3Rpb24ob2JqZWN0IC8qLCBzdHlsZSovKSB7XG4gIHJldHVybiBvYmplY3QudG9TdHJpbmcoKTtcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbihvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpqcy9mdW5jdGlvbicsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVKYXZhc2NyaXB0RnVuY3Rpb24sXG4gIGNvbnN0cnVjdDogY29uc3RydWN0SmF2YXNjcmlwdEZ1bmN0aW9uLFxuICBwcmVkaWNhdGU6IGlzRnVuY3Rpb24sXG4gIHJlcHJlc2VudDogcmVwcmVzZW50SmF2YXNjcmlwdEZ1bmN0aW9uXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi8uLi90eXBlJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVKYXZhc2NyaXB0UmVnRXhwKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIHJlZ2V4cCA9IGRhdGEsXG4gICAgICB0YWlsICAgPSAvXFwvKFtnaW1dKikkLy5leGVjKGRhdGEpLFxuICAgICAgbW9kaWZpZXJzID0gJyc7XG5cbiAgLy8gaWYgcmVnZXhwIHN0YXJ0cyB3aXRoICcvJyBpdCBjYW4gaGF2ZSBtb2RpZmllcnMgYW5kIG11c3QgYmUgcHJvcGVybHkgY2xvc2VkXG4gIC8vIGAvZm9vL2dpbWAgLSBtb2RpZmllcnMgdGFpbCBjYW4gYmUgbWF4aW11bSAzIGNoYXJzXG4gIGlmIChyZWdleHBbMF0gPT09ICcvJykge1xuICAgIGlmICh0YWlsKSBtb2RpZmllcnMgPSB0YWlsWzFdO1xuXG4gICAgaWYgKG1vZGlmaWVycy5sZW5ndGggPiAzKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gaWYgZXhwcmVzc2lvbiBzdGFydHMgd2l0aCAvLCBpcyBzaG91bGQgYmUgcHJvcGVybHkgdGVybWluYXRlZFxuICAgIGlmIChyZWdleHBbcmVnZXhwLmxlbmd0aCAtIG1vZGlmaWVycy5sZW5ndGggLSAxXSAhPT0gJy8nKSByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0SmF2YXNjcmlwdFJlZ0V4cChkYXRhKSB7XG4gIHZhciByZWdleHAgPSBkYXRhLFxuICAgICAgdGFpbCAgID0gL1xcLyhbZ2ltXSopJC8uZXhlYyhkYXRhKSxcbiAgICAgIG1vZGlmaWVycyA9ICcnO1xuXG4gIC8vIGAvZm9vL2dpbWAgLSB0YWlsIGNhbiBiZSBtYXhpbXVtIDQgY2hhcnNcbiAgaWYgKHJlZ2V4cFswXSA9PT0gJy8nKSB7XG4gICAgaWYgKHRhaWwpIG1vZGlmaWVycyA9IHRhaWxbMV07XG4gICAgcmVnZXhwID0gcmVnZXhwLnNsaWNlKDEsIHJlZ2V4cC5sZW5ndGggLSBtb2RpZmllcnMubGVuZ3RoIC0gMSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFJlZ0V4cChyZWdleHAsIG1vZGlmaWVycyk7XG59XG5cbmZ1bmN0aW9uIHJlcHJlc2VudEphdmFzY3JpcHRSZWdFeHAob2JqZWN0IC8qLCBzdHlsZSovKSB7XG4gIHZhciByZXN1bHQgPSAnLycgKyBvYmplY3Quc291cmNlICsgJy8nO1xuXG4gIGlmIChvYmplY3QuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAob2JqZWN0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKG9iamVjdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpqcy9yZWdleHAnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlSmF2YXNjcmlwdFJlZ0V4cCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RKYXZhc2NyaXB0UmVnRXhwLFxuICBwcmVkaWNhdGU6IGlzUmVnRXhwLFxuICByZXByZXNlbnQ6IHJlcHJlc2VudEphdmFzY3JpcHRSZWdFeHBcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uLy4uL3R5cGUnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZUphdmFzY3JpcHRVbmRlZmluZWQoKSB7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RKYXZhc2NyaXB0VW5kZWZpbmVkKCkge1xuICAvKmVzbGludC1kaXNhYmxlIG5vLXVuZGVmaW5lZCovXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHJlcHJlc2VudEphdmFzY3JpcHRVbmRlZmluZWQoKSB7XG4gIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWQob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAndW5kZWZpbmVkJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6anMvdW5kZWZpbmVkJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZUphdmFzY3JpcHRVbmRlZmluZWQsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0SmF2YXNjcmlwdFVuZGVmaW5lZCxcbiAgcHJlZGljYXRlOiBpc1VuZGVmaW5lZCxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRKYXZhc2NyaXB0VW5kZWZpbmVkXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOm1hcCcsIHtcbiAga2luZDogJ21hcHBpbmcnLFxuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6IHt9OyB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sTWVyZ2UoZGF0YSkge1xuICByZXR1cm4gZGF0YSA9PT0gJzw8JyB8fCBkYXRhID09PSBudWxsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjptZXJnZScsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sTWVyZ2Vcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxOdWxsKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBtYXggPSBkYXRhLmxlbmd0aDtcblxuICByZXR1cm4gKG1heCA9PT0gMSAmJiBkYXRhID09PSAnficpIHx8XG4gICAgICAgICAobWF4ID09PSA0ICYmIChkYXRhID09PSAnbnVsbCcgfHwgZGF0YSA9PT0gJ051bGwnIHx8IGRhdGEgPT09ICdOVUxMJykpO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sTnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzTnVsbChvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCA9PT0gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6bnVsbCcsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sTnVsbCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sTnVsbCxcbiAgcHJlZGljYXRlOiBpc051bGwsXG4gIHJlcHJlc2VudDoge1xuICAgIGNhbm9uaWNhbDogZnVuY3Rpb24gKCkgeyByZXR1cm4gJ34nOyAgICB9LFxuICAgIGxvd2VyY2FzZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gJ251bGwnOyB9LFxuICAgIHVwcGVyY2FzZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gJ05VTEwnOyB9LFxuICAgIGNhbWVsY2FzZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gJ051bGwnOyB9XG4gIH0sXG4gIGRlZmF1bHRTdHlsZTogJ2xvd2VyY2FzZSdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxudmFyIF9oYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX3RvU3RyaW5nICAgICAgID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxPbWFwKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBvYmplY3RLZXlzID0gW10sIGluZGV4LCBsZW5ndGgsIHBhaXIsIHBhaXJLZXksIHBhaXJIYXNLZXksXG4gICAgICBvYmplY3QgPSBkYXRhO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHBhaXIgPSBvYmplY3RbaW5kZXhdO1xuICAgIHBhaXJIYXNLZXkgPSBmYWxzZTtcblxuICAgIGlmIChfdG9TdHJpbmcuY2FsbChwYWlyKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAocGFpcktleSBpbiBwYWlyKSB7XG4gICAgICBpZiAoX2hhc093blByb3BlcnR5LmNhbGwocGFpciwgcGFpcktleSkpIHtcbiAgICAgICAgaWYgKCFwYWlySGFzS2V5KSBwYWlySGFzS2V5ID0gdHJ1ZTtcbiAgICAgICAgZWxzZSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFwYWlySGFzS2V5KSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAob2JqZWN0S2V5cy5pbmRleE9mKHBhaXJLZXkpID09PSAtMSkgb2JqZWN0S2V5cy5wdXNoKHBhaXJLZXkpO1xuICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxPbWFwKGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDogW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOm9tYXAnLCB7XG4gIGtpbmQ6ICdzZXF1ZW5jZScsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sT21hcCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sT21hcFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxQYWlycyhkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgaW5kZXgsIGxlbmd0aCwgcGFpciwga2V5cywgcmVzdWx0LFxuICAgICAgb2JqZWN0ID0gZGF0YTtcblxuICByZXN1bHQgPSBuZXcgQXJyYXkob2JqZWN0Lmxlbmd0aCk7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpciA9IG9iamVjdFtpbmRleF07XG5cbiAgICBpZiAoX3RvU3RyaW5nLmNhbGwocGFpcikgIT09ICdbb2JqZWN0IE9iamVjdF0nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBrZXlzID0gT2JqZWN0LmtleXMocGFpcik7XG5cbiAgICBpZiAoa2V5cy5sZW5ndGggIT09IDEpIHJldHVybiBmYWxzZTtcblxuICAgIHJlc3VsdFtpbmRleF0gPSBbIGtleXNbMF0sIHBhaXJba2V5c1swXV0gXTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sUGFpcnMoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIFtdO1xuXG4gIHZhciBpbmRleCwgbGVuZ3RoLCBwYWlyLCBrZXlzLCByZXN1bHQsXG4gICAgICBvYmplY3QgPSBkYXRhO1xuXG4gIHJlc3VsdCA9IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBwYWlyID0gb2JqZWN0W2luZGV4XTtcblxuICAgIGtleXMgPSBPYmplY3Qua2V5cyhwYWlyKTtcblxuICAgIHJlc3VsdFtpbmRleF0gPSBbIGtleXNbMF0sIHBhaXJba2V5c1swXV0gXTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOnBhaXJzJywge1xuICBraW5kOiAnc2VxdWVuY2UnLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbFBhaXJzLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxQYWlyc1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpzZXEnLCB7XG4gIGtpbmQ6ICdzZXF1ZW5jZScsXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDogW107IH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxudmFyIF9oYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sU2V0KGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBrZXksIG9iamVjdCA9IGRhdGE7XG5cbiAgZm9yIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgaWYgKG9iamVjdFtrZXldICE9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxTZXQoZGF0YSkge1xuICByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c2V0Jywge1xuICBraW5kOiAnbWFwcGluZycsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sU2V0LFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxTZXRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c3RyJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgY29uc3RydWN0OiBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiAnJzsgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG52YXIgWUFNTF9EQVRFX1JFR0VYUCA9IG5ldyBSZWdFeHAoXG4gICdeKFswLTldWzAtOV1bMC05XVswLTldKScgICAgICAgICAgKyAvLyBbMV0geWVhclxuICAnLShbMC05XVswLTldKScgICAgICAgICAgICAgICAgICAgICsgLy8gWzJdIG1vbnRoXG4gICctKFswLTldWzAtOV0pJCcpOyAgICAgICAgICAgICAgICAgICAvLyBbM10gZGF5XG5cbnZhciBZQU1MX1RJTUVTVEFNUF9SRUdFWFAgPSBuZXcgUmVnRXhwKFxuICAnXihbMC05XVswLTldWzAtOV1bMC05XSknICAgICAgICAgICsgLy8gWzFdIHllYXJcbiAgJy0oWzAtOV1bMC05XT8pJyAgICAgICAgICAgICAgICAgICArIC8vIFsyXSBtb250aFxuICAnLShbMC05XVswLTldPyknICAgICAgICAgICAgICAgICAgICsgLy8gWzNdIGRheVxuICAnKD86W1R0XXxbIFxcXFx0XSspJyAgICAgICAgICAgICAgICAgKyAvLyAuLi5cbiAgJyhbMC05XVswLTldPyknICAgICAgICAgICAgICAgICAgICArIC8vIFs0XSBob3VyXG4gICc6KFswLTldWzAtOV0pJyAgICAgICAgICAgICAgICAgICAgKyAvLyBbNV0gbWludXRlXG4gICc6KFswLTldWzAtOV0pJyAgICAgICAgICAgICAgICAgICAgKyAvLyBbNl0gc2Vjb25kXG4gICcoPzpcXFxcLihbMC05XSopKT8nICAgICAgICAgICAgICAgICArIC8vIFs3XSBmcmFjdGlvblxuICAnKD86WyBcXFxcdF0qKFp8KFstK10pKFswLTldWzAtOV0/KScgKyAvLyBbOF0gdHogWzldIHR6X3NpZ24gWzEwXSB0el9ob3VyXG4gICcoPzo6KFswLTldWzAtOV0pKT8pKT8kJyk7ICAgICAgICAgICAvLyBbMTFdIHR6X21pbnV0ZVxuXG5mdW5jdGlvbiByZXNvbHZlWWFtbFRpbWVzdGFtcChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIGlmIChZQU1MX0RBVEVfUkVHRVhQLmV4ZWMoZGF0YSkgIT09IG51bGwpIHJldHVybiB0cnVlO1xuICBpZiAoWUFNTF9USU1FU1RBTVBfUkVHRVhQLmV4ZWMoZGF0YSkgIT09IG51bGwpIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxUaW1lc3RhbXAoZGF0YSkge1xuICB2YXIgbWF0Y2gsIHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBmcmFjdGlvbiA9IDAsXG4gICAgICBkZWx0YSA9IG51bGwsIHR6X2hvdXIsIHR6X21pbnV0ZSwgZGF0ZTtcblxuICBtYXRjaCA9IFlBTUxfREFURV9SRUdFWFAuZXhlYyhkYXRhKTtcbiAgaWYgKG1hdGNoID09PSBudWxsKSBtYXRjaCA9IFlBTUxfVElNRVNUQU1QX1JFR0VYUC5leGVjKGRhdGEpO1xuXG4gIGlmIChtYXRjaCA9PT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKCdEYXRlIHJlc29sdmUgZXJyb3InKTtcblxuICAvLyBtYXRjaDogWzFdIHllYXIgWzJdIG1vbnRoIFszXSBkYXlcblxuICB5ZWFyID0gKyhtYXRjaFsxXSk7XG4gIG1vbnRoID0gKyhtYXRjaFsyXSkgLSAxOyAvLyBKUyBtb250aCBzdGFydHMgd2l0aCAwXG4gIGRheSA9ICsobWF0Y2hbM10pO1xuXG4gIGlmICghbWF0Y2hbNF0pIHsgLy8gbm8gaG91clxuICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCwgZGF5KSk7XG4gIH1cblxuICAvLyBtYXRjaDogWzRdIGhvdXIgWzVdIG1pbnV0ZSBbNl0gc2Vjb25kIFs3XSBmcmFjdGlvblxuXG4gIGhvdXIgPSArKG1hdGNoWzRdKTtcbiAgbWludXRlID0gKyhtYXRjaFs1XSk7XG4gIHNlY29uZCA9ICsobWF0Y2hbNl0pO1xuXG4gIGlmIChtYXRjaFs3XSkge1xuICAgIGZyYWN0aW9uID0gbWF0Y2hbN10uc2xpY2UoMCwgMyk7XG4gICAgd2hpbGUgKGZyYWN0aW9uLmxlbmd0aCA8IDMpIHsgLy8gbWlsbGktc2Vjb25kc1xuICAgICAgZnJhY3Rpb24gKz0gJzAnO1xuICAgIH1cbiAgICBmcmFjdGlvbiA9ICtmcmFjdGlvbjtcbiAgfVxuXG4gIC8vIG1hdGNoOiBbOF0gdHogWzldIHR6X3NpZ24gWzEwXSB0el9ob3VyIFsxMV0gdHpfbWludXRlXG5cbiAgaWYgKG1hdGNoWzldKSB7XG4gICAgdHpfaG91ciA9ICsobWF0Y2hbMTBdKTtcbiAgICB0el9taW51dGUgPSArKG1hdGNoWzExXSB8fCAwKTtcbiAgICBkZWx0YSA9ICh0el9ob3VyICogNjAgKyB0el9taW51dGUpICogNjAwMDA7IC8vIGRlbHRhIGluIG1pbGktc2Vjb25kc1xuICAgIGlmIChtYXRjaFs5XSA9PT0gJy0nKSBkZWx0YSA9IC1kZWx0YTtcbiAgfVxuXG4gIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgZnJhY3Rpb24pKTtcblxuICBpZiAoZGVsdGEpIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSAtIGRlbHRhKTtcblxuICByZXR1cm4gZGF0ZTtcbn1cblxuZnVuY3Rpb24gcmVwcmVzZW50WWFtbFRpbWVzdGFtcChvYmplY3QgLyosIHN0eWxlKi8pIHtcbiAgcmV0dXJuIG9iamVjdC50b0lTT1N0cmluZygpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjp0aW1lc3RhbXAnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbFRpbWVzdGFtcCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sVGltZXN0YW1wLFxuICBpbnN0YW5jZU9mOiBEYXRlLFxuICByZXByZXNlbnQ6IHJlcHJlc2VudFlhbWxUaW1lc3RhbXBcbn0pO1xuIiwiZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0IChleCkgeyByZXR1cm4gKGV4ICYmICh0eXBlb2YgZXggPT09ICdvYmplY3QnKSAmJiAnZGVmYXVsdCcgaW4gZXgpID8gZXhbJ2RlZmF1bHQnXSA6IGV4OyB9XG5cbnZhciAkUmVmUGFyc2VyID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ2pzb24tc2NoZW1hLXJlZi1wYXJzZXInKSk7XG52YXIgZGVyZWYgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnZGVyZWYnKSk7XG52YXIgdHNsaWJfMSA9IHJlcXVpcmUoJ3RzbGliJyk7XG5cbi8vIGR5bmFtaWMgcHJveHkgZm9yIGN1c3RvbSBnZW5lcmF0b3JzXG5mdW5jdGlvbiBwcm94eShnZW4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlLCBzY2hlbWEsIHByb3BlcnR5KSB7XG4gICAgICAgIHZhciBmbiA9IHZhbHVlO1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAvLyBzdXBwb3J0IGZvciBuZXN0ZWQgb2JqZWN0LCBmaXJzdC1rZXkgaXMgdGhlIGdlbmVyYXRvclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgZm4gPSBPYmplY3Qua2V5cyh2YWx1ZSlbMF07XG4gICAgICAgICAgICAvLyB0cmVhdCB0aGUgZ2l2ZW4gYXJyYXkgYXMgYXJndW1lbnRzLFxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVbZm5dKSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBnZW5lcmF0b3IgaXMgZXhwZWN0aW5nIGFycmF5cyB0aGV5IHNob3VsZCBiZSBuZXN0ZWQsIGUuZy4gYFtbMSwgMiwgM10sIHRydWUsIC4uLl1gXG4gICAgICAgICAgICAgICAgYXJncyA9IHZhbHVlW2ZuXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFyZ3MucHVzaCh2YWx1ZVtmbl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHN1cHBvcnQgZm9yIGtleXBhdGhzLCBlLmcuIFwiaW50ZXJuZXQuZW1haWxcIlxuICAgICAgICB2YXIgcHJvcHMgPSBmbi5zcGxpdCgnLicpO1xuICAgICAgICAvLyByZXRyaWV2ZSBhIGZyZXNoIGRlcGVuZGVuY3lcbiAgICAgICAgdmFyIGN0eCA9IGdlbigpO1xuICAgICAgICB3aGlsZSAocHJvcHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgY3R4ID0gY3R4W3Byb3BzLnNoaWZ0KCldO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJldHJpZXZlIGxhc3QgdmFsdWUgZnJvbSBjb250ZXh0IG9iamVjdFxuICAgICAgICB2YWx1ZSA9IHR5cGVvZiBjdHggPT09ICdvYmplY3QnID8gY3R4W3Byb3BzWzBdXSA6IGN0eDtcbiAgICAgICAgLy8gaW52b2tlIGR5bmFtaWMgZ2VuZXJhdG9yc1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmFwcGx5KGN0eCwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGVzdCBmb3IgcGVuZGluZyBjYWxsYmFja3NcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcmVzb2x2ZSB2YWx1ZSBmb3IgXCInICsgcHJvcGVydHkgKyAnOiAnICsgZm4gKyAnXCIsIGdpdmVuOiAnICsgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbn1cbi8qKlxuICogQ29udGFpbmVyIGlzIHVzZWQgdG8gd3JhcCBleHRlcm5hbCBnZW5lcmF0b3JzIChmYWtlciwgY2hhbmNlLCBjYXN1YWwsIGV0Yy4pIGFuZCBpdHMgZGVwZW5kZW5jaWVzLlxuICpcbiAqIC0gYGpzZi5leHRlbmQoJ2Zha2VyJylgIHdpbGwgZW5oYW5jZSBvciBkZWZpbmUgdGhlIGdpdmVuIGRlcGVuZGVuY3kuXG4gKiAtIGBqc2YuZGVmaW5lKCdmYWtlcicpYCB3aWxsIHByb3ZpZGUgdGhlIFwiZmFrZXJcIiBrZXl3b3JkIHN1cHBvcnQuXG4gKlxuICogUmFuZEV4cCBpcyBub3QgbG9uZ2VyIGNvbnNpZGVyZWQgYW4gXCJleHRlbnNpb25cIi5cbiAqL1xudmFyIENvbnRhaW5lciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29udGFpbmVyKCkge1xuICAgICAgICAvLyBkeW5hbWljIHJlcXVpcmVzIC0gaGFuZGxlIGFsbCBkZXBlbmRlbmNpZXNcbiAgICAgICAgLy8gdGhleSB3aWxsIE5PVCBiZSBpbmNsdWRlZCBvbiB0aGUgYnVuZGxlXG4gICAgICAgIHRoaXMucmVnaXN0cnkgPSB7fTtcbiAgICAgICAgdGhpcy5zdXBwb3J0ID0ge307XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIGRlcGVuZGVuY3kgZ2l2ZW4gYnkgbmFtZVxuICAgICAqIEBwYXJhbSBuYW1lXG4gICAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5yZWdpc3RyeVtuYW1lXSA9IGNhbGxiYWNrKHRoaXMucmVnaXN0cnlbbmFtZV0pO1xuICAgICAgICAvLyBidWlsdC1pbiBwcm94eSAoY2FuIGJlIG92ZXJyaWRkZW4pXG4gICAgICAgIGlmICghdGhpcy5zdXBwb3J0W25hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLnN1cHBvcnRbbmFtZV0gPSBwcm94eShmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5yZWdpc3RyeVtuYW1lXTsgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCBrZXl3b3JkIHN1cHBvcnQgYnkgbmFtZVxuICAgICAqIEBwYXJhbSBuYW1lXG4gICAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5kZWZpbmUgPSBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5zdXBwb3J0W25hbWVdID0gY2FsbGJhY2s7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGRlcGVuZGVuY3kgZ2l2ZW4gYnkgbmFtZVxuICAgICAqIEBwYXJhbSBuYW1lXG4gICAgICogQHJldHVybnMge0RlcGVuZGVuY3l9XG4gICAgICovXG4gICAgQ29udGFpbmVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMucmVnaXN0cnlbbmFtZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoJ1wiJyArIG5hbWUgKyAnXCIgZGVwZW5kZW5jeSBkb2VzblxcJ3QgZXhpc3QuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnlbbmFtZV07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBcHBseSBhIGN1c3RvbSBrZXl3b3JkXG4gICAgICogQHBhcmFtIHNjaGVtYVxuICAgICAqL1xuICAgIENvbnRhaW5lci5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChzY2hlbWEpIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhzY2hlbWEpO1xuICAgICAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgICAgdmFyIGZuID0ga2V5c1tsZW5ndGhdLnJlcGxhY2UoL154LS8sICcnKTtcbiAgICAgICAgICAgIHZhciBnZW4gPSB0aGlzLnN1cHBvcnRbZm5dO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBnZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBzY2hlbWEuZ2VuZXJhdGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBnZW4oc2NoZW1hW2tleXNbbGVuZ3RoXV0sIHNjaGVtYSwga2V5c1tsZW5ndGhdKTsgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2NoZW1hO1xuICAgIH07XG4gICAgcmV0dXJuIENvbnRhaW5lcjtcbn0oKSk7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBkZWZpbmVzIGEgcmVnaXN0cnkgZm9yIGN1c3RvbSBmb3JtYXRzIHVzZWQgd2l0aGluIEpTRi5cbiAqL1xudmFyIFJlZ2lzdHJ5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZWdpc3RyeSgpIHtcbiAgICAgICAgLy8gZW1wdHkgYnkgZGVmYXVsdFxuICAgICAgICB0aGlzLmRhdGEgPSB7fTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGN1c3RvbSBmb3JtYXRcbiAgICAgKi9cbiAgICBSZWdpc3RyeS5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5kYXRhW25hbWVdID0gY2FsbGJhY2s7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBtYW55IGZvcm1hdHMgYXQgb25lIHNob3RcbiAgICAgKi9cbiAgICBSZWdpc3RyeS5wcm90b3R5cGUucmVnaXN0ZXJNYW55ID0gZnVuY3Rpb24gKGZvcm1hdHMpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBmb3JtYXRzKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFbbmFtZV0gPSBmb3JtYXRzW25hbWVdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGVsZW1lbnQgYnkgcmVnaXN0cnkga2V5XG4gICAgICovXG4gICAgUmVnaXN0cnkucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLmRhdGFbbmFtZV07XG4gICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB3aG9sZSByZWdpc3RyeSBjb250ZW50XG4gICAgICovXG4gICAgUmVnaXN0cnkucHJvdG90eXBlLmxpc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGE7XG4gICAgfTtcbiAgICByZXR1cm4gUmVnaXN0cnk7XG59KCkpO1xuXG4vLyBpbnN0YW50aWF0ZVxudmFyIHJlZ2lzdHJ5ID0gbmV3IFJlZ2lzdHJ5KCk7XG4vKipcbiAqIEN1c3RvbSBmb3JtYXQgQVBJXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vanNvbi1zY2hlbWEtZmFrZXIvanNvbi1zY2hlbWEtZmFrZXIjY3VzdG9tLWZvcm1hdHNcbiAqIEBwYXJhbSBuYW1lT3JGb3JtYXRNYXBcbiAqIEBwYXJhbSBjYWxsYmFja1xuICogQHJldHVybnMge2FueX1cbiAqL1xuZnVuY3Rpb24gZm9ybWF0QVBJKG5hbWVPckZvcm1hdE1hcCwgY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIG5hbWVPckZvcm1hdE1hcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdHJ5Lmxpc3QoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIG5hbWVPckZvcm1hdE1hcCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmVnaXN0cnkucmVnaXN0ZXIobmFtZU9yRm9ybWF0TWFwLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVnaXN0cnkuZ2V0KG5hbWVPckZvcm1hdE1hcCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlZ2lzdHJ5LnJlZ2lzdGVyTWFueShuYW1lT3JGb3JtYXRNYXApO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIGRlZmluZXMgYSByZWdpc3RyeSBmb3IgY3VzdG9tIHNldHRpbmdzIHVzZWQgd2l0aGluIEpTRi5cbiAqL1xudmFyIE9wdGlvblJlZ2lzdHJ5ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhPcHRpb25SZWdpc3RyeSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPcHRpb25SZWdpc3RyeSgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGF0YVsnZmFpbE9uSW52YWxpZFR5cGVzJ10gPSB0cnVlO1xuICAgICAgICBfdGhpcy5kYXRhWydkZWZhdWx0SW52YWxpZFR5cGVQcm9kdWN0J10gPSBudWxsO1xuICAgICAgICBfdGhpcy5kYXRhWydmYWlsT25JbnZhbGlkRm9ybWF0J10gPSB0cnVlO1xuICAgICAgICBfdGhpcy5kYXRhWyd1c2VEZWZhdWx0VmFsdWUnXSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5kYXRhWydyZXF1aXJlZE9ubHknXSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5kYXRhWydtYXhJdGVtcyddID0gbnVsbDtcbiAgICAgICAgX3RoaXMuZGF0YVsnbWF4TGVuZ3RoJ10gPSBudWxsO1xuICAgICAgICBfdGhpcy5kYXRhWydkZWZhdWx0TWluSXRlbXMnXSA9IDA7XG4gICAgICAgIF90aGlzLmRhdGFbJ2RlZmF1bHRSYW5kRXhwTWF4J10gPSAxMDtcbiAgICAgICAgX3RoaXMuZGF0YVsnYWx3YXlzRmFrZU9wdGlvbmFscyddID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIE9wdGlvblJlZ2lzdHJ5O1xufShSZWdpc3RyeSkpO1xuXG4vLyBpbnN0YW50aWF0ZVxudmFyIHJlZ2lzdHJ5JDEgPSBuZXcgT3B0aW9uUmVnaXN0cnkoKTtcbi8qKlxuICogQ3VzdG9tIG9wdGlvbiBBUElcbiAqXG4gKiBAcGFyYW0gbmFtZU9yT3B0aW9uTWFwXG4gKiBAcmV0dXJucyB7YW55fVxuICovXG5mdW5jdGlvbiBvcHRpb25BUEkobmFtZU9yT3B0aW9uTWFwKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lT3JPcHRpb25NYXAgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiByZWdpc3RyeSQxLmdldChuYW1lT3JPcHRpb25NYXApO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdHJ5JDEucmVnaXN0ZXJNYW55KG5hbWVPck9wdGlvbk1hcCk7XG4gICAgfVxufVxuXG52YXIgUmFuZEV4cCA9IHJlcXVpcmUoJ3JhbmRleHAnKTtcbi8vIHNldCBtYXhpbXVtIGRlZmF1bHQsIHNlZSAjMTkzXG5SYW5kRXhwLnByb3RvdHlwZS5tYXggPSAxMDtcbmZ1bmN0aW9uIF9yYW5kZXhwKHZhbHVlKSB7XG4gICAgdmFyIHJlID0gbmV3IFJhbmRFeHAodmFsdWUpO1xuICAgIC8vIGFwcGx5IGdpdmVuIHNldHRpbmdcbiAgICByZS5tYXggPSBvcHRpb25BUEkoJ2RlZmF1bHRSYW5kRXhwTWF4Jyk7XG4gICAgcmV0dXJuIHJlLmdlbigpO1xufVxuZnVuY3Rpb24gZ2V0U3ViQXR0cmlidXRlKG9iaiwgZG90U2VwYXJhdGVkS2V5KSB7XG4gICAgdmFyIGtleUVsZW1lbnRzID0gZG90U2VwYXJhdGVkS2V5LnNwbGl0KCcuJyk7XG4gICAgd2hpbGUgKGtleUVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICB2YXIgcHJvcCA9IGtleUVsZW1lbnRzLnNoaWZ0KCk7XG4gICAgICAgIGlmICghb2JqW3Byb3BdKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvYmogPSBvYmpbcHJvcF07XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZS9mYWxzZSB3aGV0aGVyIHRoZSBvYmplY3QgcGFyYW1ldGVyIGhhcyBpdHMgb3duIHByb3BlcnRpZXMgZGVmaW5lZFxuICpcbiAqIEBwYXJhbSBvYmpcbiAqIEBwYXJhbSBwcm9wZXJ0aWVzXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaGFzUHJvcGVydGllcyhvYmopIHtcbiAgICB2YXIgcHJvcGVydGllcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHByb3BlcnRpZXNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBwcm9wZXJ0aWVzLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqW2tleV0gIT09ICd1bmRlZmluZWQnO1xuICAgIH0pLmxlbmd0aCA+IDA7XG59XG4vKipcbiAqIFJldHVybnMgdHlwZWNhc3RlZCB2YWx1ZS5cbiAqIEV4dGVybmFsIGdlbmVyYXRvcnMgKGZha2VyLCBjaGFuY2UsIGNhc3VhbCkgbWF5IHJldHVybiBkYXRhIGluIG5vbi1leHBlY3RlZCBmb3JtYXRzLCBzdWNoIGFzIHN0cmluZywgd2hlbiB5b3UgbWlnaHQgZXhwZWN0IGFuXG4gKiBpbnRlZ2VyLiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gZm9yY2UgdGhlIHR5cGVjYXN0LlxuICpcbiAqIEBwYXJhbSB2YWx1ZVxuICogQHBhcmFtIHRhcmdldFR5cGVcbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmZ1bmN0aW9uIHR5cGVjYXN0KHZhbHVlLCBzY2hlbWEpIHtcbiAgICAvLyBGSVhNRSB0aGlzIGZ1bmN0aW9uIHNob3VsZCBjb3ZlciBtb3N0IGNhc2VzIGFuZCBzaG91bGQgYmUgcmV1c2VkIHdpdGhpbiBnZW5lcmF0b3JzXG4gICAgc3dpdGNoIChzY2hlbWEudHlwZSkge1xuICAgICAgICBjYXNlICdpbnRlZ2VyJzpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgdmFyIG1pbiA9IE1hdGgubWF4KHNjaGVtYS5taW5MZW5ndGggfHwgMCwgMCk7XG4gICAgICAgICAgICB2YXIgbWF4ID0gTWF0aC5taW4oc2NoZW1hLm1heExlbmd0aCB8fCBJbmZpbml0eSwgSW5maW5pdHkpO1xuICAgICAgICAgICAgd2hpbGUgKHZhbHVlLmxlbmd0aCA8IG1pbikge1xuICAgICAgICAgICAgICAgIHZhbHVlICs9ICcgJyArIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IG1heCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyKDAsIG1heCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICAgICAgcmV0dXJuICEhdmFsdWU7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuZnVuY3Rpb24gbWVyZ2UoYSwgYikge1xuICAgIGZvciAodmFyIGtleSBpbiBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYltrZXldICE9PSAnb2JqZWN0JyB8fCBiW2tleV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIGFba2V5XSA9IGJba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGJba2V5XSkpIHtcbiAgICAgICAgICAgIGFba2V5XSA9IGFba2V5XSB8fCBbXTtcbiAgICAgICAgICAgIC8vIGZpeCAjMjkyIC0gc2tpcCBkdXBsaWNhdGVkIHZhbHVlcyBmcm9tIG1lcmdlIG9iamVjdCAoYilcbiAgICAgICAgICAgIGJba2V5XS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChhW2tleV0uaW5kZXhPZih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYVtrZXldLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhW2tleV0gIT09ICdvYmplY3QnIHx8IGFba2V5XSA9PT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KGFba2V5XSkpIHtcbiAgICAgICAgICAgIGFba2V5XSA9IG1lcmdlKHt9LCBiW2tleV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYVtrZXldID0gbWVyZ2UoYVtrZXldLCBiW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhO1xufVxuZnVuY3Rpb24gY2xlYW4ob2JqLCBpc0FycmF5LCByZXF1aXJlZFByb3BzKSB7XG4gICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICBvYmogPSBvYmpcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBjbGVhbih2YWx1ZSwgdHJ1ZSk7IH0pXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJzsgfSk7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICBpZiAoIXJlcXVpcmVkUHJvcHMgfHwgcmVxdWlyZWRQcm9wcy5pbmRleE9mKGspID09PSAtMSkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqW2tdKSAmJiAhb2JqW2tdLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmpba107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYmpba10gPSBjbGVhbihvYmpba10pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFPYmplY3Qua2V5cyhvYmopLmxlbmd0aCAmJiBpc0FycmF5KSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG5mdW5jdGlvbiBzaG9ydChzY2hlbWEpIHtcbiAgICB2YXIgcyA9IEpTT04uc3RyaW5naWZ5KHNjaGVtYSk7XG4gICAgdmFyIGwgPSBKU09OLnN0cmluZ2lmeShzY2hlbWEsIG51bGwsIDIpO1xuICAgIHJldHVybiBzLmxlbmd0aCA+IDQwMCA/IGwuc3Vic3RyKDAsIDQwMCkgKyAnLi4uJyA6IGw7XG59XG52YXIgdXRpbHMgPSB7XG4gICAgZ2V0U3ViQXR0cmlidXRlOiBnZXRTdWJBdHRyaWJ1dGUsXG4gICAgaGFzUHJvcGVydGllczogaGFzUHJvcGVydGllcyxcbiAgICB0eXBlY2FzdDogdHlwZWNhc3QsXG4gICAgbWVyZ2U6IG1lcmdlLFxuICAgIGNsZWFuOiBjbGVhbixcbiAgICBzaG9ydDogc2hvcnQsXG4gICAgcmFuZGV4cDogX3JhbmRleHBcbn07XG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9pbmRleC5kLnRzXCIgLz5cbi8qKlxuICogUmV0dXJucyByYW5kb20gZWxlbWVudCBvZiBhIGNvbGxlY3Rpb25cbiAqXG4gKiBAcGFyYW0gY29sbGVjdGlvblxuICogQHJldHVybnMge1R9XG4gKi9cbmZ1bmN0aW9uIHBpY2soY29sbGVjdGlvbikge1xuICAgIHJldHVybiBjb2xsZWN0aW9uW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNvbGxlY3Rpb24ubGVuZ3RoKV07XG59XG4vKipcbiAqIFJldHVybnMgc2h1ZmZsZWQgY29sbGVjdGlvbiBvZiBlbGVtZW50c1xuICpcbiAqIEBwYXJhbSBjb2xsZWN0aW9uXG4gKiBAcmV0dXJucyB7VFtdfVxuICovXG5mdW5jdGlvbiBzaHVmZmxlKGNvbGxlY3Rpb24pIHtcbiAgICB2YXIgdG1wLCBrZXksIGNvcHkgPSBjb2xsZWN0aW9uLnNsaWNlKCksIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgIGZvciAoOyBsZW5ndGggPiAwOykge1xuICAgICAgICBrZXkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBsZW5ndGgpO1xuICAgICAgICAvLyBzd2FwXG4gICAgICAgIHRtcCA9IGNvcHlbLS1sZW5ndGhdO1xuICAgICAgICBjb3B5W2xlbmd0aF0gPSBjb3B5W2tleV07XG4gICAgICAgIGNvcHlba2V5XSA9IHRtcDtcbiAgICB9XG4gICAgcmV0dXJuIGNvcHk7XG59XG4vKipcbiAqIFRoZXNlIHZhbHVlcyBkZXRlcm1pbmUgZGVmYXVsdCByYW5nZSBmb3IgcmFuZG9tLm51bWJlciBmdW5jdGlvblxuICpcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbnZhciBNSU5fTlVNQkVSID0gLTEwMDtcbnZhciBNQVhfTlVNQkVSID0gMTAwO1xuLyoqXG4gKiBSZXR1cm5zIGEgcmFuZG9tIGludGVnZXIgYmV0d2VlbiBtaW4gKGluY2x1c2l2ZSkgYW5kIG1heCAoaW5jbHVzaXZlKVxuICogVXNpbmcgTWF0aC5yb3VuZCgpIHdpbGwgZ2l2ZSB5b3UgYSBub24tdW5pZm9ybSBkaXN0cmlidXRpb24hXG4gKiBAc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE1Mjc4MjAvNzY5Mzg0XG4gKi9cbmZ1bmN0aW9uIGdldFJhbmRvbShtaW4sIG1heCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW47XG59XG4vKipcbiAqIEdlbmVyYXRlcyByYW5kb20gbnVtYmVyIGFjY29yZGluZyB0byBwYXJhbWV0ZXJzIHBhc3NlZFxuICpcbiAqIEBwYXJhbSBtaW5cbiAqIEBwYXJhbSBtYXhcbiAqIEBwYXJhbSBkZWZNaW5cbiAqIEBwYXJhbSBkZWZNYXhcbiAqIEBwYXJhbSBoYXNQcmVjaXNpb25cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIG51bWJlcihtaW4sIG1heCwgZGVmTWluLCBkZWZNYXgsIGhhc1ByZWNpc2lvbikge1xuICAgIGlmIChoYXNQcmVjaXNpb24gPT09IHZvaWQgMCkgeyBoYXNQcmVjaXNpb24gPSBmYWxzZTsgfVxuICAgIGRlZk1pbiA9IHR5cGVvZiBkZWZNaW4gPT09ICd1bmRlZmluZWQnID8gTUlOX05VTUJFUiA6IGRlZk1pbjtcbiAgICBkZWZNYXggPSB0eXBlb2YgZGVmTWF4ID09PSAndW5kZWZpbmVkJyA/IE1BWF9OVU1CRVIgOiBkZWZNYXg7XG4gICAgbWluID0gdHlwZW9mIG1pbiA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZNaW4gOiBtaW47XG4gICAgbWF4ID0gdHlwZW9mIG1heCA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZNYXggOiBtYXg7XG4gICAgaWYgKG1heCA8IG1pbikge1xuICAgICAgICBtYXggKz0gbWluO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gZ2V0UmFuZG9tKG1pbiwgbWF4KTtcbiAgICBpZiAoIWhhc1ByZWNpc2lvbikge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQocmVzdWx0ICsgJycsIDEwKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciByYW5kb20gPSB7XG4gICAgcGljazogcGljayxcbiAgICBzaHVmZmxlOiBzaHVmZmxlLFxuICAgIG51bWJlcjogbnVtYmVyLFxufTtcblxudmFyIFBhcnNlRXJyb3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKFBhcnNlRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUGFyc2VFcnJvcihtZXNzYWdlLCBwYXRoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnBhdGggPSBwYXRoO1xuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKF90aGlzLCBfdGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMubmFtZSA9ICdQYXJzZUVycm9yJztcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIF90aGlzLnBhdGggPSBwYXRoO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBQYXJzZUVycm9yO1xufShFcnJvcikpO1xuXG52YXIgaW5mZXJyZWRQcm9wZXJ0aWVzID0ge1xuICAgIGFycmF5OiBbXG4gICAgICAgICdhZGRpdGlvbmFsSXRlbXMnLFxuICAgICAgICAnaXRlbXMnLFxuICAgICAgICAnbWF4SXRlbXMnLFxuICAgICAgICAnbWluSXRlbXMnLFxuICAgICAgICAndW5pcXVlSXRlbXMnXG4gICAgXSxcbiAgICBpbnRlZ2VyOiBbXG4gICAgICAgICdleGNsdXNpdmVNYXhpbXVtJyxcbiAgICAgICAgJ2V4Y2x1c2l2ZU1pbmltdW0nLFxuICAgICAgICAnbWF4aW11bScsXG4gICAgICAgICdtaW5pbXVtJyxcbiAgICAgICAgJ211bHRpcGxlT2YnXG4gICAgXSxcbiAgICBvYmplY3Q6IFtcbiAgICAgICAgJ2FkZGl0aW9uYWxQcm9wZXJ0aWVzJyxcbiAgICAgICAgJ2RlcGVuZGVuY2llcycsXG4gICAgICAgICdtYXhQcm9wZXJ0aWVzJyxcbiAgICAgICAgJ21pblByb3BlcnRpZXMnLFxuICAgICAgICAncGF0dGVyblByb3BlcnRpZXMnLFxuICAgICAgICAncHJvcGVydGllcycsXG4gICAgICAgICdyZXF1aXJlZCdcbiAgICBdLFxuICAgIHN0cmluZzogW1xuICAgICAgICAnbWF4TGVuZ3RoJyxcbiAgICAgICAgJ21pbkxlbmd0aCcsXG4gICAgICAgICdwYXR0ZXJuJ1xuICAgIF1cbn07XG5pbmZlcnJlZFByb3BlcnRpZXMubnVtYmVyID0gaW5mZXJyZWRQcm9wZXJ0aWVzLmludGVnZXI7XG52YXIgc3Vic2NoZW1hUHJvcGVydGllcyA9IFtcbiAgICAnYWRkaXRpb25hbEl0ZW1zJyxcbiAgICAnaXRlbXMnLFxuICAgICdhZGRpdGlvbmFsUHJvcGVydGllcycsXG4gICAgJ2RlcGVuZGVuY2llcycsXG4gICAgJ3BhdHRlcm5Qcm9wZXJ0aWVzJyxcbiAgICAncHJvcGVydGllcydcbl07XG4vKipcbiAqIEl0ZXJhdGVzIHRocm91Z2ggYWxsIGtleXMgb2YgYG9iamAgYW5kOlxuICogLSBjaGVja3Mgd2hldGhlciB0aG9zZSBrZXlzIG1hdGNoIHByb3BlcnRpZXMgb2YgYSBnaXZlbiBpbmZlcnJlZCB0eXBlXG4gKiAtIG1ha2VzIHN1cmUgdGhhdCBgb2JqYCBpcyBub3QgYSBzdWJzY2hlbWE7IF9EbyBub3QgYXR0ZW1wdCB0byBpbmZlciBwcm9wZXJ0aWVzIG5hbWVkIGFzIHN1YnNjaGVtYSBjb250YWluZXJzLiBUaGVcbiAqIHJlYXNvbiBmb3IgdGhpcyBpcyB0aGF0IGFueSBwcm9wZXJ0eSBuYW1lIHdpdGhpbiB0aG9zZSBjb250YWluZXJzIHRoYXQgbWF0Y2hlcyBvbmUgb2YgdGhlIHByb3BlcnRpZXMgdXNlZCBmb3JcbiAqIGluZmVycmluZyBtaXNzaW5nIHR5cGUgdmFsdWVzIGNhdXNlcyB0aGUgY29udGFpbmVyIGl0c2VsZiB0byBnZXQgcHJvY2Vzc2VkIHdoaWNoIGxlYWRzIHRvIGludmFsaWQgb3V0cHV0LiAoSXNzdWUgNjIpX1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBtYXRjaGVzVHlwZShvYmosIGxhc3RFbGVtZW50SW5QYXRoLCBpbmZlcnJlZFR5cGVQcm9wZXJ0aWVzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikuZmlsdGVyKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHZhciBpc1N1YnNjaGVtYSA9IHN1YnNjaGVtYVByb3BlcnRpZXMuaW5kZXhPZihsYXN0RWxlbWVudEluUGF0aCkgPiAtMSwgaW5mZXJyZWRQcm9wZXJ0eUZvdW5kID0gaW5mZXJyZWRUeXBlUHJvcGVydGllcy5pbmRleE9mKHByb3ApID4gLTE7XG4gICAgICAgIGlmIChpbmZlcnJlZFByb3BlcnR5Rm91bmQgJiYgIWlzU3Vic2NoZW1hKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pLmxlbmd0aCA+IDA7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGdpdmVuIGBvYmpgIHR5cGUgbWlnaHQgYmUgaW5mZXJyZWQuIFRoZSBtZWNoYW5pc20gaXRlcmF0ZXMgdGhyb3VnaCBhbGwgaW5mZXJyZWQgdHlwZXMgZGVmaW5pdGlvbnMsXG4gKiB0cmllcyB0byBtYXRjaCBhbGxvd2VkIHByb3BlcnRpZXMgd2l0aCBwcm9wZXJ0aWVzIG9mIGdpdmVuIGBvYmpgLiBSZXR1cm5zIHR5cGUgbmFtZSwgaWYgaW5mZXJyZWQsIG9yIG51bGwuXG4gKlxuICogQHJldHVybnMge3N0cmluZ3xudWxsfVxuICovXG5mdW5jdGlvbiBpbmZlclR5cGUob2JqLCBzY2hlbWFQYXRoKSB7XG4gICAgZm9yICh2YXIgdHlwZU5hbWUgaW4gaW5mZXJyZWRQcm9wZXJ0aWVzKSB7XG4gICAgICAgIHZhciBsYXN0RWxlbWVudEluUGF0aCA9IHNjaGVtYVBhdGhbc2NoZW1hUGF0aC5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKG1hdGNoZXNUeXBlKG9iaiwgbGFzdEVsZW1lbnRJblBhdGgsIGluZmVycmVkUHJvcGVydGllc1t0eXBlTmFtZV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZU5hbWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIHJhbmRvbWl6ZWQgYm9vbGVhbiB2YWx1ZS5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gYm9vbGVhbkdlbmVyYXRvcigpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKSA+IDAuNTtcbn1cblxudmFyIGJvb2xlYW5UeXBlID0gYm9vbGVhbkdlbmVyYXRvcjtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgbnVsbCB2YWx1ZS5cbiAqXG4gKiBAcmV0dXJucyB7bnVsbH1cbiAqL1xuZnVuY3Rpb24gbnVsbEdlbmVyYXRvcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbn1cblxudmFyIG51bGxUeXBlID0gbnVsbEdlbmVyYXRvcjtcblxuLy8gVE9ETyBwcm92aWRlIHR5cGVzXG5mdW5jdGlvbiB1bmlxdWUocGF0aCwgaXRlbXMsIHZhbHVlLCBzYW1wbGUsIHJlc29sdmUsIHRyYXZlcnNlQ2FsbGJhY2spIHtcbiAgICB2YXIgdG1wID0gW10sIHNlZW4gPSBbXTtcbiAgICBmdW5jdGlvbiB3YWxrKG9iaikge1xuICAgICAgICB2YXIganNvbiA9IEpTT04uc3RyaW5naWZ5KG9iaik7XG4gICAgICAgIGlmIChzZWVuLmluZGV4T2YoanNvbikgPT09IC0xKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goanNvbik7XG4gICAgICAgICAgICB0bXAucHVzaChvYmopO1xuICAgICAgICB9XG4gICAgfVxuICAgIGl0ZW1zLmZvckVhY2god2Fsayk7XG4gICAgLy8gVE9ETzogZmluZCBhIGJldHRlciBzb2x1dGlvbj9cbiAgICB2YXIgbGltaXQgPSAxMDA7XG4gICAgd2hpbGUgKHRtcC5sZW5ndGggIT09IGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICB3YWxrKHRyYXZlcnNlQ2FsbGJhY2sodmFsdWUuaXRlbXMgfHwgc2FtcGxlLCBwYXRoLCByZXNvbHZlKSk7XG4gICAgICAgIGlmICghbGltaXQtLSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRtcDtcbn1cbi8vIFRPRE8gcHJvdmlkZSB0eXBlc1xudmFyIGFycmF5VHlwZSA9IGZ1bmN0aW9uIGFycmF5VHlwZSh2YWx1ZSwgcGF0aCwgcmVzb2x2ZSwgdHJhdmVyc2VDYWxsYmFjaykge1xuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIGlmICghKHZhbHVlLml0ZW1zIHx8IHZhbHVlLmFkZGl0aW9uYWxJdGVtcykpIHtcbiAgICAgICAgaWYgKHV0aWxzLmhhc1Byb3BlcnRpZXModmFsdWUsICdtaW5JdGVtcycsICdtYXhJdGVtcycsICd1bmlxdWVJdGVtcycpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcignbWlzc2luZyBpdGVtcyBmb3IgJyArIHV0aWxzLnNob3J0KHZhbHVlKSwgcGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH1cbiAgICAvLyBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzgzNTUyMjgvNzY5Mzg0XG4gICAgLy8gYWZ0ZXIgdHlwZSBndWFyZHMgc3VwcG9ydCBzdWJwcm9wZXJ0aWVzIChpbiBUUyAyLjApIHdlIGNhbiBzaW1wbGlmeSBiZWxvdyB0byAodmFsdWUuaXRlbXMgaW5zdGFuY2VvZiBBcnJheSlcbiAgICAvLyBzbyB0aGF0IHZhbHVlLml0ZW1zLm1hcCBiZWNvbWVzIHJlY29nbml6ZWQgZm9yIHR5cGVzY3JpcHQgY29tcGlsZXJcbiAgICB2YXIgdG1wSXRlbXMgPSB2YWx1ZS5pdGVtcztcbiAgICBpZiAodG1wSXRlbXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5jYWxsKGl0ZW1zLCB0bXBJdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0sIGtleSkge1xuICAgICAgICAgICAgdmFyIGl0ZW1TdWJwYXRoID0gcGF0aC5jb25jYXQoWydpdGVtcycsIGtleSArICcnXSk7XG4gICAgICAgICAgICByZXR1cm4gdHJhdmVyc2VDYWxsYmFjayhpdGVtLCBpdGVtU3VicGF0aCwgcmVzb2x2ZSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgdmFyIG1pbkl0ZW1zID0gdmFsdWUubWluSXRlbXM7XG4gICAgdmFyIG1heEl0ZW1zID0gdmFsdWUubWF4SXRlbXM7XG4gICAgaWYgKG9wdGlvbkFQSSgnZGVmYXVsdE1pbkl0ZW1zJykgJiYgbWluSXRlbXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBmaXggYm91bmRhcmllc1xuICAgICAgICBtaW5JdGVtcyA9ICFtYXhJdGVtc1xuICAgICAgICAgICAgPyBvcHRpb25BUEkoJ2RlZmF1bHRNaW5JdGVtcycpXG4gICAgICAgICAgICA6IE1hdGgubWluKG9wdGlvbkFQSSgnZGVmYXVsdE1pbkl0ZW1zJyksIG1heEl0ZW1zKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbkFQSSgnbWF4SXRlbXMnKSkge1xuICAgICAgICAvLyBEb24ndCBhbGxvdyB1c2VyIHRvIHNldCBtYXggaXRlbXMgYWJvdmUgb3VyIG1heGltdW1cbiAgICAgICAgaWYgKG1heEl0ZW1zICYmIG1heEl0ZW1zID4gb3B0aW9uQVBJKCdtYXhJdGVtcycpKSB7XG4gICAgICAgICAgICBtYXhJdGVtcyA9IG9wdGlvbkFQSSgnbWF4SXRlbXMnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEb24ndCBhbGxvdyB1c2VyIHRvIHNldCBtaW4gaXRlbXMgYWJvdmUgb3VyIG1heGltdW1cbiAgICAgICAgaWYgKG1pbkl0ZW1zICYmIG1pbkl0ZW1zID4gb3B0aW9uQVBJKCdtYXhJdGVtcycpKSB7XG4gICAgICAgICAgICBtaW5JdGVtcyA9IG1heEl0ZW1zO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSByYW5kb20ubnVtYmVyKG1pbkl0ZW1zLCBtYXhJdGVtcywgMSwgNSksIFxuICAgIC8vIFRPRE8gYmVsb3cgbG9va3MgYmFkLiBTaG91bGQgYWRkaXRpb25hbEl0ZW1zIGJlIGNvcGllZCBhcy1pcz9cbiAgICBzYW1wbGUgPSB0eXBlb2YgdmFsdWUuYWRkaXRpb25hbEl0ZW1zID09PSAnb2JqZWN0JyA/IHZhbHVlLmFkZGl0aW9uYWxJdGVtcyA6IHt9O1xuICAgIGZvciAodmFyIGN1cnJlbnQgPSBpdGVtcy5sZW5ndGg7IGN1cnJlbnQgPCBsZW5ndGg7IGN1cnJlbnQrKykge1xuICAgICAgICB2YXIgaXRlbVN1YnBhdGggPSBwYXRoLmNvbmNhdChbJ2l0ZW1zJywgY3VycmVudCArICcnXSk7XG4gICAgICAgIHZhciBlbGVtZW50ID0gdHJhdmVyc2VDYWxsYmFjayh2YWx1ZS5pdGVtcyB8fCBzYW1wbGUsIGl0ZW1TdWJwYXRoLCByZXNvbHZlKTtcbiAgICAgICAgaXRlbXMucHVzaChlbGVtZW50KTtcbiAgICB9XG4gICAgaWYgKHZhbHVlLnVuaXF1ZUl0ZW1zKSB7XG4gICAgICAgIHJldHVybiB1bmlxdWUocGF0aC5jb25jYXQoWydpdGVtcyddKSwgaXRlbXMsIHZhbHVlLCBzYW1wbGUsIHJlc29sdmUsIHRyYXZlcnNlQ2FsbGJhY2spO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbXM7XG59O1xuXG52YXIgTUlOX0lOVEVHRVIgPSAtMTAwMDAwMDAwO1xudmFyIE1BWF9JTlRFR0VSID0gMTAwMDAwMDAwO1xudmFyIG51bWJlclR5cGUgPSBmdW5jdGlvbiBudW1iZXJUeXBlKHZhbHVlKSB7XG4gICAgdmFyIG1pbiA9IHR5cGVvZiB2YWx1ZS5taW5pbXVtID09PSAndW5kZWZpbmVkJyA/IE1JTl9JTlRFR0VSIDogdmFsdWUubWluaW11bSwgbWF4ID0gdHlwZW9mIHZhbHVlLm1heGltdW0gPT09ICd1bmRlZmluZWQnID8gTUFYX0lOVEVHRVIgOiB2YWx1ZS5tYXhpbXVtLCBtdWx0aXBsZU9mID0gdmFsdWUubXVsdGlwbGVPZjtcbiAgICBpZiAobXVsdGlwbGVPZikge1xuICAgICAgICBtYXggPSBNYXRoLmZsb29yKG1heCAvIG11bHRpcGxlT2YpICogbXVsdGlwbGVPZjtcbiAgICAgICAgbWluID0gTWF0aC5jZWlsKG1pbiAvIG11bHRpcGxlT2YpICogbXVsdGlwbGVPZjtcbiAgICB9XG4gICAgaWYgKHZhbHVlLmV4Y2x1c2l2ZU1pbmltdW0gJiYgdmFsdWUubWluaW11bSAmJiBtaW4gPT09IHZhbHVlLm1pbmltdW0pIHtcbiAgICAgICAgbWluICs9IG11bHRpcGxlT2YgfHwgMTtcbiAgICB9XG4gICAgaWYgKHZhbHVlLmV4Y2x1c2l2ZU1heGltdW0gJiYgdmFsdWUubWF4aW11bSAmJiBtYXggPT09IHZhbHVlLm1heGltdW0pIHtcbiAgICAgICAgbWF4IC09IG11bHRpcGxlT2YgfHwgMTtcbiAgICB9XG4gICAgaWYgKG1pbiA+IG1heCkge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICBpZiAobXVsdGlwbGVPZikge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihyYW5kb20ubnVtYmVyKG1pbiwgbWF4KSAvIG11bHRpcGxlT2YpICogbXVsdGlwbGVPZjtcbiAgICB9XG4gICAgcmV0dXJuIHJhbmRvbS5udW1iZXIobWluLCBtYXgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlKTtcbn07XG5cbi8vIFRoZSBgaW50ZWdlcmAgdHlwZSBpcyBqdXN0IGEgd3JhcHBlciBmb3IgdGhlIGBudW1iZXJgIHR5cGUuIFRoZSBgbnVtYmVyYCB0eXBlXG4vLyByZXR1cm5zIGZsb2F0aW5nIHBvaW50IG51bWJlcnMsIGFuZCBgaW50ZWdlcmAgdHlwZSB0cnVuY2F0ZXMgdGhlIGZyYWN0aW9uXG4vLyBwYXJ0LCBsZWF2aW5nIHRoZSByZXN1bHQgYXMgYW4gaW50ZWdlci5cbnZhciBpbnRlZ2VyVHlwZSA9IGZ1bmN0aW9uIGludGVnZXJUeXBlKHZhbHVlKSB7XG4gICAgdmFyIGdlbmVyYXRlZCA9IG51bWJlclR5cGUodmFsdWUpO1xuICAgIC8vIHdoZXRoZXIgdGhlIGdlbmVyYXRlZCBudW1iZXIgaXMgcG9zaXRpdmUgb3IgbmVnYXRpdmUsIG5lZWQgdG8gdXNlIGVpdGhlclxuICAgIC8vIGZsb29yIChwb3NpdGl2ZSkgb3IgY2VpbCAobmVnYXRpdmUpIGZ1bmN0aW9uIHRvIGdldCByaWQgb2YgdGhlIGZyYWN0aW9uXG4gICAgcmV0dXJuIGdlbmVyYXRlZCA+IDAgPyBNYXRoLmZsb29yKGdlbmVyYXRlZCkgOiBNYXRoLmNlaWwoZ2VuZXJhdGVkKTtcbn07XG5cbnZhciBMSVBTVU1fV09SRFMgPSAoJ0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0IGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlJ1xuICAgICsgJyBldCBkb2xvcmUgbWFnbmEgYWxpcXVhIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtIHF1aXMgbm9zdHJ1ZCBleGVyY2l0YXRpb24gdWxsYW1jbyBsYWJvcmlzIG5pc2kgdXQgYWxpcXVpcCBleCBlYSdcbiAgICArICcgY29tbW9kbyBjb25zZXF1YXQgRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEnXG4gICAgKyAnIHBhcmlhdHVyIEV4Y2VwdGV1ciBzaW50IG9jY2FlY2F0IGN1cGlkYXRhdCBub24gcHJvaWRlbnQgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QnXG4gICAgKyAnIGxhYm9ydW0nKS5zcGxpdCgnICcpO1xuLyoqXG4gKiBHZW5lcmF0ZXMgcmFuZG9taXplZCBhcnJheSBvZiBzaW5nbGUgbG9yZW0gaXBzdW0gd29yZHMuXG4gKlxuICogQHBhcmFtIGxlbmd0aFxuICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fVxuICovXG5mdW5jdGlvbiB3b3Jkc0dlbmVyYXRvcihsZW5ndGgpIHtcbiAgICB2YXIgd29yZHMgPSByYW5kb20uc2h1ZmZsZShMSVBTVU1fV09SRFMpO1xuICAgIHJldHVybiB3b3Jkcy5zbGljZSgwLCBsZW5ndGgpO1xufVxuXG4vLyBmYWxsYmFjayBnZW5lcmF0b3JcbnZhciBhbnlUeXBlID0geyB0eXBlOiBbJ3N0cmluZycsICdudW1iZXInLCAnaW50ZWdlcicsICdib29sZWFuJ10gfTtcbi8vIFRPRE8gcHJvdmlkZSB0eXBlc1xudmFyIG9iamVjdFR5cGUgPSBmdW5jdGlvbiBvYmplY3RUeXBlKHZhbHVlLCBwYXRoLCByZXNvbHZlLCB0cmF2ZXJzZUNhbGxiYWNrKSB7XG4gICAgdmFyIHByb3BzID0ge307XG4gICAgdmFyIHByb3BlcnRpZXMgPSB2YWx1ZS5wcm9wZXJ0aWVzIHx8IHt9O1xuICAgIHZhciBwYXR0ZXJuUHJvcGVydGllcyA9IHZhbHVlLnBhdHRlcm5Qcm9wZXJ0aWVzIHx8IHt9O1xuICAgIHZhciByZXF1aXJlZFByb3BlcnRpZXMgPSAodmFsdWUucmVxdWlyZWQgfHwgW10pLnNsaWNlKCk7XG4gICAgdmFyIGFsbG93c0FkZGl0aW9uYWwgPSB2YWx1ZS5hZGRpdGlvbmFsUHJvcGVydGllcyA9PT0gZmFsc2UgPyBmYWxzZSA6IHRydWU7XG4gICAgdmFyIHByb3BlcnR5S2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpO1xuICAgIHZhciBwYXR0ZXJuUHJvcGVydHlLZXlzID0gT2JqZWN0LmtleXMocGF0dGVyblByb3BlcnRpZXMpO1xuICAgIHZhciBhZGRpdGlvbmFsUHJvcGVydGllcyA9IGFsbG93c0FkZGl0aW9uYWxcbiAgICAgICAgPyAodmFsdWUuYWRkaXRpb25hbFByb3BlcnRpZXMgPT09IHRydWUgPyB7fSA6IHZhbHVlLmFkZGl0aW9uYWxQcm9wZXJ0aWVzKVxuICAgICAgICA6IG51bGw7XG4gICAgaWYgKCFhbGxvd3NBZGRpdGlvbmFsICYmXG4gICAgICAgIHByb3BlcnR5S2V5cy5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgcGF0dGVyblByb3BlcnR5S2V5cy5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgdXRpbHMuaGFzUHJvcGVydGllcyh2YWx1ZSwgJ21pblByb3BlcnRpZXMnLCAnbWF4UHJvcGVydGllcycsICdkZXBlbmRlbmNpZXMnLCAncmVxdWlyZWQnKSkge1xuICAgICAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcignbWlzc2luZyBwcm9wZXJ0aWVzIGZvcjpcXG4nICsgdXRpbHMuc2hvcnQodmFsdWUpLCBwYXRoKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbkFQSSgncmVxdWlyZWRPbmx5JykgPT09IHRydWUpIHtcbiAgICAgICAgcmVxdWlyZWRQcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKHByb3BlcnRpZXNba2V5XSkge1xuICAgICAgICAgICAgICAgIHByb3BzW2tleV0gPSBwcm9wZXJ0aWVzW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJhdmVyc2VDYWxsYmFjayhwcm9wcywgcGF0aC5jb25jYXQoWydwcm9wZXJ0aWVzJ10pLCByZXNvbHZlKTtcbiAgICB9XG4gICAgdmFyIG1pbiA9IE1hdGgubWF4KHZhbHVlLm1pblByb3BlcnRpZXMgfHwgMCwgcmVxdWlyZWRQcm9wZXJ0aWVzLmxlbmd0aCk7XG4gICAgdmFyIG1heCA9IE1hdGgubWF4KHZhbHVlLm1heFByb3BlcnRpZXMgfHwgcmFuZG9tLm51bWJlcihtaW4sIG1pbiArIDUpKTtcbiAgICByYW5kb20uc2h1ZmZsZShwYXR0ZXJuUHJvcGVydHlLZXlzLmNvbmNhdChwcm9wZXJ0eUtleXMpKS5mb3JFYWNoKGZ1bmN0aW9uIChfa2V5KSB7XG4gICAgICAgIGlmIChyZXF1aXJlZFByb3BlcnRpZXMuaW5kZXhPZihfa2V5KSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJlcXVpcmVkUHJvcGVydGllcy5wdXNoKF9rZXkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLy8gcHJvcGVydGllcyBhcmUgcmVhZCBmcm9tIHJpZ2h0LXRvLWxlZnRcbiAgICB2YXIgX3Byb3BzID0gb3B0aW9uQVBJKCdhbHdheXNGYWtlT3B0aW9uYWxzJykgPyByZXF1aXJlZFByb3BlcnRpZXNcbiAgICAgICAgOiByZXF1aXJlZFByb3BlcnRpZXMuc2xpY2UoMCwgcmFuZG9tLm51bWJlcihtaW4sIG1heCkpO1xuICAgIF9wcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgLy8gZmlyc3Qgb25lcyBhcmUgdGhlIHJlcXVpcmVkIHByb3Blcmllc1xuICAgICAgICBpZiAocHJvcGVydGllc1trZXldKSB7XG4gICAgICAgICAgICBwcm9wc1trZXldID0gcHJvcGVydGllc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGZvdW5kO1xuICAgICAgICAgICAgLy8gdGhlbiB0cnkgcGF0dGVyblByb3BlcnRpZXNcbiAgICAgICAgICAgIHBhdHRlcm5Qcm9wZXJ0eUtleXMuZm9yRWFjaChmdW5jdGlvbiAoX2tleSkge1xuICAgICAgICAgICAgICAgIGlmIChrZXkubWF0Y2gobmV3IFJlZ0V4cChfa2V5KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBwcm9wc1t1dGlscy5yYW5kZXhwKGtleSldID0gcGF0dGVyblByb3BlcnRpZXNbX2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgLy8gdHJ5IHBhdHRlcm5Qcm9wZXJ0aWVzIGFnYWluLFxuICAgICAgICAgICAgICAgIHZhciBzdWJzY2hlbWEgPSBwYXR0ZXJuUHJvcGVydGllc1trZXldIHx8IGFkZGl0aW9uYWxQcm9wZXJ0aWVzO1xuICAgICAgICAgICAgICAgIGlmIChzdWJzY2hlbWEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHdlIGNhbiB1c2UgYWRkaXRpb25hbFByb3BlcnRpZXM/XG4gICAgICAgICAgICAgICAgICAgIHByb3BzW3BhdHRlcm5Qcm9wZXJ0aWVzW2tleV0gPyB1dGlscy5yYW5kZXhwKGtleSkgOiBrZXldID0gc3Vic2NoZW1hO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBjdXJyZW50ID0gT2JqZWN0LmtleXMocHJvcHMpLmxlbmd0aDtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBpZiAoIShwYXR0ZXJuUHJvcGVydHlLZXlzLmxlbmd0aCB8fCBhbGxvd3NBZGRpdGlvbmFsKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnQgPj0gbWluKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWxsb3dzQWRkaXRpb25hbCkge1xuICAgICAgICAgICAgdmFyIHdvcmQgPSB3b3Jkc0dlbmVyYXRvcigxKSArIHV0aWxzLnJhbmRleHAoJ1thLWZcXFxcZF17MSwzfScpO1xuICAgICAgICAgICAgaWYgKCFwcm9wc1t3b3JkXSkge1xuICAgICAgICAgICAgICAgIHByb3BzW3dvcmRdID0gYWRkaXRpb25hbFByb3BlcnRpZXMgfHwgYW55VHlwZTtcbiAgICAgICAgICAgICAgICBjdXJyZW50ICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGF0dGVyblByb3BlcnR5S2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChfa2V5KSB7XG4gICAgICAgICAgICB2YXIgd29yZCA9IHV0aWxzLnJhbmRleHAoX2tleSk7XG4gICAgICAgICAgICBpZiAoIXByb3BzW3dvcmRdKSB7XG4gICAgICAgICAgICAgICAgcHJvcHNbd29yZF0gPSBwYXR0ZXJuUHJvcGVydGllc1tfa2V5XTtcbiAgICAgICAgICAgICAgICBjdXJyZW50ICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIWFsbG93c0FkZGl0aW9uYWwgJiYgY3VycmVudCA8IG1pbikge1xuICAgICAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcigncHJvcGVydGllcyBjb25zdHJhaW50cyB3ZXJlIHRvbyBzdHJvbmcgdG8gc3VjY2Vzc2Z1bGx5IGdlbmVyYXRlIGEgdmFsaWQgb2JqZWN0IGZvcjpcXG4nICtcbiAgICAgICAgICAgIHV0aWxzLnNob3J0KHZhbHVlKSwgcGF0aCk7XG4gICAgfVxuICAgIHJldHVybiB0cmF2ZXJzZUNhbGxiYWNrKHByb3BzLCBwYXRoLmNvbmNhdChbJ3Byb3BlcnRpZXMnXSksIHJlc29sdmUpO1xufTtcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdXNlZCBieSB0aHVua0dlbmVyYXRvciB0byBwcm9kdWNlIHNvbWUgd29yZHMgZm9yIHRoZSBmaW5hbCByZXN1bHQuXG4gKlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gcHJvZHVjZSgpIHtcbiAgICB2YXIgbGVuZ3RoID0gcmFuZG9tLm51bWJlcigxLCA1KTtcbiAgICByZXR1cm4gd29yZHNHZW5lcmF0b3IobGVuZ3RoKS5qb2luKCcgJyk7XG59XG4vKipcbiAqIEdlbmVyYXRlcyByYW5kb21pemVkIGNvbmNhdGVuYXRlZCBzdHJpbmcgYmFzZWQgb24gd29yZHMgZ2VuZXJhdG9yLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHRodW5rR2VuZXJhdG9yKG1pbiwgbWF4KSB7XG4gICAgaWYgKG1pbiA9PT0gdm9pZCAwKSB7IG1pbiA9IDA7IH1cbiAgICBpZiAobWF4ID09PSB2b2lkIDApIHsgbWF4ID0gMTQwOyB9XG4gICAgdmFyIG1pbiA9IE1hdGgubWF4KDAsIG1pbiksIG1heCA9IHJhbmRvbS5udW1iZXIobWluLCBtYXgpLCByZXN1bHQgPSBwcm9kdWNlKCk7XG4gICAgLy8gYXBwZW5kIHVudGlsIGxlbmd0aCBpcyByZWFjaGVkXG4gICAgd2hpbGUgKHJlc3VsdC5sZW5ndGggPCBtaW4pIHtcbiAgICAgICAgcmVzdWx0ICs9IHByb2R1Y2UoKTtcbiAgICB9XG4gICAgLy8gY3V0IGlmIG5lZWRlZFxuICAgIGlmIChyZXN1bHQubGVuZ3RoID4gbWF4KSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zdWJzdHIoMCwgbWF4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgcmFuZG9taXplZCBpcHY0IGFkZHJlc3MuXG4gKlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gaXB2NEdlbmVyYXRvcigpIHtcbiAgICByZXR1cm4gWzAsIDAsIDAsIDBdLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByYW5kb20ubnVtYmVyKDAsIDI1NSk7XG4gICAgfSkuam9pbignLicpO1xufVxuXG52YXIgTU9TVF9ORUFSX0RBVEVUSU1FID0gMjUyNDYwODAwMDAwMDtcbi8qKlxuICogR2VuZXJhdGVzIHJhbmRvbWl6ZWQgZGF0ZSB0aW1lIElTTyBmb3JtYXQgc3RyaW5nLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGRhdGVUaW1lR2VuZXJhdG9yKCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoKTtcbiAgICB2YXIgZGF5cyA9IHJhbmRvbS5udW1iZXIoLTEwMDAsIE1PU1RfTkVBUl9EQVRFVElNRSk7XG4gICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpIC0gZGF5cyk7XG4gICAgcmV0dXJuIGRhdGUudG9JU09TdHJpbmcoKTtcbn1cblxuLyoqXG4gKiBQcmVkZWZpbmVkIGNvcmUgZm9ybWF0c1xuICogQHR5cGUge1trZXk6IHN0cmluZ106IHN0cmluZ31cbiAqL1xudmFyIHJlZ2V4cHMgPSB7XG4gICAgZW1haWw6ICdbYS16QS1aXFxcXGRdW2EtekEtWlxcXFxkLV17MSwxM31bYS16QS1aXFxcXGRdQHtob3N0bmFtZX0nLFxuICAgIGhvc3RuYW1lOiAnW2EtekEtWl17MSwzM31cXFxcLlthLXpdezIsNH0nLFxuICAgIGlwdjY6ICdbYS1mXFxcXGRdezR9KDpbYS1mXFxcXGRdezR9KXs3fScsXG4gICAgdXJpOiAnW2EtekEtWl1bYS16QS1aMC05Ky0uXSonXG59O1xuLyoqXG4gKiBHZW5lcmF0ZXMgcmFuZG9taXplZCBzdHJpbmcgYmFzaW5nIG9uIGEgYnVpbHQtaW4gcmVnZXggZm9ybWF0XG4gKlxuICogQHBhcmFtIGNvcmVGb3JtYXRcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGNvcmVGb3JtYXRHZW5lcmF0b3IoY29yZUZvcm1hdCkge1xuICAgIHJldHVybiB1dGlscy5yYW5kZXhwKHJlZ2V4cHNbY29yZUZvcm1hdF0pLnJlcGxhY2UoL1xceyhcXHcrKVxcfS8sIGZ1bmN0aW9uIChtYXRjaCwga2V5KSB7XG4gICAgICAgIHJldHVybiB1dGlscy5yYW5kZXhwKHJlZ2V4cHNba2V5XSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRm9ybWF0KHZhbHVlLCBpbnZhbGlkKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gZm9ybWF0QVBJKHZhbHVlLmZvcm1hdCk7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sodmFsdWUpO1xuICAgIH1cbiAgICBzd2l0Y2ggKHZhbHVlLmZvcm1hdCkge1xuICAgICAgICBjYXNlICdkYXRlLXRpbWUnOlxuICAgICAgICAgICAgcmV0dXJuIGRhdGVUaW1lR2VuZXJhdG9yKCk7XG4gICAgICAgIGNhc2UgJ2lwdjQnOlxuICAgICAgICAgICAgcmV0dXJuIGlwdjRHZW5lcmF0b3IoKTtcbiAgICAgICAgY2FzZSAncmVnZXgnOlxuICAgICAgICAgICAgLy8gVE9ETzogZGlzY3Vzc1xuICAgICAgICAgICAgcmV0dXJuICcuKz8nO1xuICAgICAgICBjYXNlICdlbWFpbCc6XG4gICAgICAgIGNhc2UgJ2hvc3RuYW1lJzpcbiAgICAgICAgY2FzZSAnaXB2Nic6XG4gICAgICAgIGNhc2UgJ3VyaSc6XG4gICAgICAgICAgICByZXR1cm4gY29yZUZvcm1hdEdlbmVyYXRvcih2YWx1ZS5mb3JtYXQpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uQVBJKCdmYWlsT25JbnZhbGlkRm9ybWF0JykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIHJlZ2lzdHJ5IGtleSAnICsgdXRpbHMuc2hvcnQodmFsdWUuZm9ybWF0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW52YWxpZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5zdXBwb3J0ZWQgZm9ybWF0IFwiJyArIHZhbHVlLmZvcm1hdCArICdcIicpO1xuICAgIH1cbn1cbnZhciBzdHJpbmdUeXBlID0gZnVuY3Rpb24gc3RyaW5nVHlwZSh2YWx1ZSkge1xuICAgIHZhciBvdXRwdXQ7XG4gICAgdmFyIG1pbkxlbmd0aCA9IHZhbHVlLm1pbkxlbmd0aDtcbiAgICB2YXIgbWF4TGVuZ3RoID0gdmFsdWUubWF4TGVuZ3RoO1xuICAgIGlmIChvcHRpb25BUEkoJ21heExlbmd0aCcpKSB7XG4gICAgICAgIC8vIERvbid0IGFsbG93IHVzZXIgdG8gc2V0IG1heCBsZW5ndGggYWJvdmUgb3VyIG1heGltdW1cbiAgICAgICAgaWYgKG1heExlbmd0aCAmJiBtYXhMZW5ndGggPiBvcHRpb25BUEkoJ21heExlbmd0aCcpKSB7XG4gICAgICAgICAgICBtYXhMZW5ndGggPSBvcHRpb25BUEkoJ21heExlbmd0aCcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIERvbid0IGFsbG93IHVzZXIgdG8gc2V0IG1pbiBsZW5ndGggYWJvdmUgb3VyIG1heGltdW1cbiAgICAgICAgaWYgKG1pbkxlbmd0aCAmJiBtaW5MZW5ndGggPiBvcHRpb25BUEkoJ21heExlbmd0aCcpKSB7XG4gICAgICAgICAgICBtaW5MZW5ndGggPSBvcHRpb25BUEkoJ21heExlbmd0aCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh2YWx1ZS5mb3JtYXQpIHtcbiAgICAgICAgb3V0cHV0ID0gZ2VuZXJhdGVGb3JtYXQodmFsdWUsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRodW5rR2VuZXJhdG9yKG1pbkxlbmd0aCwgbWF4TGVuZ3RoKTsgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHZhbHVlLnBhdHRlcm4pIHtcbiAgICAgICAgb3V0cHV0ID0gdXRpbHMucmFuZGV4cCh2YWx1ZS5wYXR0ZXJuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG91dHB1dCA9IHRodW5rR2VuZXJhdG9yKG1pbkxlbmd0aCwgbWF4TGVuZ3RoKTtcbiAgICB9XG4gICAgd2hpbGUgKG91dHB1dC5sZW5ndGggPCBtaW5MZW5ndGgpIHtcbiAgICAgICAgb3V0cHV0ICs9IE1hdGgucmFuZG9tKCkgPiAwLjcgPyB0aHVua0dlbmVyYXRvcigpIDogdXRpbHMucmFuZGV4cCgnLisnKTtcbiAgICB9XG4gICAgaWYgKG91dHB1dC5sZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnN1YnN0cigwLCBtYXhMZW5ndGgpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufTtcblxudmFyIHR5cGVNYXAgPSB7XG4gICAgYm9vbGVhbjogYm9vbGVhblR5cGUsXG4gICAgbnVsbDogbnVsbFR5cGUsXG4gICAgYXJyYXk6IGFycmF5VHlwZSxcbiAgICBpbnRlZ2VyOiBpbnRlZ2VyVHlwZSxcbiAgICBudW1iZXI6IG51bWJlclR5cGUsXG4gICAgb2JqZWN0OiBvYmplY3RUeXBlLFxuICAgIHN0cmluZzogc3RyaW5nVHlwZVxufTtcblxuLy8gVE9ETyBwcm92aWRlIHR5cGVzXG5mdW5jdGlvbiB0cmF2ZXJzZShzY2hlbWEsIHBhdGgsIHJlc29sdmUpIHtcbiAgICBzY2hlbWEgPSByZXNvbHZlKHNjaGVtYSk7XG4gICAgaWYgKCFzY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEuZW51bSkpIHtcbiAgICAgICAgcmV0dXJuIHJhbmRvbS5waWNrKHNjaGVtYS5lbnVtKTtcbiAgICB9XG4gICAgLy8gdGh1bmtzIGNhbiByZXR1cm4gc3ViLXNjaGVtYXNcbiAgICBpZiAodHlwZW9mIHNjaGVtYS50aHVuayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdHJhdmVyc2Uoc2NoZW1hLnRodW5rKCksIHBhdGgsIHJlc29sdmUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHNjaGVtYS5nZW5lcmF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdXRpbHMudHlwZWNhc3Qoc2NoZW1hLmdlbmVyYXRlKCksIHNjaGVtYSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25BUEkoJ3VzZURlZmF1bHRWYWx1ZScpICYmICdkZWZhdWx0JyBpbiBzY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYS5kZWZhdWx0O1xuICAgIH1cbiAgICAvLyBUT0RPIHJlbW92ZSB0aGUgdWdseSBvdmVyY29tZVxuICAgIHZhciB0eXBlID0gc2NoZW1hLnR5cGU7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICAgICAgdHlwZSA9IHJhbmRvbS5waWNrKHR5cGUpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gQXR0ZW1wdCB0byBpbmZlciB0aGUgdHlwZVxuICAgICAgICB0eXBlID0gaW5mZXJUeXBlKHNjaGVtYSwgcGF0aCkgfHwgdHlwZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoIXR5cGVNYXBbdHlwZV0pIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25BUEkoJ2ZhaWxPbkludmFsaWRUeXBlcycpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFBhcnNlRXJyb3IoJ3Vua25vd24gcHJpbWl0aXZlICcgKyB1dGlscy5zaG9ydCh0eXBlKSwgcGF0aC5jb25jYXQoWyd0eXBlJ10pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25BUEkoJ2RlZmF1bHRJbnZhbGlkVHlwZVByb2R1Y3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0aWxzLmNsZWFuKHR5cGVNYXBbdHlwZV0oc2NoZW1hLCBwYXRoLCByZXNvbHZlLCB0cmF2ZXJzZSksIG51bGwsIHNjaGVtYS5yZXF1aXJlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZS5wYXRoID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcihlLm1lc3NhZ2UsIHBhdGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBjb3B5ID0ge307XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hKSkge1xuICAgICAgICBjb3B5ID0gW107XG4gICAgfVxuICAgIGZvciAodmFyIHByb3AgaW4gc2NoZW1hKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hW3Byb3BdID09PSAnb2JqZWN0JyAmJiBwcm9wICE9PSAnZGVmaW5pdGlvbnMnKSB7XG4gICAgICAgICAgICBjb3B5W3Byb3BdID0gdHJhdmVyc2Uoc2NoZW1hW3Byb3BdLCBwYXRoLmNvbmNhdChbcHJvcF0pLCByZXNvbHZlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvcHlbcHJvcF0gPSBzY2hlbWFbcHJvcF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIGlzS2V5KHByb3ApIHtcbiAgICByZXR1cm4gcHJvcCA9PT0gJ2VudW0nIHx8IHByb3AgPT09ICdkZWZhdWx0JyB8fCBwcm9wID09PSAncmVxdWlyZWQnIHx8IHByb3AgPT09ICdkZWZpbml0aW9ucyc7XG59XG4vLyBUT0RPIHByb3ZpZGUgdHlwZXNcbmZ1bmN0aW9uIHJ1bihyZWZzLCBzY2hlbWEsIGNvbnRhaW5lcikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB0cmF2ZXJzZShzY2hlbWEsIFtdLCBmdW5jdGlvbiByZWR1Y2Uoc3ViLCBtYXhSZWR1Y2VEZXB0aCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXhSZWR1Y2VEZXB0aCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBtYXhSZWR1Y2VEZXB0aCA9IHJhbmRvbS5udW1iZXIoMSwgMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXN1Yikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY2xlYW51cFxuICAgICAgICAgICAgaWYgKHN1Yi5pZCAmJiB0eXBlb2Ygc3ViLmlkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBzdWIuaWQ7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHN1Yi4kc2NoZW1hO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdWIuJHJlZiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3ViLiRyZWYuaW5kZXhPZignIy8nKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlZiA9IGRlcmVmLnV0aWwuZmluZEJ5UmVmKHN1Yi4kcmVmLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVmZXJlbmNlIG5vdCBmb3VuZDogJyArIHN1Yi4kcmVmKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVmO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBqdXN0IHJlbW92ZSB0aGUgcmVmZXJlbmNlXG4gICAgICAgICAgICAgICAgZGVsZXRlIHN1Yi4kcmVmO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzdWIuYWxsT2YpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNjaGVtYXMgPSBzdWIuYWxsT2Y7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHN1Yi5hbGxPZjtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIHRoZSBvbmx5IGNhc2Ugd2hlcmUgYWxsIHN1Yi1zY2hlbWFzXG4gICAgICAgICAgICAgICAgLy8gbXVzdCBiZSByZXNvbHZlZCBiZWZvcmUgYW55IG1lcmdlXG4gICAgICAgICAgICAgICAgc2NoZW1hcy5mb3JFYWNoKGZ1bmN0aW9uIChzdWJTY2hlbWEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9zdWIgPSByZWR1Y2Uoc3ViU2NoZW1hLCBtYXhSZWR1Y2VEZXB0aCArIDEpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIGdpdmVuIHRodW5rcyBpZiBwcmVzZW50XG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLm1lcmdlKHN1YiwgdHlwZW9mIF9zdWIudGh1bmsgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgICAgID8gX3N1Yi50aHVuaygpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IF9zdWIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3ViLm9uZU9mIHx8IHN1Yi5hbnlPZikpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWl4ID0gc3ViLm9uZU9mIHx8IHN1Yi5hbnlPZjtcbiAgICAgICAgICAgICAgICBkZWxldGUgc3ViLmFueU9mO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBzdWIub25lT2Y7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdGh1bms6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3B5ID0gdXRpbHMubWVyZ2Uoe30sIHN1Yik7XG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5tZXJnZShjb3B5LCByYW5kb20ucGljayhtaXgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb3B5O1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHN1Yikge1xuICAgICAgICAgICAgICAgIGlmICgoQXJyYXkuaXNBcnJheShzdWJbcHJvcF0pIHx8IHR5cGVvZiBzdWJbcHJvcF0gPT09ICdvYmplY3QnKSAmJiAhaXNLZXkocHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ViW3Byb3BdID0gcmVkdWNlKHN1Yltwcm9wXSwgbWF4UmVkdWNlRGVwdGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb250YWluZXIud3JhcChzdWIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGUucGF0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGUubWVzc2FnZSArICcgaW4gJyArICcvJyArIGUucGF0aC5qb2luKCcvJykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxudmFyIGNvbnRhaW5lciA9IG5ldyBDb250YWluZXIoKTtcbmZ1bmN0aW9uIGdldFJlZnMocmVmcykge1xuICAgIHZhciAkcmVmcyA9IHt9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnMpKSB7XG4gICAgICAgIHJlZnMubWFwKGRlcmVmLnV0aWwubm9ybWFsaXplU2NoZW1hKS5mb3JFYWNoKGZ1bmN0aW9uIChzY2hlbWEpIHtcbiAgICAgICAgICAgICRyZWZzW3NjaGVtYS5pZF0gPSBzY2hlbWE7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgJHJlZnMgPSByZWZzIHx8IHt9O1xuICAgIH1cbiAgICByZXR1cm4gJHJlZnM7XG59XG52YXIganNmID0gZnVuY3Rpb24gKHNjaGVtYSwgcmVmcykge1xuICAgIHZhciAkID0gZGVyZWYoKTtcbiAgICB2YXIgJHJlZnMgPSBnZXRSZWZzKHJlZnMpO1xuICAgIHJldHVybiBydW4oJHJlZnMsICQoc2NoZW1hLCAkcmVmcywgdHJ1ZSksIGNvbnRhaW5lcik7XG59O1xuanNmLnJlc29sdmUgPSBmdW5jdGlvbiAoc2NoZW1hLCByZWZzLCBjd2QpIHtcbiAgICBpZiAodHlwZW9mIHJlZnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGN3ZCA9IHJlZnM7XG4gICAgICAgIHJlZnMgPSB7fTtcbiAgICB9XG4gICAgLy8gbm9ybWFsaXplIGJhc2VkaXIgKGJyb3dzZXIgYXdhcmUpXG4gICAgY3dkID0gY3dkIHx8ICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgPyBwcm9jZXNzLmN3ZCgpIDogJycpO1xuICAgIGN3ZCA9IGN3ZC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJztcbiAgICB2YXIgJHJlZnMgPSBnZXRSZWZzKHJlZnMpO1xuICAgIC8vIGlkZW50aWNhbCBzZXR1cCBhcyBqc29uLXNjaGVtYS1zZXF1ZWxpemVyXG4gICAgdmFyIGZpeGVkUmVmcyA9IHtcbiAgICAgICAgb3JkZXI6IDMwMCxcbiAgICAgICAgY2FuUmVhZDogdHJ1ZSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gKGZpbGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBkZXJlZi51dGlsLmZpbmRCeVJlZihjd2QgIT09ICcvJ1xuICAgICAgICAgICAgICAgID8gZmlsZS51cmwucmVwbGFjZShjd2QsICcnKVxuICAgICAgICAgICAgICAgIDogZmlsZS51cmwsICRyZWZzKSk7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gJFJlZlBhcnNlclxuICAgICAgICAuZGVyZWZlcmVuY2UoY3dkLCBzY2hlbWEsIHtcbiAgICAgICAgcmVzb2x2ZTogeyBmaXhlZFJlZnM6IGZpeGVkUmVmcyB9LFxuICAgICAgICBkZXJlZmVyZW5jZToge1xuICAgICAgICAgICAgY2lyY3VsYXI6ICdpZ25vcmUnLFxuICAgICAgICB9LFxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHN1YikgeyByZXR1cm4ganNmKHN1YiwgcmVmcyk7IH0pO1xufTtcbmpzZi51dGlscyA9IHV0aWxzO1xuanNmLmZvcm1hdCA9IGZvcm1hdEFQSTtcbmpzZi5vcHRpb24gPSBvcHRpb25BUEk7XG4vLyBidWlsdC1pbiBzdXBwb3J0XG5jb250YWluZXIuZGVmaW5lKCdwYXR0ZXJuJywgdXRpbHMucmFuZGV4cCk7XG4vLyByZXR1cm5zIGl0c2VsZiBmb3IgY2hhaW5pbmdcbmpzZi5leHRlbmQgPSBmdW5jdGlvbiAobmFtZSwgY2IpIHtcbiAgICBjb250YWluZXIuZXh0ZW5kKG5hbWUsIGNiKTtcbiAgICByZXR1cm4ganNmO1xufTtcbmpzZi5kZWZpbmUgPSBmdW5jdGlvbiAobmFtZSwgY2IpIHtcbiAgICBjb250YWluZXIuZGVmaW5lKG5hbWUsIGNiKTtcbiAgICByZXR1cm4ganNmO1xufTtcbmpzZi5sb2NhdGUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBjb250YWluZXIuZ2V0KG5hbWUpO1xufTtcbnZhciBWRVJTSU9OPVwiMC41LjAtcmM5XCI7XG5qc2YudmVyc2lvbiA9IFZFUlNJT047XG5cbm1vZHVsZS5leHBvcnRzID0ganNmO1xuIiwiLyoqICFcbiAqIEpTT04gU2NoZW1hICRSZWYgUGFyc2VyIHYzLjMuMVxuICpcbiAqIEBsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9CaWdzdGlja0NhcnBldC9qc29uLXNjaGVtYS1yZWYtcGFyc2VyXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgJFJlZiAgICA9IHJlcXVpcmUoJy4vcmVmJyksXG4gICAgUG9pbnRlciA9IHJlcXVpcmUoJy4vcG9pbnRlcicpLFxuICAgIGRlYnVnICAgPSByZXF1aXJlKCcuL3V0aWwvZGVidWcnKSxcbiAgICB1cmwgICAgID0gcmVxdWlyZSgnLi91dGlsL3VybCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJ1bmRsZTtcblxuLyoqXG4gKiBCdW5kbGVzIGFsbCBleHRlcm5hbCBKU09OIHJlZmVyZW5jZXMgaW50byB0aGUgbWFpbiBKU09OIHNjaGVtYSwgdGh1cyByZXN1bHRpbmcgaW4gYSBzY2hlbWEgdGhhdFxuICogb25seSBoYXMgKmludGVybmFsKiByZWZlcmVuY2VzLCBub3QgYW55ICpleHRlcm5hbCogcmVmZXJlbmNlcy5cbiAqIFRoaXMgbWV0aG9kIG11dGF0ZXMgdGhlIEpTT04gc2NoZW1hIG9iamVjdCwgYWRkaW5nIG5ldyByZWZlcmVuY2VzIGFuZCByZS1tYXBwaW5nIGV4aXN0aW5nIG9uZXMuXG4gKlxuICogQHBhcmFtIHskUmVmUGFyc2VyfSBwYXJzZXJcbiAqIEBwYXJhbSB7JFJlZlBhcnNlck9wdGlvbnN9IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gYnVuZGxlKHBhcnNlciwgb3B0aW9ucykge1xuICBkZWJ1ZygnQnVuZGxpbmcgJHJlZiBwb2ludGVycyBpbiAlcycsIHBhcnNlci4kcmVmcy5fcm9vdCRSZWYucGF0aCk7XG5cbiAgLy8gQnVpbGQgYW4gaW52ZW50b3J5IG9mIGFsbCAkcmVmIHBvaW50ZXJzIGluIHRoZSBKU09OIFNjaGVtYVxuICB2YXIgaW52ZW50b3J5ID0gW107XG4gIGNyYXdsKHBhcnNlciwgJ3NjaGVtYScsIHBhcnNlci4kcmVmcy5fcm9vdCRSZWYucGF0aCArICcjJywgJyMnLCBpbnZlbnRvcnksIHBhcnNlci4kcmVmcywgb3B0aW9ucyk7XG5cbiAgLy8gUmVtYXAgYWxsICRyZWYgcG9pbnRlcnNcbiAgcmVtYXAoaW52ZW50b3J5KTtcbn1cblxuLyoqXG4gKiBSZWN1cnNpdmVseSBjcmF3bHMgdGhlIGdpdmVuIHZhbHVlLCBhbmQgaW52ZW50b3JpZXMgYWxsIEpTT04gcmVmZXJlbmNlcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyZW50IC0gVGhlIG9iamVjdCBjb250YWluaW5nIHRoZSB2YWx1ZSB0byBjcmF3bC4gSWYgdGhlIHZhbHVlIGlzIG5vdCBhbiBvYmplY3Qgb3IgYXJyYXksIGl0IHdpbGwgYmUgaWdub3JlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUgcHJvcGVydHkga2V5IG9mIGBwYXJlbnRgIHRvIGJlIGNyYXdsZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIGZ1bGwgcGF0aCBvZiB0aGUgcHJvcGVydHkgYmVpbmcgY3Jhd2xlZCwgcG9zc2libHkgd2l0aCBhIEpTT04gUG9pbnRlciBpbiB0aGUgaGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhGcm9tUm9vdCAtIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSBiZWluZyBjcmF3bGVkLCBmcm9tIHRoZSBzY2hlbWEgcm9vdFxuICogQHBhcmFtIHtvYmplY3RbXX0gaW52ZW50b3J5IC0gQW4gYXJyYXkgb2YgYWxyZWFkeS1pbnZlbnRvcmllZCAkcmVmIHBvaW50ZXJzXG4gKiBAcGFyYW0geyRSZWZzfSAkcmVmc1xuICogQHBhcmFtIHskUmVmUGFyc2VyT3B0aW9uc30gb3B0aW9uc1xuICovXG5mdW5jdGlvbiBjcmF3bChwYXJlbnQsIGtleSwgcGF0aCwgcGF0aEZyb21Sb290LCBpbnZlbnRvcnksICRyZWZzLCBvcHRpb25zKSB7XG4gIHZhciBvYmogPSBrZXkgPT09IG51bGwgPyBwYXJlbnQgOiBwYXJlbnRba2V5XTtcblxuICBpZiAob2JqICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKCRSZWYuaXNBbGxvd2VkJFJlZihvYmopKSB7XG4gICAgICBpbnZlbnRvcnkkUmVmKHBhcmVudCwga2V5LCBwYXRoLCBwYXRoRnJvbVJvb3QsIGludmVudG9yeSwgJHJlZnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcblxuICAgICAgLy8gTW9zdCBwZW9wbGUgd2lsbCBleHBlY3QgcmVmZXJlbmNlcyB0byBiZSBidW5kbGVkIGludG8gdGhlIHRoZSBcImRlZmluaXRpb25zXCIgcHJvcGVydHksXG4gICAgICAvLyBzbyB3ZSBhbHdheXMgY3Jhd2wgdGhhdCBwcm9wZXJ0eSBmaXJzdCwgaWYgaXQgZXhpc3RzLlxuICAgICAgdmFyIGRlZnMgPSBrZXlzLmluZGV4T2YoJ2RlZmluaXRpb25zJyk7XG4gICAgICBpZiAoZGVmcyA+IDApIHtcbiAgICAgICAga2V5cy5zcGxpY2UoMCwgMCwga2V5cy5zcGxpY2UoZGVmcywgMSlbMF0pO1xuICAgICAgfVxuXG4gICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHZhciBrZXlQYXRoID0gUG9pbnRlci5qb2luKHBhdGgsIGtleSk7XG4gICAgICAgIHZhciBrZXlQYXRoRnJvbVJvb3QgPSBQb2ludGVyLmpvaW4ocGF0aEZyb21Sb290LCBrZXkpO1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmpba2V5XTtcblxuICAgICAgICBpZiAoJFJlZi5pc0FsbG93ZWQkUmVmKHZhbHVlKSkge1xuICAgICAgICAgIGludmVudG9yeSRSZWYob2JqLCBrZXksIHBhdGgsIGtleVBhdGhGcm9tUm9vdCwgaW52ZW50b3J5LCAkcmVmcywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgY3Jhd2wob2JqLCBrZXksIGtleVBhdGgsIGtleVBhdGhGcm9tUm9vdCwgaW52ZW50b3J5LCAkcmVmcywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEludmVudG9yaWVzIHRoZSBnaXZlbiBKU09OIFJlZmVyZW5jZSAoaS5lLiByZWNvcmRzIGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IGl0IHNvIHdlIGNhblxuICogb3B0aW1pemUgYWxsICRyZWZzIGluIHRoZSBzY2hlbWEpLCBhbmQgdGhlbiBjcmF3bHMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSAkcmVmUGFyZW50IC0gVGhlIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgSlNPTiBSZWZlcmVuY2UgYXMgb25lIG9mIGl0cyBrZXlzXG4gKiBAcGFyYW0ge3N0cmluZ30gJHJlZktleSAtIFRoZSBrZXkgaW4gYCRyZWZQYXJlbnRgIHRoYXQgaXMgYSBKU09OIFJlZmVyZW5jZVxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgZnVsbCBwYXRoIG9mIHRoZSBKU09OIFJlZmVyZW5jZSBhdCBgJHJlZktleWAsIHBvc3NpYmx5IHdpdGggYSBKU09OIFBvaW50ZXIgaW4gdGhlIGhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoRnJvbVJvb3QgLSBUaGUgcGF0aCBvZiB0aGUgSlNPTiBSZWZlcmVuY2UgYXQgYCRyZWZLZXlgLCBmcm9tIHRoZSBzY2hlbWEgcm9vdFxuICogQHBhcmFtIHtvYmplY3RbXX0gaW52ZW50b3J5IC0gQW4gYXJyYXkgb2YgYWxyZWFkeS1pbnZlbnRvcmllZCAkcmVmIHBvaW50ZXJzXG4gKiBAcGFyYW0geyRSZWZzfSAkcmVmc1xuICogQHBhcmFtIHskUmVmUGFyc2VyT3B0aW9uc30gb3B0aW9uc1xuICovXG5mdW5jdGlvbiBpbnZlbnRvcnkkUmVmKCRyZWZQYXJlbnQsICRyZWZLZXksIHBhdGgsIHBhdGhGcm9tUm9vdCwgaW52ZW50b3J5LCAkcmVmcywgb3B0aW9ucykge1xuICBpZiAoaW52ZW50b3J5LnNvbWUoZnVuY3Rpb24oaSkgeyByZXR1cm4gaS5wYXJlbnQgPT09ICRyZWZQYXJlbnQgJiYgaS5rZXkgPT09ICRyZWZLZXk7IH0pKSB7XG4gICAgLy8gVGhpcyAkUmVmIGhhcyBhbHJlYWR5IGJlZW4gaW52ZW50b3JpZWQsIHNvIHdlIGRvbid0IG5lZWQgdG8gcHJvY2VzcyBpdCBhZ2FpblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciAkcmVmID0gJHJlZktleSA9PT0gbnVsbCA/ICRyZWZQYXJlbnQgOiAkcmVmUGFyZW50WyRyZWZLZXldO1xuICB2YXIgJHJlZlBhdGggPSB1cmwucmVzb2x2ZShwYXRoLCAkcmVmLiRyZWYpO1xuICB2YXIgcG9pbnRlciA9ICRyZWZzLl9yZXNvbHZlKCRyZWZQYXRoLCBvcHRpb25zKTtcbiAgdmFyIGRlcHRoID0gUG9pbnRlci5wYXJzZShwYXRoRnJvbVJvb3QpLmxlbmd0aDtcbiAgdmFyIGZpbGUgPSB1cmwuc3RyaXBIYXNoKHBvaW50ZXIucGF0aCk7XG4gIHZhciBoYXNoID0gdXJsLmdldEhhc2gocG9pbnRlci5wYXRoKTtcbiAgdmFyIGV4dGVybmFsID0gZmlsZSAhPT0gJHJlZnMuX3Jvb3QkUmVmLnBhdGg7XG4gIHZhciBleHRlbmRlZCA9ICRSZWYuaXNFeHRlbmRlZCRSZWYoJHJlZik7XG5cbiAgaW52ZW50b3J5LnB1c2goe1xuICAgICRyZWY6ICRyZWYsICAgICAgICAgICAgICAgICAgIC8vIFRoZSBKU09OIFJlZmVyZW5jZSAoZS5nLiB7JHJlZjogc3RyaW5nfSlcbiAgICBwYXJlbnQ6ICRyZWZQYXJlbnQsICAgICAgICAgICAvLyBUaGUgb2JqZWN0IHRoYXQgY29udGFpbnMgdGhpcyAkcmVmIHBvaW50ZXJcbiAgICBrZXk6ICRyZWZLZXksICAgICAgICAgICAgICAgICAvLyBUaGUga2V5IGluIGBwYXJlbnRgIHRoYXQgaXMgdGhlICRyZWYgcG9pbnRlclxuICAgIHBhdGhGcm9tUm9vdDogcGF0aEZyb21Sb290LCAgIC8vIFRoZSBwYXRoIHRvIHRoZSAkcmVmIHBvaW50ZXIsIGZyb20gdGhlIEpTT04gU2NoZW1hIHJvb3RcbiAgICBkZXB0aDogZGVwdGgsICAgICAgICAgICAgICAgICAvLyBIb3cgZmFyIGZyb20gdGhlIEpTT04gU2NoZW1hIHJvb3QgaXMgdGhpcyAkcmVmIHBvaW50ZXI/XG4gICAgZmlsZTogZmlsZSwgICAgICAgICAgICAgICAgICAgLy8gVGhlIGZpbGUgdGhhdCB0aGUgJHJlZiBwb2ludGVyIHJlc29sdmVzIHRvXG4gICAgaGFzaDogaGFzaCwgICAgICAgICAgICAgICAgICAgLy8gVGhlIGhhc2ggd2l0aGluIGBmaWxlYCB0aGF0IHRoZSAkcmVmIHBvaW50ZXIgcmVzb2x2ZXMgdG9cbiAgICB2YWx1ZTogcG9pbnRlci52YWx1ZSwgICAgICAgICAvLyBUaGUgcmVzb2x2ZWQgdmFsdWUgb2YgdGhlICRyZWYgcG9pbnRlclxuICAgIGNpcmN1bGFyOiBwb2ludGVyLmNpcmN1bGFyLCAgIC8vIElzIHRoaXMgJHJlZiBwb2ludGVyIERJUkVDVExZIGNpcmN1bGFyPyAoaS5lLiBpdCByZWZlcmVuY2VzIGl0c2VsZilcbiAgICBleHRlbmRlZDogZXh0ZW5kZWQsICAgICAgICAgICAvLyBEb2VzIHRoaXMgJHJlZiBleHRlbmQgaXRzIHJlc29sdmVkIHZhbHVlPyAoaS5lLiBpdCBoYXMgZXh0cmEgcHJvcGVydGllcywgaW4gYWRkaXRpb24gdG8gXCIkcmVmXCIpXG4gICAgZXh0ZXJuYWw6IGV4dGVybmFsICAgICAgICAgICAgLy8gRG9lcyB0aGlzICRyZWYgcG9pbnRlciBwb2ludCB0byBhIGZpbGUgb3RoZXIgdGhhbiB0aGUgbWFpbiBKU09OIFNjaGVtYSBmaWxlP1xuICB9KTtcblxuICAvLyBSZWN1cnNpdmVseSBjcmF3bCB0aGUgcmVzb2x2ZWQgdmFsdWVcbiAgY3Jhd2wocG9pbnRlci52YWx1ZSwgbnVsbCwgcG9pbnRlci5wYXRoLCBwYXRoRnJvbVJvb3QsIGludmVudG9yeSwgJHJlZnMsIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIFJlLW1hcHMgZXZlcnkgJHJlZiBwb2ludGVyLCBzbyB0aGF0IHRoZXkncmUgYWxsIHJlbGF0aXZlIHRvIHRoZSByb290IG9mIHRoZSBKU09OIFNjaGVtYS5cbiAqIEVhY2ggcmVmZXJlbmNlZCB2YWx1ZSBpcyBkZXJlZmVyZW5jZWQgRVhBQ1RMWSBPTkNFLiAgQWxsIHN1YnNlcXVlbnQgcmVmZXJlbmNlcyB0byB0aGUgc2FtZVxuICogdmFsdWUgYXJlIHJlLW1hcHBlZCB0byBwb2ludCB0byB0aGUgZmlyc3QgcmVmZXJlbmNlLlxuICpcbiAqIEBleGFtcGxlOlxuICogIHtcbiAqICAgIGZpcnN0OiB7ICRyZWY6IHNvbWVmaWxlLmpzb24jL3NvbWUvcGFydCB9LFxuICogICAgc2Vjb25kOiB7ICRyZWY6IHNvbWVmaWxlLmpzb24jL2Fub3RoZXIvcGFydCB9LFxuICogICAgdGhpcmQ6IHsgJHJlZjogc29tZWZpbGUuanNvbiB9LFxuICogICAgZm91cnRoOiB7ICRyZWY6IHNvbWVmaWxlLmpzb24jL3NvbWUvcGFydC9zdWIvcGFydCB9XG4gKiAgfVxuICpcbiAqIEluIHRoaXMgZXhhbXBsZSwgdGhlcmUgYXJlIGZvdXIgcmVmZXJlbmNlcyB0byB0aGUgc2FtZSBmaWxlLCBidXQgc2luY2UgdGhlIHRoaXJkIHJlZmVyZW5jZSBwb2ludHNcbiAqIHRvIHRoZSBFTlRJUkUgZmlsZSwgdGhhdCdzIHRoZSBvbmx5IG9uZSB3ZSBuZWVkIHRvIGRlcmVmZXJlbmNlLiAgVGhlIG90aGVyIHRocmVlIGNhbiBqdXN0IGJlXG4gKiByZW1hcHBlZCB0byBwb2ludCBpbnNpZGUgdGhlIHRoaXJkIG9uZS5cbiAqXG4gKiBPbiB0aGUgb3RoZXIgaGFuZCwgaWYgdGhlIHRoaXJkIHJlZmVyZW5jZSBESUROJ1QgZXhpc3QsIHRoZW4gdGhlIGZpcnN0IGFuZCBzZWNvbmQgd291bGQgYm90aCBuZWVkXG4gKiB0byBiZSBkZXJlZmVyZW5jZWQsIHNpbmNlIHRoZXkgcG9pbnQgdG8gZGlmZmVyZW50IHBhcnRzIG9mIHRoZSBmaWxlLiBUaGUgZm91cnRoIHJlZmVyZW5jZSBkb2VzIE5PVFxuICogbmVlZCB0byBiZSBkZXJlZmVyZW5jZWQsIGJlY2F1c2UgaXQgY2FuIGJlIHJlbWFwcGVkIHRvIHBvaW50IGluc2lkZSB0aGUgZmlyc3Qgb25lLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0W119IGludmVudG9yeVxuICovXG5mdW5jdGlvbiByZW1hcChpbnZlbnRvcnkpIHtcbiAgLy8gR3JvdXAgJiBzb3J0IGFsbCB0aGUgJHJlZiBwb2ludGVycywgc28gdGhleSdyZSBpbiB0aGUgb3JkZXIgdGhhdCB3ZSBuZWVkIHRvIGRlcmVmZXJlbmNlL3JlbWFwIHRoZW1cbiAgaW52ZW50b3J5LnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgIGlmIChhLmZpbGUgIT09IGIuZmlsZSkge1xuICAgICAgcmV0dXJuIGEuZmlsZSA8IGIuZmlsZSA/IC0xIDogKzE7ICAgLy8gR3JvdXAgYWxsIHRoZSAkcmVmcyB0aGF0IHBvaW50IHRvIHRoZSBzYW1lIGZpbGVcbiAgICB9XG4gICAgZWxzZSBpZiAoYS5oYXNoICE9PSBiLmhhc2gpIHtcbiAgICAgIHJldHVybiBhLmhhc2ggPCBiLmhhc2ggPyAtMSA6ICsxOyAgIC8vIEdyb3VwIGFsbCB0aGUgJHJlZnMgdGhhdCBwb2ludCB0byB0aGUgc2FtZSBwYXJ0IG9mIHRoZSBmaWxlXG4gICAgfVxuICAgIGVsc2UgaWYgKGEuY2lyY3VsYXIgIT09IGIuY2lyY3VsYXIpIHtcbiAgICAgIHJldHVybiBhLmNpcmN1bGFyID8gLTEgOiArMTsgICAgICAgIC8vIElmIHRoZSAkcmVmIHBvaW50cyB0byBpdHNlbGYsIHRoZW4gc29ydCBpdCBoaWdoZXIgdGhhbiBvdGhlciAkcmVmcyB0aGF0IHBvaW50IHRvIHRoaXMgJHJlZlxuICAgIH1cbiAgICBlbHNlIGlmIChhLmV4dGVuZGVkICE9PSBiLmV4dGVuZGVkKSB7XG4gICAgICByZXR1cm4gYS5leHRlbmRlZCA/ICsxIDogLTE7ICAgICAgICAvLyBJZiB0aGUgJHJlZiBleHRlbmRzIHRoZSByZXNvbHZlZCB2YWx1ZSwgdGhlbiBzb3J0IGl0IGxvd2VyIHRoYW4gb3RoZXIgJHJlZnMgdGhhdCBkb24ndCBleHRlbmQgdGhlIHZhbHVlXG4gICAgfVxuICAgIGVsc2UgaWYgKGEuZGVwdGggIT09IGIuZGVwdGgpIHtcbiAgICAgIHJldHVybiBhLmRlcHRoIC0gYi5kZXB0aDsgICAgICAgICAgIC8vIFNvcnQgJHJlZnMgYnkgaG93IGNsb3NlIHRoZXkgYXJlIHRvIHRoZSBKU09OIFNjaGVtYSByb290XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gSWYgYWxsIGVsc2UgaXMgZXF1YWwsIHVzZSB0aGUgJHJlZiB0aGF0J3MgaW4gdGhlIFwiZGVmaW5pdGlvbnNcIiBwcm9wZXJ0eVxuICAgICAgcmV0dXJuIGIucGF0aEZyb21Sb290Lmxhc3RJbmRleE9mKCcvZGVmaW5pdGlvbnMnKSAtIGEucGF0aEZyb21Sb290Lmxhc3RJbmRleE9mKCcvZGVmaW5pdGlvbnMnKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBmaWxlLCBoYXNoLCBwYXRoRnJvbVJvb3Q7XG4gIGludmVudG9yeS5mb3JFYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICBkZWJ1ZygnUmUtbWFwcGluZyAkcmVmIHBvaW50ZXIgXCIlc1wiIGF0ICVzJywgaS4kcmVmLiRyZWYsIGkucGF0aEZyb21Sb290KTtcblxuICAgIGlmICghaS5leHRlcm5hbCkge1xuICAgICAgLy8gVGhpcyAkcmVmIGFscmVhZHkgcmVzb2x2ZXMgdG8gdGhlIG1haW4gSlNPTiBTY2hlbWEgZmlsZVxuICAgICAgaS4kcmVmLiRyZWYgPSBpLmhhc2g7XG4gICAgfVxuICAgIGVsc2UgaWYgKGkuZmlsZSA9PT0gZmlsZSAmJiBpLmhhc2ggPT09IGhhc2gpIHtcbiAgICAgIC8vIFRoaXMgJHJlZiBwb2ludHMgdG8gdGhlIHNhbWUgdmFsdWUgYXMgdGhlIHByZXZvdXMgJHJlZiwgc28gcmVtYXAgaXQgdG8gdGhlIHNhbWUgcGF0aFxuICAgICAgaS4kcmVmLiRyZWYgPSBwYXRoRnJvbVJvb3Q7XG4gICAgfVxuICAgIGVsc2UgaWYgKGkuZmlsZSA9PT0gZmlsZSAmJiBpLmhhc2guaW5kZXhPZihoYXNoICsgJy8nKSA9PT0gMCkge1xuICAgICAgLy8gVGhpcyAkcmVmIHBvaW50cyB0byB0aGUgYSBzdWItdmFsdWUgYXMgdGhlIHByZXZvdXMgJHJlZiwgc28gcmVtYXAgaXQgYmVuZWF0aCB0aGF0IHBhdGhcbiAgICAgIGkuJHJlZi4kcmVmID0gUG9pbnRlci5qb2luKHBhdGhGcm9tUm9vdCwgUG9pbnRlci5wYXJzZShpLmhhc2gpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBXZSd2ZSBtb3ZlZCB0byBhIG5ldyBmaWxlIG9yIG5ldyBoYXNoXG4gICAgICBmaWxlID0gaS5maWxlO1xuICAgICAgaGFzaCA9IGkuaGFzaDtcbiAgICAgIHBhdGhGcm9tUm9vdCA9IGkucGF0aEZyb21Sb290O1xuXG4gICAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCAkcmVmIHRvIHBvaW50IHRvIHRoaXMgdmFsdWUsIHNvIGRlcmVmZXJlbmNlIHRoZSB2YWx1ZS5cbiAgICAgIC8vIEFueSBvdGhlciAkcmVmcyB0aGF0IHBvaW50IHRvIHRoZSBzYW1lIHZhbHVlIHdpbGwgcG9pbnQgdG8gdGhpcyAkcmVmIGluc3RlYWRcbiAgICAgIGkuJHJlZiA9IGkucGFyZW50W2kua2V5XSA9ICRSZWYuZGVyZWZlcmVuY2UoaS4kcmVmLCBpLnZhbHVlKTtcblxuICAgICAgaWYgKGkuY2lyY3VsYXIpIHtcbiAgICAgICAgLy8gVGhpcyAkcmVmIHBvaW50cyB0byBpdHNlbGZcbiAgICAgICAgaS4kcmVmLiRyZWYgPSBpLnBhdGhGcm9tUm9vdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZWJ1ZygnICAgIG5ldyB2YWx1ZTogJXMnLCAoaS4kcmVmICYmIGkuJHJlZi4kcmVmKSA/IGkuJHJlZi4kcmVmIDogJ1tvYmplY3QgT2JqZWN0XScpO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRSZWYgICAgPSByZXF1aXJlKCcuL3JlZicpLFxuICAgIFBvaW50ZXIgPSByZXF1aXJlKCcuL3BvaW50ZXInKSxcbiAgICBvbm8gICAgID0gcmVxdWlyZSgnb25vJyksXG4gICAgZGVidWcgICA9IHJlcXVpcmUoJy4vdXRpbC9kZWJ1ZycpLFxuICAgIHVybCAgICAgPSByZXF1aXJlKCcuL3V0aWwvdXJsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVyZWZlcmVuY2U7XG5cbi8qKlxuICogQ3Jhd2xzIHRoZSBKU09OIHNjaGVtYSwgZmluZHMgYWxsIEpTT04gcmVmZXJlbmNlcywgYW5kIGRlcmVmZXJlbmNlcyB0aGVtLlxuICogVGhpcyBtZXRob2QgbXV0YXRlcyB0aGUgSlNPTiBzY2hlbWEgb2JqZWN0LCByZXBsYWNpbmcgSlNPTiByZWZlcmVuY2VzIHdpdGggdGhlaXIgcmVzb2x2ZWQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHskUmVmUGFyc2VyfSBwYXJzZXJcbiAqIEBwYXJhbSB7JFJlZlBhcnNlck9wdGlvbnN9IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gZGVyZWZlcmVuY2UocGFyc2VyLCBvcHRpb25zKSB7XG4gIGRlYnVnKCdEZXJlZmVyZW5jaW5nICRyZWYgcG9pbnRlcnMgaW4gJXMnLCBwYXJzZXIuJHJlZnMuX3Jvb3QkUmVmLnBhdGgpO1xuICB2YXIgZGVyZWZlcmVuY2VkID0gY3Jhd2wocGFyc2VyLnNjaGVtYSwgcGFyc2VyLiRyZWZzLl9yb290JFJlZi5wYXRoLCAnIycsIFtdLCBwYXJzZXIuJHJlZnMsIG9wdGlvbnMpO1xuICBwYXJzZXIuJHJlZnMuY2lyY3VsYXIgPSBkZXJlZmVyZW5jZWQuY2lyY3VsYXI7XG4gIHBhcnNlci5zY2hlbWEgPSBkZXJlZmVyZW5jZWQudmFsdWU7XG59XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgY3Jhd2xzIHRoZSBnaXZlbiB2YWx1ZSwgYW5kIGRlcmVmZXJlbmNlcyBhbnkgSlNPTiByZWZlcmVuY2VzLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqIC0gVGhlIHZhbHVlIHRvIGNyYXdsLiBJZiBpdCdzIG5vdCBhbiBvYmplY3Qgb3IgYXJyYXksIGl0IHdpbGwgYmUgaWdub3JlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIGZ1bGwgcGF0aCBvZiBgb2JqYCwgcG9zc2libHkgd2l0aCBhIEpTT04gUG9pbnRlciBpbiB0aGUgaGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhGcm9tUm9vdCAtIFRoZSBwYXRoIG9mIGBvYmpgIGZyb20gdGhlIHNjaGVtYSByb290XG4gKiBAcGFyYW0ge29iamVjdFtdfSBwYXJlbnRzIC0gQW4gYXJyYXkgb2YgdGhlIHBhcmVudCBvYmplY3RzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gZGVyZWZlcmVuY2VkXG4gKiBAcGFyYW0geyRSZWZzfSAkcmVmc1xuICogQHBhcmFtIHskUmVmUGFyc2VyT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMge3t2YWx1ZTogb2JqZWN0LCBjaXJjdWxhcjogYm9vbGVhbn19XG4gKi9cbmZ1bmN0aW9uIGNyYXdsKG9iaiwgcGF0aCwgcGF0aEZyb21Sb290LCBwYXJlbnRzLCAkcmVmcywgb3B0aW9ucykge1xuICB2YXIgZGVyZWZlcmVuY2VkO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHZhbHVlOiBvYmosXG4gICAgY2lyY3VsYXI6IGZhbHNlXG4gIH07XG5cbiAgaWYgKG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgIHBhcmVudHMucHVzaChvYmopO1xuXG4gICAgaWYgKCRSZWYuaXNBbGxvd2VkJFJlZihvYmosIG9wdGlvbnMpKSB7XG4gICAgICBkZXJlZmVyZW5jZWQgPSBkZXJlZmVyZW5jZSRSZWYob2JqLCBwYXRoLCBwYXRoRnJvbVJvb3QsIHBhcmVudHMsICRyZWZzLCBvcHRpb25zKTtcbiAgICAgIHJlc3VsdC5jaXJjdWxhciA9IGRlcmVmZXJlbmNlZC5jaXJjdWxhcjtcbiAgICAgIHJlc3VsdC52YWx1ZSA9IGRlcmVmZXJlbmNlZC52YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHZhciBrZXlQYXRoID0gUG9pbnRlci5qb2luKHBhdGgsIGtleSk7XG4gICAgICAgIHZhciBrZXlQYXRoRnJvbVJvb3QgPSBQb2ludGVyLmpvaW4ocGF0aEZyb21Sb290LCBrZXkpO1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgICAgdmFyIGNpcmN1bGFyID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKCRSZWYuaXNBbGxvd2VkJFJlZih2YWx1ZSwgb3B0aW9ucykpIHtcbiAgICAgICAgICBkZXJlZmVyZW5jZWQgPSBkZXJlZmVyZW5jZSRSZWYodmFsdWUsIGtleVBhdGgsIGtleVBhdGhGcm9tUm9vdCwgcGFyZW50cywgJHJlZnMsIG9wdGlvbnMpO1xuICAgICAgICAgIGNpcmN1bGFyID0gZGVyZWZlcmVuY2VkLmNpcmN1bGFyO1xuICAgICAgICAgIG9ialtrZXldID0gZGVyZWZlcmVuY2VkLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlmIChwYXJlbnRzLmluZGV4T2YodmFsdWUpID09PSAtMSkge1xuICAgICAgICAgICAgZGVyZWZlcmVuY2VkID0gY3Jhd2wodmFsdWUsIGtleVBhdGgsIGtleVBhdGhGcm9tUm9vdCwgcGFyZW50cywgJHJlZnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgY2lyY3VsYXIgPSBkZXJlZmVyZW5jZWQuY2lyY3VsYXI7XG4gICAgICAgICAgICBvYmpba2V5XSA9IGRlcmVmZXJlbmNlZC52YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjaXJjdWxhciA9IGZvdW5kQ2lyY3VsYXJSZWZlcmVuY2Uoa2V5UGF0aCwgJHJlZnMsIG9wdGlvbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCB0aGUgXCJpc0NpcmN1bGFyXCIgZmxhZyBpZiB0aGlzIG9yIGFueSBvdGhlciBwcm9wZXJ0eSBpcyBjaXJjdWxhclxuICAgICAgICByZXN1bHQuY2lyY3VsYXIgPSByZXN1bHQuY2lyY3VsYXIgfHwgY2lyY3VsYXI7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBwYXJlbnRzLnBvcCgpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXJlZmVyZW5jZXMgdGhlIGdpdmVuIEpTT04gUmVmZXJlbmNlLCBhbmQgdGhlbiBjcmF3bHMgdGhlIHJlc3VsdGluZyB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge3skcmVmOiBzdHJpbmd9fSAkcmVmIC0gVGhlIEpTT04gUmVmZXJlbmNlIHRvIHJlc29sdmVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIGZ1bGwgcGF0aCBvZiBgJHJlZmAsIHBvc3NpYmx5IHdpdGggYSBKU09OIFBvaW50ZXIgaW4gdGhlIGhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoRnJvbVJvb3QgLSBUaGUgcGF0aCBvZiBgJHJlZmAgZnJvbSB0aGUgc2NoZW1hIHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0W119IHBhcmVudHMgLSBBbiBhcnJheSBvZiB0aGUgcGFyZW50IG9iamVjdHMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBkZXJlZmVyZW5jZWRcbiAqIEBwYXJhbSB7JFJlZnN9ICRyZWZzXG4gKiBAcGFyYW0geyRSZWZQYXJzZXJPcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7e3ZhbHVlOiBvYmplY3QsIGNpcmN1bGFyOiBib29sZWFufX1cbiAqL1xuZnVuY3Rpb24gZGVyZWZlcmVuY2UkUmVmKCRyZWYsIHBhdGgsIHBhdGhGcm9tUm9vdCwgcGFyZW50cywgJHJlZnMsIG9wdGlvbnMpIHtcbiAgZGVidWcoJ0RlcmVmZXJlbmNpbmcgJHJlZiBwb2ludGVyIFwiJXNcIiBhdCAlcycsICRyZWYuJHJlZiwgcGF0aCk7XG5cbiAgdmFyICRyZWZQYXRoID0gdXJsLnJlc29sdmUocGF0aCwgJHJlZi4kcmVmKTtcbiAgdmFyIHBvaW50ZXIgPSAkcmVmcy5fcmVzb2x2ZSgkcmVmUGF0aCwgb3B0aW9ucyk7XG5cbiAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXNcbiAgdmFyIGRpcmVjdENpcmN1bGFyID0gcG9pbnRlci5jaXJjdWxhcjtcbiAgdmFyIGNpcmN1bGFyID0gZGlyZWN0Q2lyY3VsYXIgfHwgcGFyZW50cy5pbmRleE9mKHBvaW50ZXIudmFsdWUpICE9PSAtMTtcbiAgY2lyY3VsYXIgJiYgZm91bmRDaXJjdWxhclJlZmVyZW5jZShwYXRoLCAkcmVmcywgb3B0aW9ucyk7XG5cbiAgLy8gRGVyZWZlcmVuY2UgdGhlIEpTT04gcmVmZXJlbmNlXG4gIHZhciBkZXJlZmVyZW5jZWRWYWx1ZSA9ICRSZWYuZGVyZWZlcmVuY2UoJHJlZiwgcG9pbnRlci52YWx1ZSk7XG5cbiAgLy8gQ3Jhd2wgdGhlIGRlcmVmZXJlbmNlZCB2YWx1ZSAodW5sZXNzIGl0J3MgY2lyY3VsYXIpXG4gIGlmICghY2lyY3VsYXIpIHtcbiAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIGRlcmVmZXJlbmNlZCB2YWx1ZSBpcyBjaXJjdWxhclxuICAgIHZhciBkZXJlZmVyZW5jZWQgPSBjcmF3bChkZXJlZmVyZW5jZWRWYWx1ZSwgcG9pbnRlci5wYXRoLCBwYXRoRnJvbVJvb3QsIHBhcmVudHMsICRyZWZzLCBvcHRpb25zKTtcbiAgICBjaXJjdWxhciA9IGRlcmVmZXJlbmNlZC5jaXJjdWxhcjtcbiAgICBkZXJlZmVyZW5jZWRWYWx1ZSA9IGRlcmVmZXJlbmNlZC52YWx1ZTtcbiAgfVxuXG4gIGlmIChjaXJjdWxhciAmJiAhZGlyZWN0Q2lyY3VsYXIgJiYgb3B0aW9ucy5kZXJlZmVyZW5jZS5jaXJjdWxhciA9PT0gJ2lnbm9yZScpIHtcbiAgICAvLyBUaGUgdXNlciBoYXMgY2hvc2VuIHRvIFwiaWdub3JlXCIgY2lyY3VsYXIgcmVmZXJlbmNlcywgc28gZG9uJ3QgY2hhbmdlIHRoZSB2YWx1ZVxuICAgIGRlcmVmZXJlbmNlZFZhbHVlID0gJHJlZjtcbiAgfVxuXG4gIGlmIChkaXJlY3RDaXJjdWxhcikge1xuICAgIC8vIFRoZSBwb2ludGVyIGlzIGEgRElSRUNUIGNpcmN1bGFyIHJlZmVyZW5jZSAoaS5lLiBpdCByZWZlcmVuY2VzIGl0c2VsZikuXG4gICAgLy8gU28gcmVwbGFjZSB0aGUgJHJlZiBwYXRoIHdpdGggdGhlIGFic29sdXRlIHBhdGggZnJvbSB0aGUgSlNPTiBTY2hlbWEgcm9vdFxuICAgIGRlcmVmZXJlbmNlZFZhbHVlLiRyZWYgPSBwYXRoRnJvbVJvb3Q7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNpcmN1bGFyOiBjaXJjdWxhcixcbiAgICB2YWx1ZTogZGVyZWZlcmVuY2VkVmFsdWVcbiAgfTtcbn1cblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBhIGNpcmN1bGFyIHJlZmVyZW5jZSBpcyBmb3VuZC5cbiAqIEl0IHNldHMgdGhlIHtAbGluayAkUmVmcyNjaXJjdWxhcn0gZmxhZywgYW5kIHRocm93cyBhbiBlcnJvciBpZiBvcHRpb25zLmRlcmVmZXJlbmNlLmNpcmN1bGFyIGlzIGZhbHNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlQYXRoIC0gVGhlIEpTT04gUmVmZXJlbmNlIHBhdGggb2YgdGhlIGNpcmN1bGFyIHJlZmVyZW5jZVxuICogQHBhcmFtIHskUmVmc30gJHJlZnNcbiAqIEBwYXJhbSB7JFJlZlBhcnNlck9wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtib29sZWFufSAtIGFsd2F5cyByZXR1cm5zIHRydWUsIHRvIGluZGljYXRlIHRoYXQgYSBjaXJjdWxhciByZWZlcmVuY2Ugd2FzIGZvdW5kXG4gKi9cbmZ1bmN0aW9uIGZvdW5kQ2lyY3VsYXJSZWZlcmVuY2Uoa2V5UGF0aCwgJHJlZnMsIG9wdGlvbnMpIHtcbiAgJHJlZnMuY2lyY3VsYXIgPSB0cnVlO1xuICBpZiAoIW9wdGlvbnMuZGVyZWZlcmVuY2UuY2lyY3VsYXIpIHtcbiAgICB0aHJvdyBvbm8ucmVmZXJlbmNlKCdDaXJjdWxhciAkcmVmIHBvaW50ZXIgZm91bmQgYXQgJXMnLCBrZXlQYXRoKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFByb21pc2UgICAgICAgICA9IHJlcXVpcmUoJy4vdXRpbC9wcm9taXNlJyksXG4gICAgT3B0aW9ucyAgICAgICAgID0gcmVxdWlyZSgnLi9vcHRpb25zJyksXG4gICAgJFJlZnMgICAgICAgICAgID0gcmVxdWlyZSgnLi9yZWZzJyksXG4gICAgcGFyc2UgICAgICAgICAgID0gcmVxdWlyZSgnLi9wYXJzZScpLFxuICAgIHJlc29sdmVFeHRlcm5hbCA9IHJlcXVpcmUoJy4vcmVzb2x2ZS1leHRlcm5hbCcpLFxuICAgIGJ1bmRsZSAgICAgICAgICA9IHJlcXVpcmUoJy4vYnVuZGxlJyksXG4gICAgZGVyZWZlcmVuY2UgICAgID0gcmVxdWlyZSgnLi9kZXJlZmVyZW5jZScpLFxuICAgIHVybCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vdXRpbC91cmwnKSxcbiAgICBtYXliZSAgICAgICAgICAgPSByZXF1aXJlKCdjYWxsLW1lLW1heWJlJyksXG4gICAgb25vICAgICAgICAgICAgID0gcmVxdWlyZSgnb25vJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gJFJlZlBhcnNlcjtcbm1vZHVsZS5leHBvcnRzLllBTUwgPSByZXF1aXJlKCcuL3V0aWwveWFtbCcpO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgcGFyc2VzIGEgSlNPTiBzY2hlbWEsIGJ1aWxkcyBhIG1hcCBvZiBpdHMgSlNPTiByZWZlcmVuY2VzIGFuZCB0aGVpciByZXNvbHZlZCB2YWx1ZXMsXG4gKiBhbmQgcHJvdmlkZXMgbWV0aG9kcyBmb3IgdHJhdmVyc2luZywgbWFuaXB1bGF0aW5nLCBhbmQgZGVyZWZlcmVuY2luZyB0aG9zZSByZWZlcmVuY2VzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiAkUmVmUGFyc2VyKCkge1xuICAvKipcbiAgICogVGhlIHBhcnNlZCAoYW5kIHBvc3NpYmx5IGRlcmVmZXJlbmNlZCkgSlNPTiBzY2hlbWEgb2JqZWN0XG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgdGhpcy5zY2hlbWEgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVzb2x2ZWQgSlNPTiByZWZlcmVuY2VzXG4gICAqXG4gICAqIEB0eXBlIHskUmVmc31cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICB0aGlzLiRyZWZzID0gbmV3ICRSZWZzKCk7XG59XG5cbi8qKlxuICogUGFyc2VzIHRoZSBnaXZlbiBKU09OIHNjaGVtYS5cbiAqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHJlc29sdmUgYW55IEpTT04gcmVmZXJlbmNlcy5cbiAqIEl0IGp1c3QgcmVhZHMgYSBzaW5nbGUgZmlsZSBpbiBKU09OIG9yIFlBTUwgZm9ybWF0LCBhbmQgcGFyc2UgaXQgYXMgYSBKYXZhU2NyaXB0IG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHNjaGVtYSAtIFRoZSBmaWxlIHBhdGggb3IgVVJMIG9mIHRoZSBKU09OIHNjaGVtYS4gT3IgYSBKU09OIHNjaGVtYSBvYmplY3QuXG4gKiBAcGFyYW0geyRSZWZQYXJzZXJPcHRpb25zfSBbb3B0aW9uc10gLSBPcHRpb25zIHRoYXQgZGV0ZXJtaW5lIGhvdyB0aGUgc2NoZW1hIGlzIHBhcnNlZFxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEFuIGVycm9yLWZpcnN0IGNhbGxiYWNrLiBUaGUgc2Vjb25kIHBhcmFtZXRlciBpcyB0aGUgcGFyc2VkIEpTT04gc2NoZW1hIG9iamVjdC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfSAtIFRoZSByZXR1cm5lZCBwcm9taXNlIHJlc29sdmVzIHdpdGggdGhlIHBhcnNlZCBKU09OIHNjaGVtYSBvYmplY3QuXG4gKi9cbiRSZWZQYXJzZXIucGFyc2UgPSBmdW5jdGlvbihzY2hlbWEsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBDbGFzcyA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC10aGlzXG4gIHZhciBpbnN0YW5jZSA9IG5ldyBDbGFzcygpO1xuICByZXR1cm4gaW5zdGFuY2UucGFyc2UuYXBwbHkoaW5zdGFuY2UsIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcbiAqIFBhcnNlcyB0aGUgZ2l2ZW4gSlNPTiBzY2hlbWEuXG4gKiBUaGlzIG1ldGhvZCBkb2VzIG5vdCByZXNvbHZlIGFueSBKU09OIHJlZmVyZW5jZXMuXG4gKiBJdCBqdXN0IHJlYWRzIGEgc2luZ2xlIGZpbGUgaW4gSlNPTiBvciBZQU1MIGZvcm1hdCwgYW5kIHBhcnNlIGl0IGFzIGEgSmF2YVNjcmlwdCBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBzY2hlbWEgLSBUaGUgZmlsZSBwYXRoIG9yIFVSTCBvZiB0aGUgSlNPTiBzY2hlbWEuIE9yIGEgSlNPTiBzY2hlbWEgb2JqZWN0LlxuICogQHBhcmFtIHskUmVmUGFyc2VyT3B0aW9uc30gW29wdGlvbnNdIC0gT3B0aW9ucyB0aGF0IGRldGVybWluZSBob3cgdGhlIHNjaGVtYSBpcyBwYXJzZWRcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gLSBBbiBlcnJvci1maXJzdCBjYWxsYmFjay4gVGhlIHNlY29uZCBwYXJhbWV0ZXIgaXMgdGhlIHBhcnNlZCBKU09OIHNjaGVtYSBvYmplY3QuXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gLSBUaGUgcmV0dXJuZWQgcHJvbWlzZSByZXNvbHZlcyB3aXRoIHRoZSBwYXJzZWQgSlNPTiBzY2hlbWEgb2JqZWN0LlxuICovXG4kUmVmUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKHNjaGVtYSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIGFyZ3MgPSBub3JtYWxpemVBcmdzKGFyZ3VtZW50cyk7XG4gIHZhciBwcm9taXNlO1xuXG4gIGlmICghYXJncy5wYXRoICYmICFhcmdzLnNjaGVtYSkge1xuICAgIHZhciBlcnIgPSBvbm8oJ0V4cGVjdGVkIGEgZmlsZSBwYXRoLCBVUkwsIG9yIG9iamVjdC4gR290ICVzJywgYXJncy5wYXRoIHx8IGFyZ3Muc2NoZW1hKTtcbiAgICByZXR1cm4gbWF5YmUoYXJncy5jYWxsYmFjaywgUHJvbWlzZS5yZWplY3QoZXJyKSk7XG4gIH1cblxuICAvLyBSZXNldCBldmVyeXRoaW5nXG4gIHRoaXMuc2NoZW1hID0gbnVsbDtcbiAgdGhpcy4kcmVmcyA9IG5ldyAkUmVmcygpO1xuXG4gIC8vIElmIHRoZSBwYXRoIGlzIGEgZmlsZXN5c3RlbSBwYXRoLCB0aGVuIGNvbnZlcnQgaXQgdG8gYSBVUkwuXG4gIC8vIE5PVEU6IEFjY29yZGluZyB0byB0aGUgSlNPTiBSZWZlcmVuY2Ugc3BlYywgdGhlc2Ugc2hvdWxkIGFscmVhZHkgYmUgVVJMcyxcbiAgLy8gYnV0LCBpbiBwcmFjdGljZSwgbWFueSBwZW9wbGUgdXNlIGxvY2FsIGZpbGVzeXN0ZW0gcGF0aHMgaW5zdGVhZC5cbiAgLy8gU28gd2UncmUgYmVpbmcgZ2VuZXJvdXMgaGVyZSBhbmQgZG9pbmcgdGhlIGNvbnZlcnNpb24gYXV0b21hdGljYWxseS5cbiAgLy8gVGhpcyBpcyBub3QgaW50ZW5kZWQgdG8gYmUgYSAxMDAlIGJ1bGxldHByb29mIHNvbHV0aW9uLlxuICAvLyBJZiBpdCBkb2Vzbid0IHdvcmsgZm9yIHlvdXIgdXNlLWNhc2UsIHRoZW4gdXNlIGEgVVJMIGluc3RlYWQuXG4gIGlmICh1cmwuaXNGaWxlU3lzdGVtUGF0aChhcmdzLnBhdGgpKSB7XG4gICAgYXJncy5wYXRoID0gdXJsLmZyb21GaWxlU3lzdGVtUGF0aChhcmdzLnBhdGgpO1xuICB9XG5cbiAgLy8gUmVzb2x2ZSB0aGUgYWJzb2x1dGUgcGF0aCBvZiB0aGUgc2NoZW1hXG4gIGFyZ3MucGF0aCA9IHVybC5yZXNvbHZlKHVybC5jd2QoKSwgYXJncy5wYXRoKTtcblxuICBpZiAoYXJncy5zY2hlbWEgJiYgdHlwZW9mIGFyZ3Muc2NoZW1hID09PSAnb2JqZWN0Jykge1xuICAgIC8vIEEgc2NoZW1hIG9iamVjdCB3YXMgcGFzc2VkLWluLlxuICAgIC8vIFNvIGltbWVkaWF0ZWx5IGFkZCBhIG5ldyAkUmVmIHdpdGggdGhlIHNjaGVtYSBvYmplY3QgYXMgaXRzIHZhbHVlXG4gICAgdGhpcy4kcmVmcy5fYWRkKGFyZ3MucGF0aCwgYXJncy5zY2hlbWEpO1xuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoYXJncy5zY2hlbWEpO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIFBhcnNlIHRoZSBzY2hlbWEgZmlsZS91cmxcbiAgICBwcm9taXNlID0gcGFyc2UoYXJncy5wYXRoLCB0aGlzLiRyZWZzLCBhcmdzLm9wdGlvbnMpO1xuICB9XG5cbiAgdmFyIG1lID0gdGhpcztcbiAgcmV0dXJuIHByb21pc2VcbiAgICAudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgIGlmICghcmVzdWx0IHx8IHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnIHx8IEJ1ZmZlci5pc0J1ZmZlcihyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IG9uby5zeW50YXgoJ1wiJXNcIiBpcyBub3QgYSB2YWxpZCBKU09OIFNjaGVtYScsIG1lLiRyZWZzLl9yb290JFJlZi5wYXRoIHx8IHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbWUuc2NoZW1hID0gcmVzdWx0O1xuICAgICAgICByZXR1cm4gbWF5YmUoYXJncy5jYWxsYmFjaywgUHJvbWlzZS5yZXNvbHZlKG1lLnNjaGVtYSkpO1xuICAgICAgfVxuICAgIH0pXG4gICAgLmNhdGNoKGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiBtYXliZShhcmdzLmNhbGxiYWNrLCBQcm9taXNlLnJlamVjdChlKSk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFBhcnNlcyB0aGUgZ2l2ZW4gSlNPTiBzY2hlbWEgYW5kIHJlc29sdmVzIGFueSBKU09OIHJlZmVyZW5jZXMsIGluY2x1ZGluZyByZWZlcmVuY2VzIGluXG4gKiBleHRlcm5hbGx5LXJlZmVyZW5jZWQgZmlsZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBzY2hlbWEgLSBUaGUgZmlsZSBwYXRoIG9yIFVSTCBvZiB0aGUgSlNPTiBzY2hlbWEuIE9yIGEgSlNPTiBzY2hlbWEgb2JqZWN0LlxuICogQHBhcmFtIHskUmVmUGFyc2VyT3B0aW9uc30gW29wdGlvbnNdIC0gT3B0aW9ucyB0aGF0IGRldGVybWluZSBob3cgdGhlIHNjaGVtYSBpcyBwYXJzZWQgYW5kIHJlc29sdmVkXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdXG4gKiAtIEFuIGVycm9yLWZpcnN0IGNhbGxiYWNrLiBUaGUgc2Vjb25kIHBhcmFtZXRlciBpcyBhIHtAbGluayAkUmVmc30gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJlc29sdmVkIEpTT04gcmVmZXJlbmNlc1xuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlfVxuICogVGhlIHJldHVybmVkIHByb21pc2UgcmVzb2x2ZXMgd2l0aCBhIHtAbGluayAkUmVmc30gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJlc29sdmVkIEpTT04gcmVmZXJlbmNlc1xuICovXG4kUmVmUGFyc2VyLnJlc29sdmUgPSBmdW5jdGlvbihzY2hlbWEsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBDbGFzcyA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC10aGlzXG4gIHZhciBpbnN0YW5jZSA9IG5ldyBDbGFzcygpO1xuICByZXR1cm4gaW5zdGFuY2UucmVzb2x2ZS5hcHBseShpbnN0YW5jZSwgYXJndW1lbnRzKTtcbn07XG5cbi8qKlxuICogUGFyc2VzIHRoZSBnaXZlbiBKU09OIHNjaGVtYSBhbmQgcmVzb2x2ZXMgYW55IEpTT04gcmVmZXJlbmNlcywgaW5jbHVkaW5nIHJlZmVyZW5jZXMgaW5cbiAqIGV4dGVybmFsbHktcmVmZXJlbmNlZCBmaWxlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHNjaGVtYSAtIFRoZSBmaWxlIHBhdGggb3IgVVJMIG9mIHRoZSBKU09OIHNjaGVtYS4gT3IgYSBKU09OIHNjaGVtYSBvYmplY3QuXG4gKiBAcGFyYW0geyRSZWZQYXJzZXJPcHRpb25zfSBbb3B0aW9uc10gLSBPcHRpb25zIHRoYXQgZGV0ZXJtaW5lIGhvdyB0aGUgc2NoZW1hIGlzIHBhcnNlZCBhbmQgcmVzb2x2ZWRcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja11cbiAqIC0gQW4gZXJyb3ItZmlyc3QgY2FsbGJhY2suIFRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIGEge0BsaW5rICRSZWZzfSBvYmplY3QgY29udGFpbmluZyB0aGUgcmVzb2x2ZWQgSlNPTiByZWZlcmVuY2VzXG4gKlxuICogQHJldHVybnMge1Byb21pc2V9XG4gKiBUaGUgcmV0dXJuZWQgcHJvbWlzZSByZXNvbHZlcyB3aXRoIGEge0BsaW5rICRSZWZzfSBvYmplY3QgY29udGFpbmluZyB0aGUgcmVzb2x2ZWQgSlNPTiByZWZlcmVuY2VzXG4gKi9cbiRSZWZQYXJzZXIucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbihzY2hlbWEsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBtZSA9IHRoaXM7XG4gIHZhciBhcmdzID0gbm9ybWFsaXplQXJncyhhcmd1bWVudHMpO1xuXG4gIHJldHVybiB0aGlzLnBhcnNlKGFyZ3MucGF0aCwgYXJncy5zY2hlbWEsIGFyZ3Mub3B0aW9ucylcbiAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZXNvbHZlRXh0ZXJuYWwobWUsIGFyZ3Mub3B0aW9ucyk7XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBtYXliZShhcmdzLmNhbGxiYWNrLCBQcm9taXNlLnJlc29sdmUobWUuJHJlZnMpKTtcbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgIHJldHVybiBtYXliZShhcmdzLmNhbGxiYWNrLCBQcm9taXNlLnJlamVjdChlcnIpKTtcbiAgICB9KTtcbn07XG5cbi8qKlxuICogUGFyc2VzIHRoZSBnaXZlbiBKU09OIHNjaGVtYSwgcmVzb2x2ZXMgYW55IEpTT04gcmVmZXJlbmNlcywgYW5kIGJ1bmRsZXMgYWxsIGV4dGVybmFsIHJlZmVyZW5jZXNcbiAqIGludG8gdGhlIG1haW4gSlNPTiBzY2hlbWEuIFRoaXMgcHJvZHVjZXMgYSBKU09OIHNjaGVtYSB0aGF0IG9ubHkgaGFzICppbnRlcm5hbCogcmVmZXJlbmNlcyxcbiAqIG5vdCBhbnkgKmV4dGVybmFsKiByZWZlcmVuY2VzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gc2NoZW1hIC0gVGhlIGZpbGUgcGF0aCBvciBVUkwgb2YgdGhlIEpTT04gc2NoZW1hLiBPciBhIEpTT04gc2NoZW1hIG9iamVjdC5cbiAqIEBwYXJhbSB7JFJlZlBhcnNlck9wdGlvbnN9IFtvcHRpb25zXSAtIE9wdGlvbnMgdGhhdCBkZXRlcm1pbmUgaG93IHRoZSBzY2hlbWEgaXMgcGFyc2VkLCByZXNvbHZlZCwgYW5kIGRlcmVmZXJlbmNlZFxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEFuIGVycm9yLWZpcnN0IGNhbGxiYWNrLiBUaGUgc2Vjb25kIHBhcmFtZXRlciBpcyB0aGUgYnVuZGxlZCBKU09OIHNjaGVtYSBvYmplY3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSAtIFRoZSByZXR1cm5lZCBwcm9taXNlIHJlc29sdmVzIHdpdGggdGhlIGJ1bmRsZWQgSlNPTiBzY2hlbWEgb2JqZWN0LlxuICovXG4kUmVmUGFyc2VyLmJ1bmRsZSA9IGZ1bmN0aW9uKHNjaGVtYSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIENsYXNzID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXRoaXNcbiAgdmFyIGluc3RhbmNlID0gbmV3IENsYXNzKCk7XG4gIHJldHVybiBpbnN0YW5jZS5idW5kbGUuYXBwbHkoaW5zdGFuY2UsIGFyZ3VtZW50cyk7XG59O1xuXG4vKipcbiAqIFBhcnNlcyB0aGUgZ2l2ZW4gSlNPTiBzY2hlbWEsIHJlc29sdmVzIGFueSBKU09OIHJlZmVyZW5jZXMsIGFuZCBidW5kbGVzIGFsbCBleHRlcm5hbCByZWZlcmVuY2VzXG4gKiBpbnRvIHRoZSBtYWluIEpTT04gc2NoZW1hLiBUaGlzIHByb2R1Y2VzIGEgSlNPTiBzY2hlbWEgdGhhdCBvbmx5IGhhcyAqaW50ZXJuYWwqIHJlZmVyZW5jZXMsXG4gKiBub3QgYW55ICpleHRlcm5hbCogcmVmZXJlbmNlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHNjaGVtYSAtIFRoZSBmaWxlIHBhdGggb3IgVVJMIG9mIHRoZSBKU09OIHNjaGVtYS4gT3IgYSBKU09OIHNjaGVtYSBvYmplY3QuXG4gKiBAcGFyYW0geyRSZWZQYXJzZXJPcHRpb25zfSBbb3B0aW9uc10gLSBPcHRpb25zIHRoYXQgZGV0ZXJtaW5lIGhvdyB0aGUgc2NoZW1hIGlzIHBhcnNlZCwgcmVzb2x2ZWQsIGFuZCBkZXJlZmVyZW5jZWRcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gLSBBbiBlcnJvci1maXJzdCBjYWxsYmFjay4gVGhlIHNlY29uZCBwYXJhbWV0ZXIgaXMgdGhlIGJ1bmRsZWQgSlNPTiBzY2hlbWEgb2JqZWN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gLSBUaGUgcmV0dXJuZWQgcHJvbWlzZSByZXNvbHZlcyB3aXRoIHRoZSBidW5kbGVkIEpTT04gc2NoZW1hIG9iamVjdC5cbiAqL1xuJFJlZlBhcnNlci5wcm90b3R5cGUuYnVuZGxlID0gZnVuY3Rpb24oc2NoZW1hLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICB2YXIgbWUgPSB0aGlzO1xuICB2YXIgYXJncyA9IG5vcm1hbGl6ZUFyZ3MoYXJndW1lbnRzKTtcblxuICByZXR1cm4gdGhpcy5yZXNvbHZlKGFyZ3MucGF0aCwgYXJncy5zY2hlbWEsIGFyZ3Mub3B0aW9ucylcbiAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgIGJ1bmRsZShtZSwgYXJncy5vcHRpb25zKTtcbiAgICAgIHJldHVybiBtYXliZShhcmdzLmNhbGxiYWNrLCBQcm9taXNlLnJlc29sdmUobWUuc2NoZW1hKSk7XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICByZXR1cm4gbWF5YmUoYXJncy5jYWxsYmFjaywgUHJvbWlzZS5yZWplY3QoZXJyKSk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFBhcnNlcyB0aGUgZ2l2ZW4gSlNPTiBzY2hlbWEsIHJlc29sdmVzIGFueSBKU09OIHJlZmVyZW5jZXMsIGFuZCBkZXJlZmVyZW5jZXMgdGhlIEpTT04gc2NoZW1hLlxuICogVGhhdCBpcywgYWxsIEpTT04gcmVmZXJlbmNlcyBhcmUgcmVwbGFjZWQgd2l0aCB0aGVpciByZXNvbHZlZCB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBzY2hlbWEgLSBUaGUgZmlsZSBwYXRoIG9yIFVSTCBvZiB0aGUgSlNPTiBzY2hlbWEuIE9yIGEgSlNPTiBzY2hlbWEgb2JqZWN0LlxuICogQHBhcmFtIHskUmVmUGFyc2VyT3B0aW9uc30gW29wdGlvbnNdIC0gT3B0aW9ucyB0aGF0IGRldGVybWluZSBob3cgdGhlIHNjaGVtYSBpcyBwYXJzZWQsIHJlc29sdmVkLCBhbmQgZGVyZWZlcmVuY2VkXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQW4gZXJyb3ItZmlyc3QgY2FsbGJhY2suIFRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIHRoZSBkZXJlZmVyZW5jZWQgSlNPTiBzY2hlbWEgb2JqZWN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gLSBUaGUgcmV0dXJuZWQgcHJvbWlzZSByZXNvbHZlcyB3aXRoIHRoZSBkZXJlZmVyZW5jZWQgSlNPTiBzY2hlbWEgb2JqZWN0LlxuICovXG4kUmVmUGFyc2VyLmRlcmVmZXJlbmNlID0gZnVuY3Rpb24oc2NoZW1hLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICB2YXIgQ2xhc3MgPSB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtdGhpc1xuICB2YXIgaW5zdGFuY2UgPSBuZXcgQ2xhc3MoKTtcbiAgcmV0dXJuIGluc3RhbmNlLmRlcmVmZXJlbmNlLmFwcGx5KGluc3RhbmNlLCBhcmd1bWVudHMpO1xufTtcblxuLyoqXG4gKiBQYXJzZXMgdGhlIGdpdmVuIEpTT04gc2NoZW1hLCByZXNvbHZlcyBhbnkgSlNPTiByZWZlcmVuY2VzLCBhbmQgZGVyZWZlcmVuY2VzIHRoZSBKU09OIHNjaGVtYS5cbiAqIFRoYXQgaXMsIGFsbCBKU09OIHJlZmVyZW5jZXMgYXJlIHJlcGxhY2VkIHdpdGggdGhlaXIgcmVzb2x2ZWQgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gc2NoZW1hIC0gVGhlIGZpbGUgcGF0aCBvciBVUkwgb2YgdGhlIEpTT04gc2NoZW1hLiBPciBhIEpTT04gc2NoZW1hIG9iamVjdC5cbiAqIEBwYXJhbSB7JFJlZlBhcnNlck9wdGlvbnN9IFtvcHRpb25zXSAtIE9wdGlvbnMgdGhhdCBkZXRlcm1pbmUgaG93IHRoZSBzY2hlbWEgaXMgcGFyc2VkLCByZXNvbHZlZCwgYW5kIGRlcmVmZXJlbmNlZFxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSAtIEFuIGVycm9yLWZpcnN0IGNhbGxiYWNrLiBUaGUgc2Vjb25kIHBhcmFtZXRlciBpcyB0aGUgZGVyZWZlcmVuY2VkIEpTT04gc2NoZW1hIG9iamVjdFxuICogQHJldHVybnMge1Byb21pc2V9IC0gVGhlIHJldHVybmVkIHByb21pc2UgcmVzb2x2ZXMgd2l0aCB0aGUgZGVyZWZlcmVuY2VkIEpTT04gc2NoZW1hIG9iamVjdC5cbiAqL1xuJFJlZlBhcnNlci5wcm90b3R5cGUuZGVyZWZlcmVuY2UgPSBmdW5jdGlvbihzY2hlbWEsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBtZSA9IHRoaXM7XG4gIHZhciBhcmdzID0gbm9ybWFsaXplQXJncyhhcmd1bWVudHMpO1xuXG4gIHJldHVybiB0aGlzLnJlc29sdmUoYXJncy5wYXRoLCBhcmdzLnNjaGVtYSwgYXJncy5vcHRpb25zKVxuICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgZGVyZWZlcmVuY2UobWUsIGFyZ3Mub3B0aW9ucyk7XG4gICAgICByZXR1cm4gbWF5YmUoYXJncy5jYWxsYmFjaywgUHJvbWlzZS5yZXNvbHZlKG1lLnNjaGVtYSkpO1xuICAgIH0pXG4gICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgcmV0dXJuIG1heWJlKGFyZ3MuY2FsbGJhY2ssIFByb21pc2UucmVqZWN0KGVycikpO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBOb3JtYWxpemVzIHRoZSBnaXZlbiBhcmd1bWVudHMsIGFjY291bnRpbmcgZm9yIG9wdGlvbmFsIGFyZ3MuXG4gKlxuICogQHBhcmFtIHtBcmd1bWVudHN9IGFyZ3NcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUFyZ3MoYXJncykge1xuICB2YXIgcGF0aCwgc2NoZW1hLCBvcHRpb25zLCBjYWxsYmFjaztcbiAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpO1xuXG4gIGlmICh0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gVGhlIGxhc3QgcGFyYW1ldGVyIGlzIGEgY2FsbGJhY2sgZnVuY3Rpb25cbiAgICBjYWxsYmFjayA9IGFyZ3MucG9wKCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVGhlIGZpcnN0IHBhcmFtZXRlciBpcyB0aGUgcGF0aFxuICAgIHBhdGggPSBhcmdzWzBdO1xuICAgIGlmICh0eXBlb2YgYXJnc1syXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIC8vIFRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIHRoZSBzY2hlbWEsIGFuZCB0aGUgdGhpcmQgcGFyYW1ldGVyIGlzIHRoZSBvcHRpb25zXG4gICAgICBzY2hlbWEgPSBhcmdzWzFdO1xuICAgICAgb3B0aW9ucyA9IGFyZ3NbMl07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gVGhlIHNlY29uZCBwYXJhbWV0ZXIgaXMgdGhlIG9wdGlvbnNcbiAgICAgIHNjaGVtYSA9IHVuZGVmaW5lZDtcbiAgICAgIG9wdGlvbnMgPSBhcmdzWzFdO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICAvLyBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIHRoZSBzY2hlbWFcbiAgICBwYXRoID0gJyc7XG4gICAgc2NoZW1hID0gYXJnc1swXTtcbiAgICBvcHRpb25zID0gYXJnc1sxXTtcbiAgfVxuXG4gIGlmICghKG9wdGlvbnMgaW5zdGFuY2VvZiBPcHRpb25zKSkge1xuICAgIG9wdGlvbnMgPSBuZXcgT3B0aW9ucyhvcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aDogcGF0aCxcbiAgICBzY2hlbWE6IHNjaGVtYSxcbiAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgIGNhbGxiYWNrOiBjYWxsYmFja1xuICB9O1xufVxuIiwiLyogZXNsaW50IGxpbmVzLWFyb3VuZC1jb21tZW50OiBbMiwge2JlZm9yZUJsb2NrQ29tbWVudDogZmFsc2V9XSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIganNvblBhcnNlciAgICAgICA9IHJlcXVpcmUoJy4vcGFyc2Vycy9qc29uJyksXG4gICAgeWFtbFBhcnNlciAgICAgICA9IHJlcXVpcmUoJy4vcGFyc2Vycy95YW1sJyksXG4gICAgdGV4dFBhcnNlciAgICAgICA9IHJlcXVpcmUoJy4vcGFyc2Vycy90ZXh0JyksXG4gICAgYmluYXJ5UGFyc2VyICAgICA9IHJlcXVpcmUoJy4vcGFyc2Vycy9iaW5hcnknKSxcbiAgICBmaWxlUmVzb2x2ZXIgICAgID0gcmVxdWlyZSgnLi9yZXNvbHZlcnMvZmlsZScpLFxuICAgIGh0dHBSZXNvbHZlciAgICAgPSByZXF1aXJlKCcuL3Jlc29sdmVycy9odHRwJyksXG4gICAgenNjaGVtYVZhbGlkYXRvciA9IHJlcXVpcmUoJy4vdmFsaWRhdG9ycy96LXNjaGVtYScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRSZWZQYXJzZXJPcHRpb25zO1xuXG4vKipcbiAqIE9wdGlvbnMgdGhhdCBkZXRlcm1pbmUgaG93IEpTT04gc2NoZW1hcyBhcmUgcGFyc2VkLCByZXNvbHZlZCwgZGVyZWZlcmVuY2VkLCBhbmQgdmFsaWRhdGVkLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fCRSZWZQYXJzZXJPcHRpb25zfSBbb3B0aW9uc10gLSBPdmVycmlkZGVuIG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiAkUmVmUGFyc2VyT3B0aW9ucyhvcHRpb25zKSB7XG4gIG1lcmdlKHRoaXMsICRSZWZQYXJzZXJPcHRpb25zLmRlZmF1bHRzKTtcbiAgbWVyZ2UodGhpcywgb3B0aW9ucyk7XG59XG5cbiRSZWZQYXJzZXJPcHRpb25zLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogRGV0ZXJtaW5lcyBob3cgZGlmZmVyZW50IHR5cGVzIG9mIGZpbGVzIHdpbGwgYmUgcGFyc2VkLlxuICAgKlxuICAgKiBZb3UgY2FuIGFkZCBhZGRpdGlvbmFsIHBhcnNlcnMgb2YgeW91ciBvd24sIHJlcGxhY2UgYW4gZXhpc3Rpbmcgb25lIHdpdGhcbiAgICogeW91ciBvd24gaW1wbGVtZW5hdGlvbiwgb3IgZGlzYWJsZSBhbnkgcGFyc2VyIGJ5IHNldHRpbmcgaXQgdG8gZmFsc2UuXG4gICAqL1xuICBwYXJzZToge1xuICAgIGpzb246IGpzb25QYXJzZXIsXG4gICAgeWFtbDogeWFtbFBhcnNlcixcbiAgICB0ZXh0OiB0ZXh0UGFyc2VyLFxuICAgIGJpbmFyeTogYmluYXJ5UGFyc2VyLFxuICB9LFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGhvdyBKU09OIFJlZmVyZW5jZXMgd2lsbCBiZSByZXNvbHZlZC5cbiAgICpcbiAgICogWW91IGNhbiBhZGQgYWRkaXRpb25hbCByZXNvbHZlcnMgb2YgeW91ciBvd24sIHJlcGxhY2UgYW4gZXhpc3Rpbmcgb25lIHdpdGhcbiAgICogeW91ciBvd24gaW1wbGVtZW5hdGlvbiwgb3IgZGlzYWJsZSBhbnkgcmVzb2x2ZXIgYnkgc2V0dGluZyBpdCB0byBmYWxzZS5cbiAgICovXG4gIHJlc29sdmU6IHtcbiAgICBmaWxlOiBmaWxlUmVzb2x2ZXIsXG4gICAgaHR0cDogaHR0cFJlc29sdmVyLFxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIGV4dGVybmFsICRyZWYgcG9pbnRlcnMgd2lsbCBiZSByZXNvbHZlZC5cbiAgICAgKiBJZiB0aGlzIG9wdGlvbiBpcyBkaXNhYmxlZCwgdGhlbiBub25lIG9mIGFib3ZlIHJlc29sdmVycyB3aWxsIGJlIGNhbGxlZC5cbiAgICAgKiBJbnN0ZWFkLCBleHRlcm5hbCAkcmVmIHBvaW50ZXJzIHdpbGwgc2ltcGx5IGJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBleHRlcm5hbDogdHJ1ZSxcbiAgfSxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgdHlwZXMgb2YgSlNPTiByZWZlcmVuY2VzIHRoYXQgYXJlIGFsbG93ZWQuXG4gICAqL1xuICBkZXJlZmVyZW5jZToge1xuICAgIC8qKlxuICAgICAqIERlcmVmZXJlbmNlIGNpcmN1bGFyIChyZWN1cnNpdmUpIEpTT04gcmVmZXJlbmNlcz9cbiAgICAgKiBJZiBmYWxzZSwgdGhlbiBhIHtAbGluayBSZWZlcmVuY2VFcnJvcn0gd2lsbCBiZSB0aHJvd24gaWYgYSBjaXJjdWxhciByZWZlcmVuY2UgaXMgZm91bmQuXG4gICAgICogSWYgXCJpZ25vcmVcIiwgdGhlbiBjaXJjdWxhciByZWZlcmVuY2VzIHdpbGwgbm90IGJlIGRlcmVmZXJlbmNlZC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtib29sZWFufHN0cmluZ31cbiAgICAgKi9cbiAgICBjaXJjdWxhcjogdHJ1ZVxuICB9LFxuXG4gIC8qKlxuICAgKiBWYWxpZGF0b3IgcGx1Zy1pbnMgdGhhdCBjYW4gYmUgdXNlZCB0byB2YWxpZGF0ZSB0aGUgc2NoZW1hLlxuICAgKi9cbiAgdmFsaWRhdGU6IHtcbiAgICB6c2NoZW1hOiB6c2NoZW1hVmFsaWRhdG9yXG4gIH1cbn07XG5cbi8qKlxuICogTWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBzb3VyY2Ugb2JqZWN0IGludG8gdGhlIHRhcmdldCBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHRhcmdldCAtIFRoZSBvYmplY3QgdGhhdCB3ZSdyZSBwb3B1bGF0aW5nXG4gKiBAcGFyYW0gez9vYmplY3R9IHNvdXJjZSAtIFRoZSBvcHRpb25zIHRoYXQgYXJlIGJlaW5nIG1lcmdlZFxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gbWVyZ2UodGFyZ2V0LCBzb3VyY2UpIHtcbiAgaWYgKGlzTWVyZ2VhYmxlKHNvdXJjZSkpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIHZhciBzb3VyY2VTZXR0aW5nID0gc291cmNlW2tleV07XG4gICAgICB2YXIgdGFyZ2V0U2V0dGluZyA9IHRhcmdldFtrZXldO1xuXG4gICAgICBpZiAoaXNNZXJnZWFibGUoc291cmNlU2V0dGluZykpIHtcbiAgICAgICAgLy8gSXQncyBhIG5lc3RlZCBvYmplY3QsIHNvIG1lcmdlIGl0IHJlY3Vyc2l2ZWx5XG4gICAgICAgIHRhcmdldFtrZXldID0gbWVyZ2UodGFyZ2V0U2V0dGluZyB8fCB7fSwgc291cmNlU2V0dGluZyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChzb3VyY2VTZXR0aW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gSXQncyBhIHNjYWxhciB2YWx1ZSwgZnVuY3Rpb24sIG9yIGFycmF5LiBObyBtZXJnaW5nIG5lY2Vzc2FyeS4gSnVzdCBvdmVyd3JpdGUgdGhlIHRhcmdldCB2YWx1ZS5cbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2VTZXR0aW5nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgZ2l2ZW4gdmFsdWUgY2FuIGJlIG1lcmdlZCxcbiAqIG9yIGlmIGl0IGlzIGEgc2NhbGFyIHZhbHVlIHRoYXQgc2hvdWxkIGp1c3Qgb3ZlcnJpZGUgdGhlIHRhcmdldCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0gICB7Kn0gIHZhbFxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTWVyZ2VhYmxlKHZhbCkge1xuICByZXR1cm4gdmFsICYmXG4gICAgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSAmJlxuICAgICFBcnJheS5pc0FycmF5KHZhbCkgJiZcbiAgICAhKHZhbCBpbnN0YW5jZW9mIFJlZ0V4cCkgJiZcbiAgICAhKHZhbCBpbnN0YW5jZW9mIERhdGUpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgb25vICAgICAgPSByZXF1aXJlKCdvbm8nKSxcbiAgICBkZWJ1ZyAgICA9IHJlcXVpcmUoJy4vdXRpbC9kZWJ1ZycpLFxuICAgIHVybCAgICAgID0gcmVxdWlyZSgnLi91dGlsL3VybCcpLFxuICAgIHBsdWdpbnMgID0gcmVxdWlyZSgnLi91dGlsL3BsdWdpbnMnKSxcbiAgICBQcm9taXNlICA9IHJlcXVpcmUoJy4vdXRpbC9wcm9taXNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2U7XG5cbi8qKlxuICogUmVhZHMgYW5kIHBhcnNlcyB0aGUgc3BlY2lmaWVkIGZpbGUgcGF0aCBvciBVUkwuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGlzIHBhdGggTVVTVCBhbHJlYWR5IGJlIHJlc29sdmVkLCBzaW5jZSBgcmVhZGAgZG9lc24ndCBrbm93IHRoZSByZXNvbHV0aW9uIGNvbnRleHRcbiAqIEBwYXJhbSB7JFJlZnN9ICRyZWZzXG4gKiBAcGFyYW0geyRSZWZQYXJzZXJPcHRpb25zfSBvcHRpb25zXG4gKlxuICogQHJldHVybnMge1Byb21pc2V9XG4gKiBUaGUgcHJvbWlzZSByZXNvbHZlcyB3aXRoIHRoZSBwYXJzZWQgZmlsZSBjb250ZW50cywgTk9UIHRoZSByYXcgKEJ1ZmZlcikgY29udGVudHMuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlKHBhdGgsICRyZWZzLCBvcHRpb25zKSB7XG4gIHRyeSB7XG4gICAgLy8gUmVtb3ZlIHRoZSBVUkwgZnJhZ21lbnQsIGlmIGFueVxuICAgIHBhdGggPSB1cmwuc3RyaXBIYXNoKHBhdGgpO1xuXG4gICAgLy8gQWRkIGEgbmV3ICRSZWYgZm9yIHRoaXMgZmlsZSwgZXZlbiB0aG91Z2ggd2UgZG9uJ3QgaGF2ZSB0aGUgdmFsdWUgeWV0LlxuICAgIC8vIFRoaXMgZW5zdXJlcyB0aGF0IHdlIGRvbid0IHNpbXVsdGFuZW91c2x5IHJlYWQgJiBwYXJzZSB0aGUgc2FtZSBmaWxlIG11bHRpcGxlIHRpbWVzXG4gICAgdmFyICRyZWYgPSAkcmVmcy5fYWRkKHBhdGgpO1xuXG4gICAgLy8gVGhpcyBcImZpbGUgb2JqZWN0XCIgd2lsbCBiZSBwYXNzZWQgdG8gYWxsIHJlc29sdmVycyBhbmQgcGFyc2Vycy5cbiAgICB2YXIgZmlsZSA9IHtcbiAgICAgIHVybDogcGF0aCxcbiAgICAgIGV4dGVuc2lvbjogdXJsLmdldEV4dGVuc2lvbihwYXRoKSxcbiAgICB9O1xuXG4gICAgLy8gUmVhZCB0aGUgZmlsZSBhbmQgdGhlbiBwYXJzZSB0aGUgZGF0YVxuICAgIHJldHVybiByZWFkRmlsZShmaWxlLCBvcHRpb25zKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzb2x2ZXIpIHtcbiAgICAgICAgJHJlZi5wYXRoVHlwZSA9IHJlc29sdmVyLnBsdWdpbi5uYW1lO1xuICAgICAgICBmaWxlLmRhdGEgPSByZXNvbHZlci5yZXN1bHQ7XG4gICAgICAgIHJldHVybiBwYXJzZUZpbGUoZmlsZSwgb3B0aW9ucyk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocGFyc2VyKSB7XG4gICAgICAgICRyZWYudmFsdWUgPSBwYXJzZXIucmVzdWx0O1xuICAgICAgICByZXR1cm4gcGFyc2VyLnJlc3VsdDtcbiAgICAgIH0pO1xuICB9XG4gIGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xuICB9XG59XG5cbi8qKlxuICogUmVhZHMgdGhlIGdpdmVuIGZpbGUsIHVzaW5nIHRoZSBjb25maWd1cmVkIHJlc29sdmVyIHBsdWdpbnNcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZmlsZSAgICAgICAgICAgLSBBbiBvYmplY3QgY29udGFpbmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcmVmZXJlbmNlZCBmaWxlXG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZS51cmwgICAgICAgLSBUaGUgZnVsbCBVUkwgb2YgdGhlIHJlZmVyZW5jZWQgZmlsZVxuICogQHBhcmFtIHtzdHJpbmd9IGZpbGUuZXh0ZW5zaW9uIC0gVGhlIGxvd2VyY2FzZWQgZmlsZSBleHRlbnNpb24gKGUuZy4gXCIudHh0XCIsIFwiLmh0bWxcIiwgZXRjLilcbiAqIEBwYXJhbSB7JFJlZlBhcnNlck9wdGlvbnN9IG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqIFRoZSBwcm9taXNlIHJlc29sdmVzIHdpdGggdGhlIHJhdyBmaWxlIGNvbnRlbnRzIGFuZCB0aGUgcmVzb2x2ZXIgdGhhdCB3YXMgdXNlZC5cbiAqL1xuZnVuY3Rpb24gcmVhZEZpbGUoZmlsZSwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZGVidWcoJ1JlYWRpbmcgJXMnLCBmaWxlLnVybCk7XG5cbiAgICAvLyBGaW5kIHRoZSByZXNvbHZlcnMgdGhhdCBjYW4gcmVhZCB0aGlzIGZpbGVcbiAgICB2YXIgcmVzb2x2ZXJzID0gcGx1Z2lucy5hbGwob3B0aW9ucy5yZXNvbHZlKTtcbiAgICByZXNvbHZlcnMgPSBwbHVnaW5zLmZpbHRlcihyZXNvbHZlcnMsICdjYW5SZWFkJywgZmlsZSk7XG5cbiAgICAvLyBSdW4gdGhlIHJlc29sdmVycywgaW4gb3JkZXIsIHVudGlsIG9uZSBvZiB0aGVtIHN1Y2NlZWRzXG4gICAgcGx1Z2lucy5zb3J0KHJlc29sdmVycyk7XG4gICAgcGx1Z2lucy5ydW4ocmVzb2x2ZXJzLCAncmVhZCcsIGZpbGUpXG4gICAgICAudGhlbihyZXNvbHZlLCBvbkVycm9yKTtcblxuICAgIGZ1bmN0aW9uIG9uRXJyb3IoZXJyKSB7XG4gICAgICAvLyBUaHJvdyB0aGUgb3JpZ2luYWwgZXJyb3IsIGlmIGl0J3Mgb25lIG9mIG91ciBvd24gKHVzZXItZnJpZW5kbHkpIGVycm9ycy5cbiAgICAgIC8vIE90aGVyd2lzZSwgdGhyb3cgYSBnZW5lcmljLCBmcmllbmRseSBlcnJvci5cbiAgICAgIGlmIChlcnIgJiYgIShlcnIgaW5zdGFuY2VvZiBTeW50YXhFcnJvcikpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVqZWN0KG9uby5zeW50YXgoJ1VuYWJsZSB0byByZXNvbHZlICRyZWYgcG9pbnRlciBcIiVzXCInLCBmaWxlLnVybCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogUGFyc2VzIHRoZSBnaXZlbiBmaWxlJ3MgY29udGVudHMsIHVzaW5nIHRoZSBjb25maWd1cmVkIHBhcnNlciBwbHVnaW5zLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBmaWxlICAgICAgICAgICAtIEFuIG9iamVjdCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZWZlcmVuY2VkIGZpbGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlLnVybCAgICAgICAtIFRoZSBmdWxsIFVSTCBvZiB0aGUgcmVmZXJlbmNlZCBmaWxlXG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZS5leHRlbnNpb24gLSBUaGUgbG93ZXJjYXNlZCBmaWxlIGV4dGVuc2lvbiAoZS5nLiBcIi50eHRcIiwgXCIuaHRtbFwiLCBldGMuKVxuICogQHBhcmFtIHsqfSAgICAgIGZpbGUuZGF0YSAgICAgIC0gVGhlIGZpbGUgY29udGVudHMuIFRoaXMgd2lsbCBiZSB3aGF0ZXZlciBkYXRhIHR5cGUgd2FzIHJldHVybmVkIGJ5IHRoZSByZXNvbHZlclxuICogQHBhcmFtIHskUmVmUGFyc2VyT3B0aW9uc30gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlfVxuICogVGhlIHByb21pc2UgcmVzb2x2ZXMgd2l0aCB0aGUgcGFyc2VkIGZpbGUgY29udGVudHMgYW5kIHRoZSBwYXJzZXIgdGhhdCB3YXMgdXNlZC5cbiAqL1xuZnVuY3Rpb24gcGFyc2VGaWxlKGZpbGUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGRlYnVnKCdQYXJzaW5nICVzJywgZmlsZS51cmwpO1xuXG4gICAgLy8gRmluZCB0aGUgcGFyc2VycyB0aGF0IGNhbiByZWFkIHRoaXMgZmlsZSB0eXBlLlxuICAgIC8vIElmIG5vbmUgb2YgdGhlIHBhcnNlcnMgYXJlIGFuIGV4YWN0IG1hdGNoIGZvciB0aGlzIGZpbGUsIHRoZW4gd2UnbGwgdHJ5IEFMTCBvZiB0aGVtLlxuICAgIC8vIFRoaXMgaGFuZGxlcyBzaXR1YXRpb25zIHdoZXJlIHRoZSBmaWxlIElTIGEgc3VwcG9ydGVkIHR5cGUsIGp1c3Qgd2l0aCBhbiB1bmtub3duIGV4dGVuc2lvbi5cbiAgICB2YXIgYWxsUGFyc2VycyA9IHBsdWdpbnMuYWxsKG9wdGlvbnMucGFyc2UpO1xuICAgIHZhciBmaWx0ZXJlZFBhcnNlcnMgPSBwbHVnaW5zLmZpbHRlcihhbGxQYXJzZXJzLCAnY2FuUGFyc2UnLCBmaWxlKTtcbiAgICB2YXIgcGFyc2VycyA9IGZpbHRlcmVkUGFyc2Vycy5sZW5ndGggPiAwID8gZmlsdGVyZWRQYXJzZXJzIDogYWxsUGFyc2VycztcblxuICAgIC8vIFJ1biB0aGUgcGFyc2VycywgaW4gb3JkZXIsIHVudGlsIG9uZSBvZiB0aGVtIHN1Y2NlZWRzXG4gICAgcGx1Z2lucy5zb3J0KHBhcnNlcnMpO1xuICAgIHBsdWdpbnMucnVuKHBhcnNlcnMsICdwYXJzZScsIGZpbGUpXG4gICAgICAudGhlbihvblBhcnNlZCwgb25FcnJvcik7XG5cbiAgICBmdW5jdGlvbiBvblBhcnNlZChwYXJzZXIpIHtcbiAgICAgIGlmICghcGFyc2VyLnBsdWdpbi5hbGxvd0VtcHR5ICYmIGlzRW1wdHkocGFyc2VyLnJlc3VsdCkpIHtcbiAgICAgICAgcmVqZWN0KG9uby5zeW50YXgoJ0Vycm9yIHBhcnNpbmcgXCIlc1wiIGFzICVzLiBcXG5QYXJzZWQgdmFsdWUgaXMgZW1wdHknLCBmaWxlLnVybCwgcGFyc2VyLnBsdWdpbi5uYW1lKSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZShwYXJzZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uRXJyb3IoZXJyKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGVyciA9IGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyIDogbmV3IEVycm9yKGVycik7XG4gICAgICAgIHJlamVjdChvbm8uc3ludGF4KGVyciwgJ0Vycm9yIHBhcnNpbmcgJXMnLCBmaWxlLnVybCkpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlamVjdChvbm8uc3ludGF4KCdVbmFibGUgdG8gcGFyc2UgJXMnLCBmaWxlLnVybCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXJzZWQgdmFsdWUgaXMgXCJlbXB0eVwiLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMCkgfHxcbiAgICAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS50cmltKCkubGVuZ3RoID09PSAwKSB8fFxuICAgIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCSU5BUllfUkVHRVhQID0gL1xcLihqcGVnfGpwZ3xnaWZ8cG5nfGJtcHxpY28pJC9pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIFRoZSBvcmRlciB0aGF0IHRoaXMgcGFyc2VyIHdpbGwgcnVuLCBpbiByZWxhdGlvbiB0byBvdGhlciBwYXJzZXJzLlxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgb3JkZXI6IDQwMCxcblxuICAvKipcbiAgICogV2hldGhlciB0byBhbGxvdyBcImVtcHR5XCIgZmlsZXMgKHplcm8gYnl0ZXMpLlxuICAgKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGFsbG93RW1wdHk6IHRydWUsXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGlzIHBhcnNlciBjYW4gcGFyc2UgYSBnaXZlbiBmaWxlIHJlZmVyZW5jZS5cbiAgICogUGFyc2VycyB0aGF0IHJldHVybiB0cnVlIHdpbGwgYmUgdHJpZWQsIGluIG9yZGVyLCB1bnRpbCBvbmUgc3VjY2Vzc2Z1bGx5IHBhcnNlcyB0aGUgZmlsZS5cbiAgICogUGFyc2VycyB0aGF0IHJldHVybiBmYWxzZSB3aWxsIGJlIHNraXBwZWQsIFVOTEVTUyBhbGwgcGFyc2VycyByZXR1cm5lZCBmYWxzZSwgaW4gd2hpY2ggY2FzZVxuICAgKiBldmVyeSBwYXJzZXIgd2lsbCBiZSB0cmllZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbGUgICAgICAgICAgIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJlZmVyZW5jZWQgZmlsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZS51cmwgICAgICAgLSBUaGUgZnVsbCBVUkwgb2YgdGhlIHJlZmVyZW5jZWQgZmlsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZS5leHRlbnNpb24gLSBUaGUgbG93ZXJjYXNlZCBmaWxlIGV4dGVuc2lvbiAoZS5nLiBcIi50eHRcIiwgXCIuaHRtbFwiLCBldGMuKVxuICAgKiBAcGFyYW0geyp9ICAgICAgZmlsZS5kYXRhICAgICAgLSBUaGUgZmlsZSBjb250ZW50cy4gVGhpcyB3aWxsIGJlIHdoYXRldmVyIGRhdGEgdHlwZSB3YXMgcmV0dXJuZWQgYnkgdGhlIHJlc29sdmVyXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgY2FuUGFyc2U6IGZ1bmN0aW9uIGlzQmluYXJ5KGZpbGUpIHtcbiAgICAvLyBVc2UgdGhpcyBwYXJzZXIgaWYgdGhlIGZpbGUgaXMgYSBCdWZmZXIsIGFuZCBoYXMgYSBrbm93biBiaW5hcnkgZXh0ZW5zaW9uXG4gICAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihmaWxlLmRhdGEpICYmIEJJTkFSWV9SRUdFWFAudGVzdChmaWxlLnVybCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFBhcnNlcyB0aGUgZ2l2ZW4gZGF0YSBhcyBhIEJ1ZmZlciAoYnl0ZSBhcnJheSkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaWxlICAgICAgICAgICAtIEFuIG9iamVjdCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZWZlcmVuY2VkIGZpbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUudXJsICAgICAgIC0gVGhlIGZ1bGwgVVJMIG9mIHRoZSByZWZlcmVuY2VkIGZpbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUuZXh0ZW5zaW9uIC0gVGhlIGxvd2VyY2FzZWQgZmlsZSBleHRlbnNpb24gKGUuZy4gXCIudHh0XCIsIFwiLmh0bWxcIiwgZXRjLilcbiAgICogQHBhcmFtIHsqfSAgICAgIGZpbGUuZGF0YSAgICAgIC0gVGhlIGZpbGUgY29udGVudHMuIFRoaXMgd2lsbCBiZSB3aGF0ZXZlciBkYXRhIHR5cGUgd2FzIHJldHVybmVkIGJ5IHRoZSByZXNvbHZlclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxCdWZmZXI+fVxuICAgKi9cbiAgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlQmluYXJ5KGZpbGUpIHtcbiAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGZpbGUuZGF0YSkpIHtcbiAgICAgIHJldHVybiBmaWxlLmRhdGE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gVGhpcyB3aWxsIHJlamVjdCBpZiBkYXRhIGlzIGFueXRoaW5nIG90aGVyIHRoYW4gYSBzdHJpbmcgb3IgdHlwZWQgYXJyYXlcbiAgICAgIHJldHVybiBuZXcgQnVmZmVyKGZpbGUuZGF0YSk7XG4gICAgfVxuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJy4uL3V0aWwvcHJvbWlzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIFRoZSBvcmRlciB0aGF0IHRoaXMgcGFyc2VyIHdpbGwgcnVuLCBpbiByZWxhdGlvbiB0byBvdGhlciBwYXJzZXJzLlxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgb3JkZXI6IDEwMCxcblxuICAvKipcbiAgICogV2hldGhlciB0byBhbGxvdyBcImVtcHR5XCIgZmlsZXMuIFRoaXMgaW5jbHVkZXMgemVyby1ieXRlIGZpbGVzLCBhcyB3ZWxsIGFzIGVtcHR5IEpTT04gb2JqZWN0cy5cbiAgICpcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBhbGxvd0VtcHR5OiB0cnVlLFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhpcyBwYXJzZXIgY2FuIHBhcnNlIGEgZ2l2ZW4gZmlsZSByZWZlcmVuY2UuXG4gICAqIFBhcnNlcnMgdGhhdCBtYXRjaCB3aWxsIGJlIHRyaWVkLCBpbiBvcmRlciwgdW50aWwgb25lIHN1Y2Nlc3NmdWxseSBwYXJzZXMgdGhlIGZpbGUuXG4gICAqIFBhcnNlcnMgdGhhdCBkb24ndCBtYXRjaCB3aWxsIGJlIHNraXBwZWQsIFVOTEVTUyBub25lIG9mIHRoZSBwYXJzZXJzIG1hdGNoLCBpbiB3aGljaCBjYXNlXG4gICAqIGV2ZXJ5IHBhcnNlciB3aWxsIGJlIHRyaWVkLlxuICAgKlxuICAgKiBAdHlwZSB7UmVnRXhwfHN0cmluZ1tdfGZ1bmN0aW9ufVxuICAgKi9cbiAgY2FuUGFyc2U6ICcuanNvbicsXG5cbiAgLyoqXG4gICAqIFBhcnNlcyB0aGUgZ2l2ZW4gZmlsZSBhcyBKU09OXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaWxlICAgICAgICAgICAtIEFuIG9iamVjdCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZWZlcmVuY2VkIGZpbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUudXJsICAgICAgIC0gVGhlIGZ1bGwgVVJMIG9mIHRoZSByZWZlcmVuY2VkIGZpbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUuZXh0ZW5zaW9uIC0gVGhlIGxvd2VyY2FzZWQgZmlsZSBleHRlbnNpb24gKGUuZy4gXCIudHh0XCIsIFwiLmh0bWxcIiwgZXRjLilcbiAgICogQHBhcmFtIHsqfSAgICAgIGZpbGUuZGF0YSAgICAgIC0gVGhlIGZpbGUgY29udGVudHMuIFRoaXMgd2lsbCBiZSB3aGF0ZXZlciBkYXRhIHR5cGUgd2FzIHJldHVybmVkIGJ5IHRoZSByZXNvbHZlclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIHBhcnNlOiBmdW5jdGlvbiBwYXJzZUpTT04oZmlsZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBkYXRhID0gZmlsZS5kYXRhO1xuICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuICAgICAgICBkYXRhID0gZGF0YS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChkYXRhLnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXNvbHZlKHVuZGVmaW5lZCk7ICAvLyBUaGlzIG1pcnJvcnMgdGhlIFlBTUwgYmVoYXZpb3JcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKEpTT04ucGFyc2UoZGF0YSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gZGF0YSBpcyBhbHJlYWR5IGEgSmF2YVNjcmlwdCB2YWx1ZSAob2JqZWN0LCBhcnJheSwgbnVtYmVyLCBudWxsLCBOYU4sIGV0Yy4pXG4gICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBURVhUX1JFR0VYUCA9IC9cXC4odHh0fGh0bXxodG1sfG1kfHhtbHxqc3xtaW58bWFwfGNzc3xzY3NzfGxlc3N8c3ZnKSQvaTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKlxuICAgKiBUaGUgb3JkZXIgdGhhdCB0aGlzIHBhcnNlciB3aWxsIHJ1biwgaW4gcmVsYXRpb24gdG8gb3RoZXIgcGFyc2Vycy5cbiAgICpcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIG9yZGVyOiAzMDAsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gYWxsb3cgXCJlbXB0eVwiIGZpbGVzICh6ZXJvIGJ5dGVzKS5cbiAgICpcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBhbGxvd0VtcHR5OiB0cnVlLFxuXG4gIC8qKlxuICAgKiBUaGUgZW5jb2RpbmcgdGhhdCB0aGUgdGV4dCBpcyBleHBlY3RlZCB0byBiZSBpbi5cbiAgICpcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGVuY29kaW5nOiAndXRmOCcsXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGlzIHBhcnNlciBjYW4gcGFyc2UgYSBnaXZlbiBmaWxlIHJlZmVyZW5jZS5cbiAgICogUGFyc2VycyB0aGF0IHJldHVybiB0cnVlIHdpbGwgYmUgdHJpZWQsIGluIG9yZGVyLCB1bnRpbCBvbmUgc3VjY2Vzc2Z1bGx5IHBhcnNlcyB0aGUgZmlsZS5cbiAgICogUGFyc2VycyB0aGF0IHJldHVybiBmYWxzZSB3aWxsIGJlIHNraXBwZWQsIFVOTEVTUyBhbGwgcGFyc2VycyByZXR1cm5lZCBmYWxzZSwgaW4gd2hpY2ggY2FzZVxuICAgKiBldmVyeSBwYXJzZXIgd2lsbCBiZSB0cmllZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbGUgICAgICAgICAgIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJlZmVyZW5jZWQgZmlsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZS51cmwgICAgICAgLSBUaGUgZnVsbCBVUkwgb2YgdGhlIHJlZmVyZW5jZWQgZmlsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZS5leHRlbnNpb24gLSBUaGUgbG93ZXJjYXNlZCBmaWxlIGV4dGVuc2lvbiAoZS5nLiBcIi50eHRcIiwgXCIuaHRtbFwiLCBldGMuKVxuICAgKiBAcGFyYW0geyp9ICAgICAgZmlsZS5kYXRhICAgICAgLSBUaGUgZmlsZSBjb250ZW50cy4gVGhpcyB3aWxsIGJlIHdoYXRldmVyIGRhdGEgdHlwZSB3YXMgcmV0dXJuZWQgYnkgdGhlIHJlc29sdmVyXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgY2FuUGFyc2U6IGZ1bmN0aW9uIGlzVGV4dChmaWxlKSB7XG4gICAgLy8gVXNlIHRoaXMgcGFyc2VyIGlmIHRoZSBmaWxlIGlzIGEgc3RyaW5nIG9yIEJ1ZmZlciwgYW5kIGhhcyBhIGtub3duIHRleHQtYmFzZWQgZXh0ZW5zaW9uXG4gICAgcmV0dXJuICh0eXBlb2YgZmlsZS5kYXRhID09PSAnc3RyaW5nJyB8fCBCdWZmZXIuaXNCdWZmZXIoZmlsZS5kYXRhKSkgJiYgVEVYVF9SRUdFWFAudGVzdChmaWxlLnVybCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFBhcnNlcyB0aGUgZ2l2ZW4gZmlsZSBhcyB0ZXh0XG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaWxlICAgICAgICAgICAtIEFuIG9iamVjdCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZWZlcmVuY2VkIGZpbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUudXJsICAgICAgIC0gVGhlIGZ1bGwgVVJMIG9mIHRoZSByZWZlcmVuY2VkIGZpbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUuZXh0ZW5zaW9uIC0gVGhlIGxvd2VyY2FzZWQgZmlsZSBleHRlbnNpb24gKGUuZy4gXCIudHh0XCIsIFwiLmh0bWxcIiwgZXRjLilcbiAgICogQHBhcmFtIHsqfSAgICAgIGZpbGUuZGF0YSAgICAgIC0gVGhlIGZpbGUgY29udGVudHMuIFRoaXMgd2lsbCBiZSB3aGF0ZXZlciBkYXRhIHR5cGUgd2FzIHJldHVybmVkIGJ5IHRoZSByZXNvbHZlclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fVxuICAgKi9cbiAgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlVGV4dChmaWxlKSB7XG4gICAgaWYgKHR5cGVvZiBmaWxlLmRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gZmlsZS5kYXRhO1xuICAgIH1cbiAgICBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIoZmlsZS5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZpbGUuZGF0YS50b1N0cmluZyh0aGlzLmVuY29kaW5nKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgaXMgbm90IHRleHQnKTtcbiAgICB9XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBQcm9taXNlID0gcmVxdWlyZSgnLi4vdXRpbC9wcm9taXNlJyksXG4gICAgWUFNTCAgICA9IHJlcXVpcmUoJy4uL3V0aWwveWFtbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIFRoZSBvcmRlciB0aGF0IHRoaXMgcGFyc2VyIHdpbGwgcnVuLCBpbiByZWxhdGlvbiB0byBvdGhlciBwYXJzZXJzLlxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgb3JkZXI6IDIwMCxcblxuICAvKipcbiAgICogV2hldGhlciB0byBhbGxvdyBcImVtcHR5XCIgZmlsZXMuIFRoaXMgaW5jbHVkZXMgemVyby1ieXRlIGZpbGVzLCBhcyB3ZWxsIGFzIGVtcHR5IEpTT04gb2JqZWN0cy5cbiAgICpcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBhbGxvd0VtcHR5OiB0cnVlLFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhpcyBwYXJzZXIgY2FuIHBhcnNlIGEgZ2l2ZW4gZmlsZSByZWZlcmVuY2UuXG4gICAqIFBhcnNlcnMgdGhhdCBtYXRjaCB3aWxsIGJlIHRyaWVkLCBpbiBvcmRlciwgdW50aWwgb25lIHN1Y2Nlc3NmdWxseSBwYXJzZXMgdGhlIGZpbGUuXG4gICAqIFBhcnNlcnMgdGhhdCBkb24ndCBtYXRjaCB3aWxsIGJlIHNraXBwZWQsIFVOTEVTUyBub25lIG9mIHRoZSBwYXJzZXJzIG1hdGNoLCBpbiB3aGljaCBjYXNlXG4gICAqIGV2ZXJ5IHBhcnNlciB3aWxsIGJlIHRyaWVkLlxuICAgKlxuICAgKiBAdHlwZSB7UmVnRXhwfHN0cmluZ1tdfGZ1bmN0aW9ufVxuICAgKi9cbiAgY2FuUGFyc2U6IFsnLnlhbWwnLCAnLnltbCcsICcuanNvbiddLCAgLy8gSlNPTiBpcyB2YWxpZCBZQU1MXG5cbiAgLyoqXG4gICAqIFBhcnNlcyB0aGUgZ2l2ZW4gZmlsZSBhcyBZQU1MXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaWxlICAgICAgICAgICAtIEFuIG9iamVjdCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZWZlcmVuY2VkIGZpbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUudXJsICAgICAgIC0gVGhlIGZ1bGwgVVJMIG9mIHRoZSByZWZlcmVuY2VkIGZpbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUuZXh0ZW5zaW9uIC0gVGhlIGxvd2VyY2FzZWQgZmlsZSBleHRlbnNpb24gKGUuZy4gXCIudHh0XCIsIFwiLmh0bWxcIiwgZXRjLilcbiAgICogQHBhcmFtIHsqfSAgICAgIGZpbGUuZGF0YSAgICAgIC0gVGhlIGZpbGUgY29udGVudHMuIFRoaXMgd2lsbCBiZSB3aGF0ZXZlciBkYXRhIHR5cGUgd2FzIHJldHVybmVkIGJ5IHRoZSByZXNvbHZlclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIHBhcnNlOiBmdW5jdGlvbiBwYXJzZVlBTUwoZmlsZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBkYXRhID0gZmlsZS5kYXRhO1xuICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuICAgICAgICBkYXRhID0gZGF0YS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJlc29sdmUoWUFNTC5wYXJzZShkYXRhKSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gZGF0YSBpcyBhbHJlYWR5IGEgSmF2YVNjcmlwdCB2YWx1ZSAob2JqZWN0LCBhcnJheSwgbnVtYmVyLCBudWxsLCBOYU4sIGV0Yy4pXG4gICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUG9pbnRlcjtcblxudmFyICRSZWYgICAgICAgICA9IHJlcXVpcmUoJy4vcmVmJyksXG4gICAgdXJsICAgICAgICAgID0gcmVxdWlyZSgnLi91dGlsL3VybCcpLFxuICAgIG9ubyAgICAgICAgICA9IHJlcXVpcmUoJ29ubycpLFxuICAgIHNsYXNoZXMgICAgICA9IC9cXC8vZyxcbiAgICB0aWxkZXMgICAgICAgPSAvfi9nLFxuICAgIGVzY2FwZWRTbGFzaCA9IC9+MS9nLFxuICAgIGVzY2FwZWRUaWxkZSA9IC9+MC9nO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIHNpbmdsZSBKU09OIHBvaW50ZXIgYW5kIGl0cyByZXNvbHZlZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0geyRSZWZ9ICRyZWZcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUG9pbnRlcigkcmVmLCBwYXRoKSB7XG4gIC8qKlxuICAgKiBUaGUge0BsaW5rICRSZWZ9IG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoaXMge0BsaW5rIFBvaW50ZXJ9IG9iamVjdC5cbiAgICogQHR5cGUgeyRSZWZ9XG4gICAqL1xuICB0aGlzLiRyZWYgPSAkcmVmO1xuXG4gIC8qKlxuICAgKiBUaGUgZmlsZSBwYXRoIG9yIFVSTCwgY29udGFpbmluZyB0aGUgSlNPTiBwb2ludGVyIGluIHRoZSBoYXNoLlxuICAgKiBUaGlzIHBhdGggaXMgcmVsYXRpdmUgdG8gdGhlIHBhdGggb2YgdGhlIG1haW4gSlNPTiBzY2hlbWEgZmlsZS5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHRoaXMucGF0aCA9IHBhdGg7XG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgSlNPTiBwb2ludGVyLlxuICAgKiBDYW4gYmUgYW55IEpTT04gdHlwZSwgbm90IGp1c3Qgb2JqZWN0cy4gVW5rbm93biBmaWxlIHR5cGVzIGFyZSByZXByZXNlbnRlZCBhcyBCdWZmZXJzIChieXRlIGFycmF5cykuXG4gICAqIEB0eXBlIHs/Kn1cbiAgICovXG4gIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBwb2ludGVyIHJlZmVyZW5jZXMgaXRzZWxmLlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIHRoaXMuY2lyY3VsYXIgPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgdmFsdWUgb2YgYSBuZXN0ZWQgcHJvcGVydHkgd2l0aGluIHRoZSBnaXZlbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHsqfSBvYmogLSBUaGUgb2JqZWN0IHRoYXQgd2lsbCBiZSBjcmF3bGVkXG4gKiBAcGFyYW0geyRSZWZQYXJzZXJPcHRpb25zfSBvcHRpb25zXG4gKlxuICogQHJldHVybnMge1BvaW50ZXJ9XG4gKiBSZXR1cm5zIGEgSlNPTiBwb2ludGVyIHdob3NlIHtAbGluayBQb2ludGVyI3ZhbHVlfSBpcyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKiBJZiByZXNvbHZpbmcgdGhpcyB2YWx1ZSByZXF1aXJlZCByZXNvbHZpbmcgb3RoZXIgSlNPTiByZWZlcmVuY2VzLCB0aGVuXG4gKiB0aGUge0BsaW5rIFBvaW50ZXIjJHJlZn0gYW5kIHtAbGluayBQb2ludGVyI3BhdGh9IHdpbGwgcmVmbGVjdCB0aGUgcmVzb2x1dGlvbiBwYXRoXG4gKiBvZiB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKi9cblBvaW50ZXIucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbihvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFBvaW50ZXIucGFyc2UodGhpcy5wYXRoKTtcblxuICAvLyBDcmF3bCB0aGUgb2JqZWN0LCBvbmUgdG9rZW4gYXQgYSB0aW1lXG4gIHRoaXMudmFsdWUgPSBvYmo7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHJlc29sdmVJZiRSZWYodGhpcywgb3B0aW9ucykpIHtcbiAgICAgIC8vIFRoZSAkcmVmIHBhdGggaGFzIGNoYW5nZWQsIHNvIGFwcGVuZCB0aGUgcmVtYWluaW5nIHRva2VucyB0byB0aGUgcGF0aFxuICAgICAgdGhpcy5wYXRoID0gUG9pbnRlci5qb2luKHRoaXMucGF0aCwgdG9rZW5zLnNsaWNlKGkpKTtcbiAgICB9XG5cbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgaWYgKHRoaXMudmFsdWVbdG9rZW5dID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG9uby5zeW50YXgoJ0Vycm9yIHJlc29sdmluZyAkcmVmIHBvaW50ZXIgXCIlc1wiLiBcXG5Ub2tlbiBcIiVzXCIgZG9lcyBub3QgZXhpc3QuJywgdGhpcy5wYXRoLCB0b2tlbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWVbdG9rZW5dO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlc29sdmUgdGhlIGZpbmFsIHZhbHVlXG4gIHJlc29sdmVJZiRSZWYodGhpcywgb3B0aW9ucyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSB2YWx1ZSBvZiBhIG5lc3RlZCBwcm9wZXJ0eSB3aXRoaW4gdGhlIGdpdmVuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0geyp9IG9iaiAtIFRoZSBvYmplY3QgdGhhdCB3aWxsIGJlIGNyYXdsZWRcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gYXNzaWduXG4gKiBAcGFyYW0geyRSZWZQYXJzZXJPcHRpb25zfSBvcHRpb25zXG4gKlxuICogQHJldHVybnMgeyp9XG4gKiBSZXR1cm5zIHRoZSBtb2RpZmllZCBvYmplY3QsIG9yIGFuIGVudGlyZWx5IG5ldyBvYmplY3QgaWYgdGhlIGVudGlyZSBvYmplY3QgaXMgb3ZlcndyaXR0ZW4uXG4gKi9cblBvaW50ZXIucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG9iaiwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFBvaW50ZXIucGFyc2UodGhpcy5wYXRoKTtcbiAgdmFyIHRva2VuO1xuXG4gIGlmICh0b2tlbnMubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gVGhlcmUgYXJlIG5vIHRva2VucywgcmVwbGFjZSB0aGUgZW50aXJlIG9iamVjdCB3aXRoIHRoZSBuZXcgdmFsdWVcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLy8gQ3Jhd2wgdGhlIG9iamVjdCwgb25lIHRva2VuIGF0IGEgdGltZVxuICB0aGlzLnZhbHVlID0gb2JqO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICByZXNvbHZlSWYkUmVmKHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgaWYgKHRoaXMudmFsdWUgJiYgdGhpcy52YWx1ZVt0b2tlbl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gVGhlIHRva2VuIGV4aXN0c1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWVbdG9rZW5dO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIFRoZSB0b2tlbiBkb2Vzbid0IGV4aXN0LCBzbyBjcmVhdGUgaXRcbiAgICAgIHRoaXMudmFsdWUgPSBzZXRWYWx1ZSh0aGlzLCB0b2tlbiwge30pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNldCB0aGUgdmFsdWUgb2YgdGhlIGZpbmFsIHRva2VuXG4gIHJlc29sdmVJZiRSZWYodGhpcywgb3B0aW9ucyk7XG4gIHRva2VuID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXTtcbiAgc2V0VmFsdWUodGhpcywgdG9rZW4sIHZhbHVlKTtcblxuICAvLyBSZXR1cm4gdGhlIHVwZGF0ZWQgb2JqZWN0XG4gIHJldHVybiBvYmo7XG59O1xuXG4vKipcbiAqIFBhcnNlcyBhIEpTT04gcG9pbnRlciAob3IgYSBwYXRoIGNvbnRhaW5pbmcgYSBKU09OIHBvaW50ZXIgaW4gdGhlIGhhc2gpXG4gKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcG9pbnRlcidzIHRva2Vucy5cbiAqIChlLmcuIFwic2NoZW1hLmpzb24jL2RlZmluaXRpb25zL3BlcnNvbi9uYW1lXCIgPT4gW1wiZGVmaW5pdGlvbnNcIiwgXCJwZXJzb25cIiwgXCJuYW1lXCJdKVxuICpcbiAqIFRoZSBwb2ludGVyIGlzIHBhcnNlZCBhY2NvcmRpbmcgdG8gUkZDIDY5MDFcbiAqIHtAbGluayBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjkwMSNzZWN0aW9uLTN9XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAqIEByZXR1cm5zIHtzdHJpbmdbXX1cbiAqL1xuUG9pbnRlci5wYXJzZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgLy8gR2V0IHRoZSBKU09OIHBvaW50ZXIgZnJvbSB0aGUgcGF0aCdzIGhhc2hcbiAgdmFyIHBvaW50ZXIgPSB1cmwuZ2V0SGFzaChwYXRoKS5zdWJzdHIoMSk7XG5cbiAgLy8gSWYgdGhlcmUncyBubyBwb2ludGVyLCB0aGVuIHRoZXJlIGFyZSBubyB0b2tlbnMsXG4gIC8vIHNvIHJldHVybiBhbiBlbXB0eSBhcnJheVxuICBpZiAoIXBvaW50ZXIpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICAvLyBTcGxpdCBpbnRvIGFuIGFycmF5XG4gIHBvaW50ZXIgPSBwb2ludGVyLnNwbGl0KCcvJyk7XG5cbiAgLy8gRGVjb2RlIGVhY2ggcGFydCwgYWNjb3JkaW5nIHRvIFJGQyA2OTAxXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRlci5sZW5ndGg7IGkrKykge1xuICAgIHBvaW50ZXJbaV0gPSBkZWNvZGVVUkkocG9pbnRlcltpXS5yZXBsYWNlKGVzY2FwZWRTbGFzaCwgJy8nKS5yZXBsYWNlKGVzY2FwZWRUaWxkZSwgJ34nKSk7XG4gIH1cblxuICBpZiAocG9pbnRlclswXSAhPT0gJycpIHtcbiAgICB0aHJvdyBvbm8uc3ludGF4KCdJbnZhbGlkICRyZWYgcG9pbnRlciBcIiVzXCIuIFBvaW50ZXJzIG11c3QgYmVnaW4gd2l0aCBcIiMvXCInLCBwb2ludGVyKTtcbiAgfVxuXG4gIHJldHVybiBwb2ludGVyLnNsaWNlKDEpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgSlNPTiBwb2ludGVyIHBhdGgsIGJ5IGpvaW5pbmcgb25lIG9yIG1vcmUgdG9rZW5zIHRvIGEgYmFzZSBwYXRoLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlIC0gVGhlIGJhc2UgcGF0aCAoZS5nLiBcInNjaGVtYS5qc29uIy9kZWZpbml0aW9ucy9wZXJzb25cIilcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSB0b2tlbnMgLSBUaGUgdG9rZW4ocykgdG8gYXBwZW5kIChlLmcuIFtcIm5hbWVcIiwgXCJmaXJzdFwiXSlcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cblBvaW50ZXIuam9pbiA9IGZ1bmN0aW9uKGJhc2UsIHRva2Vucykge1xuICAvLyBFbnN1cmUgdGhhdCB0aGUgYmFzZSBwYXRoIGNvbnRhaW5zIGEgaGFzaFxuICBpZiAoYmFzZS5pbmRleE9mKCcjJykgPT09IC0xKSB7XG4gICAgYmFzZSArPSAnIyc7XG4gIH1cblxuICAvLyBBcHBlbmQgZWFjaCB0b2tlbiB0byB0aGUgYmFzZSBwYXRoXG4gIHRva2VucyA9IEFycmF5LmlzQXJyYXkodG9rZW5zKSA/IHRva2VucyA6IFt0b2tlbnNdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAvLyBFbmNvZGUgdGhlIHRva2VuLCBhY2NvcmRpbmcgdG8gUkZDIDY5MDFcbiAgICBiYXNlICs9ICcvJyArIGVuY29kZVVSSSh0b2tlbi5yZXBsYWNlKHRpbGRlcywgJ34wJykucmVwbGFjZShzbGFzaGVzLCAnfjEnKSk7XG4gIH1cblxuICByZXR1cm4gYmFzZTtcbn07XG5cbi8qKlxuICogSWYgdGhlIGdpdmVuIHBvaW50ZXIncyB7QGxpbmsgUG9pbnRlciN2YWx1ZX0gaXMgYSBKU09OIHJlZmVyZW5jZSxcbiAqIHRoZW4gdGhlIHJlZmVyZW5jZSBpcyByZXNvbHZlZCBhbmQge0BsaW5rIFBvaW50ZXIjdmFsdWV9IGlzIHJlcGxhY2VkIHdpdGggdGhlIHJlc29sdmVkIHZhbHVlLlxuICogSW4gYWRkaXRpb24sIHtAbGluayBQb2ludGVyI3BhdGh9IGFuZCB7QGxpbmsgUG9pbnRlciMkcmVmfSBhcmUgdXBkYXRlZCB0byByZWZsZWN0IHRoZVxuICogcmVzb2x1dGlvbiBwYXRoIG9mIHRoZSBuZXcgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtQb2ludGVyfSBwb2ludGVyXG4gKiBAcGFyYW0geyRSZWZQYXJzZXJPcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcmVzb2x1dGlvbiBwYXRoIGNoYW5nZWRcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUlmJFJlZihwb2ludGVyLCBvcHRpb25zKSB7XG4gIC8vIElzIHRoZSB2YWx1ZSBhIEpTT04gcmVmZXJlbmNlPyAoYW5kIGFsbG93ZWQ/KVxuXG4gIGlmICgkUmVmLmlzQWxsb3dlZCRSZWYocG9pbnRlci52YWx1ZSwgb3B0aW9ucykpIHtcbiAgICB2YXIgJHJlZlBhdGggPSB1cmwucmVzb2x2ZShwb2ludGVyLnBhdGgsIHBvaW50ZXIudmFsdWUuJHJlZik7XG5cbiAgICBpZiAoJHJlZlBhdGggPT09IHBvaW50ZXIucGF0aCkge1xuICAgICAgLy8gVGhlIHZhbHVlIGlzIGEgcmVmZXJlbmNlIHRvIGl0c2VsZiwgc28gdGhlcmUncyBub3RoaW5nIHRvIGRvLlxuICAgICAgcG9pbnRlci5jaXJjdWxhciA9IHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHJlc29sdmVkID0gcG9pbnRlci4kcmVmLiRyZWZzLl9yZXNvbHZlKCRyZWZQYXRoLCBvcHRpb25zKTtcblxuICAgICAgaWYgKCRSZWYuaXNFeHRlbmRlZCRSZWYocG9pbnRlci52YWx1ZSkpIHtcbiAgICAgICAgLy8gVGhpcyBKU09OIHJlZmVyZW5jZSBcImV4dGVuZHNcIiB0aGUgcmVzb2x2ZWQgdmFsdWUsIHJhdGhlciB0aGFuIHNpbXBseSBwb2ludGluZyB0byBpdC5cbiAgICAgICAgLy8gU28gdGhlIHJlc29sdmVkIHBhdGggZG9lcyBOT1QgY2hhbmdlLiAgSnVzdCB0aGUgdmFsdWUgZG9lcy5cbiAgICAgICAgcG9pbnRlci52YWx1ZSA9ICRSZWYuZGVyZWZlcmVuY2UocG9pbnRlci52YWx1ZSwgcmVzb2x2ZWQudmFsdWUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIFJlc29sdmUgdGhlIHJlZmVyZW5jZVxuICAgICAgICBwb2ludGVyLiRyZWYgPSByZXNvbHZlZC4kcmVmO1xuICAgICAgICBwb2ludGVyLnBhdGggPSByZXNvbHZlZC5wYXRoO1xuICAgICAgICBwb2ludGVyLnZhbHVlID0gcmVzb2x2ZWQudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFNldHMgdGhlIHNwZWNpZmllZCB0b2tlbiB2YWx1ZSBvZiB0aGUge0BsaW5rIFBvaW50ZXIjdmFsdWV9LlxuICpcbiAqIFRoZSB0b2tlbiBpcyBldmFsdWF0ZWQgYWNjb3JkaW5nIHRvIFJGQyA2OTAxLlxuICoge0BsaW5rIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2OTAxI3NlY3Rpb24tNH1cbiAqXG4gKiBAcGFyYW0ge1BvaW50ZXJ9IHBvaW50ZXIgLSBUaGUgSlNPTiBQb2ludGVyIHdob3NlIHZhbHVlIHdpbGwgYmUgbW9kaWZpZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b2tlbiAtIEEgSlNPTiBQb2ludGVyIHRva2VuIHRoYXQgaW5kaWNhdGVzIGhvdyB0byBtb2RpZnkgYG9iamBcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gYXNzaWduXG4gKiBAcmV0dXJucyB7Kn0gLSBSZXR1cm5zIHRoZSBhc3NpZ25lZCB2YWx1ZVxuICovXG5mdW5jdGlvbiBzZXRWYWx1ZShwb2ludGVyLCB0b2tlbiwgdmFsdWUpIHtcbiAgaWYgKHBvaW50ZXIudmFsdWUgJiYgdHlwZW9mIHBvaW50ZXIudmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHRva2VuID09PSAnLScgJiYgQXJyYXkuaXNBcnJheShwb2ludGVyLnZhbHVlKSkge1xuICAgICAgcG9pbnRlci52YWx1ZS5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBwb2ludGVyLnZhbHVlW3Rva2VuXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICB0aHJvdyBvbm8uc3ludGF4KCdFcnJvciBhc3NpZ25pbmcgJHJlZiBwb2ludGVyIFwiJXNcIi4gXFxuQ2Fubm90IHNldCBcIiVzXCIgb2YgYSBub24tb2JqZWN0LicsIHBvaW50ZXIucGF0aCwgdG9rZW4pO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSAkUmVmO1xuXG52YXIgUG9pbnRlciA9IHJlcXVpcmUoJy4vcG9pbnRlcicpO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIHNpbmdsZSBKU09OIHJlZmVyZW5jZSBhbmQgaXRzIHJlc29sdmVkIHZhbHVlLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiAkUmVmKCkge1xuICAvKipcbiAgICogVGhlIGZpbGUgcGF0aCBvciBVUkwgb2YgdGhlIHJlZmVyZW5jZWQgZmlsZS5cbiAgICogVGhpcyBwYXRoIGlzIHJlbGF0aXZlIHRvIHRoZSBwYXRoIG9mIHRoZSBtYWluIEpTT04gc2NoZW1hIGZpbGUuXG4gICAqXG4gICAqIFRoaXMgcGF0aCBkb2VzIE5PVCBjb250YWluIGRvY3VtZW50IGZyYWdtZW50cyAoSlNPTiBwb2ludGVycykuIEl0IGFsd2F5cyByZWZlcmVuY2VzIGFuIEVOVElSRSBmaWxlLlxuICAgKiBVc2UgbWV0aG9kcyBzdWNoIGFzIHtAbGluayAkUmVmI2dldH0sIHtAbGluayAkUmVmI3Jlc29sdmV9LCBhbmQge0BsaW5rICRSZWYjZXhpc3RzfSB0byBnZXRcbiAgICogc3BlY2lmaWMgSlNPTiBwb2ludGVycyB3aXRoaW4gdGhlIGZpbGUuXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aGlzLnBhdGggPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFRoZSByZXNvbHZlZCB2YWx1ZSBvZiB0aGUgSlNPTiByZWZlcmVuY2UuXG4gICAqIENhbiBiZSBhbnkgSlNPTiB0eXBlLCBub3QganVzdCBvYmplY3RzLiBVbmtub3duIGZpbGUgdHlwZXMgYXJlIHJlcHJlc2VudGVkIGFzIEJ1ZmZlcnMgKGJ5dGUgYXJyYXlzKS5cbiAgICogQHR5cGUgez8qfVxuICAgKi9cbiAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVGhlIHtAbGluayAkUmVmc30gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhpcyB7QGxpbmsgJFJlZn0gb2JqZWN0LlxuICAgKiBAdHlwZSB7JFJlZnN9XG4gICAqL1xuICB0aGlzLiRyZWZzID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgdGhlIHR5cGUgb2Yge0BsaW5rICRSZWYjcGF0aH0gKGUuZy4gXCJmaWxlXCIsIFwiaHR0cFwiLCBldGMuKVxuICAgKiBAdHlwZSB7P3N0cmluZ31cbiAgICovXG4gIHRoaXMucGF0aFR5cGUgPSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBnaXZlbiBKU09OIHJlZmVyZW5jZSBleGlzdHMgd2l0aGluIHRoaXMge0BsaW5rICRSZWYjdmFsdWV9LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIGZ1bGwgcGF0aCBiZWluZyByZXNvbHZlZCwgb3B0aW9uYWxseSB3aXRoIGEgSlNPTiBwb2ludGVyIGluIHRoZSBoYXNoXG4gKiBAcGFyYW0geyRSZWZQYXJzZXJPcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuJFJlZi5wcm90b3R5cGUuZXhpc3RzID0gZnVuY3Rpb24ocGF0aCwgb3B0aW9ucykge1xuICB0cnkge1xuICAgIHRoaXMucmVzb2x2ZShwYXRoLCBvcHRpb25zKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgZ2l2ZW4gSlNPTiByZWZlcmVuY2Ugd2l0aGluIHRoaXMge0BsaW5rICRSZWYjdmFsdWV9IGFuZCByZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBmdWxsIHBhdGggYmVpbmcgcmVzb2x2ZWQsIG9wdGlvbmFsbHkgd2l0aCBhIEpTT04gcG9pbnRlciBpbiB0aGUgaGFzaFxuICogQHBhcmFtIHskUmVmUGFyc2VyT3B0aW9uc30gb3B0aW9uc1xuICogQHJldHVybnMgeyp9IC0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWVcbiAqL1xuJFJlZi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24ocGF0aCwgb3B0aW9ucykge1xuICByZXR1cm4gdGhpcy5yZXNvbHZlKHBhdGgsIG9wdGlvbnMpLnZhbHVlO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgZ2l2ZW4gSlNPTiByZWZlcmVuY2Ugd2l0aGluIHRoaXMge0BsaW5rICRSZWYjdmFsdWV9LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIGZ1bGwgcGF0aCBiZWluZyByZXNvbHZlZCwgb3B0aW9uYWxseSB3aXRoIGEgSlNPTiBwb2ludGVyIGluIHRoZSBoYXNoXG4gKiBAcGFyYW0geyRSZWZQYXJzZXJPcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7UG9pbnRlcn1cbiAqL1xuJFJlZi5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIHBvaW50ZXIgPSBuZXcgUG9pbnRlcih0aGlzLCBwYXRoKTtcbiAgcmV0dXJuIHBvaW50ZXIucmVzb2x2ZSh0aGlzLnZhbHVlLCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgdmFsdWUgb2YgYSBuZXN0ZWQgcHJvcGVydHkgd2l0aGluIHRoaXMge0BsaW5rICRSZWYjdmFsdWV9LlxuICogSWYgdGhlIHByb3BlcnR5LCBvciBhbnkgb2YgaXRzIHBhcmVudHMgZG9uJ3QgZXhpc3QsIHRoZXkgd2lsbCBiZSBjcmVhdGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIGZ1bGwgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LCBvcHRpb25hbGx5IHdpdGggYSBKU09OIHBvaW50ZXIgaW4gdGhlIGhhc2hcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gYXNzaWduXG4gKi9cbiRSZWYucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKHBhdGgsIHZhbHVlKSB7XG4gIHZhciBwb2ludGVyID0gbmV3IFBvaW50ZXIodGhpcywgcGF0aCk7XG4gIHRoaXMudmFsdWUgPSBwb2ludGVyLnNldCh0aGlzLnZhbHVlLCB2YWx1ZSk7XG59O1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBKU09OIHJlZmVyZW5jZS5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGluc3BlY3RcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG4kUmVmLmlzJFJlZiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZS4kcmVmID09PSAnc3RyaW5nJyAmJiB2YWx1ZS4kcmVmLmxlbmd0aCA+IDA7XG59O1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gZXh0ZXJuYWwgSlNPTiByZWZlcmVuY2UuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBpbnNwZWN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuJFJlZi5pc0V4dGVybmFsJFJlZiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiAkUmVmLmlzJFJlZih2YWx1ZSkgJiYgdmFsdWUuJHJlZlswXSAhPT0gJyMnO1xufTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGlzIGEgSlNPTiByZWZlcmVuY2UsIGFuZCB3aGV0aGVyIGl0IGlzIGFsbG93ZWQgYnkgdGhlIG9wdGlvbnMuXG4gKiBGb3IgZXhhbXBsZSwgaWYgaXQgcmVmZXJlbmNlcyBhbiBleHRlcm5hbCBmaWxlLCB0aGVuIG9wdGlvbnMucmVzb2x2ZS5leHRlcm5hbCBtdXN0IGJlIHRydWUuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBpbnNwZWN0XG4gKiBAcGFyYW0geyRSZWZQYXJzZXJPcHRpb25zfSBvcHRpb25zXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuJFJlZi5pc0FsbG93ZWQkUmVmID0gZnVuY3Rpb24odmFsdWUsIG9wdGlvbnMpIHtcbiAgaWYgKCRSZWYuaXMkUmVmKHZhbHVlKSkge1xuICAgIGlmICh2YWx1ZS4kcmVmLnN1YnN0cigwLCAyKSA9PT0gJyMvJyB8fCB2YWx1ZS4kcmVmID09PSAnIycpIHtcbiAgICAgIC8vIEl0J3MgYSBKU09OIFBvaW50ZXIgcmVmZXJlbmNlLCB3aGljaCBpcyBhbHdheXMgYWxsb3dlZFxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHZhbHVlLiRyZWZbMF0gIT09ICcjJyAmJiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5yZXNvbHZlLmV4dGVybmFsKSkge1xuICAgICAgLy8gSXQncyBhbiBleHRlcm5hbCByZWZlcmVuY2UsIHdoaWNoIGlzIGFsbG93ZWQgYnkgdGhlIG9wdGlvbnNcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGlzIGEgSlNPTiByZWZlcmVuY2UgdGhhdCBcImV4dGVuZHNcIiBpdHMgcmVzb2x2ZWQgdmFsdWUuXG4gKiBUaGF0IGlzLCBpdCBoYXMgZXh0cmEgcHJvcGVydGllcyAoaW4gYWRkaXRpb24gdG8gXCIkcmVmXCIpLCBzbyByYXRoZXIgdGhhbiBzaW1wbHkgcG9pbnRpbmcgdG9cbiAqIGFuIGV4aXN0aW5nIHZhbHVlLCB0aGlzICRyZWYgYWN0dWFsbHkgY3JlYXRlcyBhIE5FVyB2YWx1ZSB0aGF0IGlzIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSByZXNvbHZlZFxuICogdmFsdWUsIHBsdXMgdGhlIGV4dHJhIHByb3BlcnRpZXMuXG4gKlxuICogQGV4YW1wbGU6XG4gKiAge1xuICogICAgcGVyc29uOiB7XG4gKiAgICAgIHByb3BlcnRpZXM6IHtcbiAqICAgICAgICBmaXJzdE5hbWU6IHsgdHlwZTogc3RyaW5nIH1cbiAqICAgICAgICBsYXN0TmFtZTogeyB0eXBlOiBzdHJpbmcgfVxuICogICAgICB9XG4gKiAgICB9XG4gKiAgICBlbXBsb3llZToge1xuICogICAgICBwcm9wZXJ0aWVzOiB7XG4gKiAgICAgICAgJHJlZjogIy9wZXJzb24vcHJvcGVydGllc1xuICogICAgICAgIHNhbGFyeTogeyB0eXBlOiBudW1iZXIgfVxuICogICAgICB9XG4gKiAgICB9XG4gKiAgfVxuICpcbiAqICBJbiB0aGlzIGV4YW1wbGUsIFwiZW1wbG95ZWVcIiBpcyBhbiBleHRlbmRlZCAkcmVmLCBzaW5jZSBpdCBleHRlbmRzIFwicGVyc29uXCIgd2l0aCBhbiBhZGRpdGlvbmFsXG4gKiAgcHJvcGVydHkgKHNhbGFyeSkuICBUaGUgcmVzdWx0IGlzIGEgTkVXIHZhbHVlIHRoYXQgbG9va3MgbGlrZSB0aGlzOlxuICpcbiAqICB7XG4gKiAgICBwcm9wZXJ0aWVzOiB7XG4gKiAgICAgIGZpcnN0TmFtZTogeyB0eXBlOiBzdHJpbmcgfVxuICogICAgICBsYXN0TmFtZTogeyB0eXBlOiBzdHJpbmcgfVxuICogICAgICBzYWxhcnk6IHsgdHlwZTogbnVtYmVyIH1cbiAqICAgIH1cbiAqICB9XG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBpbnNwZWN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuJFJlZi5pc0V4dGVuZGVkJFJlZiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiAkUmVmLmlzJFJlZih2YWx1ZSkgJiYgT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA+IDE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlIG9mIGEgSlNPTiBSZWZlcmVuY2UuXG4gKiBJZiBuZWNlc3NhcnksIHRoZSByZXNvbHZlZCB2YWx1ZSBpcyBtZXJnZWQgd2l0aCB0aGUgSlNPTiBSZWZlcmVuY2UgdG8gY3JlYXRlIGEgbmV3IG9iamVjdFxuICpcbiAqIEBleGFtcGxlOlxuICogIHtcbiAqICAgIHBlcnNvbjoge1xuICogICAgICBwcm9wZXJ0aWVzOiB7XG4gKiAgICAgICAgZmlyc3ROYW1lOiB7IHR5cGU6IHN0cmluZyB9XG4gKiAgICAgICAgbGFzdE5hbWU6IHsgdHlwZTogc3RyaW5nIH1cbiAqICAgICAgfVxuICogICAgfVxuICogICAgZW1wbG95ZWU6IHtcbiAqICAgICAgcHJvcGVydGllczoge1xuICogICAgICAgICRyZWY6ICMvcGVyc29uL3Byb3BlcnRpZXNcbiAqICAgICAgICBzYWxhcnk6IHsgdHlwZTogbnVtYmVyIH1cbiAqICAgICAgfVxuICogICAgfVxuICogIH1cbiAqXG4gKiAgV2hlbiBcInBlcnNvblwiIGFuZCBcImVtcGxveWVlXCIgYXJlIG1lcmdlZCwgeW91IGVuZCB1cCB3aXRoIHRoZSBmb2xsb3dpbmcgb2JqZWN0OlxuICpcbiAqICB7XG4gKiAgICBwcm9wZXJ0aWVzOiB7XG4gKiAgICAgIGZpcnN0TmFtZTogeyB0eXBlOiBzdHJpbmcgfVxuICogICAgICBsYXN0TmFtZTogeyB0eXBlOiBzdHJpbmcgfVxuICogICAgICBzYWxhcnk6IHsgdHlwZTogbnVtYmVyIH1cbiAqICAgIH1cbiAqICB9XG4gKlxuICogQHBhcmFtIHtvYmplY3R9ICRyZWYgLSBUaGUgSlNPTiByZWZlcmVuY2Ugb2JqZWN0ICh0aGUgb25lIHdpdGggdGhlIFwiJHJlZlwiIHByb3BlcnR5KVxuICogQHBhcmFtIHsqfSByZXNvbHZlZFZhbHVlIC0gVGhlIHJlc29sdmVkIHZhbHVlLCB3aGljaCBjYW4gYmUgYW55IHR5cGVcbiAqIEByZXR1cm5zIHsqfSAtIFJldHVybnMgdGhlIGRlcmVmZXJlbmNlZCB2YWx1ZVxuICovXG4kUmVmLmRlcmVmZXJlbmNlID0gZnVuY3Rpb24oJHJlZiwgcmVzb2x2ZWRWYWx1ZSkge1xuICBpZiAocmVzb2x2ZWRWYWx1ZSAmJiB0eXBlb2YgcmVzb2x2ZWRWYWx1ZSA9PT0gJ29iamVjdCcgJiYgJFJlZi5pc0V4dGVuZGVkJFJlZigkcmVmKSkge1xuICAgIHZhciBtZXJnZWQgPSB7fTtcbiAgICBPYmplY3Qua2V5cygkcmVmKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgaWYgKGtleSAhPT0gJyRyZWYnKSB7XG4gICAgICAgIG1lcmdlZFtrZXldID0gJHJlZltrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICAgIE9iamVjdC5rZXlzKHJlc29sdmVkVmFsdWUpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICBpZiAoIShrZXkgaW4gbWVyZ2VkKSkge1xuICAgICAgICBtZXJnZWRba2V5XSA9IHJlc29sdmVkVmFsdWVba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIENvbXBsZXRlbHkgcmVwbGFjZSB0aGUgb3JpZ2luYWwgcmVmZXJlbmNlIHdpdGggdGhlIHJlc29sdmVkIHZhbHVlXG4gICAgcmV0dXJuIHJlc29sdmVkVmFsdWU7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvbm8gID0gcmVxdWlyZSgnb25vJyksXG4gICAgJFJlZiA9IHJlcXVpcmUoJy4vcmVmJyksXG4gICAgdXJsICA9IHJlcXVpcmUoJy4vdXRpbC91cmwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAkUmVmcztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGlzIGEgbWFwIG9mIEpTT04gcmVmZXJlbmNlcyBhbmQgdGhlaXIgcmVzb2x2ZWQgdmFsdWVzLlxuICovXG5mdW5jdGlvbiAkUmVmcygpIHtcbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBzY2hlbWEgY29udGFpbnMgYW55IGNpcmN1bGFyIHJlZmVyZW5jZXMuXG4gICAqXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgdGhpcy5jaXJjdWxhciA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBBIG1hcCBvZiBwYXRocy91cmxzIHRvIHtAbGluayAkUmVmfSBvYmplY3RzXG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIHRoaXMuXyRyZWZzID0ge307XG5cbiAgLyoqXG4gICAqIFRoZSB7QGxpbmsgJFJlZn0gb2JqZWN0IHRoYXQgaXMgdGhlIHJvb3Qgb2YgdGhlIEpTT04gc2NoZW1hLlxuICAgKlxuICAgKiBAdHlwZSB7JFJlZn1cbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgdGhpcy5fcm9vdCRSZWYgPSBudWxsO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhdGhzIG9mIGFsbCB0aGUgZmlsZXMvVVJMcyB0aGF0IGFyZSByZWZlcmVuY2VkIGJ5IHRoZSBKU09OIHNjaGVtYSxcbiAqIGluY2x1ZGluZyB0aGUgc2NoZW1hIGl0c2VsZi5cbiAqXG4gKiBAcGFyYW0gey4uLnN0cmluZ3xzdHJpbmdbXX0gW3R5cGVzXSAtIE9ubHkgcmV0dXJuIHBhdGhzIG9mIHRoZSBnaXZlbiB0eXBlcyAoXCJmaWxlXCIsIFwiaHR0cFwiLCBldGMuKVxuICogQHJldHVybnMge3N0cmluZ1tdfVxuICovXG4kUmVmcy5wcm90b3R5cGUucGF0aHMgPSBmdW5jdGlvbih0eXBlcykge1xuICB2YXIgcGF0aHMgPSBnZXRQYXRocyh0aGlzLl8kcmVmcywgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHBhdGhzLm1hcChmdW5jdGlvbihwYXRoKSB7XG4gICAgcmV0dXJuIHBhdGguZGVjb2RlZDtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG1hcCBvZiBKU09OIHJlZmVyZW5jZXMgYW5kIHRoZWlyIHJlc29sdmVkIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0gey4uLnN0cmluZ3xzdHJpbmdbXX0gW3R5cGVzXSAtIE9ubHkgcmV0dXJuIHJlZmVyZW5jZXMgb2YgdGhlIGdpdmVuIHR5cGVzIChcImZpbGVcIiwgXCJodHRwXCIsIGV0Yy4pXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG4kUmVmcy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24odHlwZXMpIHtcbiAgdmFyICRyZWZzID0gdGhpcy5fJHJlZnM7XG4gIHZhciBwYXRocyA9IGdldFBhdGhzKCRyZWZzLCBhcmd1bWVudHMpO1xuICByZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uKG9iaiwgcGF0aCkge1xuICAgIG9ialtwYXRoLmRlY29kZWRdID0gJHJlZnNbcGF0aC5lbmNvZGVkXS52YWx1ZTtcbiAgICByZXR1cm4gb2JqO1xuICB9LCB7fSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBQT0pPIChwbGFpbiBvbGQgSmF2YVNjcmlwdCBvYmplY3QpIGZvciBzZXJpYWxpemF0aW9uIGFzIEpTT04uXG4gKlxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuJFJlZnMucHJvdG90eXBlLnRvSlNPTiA9ICRSZWZzLnByb3RvdHlwZS52YWx1ZXM7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBnaXZlbiBKU09OIHJlZmVyZW5jZSBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgcGF0aCBiZWluZyByZXNvbHZlZCwgb3B0aW9uYWxseSB3aXRoIGEgSlNPTiBwb2ludGVyIGluIHRoZSBoYXNoXG4gKiBAcGFyYW0geyRSZWZQYXJzZXJPcHRpb25zfSBbb3B0aW9uc11cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG4kUmVmcy5wcm90b3R5cGUuZXhpc3RzID0gZnVuY3Rpb24ocGF0aCwgb3B0aW9ucykge1xuICB0cnkge1xuICAgIHRoaXMuX3Jlc29sdmUocGF0aCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8qKlxuICogUmVzb2x2ZXMgdGhlIGdpdmVuIEpTT04gcmVmZXJlbmNlIGFuZCByZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoIGJlaW5nIHJlc29sdmVkLCB3aXRoIGEgSlNPTiBwb2ludGVyIGluIHRoZSBoYXNoXG4gKiBAcGFyYW0geyRSZWZQYXJzZXJPcHRpb25zfSBbb3B0aW9uc11cbiAqIEByZXR1cm5zIHsqfSAtIFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlXG4gKi9cbiRSZWZzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihwYXRoLCBvcHRpb25zKSB7XG4gIHJldHVybiB0aGlzLl9yZXNvbHZlKHBhdGgsIG9wdGlvbnMpLnZhbHVlO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSB2YWx1ZSBvZiBhIG5lc3RlZCBwcm9wZXJ0eSB3aXRoaW4gdGhpcyB7QGxpbmsgJFJlZiN2YWx1ZX0uXG4gKiBJZiB0aGUgcHJvcGVydHksIG9yIGFueSBvZiBpdHMgcGFyZW50cyBkb24ndCBleGlzdCwgdGhleSB3aWxsIGJlIGNyZWF0ZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LCBvcHRpb25hbGx5IHdpdGggYSBKU09OIHBvaW50ZXIgaW4gdGhlIGhhc2hcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gYXNzaWduXG4gKi9cbiRSZWZzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihwYXRoLCB2YWx1ZSkge1xuICBwYXRoID0gdXJsLnJlc29sdmUodGhpcy5fcm9vdCRSZWYucGF0aCwgcGF0aCk7XG4gIHZhciB3aXRob3V0SGFzaCA9IHVybC5zdHJpcEhhc2gocGF0aCk7XG4gIHZhciAkcmVmID0gdGhpcy5fJHJlZnNbd2l0aG91dEhhc2hdO1xuXG4gIGlmICghJHJlZikge1xuICAgIHRocm93IG9ubygnRXJyb3IgcmVzb2x2aW5nICRyZWYgcG9pbnRlciBcIiVzXCIuIFxcblwiJXNcIiBub3QgZm91bmQuJywgcGF0aCwgd2l0aG91dEhhc2gpO1xuICB9XG5cbiAgJHJlZi5zZXQocGF0aCwgdmFsdWUpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHtAbGluayAkUmVmfSBvYmplY3QgYW5kIGFkZHMgaXQgdG8gdGhpcyB7QGxpbmsgJFJlZnN9IG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAgLSBUaGUgZmlsZSBwYXRoIG9yIFVSTCBvZiB0aGUgcmVmZXJlbmNlZCBmaWxlXG4gKiBAcGFyYW0geyp9IFt2YWx1ZV0gLSBPcHRpb25hbC4gVGhlIHZhbHVlIG9mIHRoZSAkcmVmLlxuICovXG4kUmVmcy5wcm90b3R5cGUuX2FkZCA9IGZ1bmN0aW9uKHBhdGgsIHZhbHVlKSB7XG4gIHZhciB3aXRob3V0SGFzaCA9IHVybC5zdHJpcEhhc2gocGF0aCk7XG5cbiAgdmFyICRyZWYgPSBuZXcgJFJlZigpO1xuICAkcmVmLnBhdGggPSB3aXRob3V0SGFzaDtcbiAgJHJlZi52YWx1ZSA9IHZhbHVlO1xuICAkcmVmLiRyZWZzID0gdGhpcztcblxuICB0aGlzLl8kcmVmc1t3aXRob3V0SGFzaF0gPSAkcmVmO1xuICB0aGlzLl9yb290JFJlZiA9IHRoaXMuX3Jvb3QkUmVmIHx8ICRyZWY7XG5cbiAgcmV0dXJuICRyZWY7XG59O1xuXG4vKipcbiAqIFJlc29sdmVzIHRoZSBnaXZlbiBKU09OIHJlZmVyZW5jZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoIGJlaW5nIHJlc29sdmVkLCBvcHRpb25hbGx5IHdpdGggYSBKU09OIHBvaW50ZXIgaW4gdGhlIGhhc2hcbiAqIEBwYXJhbSB7JFJlZlBhcnNlck9wdGlvbnN9IFtvcHRpb25zXVxuICogQHJldHVybnMge1BvaW50ZXJ9XG4gKiBAcHJvdGVjdGVkXG4gKi9cbiRSZWZzLnByb3RvdHlwZS5fcmVzb2x2ZSA9IGZ1bmN0aW9uKHBhdGgsIG9wdGlvbnMpIHtcbiAgcGF0aCA9IHVybC5yZXNvbHZlKHRoaXMuX3Jvb3QkUmVmLnBhdGgsIHBhdGgpO1xuICB2YXIgd2l0aG91dEhhc2ggPSB1cmwuc3RyaXBIYXNoKHBhdGgpO1xuICB2YXIgJHJlZiA9IHRoaXMuXyRyZWZzW3dpdGhvdXRIYXNoXTtcblxuICBpZiAoISRyZWYpIHtcbiAgICB0aHJvdyBvbm8oJ0Vycm9yIHJlc29sdmluZyAkcmVmIHBvaW50ZXIgXCIlc1wiLiBcXG5cIiVzXCIgbm90IGZvdW5kLicsIHBhdGgsIHdpdGhvdXRIYXNoKTtcbiAgfVxuXG4gIHJldHVybiAkcmVmLnJlc29sdmUocGF0aCwgb3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHNwZWNpZmllZCB7QGxpbmsgJFJlZn0gb2JqZWN0LCBvciB1bmRlZmluZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgcGF0aCBiZWluZyByZXNvbHZlZCwgb3B0aW9uYWxseSB3aXRoIGEgSlNPTiBwb2ludGVyIGluIHRoZSBoYXNoXG4gKiBAcmV0dXJucyB7JFJlZnx1bmRlZmluZWR9XG4gKiBAcHJvdGVjdGVkXG4gKi9cbiRSZWZzLnByb3RvdHlwZS5fZ2V0JFJlZiA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgcGF0aCA9IHVybC5yZXNvbHZlKHRoaXMuX3Jvb3QkUmVmLnBhdGgsIHBhdGgpO1xuICB2YXIgd2l0aG91dEhhc2ggPSB1cmwuc3RyaXBIYXNoKHBhdGgpO1xuICByZXR1cm4gdGhpcy5fJHJlZnNbd2l0aG91dEhhc2hdO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbmNvZGVkIGFuZCBkZWNvZGVkIHBhdGhzIGtleXMgb2YgdGhlIGdpdmVuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gJHJlZnMgLSBUaGUgb2JqZWN0IHdob3NlIGtleXMgYXJlIFVSTC1lbmNvZGVkIHBhdGhzXG4gKiBAcGFyYW0gey4uLnN0cmluZ3xzdHJpbmdbXX0gW3R5cGVzXSAtIE9ubHkgcmV0dXJuIHBhdGhzIG9mIHRoZSBnaXZlbiB0eXBlcyAoXCJmaWxlXCIsIFwiaHR0cFwiLCBldGMuKVxuICogQHJldHVybnMge29iamVjdFtdfVxuICovXG5mdW5jdGlvbiBnZXRQYXRocygkcmVmcywgdHlwZXMpIHtcbiAgdmFyIHBhdGhzID0gT2JqZWN0LmtleXMoJHJlZnMpO1xuXG4gIC8vIEZpbHRlciB0aGUgcGF0aHMgYnkgdHlwZVxuICB0eXBlcyA9IEFycmF5LmlzQXJyYXkodHlwZXNbMF0pID8gdHlwZXNbMF0gOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0eXBlcyk7XG4gIGlmICh0eXBlcy5sZW5ndGggPiAwICYmIHR5cGVzWzBdKSB7XG4gICAgcGF0aHMgPSBwYXRocy5maWx0ZXIoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdHlwZXMuaW5kZXhPZigkcmVmc1trZXldLnBhdGhUeXBlKSAhPT0gLTE7XG4gICAgfSk7XG4gIH1cblxuICAvLyBEZWNvZGUgbG9jYWwgZmlsZXN5c3RlbSBwYXRoc1xuICByZXR1cm4gcGF0aHMubWFwKGZ1bmN0aW9uKHBhdGgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZW5jb2RlZDogcGF0aCxcbiAgICAgIGRlY29kZWQ6ICRyZWZzW3BhdGhdLnBhdGhUeXBlID09PSAnZmlsZScgPyB1cmwudG9GaWxlU3lzdGVtUGF0aChwYXRoLCB0cnVlKSA6IHBhdGhcbiAgICB9O1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFByb21pc2UgPSByZXF1aXJlKCcuL3V0aWwvcHJvbWlzZScpLFxuICAgICRSZWYgICAgPSByZXF1aXJlKCcuL3JlZicpLFxuICAgIFBvaW50ZXIgPSByZXF1aXJlKCcuL3BvaW50ZXInKSxcbiAgICBwYXJzZSAgID0gcmVxdWlyZSgnLi9wYXJzZScpLFxuICAgIGRlYnVnICAgPSByZXF1aXJlKCcuL3V0aWwvZGVidWcnKSxcbiAgICB1cmwgICAgID0gcmVxdWlyZSgnLi91dGlsL3VybCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlc29sdmVFeHRlcm5hbDtcblxuLyoqXG4gKiBDcmF3bHMgdGhlIEpTT04gc2NoZW1hLCBmaW5kcyBhbGwgZXh0ZXJuYWwgSlNPTiByZWZlcmVuY2VzLCBhbmQgcmVzb2x2ZXMgdGhlaXIgdmFsdWVzLlxuICogVGhpcyBtZXRob2QgZG9lcyBub3QgbXV0YXRlIHRoZSBKU09OIHNjaGVtYS4gVGhlIHJlc29sdmVkIHZhbHVlcyBhcmUgYWRkZWQgdG8ge0BsaW5rICRSZWZQYXJzZXIjJHJlZnN9LlxuICpcbiAqIE5PVEU6IFdlIG9ubHkgY2FyZSBhYm91dCBFWFRFUk5BTCByZWZlcmVuY2VzIGhlcmUuIElOVEVSTkFMIHJlZmVyZW5jZXMgYXJlIG9ubHkgcmVsZXZhbnQgd2hlbiBkZXJlZmVyZW5jaW5nLlxuICpcbiAqIEBwYXJhbSB7JFJlZlBhcnNlcn0gcGFyc2VyXG4gKiBAcGFyYW0geyRSZWZQYXJzZXJPcHRpb25zfSBvcHRpb25zXG4gKlxuICogQHJldHVybnMge1Byb21pc2V9XG4gKiBUaGUgcHJvbWlzZSByZXNvbHZlcyBvbmNlIGFsbCBKU09OIHJlZmVyZW5jZXMgaW4gdGhlIHNjaGVtYSBoYXZlIGJlZW4gcmVzb2x2ZWQsXG4gKiBpbmNsdWRpbmcgbmVzdGVkIHJlZmVyZW5jZXMgdGhhdCBhcmUgY29udGFpbmVkIGluIGV4dGVybmFsbHktcmVmZXJlbmNlZCBmaWxlcy5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUV4dGVybmFsKHBhcnNlciwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMucmVzb2x2ZS5leHRlcm5hbCkge1xuICAgIC8vIE5vdGhpbmcgdG8gcmVzb2x2ZSwgc28gZXhpdCBlYXJseVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgZGVidWcoJ1Jlc29sdmluZyAkcmVmIHBvaW50ZXJzIGluICVzJywgcGFyc2VyLiRyZWZzLl9yb290JFJlZi5wYXRoKTtcbiAgICB2YXIgcHJvbWlzZXMgPSBjcmF3bChwYXJzZXIuc2NoZW1hLCBwYXJzZXIuJHJlZnMuX3Jvb3QkUmVmLnBhdGggKyAnIycsIHBhcnNlci4kcmVmcywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgfVxuICBjYXRjaCAoZSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IGNyYXdscyB0aGUgZ2l2ZW4gdmFsdWUsIGFuZCByZXNvbHZlcyBhbnkgZXh0ZXJuYWwgSlNPTiByZWZlcmVuY2VzLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqIC0gVGhlIHZhbHVlIHRvIGNyYXdsLiBJZiBpdCdzIG5vdCBhbiBvYmplY3Qgb3IgYXJyYXksIGl0IHdpbGwgYmUgaWdub3JlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIGZ1bGwgcGF0aCBvZiBgb2JqYCwgcG9zc2libHkgd2l0aCBhIEpTT04gUG9pbnRlciBpbiB0aGUgaGFzaFxuICogQHBhcmFtIHskUmVmc30gJHJlZnNcbiAqIEBwYXJhbSB7JFJlZlBhcnNlck9wdGlvbnN9IG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZVtdfVxuICogUmV0dXJucyBhbiBhcnJheSBvZiBwcm9taXNlcy4gVGhlcmUgd2lsbCBiZSBvbmUgcHJvbWlzZSBmb3IgZWFjaCBKU09OIHJlZmVyZW5jZSBpbiBgb2JqYC5cbiAqIElmIGBvYmpgIGRvZXMgbm90IGNvbnRhaW4gYW55IEpTT04gcmVmZXJlbmNlcywgdGhlbiB0aGUgYXJyYXkgd2lsbCBiZSBlbXB0eS5cbiAqIElmIGFueSBvZiB0aGUgSlNPTiByZWZlcmVuY2VzIHBvaW50IHRvIGZpbGVzIHRoYXQgY29udGFpbiBhZGRpdGlvbmFsIEpTT04gcmVmZXJlbmNlcyxcbiAqIHRoZW4gdGhlIGNvcnJlc3BvbmRpbmcgcHJvbWlzZSB3aWxsIGludGVybmFsbHkgcmVmZXJlbmNlIGFuIGFycmF5IG9mIHByb21pc2VzLlxuICovXG5mdW5jdGlvbiBjcmF3bChvYmosIHBhdGgsICRyZWZzLCBvcHRpb25zKSB7XG4gIHZhciBwcm9taXNlcyA9IFtdO1xuXG4gIGlmIChvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAoJFJlZi5pc0V4dGVybmFsJFJlZihvYmopKSB7XG4gICAgICBwcm9taXNlcy5wdXNoKHJlc29sdmUkUmVmKG9iaiwgcGF0aCwgJHJlZnMsIG9wdGlvbnMpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHZhciBrZXlQYXRoID0gUG9pbnRlci5qb2luKHBhdGgsIGtleSk7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9ialtrZXldO1xuXG4gICAgICAgIGlmICgkUmVmLmlzRXh0ZXJuYWwkUmVmKHZhbHVlKSkge1xuICAgICAgICAgIHByb21pc2VzLnB1c2gocmVzb2x2ZSRSZWYodmFsdWUsIGtleVBhdGgsICRyZWZzLCBvcHRpb25zKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcHJvbWlzZXMgPSBwcm9taXNlcy5jb25jYXQoY3Jhd2wodmFsdWUsIGtleVBhdGgsICRyZWZzLCBvcHRpb25zKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwcm9taXNlcztcbn1cblxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgZ2l2ZW4gSlNPTiBSZWZlcmVuY2UsIGFuZCB0aGVuIGNyYXdscyB0aGUgcmVzdWx0aW5nIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7eyRyZWY6IHN0cmluZ319ICRyZWYgLSBUaGUgSlNPTiBSZWZlcmVuY2UgdG8gcmVzb2x2ZVxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgZnVsbCBwYXRoIG9mIGAkcmVmYCwgcG9zc2libHkgd2l0aCBhIEpTT04gUG9pbnRlciBpbiB0aGUgaGFzaFxuICogQHBhcmFtIHskUmVmc30gJHJlZnNcbiAqIEBwYXJhbSB7JFJlZlBhcnNlck9wdGlvbnN9IG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqIFRoZSBwcm9taXNlIHJlc29sdmVzIG9uY2UgYWxsIEpTT04gcmVmZXJlbmNlcyBpbiB0aGUgb2JqZWN0IGhhdmUgYmVlbiByZXNvbHZlZCxcbiAqIGluY2x1ZGluZyBuZXN0ZWQgcmVmZXJlbmNlcyB0aGF0IGFyZSBjb250YWluZWQgaW4gZXh0ZXJuYWxseS1yZWZlcmVuY2VkIGZpbGVzLlxuICovXG5mdW5jdGlvbiByZXNvbHZlJFJlZigkcmVmLCBwYXRoLCAkcmVmcywgb3B0aW9ucykge1xuICBkZWJ1ZygnUmVzb2x2aW5nICRyZWYgcG9pbnRlciBcIiVzXCIgYXQgJXMnLCAkcmVmLiRyZWYsIHBhdGgpO1xuXG4gIHZhciByZXNvbHZlZFBhdGggPSB1cmwucmVzb2x2ZShwYXRoLCAkcmVmLiRyZWYpO1xuICB2YXIgd2l0aG91dEhhc2ggPSB1cmwuc3RyaXBIYXNoKHJlc29sdmVkUGF0aCk7XG5cbiAgLy8gRG8gd2UgYWxyZWFkeSBoYXZlIHRoaXMgJHJlZj9cbiAgJHJlZiA9ICRyZWZzLl8kcmVmc1t3aXRob3V0SGFzaF07XG4gIGlmICgkcmVmKSB7XG4gICAgLy8gV2UndmUgYWxyZWFkeSBwYXJzZWQgdGhpcyAkcmVmLCBzbyB1c2UgdGhlIGV4aXN0aW5nIHZhbHVlXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgkcmVmLnZhbHVlKTtcbiAgfVxuXG4gIC8vIFBhcnNlIHRoZSAkcmVmZXJlbmNlZCBmaWxlL3VybFxuICByZXR1cm4gcGFyc2UocmVzb2x2ZWRQYXRoLCAkcmVmcywgb3B0aW9ucylcbiAgICAudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgIC8vIENyYXdsIHRoZSBwYXJzZWQgdmFsdWVcbiAgICAgIGRlYnVnKCdSZXNvbHZpbmcgJHJlZiBwb2ludGVycyBpbiAlcycsIHdpdGhvdXRIYXNoKTtcbiAgICAgIHZhciBwcm9taXNlcyA9IGNyYXdsKHJlc3VsdCwgd2l0aG91dEhhc2ggKyAnIycsICRyZWZzLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZnMgICAgICA9IHJlcXVpcmUoJ2ZzJyksXG4gICAgb25vICAgICA9IHJlcXVpcmUoJ29ubycpLFxuICAgIFByb21pc2UgPSByZXF1aXJlKCcuLi91dGlsL3Byb21pc2UnKSxcbiAgICB1cmwgICAgID0gcmVxdWlyZSgnLi4vdXRpbC91cmwnKSxcbiAgICBkZWJ1ZyAgID0gcmVxdWlyZSgnLi4vdXRpbC9kZWJ1ZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIFRoZSBvcmRlciB0aGF0IHRoaXMgcmVzb2x2ZXIgd2lsbCBydW4sIGluIHJlbGF0aW9uIHRvIG90aGVyIHJlc29sdmVycy5cbiAgICpcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIG9yZGVyOiAxMDAsXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGlzIHJlc29sdmVyIGNhbiByZWFkIGEgZ2l2ZW4gZmlsZSByZWZlcmVuY2UuXG4gICAqIFJlc29sdmVycyB0aGF0IHJldHVybiB0cnVlIHdpbGwgYmUgdHJpZWQsIGluIG9yZGVyLCB1bnRpbCBvbmUgc3VjY2Vzc2Z1bGx5IHJlc29sdmVzIHRoZSBmaWxlLlxuICAgKiBSZXNvbHZlcnMgdGhhdCByZXR1cm4gZmFsc2Ugd2lsbCBub3QgYmUgZ2l2ZW4gYSBjaGFuY2UgdG8gcmVzb2x2ZSB0aGUgZmlsZS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbGUgICAgICAgICAgIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJlZmVyZW5jZWQgZmlsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZS51cmwgICAgICAgLSBUaGUgZnVsbCBVUkwgb2YgdGhlIHJlZmVyZW5jZWQgZmlsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZS5leHRlbnNpb24gLSBUaGUgbG93ZXJjYXNlZCBmaWxlIGV4dGVuc2lvbiAoZS5nLiBcIi50eHRcIiwgXCIuaHRtbFwiLCBldGMuKVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGNhblJlYWQ6IGZ1bmN0aW9uIGlzRmlsZShmaWxlKSB7XG4gICAgcmV0dXJuIHVybC5pc0ZpbGVTeXN0ZW1QYXRoKGZpbGUudXJsKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVhZHMgdGhlIGdpdmVuIGZpbGUgYW5kIHJldHVybnMgaXRzIHJhdyBjb250ZW50cyBhcyBhIEJ1ZmZlci5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbGUgICAgICAgICAgIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJlZmVyZW5jZWQgZmlsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZS51cmwgICAgICAgLSBUaGUgZnVsbCBVUkwgb2YgdGhlIHJlZmVyZW5jZWQgZmlsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZS5leHRlbnNpb24gLSBUaGUgbG93ZXJjYXNlZCBmaWxlIGV4dGVuc2lvbiAoZS5nLiBcIi50eHRcIiwgXCIuaHRtbFwiLCBldGMuKVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxCdWZmZXI+fVxuICAgKi9cbiAgcmVhZDogZnVuY3Rpb24gcmVhZEZpbGUoZmlsZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBwYXRoO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcGF0aCA9IHVybC50b0ZpbGVTeXN0ZW1QYXRoKGZpbGUudXJsKTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KG9uby51cmkoZXJyLCAnTWFsZm9ybWVkIFVSSTogJXMnLCBmaWxlLnVybCkpO1xuICAgICAgfVxuXG4gICAgICBkZWJ1ZygnT3BlbmluZyBmaWxlOiAlcycsIHBhdGgpO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmcy5yZWFkRmlsZShwYXRoLCBmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3Qob25vKGVyciwgJ0Vycm9yIG9wZW5pbmcgZmlsZSBcIiVzXCInLCBwYXRoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICByZWplY3Qob25vKGVyciwgJ0Vycm9yIG9wZW5pbmcgZmlsZSBcIiVzXCInLCBwYXRoKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBodHRwICAgID0gcmVxdWlyZSgnaHR0cCcpLFxuICAgIGh0dHBzICAgPSByZXF1aXJlKCdodHRwcycpLFxuICAgIG9ubyAgICAgPSByZXF1aXJlKCdvbm8nKSxcbiAgICB1cmwgICAgID0gcmVxdWlyZSgnLi4vdXRpbC91cmwnKSxcbiAgICBkZWJ1ZyAgID0gcmVxdWlyZSgnLi4vdXRpbC9kZWJ1ZycpLFxuICAgIFByb21pc2UgPSByZXF1aXJlKCcuLi91dGlsL3Byb21pc2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKlxuICAgKiBUaGUgb3JkZXIgdGhhdCB0aGlzIHJlc29sdmVyIHdpbGwgcnVuLCBpbiByZWxhdGlvbiB0byBvdGhlciByZXNvbHZlcnMuXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBvcmRlcjogMjAwLFxuXG4gIC8qKlxuICAgKiBIVFRQIGhlYWRlcnMgdG8gc2VuZCB3aGVuIGRvd25sb2FkaW5nIGZpbGVzLlxuICAgKlxuICAgKiBAZXhhbXBsZTpcbiAgICoge1xuICAgKiAgIFwiVXNlci1BZ2VudFwiOiBcIkpTT04gU2NoZW1hICRSZWYgUGFyc2VyXCIsXG4gICAqICAgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgKiB9XG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqL1xuICBoZWFkZXJzOiBudWxsLFxuXG4gIC8qKlxuICAgKiBIVFRQIHJlcXVlc3QgdGltZW91dCAoaW4gbWlsbGlzZWNvbmRzKS5cbiAgICpcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHRpbWVvdXQ6IDUwMDAsIC8vIDUgc2Vjb25kc1xuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgSFRUUCByZWRpcmVjdHMgdG8gZm9sbG93LlxuICAgKiBUbyBkaXNhYmxlIGF1dG9tYXRpYyBmb2xsb3dpbmcgb2YgcmVkaXJlY3RzLCBzZXQgdGhpcyB0byB6ZXJvLlxuICAgKlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgcmVkaXJlY3RzOiA1LFxuXG4gIC8qKlxuICAgKiBUaGUgYHdpdGhDcmVkZW50aWFsc2Agb3B0aW9uIG9mIFhNTEh0dHBSZXF1ZXN0LlxuICAgKiBTZXQgdGhpcyB0byBgdHJ1ZWAgaWYgeW91J3JlIGRvd25sb2FkaW5nIGZpbGVzIGZyb20gYSBDT1JTLWVuYWJsZWQgc2VydmVyIHRoYXQgcmVxdWlyZXMgYXV0aGVudGljYXRpb25cbiAgICpcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICB3aXRoQ3JlZGVudGlhbHM6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhpcyByZXNvbHZlciBjYW4gcmVhZCBhIGdpdmVuIGZpbGUgcmVmZXJlbmNlLlxuICAgKiBSZXNvbHZlcnMgdGhhdCByZXR1cm4gdHJ1ZSB3aWxsIGJlIHRyaWVkIGluIG9yZGVyLCB1bnRpbCBvbmUgc3VjY2Vzc2Z1bGx5IHJlc29sdmVzIHRoZSBmaWxlLlxuICAgKiBSZXNvbHZlcnMgdGhhdCByZXR1cm4gZmFsc2Ugd2lsbCBub3QgYmUgZ2l2ZW4gYSBjaGFuY2UgdG8gcmVzb2x2ZSB0aGUgZmlsZS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbGUgICAgICAgICAgIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJlZmVyZW5jZWQgZmlsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZS51cmwgICAgICAgLSBUaGUgZnVsbCBVUkwgb2YgdGhlIHJlZmVyZW5jZWQgZmlsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZS5leHRlbnNpb24gLSBUaGUgbG93ZXJjYXNlZCBmaWxlIGV4dGVuc2lvbiAoZS5nLiBcIi50eHRcIiwgXCIuaHRtbFwiLCBldGMuKVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGNhblJlYWQ6IGZ1bmN0aW9uIGlzSHR0cChmaWxlKSB7XG4gICAgcmV0dXJuIHVybC5pc0h0dHAoZmlsZS51cmwpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgZ2l2ZW4gVVJMIGFuZCByZXR1cm5zIGl0cyByYXcgY29udGVudHMgYXMgYSBCdWZmZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaWxlICAgICAgICAgICAtIEFuIG9iamVjdCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZWZlcmVuY2VkIGZpbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUudXJsICAgICAgIC0gVGhlIGZ1bGwgVVJMIG9mIHRoZSByZWZlcmVuY2VkIGZpbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUuZXh0ZW5zaW9uIC0gVGhlIGxvd2VyY2FzZWQgZmlsZSBleHRlbnNpb24gKGUuZy4gXCIudHh0XCIsIFwiLmh0bWxcIiwgZXRjLilcbiAgICogQHJldHVybnMge1Byb21pc2U8QnVmZmVyPn1cbiAgICovXG4gIHJlYWQ6IGZ1bmN0aW9uIHJlYWRIdHRwKGZpbGUpIHtcbiAgICB2YXIgdSA9IHVybC5wYXJzZShmaWxlLnVybCk7XG5cbiAgICBpZiAocHJvY2Vzcy5icm93c2VyICYmICF1LnByb3RvY29sKSB7XG4gICAgICAvLyBVc2UgdGhlIHByb3RvY29sIG9mIHRoZSBjdXJyZW50IHBhZ2VcbiAgICAgIHUucHJvdG9jb2wgPSB1cmwucGFyc2UobG9jYXRpb24uaHJlZikucHJvdG9jb2w7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRvd25sb2FkKHUsIHRoaXMpO1xuICB9XG59O1xuXG4vKipcbiAqIERvd25sb2FkcyB0aGUgZ2l2ZW4gZmlsZS5cbiAqXG4gKiBAcGFyYW0ge1VybHxzdHJpbmd9IHUgICAgICAgIC0gVGhlIHVybCB0byBkb3dubG9hZCAoY2FuIGJlIGEgcGFyc2VkIHtAbGluayBVcmx9IG9iamVjdClcbiAqIEBwYXJhbSB7b2JqZWN0fSBodHRwT3B0aW9ucyAgLSBUaGUgYG9wdGlvbnMucmVzb2x2ZS5odHRwYCBvYmplY3RcbiAqIEBwYXJhbSB7bnVtYmVyfSBbcmVkaXJlY3RzXSAgLSBUaGUgcmVkaXJlY3QgVVJMcyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIGZvbGxvd2VkXG4gKlxuICogQHJldHVybnMge1Byb21pc2U8QnVmZmVyPn1cbiAqIFRoZSBwcm9taXNlIHJlc29sdmVzIHdpdGggdGhlIHJhdyBkb3dubG9hZGVkIGRhdGEsIG9yIHJlamVjdHMgaWYgdGhlcmUgaXMgYW4gSFRUUCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gZG93bmxvYWQodSwgaHR0cE9wdGlvbnMsIHJlZGlyZWN0cykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdSA9IHVybC5wYXJzZSh1KTtcbiAgICByZWRpcmVjdHMgPSByZWRpcmVjdHMgfHwgW107XG4gICAgcmVkaXJlY3RzLnB1c2godS5ocmVmKTtcblxuICAgIGdldCh1LCBodHRwT3B0aW9ucylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgICAgICBpZiAocmVzLnN0YXR1c0NvZGUgPj0gNDAwKSB7XG4gICAgICAgICAgdGhyb3cgb25vKHtzdGF0dXM6IHJlcy5zdGF0dXNDb2RlfSwgJ0hUVFAgRVJST1IgJWQnLCByZXMuc3RhdHVzQ29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVzLnN0YXR1c0NvZGUgPj0gMzAwKSB7XG4gICAgICAgICAgaWYgKHJlZGlyZWN0cy5sZW5ndGggPiBodHRwT3B0aW9ucy5yZWRpcmVjdHMpIHtcbiAgICAgICAgICAgIHJlamVjdChvbm8oe3N0YXR1czogcmVzLnN0YXR1c0NvZGV9LCAnRXJyb3IgZG93bmxvYWRpbmcgJXMuIFxcblRvbyBtYW55IHJlZGlyZWN0czogXFxuICAlcycsXG4gICAgICAgICAgICAgIHJlZGlyZWN0c1swXSwgcmVkaXJlY3RzLmpvaW4oJyBcXG4gICcpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFyZXMuaGVhZGVycy5sb2NhdGlvbikge1xuICAgICAgICAgICAgdGhyb3cgb25vKHtzdGF0dXM6IHJlcy5zdGF0dXNDb2RlfSwgJ0hUVFAgJWQgcmVkaXJlY3Qgd2l0aCBubyBsb2NhdGlvbiBoZWFkZXInLCByZXMuc3RhdHVzQ29kZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVidWcoJ0hUVFAgJWQgcmVkaXJlY3QgJXMgLT4gJXMnLCByZXMuc3RhdHVzQ29kZSwgdS5ocmVmLCByZXMuaGVhZGVycy5sb2NhdGlvbik7XG4gICAgICAgICAgICB2YXIgcmVkaXJlY3RUbyA9IHVybC5yZXNvbHZlKHUsIHJlcy5oZWFkZXJzLmxvY2F0aW9uKTtcbiAgICAgICAgICAgIGRvd25sb2FkKHJlZGlyZWN0VG8sIGh0dHBPcHRpb25zLCByZWRpcmVjdHMpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZShyZXMuYm9keSB8fCBuZXcgQnVmZmVyKDApKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgcmVqZWN0KG9ubyhlcnIsICdFcnJvciBkb3dubG9hZGluZycsIHUuaHJlZikpO1xuICAgICAgfSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIFNlbmRzIGFuIEhUVFAgR0VUIHJlcXVlc3QuXG4gKlxuICogQHBhcmFtIHtVcmx9IHUgLSBBIHBhcnNlZCB7QGxpbmsgVXJsfSBvYmplY3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBodHRwT3B0aW9ucyAtIFRoZSBgb3B0aW9ucy5yZXNvbHZlLmh0dHBgIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlPFJlc3BvbnNlPn1cbiAqIFRoZSBwcm9taXNlIHJlc29sdmVzIHdpdGggdGhlIEhUVFAgUmVzcG9uc2Ugb2JqZWN0LlxuICovXG5mdW5jdGlvbiBnZXQodSwgaHR0cE9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGRlYnVnKCdHRVQnLCB1LmhyZWYpO1xuXG4gICAgdmFyIHByb3RvY29sID0gdS5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyBodHRwcyA6IGh0dHA7XG4gICAgdmFyIHJlcSA9IHByb3RvY29sLmdldCh7XG4gICAgICBob3N0bmFtZTogdS5ob3N0bmFtZSxcbiAgICAgIHBvcnQ6IHUucG9ydCxcbiAgICAgIHBhdGg6IHUucGF0aCxcbiAgICAgIGF1dGg6IHUuYXV0aCxcbiAgICAgIGhlYWRlcnM6IGh0dHBPcHRpb25zLmhlYWRlcnMgfHwge30sXG4gICAgICB3aXRoQ3JlZGVudGlhbHM6IGh0dHBPcHRpb25zLndpdGhDcmVkZW50aWFsc1xuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiByZXEuc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxLnNldFRpbWVvdXQoaHR0cE9wdGlvbnMudGltZW91dCk7XG4gICAgfVxuXG4gICAgcmVxLm9uKCd0aW1lb3V0JywgZnVuY3Rpb24oKSB7XG4gICAgICByZXEuYWJvcnQoKTtcbiAgICB9KTtcblxuICAgIHJlcS5vbignZXJyb3InLCByZWplY3QpO1xuXG4gICAgcmVxLm9uY2UoJ3Jlc3BvbnNlJywgZnVuY3Rpb24ocmVzKSB7XG4gICAgICByZXMuYm9keSA9IG5ldyBCdWZmZXIoMCk7XG5cbiAgICAgIHJlcy5vbignZGF0YScsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgcmVzLmJvZHkgPSBCdWZmZXIuY29uY2F0KFtyZXMuYm9keSwgbmV3IEJ1ZmZlcihkYXRhKV0pO1xuICAgICAgfSk7XG5cbiAgICAgIHJlcy5vbignZXJyb3InLCByZWplY3QpO1xuXG4gICAgICByZXMub24oJ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKHJlcyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJyk7XG5cbi8qKlxuICogV3JpdGVzIG1lc3NhZ2VzIHRvIHN0ZG91dC5cbiAqIExvZyBtZXNzYWdlcyBhcmUgc3VwcHJlc3NlZCBieSBkZWZhdWx0LCBidXQgY2FuIGJlIGVuYWJsZWQgYnkgc2V0dGluZyB0aGUgREVCVUcgdmFyaWFibGUuXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZGVidWcoJ2pzb24tc2NoZW1hLXJlZi1wYXJzZXInKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFByb21pc2UgPSByZXF1aXJlKCcuL3Byb21pc2UnKSxcbiAgICBkZWJ1ZyAgID0gcmVxdWlyZSgnLi9kZWJ1ZycpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGdpdmVuIHBsdWdpbnMgYXMgYW4gYXJyYXksIHJhdGhlciB0aGFuIGFuIG9iamVjdCBtYXAuXG4gKiBBbGwgb3RoZXIgbWV0aG9kcyBpbiB0aGlzIG1vZHVsZSBleHBlY3QgYW4gYXJyYXkgb2YgcGx1Z2lucyByYXRoZXIgdGhhbiBhbiBvYmplY3QgbWFwLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gcGx1Z2lucyAtIEEgbWFwIG9mIHBsdWdpbiBvYmplY3RzXG4gKiBAcmV0dXJuIHtvYmplY3RbXX1cbiAqL1xuZXhwb3J0cy5hbGwgPSBmdW5jdGlvbihwbHVnaW5zKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwbHVnaW5zKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHBsdWdpbnNba2V5XSA9PT0gJ29iamVjdCc7XG4gICAgfSlcbiAgICAubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcGx1Z2luc1trZXldLm5hbWUgPSBrZXk7XG4gICAgICByZXR1cm4gcGx1Z2luc1trZXldO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBGaWx0ZXJzIHRoZSBnaXZlbiBwbHVnaW5zLCByZXR1cm5pbmcgb25seSB0aGUgb25lcyByZXR1cm4gYHRydWVgIGZvciB0aGUgZ2l2ZW4gbWV0aG9kLlxuICpcbiAqIEBwYXJhbSAge29iamVjdFtdfSBwbHVnaW5zIC0gQW4gYXJyYXkgb2YgcGx1Z2luIG9iamVjdHNcbiAqIEBwYXJhbSAge3N0cmluZ30gICBtZXRob2QgIC0gVGhlIG5hbWUgb2YgdGhlIGZpbHRlciBtZXRob2QgdG8gaW52b2tlIGZvciBlYWNoIHBsdWdpblxuICogQHBhcmFtICB7b2JqZWN0fSAgIGZpbGUgICAgLSBBIGZpbGUgaW5mbyBvYmplY3QsIHdoaWNoIHdpbGwgYmUgcGFzc2VkIHRvIGVhY2ggbWV0aG9kXG4gKiBAcmV0dXJuIHtvYmplY3RbXX1cbiAqL1xuZXhwb3J0cy5maWx0ZXIgPSBmdW5jdGlvbihwbHVnaW5zLCBtZXRob2QsIGZpbGUpIHtcbiAgcmV0dXJuIHBsdWdpbnNcbiAgICAuZmlsdGVyKGZ1bmN0aW9uKHBsdWdpbikge1xuICAgICAgcmV0dXJuICEhZ2V0UmVzdWx0KHBsdWdpbiwgbWV0aG9kLCBmaWxlKTtcbiAgICB9KTtcbn07XG5cbi8qKlxuICogU29ydHMgdGhlIGdpdmVuIHBsdWdpbnMsIGluIHBsYWNlLCBieSB0aGVpciBgb3JkZXJgIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0W119IHBsdWdpbnMgLSBBbiBhcnJheSBvZiBwbHVnaW4gb2JqZWN0c1xuICogQHJldHVybnMge29iamVjdFtdfVxuICovXG5leHBvcnRzLnNvcnQgPSBmdW5jdGlvbihwbHVnaW5zKSB7XG4gIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbihwbHVnaW4pIHtcbiAgICBwbHVnaW4ub3JkZXIgPSBwbHVnaW4ub3JkZXIgfHwgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gIH0pO1xuXG4gIHJldHVybiBwbHVnaW5zLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7IH0pO1xufTtcblxuLyoqXG4gKiBSdW5zIHRoZSBzcGVjaWZpZWQgbWV0aG9kIG9mIHRoZSBnaXZlbiBwbHVnaW5zLCBpbiBvcmRlciwgdW50aWwgb25lIG9mIHRoZW0gcmV0dXJucyBhIHN1Y2Nlc3NmdWwgcmVzdWx0LlxuICogRWFjaCBtZXRob2QgY2FuIHJldHVybiBhIHN5bmNocm9ub3VzIHZhbHVlLCBhIFByb21pc2UsIG9yIGNhbGwgYW4gZXJyb3ItZmlyc3QgY2FsbGJhY2suXG4gKiBJZiB0aGUgcHJvbWlzZSByZXNvbHZlcyBzdWNjZXNzZnVsbHksIG9yIHRoZSBjYWxsYmFjayBpcyBjYWxsZWQgd2l0aG91dCBhbiBlcnJvciwgdGhlbiB0aGUgcmVzdWx0XG4gKiBpcyBpbW1lZGlhdGVseSByZXR1cm5lZCBhbmQgbm8gZnVydGhlciBwbHVnaW5zIGFyZSBjYWxsZWQuXG4gKiBJZiB0aGUgcHJvbWlzZSByZWplY3RzLCBvciB0aGUgY2FsbGJhY2sgaXMgY2FsbGVkIHdpdGggYW4gZXJyb3IsIHRoZW4gdGhlIG5leHQgcGx1Z2luIGlzIGNhbGxlZC5cbiAqIElmIEFMTCBwbHVnaW5zIGZhaWwsIHRoZW4gdGhlIGxhc3QgZXJyb3IgaXMgdGhyb3duLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0W119ICBwbHVnaW5zIC0gQW4gYXJyYXkgb2YgcGx1Z2luIG9iamVjdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSAgICBtZXRob2QgIC0gVGhlIG5hbWUgb2YgdGhlIG1ldGhvZCB0byBpbnZva2UgZm9yIGVhY2ggcGx1Z2luXG4gKiBAcGFyYW0ge29iamVjdH0gICAgZmlsZSAgICAtIEEgZmlsZSBpbmZvIG9iamVjdCwgd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gZWFjaCBtZXRob2RcbiAqIEByZXR1cm5zIHtQcm9taXNlfVxuICovXG5leHBvcnRzLnJ1biA9IGZ1bmN0aW9uKHBsdWdpbnMsIG1ldGhvZCwgZmlsZSkge1xuICB2YXIgcGx1Z2luLCBsYXN0RXJyb3IsIGluZGV4ID0gMDtcblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcnVuTmV4dFBsdWdpbigpO1xuXG4gICAgZnVuY3Rpb24gcnVuTmV4dFBsdWdpbigpIHtcbiAgICAgIHBsdWdpbiA9IHBsdWdpbnNbaW5kZXgrK107XG4gICAgICBpZiAoIXBsdWdpbikge1xuICAgICAgICAvLyBUaGVyZSBhcmUgbm8gbW9yZSBmdW5jdGlvbnMsIHNvIHJlLXRocm93IHRoZSBsYXN0IGVycm9yXG4gICAgICAgIHJldHVybiByZWplY3QobGFzdEVycm9yKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgZGVidWcoJyAgJXMnLCBwbHVnaW4ubmFtZSk7XG4gICAgICAgIHZhciByZXN1bHQgPSBnZXRSZXN1bHQocGx1Z2luLCBtZXRob2QsIGZpbGUsIGNhbGxiYWNrKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBBIHByb21pc2Ugd2FzIHJldHVybmVkXG4gICAgICAgICAgcmVzdWx0LnRoZW4ob25TdWNjZXNzLCBvbkVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIEEgc3luY2hyb25vdXMgcmVzdWx0IHdhcyByZXR1cm5lZFxuICAgICAgICAgIG9uU3VjY2VzcyhyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVsc2UgeyB0aGUgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgfVxuICAgICAgfVxuICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgb25FcnJvcihlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxsYmFjayhlcnIsIHJlc3VsdCkge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBvbkVycm9yKGVycik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgb25TdWNjZXNzKHJlc3VsdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25TdWNjZXNzKHJlc3VsdCkge1xuICAgICAgZGVidWcoJyAgICBzdWNjZXNzJyk7XG4gICAgICByZXNvbHZlKHtcbiAgICAgICAgcGx1Z2luOiBwbHVnaW4sXG4gICAgICAgIHJlc3VsdDogcmVzdWx0XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkVycm9yKGVycikge1xuICAgICAgZGVidWcoJyAgICAlcycsIGVyci5tZXNzYWdlIHx8IGVycik7XG4gICAgICBsYXN0RXJyb3IgPSBlcnI7XG4gICAgICBydW5OZXh0UGx1Z2luKCk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGdpdmVuIHByb3BlcnR5LlxuICogSWYgdGhlIHByb3BlcnR5IGlzIGEgZnVuY3Rpb24sIHRoZW4gdGhlIHJlc3VsdCBvZiB0aGUgZnVuY3Rpb24gaXMgcmV0dXJuZWQuXG4gKiBJZiB0aGUgdmFsdWUgaXMgYSBSZWdFeHAsIHRoZW4gaXQgd2lsbCBiZSB0ZXN0ZWQgYWdhaW5zdCB0aGUgZmlsZSBVUkwuXG4gKiBJZiB0aGUgdmFsdWUgaXMgYW4gYXJheSwgdGhlbiBpdCB3aWxsIGJlIGNvbXBhcmVkIGFnYWluc3QgdGhlIGZpbGUgZXh0ZW5zaW9uLlxuICpcbiAqIEBwYXJhbSAgIHtvYmplY3R9ICAgb2JqICAgICAgICAtIFRoZSBvYmplY3Qgd2hvc2UgcHJvcGVydHkvbWV0aG9kIGlzIGNhbGxlZFxuICogQHBhcmFtICAge3N0cmluZ30gICBwcm9wICAgICAgIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5L21ldGhvZCB0byBpbnZva2VcbiAqIEBwYXJhbSAgIHtvYmplY3R9ICAgZmlsZSAgICAgICAtIEEgZmlsZSBpbmZvIG9iamVjdCwgd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gdGhlIG1ldGhvZFxuICogQHBhcmFtICAge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gQSBjYWxsYmFjayBmdW5jdGlvbiwgd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gdGhlIG1ldGhvZFxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGdldFJlc3VsdChvYmosIHByb3AsIGZpbGUsIGNhbGxiYWNrKSB7XG4gIHZhciB2YWx1ZSA9IG9ialtwcm9wXTtcblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHZhbHVlLmFwcGx5KG9iaiwgW2ZpbGUsIGNhbGxiYWNrXSk7XG4gIH1cblxuICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgLy8gVGhlIHN5bmNocm9ub3VzIHBsdWdpbiBmdW5jdGlvbnMgKGNhblBhcnNlIGFuZCBjYW5SZWFkKVxuICAgIC8vIGFsbG93IGEgXCJzaG9ydGhhbmRcIiBzeW50YXgsIHdoZXJlIHRoZSB1c2VyIGNhbiBtYXRjaFxuICAgIC8vIGZpbGVzIGJ5IFJlZ0V4cCBvciBieSBmaWxlIGV4dGVuc2lvbi5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJldHVybiB2YWx1ZS50ZXN0KGZpbGUudXJsKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBmaWxlLmV4dGVuc2lvbjtcbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5pbmRleE9mKGZpbGUuZXh0ZW5zaW9uKSAhPT0gLTE7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge1Byb21pc2V9ICoqL1xubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgUHJvbWlzZSA9PT0gJ2Z1bmN0aW9uJyA/IFByb21pc2UgOiByZXF1aXJlKCdlczYtcHJvbWlzZScpLlByb21pc2U7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc1dpbmRvd3MgICAgICAgICAgID0gL153aW4vLnRlc3QocHJvY2Vzcy5wbGF0Zm9ybSksXG4gICAgZm9yd2FyZFNsYXNoUGF0dGVybiA9IC9cXC8vZyxcbiAgICBwcm90b2NvbFBhdHRlcm4gICAgID0gL14oW2EtejAtOS4rLV0rKTpcXC9cXC8vaSxcbiAgICB1cmwgICAgICAgICAgICAgICAgID0gbW9kdWxlLmV4cG9ydHM7XG5cbi8vIFJlZ0V4cCBwYXR0ZXJucyB0byBVUkwtZW5jb2RlIHNwZWNpYWwgY2hhcmFjdGVycyBpbiBsb2NhbCBmaWxlc3lzdGVtIHBhdGhzXG52YXIgdXJsRW5jb2RlUGF0dGVybnMgPSBbXG4gIC9cXD8vZywgJyUzRicsXG4gIC9cXCMvZywgJyUyMycsXG4gIGlzV2luZG93cyA/IC9cXFxcL2cgOiAvXFwvLywgJy8nXG5dO1xuXG4vLyBSZWdFeHAgcGF0dGVybnMgdG8gVVJMLWRlY29kZSBzcGVjaWFsIGNoYXJhY3RlcnMgZm9yIGxvY2FsIGZpbGVzeXN0ZW0gcGF0aHNcbnZhciB1cmxEZWNvZGVQYXR0ZXJucyA9IFtcbiAgL1xcJTIzL2csICcjJyxcbiAgL1xcJTI0L2csICckJyxcbiAgL1xcJTI2L2csICcmJyxcbiAgL1xcJTJDL2csICcsJyxcbiAgL1xcJTQwL2csICdAJ1xuXTtcblxuZXhwb3J0cy5wYXJzZSA9IHJlcXVpcmUoJ3VybCcpLnBhcnNlO1xuZXhwb3J0cy5yZXNvbHZlID0gcmVxdWlyZSgndXJsJykucmVzb2x2ZTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5IChpbiBOb2RlKSBvciB0aGUgY3VycmVudCBwYWdlIFVSTCAoaW4gYnJvd3NlcnMpLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydHMuY3dkID0gZnVuY3Rpb24gY3dkKCkge1xuICByZXR1cm4gcHJvY2Vzcy5icm93c2VyID8gbG9jYXRpb24uaHJlZiA6IHByb2Nlc3MuY3dkKCkgKyAnLyc7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHByb3RvY29sIG9mIHRoZSBnaXZlbiBVUkwsIG9yIGB1bmRlZmluZWRgIGlmIGl0IGhhcyBubyBwcm90b2NvbC5cbiAqXG4gKiBAcGFyYW0gICB7c3RyaW5nfSBwYXRoXG4gKiBAcmV0dXJucyB7P3N0cmluZ31cbiAqL1xuZXhwb3J0cy5nZXRQcm90b2NvbCA9IGZ1bmN0aW9uIGdldFByb3RvY29sKHBhdGgpIHtcbiAgdmFyIG1hdGNoID0gcHJvdG9jb2xQYXR0ZXJuLmV4ZWMocGF0aCk7XG4gIGlmIChtYXRjaCkge1xuICAgIHJldHVybiBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGxvd2VyY2FzZWQgZmlsZSBleHRlbnNpb24gb2YgdGhlIGdpdmVuIFVSTCxcbiAqIG9yIGFuIGVtcHR5IHN0cmluZyBpZiBpdCBoYXMgbm8gZXh0ZW5zaW9uLlxuICpcbiAqIEBwYXJhbSAgIHtzdHJpbmd9IHBhdGhcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydHMuZ2V0RXh0ZW5zaW9uID0gZnVuY3Rpb24gZ2V0RXh0ZW5zaW9uKHBhdGgpIHtcbiAgdmFyIGxhc3REb3QgPSBwYXRoLmxhc3RJbmRleE9mKCcuJyk7XG4gIGlmIChsYXN0RG90ID49IDApIHtcbiAgICByZXR1cm4gcGF0aC5zdWJzdHIobGFzdERvdCkudG9Mb3dlckNhc2UoKTtcbiAgfVxuICByZXR1cm4gJyc7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGhhc2ggKFVSTCBmcmFnbWVudCksIG9mIHRoZSBnaXZlbiBwYXRoLlxuICogSWYgdGhlcmUgaXMgbm8gaGFzaCwgdGhlbiB0aGUgcm9vdCBoYXNoIChcIiNcIikgaXMgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtICAge3N0cmluZ30gcGF0aFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0cy5nZXRIYXNoID0gZnVuY3Rpb24gZ2V0SGFzaChwYXRoKSB7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRoLmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgcmV0dXJuIHBhdGguc3Vic3RyKGhhc2hJbmRleCk7XG4gIH1cbiAgcmV0dXJuICcjJztcbn07XG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgaGFzaCAoVVJMIGZyYWdtZW50KSwgaWYgYW55LCBmcm9tIHRoZSBnaXZlbiBwYXRoLlxuICpcbiAqIEBwYXJhbSAgIHtzdHJpbmd9IHBhdGhcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydHMuc3RyaXBIYXNoID0gZnVuY3Rpb24gc3RyaXBIYXNoKHBhdGgpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGguaW5kZXhPZignIycpO1xuICBpZiAoaGFzaEluZGV4ID49IDApIHtcbiAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuICByZXR1cm4gcGF0aDtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBnaXZlbiBwYXRoIGlzIGFuIEhUVFAoUykgVVJMLlxuICpcbiAqIEBwYXJhbSAgIHtzdHJpbmd9IHBhdGhcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnRzLmlzSHR0cCA9IGZ1bmN0aW9uIGlzSHR0cChwYXRoKSB7XG4gIHZhciBwcm90b2NvbCA9IHVybC5nZXRQcm90b2NvbChwYXRoKTtcbiAgaWYgKHByb3RvY29sID09PSAnaHR0cCcgfHwgcHJvdG9jb2wgPT09ICdodHRwcycpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBlbHNlIGlmIChwcm90b2NvbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gVGhlcmUgaXMgbm8gcHJvdG9jb2wuICBJZiB3ZSdyZSBydW5uaW5nIGluIGEgYnJvd3NlciwgdGhlbiBhc3N1bWUgaXQncyBIVFRQLlxuICAgIHJldHVybiBwcm9jZXNzLmJyb3dzZXI7XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gSXQncyBzb21lIG90aGVyIHByb3RvY29sLCBzdWNoIGFzIFwiZnRwOi8vXCIsIFwibW9uZ29kYjovL1wiLCBldGMuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgZ2l2ZW4gcGF0aCBpcyBhIGZpbGVzeXN0ZW0gcGF0aC5cbiAqIFRoaXMgaW5jbHVkZXMgXCJmaWxlOi8vXCIgVVJMcy5cbiAqXG4gKiBAcGFyYW0gICB7c3RyaW5nfSBwYXRoXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0cy5pc0ZpbGVTeXN0ZW1QYXRoID0gZnVuY3Rpb24gaXNGaWxlU3lzdGVtUGF0aChwYXRoKSB7XG4gIGlmIChwcm9jZXNzLmJyb3dzZXIpIHtcbiAgICAvLyBXZSdyZSBydW5uaW5nIGluIGEgYnJvd3Nlciwgc28gYXNzdW1lIHRoYXQgYWxsIHBhdGhzIGFyZSBVUkxzLlxuICAgIC8vIFRoaXMgd2F5LCBldmVuIHJlbGF0aXZlIHBhdGhzIHdpbGwgYmUgdHJlYXRlZCBhcyBVUkxzIHJhdGhlciB0aGFuIGFzIGZpbGVzeXN0ZW0gcGF0aHNcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG9jb2wgPSB1cmwuZ2V0UHJvdG9jb2wocGF0aCk7XG4gIHJldHVybiBwcm90b2NvbCA9PT0gdW5kZWZpbmVkIHx8IHByb3RvY29sID09PSAnZmlsZSc7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgZmlsZXN5c3RlbSBwYXRoIHRvIGEgcHJvcGVybHktZW5jb2RlZCBVUkwuXG4gKlxuICogVGhpcyBpcyBpbnRlbmRlZCB0byBoYW5kbGUgc2l0dWF0aW9ucyB3aGVyZSBKU09OIFNjaGVtYSAkUmVmIFBhcnNlciBpcyBjYWxsZWRcbiAqIHdpdGggYSBmaWxlc3lzdGVtIHBhdGggdGhhdCBjb250YWlucyBjaGFyYWN0ZXJzIHdoaWNoIGFyZSBub3QgYWxsb3dlZCBpbiBVUkxzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBUaGUgZm9sbG93aW5nIGZpbGVzeXN0ZW0gcGF0aHMgd291bGQgYmUgY29udmVydGVkIHRvIHRoZSBmb2xsb3dpbmcgVVJMczpcbiAqXG4gKiAgICA8XCIhQCMkJV4mKis9Pyc+Lmpzb24gICAgICAgICAgICAgID09PiAgICUzQyUyMiFAJTIzJCUyNSU1RSYqKz0lM0ZcXCclM0UuanNvblxuICogICAgQzpcXFxcTXkgRG9jdW1lbnRzXFxcXEZpbGUgKDEpLmpzb24gICA9PT4gICBDOi9NeSUyMERvY3VtZW50cy9GaWxlJTIwKDEpLmpzb25cbiAqICAgIGZpbGU6Ly9Qcm9qZWN0ICM0Mi9maWxlLmpzb24gICAgICA9PT4gICBmaWxlOi8vUHJvamVjdCUyMCUyMzQyL2ZpbGUuanNvblxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnRzLmZyb21GaWxlU3lzdGVtUGF0aCA9IGZ1bmN0aW9uIGZyb21GaWxlU3lzdGVtUGF0aChwYXRoKSB7XG4gIC8vIFN0ZXAgMTogTWFudWFsbHkgZW5jb2RlIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IGVuY29kZWQgYnkgYGVuY29kZVVSSWAuXG4gIC8vIFRoaXMgaW5jbHVkZXMgY2hhcmFjdGVycyBzdWNoIGFzIFwiI1wiIGFuZCBcIj9cIiwgd2hpY2ggaGF2ZSBzcGVjaWFsIG1lYW5pbmcgaW4gVVJMcyxcbiAgLy8gYnV0IGFyZSBqdXN0IG5vcm1hbCBjaGFyYWN0ZXJzIGluIGEgZmlsZXN5c3RlbSBwYXRoLlxuICAvLyBPbiBXaW5kb3dzLCB0aGlzIHdpbGwgYWxzbyByZXBsYWNlIGJhY2tzbGFzaGVzIHdpdGggZm9yd2FyZCBzbGFzaGVzLFxuICAvLyByYXRoZXIgdGhhbiBlbmNvZGluZyB0aGVtIGFzIHNwZWNpYWwgY2hhcmFjdGVycy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB1cmxFbmNvZGVQYXR0ZXJucy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHBhdGggPSBwYXRoLnJlcGxhY2UodXJsRW5jb2RlUGF0dGVybnNbaV0sIHVybEVuY29kZVBhdHRlcm5zW2kgKyAxXSk7XG4gIH1cblxuICAvLyBTdGVwIDI6IGBlbmNvZGVVUklgIHdpbGwgdGFrZSBjYXJlIG9mIGFsbCBvdGhlciBjaGFyYWN0ZXJzXG4gIHJldHVybiBlbmNvZGVVUkkocGF0aCk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgVVJMIHRvIGEgbG9jYWwgZmlsZXN5c3RlbSBwYXRoLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtIHtib29sZWFufSBba2VlcEZpbGVQcm90b2NvbF0gLSBJZiB0cnVlLCB0aGVuIFwiZmlsZTovL1wiIHdpbGwgTk9UIGJlIHN0cmlwcGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnRzLnRvRmlsZVN5c3RlbVBhdGggPSBmdW5jdGlvbiB0b0ZpbGVTeXN0ZW1QYXRoKHBhdGgsIGtlZXBGaWxlUHJvdG9jb2wpIHtcbiAgLy8gU3RlcCAxOiBgZGVjb2RlVVJJYCB3aWxsIGRlY29kZSBjaGFyYWN0ZXJzIHN1Y2ggYXMgQ3lyaWxsaWMgY2hhcmFjdGVycywgc3BhY2VzLCBldGMuXG4gIHBhdGggPSBkZWNvZGVVUkkocGF0aCk7XG5cbiAgLy8gU3RlcCAyOiBNYW51YWxseSBkZWNvZGUgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgZGVjb2RlZCBieSBgZGVjb2RlVVJJYC5cbiAgLy8gVGhpcyBpbmNsdWRlcyBjaGFyYWN0ZXJzIHN1Y2ggYXMgXCIjXCIgYW5kIFwiP1wiLCB3aGljaCBoYXZlIHNwZWNpYWwgbWVhbmluZyBpbiBVUkxzLFxuICAvLyBidXQgYXJlIGp1c3Qgbm9ybWFsIGNoYXJhY3RlcnMgaW4gYSBmaWxlc3lzdGVtIHBhdGguXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdXJsRGVjb2RlUGF0dGVybnMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICBwYXRoID0gcGF0aC5yZXBsYWNlKHVybERlY29kZVBhdHRlcm5zW2ldLCB1cmxEZWNvZGVQYXR0ZXJuc1tpICsgMV0pO1xuICB9XG5cbiAgLy8gU3RlcCAzOiBJZiBpdCdzIGEgXCJmaWxlOi8vXCIgVVJMLCB0aGVuIGZvcm1hdCBpdCBjb25zaXN0ZW50bHlcbiAgLy8gb3IgY29udmVydCBpdCB0byBhIGxvY2FsIGZpbGVzeXN0ZW0gcGF0aFxuICB2YXIgaXNGaWxlVXJsID0gcGF0aC5zdWJzdHIoMCwgNykudG9Mb3dlckNhc2UoKSA9PT0gJ2ZpbGU6Ly8nO1xuICBpZiAoaXNGaWxlVXJsKSB7XG4gICAgLy8gU3RyaXAtb2ZmIHRoZSBwcm90b2NvbCwgYW5kIHRoZSBpbml0aWFsIFwiL1wiLCBpZiB0aGVyZSBpcyBvbmVcbiAgICBwYXRoID0gcGF0aFs3XSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoOCkgOiBwYXRoLnN1YnN0cig3KTtcblxuICAgIC8vIGluc2VydCBhIGNvbG9uIChcIjpcIikgYWZ0ZXIgdGhlIGRyaXZlIGxldHRlciBvbiBXaW5kb3dzXG4gICAgaWYgKGlzV2luZG93cyAmJiBwYXRoWzFdID09PSAnLycpIHtcbiAgICAgIHBhdGggPSBwYXRoWzBdICsgJzonICsgcGF0aC5zdWJzdHIoMSk7XG4gICAgfVxuXG4gICAgaWYgKGtlZXBGaWxlUHJvdG9jb2wpIHtcbiAgICAgIC8vIFJldHVybiB0aGUgY29uc2lzdGVudGx5LWZvcm1hdHRlZCBcImZpbGU6Ly9cIiBVUkxcbiAgICAgIHBhdGggPSAnZmlsZTovLy8nICsgcGF0aDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBDb252ZXJ0IHRoZSBcImZpbGU6Ly9cIiBVUkwgdG8gYSBsb2NhbCBmaWxlc3lzdGVtIHBhdGguXG4gICAgICAvLyBPbiBXaW5kb3dzLCBpdCB3aWxsIHN0YXJ0IHdpdGggc29tZXRoaW5nIGxpa2UgXCJDOi9cIi5cbiAgICAgIC8vIE9uIFBvc2l4LCBpdCB3aWxsIHN0YXJ0IHdpdGggXCIvXCJcbiAgICAgIGlzRmlsZVVybCA9IGZhbHNlO1xuICAgICAgcGF0aCA9IGlzV2luZG93cyA/IHBhdGggOiAnLycgKyBwYXRoO1xuICAgIH1cbiAgfVxuXG4gIC8vIFN0ZXAgNDogT24gV2luZG93cywgY29udmVydCBiYWNrc2xhc2hlcyB0byBmb3J3YXJkIHNsYXNoZXMsXG4gIC8vIHVubGVzcyBpdCdzIGEgXCJmaWxlOi8vXCIgVVJMXG4gIGlmIChpc1dpbmRvd3MgJiYgIWlzRmlsZVVybCkge1xuICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoZm9yd2FyZFNsYXNoUGF0dGVybiwgJ1xcXFwnKTtcbiAgfVxuXG4gIHJldHVybiBwYXRoO1xufTtcbiIsIi8qIGVzbGludCBsaW5lcy1hcm91bmQtY29tbWVudDogWzIsIHtiZWZvcmVCbG9ja0NvbW1lbnQ6IGZhbHNlfV0gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHlhbWwgPSByZXF1aXJlKCdqcy15YW1sJyksXG4gICAgb25vICA9IHJlcXVpcmUoJ29ubycpO1xuXG4vKipcbiAqIFNpbXBsZSBZQU1MIHBhcnNpbmcgZnVuY3Rpb25zLCBzaW1pbGFyIHRvIHtAbGluayBKU09OLnBhcnNlfSBhbmQge0BsaW5rIEpTT04uc3RyaW5naWZ5fVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIFBhcnNlcyBhIFlBTUwgc3RyaW5nIGFuZCByZXR1cm5zIHRoZSB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSBUaGUgWUFNTCBzdHJpbmcgdG8gYmUgcGFyc2VkXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtyZXZpdmVyXSAtIE5vdCBjdXJyZW50bHkgc3VwcG9ydGVkLiBQcm92aWRlZCBmb3IgY29uc2lzdGVuY3kgd2l0aCB7QGxpbmsgSlNPTi5wYXJzZX1cbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICBwYXJzZTogZnVuY3Rpb24geWFtbFBhcnNlKHRleHQsIHJldml2ZXIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHlhbWwuc2FmZUxvYWQodGV4dCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVjYS9qcy15YW1sL2lzc3Vlcy8xNTNcbiAgICAgICAgdGhyb3cgb25vKGUsIGUubWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIEphdmFTY3JpcHQgdmFsdWUgdG8gYSBZQU1MIHN0cmluZy5cbiAgICpcbiAgICogQHBhcmFtICAgeyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gWUFNTFxuICAgKiBAcGFyYW0gICB7ZnVuY3Rpb258YXJyYXl9IHJlcGxhY2VyIC0gTm90IGN1cnJlbnRseSBzdXBwb3J0ZWQuIFByb3ZpZGVkIGZvciBjb25zaXN0ZW5jeSB3aXRoIHtAbGluayBKU09OLnN0cmluZ2lmeX1cbiAgICogQHBhcmFtICAge3N0cmluZ3xudW1iZXJ9IHNwYWNlIC0gVGhlIG51bWJlciBvZiBzcGFjZXMgdG8gdXNlIGZvciBpbmRlbnRhdGlvbiwgb3IgYSBzdHJpbmcgY29udGFpbmluZyB0aGUgbnVtYmVyIG9mIHNwYWNlcy5cbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHN0cmluZ2lmeTogZnVuY3Rpb24geWFtbFN0cmluZ2lmeSh2YWx1ZSwgcmVwbGFjZXIsIHNwYWNlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpbmRlbnQgPSAodHlwZW9mIHNwYWNlID09PSAnc3RyaW5nJyA/IHNwYWNlLmxlbmd0aCA6IHNwYWNlKSB8fCAyO1xuICAgICAgcmV0dXJuIHlhbWwuc2FmZUR1bXAodmFsdWUsIHtpbmRlbnQ6IGluZGVudH0pO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlY2EvanMteWFtbC9pc3N1ZXMvMTUzXG4gICAgICAgIHRocm93IG9ubyhlLCBlLm1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKlxuICAgKiBUaGUgb3JkZXIgdGhhdCB0aGlzIHZhbGlkYXRvciB3aWxsIHJ1biwgaW4gcmVsYXRpb24gdG8gb3RoZXIgdmFsaWRhdG9ycy5cbiAgICpcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIG9yZGVyOiAxMDAsXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGlzIHZhbGlkYXRvciBjYW4gcGFyc2UgYSBnaXZlbiBzY2hlbWEgZmlsZS5cbiAgICpcbiAgICogVGhlcmUgYXJlIHRocmVlIG9wcG9ydHVuaXRpZXMgYXQgd2hpY2ggYSB2YWxpZGF0b3IgbWF5IGNob29zZSB0byB2YWxpZGF0ZSBhIHNjaGVtYTpcbiAgICpcbiAgICogIDEgLSBBZnRlciB0aGUgSlNPTiBTY2hlbWEgaXMgcGFyc2VkLCBidXQgYmVmb3JlIGFueSBvZiBpdHMgSlNPTiBSZWZlcmVuY2VzIGFyZSByZXNvbHZlZFxuICAgKlxuICAgKiAgMiAtIEFmdGVyIGFsbCBKU09OIFJlZmVyZW5jZXMgaGF2ZSBiZWVuIHJlc29sdmVkIChhbmQgdGhlICRSZWZzIG9iamVjdCBoYXMgYmVlbiBwb3B1bGF0ZWQpLFxuICAgKiAgICAgIGJ1dCBiZWZvcmUgYW55IHJlZmVyZW5jZXMgaGF2ZSBiZWVuIGRlcmVmZXJlbmNlZFxuICAgKlxuICAgKiAgMyAtIEFmdGVyIGFsbCBKU09OIFJlZmVyZW5jZXMgaGF2ZSBiZWVuIGRlcmVmZXJlbmNlZFxuICAgKlxuICAgKiBKU09OIFNjaGVtYSAkUmVmIFBhcnNlcidzIHtAbGluayAkUmVmUGFyc2VyLnZhbGlkYXRlfSBtZXRob2Qgd2lsbCBvbmx5IHBlcmZvcm0gYXMgbXVjaCBwcm9jZXNzaW5nXG4gICAqIGFzIGlzIG5lY2Vzc2FyeSB0byBzYXRpc2Z5IGFsbCB2YWxpZGF0b3JzLiBTbywgaWYgYWxsIHZhbGlkYXRvcnMgYXJlIGFibGUgdG8gcHJvY2VzcyB0aGVcbiAgICogc2NoZW1hIGFmdGVyIHN0ZXAgMSBhYm92ZSwgdGhlbiBzdGVwcyAyIGFuZCAzIHdpbGwgbm90IGJlIHBlcmZvcm1lZC4gIElmIHNvbWUgdmFsaWRhdG9ycyBhcmVuJ3RcbiAgICogYWJsZSB0byBwcm9jZXNzIHRoZSBzY2hlbWEgYWZ0ZXIgc3RlcCAxLCB0aGVuIHN0ZXAgMiB3aWxsIGJlIHBlcmZvcm1lZCBhbmQgdGhlIHJlbWFpbmluZyB2YWxpZGF0b3JzXG4gICAqIHdpbGwgYmUgZ2l2ZW4gYSBzZWNvbmQgY2hhbmNlIHRvIHByb2Nlc3MgdGhlIHNjaGVtYS4gSWYgdGhleSBhbGwgZG8sIHRoZW4gc3RlcCAzIHdpbGwgbm90IGJlIHBlcmZvcm1lZC5cbiAgICogSWYgdGhlcmUgYXJlIHN0aWxsIHJlbWFpbmluZyB2YWxpZGF0b3JzLCB0aGVuIHN0ZXAgMyB3aWxsIGJlIHBlcmZvcm1lZCBhbmQgdGhlIHJlbWFpbmluZyB2YWxpZGF0b3JzXG4gICAqIHdpbGwgYmUgZ2l2ZW4gYSB0aGlyZCBjaGFuY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaWxlICAgICAgICAgICAgICAgLSBBbiBvYmplY3QgY29udGFpbmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgSlNPTiBTY2hlbWFcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUudXJsICAgICAgICAgICAtIFRoZSBmdWxsIFVSTCBvZiB0aGUgc2NoZW1hIGZpbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUuZXh0ZW5zaW9uICAgICAtIFRoZSBsb3dlcmNhc2VkIHNjaGVhbSBmaWxlIGV4dGVuc2lvbiAoZS5nLiBcIi5qc29uXCIsIFwiLnlhbWxcIiwgZXRjLilcbiAgICogQHBhcmFtIHsqfSAgICAgIGZpbGUuZGF0YSAgICAgICAgICAtIFRoZSByYXcgZmlsZSBjb250ZW50cy4gVGhpcyB3aWxsIGJlIHdoYXRldmVyIGRhdGEgdHlwZSB3YXMgcmV0dXJuZWQgYnkgdGhlIHJlc29sdmVyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaWxlLnBhcnNlZCAgICAgICAgLSBUaGUgcGFyc2VkIEpTT04gU2NoZW1hIChhdmFpbGFibGUgaW4gc3RlcHMgMSwgMiwgYW5kIDMpXG4gICAqIEBwYXJhbSB7JFJlZnN9ICBmaWxlLnJlc29sdmVkICAgICAgLSBUaGUgcmVzb2x2ZWQgSlNPTiBSZWZlcmVuY2VzIChhdmFpbGFibGUgaW4gc3RlcHMgMiBhbmQgMylcbiAgICogQHBhcmFtIHtvYmplY3R9IGZpbGUuZGVyZWZlcmVuY2VkICAtIFRoZSBkZXJlZmVyZW5jZWQgSlNPTiBTY2hlbWEgKG9ubHkgYXZhaWxhYmxlIGluIHN0ZXAgMylcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBjYW5WYWxpZGF0ZTogZnVuY3Rpb24gY2FuVmFsaWRhdGUoZmlsZSkge1xuICAgIC8vIFotU2NoZW1hIHJlcXVpcmVzIEpTT04gUmVmZXJlbmNlcyB0byBhbHJlYWR5IGJlIHJlc29sdmVkIChidXQgbm90IGRlcmVmZXJlbmNlZClcbiAgICByZXR1cm4gISFmaWxlLnJlc29sdmVkO1xuICB9LFxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgdGhlIGdpdmVuIEpTT04gU2NoZW1hXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmaWxlICAgICAgICAgICAtIEFuIG9iamVjdCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSByZWZlcmVuY2VkIGZpbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUudXJsICAgICAgIC0gVGhlIGZ1bGwgVVJMIG9mIHRoZSByZWZlcmVuY2VkIGZpbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUuZXh0ZW5zaW9uIC0gVGhlIGxvd2VyY2FzZWQgZmlsZSBleHRlbnNpb24gKGUuZy4gXCIudHh0XCIsIFwiLmh0bWxcIiwgZXRjLilcbiAgICogQHBhcmFtIHsqfSAgICAgIGZpbGUuZGF0YSAgICAgIC0gVGhlIGZpbGUgY29udGVudHMuIFRoaXMgd2lsbCBiZSB3aGF0ZXZlciBkYXRhIHR5cGUgd2FzIHJldHVybmVkIGJ5IHRoZSByZXNvbHZlclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxCdWZmZXI+fVxuICAgKi9cbiAgdmFsaWRhdGU6IGZ1bmN0aW9uIHZhbGlkYXRlKGZpbGUpIHtcbiAgICAvLyBUT0RPXG4gIH1cbn07XG4iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICBpZiAobXMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtcyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XG4gICAgcGx1cmFsKG1zLCBoLCAnaG91cicpIHx8XG4gICAgcGx1cmFsKG1zLCBtLCAnbWludXRlJykgfHxcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxuICAgIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG4gIGlmIChtcyA8IG4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICB9XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XG59XG4iLCIvKiEgTmF0aXZlIFByb21pc2UgT25seVxuICAgIHYwLjguMSAoYykgS3lsZSBTaW1wc29uXG4gICAgTUlUIExpY2Vuc2U6IGh0dHA6Ly9nZXRpZnkubWl0LWxpY2Vuc2Uub3JnXG4qL1xuXG4oZnVuY3Rpb24gVU1EKG5hbWUsY29udGV4dCxkZWZpbml0aW9uKXtcblx0Ly8gc3BlY2lhbCBmb3JtIG9mIFVNRCBmb3IgcG9seWZpbGxpbmcgYWNyb3NzIGV2aXJvbm1lbnRzXG5cdGNvbnRleHRbbmFtZV0gPSBjb250ZXh0W25hbWVdIHx8IGRlZmluaXRpb24oKTtcblx0aWYgKHR5cGVvZiBtb2R1bGUgIT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUuZXhwb3J0cykgeyBtb2R1bGUuZXhwb3J0cyA9IGNvbnRleHRbbmFtZV07IH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkgeyBkZWZpbmUoZnVuY3Rpb24gJEFNRCQoKXsgcmV0dXJuIGNvbnRleHRbbmFtZV07IH0pOyB9XG59KShcIlByb21pc2VcIix0eXBlb2YgZ2xvYmFsICE9IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0aGlzLGZ1bmN0aW9uIERFRigpe1xuXHQvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgYnVpbHRJblByb3AsIGN5Y2xlLCBzY2hlZHVsaW5nX3F1ZXVlLFxuXHRcdFRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcblx0XHR0aW1lciA9ICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9IFwidW5kZWZpbmVkXCIpID9cblx0XHRcdGZ1bmN0aW9uIHRpbWVyKGZuKSB7IHJldHVybiBzZXRJbW1lZGlhdGUoZm4pOyB9IDpcblx0XHRcdHNldFRpbWVvdXRcblx0O1xuXG5cdC8vIGRhbW1pdCwgSUU4LlxuXHR0cnkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSxcInhcIix7fSk7XG5cdFx0YnVpbHRJblByb3AgPSBmdW5jdGlvbiBidWlsdEluUHJvcChvYmosbmFtZSx2YWwsY29uZmlnKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaixuYW1lLHtcblx0XHRcdFx0dmFsdWU6IHZhbCxcblx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogY29uZmlnICE9PSBmYWxzZVxuXHRcdFx0fSk7XG5cdFx0fTtcblx0fVxuXHRjYXRjaCAoZXJyKSB7XG5cdFx0YnVpbHRJblByb3AgPSBmdW5jdGlvbiBidWlsdEluUHJvcChvYmosbmFtZSx2YWwpIHtcblx0XHRcdG9ialtuYW1lXSA9IHZhbDtcblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fTtcblx0fVxuXG5cdC8vIE5vdGU6IHVzaW5nIGEgcXVldWUgaW5zdGVhZCBvZiBhcnJheSBmb3IgZWZmaWNpZW5jeVxuXHRzY2hlZHVsaW5nX3F1ZXVlID0gKGZ1bmN0aW9uIFF1ZXVlKCkge1xuXHRcdHZhciBmaXJzdCwgbGFzdCwgaXRlbTtcblxuXHRcdGZ1bmN0aW9uIEl0ZW0oZm4sc2VsZikge1xuXHRcdFx0dGhpcy5mbiA9IGZuO1xuXHRcdFx0dGhpcy5zZWxmID0gc2VsZjtcblx0XHRcdHRoaXMubmV4dCA9IHZvaWQgMDtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0YWRkOiBmdW5jdGlvbiBhZGQoZm4sc2VsZikge1xuXHRcdFx0XHRpdGVtID0gbmV3IEl0ZW0oZm4sc2VsZik7XG5cdFx0XHRcdGlmIChsYXN0KSB7XG5cdFx0XHRcdFx0bGFzdC5uZXh0ID0gaXRlbTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRmaXJzdCA9IGl0ZW07XG5cdFx0XHRcdH1cblx0XHRcdFx0bGFzdCA9IGl0ZW07XG5cdFx0XHRcdGl0ZW0gPSB2b2lkIDA7XG5cdFx0XHR9LFxuXHRcdFx0ZHJhaW46IGZ1bmN0aW9uIGRyYWluKCkge1xuXHRcdFx0XHR2YXIgZiA9IGZpcnN0O1xuXHRcdFx0XHRmaXJzdCA9IGxhc3QgPSBjeWNsZSA9IHZvaWQgMDtcblxuXHRcdFx0XHR3aGlsZSAoZikge1xuXHRcdFx0XHRcdGYuZm4uY2FsbChmLnNlbGYpO1xuXHRcdFx0XHRcdGYgPSBmLm5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9KSgpO1xuXG5cdGZ1bmN0aW9uIHNjaGVkdWxlKGZuLHNlbGYpIHtcblx0XHRzY2hlZHVsaW5nX3F1ZXVlLmFkZChmbixzZWxmKTtcblx0XHRpZiAoIWN5Y2xlKSB7XG5cdFx0XHRjeWNsZSA9IHRpbWVyKHNjaGVkdWxpbmdfcXVldWUuZHJhaW4pO1xuXHRcdH1cblx0fVxuXG5cdC8vIHByb21pc2UgZHVjayB0eXBpbmdcblx0ZnVuY3Rpb24gaXNUaGVuYWJsZShvKSB7XG5cdFx0dmFyIF90aGVuLCBvX3R5cGUgPSB0eXBlb2YgbztcblxuXHRcdGlmIChvICE9IG51bGwgJiZcblx0XHRcdChcblx0XHRcdFx0b190eXBlID09IFwib2JqZWN0XCIgfHwgb190eXBlID09IFwiZnVuY3Rpb25cIlxuXHRcdFx0KVxuXHRcdCkge1xuXHRcdFx0X3RoZW4gPSBvLnRoZW47XG5cdFx0fVxuXHRcdHJldHVybiB0eXBlb2YgX3RoZW4gPT0gXCJmdW5jdGlvblwiID8gX3RoZW4gOiBmYWxzZTtcblx0fVxuXG5cdGZ1bmN0aW9uIG5vdGlmeSgpIHtcblx0XHRmb3IgKHZhciBpPTA7IGk8dGhpcy5jaGFpbi5sZW5ndGg7IGkrKykge1xuXHRcdFx0bm90aWZ5SXNvbGF0ZWQoXG5cdFx0XHRcdHRoaXMsXG5cdFx0XHRcdCh0aGlzLnN0YXRlID09PSAxKSA/IHRoaXMuY2hhaW5baV0uc3VjY2VzcyA6IHRoaXMuY2hhaW5baV0uZmFpbHVyZSxcblx0XHRcdFx0dGhpcy5jaGFpbltpXVxuXHRcdFx0KTtcblx0XHR9XG5cdFx0dGhpcy5jaGFpbi5sZW5ndGggPSAwO1xuXHR9XG5cblx0Ly8gTk9URTogVGhpcyBpcyBhIHNlcGFyYXRlIGZ1bmN0aW9uIHRvIGlzb2xhdGVcblx0Ly8gdGhlIGB0cnkuLmNhdGNoYCBzbyB0aGF0IG90aGVyIGNvZGUgY2FuIGJlXG5cdC8vIG9wdGltaXplZCBiZXR0ZXJcblx0ZnVuY3Rpb24gbm90aWZ5SXNvbGF0ZWQoc2VsZixjYixjaGFpbikge1xuXHRcdHZhciByZXQsIF90aGVuO1xuXHRcdHRyeSB7XG5cdFx0XHRpZiAoY2IgPT09IGZhbHNlKSB7XG5cdFx0XHRcdGNoYWluLnJlamVjdChzZWxmLm1zZyk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0aWYgKGNiID09PSB0cnVlKSB7XG5cdFx0XHRcdFx0cmV0ID0gc2VsZi5tc2c7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0cmV0ID0gY2IuY2FsbCh2b2lkIDAsc2VsZi5tc2cpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHJldCA9PT0gY2hhaW4ucHJvbWlzZSkge1xuXHRcdFx0XHRcdGNoYWluLnJlamVjdChUeXBlRXJyb3IoXCJQcm9taXNlLWNoYWluIGN5Y2xlXCIpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIGlmIChfdGhlbiA9IGlzVGhlbmFibGUocmV0KSkge1xuXHRcdFx0XHRcdF90aGVuLmNhbGwocmV0LGNoYWluLnJlc29sdmUsY2hhaW4ucmVqZWN0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRjaGFpbi5yZXNvbHZlKHJldCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0Y2F0Y2ggKGVycikge1xuXHRcdFx0Y2hhaW4ucmVqZWN0KGVycik7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gcmVzb2x2ZShtc2cpIHtcblx0XHR2YXIgX3RoZW4sIHNlbGYgPSB0aGlzO1xuXG5cdFx0Ly8gYWxyZWFkeSB0cmlnZ2VyZWQ/XG5cdFx0aWYgKHNlbGYudHJpZ2dlcmVkKSB7IHJldHVybjsgfVxuXG5cdFx0c2VsZi50cmlnZ2VyZWQgPSB0cnVlO1xuXG5cdFx0Ly8gdW53cmFwXG5cdFx0aWYgKHNlbGYuZGVmKSB7XG5cdFx0XHRzZWxmID0gc2VsZi5kZWY7XG5cdFx0fVxuXG5cdFx0dHJ5IHtcblx0XHRcdGlmIChfdGhlbiA9IGlzVGhlbmFibGUobXNnKSkge1xuXHRcdFx0XHRzY2hlZHVsZShmdW5jdGlvbigpe1xuXHRcdFx0XHRcdHZhciBkZWZfd3JhcHBlciA9IG5ldyBNYWtlRGVmV3JhcHBlcihzZWxmKTtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0X3RoZW4uY2FsbChtc2csXG5cdFx0XHRcdFx0XHRcdGZ1bmN0aW9uICRyZXNvbHZlJCgpeyByZXNvbHZlLmFwcGx5KGRlZl93cmFwcGVyLGFyZ3VtZW50cyk7IH0sXG5cdFx0XHRcdFx0XHRcdGZ1bmN0aW9uICRyZWplY3QkKCl7IHJlamVjdC5hcHBseShkZWZfd3JhcHBlcixhcmd1bWVudHMpOyB9XG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRyZWplY3QuY2FsbChkZWZfd3JhcHBlcixlcnIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRzZWxmLm1zZyA9IG1zZztcblx0XHRcdFx0c2VsZi5zdGF0ZSA9IDE7XG5cdFx0XHRcdGlmIChzZWxmLmNoYWluLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRzY2hlZHVsZShub3RpZnksc2VsZik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0Y2F0Y2ggKGVycikge1xuXHRcdFx0cmVqZWN0LmNhbGwobmV3IE1ha2VEZWZXcmFwcGVyKHNlbGYpLGVycik7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gcmVqZWN0KG1zZykge1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdC8vIGFscmVhZHkgdHJpZ2dlcmVkP1xuXHRcdGlmIChzZWxmLnRyaWdnZXJlZCkgeyByZXR1cm47IH1cblxuXHRcdHNlbGYudHJpZ2dlcmVkID0gdHJ1ZTtcblxuXHRcdC8vIHVud3JhcFxuXHRcdGlmIChzZWxmLmRlZikge1xuXHRcdFx0c2VsZiA9IHNlbGYuZGVmO1xuXHRcdH1cblxuXHRcdHNlbGYubXNnID0gbXNnO1xuXHRcdHNlbGYuc3RhdGUgPSAyO1xuXHRcdGlmIChzZWxmLmNoYWluLmxlbmd0aCA+IDApIHtcblx0XHRcdHNjaGVkdWxlKG5vdGlmeSxzZWxmKTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBpdGVyYXRlUHJvbWlzZXMoQ29uc3RydWN0b3IsYXJyLHJlc29sdmVyLHJlamVjdGVyKSB7XG5cdFx0Zm9yICh2YXIgaWR4PTA7IGlkeDxhcnIubGVuZ3RoOyBpZHgrKykge1xuXHRcdFx0KGZ1bmN0aW9uIElJRkUoaWR4KXtcblx0XHRcdFx0Q29uc3RydWN0b3IucmVzb2x2ZShhcnJbaWR4XSlcblx0XHRcdFx0LnRoZW4oXG5cdFx0XHRcdFx0ZnVuY3Rpb24gJHJlc29sdmVyJChtc2cpe1xuXHRcdFx0XHRcdFx0cmVzb2x2ZXIoaWR4LG1zZyk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRyZWplY3RlclxuXHRcdFx0XHQpO1xuXHRcdFx0fSkoaWR4KTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBNYWtlRGVmV3JhcHBlcihzZWxmKSB7XG5cdFx0dGhpcy5kZWYgPSBzZWxmO1xuXHRcdHRoaXMudHJpZ2dlcmVkID0gZmFsc2U7XG5cdH1cblxuXHRmdW5jdGlvbiBNYWtlRGVmKHNlbGYpIHtcblx0XHR0aGlzLnByb21pc2UgPSBzZWxmO1xuXHRcdHRoaXMuc3RhdGUgPSAwO1xuXHRcdHRoaXMudHJpZ2dlcmVkID0gZmFsc2U7XG5cdFx0dGhpcy5jaGFpbiA9IFtdO1xuXHRcdHRoaXMubXNnID0gdm9pZCAwO1xuXHR9XG5cblx0ZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuXHRcdGlmICh0eXBlb2YgZXhlY3V0b3IgIT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHR0aHJvdyBUeXBlRXJyb3IoXCJOb3QgYSBmdW5jdGlvblwiKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5fX05QT19fICE9PSAwKSB7XG5cdFx0XHR0aHJvdyBUeXBlRXJyb3IoXCJOb3QgYSBwcm9taXNlXCIpO1xuXHRcdH1cblxuXHRcdC8vIGluc3RhbmNlIHNoYWRvd2luZyB0aGUgaW5oZXJpdGVkIFwiYnJhbmRcIlxuXHRcdC8vIHRvIHNpZ25hbCBhbiBhbHJlYWR5IFwiaW5pdGlhbGl6ZWRcIiBwcm9taXNlXG5cdFx0dGhpcy5fX05QT19fID0gMTtcblxuXHRcdHZhciBkZWYgPSBuZXcgTWFrZURlZih0aGlzKTtcblxuXHRcdHRoaXNbXCJ0aGVuXCJdID0gZnVuY3Rpb24gdGhlbihzdWNjZXNzLGZhaWx1cmUpIHtcblx0XHRcdHZhciBvID0ge1xuXHRcdFx0XHRzdWNjZXNzOiB0eXBlb2Ygc3VjY2VzcyA9PSBcImZ1bmN0aW9uXCIgPyBzdWNjZXNzIDogdHJ1ZSxcblx0XHRcdFx0ZmFpbHVyZTogdHlwZW9mIGZhaWx1cmUgPT0gXCJmdW5jdGlvblwiID8gZmFpbHVyZSA6IGZhbHNlXG5cdFx0XHR9O1xuXHRcdFx0Ly8gTm90ZTogYHRoZW4oLi4pYCBpdHNlbGYgY2FuIGJlIGJvcnJvd2VkIHRvIGJlIHVzZWQgYWdhaW5zdFxuXHRcdFx0Ly8gYSBkaWZmZXJlbnQgcHJvbWlzZSBjb25zdHJ1Y3RvciBmb3IgbWFraW5nIHRoZSBjaGFpbmVkIHByb21pc2UsXG5cdFx0XHQvLyBieSBzdWJzdGl0dXRpbmcgYSBkaWZmZXJlbnQgYHRoaXNgIGJpbmRpbmcuXG5cdFx0XHRvLnByb21pc2UgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihmdW5jdGlvbiBleHRyYWN0Q2hhaW4ocmVzb2x2ZSxyZWplY3QpIHtcblx0XHRcdFx0aWYgKHR5cGVvZiByZXNvbHZlICE9IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgcmVqZWN0ICE9IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdHRocm93IFR5cGVFcnJvcihcIk5vdCBhIGZ1bmN0aW9uXCIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0by5yZXNvbHZlID0gcmVzb2x2ZTtcblx0XHRcdFx0by5yZWplY3QgPSByZWplY3Q7XG5cdFx0XHR9KTtcblx0XHRcdGRlZi5jaGFpbi5wdXNoKG8pO1xuXG5cdFx0XHRpZiAoZGVmLnN0YXRlICE9PSAwKSB7XG5cdFx0XHRcdHNjaGVkdWxlKG5vdGlmeSxkZWYpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gby5wcm9taXNlO1xuXHRcdH07XG5cdFx0dGhpc1tcImNhdGNoXCJdID0gZnVuY3Rpb24gJGNhdGNoJChmYWlsdXJlKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy50aGVuKHZvaWQgMCxmYWlsdXJlKTtcblx0XHR9O1xuXG5cdFx0dHJ5IHtcblx0XHRcdGV4ZWN1dG9yLmNhbGwoXG5cdFx0XHRcdHZvaWQgMCxcblx0XHRcdFx0ZnVuY3Rpb24gcHVibGljUmVzb2x2ZShtc2cpe1xuXHRcdFx0XHRcdHJlc29sdmUuY2FsbChkZWYsbXNnKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0ZnVuY3Rpb24gcHVibGljUmVqZWN0KG1zZykge1xuXHRcdFx0XHRcdHJlamVjdC5jYWxsKGRlZixtc2cpO1xuXHRcdFx0XHR9XG5cdFx0XHQpO1xuXHRcdH1cblx0XHRjYXRjaCAoZXJyKSB7XG5cdFx0XHRyZWplY3QuY2FsbChkZWYsZXJyKTtcblx0XHR9XG5cdH1cblxuXHR2YXIgUHJvbWlzZVByb3RvdHlwZSA9IGJ1aWx0SW5Qcm9wKHt9LFwiY29uc3RydWN0b3JcIixQcm9taXNlLFxuXHRcdC8qY29uZmlndXJhYmxlPSovZmFsc2Vcblx0KTtcblxuXHQvLyBOb3RlOiBBbmRyb2lkIDQgY2Fubm90IHVzZSBgT2JqZWN0LmRlZmluZVByb3BlcnR5KC4uKWAgaGVyZVxuXHRQcm9taXNlLnByb3RvdHlwZSA9IFByb21pc2VQcm90b3R5cGU7XG5cblx0Ly8gYnVpbHQtaW4gXCJicmFuZFwiIHRvIHNpZ25hbCBhbiBcInVuaW5pdGlhbGl6ZWRcIiBwcm9taXNlXG5cdGJ1aWx0SW5Qcm9wKFByb21pc2VQcm90b3R5cGUsXCJfX05QT19fXCIsMCxcblx0XHQvKmNvbmZpZ3VyYWJsZT0qL2ZhbHNlXG5cdCk7XG5cblx0YnVpbHRJblByb3AoUHJvbWlzZSxcInJlc29sdmVcIixmdW5jdGlvbiBQcm9taXNlJHJlc29sdmUobXNnKSB7XG5cdFx0dmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuXHRcdC8vIHNwZWMgbWFuZGF0ZWQgY2hlY2tzXG5cdFx0Ly8gbm90ZTogYmVzdCBcImlzUHJvbWlzZVwiIGNoZWNrIHRoYXQncyBwcmFjdGljYWwgZm9yIG5vd1xuXHRcdGlmIChtc2cgJiYgdHlwZW9mIG1zZyA9PSBcIm9iamVjdFwiICYmIG1zZy5fX05QT19fID09PSAxKSB7XG5cdFx0XHRyZXR1cm4gbXNnO1xuXHRcdH1cblxuXHRcdHJldHVybiBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSxyZWplY3Qpe1xuXHRcdFx0aWYgKHR5cGVvZiByZXNvbHZlICE9IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgcmVqZWN0ICE9IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHR0aHJvdyBUeXBlRXJyb3IoXCJOb3QgYSBmdW5jdGlvblwiKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzb2x2ZShtc2cpO1xuXHRcdH0pO1xuXHR9KTtcblxuXHRidWlsdEluUHJvcChQcm9taXNlLFwicmVqZWN0XCIsZnVuY3Rpb24gUHJvbWlzZSRyZWplY3QobXNnKSB7XG5cdFx0cmV0dXJuIG5ldyB0aGlzKGZ1bmN0aW9uIGV4ZWN1dG9yKHJlc29sdmUscmVqZWN0KXtcblx0XHRcdGlmICh0eXBlb2YgcmVzb2x2ZSAhPSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIHJlamVjdCAhPSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0dGhyb3cgVHlwZUVycm9yKFwiTm90IGEgZnVuY3Rpb25cIik7XG5cdFx0XHR9XG5cblx0XHRcdHJlamVjdChtc2cpO1xuXHRcdH0pO1xuXHR9KTtcblxuXHRidWlsdEluUHJvcChQcm9taXNlLFwiYWxsXCIsZnVuY3Rpb24gUHJvbWlzZSRhbGwoYXJyKSB7XG5cdFx0dmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuXHRcdC8vIHNwZWMgbWFuZGF0ZWQgY2hlY2tzXG5cdFx0aWYgKFRvU3RyaW5nLmNhbGwoYXJyKSAhPSBcIltvYmplY3QgQXJyYXldXCIpIHtcblx0XHRcdHJldHVybiBDb25zdHJ1Y3Rvci5yZWplY3QoVHlwZUVycm9yKFwiTm90IGFuIGFycmF5XCIpKTtcblx0XHR9XG5cdFx0aWYgKGFyci5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybiBDb25zdHJ1Y3Rvci5yZXNvbHZlKFtdKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbmV3IENvbnN0cnVjdG9yKGZ1bmN0aW9uIGV4ZWN1dG9yKHJlc29sdmUscmVqZWN0KXtcblx0XHRcdGlmICh0eXBlb2YgcmVzb2x2ZSAhPSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIHJlamVjdCAhPSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0dGhyb3cgVHlwZUVycm9yKFwiTm90IGEgZnVuY3Rpb25cIik7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBsZW4gPSBhcnIubGVuZ3RoLCBtc2dzID0gQXJyYXkobGVuKSwgY291bnQgPSAwO1xuXG5cdFx0XHRpdGVyYXRlUHJvbWlzZXMoQ29uc3RydWN0b3IsYXJyLGZ1bmN0aW9uIHJlc29sdmVyKGlkeCxtc2cpIHtcblx0XHRcdFx0bXNnc1tpZHhdID0gbXNnO1xuXHRcdFx0XHRpZiAoKytjb3VudCA9PT0gbGVuKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZShtc2dzKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxyZWplY3QpO1xuXHRcdH0pO1xuXHR9KTtcblxuXHRidWlsdEluUHJvcChQcm9taXNlLFwicmFjZVwiLGZ1bmN0aW9uIFByb21pc2UkcmFjZShhcnIpIHtcblx0XHR2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuXG5cdFx0Ly8gc3BlYyBtYW5kYXRlZCBjaGVja3Ncblx0XHRpZiAoVG9TdHJpbmcuY2FsbChhcnIpICE9IFwiW29iamVjdCBBcnJheV1cIikge1xuXHRcdFx0cmV0dXJuIENvbnN0cnVjdG9yLnJlamVjdChUeXBlRXJyb3IoXCJOb3QgYW4gYXJyYXlcIikpO1xuXHRcdH1cblxuXHRcdHJldHVybiBuZXcgQ29uc3RydWN0b3IoZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSxyZWplY3Qpe1xuXHRcdFx0aWYgKHR5cGVvZiByZXNvbHZlICE9IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgcmVqZWN0ICE9IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHR0aHJvdyBUeXBlRXJyb3IoXCJOb3QgYSBmdW5jdGlvblwiKTtcblx0XHRcdH1cblxuXHRcdFx0aXRlcmF0ZVByb21pc2VzKENvbnN0cnVjdG9yLGFycixmdW5jdGlvbiByZXNvbHZlcihpZHgsbXNnKXtcblx0XHRcdFx0cmVzb2x2ZShtc2cpO1xuXHRcdFx0fSxyZWplY3QpO1xuXHRcdH0pO1xuXHR9KTtcblxuXHRyZXR1cm4gUHJvbWlzZTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9ybWF0ID0gcmVxdWlyZSgnZm9ybWF0LXV0aWwnKTtcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBwcm90ZWN0ZWRQcm9wZXJ0aWVzID0gWyduYW1lJywgJ21lc3NhZ2UnLCAnc3RhY2snXTtcbnZhciBlcnJvclByb3RvdHlwZVByb3BlcnRpZXMgPSBbXG4gICduYW1lJywgJ21lc3NhZ2UnLCAnZGVzY3JpcHRpb24nLCAnbnVtYmVyJywgJ2NvZGUnLCAnZmlsZU5hbWUnLCAnbGluZU51bWJlcicsICdjb2x1bW5OdW1iZXInLFxuICAnc291cmNlVVJMJywgJ2xpbmUnLCAnY29sdW1uJywgJ3N0YWNrJ1xuXTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGUoRXJyb3IpO1xubW9kdWxlLmV4cG9ydHMuZXJyb3IgPSBjcmVhdGUoRXJyb3IpO1xubW9kdWxlLmV4cG9ydHMuZXZhbCA9IGNyZWF0ZShFdmFsRXJyb3IpO1xubW9kdWxlLmV4cG9ydHMucmFuZ2UgPSBjcmVhdGUoUmFuZ2VFcnJvcik7XG5tb2R1bGUuZXhwb3J0cy5yZWZlcmVuY2UgPSBjcmVhdGUoUmVmZXJlbmNlRXJyb3IpO1xubW9kdWxlLmV4cG9ydHMuc3ludGF4ID0gY3JlYXRlKFN5bnRheEVycm9yKTtcbm1vZHVsZS5leHBvcnRzLnR5cGUgPSBjcmVhdGUoVHlwZUVycm9yKTtcbm1vZHVsZS5leHBvcnRzLnVyaSA9IGNyZWF0ZShVUklFcnJvcik7XG5tb2R1bGUuZXhwb3J0cy5mb3JtYXR0ZXIgPSBmb3JtYXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB7QGxpbmsgb25vfSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgdGhlIGdpdmVuIEVycm9yIGNsYXNzLlxuICpcbiAqIEBwYXJhbSB7Q2xhc3N9IEtsYXNzIC0gVGhlIEVycm9yIHN1YmNsYXNzIHRvIGNyZWF0ZVxuICogQHJldHVybnMge29ub31cbiAqL1xuZnVuY3Rpb24gY3JlYXRlIChLbGFzcykge1xuICAvKipcbiAgICogQHBhcmFtIHtFcnJvcn0gICBbZXJyXSAgICAgLSBUaGUgb3JpZ2luYWwgZXJyb3IsIGlmIGFueVxuICAgKiBAcGFyYW0ge29iamVjdH0gIFtwcm9wc10gICAtIEFuIG9iamVjdCB3aG9zZSBwcm9wZXJ0aWVzIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVycm9yIG9iamVjdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gIFttZXNzYWdlXSAtIFRoZSBlcnJvciBtZXNzYWdlLiBNYXkgY29udGFpbiB7QGxpbmsgdXRpbCNmb3JtYXR9IHBsYWNlaG9sZGVyc1xuICAgKiBAcGFyYW0gey4uLip9ICAgIFtwYXJhbXNdICAtIFBhcmFtZXRlcnMgdGhhdCBtYXAgdG8gdGhlIGBtZXNzYWdlYCBwbGFjZWhvbGRlcnNcbiAgICogQHJldHVybnMge0Vycm9yfVxuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uIG9ub0ZhY3RvcnkgKGVyciwgcHJvcHMsIG1lc3NhZ2UsIHBhcmFtcykgeyAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgZm9ybWF0QXJncyA9IFtdO1xuICAgIHZhciBmb3JtYXR0ZWRNZXNzYWdlID0gJyc7XG5cbiAgICAvLyBEZXRlcm1pbmUgd2hpY2ggYXJndW1lbnRzIHdlcmUgYWN0dWFsbHkgc3BlY2lmaWVkXG4gICAgaWYgKHR5cGVvZiBlcnIgPT09ICdzdHJpbmcnKSB7XG4gICAgICBmb3JtYXRBcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgZXJyID0gcHJvcHMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGZvcm1hdEFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICBwcm9wcyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBmb3JtYXRBcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlIGFyZSBhbnkgZm9ybWF0IGFyZ3VtZW50cywgdGhlbiBmb3JtYXQgdGhlIGVycm9yIG1lc3NhZ2VcbiAgICBpZiAoZm9ybWF0QXJncy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3JtYXR0ZWRNZXNzYWdlID0gbW9kdWxlLmV4cG9ydHMuZm9ybWF0dGVyLmFwcGx5KG51bGwsIGZvcm1hdEFyZ3MpO1xuICAgIH1cblxuICAgIGlmIChlcnIgJiYgZXJyLm1lc3NhZ2UpIHtcbiAgICAgIC8vIFRoZSBpbm5lci1lcnJvcidzIG1lc3NhZ2Ugd2lsbCBiZSBhZGRlZCB0byB0aGUgbmV3IG1lc3NhZ2VcbiAgICAgIGZvcm1hdHRlZE1lc3NhZ2UgKz0gKGZvcm1hdHRlZE1lc3NhZ2UgPyAnIFxcbicgOiAnJykgKyBlcnIubWVzc2FnZTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgdGhlIG5ldyBlcnJvclxuICAgIC8vIE5PVEU6IERPTidUIG1vdmUgdGhpcyB0byBhIHNlcGFyYXRlIGZ1bmN0aW9uISBXZSBkb24ndCB3YW50IHRvIHBvbGx1dGUgdGhlIHN0YWNrIHRyYWNlXG4gICAgdmFyIG5ld0Vycm9yID0gbmV3IEtsYXNzKGZvcm1hdHRlZE1lc3NhZ2UpO1xuXG4gICAgLy8gRXh0ZW5kIHRoZSBuZXcgZXJyb3Igd2l0aCB0aGUgYWRkaXRpb25hbCBwcm9wZXJ0aWVzXG4gICAgZXh0ZW5kRXJyb3IobmV3RXJyb3IsIGVycik7ICAgLy8gQ29weSBwcm9wZXJ0aWVzIG9mIHRoZSBvcmlnaW5hbCBlcnJvclxuICAgIGV4dGVuZFRvSlNPTihuZXdFcnJvcik7ICAgICAgIC8vIFJlcGxhY2UgdGhlIG9yaWdpbmFsIHRvSlNPTiBtZXRob2RcbiAgICBleHRlbmQobmV3RXJyb3IsIHByb3BzKTsgICAgICAvLyBDb3B5IGN1c3RvbSBwcm9wZXJ0aWVzLCBwb3NzaWJseSBpbmNsdWRpbmcgYSBjdXN0b20gdG9KU09OIG1ldGhvZFxuXG4gICAgcmV0dXJuIG5ld0Vycm9yO1xuICB9O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgdGhlIHRhcmdldEVycm9yIHdpdGggdGhlIHByb3BlcnRpZXMgb2YgdGhlIHNvdXJjZSBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSAgIHRhcmdldEVycm9yIC0gVGhlIGVycm9yIG9iamVjdCB0byBleHRlbmRcbiAqIEBwYXJhbSB7P0Vycm9yfSAgc291cmNlRXJyb3IgLSBUaGUgc291cmNlIGVycm9yIG9iamVjdCwgaWYgYW55XG4gKi9cbmZ1bmN0aW9uIGV4dGVuZEVycm9yICh0YXJnZXRFcnJvciwgc291cmNlRXJyb3IpIHtcbiAgZXh0ZW5kU3RhY2sodGFyZ2V0RXJyb3IsIHNvdXJjZUVycm9yKTtcbiAgZXh0ZW5kKHRhcmdldEVycm9yLCBzb3VyY2VFcnJvcik7XG59XG5cbi8qKlxuICogSmF2YVNjcmlwdCBlbmdpbmVzIGRpZmZlciBpbiBob3cgZXJyb3JzIGFyZSBzZXJpYWxpemVkIHRvIEpTT04gLSBlc3BlY2lhbGx5IHdoZW4gaXQgY29tZXNcbiAqIHRvIGN1c3RvbSBlcnJvciBwcm9wZXJ0aWVzIGFuZCBzdGFjayB0cmFjZXMuICBTbyB3ZSBhZGQgb3VyIG93biB0b0pTT04gbWV0aG9kIHRoYXQgQUxXQVlTXG4gKiBvdXRwdXRzIGV2ZXJ5IHByb3BlcnR5IG9mIHRoZSBlcnJvci5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kVG9KU09OIChlcnJvcikge1xuICBlcnJvci50b0pTT04gPSBlcnJvclRvSlNPTjtcblxuICAvLyBBbHNvIGFkZCBhbiBpbnNwZWN0KCkgbWV0aG9kLCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIE5vZGUuanMnIGB1dGlsLmluc3BlY3QoKWAgbWV0aG9kXG4gIGVycm9yLmluc3BlY3QgPSBlcnJvclRvU3RyaW5nO1xufVxuXG4vKipcbiAqIEV4dGVuZHMgdGhlIHRhcmdldCBvYmplY3Qgd2l0aCB0aGUgcHJvcGVydGllcyBvZiB0aGUgc291cmNlIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gIHRhcmdldCAtIFRoZSBvYmplY3QgdG8gZXh0ZW5kXG4gKiBAcGFyYW0gez9zb3VyY2V9IHNvdXJjZSAtIFRoZSBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyBhcmUgY29waWVkXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgaWYgKHNvdXJjZSAmJiB0eXBlb2Ygc291cmNlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICAvLyBEb24ndCBjb3B5IFwicHJvdGVjdGVkXCIgcHJvcGVydGllcywgc2luY2UgdGhleSBoYXZlIHNwZWNpYWwgbWVhbmluZy9iZWhhdmlvclxuICAgICAgLy8gYW5kIGFyZSBzZXQgYnkgdGhlIG9ub0ZhY3RvcnkgZnVuY3Rpb25cbiAgICAgIGlmIChwcm90ZWN0ZWRQcm9wZXJ0aWVzLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gVGhpcyBwcm9wZXJ0eSBpcyByZWFkLW9ubHksIHNvIGl0IGNhbid0IGJlIGNvcGllZFxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEN1c3RvbSBKU09OIHNlcmlhbGl6ZXIgZm9yIEVycm9yIG9iamVjdHMuXG4gKiBSZXR1cm5zIGFsbCBidWlsdC1pbiBlcnJvciBwcm9wZXJ0aWVzLCBhcyB3ZWxsIGFzIGV4dGVuZGVkIHByb3BlcnRpZXMuXG4gKlxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZXJyb3JUb0pTT04gKCkge1xuICB2YXIganNvbiA9IHt9O1xuXG4gIC8vIEdldCBhbGwgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBlcnJvclxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuXG4gIC8vIEFsc28gaW5jbHVkZSBwcm9wZXJ0aWVzIGZyb20gdGhlIEVycm9yIHByb3RvdHlwZVxuICBrZXlzID0ga2V5cy5jb25jYXQoZXJyb3JQcm90b3R5cGVQcm9wZXJ0aWVzKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsdWUgPSB0aGlzW2tleV07XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgaWYgKHR5cGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGpzb25ba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBqc29uO1xufVxuXG4vKipcbiAqIFNlcmlhbGl6ZXMgRXJyb3Igb2JqZWN0cyBhcyBodW1hbi1yZWFkYWJsZSBKU09OIHN0cmluZ3MgZm9yIGRlYnVnZ2luZy9sb2dnaW5nIHB1cnBvc2VzLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVycm9yVG9TdHJpbmcgKCkge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcywgbnVsbCwgMikucmVwbGFjZSgvXFxcXG4vZywgJ1xcbicpO1xufVxuXG4vKipcbiAqIEV4dGVuZCB0aGUgZXJyb3Igc3RhY2sgdG8gaW5jbHVkZSBpdHMgY2F1c2VcbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSB0YXJnZXRFcnJvclxuICogQHBhcmFtIHtFcnJvcn0gc291cmNlRXJyb3JcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kU3RhY2sgKHRhcmdldEVycm9yLCBzb3VyY2VFcnJvcikge1xuICBpZiAoaGFzTGF6eVN0YWNrKHRhcmdldEVycm9yKSkge1xuICAgIGlmIChzb3VyY2VFcnJvcikge1xuICAgICAgbGF6eUpvaW5TdGFja3ModGFyZ2V0RXJyb3IsIHNvdXJjZUVycm9yKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBsYXp5UG9wU3RhY2sodGFyZ2V0RXJyb3IpO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICBpZiAoc291cmNlRXJyb3IpIHtcbiAgICAgIHRhcmdldEVycm9yLnN0YWNrID0gam9pblN0YWNrcyh0YXJnZXRFcnJvci5zdGFjaywgc291cmNlRXJyb3Iuc3RhY2spO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRhcmdldEVycm9yLnN0YWNrID0gcG9wU3RhY2sodGFyZ2V0RXJyb3Iuc3RhY2spO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFwcGVuZHMgdGhlIG9yaWdpbmFsIHtAbGluayBFcnJvciNzdGFja30gcHJvcGVydHkgdG8gdGhlIG5ldyBFcnJvcidzIHN0YWNrLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZXdTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IG9yaWdpbmFsU3RhY2tcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGpvaW5TdGFja3MgKG5ld1N0YWNrLCBvcmlnaW5hbFN0YWNrKSB7XG4gIG5ld1N0YWNrID0gcG9wU3RhY2sobmV3U3RhY2spO1xuXG4gIGlmIChuZXdTdGFjayAmJiBvcmlnaW5hbFN0YWNrKSB7XG4gICAgcmV0dXJuIG5ld1N0YWNrICsgJ1xcblxcbicgKyBvcmlnaW5hbFN0YWNrO1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBuZXdTdGFjayB8fCBvcmlnaW5hbFN0YWNrO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBPbm8gZnJvbSB0aGUgc3RhY2ssIHNvIHRoYXQgdGhlIHN0YWNrIHN0YXJ0cyBhdCB0aGUgb3JpZ2luYWwgZXJyb3IgbG9jYXRpb25cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RhY2tcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHBvcFN0YWNrIChzdGFjaykge1xuICBpZiAoc3RhY2spIHtcbiAgICB2YXIgbGluZXMgPSBzdGFjay5zcGxpdCgnXFxuJyk7XG5cbiAgICBpZiAobGluZXMubGVuZ3RoIDwgMikge1xuICAgICAgLy8gVGhlIHN0YWNrIG9ubHkgaGFzIG9uZSBsaW5lLCBzbyB0aGVyZSdzIG5vdGhpbmcgd2UgY2FuIHJlbW92ZVxuICAgICAgcmV0dXJuIHN0YWNrO1xuICAgIH1cblxuICAgIC8vIEZpbmQgdGhlIGBvbm9GYWN0b3J5YCBjYWxsIGluIHRoZSBzdGFjaywgYW5kIHJlbW92ZSBpdFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaW5lID0gbGluZXNbaV07XG4gICAgICBpZiAobGluZS5pbmRleE9mKCdvbm9GYWN0b3J5JykgPj0gMCkge1xuICAgICAgICBsaW5lcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBnZXQgaGVyZSwgdGhlbiB0aGUgc3RhY2sgZG9lc24ndCBjb250YWluIGEgY2FsbCB0byBgb25vRmFjdG9yeWAuXG4gICAgLy8gVGhpcyBtYXkgYmUgZHVlIHRvIG1pbmlmaWNhdGlvbiBvciBzb21lIG9wdGltaXphdGlvbiBvZiB0aGUgSlMgZW5naW5lLlxuICAgIC8vIFNvIGp1c3QgcmV0dXJuIHRoZSBzdGFjayBhcy1pcy5cbiAgICByZXR1cm4gc3RhY2s7XG4gIH1cbn1cblxuLyoqXG4gKiBEb2VzIGEgb25lLXRpbWUgZGV0ZXJtaW5hdGlvbiBvZiB3aGV0aGVyIHRoaXMgSmF2YVNjcmlwdCBlbmdpbmVcbiAqIHN1cHBvcnRzIGxhenkgYEVycm9yLnN0YWNrYCBwcm9wZXJ0aWVzLlxuICovXG52YXIgc3VwcG9ydHNMYXp5U3RhY2sgPSAoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISEoXG4gICAgLy8gRVM1IHByb3BlcnR5IGRlc2NyaXB0b3JzIG11c3QgYmUgc3VwcG9ydGVkXG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiZcblxuICAgIC8vIENocm9tZSBvbiBBbmRyb2lkIGRvZXNuJ3Qgc3VwcG9ydCBsYXp5IHN0YWNrcyA6KFxuICAgICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyB8fCAhL0FuZHJvaWQvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpXG4gICk7XG59KCkpO1xuXG4vKipcbiAqIERvZXMgdGhpcyBlcnJvciBoYXZlIGEgbGF6eSBzdGFjayBwcm9wZXJ0eT9cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBoYXNMYXp5U3RhY2sgKGVycikge1xuICBpZiAoIXN1cHBvcnRzTGF6eVN0YWNrKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGVyciwgJ3N0YWNrJyk7XG4gIGlmICghZGVzY3JpcHRvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHlwZW9mIGRlc2NyaXB0b3IuZ2V0ID09PSAnZnVuY3Rpb24nO1xufVxuXG4vKipcbiAqIENhbGxzIHtAbGluayBqb2luU3RhY2tzfSBsYXppbHksIHdoZW4gdGhlIHtAbGluayBFcnJvciNzdGFja30gcHJvcGVydHkgaXMgYWNjZXNzZWQuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gdGFyZ2V0RXJyb3JcbiAqIEBwYXJhbSB7RXJyb3J9IHNvdXJjZUVycm9yXG4gKi9cbmZ1bmN0aW9uIGxhenlKb2luU3RhY2tzICh0YXJnZXRFcnJvciwgc291cmNlRXJyb3IpIHtcbiAgdmFyIHRhcmdldFN0YWNrID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXRFcnJvciwgJ3N0YWNrJyk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldEVycm9yLCAnc3RhY2snLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gam9pblN0YWNrcyh0YXJnZXRTdGFjay5nZXQuYXBwbHkodGFyZ2V0RXJyb3IpLCBzb3VyY2VFcnJvci5zdGFjayk7XG4gICAgfSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogQ2FsbHMge0BsaW5rIHBvcFN0YWNrfSBsYXppbHksIHdoZW4gdGhlIHtAbGluayBFcnJvciNzdGFja30gcHJvcGVydHkgaXMgYWNjZXNzZWQuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3JcbiAqL1xuZnVuY3Rpb24gbGF6eVBvcFN0YWNrIChlcnJvcikge1xuICB2YXIgdGFyZ2V0U3RhY2sgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGVycm9yLCAnc3RhY2snKTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyb3IsICdzdGFjaycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBwb3BTdGFjayh0YXJnZXRTdGFjay5nZXQuYXBwbHkoZXJyb3IpKTtcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cbiIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmICghcHJvY2Vzcy52ZXJzaW9uIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YwLicpID09PSAwIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLicpID09PSAwICYmIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS44LicpICE9PSAwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0geyBuZXh0VGljazogbmV4dFRpY2sgfTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcHJvY2Vzc1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayhmbiwgYXJnMSwgYXJnMiwgYXJnMykge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJjYWxsYmFja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgYXJncywgaTtcbiAgc3dpdGNoIChsZW4pIHtcbiAgY2FzZSAwOlxuICBjYXNlIDE6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZm4pO1xuICBjYXNlIDI6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrT25lKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxKTtcbiAgICB9KTtcbiAgY2FzZSAzOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1R3bygpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMik7XG4gICAgfSk7XG4gIGNhc2UgNDpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUaHJlZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgfSk7XG4gIGRlZmF1bHQ6XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGFyZ3MubGVuZ3RoKSB7XG4gICAgICBhcmdzW2krK10gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGljaygpIHtcbiAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG59XG5cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBJZiBvYmouaGFzT3duUHJvcGVydHkgaGFzIGJlZW4gb3ZlcnJpZGRlbiwgdGhlbiBjYWxsaW5nXG4vLyBvYmouaGFzT3duUHJvcGVydHkocHJvcCkgd2lsbCBicmVhay5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy8xNzA3XG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHFzLCBzZXAsIGVxLCBvcHRpb25zKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICB2YXIgb2JqID0ge307XG5cbiAgaWYgKHR5cGVvZiBxcyAhPT0gJ3N0cmluZycgfHwgcXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciByZWdleHAgPSAvXFwrL2c7XG4gIHFzID0gcXMuc3BsaXQoc2VwKTtcblxuICB2YXIgbWF4S2V5cyA9IDEwMDA7XG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLm1heEtleXMgPT09ICdudW1iZXInKSB7XG4gICAgbWF4S2V5cyA9IG9wdGlvbnMubWF4S2V5cztcbiAgfVxuXG4gIHZhciBsZW4gPSBxcy5sZW5ndGg7XG4gIC8vIG1heEtleXMgPD0gMCBtZWFucyB0aGF0IHdlIHNob3VsZCBub3QgbGltaXQga2V5cyBjb3VudFxuICBpZiAobWF4S2V5cyA+IDAgJiYgbGVuID4gbWF4S2V5cykge1xuICAgIGxlbiA9IG1heEtleXM7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHggPSBxc1tpXS5yZXBsYWNlKHJlZ2V4cCwgJyUyMCcpLFxuICAgICAgICBpZHggPSB4LmluZGV4T2YoZXEpLFxuICAgICAgICBrc3RyLCB2c3RyLCBrLCB2O1xuXG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICBrc3RyID0geC5zdWJzdHIoMCwgaWR4KTtcbiAgICAgIHZzdHIgPSB4LnN1YnN0cihpZHggKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAga3N0ciA9IHg7XG4gICAgICB2c3RyID0gJyc7XG4gICAgfVxuXG4gICAgayA9IGRlY29kZVVSSUNvbXBvbmVudChrc3RyKTtcbiAgICB2ID0gZGVjb2RlVVJJQ29tcG9uZW50KHZzdHIpO1xuXG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShvYmosIGspKSB7XG4gICAgICBvYmpba10gPSB2O1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICBvYmpba10ucHVzaCh2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tdID0gW29ialtrXSwgdl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeVByaW1pdGl2ZSA9IGZ1bmN0aW9uKHYpIHtcbiAgc3dpdGNoICh0eXBlb2Ygdikge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gdjtcblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIHYgPyAndHJ1ZScgOiAnZmFsc2UnO1xuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHJldHVybiBpc0Zpbml0ZSh2KSA/IHYgOiAnJztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBzZXAsIGVxLCBuYW1lKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgb2JqID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG1hcChvYmplY3RLZXlzKG9iaiksIGZ1bmN0aW9uKGspIHtcbiAgICAgIHZhciBrcyA9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoaykpICsgZXE7XG4gICAgICBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICAgIHJldHVybiBtYXAob2JqW2tdLCBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZSh2KSk7XG4gICAgICAgIH0pLmpvaW4oc2VwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqW2tdKSk7XG4gICAgICB9XG4gICAgfSkuam9pbihzZXApO1xuXG4gIH1cblxuICBpZiAoIW5hbWUpIHJldHVybiAnJztcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUobmFtZSkpICsgZXEgK1xuICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmopKTtcbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG5mdW5jdGlvbiBtYXAgKHhzLCBmKSB7XG4gIGlmICh4cy5tYXApIHJldHVybiB4cy5tYXAoZik7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgIHJlcy5wdXNoKGYoeHNbaV0sIGkpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHJlcy5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuZGVjb2RlID0gZXhwb3J0cy5wYXJzZSA9IHJlcXVpcmUoJy4vZGVjb2RlJyk7XG5leHBvcnRzLmVuY29kZSA9IGV4cG9ydHMuc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9lbmNvZGUnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcmV0ICAgID0gcmVxdWlyZSgncmV0Jyk7XG5jb25zdCBEUmFuZ2UgPSByZXF1aXJlKCdkcmFuZ2UnKTtcbmNvbnN0IHR5cGVzICA9IHJldC50eXBlcztcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIFJhbmRFeHAge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7UmVnRXhwfFN0cmluZ30gcmVnZXhwXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtXG4gICAqL1xuICBjb25zdHJ1Y3RvcihyZWdleHAsIG0pIHtcbiAgICB0aGlzLl9zZXREZWZhdWx0cyhyZWdleHApO1xuICAgIGlmIChyZWdleHAgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHRoaXMuaWdub3JlQ2FzZSA9IHJlZ2V4cC5pZ25vcmVDYXNlO1xuICAgICAgdGhpcy5tdWx0aWxpbmUgPSByZWdleHAubXVsdGlsaW5lO1xuICAgICAgcmVnZXhwID0gcmVnZXhwLnNvdXJjZTtcblxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHJlZ2V4cCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuaWdub3JlQ2FzZSA9IG0gJiYgbS5pbmRleE9mKCdpJykgIT09IC0xO1xuICAgICAgdGhpcy5tdWx0aWxpbmUgPSBtICYmIG0uaW5kZXhPZignbScpICE9PSAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhIHJlZ2V4cCBvciBzdHJpbmcnKTtcbiAgICB9XG5cbiAgICB0aGlzLnRva2VucyA9IHJldChyZWdleHApO1xuICB9XG5cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHNvbWUgY3VzdG9tIHByb3BlcnRpZXMgaGF2ZSBiZWVuIHNldCBmb3IgdGhpcyByZWdleHAuXG4gICAqXG4gICAqIEBwYXJhbSB7UmFuZEV4cH0gcmFuZGV4cFxuICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXhwXG4gICAqL1xuICBfc2V0RGVmYXVsdHMocmVnZXhwKSB7XG4gICAgLy8gV2hlbiBhIHJlcGV0aXRpb25hbCB0b2tlbiBoYXMgaXRzIG1heCBzZXQgdG8gSW5maW5pdGUsXG4gICAgLy8gcmFuZGV4cCB3b24ndCBhY3R1YWxseSBnZW5lcmF0ZSBhIHJhbmRvbSBhbW91bnQgYmV0d2VlbiBtaW4gYW5kIEluZmluaXRlXG4gICAgLy8gaW5zdGVhZCBpdCB3aWxsIHNlZSBJbmZpbml0ZSBhcyBtaW4gKyAxMDAuXG4gICAgdGhpcy5tYXggPSByZWdleHAubWF4ICE9IG51bGwgPyByZWdleHAubWF4IDpcbiAgICAgIFJhbmRFeHAucHJvdG90eXBlLm1heCAhPSBudWxsID8gUmFuZEV4cC5wcm90b3R5cGUubWF4IDogMTAwO1xuXG4gICAgLy8gVGhpcyBhbGxvd3MgZXhwYW5kaW5nIHRvIGluY2x1ZGUgYWRkaXRpb25hbCBjaGFyYWN0ZXJzXG4gICAgLy8gZm9yIGluc3RhbmNlOiBSYW5kRXhwLmRlZmF1bHRSYW5nZS5hZGQoMCwgNjU1MzUpO1xuICAgIHRoaXMuZGVmYXVsdFJhbmdlID0gcmVnZXhwLmRlZmF1bHRSYW5nZSA/XG4gICAgICByZWdleHAuZGVmYXVsdFJhbmdlIDogdGhpcy5kZWZhdWx0UmFuZ2UuY2xvbmUoKTtcblxuICAgIGlmIChyZWdleHAucmFuZEludCkge1xuICAgICAgdGhpcy5yYW5kSW50ID0gcmVnZXhwLnJhbmRJbnQ7XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogR2VuZXJhdGVzIHRoZSByYW5kb20gc3RyaW5nLlxuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqL1xuICBnZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dlbih0aGlzLnRva2VucywgW10pO1xuICB9XG5cblxuICAvKipcbiAgICogR2VuZXJhdGUgcmFuZG9tIHN0cmluZyBtb2RlbGVkIGFmdGVyIGdpdmVuIHRva2Vucy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHRva2VuXG4gICAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IGdyb3Vwc1xuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqL1xuICBfZ2VuKHRva2VuLCBncm91cHMpIHtcbiAgICB2YXIgc3RhY2ssIHN0ciwgbiwgaSwgbDtcblxuICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgY2FzZSB0eXBlcy5ST09UOlxuICAgICAgY2FzZSB0eXBlcy5HUk9VUDpcbiAgICAgICAgLy8gSWdub3JlIGxvb2thaGVhZHMgZm9yIG5vdy5cbiAgICAgICAgaWYgKHRva2VuLmZvbGxvd2VkQnkgfHwgdG9rZW4ubm90Rm9sbG93ZWRCeSkgeyByZXR1cm4gJyc7IH1cblxuICAgICAgICAvLyBJbnNlcnQgcGxhY2Vob2xkZXIgdW50aWwgZ3JvdXAgc3RyaW5nIGlzIGdlbmVyYXRlZC5cbiAgICAgICAgaWYgKHRva2VuLnJlbWVtYmVyICYmIHRva2VuLmdyb3VwTnVtYmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0b2tlbi5ncm91cE51bWJlciA9IGdyb3Vwcy5wdXNoKG51bGwpIC0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YWNrID0gdG9rZW4ub3B0aW9ucyA/XG4gICAgICAgICAgdGhpcy5fcmFuZFNlbGVjdCh0b2tlbi5vcHRpb25zKSA6IHRva2VuLnN0YWNrO1xuXG4gICAgICAgIHN0ciA9ICcnO1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gc3RhY2subGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgc3RyICs9IHRoaXMuX2dlbihzdGFja1tpXSwgZ3JvdXBzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b2tlbi5yZW1lbWJlcikge1xuICAgICAgICAgIGdyb3Vwc1t0b2tlbi5ncm91cE51bWJlcl0gPSBzdHI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cjtcblxuICAgICAgY2FzZSB0eXBlcy5QT1NJVElPTjpcbiAgICAgICAgLy8gRG8gbm90aGluZyBmb3Igbm93LlxuICAgICAgICByZXR1cm4gJyc7XG5cbiAgICAgIGNhc2UgdHlwZXMuU0VUOlxuICAgICAgICB2YXIgZXhwYW5kZWRTZXQgPSB0aGlzLl9leHBhbmQodG9rZW4pO1xuICAgICAgICBpZiAoIWV4cGFuZGVkU2V0Lmxlbmd0aCkgeyByZXR1cm4gJyc7IH1cbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5fcmFuZFNlbGVjdChleHBhbmRlZFNldCkpO1xuXG4gICAgICBjYXNlIHR5cGVzLlJFUEVUSVRJT046XG4gICAgICAgIC8vIFJhbmRvbWx5IGdlbmVyYXRlIG51bWJlciBiZXR3ZWVuIG1pbiBhbmQgbWF4LlxuICAgICAgICBuID0gdGhpcy5yYW5kSW50KHRva2VuLm1pbixcbiAgICAgICAgICB0b2tlbi5tYXggPT09IEluZmluaXR5ID8gdG9rZW4ubWluICsgdGhpcy5tYXggOiB0b2tlbi5tYXgpO1xuXG4gICAgICAgIHN0ciA9ICcnO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgc3RyICs9IHRoaXMuX2dlbih0b2tlbi52YWx1ZSwgZ3JvdXBzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdHI7XG5cbiAgICAgIGNhc2UgdHlwZXMuUkVGRVJFTkNFOlxuICAgICAgICByZXR1cm4gZ3JvdXBzW3Rva2VuLnZhbHVlIC0gMV0gfHwgJyc7XG5cbiAgICAgIGNhc2UgdHlwZXMuQ0hBUjpcbiAgICAgICAgdmFyIGNvZGUgPSB0aGlzLmlnbm9yZUNhc2UgJiYgdGhpcy5fcmFuZEJvb2woKSA/XG4gICAgICAgICAgdGhpcy5fdG9PdGhlckNhc2UodG9rZW4udmFsdWUpIDogdG9rZW4udmFsdWU7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIElmIGNvZGUgaXMgYWxwaGFiZXRpYywgY29udmVydHMgdG8gb3RoZXIgY2FzZS5cbiAgICogSWYgbm90IGFscGhhYmV0aWMsIHJldHVybnMgYmFjayBjb2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gY29kZVxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqL1xuICBfdG9PdGhlckNhc2UoY29kZSkge1xuICAgIHJldHVybiBjb2RlICsgKDk3IDw9IGNvZGUgJiYgY29kZSA8PSAxMjIgPyAtMzIgOlxuICAgICAgNjUgPD0gY29kZSAmJiBjb2RlIDw9IDkwICA/ICAzMiA6IDApO1xuICB9XG5cblxuICAvKipcbiAgICogUmFuZG9tbHkgcmV0dXJucyBhIHRydWUgb3IgZmFsc2UgdmFsdWUuXG4gICAqXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBfcmFuZEJvb2woKSB7XG4gICAgcmV0dXJuICF0aGlzLnJhbmRJbnQoMCwgMSk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBSYW5kb21seSBzZWxlY3RzIGFuZCByZXR1cm5zIGEgdmFsdWUgZnJvbSB0aGUgYXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXkuPE9iamVjdD59IGFyclxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBfcmFuZFNlbGVjdChhcnIpIHtcbiAgICBpZiAoYXJyIGluc3RhbmNlb2YgRFJhbmdlKSB7XG4gICAgICByZXR1cm4gYXJyLmluZGV4KHRoaXMucmFuZEludCgwLCBhcnIubGVuZ3RoIC0gMSkpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyW3RoaXMucmFuZEludCgwLCBhcnIubGVuZ3RoIC0gMSldO1xuICB9XG5cblxuICAvKipcbiAgICogZXhwYW5kcyBhIHRva2VuIHRvIGEgRGlzY29udGludW91c1JhbmdlIG9mIGNoYXJhY3RlcnMgd2hpY2ggaGFzIGFcbiAgICogbGVuZ3RoIGFuZCBhbiBpbmRleCBmdW5jdGlvbiAoZm9yIHJhbmRvbSBzZWxlY3RpbmcpXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0b2tlblxuICAgKiBAcmV0dXJuIHtEaXNjb250aW51b3VzUmFuZ2V9XG4gICAqL1xuICBfZXhwYW5kKHRva2VuKSB7XG4gICAgaWYgKHRva2VuLnR5cGUgPT09IHJldC50eXBlcy5DSEFSKSB7XG4gICAgICByZXR1cm4gbmV3IERSYW5nZSh0b2tlbi52YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09PSByZXQudHlwZXMuUkFOR0UpIHtcbiAgICAgIHJldHVybiBuZXcgRFJhbmdlKHRva2VuLmZyb20sIHRva2VuLnRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGRyYW5nZSA9IG5ldyBEUmFuZ2UoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW4uc2V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBzdWJyYW5nZSA9IHRoaXMuX2V4cGFuZCh0b2tlbi5zZXRbaV0pO1xuICAgICAgICBkcmFuZ2UuYWRkKHN1YnJhbmdlKTtcbiAgICAgICAgaWYgKHRoaXMuaWdub3JlQ2FzZSkge1xuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc3VicmFuZ2UubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGxldCBjb2RlID0gc3VicmFuZ2UuaW5kZXgoaik7XG4gICAgICAgICAgICBsZXQgb3RoZXJDYXNlQ29kZSA9IHRoaXMuX3RvT3RoZXJDYXNlKGNvZGUpO1xuICAgICAgICAgICAgaWYgKGNvZGUgIT09IG90aGVyQ2FzZUNvZGUpIHtcbiAgICAgICAgICAgICAgZHJhbmdlLmFkZChvdGhlckNhc2VDb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0b2tlbi5ub3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFJhbmdlLmNsb25lKCkuc3VidHJhY3QoZHJhbmdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRSYW5nZS5jbG9uZSgpLmludGVyc2VjdChkcmFuZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIFJhbmRvbWx5IGdlbmVyYXRlcyBhbmQgcmV0dXJucyBhIG51bWJlciBiZXR3ZWVuIGEgYW5kIGIgKGluY2x1c2l2ZSkuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBhXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBiXG4gICAqIEByZXR1cm4ge051bWJlcn1cbiAgICovXG4gIHJhbmRJbnQoYSwgYikge1xuICAgIHJldHVybiBhICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDEgKyBiIC0gYSkpO1xuICB9XG5cblxuICAvKipcbiAgICogRGVmYXVsdCByYW5nZSBvZiBjaGFyYWN0ZXJzIHRvIGdlbmVyYXRlIGZyb20uXG4gICAqL1xuICBnZXQgZGVmYXVsdFJhbmdlKCkge1xuICAgIHJldHVybiB0aGlzLl9yYW5nZSA9IHRoaXMuX3JhbmdlIHx8IG5ldyBEUmFuZ2UoMzIsIDEyNik7XG4gIH1cblxuICBzZXQgZGVmYXVsdFJhbmdlKHJhbmdlKSB7XG4gICAgdGhpcy5fcmFuZ2UgPSByYW5nZTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqXG4gICAqIEVuYWJsZXMgdXNlIG9mIHJhbmRleHAgd2l0aCBhIHNob3J0ZXIgY2FsbC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfCByZWdleHB9XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG4gIHN0YXRpYyByYW5kZXhwKHJlZ2V4cCwgbSkge1xuICAgIHZhciByYW5kZXhwO1xuICAgIGlmKHR5cGVvZiByZWdleHAgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZWdleHAgPSBuZXcgUmVnRXhwKHJlZ2V4cCwgbSk7XG4gICAgfVxuXG4gICAgaWYgKHJlZ2V4cC5fcmFuZGV4cCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByYW5kZXhwID0gbmV3IFJhbmRFeHAocmVnZXhwLCBtKTtcbiAgICAgIHJlZ2V4cC5fcmFuZGV4cCA9IHJhbmRleHA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhbmRleHAgPSByZWdleHAuX3JhbmRleHA7XG4gICAgICByYW5kZXhwLl9zZXREZWZhdWx0cyhyZWdleHApO1xuICAgIH1cbiAgICByZXR1cm4gcmFuZGV4cC5nZW4oKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgc3VnYXJ5IC9yZWdleHAvLmdlbiBzeW50YXguXG4gICAqL1xuICBzdGF0aWMgc3VnYXIoKSB7XG4gICAgLyogZXNoaW50IGZyZWV6ZTpmYWxzZSAqL1xuICAgIFJlZ0V4cC5wcm90b3R5cGUuZ2VuID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gUmFuZEV4cC5yYW5kZXhwKHRoaXMpO1xuICAgIH07XG4gIH1cbn07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBkdXBsZXggc3RyZWFtIGlzIGp1c3QgYSBzdHJlYW0gdGhhdCBpcyBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZS5cbi8vIFNpbmNlIEpTIGRvZXNuJ3QgaGF2ZSBtdWx0aXBsZSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLCB0aGlzIGNsYXNzXG4vLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tXG4vLyBXcml0YWJsZS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgfXJldHVybiBrZXlzO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IER1cGxleDtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgUmVhZGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fcmVhZGFibGUnKTtcbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV93cml0YWJsZScpO1xuXG51dGlsLmluaGVyaXRzKER1cGxleCwgUmVhZGFibGUpO1xuXG57XG4gIC8vIGF2b2lkIHNjb3BlIGNyZWVwLCB0aGUga2V5cyBhcnJheSBjYW4gdGhlbiBiZSBjb2xsZWN0ZWRcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFdyaXRhYmxlLnByb3RvdHlwZSk7XG4gIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgIHZhciBtZXRob2QgPSBrZXlzW3ZdO1xuICAgIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKSBEdXBsZXgucHJvdG90eXBlW21ldGhvZF0gPSBXcml0YWJsZS5wcm90b3R5cGVbbWV0aG9kXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBEdXBsZXgob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkgcmV0dXJuIG5ldyBEdXBsZXgob3B0aW9ucyk7XG5cbiAgUmVhZGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgV3JpdGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnJlYWRhYmxlID09PSBmYWxzZSkgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKSB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgdGhpcy5hbGxvd0hhbGZPcGVuID0gdHJ1ZTtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSkgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7XG5cbiAgdGhpcy5vbmNlKCdlbmQnLCBvbmVuZCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gdGhlIG5vLWhhbGYtb3BlbiBlbmZvcmNlclxuZnVuY3Rpb24gb25lbmQoKSB7XG4gIC8vIGlmIHdlIGFsbG93IGhhbGYtb3BlbiBzdGF0ZSwgb3IgaWYgdGhlIHdyaXRhYmxlIHNpZGUgZW5kZWQsXG4gIC8vIHRoZW4gd2UncmUgb2suXG4gIGlmICh0aGlzLmFsbG93SGFsZk9wZW4gfHwgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCkgcmV0dXJuO1xuXG4gIC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi5cbiAgLy8gQnV0IGFsbG93IG1vcmUgd3JpdGVzIHRvIGhhcHBlbiBpbiB0aGlzIHRpY2suXG4gIHBuYS5uZXh0VGljayhvbkVuZE5ULCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gb25FbmROVChzZWxmKSB7XG4gIHNlbGYuZW5kKCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbkR1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIHRoaXMuZW5kKCk7XG5cbiAgcG5hLm5leHRUaWNrKGNiLCBlcnIpO1xufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBwYXNzdGhyb3VnaCBzdHJlYW0uXG4vLyBiYXNpY2FsbHkganVzdCB0aGUgbW9zdCBtaW5pbWFsIHNvcnQgb2YgVHJhbnNmb3JtIHN0cmVhbS5cbi8vIEV2ZXJ5IHdyaXR0ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBQYXNzVGhyb3VnaDtcblxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vX3N0cmVhbV90cmFuc2Zvcm0nKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pO1xuXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG5cbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9ucyk7XG59XG5cblBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobnVsbCwgY2h1bmspO1xufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRhYmxlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbnZhciBFRWxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbiAoZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lcnModHlwZSkubGVuZ3RoO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgZGVidWdVdGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGRlYnVnID0gdm9pZCAwO1xuaWYgKGRlYnVnVXRpbCAmJiBkZWJ1Z1V0aWwuZGVidWdsb2cpIHtcbiAgZGVidWcgPSBkZWJ1Z1V0aWwuZGVidWdsb2coJ3N0cmVhbScpO1xufSBlbHNlIHtcbiAgZGVidWcgPSBmdW5jdGlvbiAoKSB7fTtcbn1cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyTGlzdCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0Jyk7XG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xudmFyIFN0cmluZ0RlY29kZXI7XG5cbnV0aWwuaW5oZXJpdHMoUmVhZGFibGUsIFN0cmVhbSk7XG5cbnZhciBrUHJveHlFdmVudHMgPSBbJ2Vycm9yJywgJ2Nsb3NlJywgJ2Rlc3Ryb3knLCAncGF1c2UnLCAncmVzdW1lJ107XG5cbmZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4pIHtcbiAgLy8gU2FkbHkgdGhpcyBpcyBub3QgY2FjaGVhYmxlIGFzIHNvbWUgbGlicmFyaWVzIGJ1bmRsZSB0aGVpciBvd25cbiAgLy8gZXZlbnQgZW1pdHRlciBpbXBsZW1lbnRhdGlvbiB3aXRoIHRoZW0uXG4gIGlmICh0eXBlb2YgZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHJldHVybiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lcihldmVudCwgZm4pO1xuXG4gIC8vIFRoaXMgaXMgYSBoYWNrIHRvIG1ha2Ugc3VyZSB0aGF0IG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSBhbnlcbiAgLy8gdXNlcmxhbmQgb25lcy4gIE5FVkVSIERPIFRISVMuIFRoaXMgaXMgaGVyZSBvbmx5IGJlY2F1c2UgdGhpcyBjb2RlIG5lZWRzXG4gIC8vIHRvIGNvbnRpbnVlIHRvIHdvcmsgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBOb2RlLmpzIHRoYXQgZG8gbm90IGluY2x1ZGVcbiAgLy8gdGhlIHByZXBlbmRMaXN0ZW5lcigpIG1ldGhvZC4gVGhlIGdvYWwgaXMgdG8gZXZlbnR1YWxseSByZW1vdmUgdGhpcyBoYWNrLlxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50cyB8fCAhZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkgZW1pdHRlci5vbihldmVudCwgZm4pO2Vsc2UgaWYgKGlzQXJyYXkoZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkpIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0udW5zaGlmdChmbik7ZWxzZSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdID0gW2ZuLCBlbWl0dGVyLl9ldmVudHNbZXZlbnRdXTtcbn1cblxuZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG4gIHZhciBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcuIFVzZWQgdG8gbWFrZSByZWFkKG4pIGlnbm9yZSBuIGFuZCB0b1xuICAvLyBtYWtlIGFsbCB0aGUgYnVmZmVyIG1lcmdpbmcgYW5kIGxlbmd0aCBjaGVja3MgZ28gYXdheVxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCBpdCBzdG9wcyBjYWxsaW5nIF9yZWFkKCkgdG8gZmlsbCB0aGUgYnVmZmVyXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgXCJkb24ndCBjYWxsIF9yZWFkIHByZWVtcHRpdmVseSBldmVyXCJcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHJlYWRhYmxlSHdtID0gb3B0aW9ucy5yZWFkYWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAocmVhZGFibGVId20gfHwgcmVhZGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSByZWFkYWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gQSBsaW5rZWQgbGlzdCBpcyB1c2VkIHRvIHN0b3JlIGRhdGEgY2h1bmtzIGluc3RlYWQgb2YgYW4gYXJyYXkgYmVjYXVzZSB0aGVcbiAgLy8gbGlua2VkIGxpc3QgY2FuIHJlbW92ZSBlbGVtZW50cyBmcm9tIHRoZSBiZWdpbm5pbmcgZmFzdGVyIHRoYW5cbiAgLy8gYXJyYXkuc2hpZnQoKVxuICB0aGlzLmJ1ZmZlciA9IG5ldyBCdWZmZXJMaXN0KCk7XG4gIHRoaXMubGVuZ3RoID0gMDtcbiAgdGhpcy5waXBlcyA9IG51bGw7XG4gIHRoaXMucGlwZXNDb3VudCA9IDA7XG4gIHRoaXMuZmxvd2luZyA9IG51bGw7XG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgdGhpcy5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIHRoaXMucmVhZGluZyA9IGZhbHNlO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIGV2ZW50ICdyZWFkYWJsZScvJ2RhdGEnIGlzIGVtaXR0ZWRcbiAgLy8gaW1tZWRpYXRlbHksIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2VcbiAgLy8gYW55IGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHJlYWQgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxuICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cbiAgdGhpcy5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlO1xuICB0aGlzLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIHRoZSBudW1iZXIgb2Ygd3JpdGVycyB0aGF0IGFyZSBhd2FpdGluZyBhIGRyYWluIGV2ZW50IGluIC5waXBlKClzXG4gIHRoaXMuYXdhaXREcmFpbiA9IDA7XG5cbiAgLy8gaWYgdHJ1ZSwgYSBtYXliZVJlYWRNb3JlIGhhcyBiZWVuIHNjaGVkdWxlZFxuICB0aGlzLnJlYWRpbmdNb3JlID0gZmFsc2U7XG5cbiAgdGhpcy5kZWNvZGVyID0gbnVsbDtcbiAgdGhpcy5lbmNvZGluZyA9IG51bGw7XG4gIGlmIChvcHRpb25zLmVuY29kaW5nKSB7XG4gICAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgICB0aGlzLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zLmVuY29kaW5nKTtcbiAgICB0aGlzLmVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSkgcmV0dXJuIG5ldyBSZWFkYWJsZShvcHRpb25zKTtcblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlID0gbmV3IFJlYWRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5XG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlYWQgPT09ICdmdW5jdGlvbicpIHRoaXMuX3JlYWQgPSBvcHRpb25zLnJlYWQ7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5SZWFkYWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMucHVzaChudWxsKTtcbiAgY2IoZXJyKTtcbn07XG5cbi8vIE1hbnVhbGx5IHNob3ZlIHNvbWV0aGluZyBpbnRvIHRoZSByZWFkKCkgYnVmZmVyLlxuLy8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hXYXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsXG4vLyBzaW1pbGFyIHRvIGhvdyBXcml0YWJsZS53cml0ZSgpIHJldHVybnMgdHJ1ZSBpZiB5b3Ugc2hvdWxkXG4vLyB3cml0ZSgpIHNvbWUgbW9yZS5cblJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgc2tpcENodW5rQ2hlY2s7XG5cbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5jb2RpbmcgfHwgc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuICAgICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZS5lbmNvZGluZykge1xuICAgICAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gICAgICAgIGVuY29kaW5nID0gJyc7XG4gICAgICB9XG4gICAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBlbmNvZGluZywgZmFsc2UsIHNraXBDaHVua0NoZWNrKTtcbn07XG5cbi8vIFVuc2hpZnQgc2hvdWxkICphbHdheXMqIGJlIHNvbWV0aGluZyBkaXJlY3RseSBvdXQgb2YgcmVhZCgpXG5SZWFkYWJsZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xufTtcblxuZnVuY3Rpb24gcmVhZGFibGVBZGRDaHVuayhzdHJlYW0sIGNodW5rLCBlbmNvZGluZywgYWRkVG9Gcm9udCwgc2tpcENodW5rQ2hlY2spIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKCFza2lwQ2h1bmtDaGVjaykgZXIgPSBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKTtcbiAgICBpZiAoZXIpIHtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsgJiYgY2h1bmsubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgIXN0YXRlLm9iamVjdE1vZGUgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGNodW5rKSAhPT0gQnVmZmVyLnByb3RvdHlwZSkge1xuICAgICAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWRkVG9Gcm9udCkge1xuICAgICAgICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudCcpKTtlbHNlIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUuZW5kZWQpIHtcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRicpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIWVuY29kaW5nKSB7XG4gICAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICAgICAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuay5sZW5ndGggIT09IDApIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7ZWxzZSBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFhZGRUb0Zyb250KSB7XG4gICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5lZWRNb3JlRGF0YShzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBhZGRUb0Zyb250KSB7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuc3luYykge1xuICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgY2h1bmspO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9IGVsc2Uge1xuICAgIC8vIHVwZGF0ZSB0aGUgYnVmZmVyIGluZm8uXG4gICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIGlmIChhZGRUb0Zyb250KSBzdGF0ZS5idWZmZXIudW5zaGlmdChjaHVuayk7ZWxzZSBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG5cbiAgICBpZiAoc3RhdGUubmVlZFJlYWRhYmxlKSBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbiAgfVxuICBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKSB7XG4gIHZhciBlcjtcbiAgaWYgKCFfaXNVaW50OEFycmF5KGNodW5rKSAmJiB0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICByZXR1cm4gZXI7XG59XG5cbi8vIGlmIGl0J3MgcGFzdCB0aGUgaGlnaCB3YXRlciBtYXJrLCB3ZSBjYW4gcHVzaCBpbiBzb21lIG1vcmUuXG4vLyBBbHNvLCBpZiB3ZSBoYXZlIG5vIGRhdGEgeWV0LCB3ZSBjYW4gc3RhbmQgc29tZVxuLy8gbW9yZSBieXRlcy4gIFRoaXMgaXMgdG8gd29yayBhcm91bmQgY2FzZXMgd2hlcmUgaHdtPTAsXG4vLyBzdWNoIGFzIHRoZSByZXBsLiAgQWxzbywgaWYgdGhlIHB1c2goKSB0cmlnZ2VyZWQgYVxuLy8gcmVhZGFibGUgZXZlbnQsIGFuZCB0aGUgdXNlciBjYWxsZWQgcmVhZChsYXJnZU51bWJlcikgc3VjaCB0aGF0XG4vLyBuZWVkUmVhZGFibGUgd2FzIHNldCwgdGhlbiB3ZSBvdWdodCB0byBwdXNoIG1vcmUsIHNvIHRoYXQgYW5vdGhlclxuLy8gJ3JlYWRhYmxlJyBldmVudCB3aWxsIGJlIHRyaWdnZXJlZC5cbmZ1bmN0aW9uIG5lZWRNb3JlRGF0YShzdGF0ZSkge1xuICByZXR1cm4gIXN0YXRlLmVuZGVkICYmIChzdGF0ZS5uZWVkUmVhZGFibGUgfHwgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5sZW5ndGggPT09IDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPT09IGZhbHNlO1xufTtcblxuLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5SZWFkYWJsZS5wcm90b3R5cGUuc2V0RW5jb2RpbmcgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYyk7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2RpbmcgPSBlbmM7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gRG9uJ3QgcmFpc2UgdGhlIGh3bSA+IDhNQlxudmFyIE1BWF9IV00gPSAweDgwMDAwMDtcbmZ1bmN0aW9uIGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pIHtcbiAgaWYgKG4gPj0gTUFYX0hXTSkge1xuICAgIG4gPSBNQVhfSFdNO1xuICB9IGVsc2Uge1xuICAgIC8vIEdldCB0aGUgbmV4dCBoaWdoZXN0IHBvd2VyIG9mIDIgdG8gcHJldmVudCBpbmNyZWFzaW5nIGh3bSBleGNlc3NpdmVseSBpblxuICAgIC8vIHRpbnkgYW1vdW50c1xuICAgIG4tLTtcbiAgICBuIHw9IG4gPj4+IDE7XG4gICAgbiB8PSBuID4+PiAyO1xuICAgIG4gfD0gbiA+Pj4gNDtcbiAgICBuIHw9IG4gPj4+IDg7XG4gICAgbiB8PSBuID4+PiAxNjtcbiAgICBuKys7XG4gIH1cbiAgcmV0dXJuIG47XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSkge1xuICBpZiAobiA8PSAwIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgcmV0dXJuIDA7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXR1cm4gMTtcbiAgaWYgKG4gIT09IG4pIHtcbiAgICAvLyBPbmx5IGZsb3cgb25lIGJ1ZmZlciBhdCBhIHRpbWVcbiAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGgpIHJldHVybiBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhLmxlbmd0aDtlbHNlIHJldHVybiBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgLy8gSWYgd2UncmUgYXNraW5nIGZvciBtb3JlIHRoYW4gdGhlIGN1cnJlbnQgaHdtLCB0aGVuIHJhaXNlIHRoZSBod20uXG4gIGlmIChuID4gc3RhdGUuaGlnaFdhdGVyTWFyaykgc3RhdGUuaGlnaFdhdGVyTWFyayA9IGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pO1xuICBpZiAobiA8PSBzdGF0ZS5sZW5ndGgpIHJldHVybiBuO1xuICAvLyBEb24ndCBoYXZlIGVub3VnaFxuICBpZiAoIXN0YXRlLmVuZGVkKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gc3RhdGUubGVuZ3RoO1xufVxuXG4vLyB5b3UgY2FuIG92ZXJyaWRlIGVpdGhlciB0aGlzIG1ldGhvZCwgb3IgdGhlIGFzeW5jIF9yZWFkKG4pIGJlbG93LlxuUmVhZGFibGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAobikge1xuICBkZWJ1ZygncmVhZCcsIG4pO1xuICBuID0gcGFyc2VJbnQobiwgMTApO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgbk9yaWcgPSBuO1xuXG4gIGlmIChuICE9PSAwKSBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcblxuICAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhIGJ1bmNoIG9mIGRhdGEgaW4gdGhlIGJ1ZmZlciwgdGhlbiBqdXN0IHRyaWdnZXJcbiAgLy8gdGhlICdyZWFkYWJsZScgZXZlbnQgYW5kIG1vdmUgb24uXG4gIGlmIChuID09PSAwICYmIHN0YXRlLm5lZWRSZWFkYWJsZSAmJiAoc3RhdGUubGVuZ3RoID49IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUuZW5kZWQpKSB7XG4gICAgZGVidWcoJ3JlYWQ6IGVtaXRSZWFkYWJsZScsIHN0YXRlLmxlbmd0aCwgc3RhdGUuZW5kZWQpO1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO2Vsc2UgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbiA9IGhvd011Y2hUb1JlYWQobiwgc3RhdGUpO1xuXG4gIC8vIGlmIHdlJ3ZlIGVuZGVkLCBhbmQgd2UncmUgbm93IGNsZWFyLCB0aGVuIGZpbmlzaCBpdCB1cC5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIEFsbCB0aGUgYWN0dWFsIGNodW5rIGdlbmVyYXRpb24gbG9naWMgbmVlZHMgdG8gYmVcbiAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFzb24gaXMgdGhhdCBpbiBjZXJ0YWluXG4gIC8vIHN5bnRoZXRpYyBzdHJlYW0gY2FzZXMsIHN1Y2ggYXMgcGFzc3Rocm91Z2ggc3RyZWFtcywgX3JlYWRcbiAgLy8gbWF5IGJlIGEgY29tcGxldGVseSBzeW5jaHJvbm91cyBvcGVyYXRpb24gd2hpY2ggbWF5IGNoYW5nZVxuICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlblxuICAvLyBiZWZvcmUgdGhlcmUgd2FzICpub3QqIGVub3VnaC5cbiAgLy9cbiAgLy8gU28sIHRoZSBzdGVwcyBhcmU6XG4gIC8vIDEuIEZpZ3VyZSBvdXQgd2hhdCB0aGUgc3RhdGUgb2YgdGhpbmdzIHdpbGwgYmUgYWZ0ZXIgd2UgZG9cbiAgLy8gYSByZWFkIGZyb20gdGhlIGJ1ZmZlci5cbiAgLy9cbiAgLy8gMi4gSWYgdGhhdCByZXN1bHRpbmcgc3RhdGUgd2lsbCB0cmlnZ2VyIGEgX3JlYWQsIHRoZW4gY2FsbCBfcmVhZC5cbiAgLy8gTm90ZSB0aGF0IHRoaXMgbWF5IGJlIGFzeW5jaHJvbm91cywgb3Igc3luY2hyb25vdXMuICBZZXMsIGl0IGlzXG4gIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhblxuICAvLyB0aGF0IHRoZSBSZWFkYWJsZSBjbGFzcyBzaG91bGQgYmVoYXZlIGltcHJvcGVybHksIGFzIHN0cmVhbXMgYXJlXG4gIC8vIGRlc2lnbmVkIHRvIGJlIHN5bmMvYXN5bmMgYWdub3N0aWMuXG4gIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbFxuICAvLyBoYXMgcmV0dXJuZWQgeWV0KSwgc28gdGhhdCB3ZSBrbm93IHdoZXRoZXIgb3Igbm90IGl0J3Mgc2FmZSB0byBlbWl0XG4gIC8vICdyZWFkYWJsZScgZXRjLlxuICAvL1xuICAvLyAzLiBBY3R1YWxseSBwdWxsIHRoZSByZXF1ZXN0ZWQgY2h1bmtzIG91dCBvZiB0aGUgYnVmZmVyIGFuZCByZXR1cm4uXG5cbiAgLy8gaWYgd2UgbmVlZCBhIHJlYWRhYmxlIGV2ZW50LCB0aGVuIHdlIG5lZWQgdG8gZG8gc29tZSByZWFkaW5nLlxuICB2YXIgZG9SZWFkID0gc3RhdGUubmVlZFJlYWRhYmxlO1xuICBkZWJ1ZygnbmVlZCByZWFkYWJsZScsIGRvUmVhZCk7XG5cbiAgLy8gaWYgd2UgY3VycmVudGx5IGhhdmUgbGVzcyB0aGFuIHRoZSBoaWdoV2F0ZXJNYXJrLCB0aGVuIGFsc28gcmVhZCBzb21lXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgfHwgc3RhdGUubGVuZ3RoIC0gbiA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkb1JlYWQgPSB0cnVlO1xuICAgIGRlYnVnKCdsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFyaycsIGRvUmVhZCk7XG4gIH1cblxuICAvLyBob3dldmVyLCBpZiB3ZSd2ZSBlbmRlZCwgdGhlbiB0aGVyZSdzIG5vIHBvaW50LCBhbmQgaWYgd2UncmUgYWxyZWFkeVxuICAvLyByZWFkaW5nLCB0aGVuIGl0J3MgdW5uZWNlc3NhcnkuXG4gIGlmIChzdGF0ZS5lbmRlZCB8fCBzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZG9SZWFkID0gZmFsc2U7XG4gICAgZGVidWcoJ3JlYWRpbmcgb3IgZW5kZWQnLCBkb1JlYWQpO1xuICB9IGVsc2UgaWYgKGRvUmVhZCkge1xuICAgIGRlYnVnKCdkbyByZWFkJyk7XG4gICAgc3RhdGUucmVhZGluZyA9IHRydWU7XG4gICAgc3RhdGUuc3luYyA9IHRydWU7XG4gICAgLy8gaWYgdGhlIGxlbmd0aCBpcyBjdXJyZW50bHkgemVybywgdGhlbiB3ZSAqbmVlZCogYSByZWFkYWJsZSBldmVudC5cbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIC8vIGNhbGwgaW50ZXJuYWwgcmVhZCBtZXRob2RcbiAgICB0aGlzLl9yZWFkKHN0YXRlLmhpZ2hXYXRlck1hcmspO1xuICAgIHN0YXRlLnN5bmMgPSBmYWxzZTtcbiAgICAvLyBJZiBfcmVhZCBwdXNoZWQgZGF0YSBzeW5jaHJvbm91c2x5LCB0aGVuIGByZWFkaW5nYCB3aWxsIGJlIGZhbHNlLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHJlLWV2YWx1YXRlIGhvdyBtdWNoIGRhdGEgd2UgY2FuIHJldHVybiB0byB0aGUgdXNlci5cbiAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIG4gPSBob3dNdWNoVG9SZWFkKG5PcmlnLCBzdGF0ZSk7XG4gIH1cblxuICB2YXIgcmV0O1xuICBpZiAobiA+IDApIHJldCA9IGZyb21MaXN0KG4sIHN0YXRlKTtlbHNlIHJldCA9IG51bGw7XG5cbiAgaWYgKHJldCA9PT0gbnVsbCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgbiA9IDA7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUubGVuZ3RoIC09IG47XG4gIH1cblxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSWYgd2UgaGF2ZSBub3RoaW5nIGluIHRoZSBidWZmZXIsIHRoZW4gd2Ugd2FudCB0byBrbm93XG4gICAgLy8gYXMgc29vbiBhcyB3ZSAqZG8qIGdldCBzb21ldGhpbmcgaW50byB0aGUgYnVmZmVyLlxuICAgIGlmICghc3RhdGUuZW5kZWQpIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgICAvLyBJZiB3ZSB0cmllZCB0byByZWFkKCkgcGFzdCB0aGUgRU9GLCB0aGVuIGVtaXQgZW5kIG9uIHRoZSBuZXh0IHRpY2suXG4gICAgaWYgKG5PcmlnICE9PSBuICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgfVxuXG4gIGlmIChyZXQgIT09IG51bGwpIHRoaXMuZW1pdCgnZGF0YScsIHJldCk7XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUuZW5kZWQpIHJldHVybjtcbiAgaWYgKHN0YXRlLmRlY29kZXIpIHtcbiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuXG4gIC8vIGVtaXQgJ3JlYWRhYmxlJyBub3cgdG8gbWFrZSBzdXJlIGl0IGdldHMgcGlja2VkIHVwLlxuICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbn1cblxuLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyXG4vLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXJcbi8vIGEgbmV4dFRpY2sgcmVjdXJzaW9uIHdhcm5pbmcsIGJ1dCB0aGF0J3Mgbm90IHNvIGJhZC5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUuZmxvd2luZyk7XG4gICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBpZiAoc3RhdGUuc3luYykgcG5hLm5leHRUaWNrKGVtaXRSZWFkYWJsZV8sIHN0cmVhbSk7ZWxzZSBlbWl0UmVhZGFibGVfKHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHtcbiAgZGVidWcoJ2VtaXQgcmVhZGFibGUnKTtcbiAgc3RyZWFtLmVtaXQoJ3JlYWRhYmxlJyk7XG4gIGZsb3coc3RyZWFtKTtcbn1cblxuLy8gYXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCxcbi8vIGFuZCBjYWxsZWQgcmVhZCgpIHRvIGNvbnN1bWUgc29tZSBkYXRhLiAgdGhhdCBtYXkgaGF2ZSB0cmlnZ2VyZWRcbi8vIGluIHR1cm4gYW5vdGhlciBfcmVhZChuKSBjYWxsLCBpbiB3aGljaCBjYXNlIHJlYWRpbmcgPSB0cnVlIGlmXG4vLyBpdCdzIGluIHByb2dyZXNzLlxuLy8gSG93ZXZlciwgaWYgd2UncmUgbm90IGVuZGVkLCBvciByZWFkaW5nLCBhbmQgdGhlIGxlbmd0aCA8IGh3bSxcbi8vIHRoZW4gZ28gYWhlYWQgYW5kIHRyeSB0byByZWFkIHNvbWUgbW9yZSBwcmVlbXB0aXZlbHkuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nTW9yZSkge1xuICAgIHN0YXRlLnJlYWRpbmdNb3JlID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2sobWF5YmVSZWFkTW9yZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgd2hpbGUgKCFzdGF0ZS5yZWFkaW5nICYmICFzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5lbmRlZCAmJiBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZGVidWcoJ21heWJlUmVhZE1vcmUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gICAgaWYgKGxlbiA9PT0gc3RhdGUubGVuZ3RoKVxuICAgICAgLy8gZGlkbid0IGdldCBhbnkgZGF0YSwgc3RvcCBzcGlubmluZy5cbiAgICAgIGJyZWFrO2Vsc2UgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB9XG4gIHN0YXRlLnJlYWRpbmdNb3JlID0gZmFsc2U7XG59XG5cbi8vIGFic3RyYWN0IG1ldGhvZC4gIHRvIGJlIG92ZXJyaWRkZW4gaW4gc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vIGNhbGwgY2IoZXIsIGRhdGEpIHdoZXJlIGRhdGEgaXMgPD0gbiBpbiBsZW5ndGguXG4vLyBmb3IgdmlydHVhbCAobm9uLXN0cmluZywgbm9uLWJ1ZmZlcikgc3RyZWFtcywgXCJsZW5ndGhcIiBpcyBzb21ld2hhdFxuLy8gYXJiaXRyYXJ5LCBhbmQgcGVyaGFwcyBub3QgdmVyeSBtZWFuaW5nZnVsLlxuUmVhZGFibGUucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignX3JlYWQoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBwaXBlT3B0cykge1xuICB2YXIgc3JjID0gdGhpcztcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBzd2l0Y2ggKHN0YXRlLnBpcGVzQ291bnQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBzdGF0ZS5waXBlcyA9IGRlc3Q7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBzdGF0ZS5waXBlcyA9IFtzdGF0ZS5waXBlcywgZGVzdF07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgc3RhdGUucGlwZXMucHVzaChkZXN0KTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHN0YXRlLnBpcGVzQ291bnQgKz0gMTtcbiAgZGVidWcoJ3BpcGUgY291bnQ9JWQgb3B0cz0laicsIHN0YXRlLnBpcGVzQ291bnQsIHBpcGVPcHRzKTtcblxuICB2YXIgZG9FbmQgPSAoIXBpcGVPcHRzIHx8IHBpcGVPcHRzLmVuZCAhPT0gZmFsc2UpICYmIGRlc3QgIT09IHByb2Nlc3Muc3Rkb3V0ICYmIGRlc3QgIT09IHByb2Nlc3Muc3RkZXJyO1xuXG4gIHZhciBlbmRGbiA9IGRvRW5kID8gb25lbmQgOiB1bnBpcGU7XG4gIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBwbmEubmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTtcblxuICBkZXN0Lm9uKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlLCB1bnBpcGVJbmZvKSB7XG4gICAgZGVidWcoJ29udW5waXBlJyk7XG4gICAgaWYgKHJlYWRhYmxlID09PSBzcmMpIHtcbiAgICAgIGlmICh1bnBpcGVJbmZvICYmIHVucGlwZUluZm8uaGFzVW5waXBlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgdW5waXBlSW5mby5oYXNVbnBpcGVkID0gdHJ1ZTtcbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGRlYnVnKCdvbmVuZCcpO1xuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuICAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cbiAgdmFyIG9uZHJhaW4gPSBwaXBlT25EcmFpbihzcmMpO1xuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIHZhciBjbGVhbmVkVXAgPSBmYWxzZTtcbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBkZWJ1ZygnY2xlYW51cCcpO1xuICAgIC8vIGNsZWFudXAgZXZlbnQgaGFuZGxlcnMgb25jZSB0aGUgcGlwZSBpcyBicm9rZW5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcigndW5waXBlJywgb251bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgdW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xuXG4gICAgY2xlYW5lZFVwID0gdHJ1ZTtcblxuICAgIC8vIGlmIHRoZSByZWFkZXIgaXMgd2FpdGluZyBmb3IgYSBkcmFpbiBldmVudCBmcm9tIHRoaXNcbiAgICAvLyBzcGVjaWZpYyB3cml0ZXIsIHRoZW4gaXQgd291bGQgY2F1c2UgaXQgdG8gbmV2ZXIgc3RhcnRcbiAgICAvLyBmbG93aW5nIGFnYWluLlxuICAgIC8vIFNvLCBpZiB0aGlzIGlzIGF3YWl0aW5nIGEgZHJhaW4sIHRoZW4gd2UganVzdCBjYWxsIGl0IG5vdy5cbiAgICAvLyBJZiB3ZSBkb24ndCBrbm93LCB0aGVuIGFzc3VtZSB0aGF0IHdlIGFyZSB3YWl0aW5nIGZvciBvbmUuXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gJiYgKCFkZXN0Ll93cml0YWJsZVN0YXRlIHx8IGRlc3QuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKSkgb25kcmFpbigpO1xuICB9XG5cbiAgLy8gSWYgdGhlIHVzZXIgcHVzaGVzIG1vcmUgZGF0YSB3aGlsZSB3ZSdyZSB3cml0aW5nIHRvIGRlc3QgdGhlbiB3ZSdsbCBlbmQgdXBcbiAgLy8gaW4gb25kYXRhIGFnYWluLiBIb3dldmVyLCB3ZSBvbmx5IHdhbnQgdG8gaW5jcmVhc2UgYXdhaXREcmFpbiBvbmNlIGJlY2F1c2VcbiAgLy8gZGVzdCB3aWxsIG9ubHkgZW1pdCBvbmUgJ2RyYWluJyBldmVudCBmb3IgdGhlIG11bHRpcGxlIHdyaXRlcy5cbiAgLy8gPT4gSW50cm9kdWNlIGEgZ3VhcmQgb24gaW5jcmVhc2luZyBhd2FpdERyYWluLlxuICB2YXIgaW5jcmVhc2VkQXdhaXREcmFpbiA9IGZhbHNlO1xuICBzcmMub24oJ2RhdGEnLCBvbmRhdGEpO1xuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBkZWJ1Zygnb25kYXRhJyk7XG4gICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IGZhbHNlO1xuICAgIHZhciByZXQgPSBkZXN0LndyaXRlKGNodW5rKTtcbiAgICBpZiAoZmFsc2UgPT09IHJldCAmJiAhaW5jcmVhc2VkQXdhaXREcmFpbikge1xuICAgICAgLy8gSWYgdGhlIHVzZXIgdW5waXBlZCBkdXJpbmcgYGRlc3Qud3JpdGUoKWAsIGl0IGlzIHBvc3NpYmxlXG4gICAgICAvLyB0byBnZXQgc3R1Y2sgaW4gYSBwZXJtYW5lbnRseSBwYXVzZWQgc3RhdGUgaWYgdGhhdCB3cml0ZVxuICAgICAgLy8gYWxzbyByZXR1cm5lZCBmYWxzZS5cbiAgICAgIC8vID0+IENoZWNrIHdoZXRoZXIgYGRlc3RgIGlzIHN0aWxsIGEgcGlwaW5nIGRlc3RpbmF0aW9uLlxuICAgICAgaWYgKChzdGF0ZS5waXBlc0NvdW50ID09PSAxICYmIHN0YXRlLnBpcGVzID09PSBkZXN0IHx8IHN0YXRlLnBpcGVzQ291bnQgPiAxICYmIGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpICE9PSAtMSkgJiYgIWNsZWFuZWRVcCkge1xuICAgICAgICBkZWJ1ZygnZmFsc2Ugd3JpdGUgcmVzcG9uc2UsIHBhdXNlJywgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4pO1xuICAgICAgICBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbisrO1xuICAgICAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHNyYy5wYXVzZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBkZXN0IGhhcyBhbiBlcnJvciwgdGhlbiBzdG9wIHBpcGluZyBpbnRvIGl0LlxuICAvLyBob3dldmVyLCBkb24ndCBzdXBwcmVzcyB0aGUgdGhyb3dpbmcgYmVoYXZpb3IgZm9yIHRoaXMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTtcbiAgICB1bnBpcGUoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGlmIChFRWxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApIGRlc3QuZW1pdCgnZXJyb3InLCBlcik7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIHVzZXJsYW5kIG9uZXMuXG4gIHByZXBlbmRMaXN0ZW5lcihkZXN0LCAnZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgIGRlYnVnKCdvbmZpbmlzaCcpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cbiAgZnVuY3Rpb24gdW5waXBlKCkge1xuICAgIGRlYnVnKCd1bnBpcGUnKTtcbiAgICBzcmMudW5waXBlKGRlc3QpO1xuICB9XG5cbiAgLy8gdGVsbCB0aGUgZGVzdCB0aGF0IGl0J3MgYmVpbmcgcGlwZWQgdG9cbiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTtcblxuICAvLyBzdGFydCB0aGUgZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFscmVhZHkuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpO1xuICAgIHNyYy5yZXN1bWUoKTtcbiAgfVxuXG4gIHJldHVybiBkZXN0O1xufTtcblxuZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXRlID0gc3JjLl9yZWFkYWJsZVN0YXRlO1xuICAgIGRlYnVnKCdwaXBlT25EcmFpbicsIHN0YXRlLmF3YWl0RHJhaW4pO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluKSBzdGF0ZS5hd2FpdERyYWluLS07XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDAgJiYgRUVsaXN0ZW5lckNvdW50KHNyYywgJ2RhdGEnKSkge1xuICAgICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgICBmbG93KHNyYyk7XG4gICAgfVxuICB9O1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHVucGlwZUluZm8gPSB7IGhhc1VucGlwZWQ6IGZhbHNlIH07XG5cbiAgLy8gaWYgd2UncmUgbm90IHBpcGluZyBhbnl3aGVyZSwgdGhlbiBkbyBub3RoaW5nLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMCkgcmV0dXJuIHRoaXM7XG5cbiAgLy8ganVzdCBvbmUgZGVzdGluYXRpb24uICBtb3N0IGNvbW1vbiBjYXNlLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkge1xuICAgIC8vIHBhc3NlZCBpbiBvbmUsIGJ1dCBpdCdzIG5vdCB0aGUgcmlnaHQgb25lLlxuICAgIGlmIChkZXN0ICYmIGRlc3QgIT09IHN0YXRlLnBpcGVzKSByZXR1cm4gdGhpcztcblxuICAgIGlmICghZGVzdCkgZGVzdCA9IHN0YXRlLnBpcGVzO1xuXG4gICAgLy8gZ290IGEgbWF0Y2guXG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICBpZiAoZGVzdCkgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHNsb3cgY2FzZS4gbXVsdGlwbGUgcGlwZSBkZXN0aW5hdGlvbnMuXG5cbiAgaWYgKCFkZXN0KSB7XG4gICAgLy8gcmVtb3ZlIGFsbC5cbiAgICB2YXIgZGVzdHMgPSBzdGF0ZS5waXBlcztcbiAgICB2YXIgbGVuID0gc3RhdGUucGlwZXNDb3VudDtcbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdHNbaV0uZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgfXJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gdHJ5IHRvIGZpbmQgdGhlIHJpZ2h0IG9uZS5cbiAgdmFyIGluZGV4ID0gaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCk7XG4gIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiB0aGlzO1xuXG4gIHN0YXRlLnBpcGVzLnNwbGljZShpbmRleCwgMSk7XG4gIHN0YXRlLnBpcGVzQ291bnQgLT0gMTtcbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07XG5cbiAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHNldCB1cCBkYXRhIGV2ZW50cyBpZiB0aGV5IGFyZSBhc2tlZCBmb3Jcbi8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nXG5SZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGZuKSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTtcblxuICBpZiAoZXYgPT09ICdkYXRhJykge1xuICAgIC8vIFN0YXJ0IGZsb3dpbmcgb24gbmV4dCB0aWNrIGlmIHN0cmVhbSBpc24ndCBleHBsaWNpdGx5IHBhdXNlZFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgIT09IGZhbHNlKSB0aGlzLnJlc3VtZSgpO1xuICB9IGVsc2UgaWYgKGV2ID09PSAncmVhZGFibGUnKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgIXN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nKSB7XG4gICAgICBzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZyA9IHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmICghc3RhdGUucmVhZGluZykge1xuICAgICAgICBwbmEubmV4dFRpY2soblJlYWRpbmdOZXh0VGljaywgdGhpcyk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmxlbmd0aCkge1xuICAgICAgICBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5SZWFkYWJsZS5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBSZWFkYWJsZS5wcm90b3R5cGUub247XG5cbmZ1bmN0aW9uIG5SZWFkaW5nTmV4dFRpY2soc2VsZikge1xuICBkZWJ1ZygncmVhZGFibGUgbmV4dHRpY2sgcmVhZCAwJyk7XG4gIHNlbGYucmVhZCgwKTtcbn1cblxuLy8gcGF1c2UoKSBhbmQgcmVzdW1lKCkgYXJlIHJlbW5hbnRzIG9mIHRoZSBsZWdhY3kgcmVhZGFibGUgc3RyZWFtIEFQSVxuLy8gSWYgdGhlIHVzZXIgdXNlcyB0aGVtLCB0aGVuIHN3aXRjaCBpbnRvIG9sZCBtb2RlLlxuUmVhZGFibGUucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZScpO1xuICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgIHJlc3VtZSh0aGlzLCBzdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiByZXN1bWUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlc3VtZVNjaGVkdWxlZCkge1xuICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKHJlc3VtZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc3VtZV8oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9XG5cbiAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gIHN0YXRlLmF3YWl0RHJhaW4gPSAwO1xuICBzdHJlYW0uZW1pdCgncmVzdW1lJyk7XG4gIGZsb3coc3RyZWFtKTtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLnJlYWRpbmcpIHN0cmVhbS5yZWFkKDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdjYWxsIHBhdXNlIGZsb3dpbmc9JWonLCB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpO1xuICBpZiAoZmFsc2UgIT09IHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwYXVzZScpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncGF1c2UnKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZsb3coc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2Zsb3cnLCBzdGF0ZS5mbG93aW5nKTtcbiAgd2hpbGUgKHN0YXRlLmZsb3dpbmcgJiYgc3RyZWFtLnJlYWQoKSAhPT0gbnVsbCkge31cbn1cblxuLy8gd3JhcCBhbiBvbGQtc3R5bGUgc3RyZWFtIGFzIHRoZSBhc3luYyBkYXRhIHNvdXJjZS5cbi8vIFRoaXMgaXMgKm5vdCogcGFydCBvZiB0aGUgcmVhZGFibGUgc3RyZWFtIGludGVyZmFjZS5cbi8vIEl0IGlzIGFuIHVnbHkgdW5mb3J0dW5hdGUgbWVzcyBvZiBoaXN0b3J5LlxuUmVhZGFibGUucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHBhdXNlZCA9IGZhbHNlO1xuXG4gIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cmFwcGVkIGVuZCcpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIF90aGlzLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIF90aGlzLnB1c2gobnVsbCk7XG4gIH0pO1xuXG4gIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcblxuICAgIC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZVxuICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlICYmIChjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdW5kZWZpbmVkKSkgcmV0dXJuO2Vsc2UgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkpIHJldHVybjtcblxuICAgIHZhciByZXQgPSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICBpZiAoIXJldCkge1xuICAgICAgcGF1c2VkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5wYXVzZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gcHJveHkgYWxsIHRoZSBvdGhlciBtZXRob2RzLlxuICAvLyBpbXBvcnRhbnQgd2hlbiB3cmFwcGluZyBmaWx0ZXJzIGFuZCBkdXBsZXhlcy5cbiAgZm9yICh2YXIgaSBpbiBzdHJlYW0pIHtcbiAgICBpZiAodGhpc1tpXSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzdHJlYW1baV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmVhbVttZXRob2RdLmFwcGx5KHN0cmVhbSwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH0oaSk7XG4gICAgfVxuICB9XG5cbiAgLy8gcHJveHkgY2VydGFpbiBpbXBvcnRhbnQgZXZlbnRzLlxuICBmb3IgKHZhciBuID0gMDsgbiA8IGtQcm94eUV2ZW50cy5sZW5ndGg7IG4rKykge1xuICAgIHN0cmVhbS5vbihrUHJveHlFdmVudHNbbl0sIHRoaXMuZW1pdC5iaW5kKHRoaXMsIGtQcm94eUV2ZW50c1tuXSkpO1xuICB9XG5cbiAgLy8gd2hlbiB3ZSB0cnkgdG8gY29uc3VtZSBzb21lIG1vcmUgYnl0ZXMsIHNpbXBseSB1bnBhdXNlIHRoZVxuICAvLyB1bmRlcmx5aW5nIHN0cmVhbS5cbiAgdGhpcy5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTtcbiAgICBpZiAocGF1c2VkKSB7XG4gICAgICBwYXVzZWQgPSBmYWxzZTtcbiAgICAgIHN0cmVhbS5yZXN1bWUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAncmVhZGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxuUmVhZGFibGUuX2Zyb21MaXN0ID0gZnJvbUxpc3Q7XG5cbi8vIFBsdWNrIG9mZiBuIGJ5dGVzIGZyb20gYW4gYXJyYXkgb2YgYnVmZmVycy5cbi8vIExlbmd0aCBpcyB0aGUgY29tYmluZWQgbGVuZ3RocyBvZiBhbGwgdGhlIGJ1ZmZlcnMgaW4gdGhlIGxpc3QuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0KG4sIHN0YXRlKSB7XG4gIC8vIG5vdGhpbmcgYnVmZmVyZWRcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHJldDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldCA9IHN0YXRlLmJ1ZmZlci5zaGlmdCgpO2Vsc2UgaWYgKCFuIHx8IG4gPj0gc3RhdGUubGVuZ3RoKSB7XG4gICAgLy8gcmVhZCBpdCBhbGwsIHRydW5jYXRlIHRoZSBsaXN0XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIHJldCA9IHN0YXRlLmJ1ZmZlci5qb2luKCcnKTtlbHNlIGlmIChzdGF0ZS5idWZmZXIubGVuZ3RoID09PSAxKSByZXQgPSBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhO2Vsc2UgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbmNhdChzdGF0ZS5sZW5ndGgpO1xuICAgIHN0YXRlLmJ1ZmZlci5jbGVhcigpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlYWQgcGFydCBvZiBsaXN0XG4gICAgcmV0ID0gZnJvbUxpc3RQYXJ0aWFsKG4sIHN0YXRlLmJ1ZmZlciwgc3RhdGUuZGVjb2Rlcik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBFeHRyYWN0cyBvbmx5IGVub3VnaCBidWZmZXJlZCBkYXRhIHRvIHNhdGlzZnkgdGhlIGFtb3VudCByZXF1ZXN0ZWQuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0UGFydGlhbChuLCBsaXN0LCBoYXNTdHJpbmdzKSB7XG4gIHZhciByZXQ7XG4gIGlmIChuIDwgbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gc2xpY2UgaXMgdGhlIHNhbWUgZm9yIGJ1ZmZlcnMgYW5kIHN0cmluZ3NcbiAgICByZXQgPSBsaXN0LmhlYWQuZGF0YS5zbGljZSgwLCBuKTtcbiAgICBsaXN0LmhlYWQuZGF0YSA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKG4pO1xuICB9IGVsc2UgaWYgKG4gPT09IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIGZpcnN0IGNodW5rIGlzIGEgcGVyZmVjdCBtYXRjaFxuICAgIHJldCA9IGxpc3Quc2hpZnQoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZXN1bHQgc3BhbnMgbW9yZSB0aGFuIG9uZSBidWZmZXJcbiAgICByZXQgPSBoYXNTdHJpbmdzID8gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkgOiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGNoYXJhY3RlcnMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhXG4vLyBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIHtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgdmFyIHJldCA9IHAuZGF0YTtcbiAgbiAtPSByZXQubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBzdHIgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IHN0ci5sZW5ndGggPyBzdHIubGVuZ3RoIDogbjtcbiAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHJldCArPSBzdHI7ZWxzZSByZXQgKz0gc3RyLnNsaWNlKDAsIG4pO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBzdHIuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YSBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpIHtcbiAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuKTtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgcC5kYXRhLmNvcHkocmV0KTtcbiAgbiAtPSBwLmRhdGEubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBidWYgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IGJ1Zi5sZW5ndGggPyBidWYubGVuZ3RoIDogbjtcbiAgICBidWYuY29weShyZXQsIHJldC5sZW5ndGggLSBuLCAwLCBuYik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBidWYubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IGJ1Zi5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgYmVmb3JlIGNvbnN1bWluZyBhbGwgdGhlIGJ5dGVzLCB0aGVuIHRoYXQgaXMgYVxuICAvLyBidWcgaW4gbm9kZS4gIFNob3VsZCBuZXZlciBoYXBwZW4uXG4gIGlmIChzdGF0ZS5sZW5ndGggPiAwKSB0aHJvdyBuZXcgRXJyb3IoJ1wiZW5kUmVhZGFibGUoKVwiIGNhbGxlZCBvbiBub24tZW1wdHkgc3RyZWFtJyk7XG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkKSB7XG4gICAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhlbmRSZWFkYWJsZU5ULCBzdGF0ZSwgc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZU5UKHN0YXRlLCBzdHJlYW0pIHtcbiAgLy8gQ2hlY2sgdGhhdCB3ZSBkaWRuJ3QgZ2V0IG9uZSBsYXN0IHVuc2hpZnQuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiBzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICBzdGF0ZS5lbmRFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZW5kJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5kZXhPZih4cywgeCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh4c1tpXSA9PT0geCkgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG4vLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhIFwiZmlsdGVyXCIsXG4vLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZVxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKVxuLy9cbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcbi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLFxuLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOlxuLy9cbi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKVxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbFxuLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLlxuLy9cbi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuXG4vLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZVxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG4vLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdFxuLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLFxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcbi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmdcbi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG4vLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluXG4vLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGxcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cbi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbFxuLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5nIHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGRcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG4vL1xuLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVua1xuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2Zvcm07XG5cbnZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhUcmFuc2Zvcm0sIER1cGxleCk7XG5cbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKGVyLCBkYXRhKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTtcblxuICB2YXIgY2IgPSB0cy53cml0ZWNiO1xuXG4gIGlmICghY2IpIHtcbiAgICByZXR1cm4gdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignd3JpdGUgY2FsbGJhY2sgY2FsbGVkIG11bHRpcGxlIHRpbWVzJykpO1xuICB9XG5cbiAgdHMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRzLndyaXRlY2IgPSBudWxsO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHRoaXMucHVzaChkYXRhKTtcblxuICBjYihlcik7XG5cbiAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgcnMucmVhZGluZyA9IGZhbHNlO1xuICBpZiAocnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHtcbiAgICB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKSByZXR1cm4gbmV3IFRyYW5zZm9ybShvcHRpb25zKTtcblxuICBEdXBsZXguY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZSA9IHtcbiAgICBhZnRlclRyYW5zZm9ybTogYWZ0ZXJUcmFuc2Zvcm0uYmluZCh0aGlzKSxcbiAgICBuZWVkVHJhbnNmb3JtOiBmYWxzZSxcbiAgICB0cmFuc2Zvcm1pbmc6IGZhbHNlLFxuICAgIHdyaXRlY2I6IG51bGwsXG4gICAgd3JpdGVjaHVuazogbnVsbCxcbiAgICB3cml0ZWVuY29kaW5nOiBudWxsXG4gIH07XG5cbiAgLy8gc3RhcnQgb3V0IGFza2luZyBmb3IgYSByZWFkYWJsZSBldmVudCBvbmNlIGRhdGEgaXMgdHJhbnNmb3JtZWQuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAvLyB3ZSBoYXZlIGltcGxlbWVudGVkIHRoZSBfcmVhZCBtZXRob2QsIGFuZCBkb25lIHRoZSBvdGhlciB0aGluZ3NcbiAgLy8gdGhhdCBSZWFkYWJsZSB3YW50cyBiZWZvcmUgdGhlIGZpcnN0IF9yZWFkIGNhbGwsIHNvIHVuc2V0IHRoZVxuICAvLyBzeW5jIGd1YXJkIGZsYWcuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYyA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fdHJhbnNmb3JtID0gb3B0aW9ucy50cmFuc2Zvcm07XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmx1c2ggPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZsdXNoID0gb3B0aW9ucy5mbHVzaDtcbiAgfVxuXG4gIC8vIFdoZW4gdGhlIHdyaXRhYmxlIHNpZGUgZmluaXNoZXMsIHRoZW4gZmx1c2ggb3V0IGFueXRoaW5nIHJlbWFpbmluZy5cbiAgdGhpcy5vbigncHJlZmluaXNoJywgcHJlZmluaXNoKTtcbn1cblxuZnVuY3Rpb24gcHJlZmluaXNoKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgdGhpcy5fZmx1c2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLl9mbHVzaChmdW5jdGlvbiAoZXIsIGRhdGEpIHtcbiAgICAgIGRvbmUoX3RoaXMsIGVyLCBkYXRhKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBkb25lKHRoaXMsIG51bGwsIG51bGwpO1xuICB9XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxuLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay5cbi8vXG4vLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcbi8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuXG4vL1xuLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncbi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3Vcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ190cmFuc2Zvcm0oKSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fCBycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufTtcblxuLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgYXJncyBhcmUgaGVyZS5cbi8vIF90cmFuc2Zvcm0gZG9lcyBhbGwgdGhlIHdvcmsuXG4vLyBUaGF0IHdlIGdvdCBoZXJlIG1lYW5zIHRoYXQgdGhlIHJlYWRhYmxlIHNpZGUgd2FudHMgbW9yZSBkYXRhLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmIHRzLndyaXRlY2IgJiYgIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHRzLnRyYW5zZm9ybWluZyA9IHRydWU7XG4gICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluXG4gICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXG4gICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7XG4gIH1cbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICBEdXBsZXgucHJvdG90eXBlLl9kZXN0cm95LmNhbGwodGhpcywgZXJyLCBmdW5jdGlvbiAoZXJyMikge1xuICAgIGNiKGVycjIpO1xuICAgIF90aGlzMi5lbWl0KCdjbG9zZScpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGRvbmUoc3RyZWFtLCBlciwgZGF0YSkge1xuICBpZiAoZXIpIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG5cbiAgaWYgKGRhdGEgIT0gbnVsbCkgLy8gc2luZ2xlIGVxdWFscyBjaGVjayBmb3IgYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcbiAgaWYgKHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHdzLmxlbmd0aCAhPSAwJyk7XG5cbiAgaWYgKHN0cmVhbS5fdHJhbnNmb3JtU3RhdGUudHJhbnNmb3JtaW5nKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiBzdGlsbCB0cmFuc2Zvcm1pbmcnKTtcblxuICByZXR1cm4gc3RyZWFtLnB1c2gobnVsbCk7XG59IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIEEgYml0IHNpbXBsZXIgdGhhbiByZWFkYWJsZSBzdHJlYW1zLlxuLy8gSW1wbGVtZW50IGFuIGFzeW5jIC5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsXG4vLyB0aGUgZHJhaW4gZXZlbnQgZW1pc3Npb24gYW5kIGJ1ZmZlcmluZy5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRhYmxlO1xuXG4vKiA8cmVwbGFjZW1lbnQ+ICovXG5mdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRoaXMuY2h1bmsgPSBjaHVuaztcbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuICB0aGlzLmNhbGxiYWNrID0gY2I7XG4gIHRoaXMubmV4dCA9IG51bGw7XG59XG5cbi8vIEl0IHNlZW1zIGEgbGlua2VkIGxpc3QgYnV0IGl0IGlzIG5vdFxuLy8gdGhlcmUgd2lsbCBiZSBvbmx5IDIgb2YgdGhlc2UgZm9yIGVhY2ggc3RyZWFtXG5mdW5jdGlvbiBDb3JrZWRSZXF1ZXN0KHN0YXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5lbnRyeSA9IG51bGw7XG4gIHRoaXMuZmluaXNoID0gZnVuY3Rpb24gKCkge1xuICAgIG9uQ29ya2VkRmluaXNoKF90aGlzLCBzdGF0ZSk7XG4gIH07XG59XG4vKiA8L3JlcGxhY2VtZW50PiAqL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGFzeW5jV3JpdGUgPSAhcHJvY2Vzcy5icm93c2VyICYmIFsndjAuMTAnLCAndjAuOS4nXS5pbmRleE9mKHByb2Nlc3MudmVyc2lvbi5zbGljZSgwLCA1KSkgPiAtMSA/IHNldEltbWVkaWF0ZSA6IHBuYS5uZXh0VGljaztcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5Xcml0YWJsZS5Xcml0YWJsZVN0YXRlID0gV3JpdGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGludGVybmFsVXRpbCA9IHtcbiAgZGVwcmVjYXRlOiByZXF1aXJlKCd1dGlsLWRlcHJlY2F0ZScpXG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG5cbnV0aWwuaW5oZXJpdHMoV3JpdGFibGUsIFN0cmVhbSk7XG5cbmZ1bmN0aW9uIG5vcCgpIHt9XG5cbmZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0uXG4gIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLlxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgb3Igbm90IHRoaXMgc3RyZWFtXG4gIC8vIGNvbnRhaW5zIGJ1ZmZlcnMgb3Igb2JqZWN0cy5cbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggd3JpdGUoKSBzdGFydHMgcmV0dXJuaW5nIGZhbHNlXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmXG4gIC8vIHRoZSBlbnRpcmUgYnVmZmVyIGlzIG5vdCBmbHVzaGVkIGltbWVkaWF0ZWx5IG9uIHdyaXRlKClcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHdyaXRhYmxlSHdtID0gb3B0aW9ucy53cml0YWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAod3JpdGFibGVId20gfHwgd3JpdGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSB3cml0YWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gaWYgX2ZpbmFsIGhhcyBiZWVuIGNhbGxlZFxuICB0aGlzLmZpbmFsQ2FsbGVkID0gZmFsc2U7XG5cbiAgLy8gZHJhaW4gZXZlbnQgZmxhZy5cbiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgLy8gYXQgdGhlIHN0YXJ0IG9mIGNhbGxpbmcgZW5kKClcbiAgdGhpcy5lbmRpbmcgPSBmYWxzZTtcbiAgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZFxuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xuICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLlxuICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gbm90IGFuIGFjdHVhbCBidWZmZXIgd2Uga2VlcCB0cmFjayBvZiwgYnV0IGEgbWVhc3VyZW1lbnRcbiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuICAvLyBzb2NrZXQgb3IgZmlsZS5cbiAgdGhpcy5sZW5ndGggPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXG4gIHRoaXMud3JpdGluZyA9IGZhbHNlO1xuXG4gIC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGxcbiAgdGhpcy5jb3JrZWQgPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcbiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG4gIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcbiAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24gKGVyKSB7XG4gICAgb253cml0ZShzdHJlYW0sIGVyKTtcbiAgfTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcbiAgdGhpcy53cml0ZWNiID0gbnVsbDtcblxuICAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG4gIHRoaXMud3JpdGVsZW4gPSAwO1xuXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcblxuICAvLyBudW1iZXIgb2YgcGVuZGluZyB1c2VyLXN1cHBsaWVkIHdyaXRlIGNhbGxiYWNrc1xuICAvLyB0aGlzIG11c3QgYmUgMCBiZWZvcmUgJ2ZpbmlzaCcgY2FuIGJlIGVtaXR0ZWRcbiAgdGhpcy5wZW5kaW5nY2IgPSAwO1xuXG4gIC8vIGVtaXQgcHJlZmluaXNoIGlmIHRoZSBvbmx5IHRoaW5nIHdlJ3JlIHdhaXRpbmcgZm9yIGlzIF93cml0ZSBjYnNcbiAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXNcbiAgdGhpcy5wcmVmaW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluXG4gIHRoaXMuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG5cbiAgLy8gY291bnQgYnVmZmVyZWQgcmVxdWVzdHNcbiAgdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG5cbiAgLy8gYWxsb2NhdGUgdGhlIGZpcnN0IENvcmtlZFJlcXVlc3QsIHRoZXJlIGlzIGFsd2F5c1xuICAvLyBvbmUgYWxsb2NhdGVkIGFuZCBmcmVlIHRvIHVzZSwgYW5kIHdlIG1haW50YWluIGF0IG1vc3QgdHdvXG4gIHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3QodGhpcyk7XG59XG5cbldyaXRhYmxlU3RhdGUucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uIGdldEJ1ZmZlcigpIHtcbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmJ1ZmZlcmVkUmVxdWVzdDtcbiAgdmFyIG91dCA9IFtdO1xuICB3aGlsZSAoY3VycmVudCkge1xuICAgIG91dC5wdXNoKGN1cnJlbnQpO1xuICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbihmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RhdGUucHJvdG90eXBlLCAnYnVmZmVyJywge1xuICAgICAgZ2V0OiBpbnRlcm5hbFV0aWwuZGVwcmVjYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCk7XG4gICAgICB9LCAnX3dyaXRhYmxlU3RhdGUuYnVmZmVyIGlzIGRlcHJlY2F0ZWQuIFVzZSBfd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIgJyArICdpbnN0ZWFkLicsICdERVAwMDAzJylcbiAgICB9KTtcbiAgfSBjYXRjaCAoXykge31cbn0pKCk7XG5cbi8vIFRlc3QgX3dyaXRhYmxlU3RhdGUgZm9yIGluaGVyaXRhbmNlIHRvIGFjY291bnQgZm9yIER1cGxleCBzdHJlYW1zLFxuLy8gd2hvc2UgcHJvdG90eXBlIGNoYWluIG9ubHkgcG9pbnRzIHRvIFJlYWRhYmxlLlxudmFyIHJlYWxIYXNJbnN0YW5jZTtcbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5oYXNJbnN0YW5jZSAmJiB0eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZSwgU3ltYm9sLmhhc0luc3RhbmNlLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIGlmIChyZWFsSGFzSW5zdGFuY2UuY2FsbCh0aGlzLCBvYmplY3QpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICh0aGlzICE9PSBXcml0YWJsZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICByZXR1cm4gb2JqZWN0ICYmIG9iamVjdC5fd3JpdGFibGVTdGF0ZSBpbnN0YW5jZW9mIFdyaXRhYmxlU3RhdGU7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgdGhpcztcbiAgfTtcbn1cblxuZnVuY3Rpb24gV3JpdGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIC8vIFdyaXRhYmxlIGN0b3IgaXMgYXBwbGllZCB0byBEdXBsZXhlcywgdG9vLlxuICAvLyBgcmVhbEhhc0luc3RhbmNlYCBpcyBuZWNlc3NhcnkgYmVjYXVzZSB1c2luZyBwbGFpbiBgaW5zdGFuY2VvZmBcbiAgLy8gd291bGQgcmV0dXJuIGZhbHNlLCBhcyBubyBgX3dyaXRhYmxlU3RhdGVgIHByb3BlcnR5IGlzIGF0dGFjaGVkLlxuXG4gIC8vIFRyeWluZyB0byB1c2UgdGhlIGN1c3RvbSBgaW5zdGFuY2VvZmAgZm9yIFdyaXRhYmxlIGhlcmUgd2lsbCBhbHNvIGJyZWFrIHRoZVxuICAvLyBOb2RlLmpzIExhenlUcmFuc2Zvcm0gaW1wbGVtZW50YXRpb24sIHdoaWNoIGhhcyBhIG5vbi10cml2aWFsIGdldHRlciBmb3JcbiAgLy8gYF93cml0YWJsZVN0YXRlYCB0aGF0IHdvdWxkIGxlYWQgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICBpZiAoIXJlYWxIYXNJbnN0YW5jZS5jYWxsKFdyaXRhYmxlLCB0aGlzKSAmJiAhKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSB7XG4gICAgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcbiAgfVxuXG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUgPSBuZXcgV3JpdGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3kuXG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRlID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZSA9IG9wdGlvbnMud3JpdGU7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGV2ID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZXYgPSBvcHRpb25zLndyaXRldjtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbmFsID09PSAnZnVuY3Rpb24nKSB0aGlzLl9maW5hbCA9IG9wdGlvbnMuZmluYWw7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0Nhbm5vdCBwaXBlLCBub3QgcmVhZGFibGUnKSk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHtcbiAgdmFyIGVyID0gbmV3IEVycm9yKCd3cml0ZSBhZnRlciBlbmQnKTtcbiAgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2JcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbn1cblxuLy8gQ2hlY2tzIHRoYXQgYSB1c2VyLXN1cHBsaWVkIGNodW5rIGlzIHZhbGlkLCBlc3BlY2lhbGx5IGZvciB0aGUgcGFydGljdWxhclxuLy8gbW9kZSB0aGUgc3RyZWFtIGlzIGluLiBDdXJyZW50bHkgdGhpcyBtZWFucyB0aGF0IGBudWxsYCBpcyBuZXZlciBhY2NlcHRlZFxuLy8gYW5kIHVuZGVmaW5lZC9ub24tc3RyaW5nIHZhbHVlcyBhcmUgb25seSBhbGxvd2VkIGluIG9iamVjdCBtb2RlLlxuZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHtcbiAgdmFyIHZhbGlkID0gdHJ1ZTtcbiAgdmFyIGVyID0gZmFsc2U7XG5cbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbScpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIGlmIChlcikge1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbiAgICB2YWxpZCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB2YWxpZDtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJldCA9IGZhbHNlO1xuICB2YXIgaXNCdWYgPSAhc3RhdGUub2JqZWN0TW9kZSAmJiBfaXNVaW50OEFycmF5KGNodW5rKTtcblxuICBpZiAoaXNCdWYgJiYgIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIHtcbiAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGlzQnVmKSBlbmNvZGluZyA9ICdidWZmZXInO2Vsc2UgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7XG5cbiAgaWYgKHN0YXRlLmVuZGVkKSB3cml0ZUFmdGVyRW5kKHRoaXMsIGNiKTtlbHNlIGlmIChpc0J1ZiB8fCB2YWxpZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgY2IpKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgcmV0ID0gd3JpdGVPckJ1ZmZlcih0aGlzLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIHN0YXRlLmNvcmtlZCsrO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkLS07XG5cbiAgICBpZiAoIXN0YXRlLndyaXRpbmcgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZSk7XG4gIH1cbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgLy8gbm9kZTo6UGFyc2VFbmNvZGluZygpIHJlcXVpcmVzIGxvd2VyIGNhc2UuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSBlbmNvZGluZyA9IGVuY29kaW5nLnRvTG93ZXJDYXNlKCk7XG4gIGlmICghKFsnaGV4JywgJ3V0ZjgnLCAndXRmLTgnLCAnYXNjaWknLCAnYmluYXJ5JywgJ2Jhc2U2NCcsICd1Y3MyJywgJ3Vjcy0yJywgJ3V0ZjE2bGUnLCAndXRmLTE2bGUnLCAncmF3J10uaW5kZXhPZigoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkgPiAtMSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZykge1xuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuICByZXR1cm4gY2h1bms7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyBpZiB3ZSdyZSBhbHJlYWR5IHdyaXRpbmcgc29tZXRoaW5nLCB0aGVuIGp1c3QgcHV0IHRoaXNcbi8vIGluIHRoZSBxdWV1ZSwgYW5kIHdhaXQgb3VyIHR1cm4uICBPdGhlcndpc2UsIGNhbGwgX3dyaXRlXG4vLyBJZiB3ZSByZXR1cm4gZmFsc2UsIHRoZW4gd2UgbmVlZCBhIGRyYWluIGV2ZW50LCBzbyBzZXQgdGhhdCBmbGFnLlxuZnVuY3Rpb24gd3JpdGVPckJ1ZmZlcihzdHJlYW0sIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBpZiAoIWlzQnVmKSB7XG4gICAgdmFyIG5ld0NodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZyk7XG4gICAgaWYgKGNodW5rICE9PSBuZXdDaHVuaykge1xuICAgICAgaXNCdWYgPSB0cnVlO1xuICAgICAgZW5jb2RpbmcgPSAnYnVmZmVyJztcbiAgICAgIGNodW5rID0gbmV3Q2h1bms7XG4gICAgfVxuICB9XG4gIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICBzdGF0ZS5sZW5ndGggKz0gbGVuO1xuXG4gIHZhciByZXQgPSBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICAvLyB3ZSBtdXN0IGVuc3VyZSB0aGF0IHByZXZpb3VzIG5lZWREcmFpbiB3aWxsIG5vdCBiZSByZXNldCB0byBmYWxzZS5cbiAgaWYgKCFyZXQpIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7XG5cbiAgaWYgKHN0YXRlLndyaXRpbmcgfHwgc3RhdGUuY29ya2VkKSB7XG4gICAgdmFyIGxhc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSB7XG4gICAgICBjaHVuazogY2h1bmssXG4gICAgICBlbmNvZGluZzogZW5jb2RpbmcsXG4gICAgICBpc0J1ZjogaXNCdWYsXG4gICAgICBjYWxsYmFjazogY2IsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcbiAgICBpZiAobGFzdCkge1xuICAgICAgbGFzdC5uZXh0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgKz0gMTtcbiAgfSBlbHNlIHtcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB3cml0ZXYsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBzdGF0ZS53cml0ZWxlbiA9IGxlbjtcbiAgc3RhdGUud3JpdGVjYiA9IGNiO1xuICBzdGF0ZS53cml0aW5nID0gdHJ1ZTtcbiAgc3RhdGUuc3luYyA9IHRydWU7XG4gIGlmICh3cml0ZXYpIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZS5vbndyaXRlKTtlbHNlIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTtcbiAgc3RhdGUuc3luYyA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKSB7XG4gIC0tc3RhdGUucGVuZGluZ2NiO1xuXG4gIGlmIChzeW5jKSB7XG4gICAgLy8gZGVmZXIgdGhlIGNhbGxiYWNrIGlmIHdlIGFyZSBiZWluZyBjYWxsZWQgc3luY2hyb25vdXNseVxuICAgIC8vIHRvIGF2b2lkIHBpbGluZyB1cCB0aGluZ3Mgb24gdGhlIHN0YWNrXG4gICAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGFuZCBpdCB3aWxsIGFsd2F5cyBoYXBwZW5cbiAgICAvLyBhZnRlciBlcnJvclxuICAgIHBuYS5uZXh0VGljayhmaW5pc2hNYXliZSwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjYWxsZXIgZXhwZWN0IHRoaXMgdG8gaGFwcGVuIGJlZm9yZSBpZlxuICAgIC8vIGl0IGlzIGFzeW5jXG4gICAgY2IoZXIpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYnV0IGZpbmlzaCBtdXN0XG4gICAgLy8gYWx3YXlzIGZvbGxvdyBlcnJvclxuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSkge1xuICBzdGF0ZS53cml0aW5nID0gZmFsc2U7XG4gIHN0YXRlLndyaXRlY2IgPSBudWxsO1xuICBzdGF0ZS5sZW5ndGggLT0gc3RhdGUud3JpdGVsZW47XG4gIHN0YXRlLndyaXRlbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gb253cml0ZShzdHJlYW0sIGVyKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHN5bmMgPSBzdGF0ZS5zeW5jO1xuICB2YXIgY2IgPSBzdGF0ZS53cml0ZWNiO1xuXG4gIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSk7XG5cbiAgaWYgKGVyKSBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKTtlbHNlIHtcbiAgICAvLyBDaGVjayBpZiB3ZSdyZSBhY3R1YWxseSByZWFkeSB0byBmaW5pc2gsIGJ1dCBkb24ndCBlbWl0IHlldFxuICAgIHZhciBmaW5pc2hlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuXG4gICAgaWYgKCFmaW5pc2hlZCAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkge1xuICAgICAgY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHN5bmMpIHtcbiAgICAgIC8qPHJlcGxhY2VtZW50PiovXG4gICAgICBhc3luY1dyaXRlKGFmdGVyV3JpdGUsIHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgICAvKjwvcmVwbGFjZW1lbnQ+Ki9cbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYikge1xuICBpZiAoIWZpbmlzaGVkKSBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSk7XG4gIHN0YXRlLnBlbmRpbmdjYi0tO1xuICBjYigpO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuLy8gTXVzdCBmb3JjZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgb24gbmV4dFRpY2ssIHNvIHRoYXQgd2UgZG9uJ3Rcbi8vIGVtaXQgJ2RyYWluJyBiZWZvcmUgdGhlIHdyaXRlKCkgY29uc3VtZXIgZ2V0cyB0aGUgJ2ZhbHNlJyByZXR1cm5cbi8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuXG5mdW5jdGlvbiBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLm5lZWREcmFpbikge1xuICAgIHN0YXRlLm5lZWREcmFpbiA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdkcmFpbicpO1xuICB9XG59XG5cbi8vIGlmIHRoZXJlJ3Mgc29tZXRoaW5nIGluIHRoZSBidWZmZXIgd2FpdGluZywgdGhlbiBwcm9jZXNzIGl0XG5mdW5jdGlvbiBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKSB7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSB0cnVlO1xuICB2YXIgZW50cnkgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3Q7XG5cbiAgaWYgKHN0cmVhbS5fd3JpdGV2ICYmIGVudHJ5ICYmIGVudHJ5Lm5leHQpIHtcbiAgICAvLyBGYXN0IGNhc2UsIHdyaXRlIGV2ZXJ5dGhpbmcgdXNpbmcgX3dyaXRldigpXG4gICAgdmFyIGwgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudDtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KGwpO1xuICAgIHZhciBob2xkZXIgPSBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWU7XG4gICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7XG5cbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHZhciBhbGxCdWZmZXJzID0gdHJ1ZTtcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIGJ1ZmZlcltjb3VudF0gPSBlbnRyeTtcbiAgICAgIGlmICghZW50cnkuaXNCdWYpIGFsbEJ1ZmZlcnMgPSBmYWxzZTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfVxuICAgIGJ1ZmZlci5hbGxCdWZmZXJzID0gYWxsQnVmZmVycztcblxuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBidWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTtcblxuICAgIC8vIGRvV3JpdGUgaXMgYWxtb3N0IGFsd2F5cyBhc3luYywgZGVmZXIgdGhlc2UgdG8gc2F2ZSBhIGJpdCBvZiB0aW1lXG4gICAgLy8gYXMgdGhlIGhvdCBwYXRoIGVuZHMgd2l0aCBkb1dyaXRlXG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gICAgaWYgKGhvbGRlci5uZXh0KSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBob2xkZXIubmV4dDtcbiAgICAgIGhvbGRlci5uZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3Qoc3RhdGUpO1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gU2xvdyBjYXNlLCB3cml0ZSBjaHVua3Mgb25lLWJ5LW9uZVxuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgdmFyIGNodW5rID0gZW50cnkuY2h1bms7XG4gICAgICB2YXIgZW5jb2RpbmcgPSBlbnRyeS5lbmNvZGluZztcbiAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgICAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQtLTtcbiAgICAgIC8vIGlmIHdlIGRpZG4ndCBjYWxsIHRoZSBvbndyaXRlIGltbWVkaWF0ZWx5LCB0aGVuXG4gICAgICAvLyBpdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gd2FpdCB1bnRpbCBpdCBkb2VzLlxuICAgICAgLy8gYWxzbywgdGhhdCBtZWFucyB0aGF0IHRoZSBjaHVuayBhbmQgY2IgYXJlIGN1cnJlbnRseVxuICAgICAgLy8gYmVpbmcgcHJvY2Vzc2VkLCBzbyBtb3ZlIHRoZSBidWZmZXIgY291bnRlciBwYXN0IHRoZW0uXG4gICAgICBpZiAoc3RhdGUud3JpdGluZykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZW50cnkgPT09IG51bGwpIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB9XG5cbiAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gZW50cnk7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG5ldyBFcnJvcignX3dyaXRlKCkgaXMgbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBjaHVuaztcbiAgICBjaHVuayA9IG51bGw7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQpIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTtcblxuICAvLyAuZW5kKCkgZnVsbHkgdW5jb3Jrc1xuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkID0gMTtcbiAgICB0aGlzLnVuY29yaygpO1xuICB9XG5cbiAgLy8gaWdub3JlIHVubmVjZXNzYXJ5IGVuZCgpIGNhbGxzLlxuICBpZiAoIXN0YXRlLmVuZGluZyAmJiAhc3RhdGUuZmluaXNoZWQpIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlLCBjYik7XG59O1xuXG5mdW5jdGlvbiBuZWVkRmluaXNoKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5lbmRpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9PT0gbnVsbCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLndyaXRpbmc7XG59XG5mdW5jdGlvbiBjYWxsRmluYWwoc3RyZWFtLCBzdGF0ZSkge1xuICBzdHJlYW0uX2ZpbmFsKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIH1cbiAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucHJlZmluaXNoZWQgJiYgIXN0YXRlLmZpbmFsQ2FsbGVkKSB7XG4gICAgaWYgKHR5cGVvZiBzdHJlYW0uX2ZpbmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICAgIHN0YXRlLmZpbmFsQ2FsbGVkID0gdHJ1ZTtcbiAgICAgIHBuYS5uZXh0VGljayhjYWxsRmluYWwsIHN0cmVhbSwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcbiAgaWYgKG5lZWQpIHtcbiAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7XG4gICAgaWYgKHN0YXRlLnBlbmRpbmdjYiA9PT0gMCkge1xuICAgICAgc3RhdGUuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmVlZDtcbn1cblxuZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIGlmIChjYikge1xuICAgIGlmIChzdGF0ZS5maW5pc2hlZCkgcG5hLm5leHRUaWNrKGNiKTtlbHNlIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICBzdHJlYW0ud3JpdGFibGUgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb25Db3JrZWRGaW5pc2goY29ya1JlcSwgc3RhdGUsIGVycikge1xuICB2YXIgZW50cnkgPSBjb3JrUmVxLmVudHJ5O1xuICBjb3JrUmVxLmVudHJ5ID0gbnVsbDtcbiAgd2hpbGUgKGVudHJ5KSB7XG4gICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgY2IoZXJyKTtcbiAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gIH1cbiAgaWYgKHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSkge1xuICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0ID0gY29ya1JlcTtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBjb3JrUmVxO1xuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5lbmQoKTtcbiAgY2IoZXJyKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuZnVuY3Rpb24gY29weUJ1ZmZlcihzcmMsIHRhcmdldCwgb2Zmc2V0KSB7XG4gIHNyYy5jb3B5KHRhcmdldCwgb2Zmc2V0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJ1ZmZlckxpc3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1ZmZlckxpc3QpO1xuXG4gICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoKHYpIHtcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IG51bGwgfTtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB0aGlzLnRhaWwubmV4dCA9IGVudHJ5O2Vsc2UgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgdGhpcy50YWlsID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gdW5zaGlmdCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiB0aGlzLmhlYWQgfTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbiBzaGlmdCgpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB2YXIgcmV0ID0gdGhpcy5oZWFkLmRhdGE7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO2Vsc2UgdGhpcy5oZWFkID0gdGhpcy5oZWFkLm5leHQ7XG4gICAgLS10aGlzLmxlbmd0aDtcbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIGpvaW4ocykge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgIHZhciByZXQgPSAnJyArIHAuZGF0YTtcbiAgICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgICAgcmV0ICs9IHMgKyBwLmRhdGE7XG4gICAgfXJldHVybiByZXQ7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0KG4pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSByZXR1cm4gdGhpcy5oZWFkLmRhdGE7XG4gICAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuID4+PiAwKTtcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKHApIHtcbiAgICAgIGNvcHlCdWZmZXIocC5kYXRhLCByZXQsIGkpO1xuICAgICAgaSArPSBwLmRhdGEubGVuZ3RoO1xuICAgICAgcCA9IHAubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICByZXR1cm4gQnVmZmVyTGlzdDtcbn0oKTtcblxuaWYgKHV0aWwgJiYgdXRpbC5pbnNwZWN0ICYmIHV0aWwuaW5zcGVjdC5jdXN0b20pIHtcbiAgbW9kdWxlLmV4cG9ydHMucHJvdG90eXBlW3V0aWwuaW5zcGVjdC5jdXN0b21dID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYmogPSB1dGlsLmluc3BlY3QoeyBsZW5ndGg6IHRoaXMubGVuZ3RoIH0pO1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAnICcgKyBvYmo7XG4gIH07XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vLyB1bmRvY3VtZW50ZWQgY2IoKSBBUEksIG5lZWRlZCBmb3IgY29yZSwgbm90IGZvciBwdWJsaWMgQVBJXG5mdW5jdGlvbiBkZXN0cm95KGVyciwgY2IpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgcmVhZGFibGVEZXN0cm95ZWQgPSB0aGlzLl9yZWFkYWJsZVN0YXRlICYmIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB2YXIgd3JpdGFibGVEZXN0cm95ZWQgPSB0aGlzLl93cml0YWJsZVN0YXRlICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuXG4gIGlmIChyZWFkYWJsZURlc3Ryb3llZCB8fCB3cml0YWJsZURlc3Ryb3llZCkge1xuICAgIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9IGVsc2UgaWYgKGVyciAmJiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUgfHwgIXRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSkge1xuICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHdlIHNldCBkZXN0cm95ZWQgdG8gdHJ1ZSBiZWZvcmUgZmlyaW5nIGVycm9yIGNhbGxiYWNrcyBpbiBvcmRlclxuICAvLyB0byBtYWtlIGl0IHJlLWVudHJhbmNlIHNhZmUgaW4gY2FzZSBkZXN0cm95KCkgaXMgY2FsbGVkIHdpdGhpbiBjYWxsYmFja3NcblxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGlmIHRoaXMgaXMgYSBkdXBsZXggc3RyZWFtIG1hcmsgdGhlIHdyaXRhYmxlIHBhcnQgYXMgZGVzdHJveWVkIGFzIHdlbGxcbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICB0aGlzLl9kZXN0cm95KGVyciB8fCBudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKCFjYiAmJiBlcnIpIHtcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgX3RoaXMsIGVycik7XG4gICAgICBpZiAoX3RoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgICAgX3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHVuZGVzdHJveSgpIHtcbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0RXJyb3JOVChzZWxmLCBlcnIpIHtcbiAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZXN0cm95OiBkZXN0cm95LFxuICB1bmRlc3Ryb3k6IHVuZGVzdHJveVxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcmVhZGFibGUuanMnKTtcbmV4cG9ydHMuU3RyZWFtID0gZXhwb3J0cztcbmV4cG9ydHMuUmVhZGFibGUgPSBleHBvcnRzO1xuZXhwb3J0cy5Xcml0YWJsZSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbmV4cG9ydHMuRHVwbGV4ID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbmV4cG9ydHMuVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMnKTtcbmV4cG9ydHMuUGFzc1Rocm91Z2ggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzJyk7XG4iLCJjb25zdCB1dGlsICAgICAgPSByZXF1aXJlKCcuL3V0aWwnKTtcbmNvbnN0IHR5cGVzICAgICA9IHJlcXVpcmUoJy4vdHlwZXMnKTtcbmNvbnN0IHNldHMgICAgICA9IHJlcXVpcmUoJy4vc2V0cycpO1xuY29uc3QgcG9zaXRpb25zID0gcmVxdWlyZSgnLi9wb3NpdGlvbnMnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IChyZWdleHBTdHIpID0+IHtcbiAgdmFyIGkgPSAwLCBsLCBjLFxuICAgIHN0YXJ0ID0geyB0eXBlOiB0eXBlcy5ST09ULCBzdGFjazogW119LFxuXG4gICAgLy8gS2VlcCB0cmFjayBvZiBsYXN0IGNsYXVzZS9ncm91cCBhbmQgc3RhY2suXG4gICAgbGFzdEdyb3VwID0gc3RhcnQsXG4gICAgbGFzdCA9IHN0YXJ0LnN0YWNrLFxuICAgIGdyb3VwU3RhY2sgPSBbXTtcblxuXG4gIHZhciByZXBlYXRFcnIgPSAoaSkgPT4ge1xuICAgIHV0aWwuZXJyb3IocmVnZXhwU3RyLCBgTm90aGluZyB0byByZXBlYXQgYXQgY29sdW1uICR7aSAtIDF9YCk7XG4gIH07XG5cbiAgLy8gRGVjb2RlIGEgZmV3IGVzY2FwZWQgY2hhcmFjdGVycy5cbiAgdmFyIHN0ciA9IHV0aWwuc3RyVG9DaGFycyhyZWdleHBTdHIpO1xuICBsID0gc3RyLmxlbmd0aDtcblxuICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBjaGFyYWN0ZXIgaW4gc3RyaW5nLlxuICB3aGlsZSAoaSA8IGwpIHtcbiAgICBjID0gc3RyW2krK107XG5cbiAgICBzd2l0Y2ggKGMpIHtcbiAgICAgIC8vIEhhbmRsZSBlc2NhcGVkIGNoYXJhY3RlcnMsIGluY2x1ZXMgYSBmZXcgc2V0cy5cbiAgICAgIGNhc2UgJ1xcXFwnOlxuICAgICAgICBjID0gc3RyW2krK107XG5cbiAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgY2FzZSAnYic6XG4gICAgICAgICAgICBsYXN0LnB1c2gocG9zaXRpb25zLndvcmRCb3VuZGFyeSgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnQic6XG4gICAgICAgICAgICBsYXN0LnB1c2gocG9zaXRpb25zLm5vbldvcmRCb3VuZGFyeSgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICBsYXN0LnB1c2goc2V0cy53b3JkcygpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICBsYXN0LnB1c2goc2V0cy5ub3RXb3JkcygpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICBsYXN0LnB1c2goc2V0cy5pbnRzKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgIGxhc3QucHVzaChzZXRzLm5vdEludHMoKSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgbGFzdC5wdXNoKHNldHMud2hpdGVzcGFjZSgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnUyc6XG4gICAgICAgICAgICBsYXN0LnB1c2goc2V0cy5ub3RXaGl0ZXNwYWNlKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgYyBpcyBpbnRlZ2VyLlxuICAgICAgICAgICAgLy8gSW4gd2hpY2ggY2FzZSBpdCdzIGEgcmVmZXJlbmNlLlxuICAgICAgICAgICAgaWYgKC9cXGQvLnRlc3QoYykpIHtcbiAgICAgICAgICAgICAgbGFzdC5wdXNoKHsgdHlwZTogdHlwZXMuUkVGRVJFTkNFLCB2YWx1ZTogcGFyc2VJbnQoYywgMTApIH0pO1xuXG4gICAgICAgICAgICAvLyBFc2NhcGVkIGNoYXJhY3Rlci5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGxhc3QucHVzaCh7IHR5cGU6IHR5cGVzLkNIQVIsIHZhbHVlOiBjLmNoYXJDb2RlQXQoMCkgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuXG4gICAgICAvLyBQb3NpdGlvbmFscy5cbiAgICAgIGNhc2UgJ14nOlxuICAgICAgICBsYXN0LnB1c2gocG9zaXRpb25zLmJlZ2luKCkpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnJCc6XG4gICAgICAgIGxhc3QucHVzaChwb3NpdGlvbnMuZW5kKCkpO1xuICAgICAgICBicmVhaztcblxuXG4gICAgICAvLyBIYW5kbGUgY3VzdG9tIHNldHMuXG4gICAgICBjYXNlICdbJzpcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBjbGFzcyBpcyAnYW50aScgaS5lLiBbXmFiY10uXG4gICAgICAgIHZhciBub3Q7XG4gICAgICAgIGlmIChzdHJbaV0gPT09ICdeJykge1xuICAgICAgICAgIG5vdCA9IHRydWU7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vdCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IGFsbCB0aGUgY2hhcmFjdGVycyBpbiBjbGFzcy5cbiAgICAgICAgdmFyIGNsYXNzVG9rZW5zID0gdXRpbC50b2tlbml6ZUNsYXNzKHN0ci5zbGljZShpKSwgcmVnZXhwU3RyKTtcblxuICAgICAgICAvLyBJbmNyZWFzZSBpbmRleCBieSBsZW5ndGggb2YgY2xhc3MuXG4gICAgICAgIGkgKz0gY2xhc3NUb2tlbnNbMV07XG4gICAgICAgIGxhc3QucHVzaCh7XG4gICAgICAgICAgdHlwZTogdHlwZXMuU0VULFxuICAgICAgICAgIHNldDogY2xhc3NUb2tlbnNbMF0sXG4gICAgICAgICAgbm90LFxuICAgICAgICB9KTtcblxuICAgICAgICBicmVhaztcblxuXG4gICAgICAvLyBDbGFzcyBvZiBhbnkgY2hhcmFjdGVyIGV4Y2VwdCBcXG4uXG4gICAgICBjYXNlICcuJzpcbiAgICAgICAgbGFzdC5wdXNoKHNldHMuYW55Q2hhcigpKTtcbiAgICAgICAgYnJlYWs7XG5cblxuICAgICAgLy8gUHVzaCBncm91cCBvbnRvIHN0YWNrLlxuICAgICAgY2FzZSAnKCc6XG4gICAgICAgIC8vIENyZWF0ZSBncm91cC5cbiAgICAgICAgdmFyIGdyb3VwID0ge1xuICAgICAgICAgIHR5cGU6IHR5cGVzLkdST1VQLFxuICAgICAgICAgIHN0YWNrOiBbXSxcbiAgICAgICAgICByZW1lbWJlcjogdHJ1ZSxcbiAgICAgICAgfTtcblxuICAgICAgICBjID0gc3RyW2ldO1xuXG4gICAgICAgIC8vIElmIGlmIHRoaXMgaXMgYSBzcGVjaWFsIGtpbmQgb2YgZ3JvdXAuXG4gICAgICAgIGlmIChjID09PSAnPycpIHtcbiAgICAgICAgICBjID0gc3RyW2kgKyAxXTtcbiAgICAgICAgICBpICs9IDI7XG5cbiAgICAgICAgICAvLyBNYXRjaCBpZiBmb2xsb3dlZCBieS5cbiAgICAgICAgICBpZiAoYyA9PT0gJz0nKSB7XG4gICAgICAgICAgICBncm91cC5mb2xsb3dlZEJ5ID0gdHJ1ZTtcblxuICAgICAgICAgIC8vIE1hdGNoIGlmIG5vdCBmb2xsb3dlZCBieS5cbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09ICchJykge1xuICAgICAgICAgICAgZ3JvdXAubm90Rm9sbG93ZWRCeSA9IHRydWU7XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGMgIT09ICc6Jykge1xuICAgICAgICAgICAgdXRpbC5lcnJvcihyZWdleHBTdHIsXG4gICAgICAgICAgICAgIGBJbnZhbGlkIGdyb3VwLCBjaGFyYWN0ZXIgJyR7Y30nYCArXG4gICAgICAgICAgICAgIGAgYWZ0ZXIgJz8nIGF0IGNvbHVtbiAke2kgLSAxfWApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGdyb3VwLnJlbWVtYmVyID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbnNlcnQgc3ViZ3JvdXAgaW50byBjdXJyZW50IGdyb3VwIHN0YWNrLlxuICAgICAgICBsYXN0LnB1c2goZ3JvdXApO1xuXG4gICAgICAgIC8vIFJlbWVtYmVyIHRoZSBjdXJyZW50IGdyb3VwIGZvciB3aGVuIHRoZSBncm91cCBjbG9zZXMuXG4gICAgICAgIGdyb3VwU3RhY2sucHVzaChsYXN0R3JvdXApO1xuXG4gICAgICAgIC8vIE1ha2UgdGhpcyBuZXcgZ3JvdXAgdGhlIGN1cnJlbnQgZ3JvdXAuXG4gICAgICAgIGxhc3RHcm91cCA9IGdyb3VwO1xuICAgICAgICBsYXN0ID0gZ3JvdXAuc3RhY2s7XG4gICAgICAgIGJyZWFrO1xuXG5cbiAgICAgIC8vIFBvcCBncm91cCBvdXQgb2Ygc3RhY2suXG4gICAgICBjYXNlICcpJzpcbiAgICAgICAgaWYgKGdyb3VwU3RhY2subGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdXRpbC5lcnJvcihyZWdleHBTdHIsIGBVbm1hdGNoZWQgKSBhdCBjb2x1bW4gJHtpIC0gMX1gKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0R3JvdXAgPSBncm91cFN0YWNrLnBvcCgpO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIHRoaXMgZ3JvdXAgaGFzIGEgUElQRS5cbiAgICAgICAgLy8gVG8gZ2V0IGJhY2sgdGhlIGNvcnJlY3QgbGFzdCBzdGFjay5cbiAgICAgICAgbGFzdCA9IGxhc3RHcm91cC5vcHRpb25zID9cbiAgICAgICAgICBsYXN0R3JvdXAub3B0aW9uc1tsYXN0R3JvdXAub3B0aW9ucy5sZW5ndGggLSAxXSA6IGxhc3RHcm91cC5zdGFjaztcbiAgICAgICAgYnJlYWs7XG5cblxuICAgICAgLy8gVXNlIHBpcGUgY2hhcmFjdGVyIHRvIGdpdmUgbW9yZSBjaG9pY2VzLlxuICAgICAgY2FzZSAnfCc6XG4gICAgICAgIC8vIENyZWF0ZSBhcnJheSB3aGVyZSBvcHRpb25zIGFyZSBpZiB0aGlzIGlzIHRoZSBmaXJzdCBQSVBFXG4gICAgICAgIC8vIGluIHRoaXMgY2xhdXNlLlxuICAgICAgICBpZiAoIWxhc3RHcm91cC5vcHRpb25zKSB7XG4gICAgICAgICAgbGFzdEdyb3VwLm9wdGlvbnMgPSBbbGFzdEdyb3VwLnN0YWNrXTtcbiAgICAgICAgICBkZWxldGUgbGFzdEdyb3VwLnN0YWNrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IHN0YWNrIGFuZCBhZGQgdG8gb3B0aW9ucyBmb3IgcmVzdCBvZiBjbGF1c2UuXG4gICAgICAgIHZhciBzdGFjayA9IFtdO1xuICAgICAgICBsYXN0R3JvdXAub3B0aW9ucy5wdXNoKHN0YWNrKTtcbiAgICAgICAgbGFzdCA9IHN0YWNrO1xuICAgICAgICBicmVhaztcblxuXG4gICAgICAvLyBSZXBldGl0aW9uLlxuICAgICAgLy8gRm9yIGV2ZXJ5IHJlcGV0aXRpb24sIHJlbW92ZSBsYXN0IGVsZW1lbnQgZnJvbSBsYXN0IHN0YWNrXG4gICAgICAvLyB0aGVuIGluc2VydCBiYWNrIGEgUkFOR0Ugb2JqZWN0LlxuICAgICAgLy8gVGhpcyBkZXNpZ24gaXMgY2hvc2VuIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgbW9yZSB0aGFuXG4gICAgICAvLyBvbmUgcmVwZXRpdGlvbiBzeW1ib2xzIGluIGEgcmVnZXggaS5lLiBgYT8rezIsM31gLlxuICAgICAgY2FzZSAneyc6XG4gICAgICAgIHZhciBycyA9IC9eKFxcZCspKCwoXFxkKyk/KT9cXH0vLmV4ZWMoc3RyLnNsaWNlKGkpKSwgbWluLCBtYXg7XG4gICAgICAgIGlmIChycyAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChsYXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmVwZWF0RXJyKGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtaW4gPSBwYXJzZUludChyc1sxXSwgMTApO1xuICAgICAgICAgIG1heCA9IHJzWzJdID8gcnNbM10gPyBwYXJzZUludChyc1szXSwgMTApIDogSW5maW5pdHkgOiBtaW47XG4gICAgICAgICAgaSArPSByc1swXS5sZW5ndGg7XG5cbiAgICAgICAgICBsYXN0LnB1c2goe1xuICAgICAgICAgICAgdHlwZTogdHlwZXMuUkVQRVRJVElPTixcbiAgICAgICAgICAgIG1pbixcbiAgICAgICAgICAgIG1heCxcbiAgICAgICAgICAgIHZhbHVlOiBsYXN0LnBvcCgpLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3QucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiB0eXBlcy5DSEFSLFxuICAgICAgICAgICAgdmFsdWU6IDEyMyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnPyc6XG4gICAgICAgIGlmIChsYXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJlcGVhdEVycihpKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0LnB1c2goe1xuICAgICAgICAgIHR5cGU6IHR5cGVzLlJFUEVUSVRJT04sXG4gICAgICAgICAgbWluOiAwLFxuICAgICAgICAgIG1heDogMSxcbiAgICAgICAgICB2YWx1ZTogbGFzdC5wb3AoKSxcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICcrJzpcbiAgICAgICAgaWYgKGxhc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmVwZWF0RXJyKGkpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3QucHVzaCh7XG4gICAgICAgICAgdHlwZTogdHlwZXMuUkVQRVRJVElPTixcbiAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgbWF4OiBJbmZpbml0eSxcbiAgICAgICAgICB2YWx1ZTogbGFzdC5wb3AoKSxcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICcqJzpcbiAgICAgICAgaWYgKGxhc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmVwZWF0RXJyKGkpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3QucHVzaCh7XG4gICAgICAgICAgdHlwZTogdHlwZXMuUkVQRVRJVElPTixcbiAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgbWF4OiBJbmZpbml0eSxcbiAgICAgICAgICB2YWx1ZTogbGFzdC5wb3AoKSxcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuXG5cbiAgICAgIC8vIERlZmF1bHQgaXMgYSBjaGFyYWN0ZXIgdGhhdCBpcyBub3QgYFxcW10oKXt9PysqXiRgLlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbGFzdC5wdXNoKHtcbiAgICAgICAgICB0eXBlOiB0eXBlcy5DSEFSLFxuICAgICAgICAgIHZhbHVlOiBjLmNoYXJDb2RlQXQoMCksXG4gICAgICAgIH0pO1xuICAgIH1cblxuICB9XG5cbiAgLy8gQ2hlY2sgaWYgYW55IGdyb3VwcyBoYXZlIG5vdCBiZWVuIGNsb3NlZC5cbiAgaWYgKGdyb3VwU3RhY2subGVuZ3RoICE9PSAwKSB7XG4gICAgdXRpbC5lcnJvcihyZWdleHBTdHIsICdVbnRlcm1pbmF0ZWQgZ3JvdXAnKTtcbiAgfVxuXG4gIHJldHVybiBzdGFydDtcbn07XG5cbm1vZHVsZS5leHBvcnRzLnR5cGVzID0gdHlwZXM7XG4iLCJjb25zdCB0eXBlcyA9IHJlcXVpcmUoJy4vdHlwZXMnKTtcbmV4cG9ydHMud29yZEJvdW5kYXJ5ID0gKCkgPT4gKHsgdHlwZTogdHlwZXMuUE9TSVRJT04sIHZhbHVlOiAnYicgfSk7XG5leHBvcnRzLm5vbldvcmRCb3VuZGFyeSA9ICgpID0+ICh7IHR5cGU6IHR5cGVzLlBPU0lUSU9OLCB2YWx1ZTogJ0InIH0pO1xuZXhwb3J0cy5iZWdpbiA9ICgpID0+ICh7IHR5cGU6IHR5cGVzLlBPU0lUSU9OLCB2YWx1ZTogJ14nIH0pO1xuZXhwb3J0cy5lbmQgPSAoKSA9PiAoeyB0eXBlOiB0eXBlcy5QT1NJVElPTiwgdmFsdWU6ICckJyB9KTtcbiIsImNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi90eXBlcycpO1xuXG5jb25zdCBJTlRTID0gKCkgPT4gW3sgdHlwZTogdHlwZXMuUkFOR0UgLCBmcm9tOiA0OCwgdG86IDU3IH1dO1xuXG5jb25zdCBXT1JEUyA9ICgpID0+IHtcbiAgcmV0dXJuIFtcbiAgICB7IHR5cGU6IHR5cGVzLkNIQVIsIHZhbHVlOiA5NSB9LFxuICAgIHsgdHlwZTogdHlwZXMuUkFOR0UsIGZyb206IDk3LCB0bzogMTIyIH0sXG4gICAgeyB0eXBlOiB0eXBlcy5SQU5HRSwgZnJvbTogNjUsIHRvOiA5MCB9XG4gIF0uY29uY2F0KElOVFMoKSk7XG59O1xuXG5jb25zdCBXSElURVNQQUNFID0gKCkgPT4ge1xuICByZXR1cm4gW1xuICAgIHsgdHlwZTogdHlwZXMuQ0hBUiwgdmFsdWU6IDkgfSxcbiAgICB7IHR5cGU6IHR5cGVzLkNIQVIsIHZhbHVlOiAxMCB9LFxuICAgIHsgdHlwZTogdHlwZXMuQ0hBUiwgdmFsdWU6IDExIH0sXG4gICAgeyB0eXBlOiB0eXBlcy5DSEFSLCB2YWx1ZTogMTIgfSxcbiAgICB7IHR5cGU6IHR5cGVzLkNIQVIsIHZhbHVlOiAxMyB9LFxuICAgIHsgdHlwZTogdHlwZXMuQ0hBUiwgdmFsdWU6IDMyIH0sXG4gICAgeyB0eXBlOiB0eXBlcy5DSEFSLCB2YWx1ZTogMTYwIH0sXG4gICAgeyB0eXBlOiB0eXBlcy5DSEFSLCB2YWx1ZTogNTc2MCB9LFxuICAgIHsgdHlwZTogdHlwZXMuUkFOR0UsIGZyb206IDgxOTIsIHRvOiA4MjAyIH0sXG4gICAgeyB0eXBlOiB0eXBlcy5DSEFSLCB2YWx1ZTogODIzMiB9LFxuICAgIHsgdHlwZTogdHlwZXMuQ0hBUiwgdmFsdWU6IDgyMzMgfSxcbiAgICB7IHR5cGU6IHR5cGVzLkNIQVIsIHZhbHVlOiA4MjM5IH0sXG4gICAgeyB0eXBlOiB0eXBlcy5DSEFSLCB2YWx1ZTogODI4NyB9LFxuICAgIHsgdHlwZTogdHlwZXMuQ0hBUiwgdmFsdWU6IDEyMjg4IH0sXG4gICAgeyB0eXBlOiB0eXBlcy5DSEFSLCB2YWx1ZTogNjUyNzkgfVxuICBdO1xufTtcblxuY29uc3QgTk9UQU5ZQ0hBUiA9ICgpID0+IHtcbiAgcmV0dXJuIFtcbiAgICB7IHR5cGU6IHR5cGVzLkNIQVIsIHZhbHVlOiAxMCB9LFxuICAgIHsgdHlwZTogdHlwZXMuQ0hBUiwgdmFsdWU6IDEzIH0sXG4gICAgeyB0eXBlOiB0eXBlcy5DSEFSLCB2YWx1ZTogODIzMiB9LFxuICAgIHsgdHlwZTogdHlwZXMuQ0hBUiwgdmFsdWU6IDgyMzMgfSxcbiAgXTtcbn07XG5cbi8vIFByZWRlZmluZWQgY2xhc3Mgb2JqZWN0cy5cbmV4cG9ydHMud29yZHMgPSAoKSA9PiAoeyB0eXBlOiB0eXBlcy5TRVQsIHNldDogV09SRFMoKSwgbm90OiBmYWxzZSB9KTtcbmV4cG9ydHMubm90V29yZHMgPSAoKSA9PiAoeyB0eXBlOiB0eXBlcy5TRVQsIHNldDogV09SRFMoKSwgbm90OiB0cnVlIH0pO1xuZXhwb3J0cy5pbnRzID0gKCkgPT4gKHsgdHlwZTogdHlwZXMuU0VULCBzZXQ6IElOVFMoKSwgbm90OiBmYWxzZSB9KTtcbmV4cG9ydHMubm90SW50cyA9ICgpID0+ICh7IHR5cGU6IHR5cGVzLlNFVCwgc2V0OiBJTlRTKCksIG5vdDogdHJ1ZSB9KTtcbmV4cG9ydHMud2hpdGVzcGFjZSA9ICgpID0+ICh7IHR5cGU6IHR5cGVzLlNFVCwgc2V0OiBXSElURVNQQUNFKCksIG5vdDogZmFsc2UgfSk7XG5leHBvcnRzLm5vdFdoaXRlc3BhY2UgPSAoKSA9PiAoeyB0eXBlOiB0eXBlcy5TRVQsIHNldDogV0hJVEVTUEFDRSgpLCBub3Q6IHRydWUgfSk7XG5leHBvcnRzLmFueUNoYXIgPSAoKSA9PiAoeyB0eXBlOiB0eXBlcy5TRVQsIHNldDogTk9UQU5ZQ0hBUigpLCBub3Q6IHRydWUgfSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgUk9PVCAgICAgICA6IDAsXG4gIEdST1VQICAgICAgOiAxLFxuICBQT1NJVElPTiAgIDogMixcbiAgU0VUICAgICAgICA6IDMsXG4gIFJBTkdFICAgICAgOiA0LFxuICBSRVBFVElUSU9OIDogNSxcbiAgUkVGRVJFTkNFICA6IDYsXG4gIENIQVIgICAgICAgOiA3LFxufTtcbiIsImNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi90eXBlcycpO1xuY29uc3Qgc2V0cyAgPSByZXF1aXJlKCcuL3NldHMnKTtcblxuXG5jb25zdCBDVFJMID0gJ0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXFxcXV4gPyc7XG5jb25zdCBTTFNIID0geyAnMCc6IDAsICd0JzogOSwgJ24nOiAxMCwgJ3YnOiAxMSwgJ2YnOiAxMiwgJ3InOiAxMyB9O1xuXG4vKipcbiAqIEZpbmRzIGNoYXJhY3RlciByZXByZXNlbnRhdGlvbnMgaW4gc3RyIGFuZCBjb252ZXJ0IGFsbCB0b1xuICogdGhlaXIgcmVzcGVjdGl2ZSBjaGFyYWN0ZXJzXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5leHBvcnRzLnN0clRvQ2hhcnMgPSBmdW5jdGlvbihzdHIpIHtcbiAgLyoganNoaW50IG1heGxlbjogZmFsc2UgKi9cbiAgdmFyIGNoYXJzX3JlZ2V4ID0gLyhcXFtcXFxcYlxcXSl8KFxcXFwpP1xcXFwoPzp1KFtBLUYwLTldezR9KXx4KFtBLUYwLTldezJ9KXwoMD9bMC03XXsyfSl8YyhbQEEtWltcXFxcXFxdXj9dKXwoWzB0bnZmcl0pKS9nO1xuICBzdHIgPSBzdHIucmVwbGFjZShjaGFyc19yZWdleCwgZnVuY3Rpb24ocywgYiwgbGJzLCBhMTYsIGIxNiwgYzgsIGRjdHJsLCBlc2xzaCkge1xuICAgIGlmIChsYnMpIHtcbiAgICAgIHJldHVybiBzO1xuICAgIH1cblxuICAgIHZhciBjb2RlID0gYiA/IDggOlxuICAgICAgYTE2ICAgPyBwYXJzZUludChhMTYsIDE2KSA6XG4gICAgICBiMTYgICA/IHBhcnNlSW50KGIxNiwgMTYpIDpcbiAgICAgIGM4ICAgID8gcGFyc2VJbnQoYzgsICAgOCkgOlxuICAgICAgZGN0cmwgPyBDVFJMLmluZGV4T2YoZGN0cmwpIDpcbiAgICAgIFNMU0hbZXNsc2hdO1xuXG4gICAgdmFyIGMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuXG4gICAgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcmFjdGVycy5cbiAgICBpZiAoL1tbXFxde31eJC58PyorKCldLy50ZXN0KGMpKSB7XG4gICAgICBjID0gJ1xcXFwnICsgYztcbiAgICB9XG5cbiAgICByZXR1cm4gYztcbiAgfSk7XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLyoqXG4gKiB0dXJucyBjbGFzcyBpbnRvIHRva2Vuc1xuICogcmVhZHMgc3RyIHVudGlsIGl0IGVuY291bnRlcnMgYSBdIG5vdCBwcmVjZWVkZWQgYnkgYSBcXFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSByZWdleHBTdHJcbiAqIEByZXR1cm4ge0FycmF5LjxBcnJheS48T2JqZWN0PiwgTnVtYmVyPn1cbiAqL1xuZXhwb3J0cy50b2tlbml6ZUNsYXNzID0gKHN0ciwgcmVnZXhwU3RyKSA9PiB7XG4gIC8qIGpzaGludCBtYXhsZW46IGZhbHNlICovXG4gIHZhciB0b2tlbnMgPSBbXTtcbiAgdmFyIHJlZ2V4cCA9IC9cXFxcKD86KHcpfChkKXwocyl8KFcpfChEKXwoUykpfCgoPzooPzpcXFxcKSguKXwoW15cXF1cXFxcXSkpLSg/OlxcXFwpPyhbXlxcXV0pKXwoXFxdKXwoPzpcXFxcKT8oW15dKS9nO1xuICB2YXIgcnMsIGM7XG5cblxuICB3aGlsZSAoKHJzID0gcmVnZXhwLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIGlmIChyc1sxXSkge1xuICAgICAgdG9rZW5zLnB1c2goc2V0cy53b3JkcygpKTtcblxuICAgIH0gZWxzZSBpZiAocnNbMl0pIHtcbiAgICAgIHRva2Vucy5wdXNoKHNldHMuaW50cygpKTtcblxuICAgIH0gZWxzZSBpZiAocnNbM10pIHtcbiAgICAgIHRva2Vucy5wdXNoKHNldHMud2hpdGVzcGFjZSgpKTtcblxuICAgIH0gZWxzZSBpZiAocnNbNF0pIHtcbiAgICAgIHRva2Vucy5wdXNoKHNldHMubm90V29yZHMoKSk7XG5cbiAgICB9IGVsc2UgaWYgKHJzWzVdKSB7XG4gICAgICB0b2tlbnMucHVzaChzZXRzLm5vdEludHMoKSk7XG5cbiAgICB9IGVsc2UgaWYgKHJzWzZdKSB7XG4gICAgICB0b2tlbnMucHVzaChzZXRzLm5vdFdoaXRlc3BhY2UoKSk7XG5cbiAgICB9IGVsc2UgaWYgKHJzWzddKSB7XG4gICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6IHR5cGVzLlJBTkdFLFxuICAgICAgICBmcm9tOiAocnNbOF0gfHwgcnNbOV0pLmNoYXJDb2RlQXQoMCksXG4gICAgICAgIHRvOiByc1sxMF0uY2hhckNvZGVBdCgwKSxcbiAgICAgIH0pO1xuXG4gICAgfSBlbHNlIGlmICgoYyA9IHJzWzEyXSkpIHtcbiAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogdHlwZXMuQ0hBUixcbiAgICAgICAgdmFsdWU6IGMuY2hhckNvZGVBdCgwKSxcbiAgICAgIH0pO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbdG9rZW5zLCByZWdleHAubGFzdEluZGV4XTtcbiAgICB9XG4gIH1cblxuICBleHBvcnRzLmVycm9yKHJlZ2V4cFN0ciwgJ1VudGVybWluYXRlZCBjaGFyYWN0ZXIgY2xhc3MnKTtcbn07XG5cblxuLyoqXG4gKiBTaG9ydGN1dCB0byB0aHJvdyBlcnJvcnMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJlZ2V4cFxuICogQHBhcmFtIHtTdHJpbmd9IG1zZ1xuICovXG5leHBvcnRzLmVycm9yID0gKHJlZ2V4cCwgbXNnKSA9PiB7XG4gIHRocm93IG5ldyBTeW50YXhFcnJvcignSW52YWxpZCByZWd1bGFyIGV4cHJlc3Npb246IC8nICsgcmVnZXhwICsgJy86ICcgKyBtc2cpO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCJ2YXIgQ2xpZW50UmVxdWVzdCA9IHJlcXVpcmUoJy4vbGliL3JlcXVlc3QnKVxudmFyIHJlc3BvbnNlID0gcmVxdWlyZSgnLi9saWIvcmVzcG9uc2UnKVxudmFyIGV4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJylcbnZhciBzdGF0dXNDb2RlcyA9IHJlcXVpcmUoJ2J1aWx0aW4tc3RhdHVzLWNvZGVzJylcbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKVxuXG52YXIgaHR0cCA9IGV4cG9ydHNcblxuaHR0cC5yZXF1ZXN0ID0gZnVuY3Rpb24gKG9wdHMsIGNiKSB7XG5cdGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3N0cmluZycpXG5cdFx0b3B0cyA9IHVybC5wYXJzZShvcHRzKVxuXHRlbHNlXG5cdFx0b3B0cyA9IGV4dGVuZChvcHRzKVxuXG5cdC8vIE5vcm1hbGx5LCB0aGUgcGFnZSBpcyBsb2FkZWQgZnJvbSBodHRwIG9yIGh0dHBzLCBzbyBub3Qgc3BlY2lmeWluZyBhIHByb3RvY29sXG5cdC8vIHdpbGwgcmVzdWx0IGluIGEgKHZhbGlkKSBwcm90b2NvbC1yZWxhdGl2ZSB1cmwuIEhvd2V2ZXIsIHRoaXMgd29uJ3Qgd29yayBpZlxuXHQvLyB0aGUgcHJvdG9jb2wgaXMgc29tZXRoaW5nIGVsc2UsIGxpa2UgJ2ZpbGU6J1xuXHR2YXIgZGVmYXVsdFByb3RvY29sID0gZ2xvYmFsLmxvY2F0aW9uLnByb3RvY29sLnNlYXJjaCgvXmh0dHBzPzokLykgPT09IC0xID8gJ2h0dHA6JyA6ICcnXG5cblx0dmFyIHByb3RvY29sID0gb3B0cy5wcm90b2NvbCB8fCBkZWZhdWx0UHJvdG9jb2xcblx0dmFyIGhvc3QgPSBvcHRzLmhvc3RuYW1lIHx8IG9wdHMuaG9zdFxuXHR2YXIgcG9ydCA9IG9wdHMucG9ydFxuXHR2YXIgcGF0aCA9IG9wdHMucGF0aCB8fCAnLydcblxuXHQvLyBOZWNlc3NhcnkgZm9yIElQdjYgYWRkcmVzc2VzXG5cdGlmIChob3N0ICYmIGhvc3QuaW5kZXhPZignOicpICE9PSAtMSlcblx0XHRob3N0ID0gJ1snICsgaG9zdCArICddJ1xuXG5cdC8vIFRoaXMgbWF5IGJlIGEgcmVsYXRpdmUgdXJsLiBUaGUgYnJvd3NlciBzaG91bGQgYWx3YXlzIGJlIGFibGUgdG8gaW50ZXJwcmV0IGl0IGNvcnJlY3RseS5cblx0b3B0cy51cmwgPSAoaG9zdCA/IChwcm90b2NvbCArICcvLycgKyBob3N0KSA6ICcnKSArIChwb3J0ID8gJzonICsgcG9ydCA6ICcnKSArIHBhdGhcblx0b3B0cy5tZXRob2QgPSAob3B0cy5tZXRob2QgfHwgJ0dFVCcpLnRvVXBwZXJDYXNlKClcblx0b3B0cy5oZWFkZXJzID0gb3B0cy5oZWFkZXJzIHx8IHt9XG5cblx0Ly8gQWxzbyB2YWxpZCBvcHRzLmF1dGgsIG9wdHMubW9kZVxuXG5cdHZhciByZXEgPSBuZXcgQ2xpZW50UmVxdWVzdChvcHRzKVxuXHRpZiAoY2IpXG5cdFx0cmVxLm9uKCdyZXNwb25zZScsIGNiKVxuXHRyZXR1cm4gcmVxXG59XG5cbmh0dHAuZ2V0ID0gZnVuY3Rpb24gZ2V0IChvcHRzLCBjYikge1xuXHR2YXIgcmVxID0gaHR0cC5yZXF1ZXN0KG9wdHMsIGNiKVxuXHRyZXEuZW5kKClcblx0cmV0dXJuIHJlcVxufVxuXG5odHRwLkNsaWVudFJlcXVlc3QgPSBDbGllbnRSZXF1ZXN0XG5odHRwLkluY29taW5nTWVzc2FnZSA9IHJlc3BvbnNlLkluY29taW5nTWVzc2FnZVxuXG5odHRwLkFnZW50ID0gZnVuY3Rpb24gKCkge31cbmh0dHAuQWdlbnQuZGVmYXVsdE1heFNvY2tldHMgPSA0XG5cbmh0dHAuZ2xvYmFsQWdlbnQgPSBuZXcgaHR0cC5BZ2VudCgpXG5cbmh0dHAuU1RBVFVTX0NPREVTID0gc3RhdHVzQ29kZXNcblxuaHR0cC5NRVRIT0RTID0gW1xuXHQnQ0hFQ0tPVVQnLFxuXHQnQ09OTkVDVCcsXG5cdCdDT1BZJyxcblx0J0RFTEVURScsXG5cdCdHRVQnLFxuXHQnSEVBRCcsXG5cdCdMT0NLJyxcblx0J00tU0VBUkNIJyxcblx0J01FUkdFJyxcblx0J01LQUNUSVZJVFknLFxuXHQnTUtDT0wnLFxuXHQnTU9WRScsXG5cdCdOT1RJRlknLFxuXHQnT1BUSU9OUycsXG5cdCdQQVRDSCcsXG5cdCdQT1NUJyxcblx0J1BST1BGSU5EJyxcblx0J1BST1BQQVRDSCcsXG5cdCdQVVJHRScsXG5cdCdQVVQnLFxuXHQnUkVQT1JUJyxcblx0J1NFQVJDSCcsXG5cdCdTVUJTQ1JJQkUnLFxuXHQnVFJBQ0UnLFxuXHQnVU5MT0NLJyxcblx0J1VOU1VCU0NSSUJFJ1xuXSIsImV4cG9ydHMuZmV0Y2ggPSBpc0Z1bmN0aW9uKGdsb2JhbC5mZXRjaCkgJiYgaXNGdW5jdGlvbihnbG9iYWwuUmVhZGFibGVTdHJlYW0pXG5cbmV4cG9ydHMud3JpdGFibGVTdHJlYW0gPSBpc0Z1bmN0aW9uKGdsb2JhbC5Xcml0YWJsZVN0cmVhbSlcblxuZXhwb3J0cy5hYm9ydENvbnRyb2xsZXIgPSBpc0Z1bmN0aW9uKGdsb2JhbC5BYm9ydENvbnRyb2xsZXIpXG5cbmV4cG9ydHMuYmxvYkNvbnN0cnVjdG9yID0gZmFsc2VcbnRyeSB7XG5cdG5ldyBCbG9iKFtuZXcgQXJyYXlCdWZmZXIoMSldKVxuXHRleHBvcnRzLmJsb2JDb25zdHJ1Y3RvciA9IHRydWVcbn0gY2F0Y2ggKGUpIHt9XG5cbi8vIFRoZSB4aHIgcmVxdWVzdCB0byBleGFtcGxlLmNvbSBtYXkgdmlvbGF0ZSBzb21lIHJlc3RyaWN0aXZlIENTUCBjb25maWd1cmF0aW9ucyxcbi8vIHNvIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBicm93c2VyIHRoYXQgc3VwcG9ydHMgYGZldGNoYCwgYXZvaWQgY2FsbGluZyBnZXRYSFIoKVxuLy8gYW5kIGFzc3VtZSBzdXBwb3J0IGZvciBjZXJ0YWluIGZlYXR1cmVzIGJlbG93LlxudmFyIHhoclxuZnVuY3Rpb24gZ2V0WEhSICgpIHtcblx0Ly8gQ2FjaGUgdGhlIHhociB2YWx1ZVxuXHRpZiAoeGhyICE9PSB1bmRlZmluZWQpIHJldHVybiB4aHJcblxuXHRpZiAoZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0KSB7XG5cdFx0eGhyID0gbmV3IGdsb2JhbC5YTUxIdHRwUmVxdWVzdCgpXG5cdFx0Ly8gSWYgWERvbWFpblJlcXVlc3QgaXMgYXZhaWxhYmxlIChpZSBvbmx5LCB3aGVyZSB4aHIgbWlnaHQgbm90IHdvcmtcblx0XHQvLyBjcm9zcyBkb21haW4pLCB1c2UgdGhlIHBhZ2UgbG9jYXRpb24uIE90aGVyd2lzZSB1c2UgZXhhbXBsZS5jb21cblx0XHQvLyBOb3RlOiB0aGlzIGRvZXNuJ3QgYWN0dWFsbHkgbWFrZSBhbiBodHRwIHJlcXVlc3QuXG5cdFx0dHJ5IHtcblx0XHRcdHhoci5vcGVuKCdHRVQnLCBnbG9iYWwuWERvbWFpblJlcXVlc3QgPyAnLycgOiAnaHR0cHM6Ly9leGFtcGxlLmNvbScpXG5cdFx0fSBjYXRjaChlKSB7XG5cdFx0XHR4aHIgPSBudWxsXG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdC8vIFNlcnZpY2Ugd29ya2VycyBkb24ndCBoYXZlIFhIUlxuXHRcdHhociA9IG51bGxcblx0fVxuXHRyZXR1cm4geGhyXG59XG5cbmZ1bmN0aW9uIGNoZWNrVHlwZVN1cHBvcnQgKHR5cGUpIHtcblx0dmFyIHhociA9IGdldFhIUigpXG5cdGlmICgheGhyKSByZXR1cm4gZmFsc2Vcblx0dHJ5IHtcblx0XHR4aHIucmVzcG9uc2VUeXBlID0gdHlwZVxuXHRcdHJldHVybiB4aHIucmVzcG9uc2VUeXBlID09PSB0eXBlXG5cdH0gY2F0Y2ggKGUpIHt9XG5cdHJldHVybiBmYWxzZVxufVxuXG4vLyBGb3Igc29tZSBzdHJhbmdlIHJlYXNvbiwgU2FmYXJpIDcuMCByZXBvcnRzIHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgPT09ICdvYmplY3QnLlxuLy8gU2FmYXJpIDcuMSBhcHBlYXJzIHRvIGhhdmUgZml4ZWQgdGhpcyBidWcuXG52YXIgaGF2ZUFycmF5QnVmZmVyID0gdHlwZW9mIGdsb2JhbC5BcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCdcbnZhciBoYXZlU2xpY2UgPSBoYXZlQXJyYXlCdWZmZXIgJiYgaXNGdW5jdGlvbihnbG9iYWwuQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKVxuXG4vLyBJZiBmZXRjaCBpcyBzdXBwb3J0ZWQsIHRoZW4gYXJyYXlidWZmZXIgd2lsbCBiZSBzdXBwb3J0ZWQgdG9vLiBTa2lwIGNhbGxpbmdcbi8vIGNoZWNrVHlwZVN1cHBvcnQoKSwgc2luY2UgdGhhdCBjYWxscyBnZXRYSFIoKS5cbmV4cG9ydHMuYXJyYXlidWZmZXIgPSBleHBvcnRzLmZldGNoIHx8IChoYXZlQXJyYXlCdWZmZXIgJiYgY2hlY2tUeXBlU3VwcG9ydCgnYXJyYXlidWZmZXInKSlcblxuLy8gVGhlc2UgbmV4dCB0d28gdGVzdHMgdW5hdm9pZGFibHkgc2hvdyB3YXJuaW5ncyBpbiBDaHJvbWUuIFNpbmNlIGZldGNoIHdpbGwgYWx3YXlzXG4vLyBiZSB1c2VkIGlmIGl0J3MgYXZhaWxhYmxlLCBqdXN0IHJldHVybiBmYWxzZSBmb3IgdGhlc2UgdG8gYXZvaWQgdGhlIHdhcm5pbmdzLlxuZXhwb3J0cy5tc3N0cmVhbSA9ICFleHBvcnRzLmZldGNoICYmIGhhdmVTbGljZSAmJiBjaGVja1R5cGVTdXBwb3J0KCdtcy1zdHJlYW0nKVxuZXhwb3J0cy5tb3pjaHVua2VkYXJyYXlidWZmZXIgPSAhZXhwb3J0cy5mZXRjaCAmJiBoYXZlQXJyYXlCdWZmZXIgJiZcblx0Y2hlY2tUeXBlU3VwcG9ydCgnbW96LWNodW5rZWQtYXJyYXlidWZmZXInKVxuXG4vLyBJZiBmZXRjaCBpcyBzdXBwb3J0ZWQsIHRoZW4gb3ZlcnJpZGVNaW1lVHlwZSB3aWxsIGJlIHN1cHBvcnRlZCB0b28uIFNraXAgY2FsbGluZ1xuLy8gZ2V0WEhSKCkuXG5leHBvcnRzLm92ZXJyaWRlTWltZVR5cGUgPSBleHBvcnRzLmZldGNoIHx8IChnZXRYSFIoKSA/IGlzRnVuY3Rpb24oZ2V0WEhSKCkub3ZlcnJpZGVNaW1lVHlwZSkgOiBmYWxzZSlcblxuZXhwb3J0cy52YkFycmF5ID0gaXNGdW5jdGlvbihnbG9iYWwuVkJBcnJheSlcblxuZnVuY3Rpb24gaXNGdW5jdGlvbiAodmFsdWUpIHtcblx0cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJ1xufVxuXG54aHIgPSBudWxsIC8vIEhlbHAgZ2NcbiIsInZhciBjYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9jYXBhYmlsaXR5JylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciByZXNwb25zZSA9IHJlcXVpcmUoJy4vcmVzcG9uc2UnKVxudmFyIHN0cmVhbSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbScpXG52YXIgdG9BcnJheUJ1ZmZlciA9IHJlcXVpcmUoJ3RvLWFycmF5YnVmZmVyJylcblxudmFyIEluY29taW5nTWVzc2FnZSA9IHJlc3BvbnNlLkluY29taW5nTWVzc2FnZVxudmFyIHJTdGF0ZXMgPSByZXNwb25zZS5yZWFkeVN0YXRlc1xuXG5mdW5jdGlvbiBkZWNpZGVNb2RlIChwcmVmZXJCaW5hcnksIHVzZUZldGNoKSB7XG5cdGlmIChjYXBhYmlsaXR5LmZldGNoICYmIHVzZUZldGNoKSB7XG5cdFx0cmV0dXJuICdmZXRjaCdcblx0fSBlbHNlIGlmIChjYXBhYmlsaXR5Lm1vemNodW5rZWRhcnJheWJ1ZmZlcikge1xuXHRcdHJldHVybiAnbW96LWNodW5rZWQtYXJyYXlidWZmZXInXG5cdH0gZWxzZSBpZiAoY2FwYWJpbGl0eS5tc3N0cmVhbSkge1xuXHRcdHJldHVybiAnbXMtc3RyZWFtJ1xuXHR9IGVsc2UgaWYgKGNhcGFiaWxpdHkuYXJyYXlidWZmZXIgJiYgcHJlZmVyQmluYXJ5KSB7XG5cdFx0cmV0dXJuICdhcnJheWJ1ZmZlcidcblx0fSBlbHNlIGlmIChjYXBhYmlsaXR5LnZiQXJyYXkgJiYgcHJlZmVyQmluYXJ5KSB7XG5cdFx0cmV0dXJuICd0ZXh0OnZiYXJyYXknXG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuICd0ZXh0J1xuXHR9XG59XG5cbnZhciBDbGllbnRSZXF1ZXN0ID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0cykge1xuXHR2YXIgc2VsZiA9IHRoaXNcblx0c3RyZWFtLldyaXRhYmxlLmNhbGwoc2VsZilcblxuXHRzZWxmLl9vcHRzID0gb3B0c1xuXHRzZWxmLl9ib2R5ID0gW11cblx0c2VsZi5faGVhZGVycyA9IHt9XG5cdGlmIChvcHRzLmF1dGgpXG5cdFx0c2VsZi5zZXRIZWFkZXIoJ0F1dGhvcml6YXRpb24nLCAnQmFzaWMgJyArIG5ldyBCdWZmZXIob3B0cy5hdXRoKS50b1N0cmluZygnYmFzZTY0JykpXG5cdE9iamVjdC5rZXlzKG9wdHMuaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuXHRcdHNlbGYuc2V0SGVhZGVyKG5hbWUsIG9wdHMuaGVhZGVyc1tuYW1lXSlcblx0fSlcblxuXHR2YXIgcHJlZmVyQmluYXJ5XG5cdHZhciB1c2VGZXRjaCA9IHRydWVcblx0aWYgKG9wdHMubW9kZSA9PT0gJ2Rpc2FibGUtZmV0Y2gnIHx8ICgncmVxdWVzdFRpbWVvdXQnIGluIG9wdHMgJiYgIWNhcGFiaWxpdHkuYWJvcnRDb250cm9sbGVyKSkge1xuXHRcdC8vIElmIHRoZSB1c2Ugb2YgWEhSIHNob3VsZCBiZSBwcmVmZXJyZWQuIE5vdCB0eXBpY2FsbHkgbmVlZGVkLlxuXHRcdHVzZUZldGNoID0gZmFsc2Vcblx0XHRwcmVmZXJCaW5hcnkgPSB0cnVlXG5cdH0gZWxzZSBpZiAob3B0cy5tb2RlID09PSAncHJlZmVyLXN0cmVhbWluZycpIHtcblx0XHQvLyBJZiBzdHJlYW1pbmcgaXMgYSBoaWdoIHByaW9yaXR5IGJ1dCBiaW5hcnkgY29tcGF0aWJpbGl0eSBhbmRcblx0XHQvLyB0aGUgYWNjdXJhY3kgb2YgdGhlICdjb250ZW50LXR5cGUnIGhlYWRlciBhcmVuJ3Rcblx0XHRwcmVmZXJCaW5hcnkgPSBmYWxzZVxuXHR9IGVsc2UgaWYgKG9wdHMubW9kZSA9PT0gJ2FsbG93LXdyb25nLWNvbnRlbnQtdHlwZScpIHtcblx0XHQvLyBJZiBzdHJlYW1pbmcgaXMgbW9yZSBpbXBvcnRhbnQgdGhhbiBwcmVzZXJ2aW5nIHRoZSAnY29udGVudC10eXBlJyBoZWFkZXJcblx0XHRwcmVmZXJCaW5hcnkgPSAhY2FwYWJpbGl0eS5vdmVycmlkZU1pbWVUeXBlXG5cdH0gZWxzZSBpZiAoIW9wdHMubW9kZSB8fCBvcHRzLm1vZGUgPT09ICdkZWZhdWx0JyB8fCBvcHRzLm1vZGUgPT09ICdwcmVmZXItZmFzdCcpIHtcblx0XHQvLyBVc2UgYmluYXJ5IGlmIHRleHQgc3RyZWFtaW5nIG1heSBjb3JydXB0IGRhdGEgb3IgdGhlIGNvbnRlbnQtdHlwZSBoZWFkZXIsIG9yIGZvciBzcGVlZFxuXHRcdHByZWZlckJpbmFyeSA9IHRydWVcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIG9wdHMubW9kZScpXG5cdH1cblx0c2VsZi5fbW9kZSA9IGRlY2lkZU1vZGUocHJlZmVyQmluYXJ5LCB1c2VGZXRjaClcblx0c2VsZi5fZmV0Y2hUaW1lciA9IG51bGxcblxuXHRzZWxmLm9uKCdmaW5pc2gnLCBmdW5jdGlvbiAoKSB7XG5cdFx0c2VsZi5fb25GaW5pc2goKVxuXHR9KVxufVxuXG5pbmhlcml0cyhDbGllbnRSZXF1ZXN0LCBzdHJlYW0uV3JpdGFibGUpXG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNldEhlYWRlciA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblx0dmFyIGxvd2VyTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKVxuXHQvLyBUaGlzIGNoZWNrIGlzIG5vdCBuZWNlc3NhcnksIGJ1dCBpdCBwcmV2ZW50cyB3YXJuaW5ncyBmcm9tIGJyb3dzZXJzIGFib3V0IHNldHRpbmcgdW5zYWZlXG5cdC8vIGhlYWRlcnMuIFRvIGJlIGhvbmVzdCBJJ20gbm90IGVudGlyZWx5IHN1cmUgaGlkaW5nIHRoZXNlIHdhcm5pbmdzIGlzIGEgZ29vZCB0aGluZywgYnV0XG5cdC8vIGh0dHAtYnJvd3NlcmlmeSBkaWQgaXQsIHNvIEkgd2lsbCB0b28uXG5cdGlmICh1bnNhZmVIZWFkZXJzLmluZGV4T2YobG93ZXJOYW1lKSAhPT0gLTEpXG5cdFx0cmV0dXJuXG5cblx0c2VsZi5faGVhZGVyc1tsb3dlck5hbWVdID0ge1xuXHRcdG5hbWU6IG5hbWUsXG5cdFx0dmFsdWU6IHZhbHVlXG5cdH1cbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuZ2V0SGVhZGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0dmFyIGhlYWRlciA9IHRoaXMuX2hlYWRlcnNbbmFtZS50b0xvd2VyQ2FzZSgpXVxuXHRpZiAoaGVhZGVyKVxuXHRcdHJldHVybiBoZWFkZXIudmFsdWVcblx0cmV0dXJuIG51bGxcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUucmVtb3ZlSGVhZGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cdGRlbGV0ZSBzZWxmLl9oZWFkZXJzW25hbWUudG9Mb3dlckNhc2UoKV1cbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuX29uRmluaXNoID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgc2VsZiA9IHRoaXNcblxuXHRpZiAoc2VsZi5fZGVzdHJveWVkKVxuXHRcdHJldHVyblxuXHR2YXIgb3B0cyA9IHNlbGYuX29wdHNcblxuXHR2YXIgaGVhZGVyc09iaiA9IHNlbGYuX2hlYWRlcnNcblx0dmFyIGJvZHkgPSBudWxsXG5cdGlmIChvcHRzLm1ldGhvZCAhPT0gJ0dFVCcgJiYgb3B0cy5tZXRob2QgIT09ICdIRUFEJykge1xuXHRcdGlmIChjYXBhYmlsaXR5LmFycmF5YnVmZmVyKSB7XG5cdFx0XHRib2R5ID0gdG9BcnJheUJ1ZmZlcihCdWZmZXIuY29uY2F0KHNlbGYuX2JvZHkpKVxuXHRcdH0gZWxzZSBpZiAoY2FwYWJpbGl0eS5ibG9iQ29uc3RydWN0b3IpIHtcblx0XHRcdGJvZHkgPSBuZXcgZ2xvYmFsLkJsb2Ioc2VsZi5fYm9keS5tYXAoZnVuY3Rpb24gKGJ1ZmZlcikge1xuXHRcdFx0XHRyZXR1cm4gdG9BcnJheUJ1ZmZlcihidWZmZXIpXG5cdFx0XHR9KSwge1xuXHRcdFx0XHR0eXBlOiAoaGVhZGVyc09ialsnY29udGVudC10eXBlJ10gfHwge30pLnZhbHVlIHx8ICcnXG5cdFx0XHR9KVxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBnZXQgdXRmOCBzdHJpbmdcblx0XHRcdGJvZHkgPSBCdWZmZXIuY29uY2F0KHNlbGYuX2JvZHkpLnRvU3RyaW5nKClcblx0XHR9XG5cdH1cblxuXHQvLyBjcmVhdGUgZmxhdHRlbmVkIGxpc3Qgb2YgaGVhZGVyc1xuXHR2YXIgaGVhZGVyc0xpc3QgPSBbXVxuXHRPYmplY3Qua2V5cyhoZWFkZXJzT2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXlOYW1lKSB7XG5cdFx0dmFyIG5hbWUgPSBoZWFkZXJzT2JqW2tleU5hbWVdLm5hbWVcblx0XHR2YXIgdmFsdWUgPSBoZWFkZXJzT2JqW2tleU5hbWVdLnZhbHVlXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHR2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG5cdFx0XHRcdGhlYWRlcnNMaXN0LnB1c2goW25hbWUsIHZdKVxuXHRcdFx0fSlcblx0XHR9IGVsc2Uge1xuXHRcdFx0aGVhZGVyc0xpc3QucHVzaChbbmFtZSwgdmFsdWVdKVxuXHRcdH1cblx0fSlcblxuXHRpZiAoc2VsZi5fbW9kZSA9PT0gJ2ZldGNoJykge1xuXHRcdHZhciBzaWduYWwgPSBudWxsXG5cdFx0dmFyIGZldGNoVGltZXIgPSBudWxsXG5cdFx0aWYgKGNhcGFiaWxpdHkuYWJvcnRDb250cm9sbGVyKSB7XG5cdFx0XHR2YXIgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKVxuXHRcdFx0c2lnbmFsID0gY29udHJvbGxlci5zaWduYWxcblx0XHRcdHNlbGYuX2ZldGNoQWJvcnRDb250cm9sbGVyID0gY29udHJvbGxlclxuXG5cdFx0XHRpZiAoJ3JlcXVlc3RUaW1lb3V0JyBpbiBvcHRzICYmIG9wdHMucmVxdWVzdFRpbWVvdXQgIT09IDApIHtcblx0XHRcdFx0c2VsZi5fZmV0Y2hUaW1lciA9IGdsb2JhbC5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRzZWxmLmVtaXQoJ3JlcXVlc3RUaW1lb3V0Jylcblx0XHRcdFx0XHRpZiAoc2VsZi5fZmV0Y2hBYm9ydENvbnRyb2xsZXIpXG5cdFx0XHRcdFx0XHRzZWxmLl9mZXRjaEFib3J0Q29udHJvbGxlci5hYm9ydCgpXG5cdFx0XHRcdH0sIG9wdHMucmVxdWVzdFRpbWVvdXQpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Z2xvYmFsLmZldGNoKHNlbGYuX29wdHMudXJsLCB7XG5cdFx0XHRtZXRob2Q6IHNlbGYuX29wdHMubWV0aG9kLFxuXHRcdFx0aGVhZGVyczogaGVhZGVyc0xpc3QsXG5cdFx0XHRib2R5OiBib2R5IHx8IHVuZGVmaW5lZCxcblx0XHRcdG1vZGU6ICdjb3JzJyxcblx0XHRcdGNyZWRlbnRpYWxzOiBvcHRzLndpdGhDcmVkZW50aWFscyA/ICdpbmNsdWRlJyA6ICdzYW1lLW9yaWdpbicsXG5cdFx0XHRzaWduYWw6IHNpZ25hbFxuXHRcdH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdFx0XHRzZWxmLl9mZXRjaFJlc3BvbnNlID0gcmVzcG9uc2Vcblx0XHRcdHNlbGYuX2Nvbm5lY3QoKVxuXHRcdH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcblx0XHRcdGdsb2JhbC5jbGVhclRpbWVvdXQoc2VsZi5fZmV0Y2hUaW1lcilcblx0XHRcdGlmICghc2VsZi5fZGVzdHJveWVkKVxuXHRcdFx0XHRzZWxmLmVtaXQoJ2Vycm9yJywgcmVhc29uKVxuXHRcdH0pXG5cdH0gZWxzZSB7XG5cdFx0dmFyIHhociA9IHNlbGYuX3hociA9IG5ldyBnbG9iYWwuWE1MSHR0cFJlcXVlc3QoKVxuXHRcdHRyeSB7XG5cdFx0XHR4aHIub3BlbihzZWxmLl9vcHRzLm1ldGhvZCwgc2VsZi5fb3B0cy51cmwsIHRydWUpXG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIGVycilcblx0XHRcdH0pXG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cblx0XHQvLyBDYW4ndCBzZXQgcmVzcG9uc2VUeXBlIG9uIHJlYWxseSBvbGQgYnJvd3NlcnNcblx0XHRpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyKVxuXHRcdFx0eGhyLnJlc3BvbnNlVHlwZSA9IHNlbGYuX21vZGUuc3BsaXQoJzonKVswXVxuXG5cdFx0aWYgKCd3aXRoQ3JlZGVudGlhbHMnIGluIHhocilcblx0XHRcdHhoci53aXRoQ3JlZGVudGlhbHMgPSAhIW9wdHMud2l0aENyZWRlbnRpYWxzXG5cblx0XHRpZiAoc2VsZi5fbW9kZSA9PT0gJ3RleHQnICYmICdvdmVycmlkZU1pbWVUeXBlJyBpbiB4aHIpXG5cdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSgndGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZCcpXG5cblx0XHRpZiAoJ3JlcXVlc3RUaW1lb3V0JyBpbiBvcHRzKSB7XG5cdFx0XHR4aHIudGltZW91dCA9IG9wdHMucmVxdWVzdFRpbWVvdXRcblx0XHRcdHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHNlbGYuZW1pdCgncmVxdWVzdFRpbWVvdXQnKVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGhlYWRlcnNMaXN0LmZvckVhY2goZnVuY3Rpb24gKGhlYWRlcikge1xuXHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG5cdFx0fSlcblxuXHRcdHNlbGYuX3Jlc3BvbnNlID0gbnVsbFxuXHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRzd2l0Y2ggKHhoci5yZWFkeVN0YXRlKSB7XG5cdFx0XHRcdGNhc2UgclN0YXRlcy5MT0FESU5HOlxuXHRcdFx0XHRjYXNlIHJTdGF0ZXMuRE9ORTpcblx0XHRcdFx0XHRzZWxmLl9vblhIUlByb2dyZXNzKClcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBOZWNlc3NhcnkgZm9yIHN0cmVhbWluZyBpbiBGaXJlZm94LCBzaW5jZSB4aHIucmVzcG9uc2UgaXMgT05MWSBkZWZpbmVkXG5cdFx0Ly8gaW4gb25wcm9ncmVzcywgbm90IGluIG9ucmVhZHlzdGF0ZWNoYW5nZSB3aXRoIHhoci5yZWFkeVN0YXRlID0gM1xuXHRcdGlmIChzZWxmLl9tb2RlID09PSAnbW96LWNodW5rZWQtYXJyYXlidWZmZXInKSB7XG5cdFx0XHR4aHIub25wcm9ncmVzcyA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5fb25YSFJQcm9ncmVzcygpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0eGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAoc2VsZi5fZGVzdHJveWVkKVxuXHRcdFx0XHRyZXR1cm5cblx0XHRcdHNlbGYuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ1hIUiBlcnJvcicpKVxuXHRcdH1cblxuXHRcdHRyeSB7XG5cdFx0XHR4aHIuc2VuZChib2R5KVxuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0cHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpXG5cdFx0XHR9KVxuXHRcdFx0cmV0dXJuXG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHhoci5zdGF0dXMgaXMgcmVhZGFibGUgYW5kIG5vbi16ZXJvLCBpbmRpY2F0aW5nIG5vIGVycm9yLlxuICogRXZlbiB0aG91Z2ggdGhlIHNwZWMgc2F5cyBpdCBzaG91bGQgYmUgYXZhaWxhYmxlIGluIHJlYWR5U3RhdGUgMyxcbiAqIGFjY2Vzc2luZyBpdCB0aHJvd3MgYW4gZXhjZXB0aW9uIGluIElFOFxuICovXG5mdW5jdGlvbiBzdGF0dXNWYWxpZCAoeGhyKSB7XG5cdHRyeSB7XG5cdFx0dmFyIHN0YXR1cyA9IHhoci5zdGF0dXNcblx0XHRyZXR1cm4gKHN0YXR1cyAhPT0gbnVsbCAmJiBzdGF0dXMgIT09IDApXG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2Vcblx0fVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5fb25YSFJQcm9ncmVzcyA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cblx0aWYgKCFzdGF0dXNWYWxpZChzZWxmLl94aHIpIHx8IHNlbGYuX2Rlc3Ryb3llZClcblx0XHRyZXR1cm5cblxuXHRpZiAoIXNlbGYuX3Jlc3BvbnNlKVxuXHRcdHNlbGYuX2Nvbm5lY3QoKVxuXG5cdHNlbGYuX3Jlc3BvbnNlLl9vblhIUlByb2dyZXNzKClcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuX2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdGlmIChzZWxmLl9kZXN0cm95ZWQpXG5cdFx0cmV0dXJuXG5cblx0c2VsZi5fcmVzcG9uc2UgPSBuZXcgSW5jb21pbmdNZXNzYWdlKHNlbGYuX3hociwgc2VsZi5fZmV0Y2hSZXNwb25zZSwgc2VsZi5fbW9kZSwgc2VsZi5fZmV0Y2hUaW1lcilcblx0c2VsZi5fcmVzcG9uc2Uub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyKSB7XG5cdFx0c2VsZi5lbWl0KCdlcnJvcicsIGVycilcblx0fSlcblxuXHRzZWxmLmVtaXQoJ3Jlc3BvbnNlJywgc2VsZi5fcmVzcG9uc2UpXG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdHNlbGYuX2JvZHkucHVzaChjaHVuaylcblx0Y2IoKVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5hYm9ydCA9IENsaWVudFJlcXVlc3QucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXHRzZWxmLl9kZXN0cm95ZWQgPSB0cnVlXG5cdGdsb2JhbC5jbGVhclRpbWVvdXQoc2VsZi5fZmV0Y2hUaW1lcilcblx0aWYgKHNlbGYuX3Jlc3BvbnNlKVxuXHRcdHNlbGYuX3Jlc3BvbnNlLl9kZXN0cm95ZWQgPSB0cnVlXG5cdGlmIChzZWxmLl94aHIpXG5cdFx0c2VsZi5feGhyLmFib3J0KClcblx0ZWxzZSBpZiAoc2VsZi5fZmV0Y2hBYm9ydENvbnRyb2xsZXIpXG5cdFx0c2VsZi5fZmV0Y2hBYm9ydENvbnRyb2xsZXIuYWJvcnQoKVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoZGF0YSwgZW5jb2RpbmcsIGNiKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXHRpZiAodHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbicpIHtcblx0XHRjYiA9IGRhdGFcblx0XHRkYXRhID0gdW5kZWZpbmVkXG5cdH1cblxuXHRzdHJlYW0uV3JpdGFibGUucHJvdG90eXBlLmVuZC5jYWxsKHNlbGYsIGRhdGEsIGVuY29kaW5nLCBjYilcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuZmx1c2hIZWFkZXJzID0gZnVuY3Rpb24gKCkge31cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNldFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7fVxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuc2V0Tm9EZWxheSA9IGZ1bmN0aW9uICgpIHt9XG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5zZXRTb2NrZXRLZWVwQWxpdmUgPSBmdW5jdGlvbiAoKSB7fVxuXG4vLyBUYWtlbiBmcm9tIGh0dHA6Ly93d3cudzMub3JnL1RSL1hNTEh0dHBSZXF1ZXN0LyN0aGUtc2V0cmVxdWVzdGhlYWRlciUyOCUyOS1tZXRob2RcbnZhciB1bnNhZmVIZWFkZXJzID0gW1xuXHQnYWNjZXB0LWNoYXJzZXQnLFxuXHQnYWNjZXB0LWVuY29kaW5nJyxcblx0J2FjY2Vzcy1jb250cm9sLXJlcXVlc3QtaGVhZGVycycsXG5cdCdhY2Nlc3MtY29udHJvbC1yZXF1ZXN0LW1ldGhvZCcsXG5cdCdjb25uZWN0aW9uJyxcblx0J2NvbnRlbnQtbGVuZ3RoJyxcblx0J2Nvb2tpZScsXG5cdCdjb29raWUyJyxcblx0J2RhdGUnLFxuXHQnZG50Jyxcblx0J2V4cGVjdCcsXG5cdCdob3N0Jyxcblx0J2tlZXAtYWxpdmUnLFxuXHQnb3JpZ2luJyxcblx0J3JlZmVyZXInLFxuXHQndGUnLFxuXHQndHJhaWxlcicsXG5cdCd0cmFuc2Zlci1lbmNvZGluZycsXG5cdCd1cGdyYWRlJyxcblx0J3ZpYSdcbl1cbiIsInZhciBjYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9jYXBhYmlsaXR5JylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBzdHJlYW0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKVxuXG52YXIgclN0YXRlcyA9IGV4cG9ydHMucmVhZHlTdGF0ZXMgPSB7XG5cdFVOU0VOVDogMCxcblx0T1BFTkVEOiAxLFxuXHRIRUFERVJTX1JFQ0VJVkVEOiAyLFxuXHRMT0FESU5HOiAzLFxuXHRET05FOiA0XG59XG5cbnZhciBJbmNvbWluZ01lc3NhZ2UgPSBleHBvcnRzLkluY29taW5nTWVzc2FnZSA9IGZ1bmN0aW9uICh4aHIsIHJlc3BvbnNlLCBtb2RlLCBmZXRjaFRpbWVyKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXHRzdHJlYW0uUmVhZGFibGUuY2FsbChzZWxmKVxuXG5cdHNlbGYuX21vZGUgPSBtb2RlXG5cdHNlbGYuaGVhZGVycyA9IHt9XG5cdHNlbGYucmF3SGVhZGVycyA9IFtdXG5cdHNlbGYudHJhaWxlcnMgPSB7fVxuXHRzZWxmLnJhd1RyYWlsZXJzID0gW11cblxuXHQvLyBGYWtlIHRoZSAnY2xvc2UnIGV2ZW50LCBidXQgb25seSBvbmNlICdlbmQnIGZpcmVzXG5cdHNlbGYub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcblx0XHQvLyBUaGUgbmV4dFRpY2sgaXMgbmVjZXNzYXJ5IHRvIHByZXZlbnQgdGhlICdyZXF1ZXN0JyBtb2R1bGUgZnJvbSBjYXVzaW5nIGFuIGluZmluaXRlIGxvb3Bcblx0XHRwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcblx0XHRcdHNlbGYuZW1pdCgnY2xvc2UnKVxuXHRcdH0pXG5cdH0pXG5cblx0aWYgKG1vZGUgPT09ICdmZXRjaCcpIHtcblx0XHRzZWxmLl9mZXRjaFJlc3BvbnNlID0gcmVzcG9uc2VcblxuXHRcdHNlbGYudXJsID0gcmVzcG9uc2UudXJsXG5cdFx0c2VsZi5zdGF0dXNDb2RlID0gcmVzcG9uc2Uuc3RhdHVzXG5cdFx0c2VsZi5zdGF0dXNNZXNzYWdlID0gcmVzcG9uc2Uuc3RhdHVzVGV4dFxuXHRcdFxuXHRcdHJlc3BvbnNlLmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyLCBrZXkpe1xuXHRcdFx0c2VsZi5oZWFkZXJzW2tleS50b0xvd2VyQ2FzZSgpXSA9IGhlYWRlclxuXHRcdFx0c2VsZi5yYXdIZWFkZXJzLnB1c2goa2V5LCBoZWFkZXIpXG5cdFx0fSlcblxuXHRcdGlmIChjYXBhYmlsaXR5LndyaXRhYmxlU3RyZWFtKSB7XG5cdFx0XHR2YXIgd3JpdGFibGUgPSBuZXcgV3JpdGFibGVTdHJlYW0oe1xuXHRcdFx0XHR3cml0ZTogZnVuY3Rpb24gKGNodW5rKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFx0XHRcdGlmIChzZWxmLl9kZXN0cm95ZWQpIHtcblx0XHRcdFx0XHRcdFx0cmVqZWN0KClcblx0XHRcdFx0XHRcdH0gZWxzZSBpZihzZWxmLnB1c2gobmV3IEJ1ZmZlcihjaHVuaykpKSB7XG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoKVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0c2VsZi5fcmVzdW1lRmV0Y2ggPSByZXNvbHZlXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fSxcblx0XHRcdFx0Y2xvc2U6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRnbG9iYWwuY2xlYXJUaW1lb3V0KGZldGNoVGltZXIpXG5cdFx0XHRcdFx0aWYgKCFzZWxmLl9kZXN0cm95ZWQpXG5cdFx0XHRcdFx0XHRzZWxmLnB1c2gobnVsbClcblx0XHRcdFx0fSxcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0XHRpZiAoIXNlbGYuX2Rlc3Ryb3llZClcblx0XHRcdFx0XHRcdHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHJlc3BvbnNlLmJvZHkucGlwZVRvKHdyaXRhYmxlKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdFx0Z2xvYmFsLmNsZWFyVGltZW91dChmZXRjaFRpbWVyKVxuXHRcdFx0XHRcdGlmICghc2VsZi5fZGVzdHJveWVkKVxuXHRcdFx0XHRcdFx0c2VsZi5lbWl0KCdlcnJvcicsIGVycilcblx0XHRcdFx0fSlcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHR9IGNhdGNoIChlKSB7fSAvLyBwaXBlVG8gbWV0aG9kIGlzbid0IGRlZmluZWQuIENhbid0IGZpbmQgYSBiZXR0ZXIgd2F5IHRvIGZlYXR1cmUgdGVzdCB0aGlzXG5cdFx0fVxuXHRcdC8vIGZhbGxiYWNrIGZvciB3aGVuIHdyaXRhYmxlU3RyZWFtIG9yIHBpcGVUbyBhcmVuJ3QgYXZhaWxhYmxlXG5cdFx0dmFyIHJlYWRlciA9IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKClcblx0XHRmdW5jdGlvbiByZWFkICgpIHtcblx0XHRcdHJlYWRlci5yZWFkKCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0XHRcdGlmIChzZWxmLl9kZXN0cm95ZWQpXG5cdFx0XHRcdFx0cmV0dXJuXG5cdFx0XHRcdGlmIChyZXN1bHQuZG9uZSkge1xuXHRcdFx0XHRcdGdsb2JhbC5jbGVhclRpbWVvdXQoZmV0Y2hUaW1lcilcblx0XHRcdFx0XHRzZWxmLnB1c2gobnVsbClcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLnB1c2gobmV3IEJ1ZmZlcihyZXN1bHQudmFsdWUpKVxuXHRcdFx0XHRyZWFkKClcblx0XHRcdH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdFx0Z2xvYmFsLmNsZWFyVGltZW91dChmZXRjaFRpbWVyKVxuXHRcdFx0XHRpZiAoIXNlbGYuX2Rlc3Ryb3llZClcblx0XHRcdFx0XHRzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKVxuXHRcdFx0fSlcblx0XHR9XG5cdFx0cmVhZCgpXG5cdH0gZWxzZSB7XG5cdFx0c2VsZi5feGhyID0geGhyXG5cdFx0c2VsZi5fcG9zID0gMFxuXG5cdFx0c2VsZi51cmwgPSB4aHIucmVzcG9uc2VVUkxcblx0XHRzZWxmLnN0YXR1c0NvZGUgPSB4aHIuc3RhdHVzXG5cdFx0c2VsZi5zdGF0dXNNZXNzYWdlID0geGhyLnN0YXR1c1RleHRcblx0XHR2YXIgaGVhZGVycyA9IHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKS5zcGxpdCgvXFxyP1xcbi8pXG5cdFx0aGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoZWFkZXIpIHtcblx0XHRcdHZhciBtYXRjaGVzID0gaGVhZGVyLm1hdGNoKC9eKFteOl0rKTpcXHMqKC4qKS8pXG5cdFx0XHRpZiAobWF0Y2hlcykge1xuXHRcdFx0XHR2YXIga2V5ID0gbWF0Y2hlc1sxXS50b0xvd2VyQ2FzZSgpXG5cdFx0XHRcdGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuXHRcdFx0XHRcdGlmIChzZWxmLmhlYWRlcnNba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRzZWxmLmhlYWRlcnNba2V5XSA9IFtdXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNlbGYuaGVhZGVyc1trZXldLnB1c2gobWF0Y2hlc1syXSlcblx0XHRcdFx0fSBlbHNlIGlmIChzZWxmLmhlYWRlcnNba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0c2VsZi5oZWFkZXJzW2tleV0gKz0gJywgJyArIG1hdGNoZXNbMl1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZWxmLmhlYWRlcnNba2V5XSA9IG1hdGNoZXNbMl1cblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLnJhd0hlYWRlcnMucHVzaChtYXRjaGVzWzFdLCBtYXRjaGVzWzJdKVxuXHRcdFx0fVxuXHRcdH0pXG5cblx0XHRzZWxmLl9jaGFyc2V0ID0gJ3gtdXNlci1kZWZpbmVkJ1xuXHRcdGlmICghY2FwYWJpbGl0eS5vdmVycmlkZU1pbWVUeXBlKSB7XG5cdFx0XHR2YXIgbWltZVR5cGUgPSBzZWxmLnJhd0hlYWRlcnNbJ21pbWUtdHlwZSddXG5cdFx0XHRpZiAobWltZVR5cGUpIHtcblx0XHRcdFx0dmFyIGNoYXJzZXRNYXRjaCA9IG1pbWVUeXBlLm1hdGNoKC87XFxzKmNoYXJzZXQ9KFteO10pKDt8JCkvKVxuXHRcdFx0XHRpZiAoY2hhcnNldE1hdGNoKSB7XG5cdFx0XHRcdFx0c2VsZi5fY2hhcnNldCA9IGNoYXJzZXRNYXRjaFsxXS50b0xvd2VyQ2FzZSgpXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICghc2VsZi5fY2hhcnNldClcblx0XHRcdFx0c2VsZi5fY2hhcnNldCA9ICd1dGYtOCcgLy8gYmVzdCBndWVzc1xuXHRcdH1cblx0fVxufVxuXG5pbmhlcml0cyhJbmNvbWluZ01lc3NhZ2UsIHN0cmVhbS5SZWFkYWJsZSlcblxuSW5jb21pbmdNZXNzYWdlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHNlbGYgPSB0aGlzXG5cblx0dmFyIHJlc29sdmUgPSBzZWxmLl9yZXN1bWVGZXRjaFxuXHRpZiAocmVzb2x2ZSkge1xuXHRcdHNlbGYuX3Jlc3VtZUZldGNoID0gbnVsbFxuXHRcdHJlc29sdmUoKVxuXHR9XG59XG5cbkluY29taW5nTWVzc2FnZS5wcm90b3R5cGUuX29uWEhSUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpc1xuXG5cdHZhciB4aHIgPSBzZWxmLl94aHJcblxuXHR2YXIgcmVzcG9uc2UgPSBudWxsXG5cdHN3aXRjaCAoc2VsZi5fbW9kZSkge1xuXHRcdGNhc2UgJ3RleHQ6dmJhcnJheSc6IC8vIEZvciBJRTlcblx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSAhPT0gclN0YXRlcy5ET05FKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gVGhpcyBmYWlscyBpbiBJRThcblx0XHRcdFx0cmVzcG9uc2UgPSBuZXcgZ2xvYmFsLlZCQXJyYXkoeGhyLnJlc3BvbnNlQm9keSkudG9BcnJheSgpXG5cdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdFx0aWYgKHJlc3BvbnNlICE9PSBudWxsKSB7XG5cdFx0XHRcdHNlbGYucHVzaChuZXcgQnVmZmVyKHJlc3BvbnNlKSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdH1cblx0XHRcdC8vIEZhbGxzIHRocm91Z2ggaW4gSUU4XHRcblx0XHRjYXNlICd0ZXh0Jzpcblx0XHRcdHRyeSB7IC8vIFRoaXMgd2lsbCBmYWlsIHdoZW4gcmVhZHlTdGF0ZSA9IDMgaW4gSUU5LiBTd2l0Y2ggbW9kZSBhbmQgd2FpdCBmb3IgcmVhZHlTdGF0ZSA9IDRcblx0XHRcdFx0cmVzcG9uc2UgPSB4aHIucmVzcG9uc2VUZXh0XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdHNlbGYuX21vZGUgPSAndGV4dDp2YmFycmF5J1xuXHRcdFx0XHRicmVha1xuXHRcdFx0fVxuXHRcdFx0aWYgKHJlc3BvbnNlLmxlbmd0aCA+IHNlbGYuX3Bvcykge1xuXHRcdFx0XHR2YXIgbmV3RGF0YSA9IHJlc3BvbnNlLnN1YnN0cihzZWxmLl9wb3MpXG5cdFx0XHRcdGlmIChzZWxmLl9jaGFyc2V0ID09PSAneC11c2VyLWRlZmluZWQnKSB7XG5cdFx0XHRcdFx0dmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIobmV3RGF0YS5sZW5ndGgpXG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBuZXdEYXRhLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRcdFx0YnVmZmVyW2ldID0gbmV3RGF0YS5jaGFyQ29kZUF0KGkpICYgMHhmZlxuXG5cdFx0XHRcdFx0c2VsZi5wdXNoKGJ1ZmZlcilcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZWxmLnB1c2gobmV3RGF0YSwgc2VsZi5fY2hhcnNldClcblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLl9wb3MgPSByZXNwb25zZS5sZW5ndGhcblx0XHRcdH1cblx0XHRcdGJyZWFrXG5cdFx0Y2FzZSAnYXJyYXlidWZmZXInOlxuXHRcdFx0aWYgKHhoci5yZWFkeVN0YXRlICE9PSByU3RhdGVzLkRPTkUgfHwgIXhoci5yZXNwb25zZSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdHJlc3BvbnNlID0geGhyLnJlc3BvbnNlXG5cdFx0XHRzZWxmLnB1c2gobmV3IEJ1ZmZlcihuZXcgVWludDhBcnJheShyZXNwb25zZSkpKVxuXHRcdFx0YnJlYWtcblx0XHRjYXNlICdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcic6IC8vIHRha2Ugd2hvbGVcblx0XHRcdHJlc3BvbnNlID0geGhyLnJlc3BvbnNlXG5cdFx0XHRpZiAoeGhyLnJlYWR5U3RhdGUgIT09IHJTdGF0ZXMuTE9BRElORyB8fCAhcmVzcG9uc2UpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRzZWxmLnB1c2gobmV3IEJ1ZmZlcihuZXcgVWludDhBcnJheShyZXNwb25zZSkpKVxuXHRcdFx0YnJlYWtcblx0XHRjYXNlICdtcy1zdHJlYW0nOlxuXHRcdFx0cmVzcG9uc2UgPSB4aHIucmVzcG9uc2Vcblx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSAhPT0gclN0YXRlcy5MT0FESU5HKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0dmFyIHJlYWRlciA9IG5ldyBnbG9iYWwuTVNTdHJlYW1SZWFkZXIoKVxuXHRcdFx0cmVhZGVyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGlmIChyZWFkZXIucmVzdWx0LmJ5dGVMZW5ndGggPiBzZWxmLl9wb3MpIHtcblx0XHRcdFx0XHRzZWxmLnB1c2gobmV3IEJ1ZmZlcihuZXcgVWludDhBcnJheShyZWFkZXIucmVzdWx0LnNsaWNlKHNlbGYuX3BvcykpKSlcblx0XHRcdFx0XHRzZWxmLl9wb3MgPSByZWFkZXIucmVzdWx0LmJ5dGVMZW5ndGhcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2VsZi5wdXNoKG51bGwpXG5cdFx0XHR9XG5cdFx0XHQvLyByZWFkZXIub25lcnJvciA9ID8/PyAvLyBUT0RPOiB0aGlzXG5cdFx0XHRyZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIocmVzcG9uc2UpXG5cdFx0XHRicmVha1xuXHR9XG5cblx0Ly8gVGhlIG1zLXN0cmVhbSBjYXNlIGhhbmRsZXMgZW5kIHNlcGFyYXRlbHkgaW4gcmVhZGVyLm9ubG9hZCgpXG5cdGlmIChzZWxmLl94aHIucmVhZHlTdGF0ZSA9PT0gclN0YXRlcy5ET05FICYmIHNlbGYuX21vZGUgIT09ICdtcy1zdHJlYW0nKSB7XG5cdFx0c2VsZi5wdXNoKG51bGwpXG5cdH1cbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgaXNFbmNvZGluZyA9IEJ1ZmZlci5pc0VuY29kaW5nIHx8IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBlbmNvZGluZyA9ICcnICsgZW5jb2Rpbmc7XG4gIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6Y2FzZSAndXRmOCc6Y2FzZSAndXRmLTgnOmNhc2UgJ2FzY2lpJzpjYXNlICdiaW5hcnknOmNhc2UgJ2Jhc2U2NCc6Y2FzZSAndWNzMic6Y2FzZSAndWNzLTInOmNhc2UgJ3V0ZjE2bGUnOmNhc2UgJ3V0Zi0xNmxlJzpjYXNlICdyYXcnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX25vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICBpZiAoIWVuYykgcmV0dXJuICd1dGY4JztcbiAgdmFyIHJldHJpZWQ7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmMpIHtcbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gJ3V0ZjgnO1xuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuICd1dGYxNmxlJztcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gJ2xhdGluMSc7XG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGVuYztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChyZXRyaWVkKSByZXR1cm47IC8vIHVuZGVmaW5lZFxuICAgICAgICBlbmMgPSAoJycgKyBlbmMpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHJpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLy8gRG8gbm90IGNhY2hlIGBCdWZmZXIuaXNFbmNvZGluZ2Agd2hlbiBjaGVja2luZyBlbmNvZGluZyBuYW1lcyBhcyBzb21lXG4vLyBtb2R1bGVzIG1vbmtleS1wYXRjaCBpdCB0byBzdXBwb3J0IGFkZGl0aW9uYWwgZW5jb2RpbmdzXG5mdW5jdGlvbiBub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgdmFyIG5lbmMgPSBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKTtcbiAgaWYgKHR5cGVvZiBuZW5jICE9PSAnc3RyaW5nJyAmJiAoQnVmZmVyLmlzRW5jb2RpbmcgPT09IGlzRW5jb2RpbmcgfHwgIWlzRW5jb2RpbmcoZW5jKSkpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuYyk7XG4gIHJldHVybiBuZW5jIHx8IGVuYztcbn1cblxuLy8gU3RyaW5nRGVjb2RlciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGVmZmljaWVudGx5IHNwbGl0dGluZyBhIHNlcmllcyBvZlxuLy8gYnVmZmVycyBpbnRvIGEgc2VyaWVzIG9mIEpTIHN0cmluZ3Mgd2l0aG91dCBicmVha2luZyBhcGFydCBtdWx0aS1ieXRlXG4vLyBjaGFyYWN0ZXJzLlxuZXhwb3J0cy5TdHJpbmdEZWNvZGVyID0gU3RyaW5nRGVjb2RlcjtcbmZ1bmN0aW9uIFN0cmluZ0RlY29kZXIoZW5jb2RpbmcpIHtcbiAgdGhpcy5lbmNvZGluZyA9IG5vcm1hbGl6ZUVuY29kaW5nKGVuY29kaW5nKTtcbiAgdmFyIG5iO1xuICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHtcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIHRoaXMudGV4dCA9IHV0ZjE2VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gdXRmMTZFbmQ7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1dGY4JzpcbiAgICAgIHRoaXMuZmlsbExhc3QgPSB1dGY4RmlsbExhc3Q7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgdGhpcy50ZXh0ID0gYmFzZTY0VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gYmFzZTY0RW5kO1xuICAgICAgbmIgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMud3JpdGUgPSBzaW1wbGVXcml0ZTtcbiAgICAgIHRoaXMuZW5kID0gc2ltcGxlRW5kO1xuICAgICAgcmV0dXJuO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAwO1xuICB0aGlzLmxhc3RUb3RhbCA9IDA7XG4gIHRoaXMubGFzdENoYXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobmIpO1xufVxuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgdmFyIHI7XG4gIHZhciBpO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHIgPSB0aGlzLmZpbGxMYXN0KGJ1Zik7XG4gICAgaWYgKHIgPT09IHVuZGVmaW5lZCkgcmV0dXJuICcnO1xuICAgIGkgPSB0aGlzLmxhc3ROZWVkO1xuICAgIHRoaXMubGFzdE5lZWQgPSAwO1xuICB9IGVsc2Uge1xuICAgIGkgPSAwO1xuICB9XG4gIGlmIChpIDwgYnVmLmxlbmd0aCkgcmV0dXJuIHIgPyByICsgdGhpcy50ZXh0KGJ1ZiwgaSkgOiB0aGlzLnRleHQoYnVmLCBpKTtcbiAgcmV0dXJuIHIgfHwgJyc7XG59O1xuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSB1dGY4RW5kO1xuXG4vLyBSZXR1cm5zIG9ubHkgY29tcGxldGUgY2hhcmFjdGVycyBpbiBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUudGV4dCA9IHV0ZjhUZXh0O1xuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIHBhcnRpYWwgbm9uLVVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5maWxsTGFzdCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn07XG5cbi8vIENoZWNrcyB0aGUgdHlwZSBvZiBhIFVURi04IGJ5dGUsIHdoZXRoZXIgaXQncyBBU0NJSSwgYSBsZWFkaW5nIGJ5dGUsIG9yIGFcbi8vIGNvbnRpbnVhdGlvbiBieXRlLiBJZiBhbiBpbnZhbGlkIGJ5dGUgaXMgZGV0ZWN0ZWQsIC0yIGlzIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrQnl0ZShieXRlKSB7XG4gIGlmIChieXRlIDw9IDB4N0YpIHJldHVybiAwO2Vsc2UgaWYgKGJ5dGUgPj4gNSA9PT0gMHgwNikgcmV0dXJuIDI7ZWxzZSBpZiAoYnl0ZSA+PiA0ID09PSAweDBFKSByZXR1cm4gMztlbHNlIGlmIChieXRlID4+IDMgPT09IDB4MUUpIHJldHVybiA0O1xuICByZXR1cm4gYnl0ZSA+PiA2ID09PSAweDAyID8gLTEgOiAtMjtcbn1cblxuLy8gQ2hlY2tzIGF0IG1vc3QgMyBieXRlcyBhdCB0aGUgZW5kIG9mIGEgQnVmZmVyIGluIG9yZGVyIHRvIGRldGVjdCBhblxuLy8gaW5jb21wbGV0ZSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3Rlci4gVGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyAoMiwgMywgb3IgNClcbi8vIG5lZWRlZCB0byBjb21wbGV0ZSB0aGUgVVRGLTggY2hhcmFjdGVyIChpZiBhcHBsaWNhYmxlKSBhcmUgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tJbmNvbXBsZXRlKHNlbGYsIGJ1ZiwgaSkge1xuICB2YXIgaiA9IGJ1Zi5sZW5ndGggLSAxO1xuICBpZiAoaiA8IGkpIHJldHVybiAwO1xuICB2YXIgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMTtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMjtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkgfHwgbmIgPT09IC0yKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkge1xuICAgICAgaWYgKG5iID09PSAyKSBuYiA9IDA7ZWxzZSBzZWxmLmxhc3ROZWVkID0gbmIgLSAzO1xuICAgIH1cbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5cbi8vIFZhbGlkYXRlcyBhcyBtYW55IGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciBhc1xuLy8gbmVlZGVkIG9yIGFyZSBhdmFpbGFibGUuIElmIHdlIHNlZSBhIG5vbi1jb250aW51YXRpb24gYnl0ZSB3aGVyZSB3ZSBleHBlY3Rcbi8vIG9uZSwgd2UgXCJyZXBsYWNlXCIgdGhlIHZhbGlkYXRlZCBjb250aW51YXRpb24gYnl0ZXMgd2UndmUgc2VlbiBzbyBmYXIgd2l0aFxuLy8gYSBzaW5nbGUgVVRGLTggcmVwbGFjZW1lbnQgY2hhcmFjdGVyICgnXFx1ZmZmZCcpLCB0byBtYXRjaCB2OCdzIFVURi04IGRlY29kaW5nXG4vLyBiZWhhdmlvci4gVGhlIGNvbnRpbnVhdGlvbiBieXRlIGNoZWNrIGlzIGluY2x1ZGVkIHRocmVlIHRpbWVzIGluIHRoZSBjYXNlXG4vLyB3aGVyZSBhbGwgb2YgdGhlIGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBjaGFyYWN0ZXIgZXhpc3QgaW4gdGhlIHNhbWUgYnVmZmVyLlxuLy8gSXQgaXMgYWxzbyBkb25lIHRoaXMgd2F5IGFzIGEgc2xpZ2h0IHBlcmZvcm1hbmNlIGluY3JlYXNlIGluc3RlYWQgb2YgdXNpbmcgYVxuLy8gbG9vcC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0V4dHJhQnl0ZXMoc2VsZiwgYnVmLCBwKSB7XG4gIGlmICgoYnVmWzBdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICBzZWxmLmxhc3ROZWVkID0gMDtcbiAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICB9XG4gIGlmIChzZWxmLmxhc3ROZWVkID4gMSAmJiBidWYubGVuZ3RoID4gMSkge1xuICAgIGlmICgoYnVmWzFdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgIHNlbGYubGFzdE5lZWQgPSAxO1xuICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICB9XG4gICAgaWYgKHNlbGYubGFzdE5lZWQgPiAyICYmIGJ1Zi5sZW5ndGggPiAyKSB7XG4gICAgICBpZiAoKGJ1ZlsyXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgIHNlbGYubGFzdE5lZWQgPSAyO1xuICAgICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXIuXG5mdW5jdGlvbiB1dGY4RmlsbExhc3QoYnVmKSB7XG4gIHZhciBwID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICB2YXIgciA9IHV0ZjhDaGVja0V4dHJhQnl0ZXModGhpcywgYnVmLCBwKTtcbiAgaWYgKHIgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHI7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn1cblxuLy8gUmV0dXJucyBhbGwgY29tcGxldGUgVVRGLTggY2hhcmFjdGVycyBpbiBhIEJ1ZmZlci4gSWYgdGhlIEJ1ZmZlciBlbmRlZCBvbiBhXG4vLyBwYXJ0aWFsIGNoYXJhY3RlciwgdGhlIGNoYXJhY3RlcidzIGJ5dGVzIGFyZSBidWZmZXJlZCB1bnRpbCB0aGUgcmVxdWlyZWRcbi8vIG51bWJlciBvZiBieXRlcyBhcmUgYXZhaWxhYmxlLlxuZnVuY3Rpb24gdXRmOFRleHQoYnVmLCBpKSB7XG4gIHZhciB0b3RhbCA9IHV0ZjhDaGVja0luY29tcGxldGUodGhpcywgYnVmLCBpKTtcbiAgaWYgKCF0aGlzLmxhc3ROZWVkKSByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSk7XG4gIHRoaXMubGFzdFRvdGFsID0gdG90YWw7XG4gIHZhciBlbmQgPSBidWYubGVuZ3RoIC0gKHRvdGFsIC0gdGhpcy5sYXN0TmVlZCk7XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIDAsIGVuZCk7XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpLCBlbmQpO1xufVxuXG4vLyBGb3IgVVRGLTgsIGEgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGlzIGFkZGVkIHdoZW4gZW5kaW5nIG9uIGEgcGFydGlhbFxuLy8gY2hhcmFjdGVyLlxuZnVuY3Rpb24gdXRmOEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyAnXFx1ZmZmZCc7XG4gIHJldHVybiByO1xufVxuXG4vLyBVVEYtMTZMRSB0eXBpY2FsbHkgbmVlZHMgdHdvIGJ5dGVzIHBlciBjaGFyYWN0ZXIsIGJ1dCBldmVuIGlmIHdlIGhhdmUgYW4gZXZlblxuLy8gbnVtYmVyIG9mIGJ5dGVzIGF2YWlsYWJsZSwgd2UgbmVlZCB0byBjaGVjayBpZiB3ZSBlbmQgb24gYSBsZWFkaW5nL2hpZ2hcbi8vIHN1cnJvZ2F0ZS4gSW4gdGhhdCBjYXNlLCB3ZSBuZWVkIHRvIHdhaXQgZm9yIHRoZSBuZXh0IHR3byBieXRlcyBpbiBvcmRlciB0b1xuLy8gZGVjb2RlIHRoZSBsYXN0IGNoYXJhY3RlciBwcm9wZXJseS5cbmZ1bmN0aW9uIHV0ZjE2VGV4dChidWYsIGkpIHtcbiAgaWYgKChidWYubGVuZ3RoIC0gaSkgJSAyID09PSAwKSB7XG4gICAgdmFyIHIgPSBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpKTtcbiAgICBpZiAocikge1xuICAgICAgdmFyIGMgPSByLmNoYXJDb2RlQXQoci5sZW5ndGggLSAxKTtcbiAgICAgIGlmIChjID49IDB4RDgwMCAmJiBjIDw9IDB4REJGRikge1xuICAgICAgICB0aGlzLmxhc3ROZWVkID0gMjtcbiAgICAgICAgdGhpcy5sYXN0VG90YWwgPSA0O1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gICAgICAgIHJldHVybiByLnNsaWNlKDAsIC0xKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDE7XG4gIHRoaXMubGFzdFRvdGFsID0gMjtcbiAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjE2bGUnLCBpLCBidWYubGVuZ3RoIC0gMSk7XG59XG5cbi8vIEZvciBVVEYtMTZMRSB3ZSBkbyBub3QgZXhwbGljaXRseSBhcHBlbmQgc3BlY2lhbCByZXBsYWNlbWVudCBjaGFyYWN0ZXJzIGlmIHdlXG4vLyBlbmQgb24gYSBwYXJ0aWFsIGNoYXJhY3Rlciwgd2Ugc2ltcGx5IGxldCB2OCBoYW5kbGUgdGhhdC5cbmZ1bmN0aW9uIHV0ZjE2RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgdmFyIGVuZCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgICByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ3V0ZjE2bGUnLCAwLCBlbmQpO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRUZXh0KGJ1ZiwgaSkge1xuICB2YXIgbiA9IChidWYubGVuZ3RoIC0gaSkgJSAzO1xuICBpZiAobiA9PT0gMCkgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSk7XG4gIHRoaXMubGFzdE5lZWQgPSAzIC0gbjtcbiAgdGhpcy5sYXN0VG90YWwgPSAzO1xuICBpZiAobiA9PT0gMSkge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICB9XG4gIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGksIGJ1Zi5sZW5ndGggLSBuKTtcbn1cblxuZnVuY3Rpb24gYmFzZTY0RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArIHRoaXMubGFzdENoYXIudG9TdHJpbmcoJ2Jhc2U2NCcsIDAsIDMgLSB0aGlzLmxhc3ROZWVkKTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFBhc3MgYnl0ZXMgb24gdGhyb3VnaCBmb3Igc2luZ2xlLWJ5dGUgZW5jb2RpbmdzIChlLmcuIGFzY2lpLCBsYXRpbjEsIGhleClcbmZ1bmN0aW9uIHNpbXBsZVdyaXRlKGJ1Zikge1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiBzaW1wbGVFbmQoYnVmKSB7XG4gIHJldHVybiBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xufSIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdnZXQnLCAncHV0JywgJ3Bvc3QnLCAnZGVsZXRlJywgJ29wdGlvbnMnLCAnaGVhZCcsICdwYXRjaCdcbl07XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwidGl0bGVcIjogXCJBIEpTT04gU2NoZW1hIGZvciBTd2FnZ2VyIDIuMCBBUEkuXCIsXG4gIFwiaWRcIjogXCJodHRwOi8vc3dhZ2dlci5pby92Mi9zY2hlbWEuanNvbiNcIixcbiAgXCIkc2NoZW1hXCI6IFwiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEjXCIsXG4gIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICBcInJlcXVpcmVkXCI6IFtcbiAgICBcInN3YWdnZXJcIixcbiAgICBcImluZm9cIixcbiAgICBcInBhdGhzXCJcbiAgXSxcbiAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiBmYWxzZSxcbiAgXCJwYXR0ZXJuUHJvcGVydGllc1wiOiB7XG4gICAgXCJeeC1cIjoge1xuICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy92ZW5kb3JFeHRlbnNpb25cIlxuICAgIH1cbiAgfSxcbiAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICBcInN3YWdnZXJcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImVudW1cIjogW1xuICAgICAgICBcIjIuMFwiXG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBTd2FnZ2VyIHZlcnNpb24gb2YgdGhpcyBkb2N1bWVudC5cIlxuICAgIH0sXG4gICAgXCJpbmZvXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvaW5mb1wiXG4gICAgfSxcbiAgICBcImhvc3RcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcInBhdHRlcm5cIjogXCJeW157fS8gOlxcXFxcXFxcXSsoPzo6XFxcXGQrKT8kXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGhvc3QgKG5hbWUgb3IgaXApIG9mIHRoZSBBUEkuIEV4YW1wbGU6ICdzd2FnZ2VyLmlvJ1wiXG4gICAgfSxcbiAgICBcImJhc2VQYXRoXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgXCJwYXR0ZXJuXCI6IFwiXi9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgYmFzZSBwYXRoIHRvIHRoZSBBUEkuIEV4YW1wbGU6ICcvYXBpJy5cIlxuICAgIH0sXG4gICAgXCJzY2hlbWVzXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvc2NoZW1lc0xpc3RcIlxuICAgIH0sXG4gICAgXCJjb25zdW1lc1wiOiB7XG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBsaXN0IG9mIE1JTUUgdHlwZXMgYWNjZXB0ZWQgYnkgdGhlIEFQSS5cIixcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbWVkaWFUeXBlTGlzdFwiXG4gICAgfSxcbiAgICBcInByb2R1Y2VzXCI6IHtcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGxpc3Qgb2YgTUlNRSB0eXBlcyB0aGUgQVBJIGNhbiBwcm9kdWNlLlwiLFxuICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9tZWRpYVR5cGVMaXN0XCJcbiAgICB9LFxuICAgIFwicGF0aHNcIjoge1xuICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9wYXRoc1wiXG4gICAgfSxcbiAgICBcImRlZmluaXRpb25zXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvZGVmaW5pdGlvbnNcIlxuICAgIH0sXG4gICAgXCJwYXJhbWV0ZXJzXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvcGFyYW1ldGVyRGVmaW5pdGlvbnNcIlxuICAgIH0sXG4gICAgXCJyZXNwb25zZXNcIjoge1xuICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9yZXNwb25zZURlZmluaXRpb25zXCJcbiAgICB9LFxuICAgIFwic2VjdXJpdHlcIjoge1xuICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9zZWN1cml0eVwiXG4gICAgfSxcbiAgICBcInNlY3VyaXR5RGVmaW5pdGlvbnNcIjoge1xuICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9zZWN1cml0eURlZmluaXRpb25zXCJcbiAgICB9LFxuICAgIFwidGFnc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvdGFnXCJcbiAgICAgIH0sXG4gICAgICBcInVuaXF1ZUl0ZW1zXCI6IHRydWVcbiAgICB9LFxuICAgIFwiZXh0ZXJuYWxEb2NzXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvZXh0ZXJuYWxEb2NzXCJcbiAgICB9XG4gIH0sXG4gIFwiZGVmaW5pdGlvbnNcIjoge1xuICAgIFwiaW5mb1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZW5lcmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBBUEkuXCIsXG4gICAgICBcInJlcXVpcmVkXCI6IFtcbiAgICAgICAgXCJ2ZXJzaW9uXCIsXG4gICAgICAgIFwidGl0bGVcIlxuICAgICAgXSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogZmFsc2UsXG4gICAgICBcInBhdHRlcm5Qcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJeeC1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvdmVuZG9yRXh0ZW5zaW9uXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwidGl0bGVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIHVuaXF1ZSBhbmQgcHJlY2lzZSB0aXRsZSBvZiB0aGUgQVBJLlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidmVyc2lvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIgb2YgdGhlIEFQSS5cIlxuICAgICAgICB9LFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBsb25nZXIgZGVzY3JpcHRpb24gb2YgdGhlIEFQSS4gU2hvdWxkIGJlIGRpZmZlcmVudCBmcm9tIHRoZSB0aXRsZS4gIEdpdEh1YiBGbGF2b3JlZCBNYXJrZG93biBpcyBhbGxvd2VkLlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGVybXNPZlNlcnZpY2VcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdGVybXMgb2Ygc2VydmljZSBmb3IgdGhlIEFQSS5cIlxuICAgICAgICB9LFxuICAgICAgICBcImNvbnRhY3RcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvY29udGFjdFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibGljZW5zZVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9saWNlbnNlXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJjb250YWN0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkNvbnRhY3QgaW5mb3JtYXRpb24gZm9yIHRoZSBvd25lcnMgb2YgdGhlIEFQSS5cIixcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogZmFsc2UsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgaWRlbnRpZnlpbmcgbmFtZSBvZiB0aGUgY29udGFjdCBwZXJzb24vb3JnYW5pemF0aW9uLlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidXJsXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIFVSTCBwb2ludGluZyB0byB0aGUgY29udGFjdCBpbmZvcm1hdGlvbi5cIixcbiAgICAgICAgICBcImZvcm1hdFwiOiBcInVyaVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZW1haWxcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgZW1haWwgYWRkcmVzcyBvZiB0aGUgY29udGFjdCBwZXJzb24vb3JnYW5pemF0aW9uLlwiLFxuICAgICAgICAgIFwiZm9ybWF0XCI6IFwiZW1haWxcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJwYXR0ZXJuUHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiXngtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3ZlbmRvckV4dGVuc2lvblwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwibGljZW5zZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICBcIm5hbWVcIlxuICAgICAgXSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogZmFsc2UsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgbmFtZSBvZiB0aGUgbGljZW5zZSB0eXBlLiBJdCdzIGVuY291cmFnZWQgdG8gdXNlIGFuIE9TSSBjb21wYXRpYmxlIGxpY2Vuc2UuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ1cmxcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgVVJMIHBvaW50aW5nIHRvIHRoZSBsaWNlbnNlLlwiLFxuICAgICAgICAgIFwiZm9ybWF0XCI6IFwidXJpXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwicGF0dGVyblByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIl54LVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy92ZW5kb3JFeHRlbnNpb25cIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcInBhdGhzXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlJlbGF0aXZlIHBhdGhzIHRvIHRoZSBpbmRpdmlkdWFsIGVuZHBvaW50cy4gVGhleSBtdXN0IGJlIHJlbGF0aXZlIHRvIHRoZSAnYmFzZVBhdGgnLlwiLFxuICAgICAgXCJwYXR0ZXJuUHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiXngtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3ZlbmRvckV4dGVuc2lvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiXi9cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvcGF0aEl0ZW1cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiBmYWxzZVxuICAgIH0sXG4gICAgXCJkZWZpbml0aW9uc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3NjaGVtYVwiXG4gICAgICB9LFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIk9uZSBvciBtb3JlIEpTT04gb2JqZWN0cyBkZXNjcmliaW5nIHRoZSBzY2hlbWFzIGJlaW5nIGNvbnN1bWVkIGFuZCBwcm9kdWNlZCBieSB0aGUgQVBJLlwiXG4gICAgfSxcbiAgICBcInBhcmFtZXRlckRlZmluaXRpb25zXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvcGFyYW1ldGVyXCJcbiAgICAgIH0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiT25lIG9yIG1vcmUgSlNPTiByZXByZXNlbnRhdGlvbnMgZm9yIHBhcmFtZXRlcnNcIlxuICAgIH0sXG4gICAgXCJyZXNwb25zZURlZmluaXRpb25zXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvcmVzcG9uc2VcIlxuICAgICAgfSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJPbmUgb3IgbW9yZSBKU09OIHJlcHJlc2VudGF0aW9ucyBmb3IgcGFyYW1ldGVyc1wiXG4gICAgfSxcbiAgICBcImV4dGVybmFsRG9jc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogZmFsc2UsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaW5mb3JtYXRpb24gYWJvdXQgZXh0ZXJuYWwgZG9jdW1lbnRhdGlvblwiLFxuICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgIFwidXJsXCJcbiAgICAgIF0sXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcInVybFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJmb3JtYXRcIjogXCJ1cmlcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJwYXR0ZXJuUHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiXngtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3ZlbmRvckV4dGVuc2lvblwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiZXhhbXBsZXNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHRydWVcbiAgICB9LFxuICAgIFwibWltZVR5cGVcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIE1JTUUgdHlwZSBvZiB0aGUgSFRUUCBtZXNzYWdlLlwiXG4gICAgfSxcbiAgICBcIm9wZXJhdGlvblwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICBcInJlc3BvbnNlc1wiXG4gICAgICBdLFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiBmYWxzZSxcbiAgICAgIFwicGF0dGVyblByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIl54LVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy92ZW5kb3JFeHRlbnNpb25cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJ0YWdzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidW5pcXVlSXRlbXNcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcInN1bW1hcnlcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGJyaWVmIHN1bW1hcnkgb2YgdGhlIG9wZXJhdGlvbi5cIlxuICAgICAgICB9LFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBsb25nZXIgZGVzY3JpcHRpb24gb2YgdGhlIG9wZXJhdGlvbiwgR2l0SHViIEZsYXZvcmVkIE1hcmtkb3duIGlzIGFsbG93ZWQuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJleHRlcm5hbERvY3NcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvZXh0ZXJuYWxEb2NzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJvcGVyYXRpb25JZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIG9wZXJhdGlvbi5cIlxuICAgICAgICB9LFxuICAgICAgICBcInByb2R1Y2VzXCI6IHtcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBsaXN0IG9mIE1JTUUgdHlwZXMgdGhlIEFQSSBjYW4gcHJvZHVjZS5cIixcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL21lZGlhVHlwZUxpc3RcIlxuICAgICAgICB9LFxuICAgICAgICBcImNvbnN1bWVzXCI6IHtcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBsaXN0IG9mIE1JTUUgdHlwZXMgdGhlIEFQSSBjYW4gY29uc3VtZS5cIixcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL21lZGlhVHlwZUxpc3RcIlxuICAgICAgICB9LFxuICAgICAgICBcInBhcmFtZXRlcnNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvcGFyYW1ldGVyc0xpc3RcIlxuICAgICAgICB9LFxuICAgICAgICBcInJlc3BvbnNlc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9yZXNwb25zZXNcIlxuICAgICAgICB9LFxuICAgICAgICBcInNjaGVtZXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvc2NoZW1lc0xpc3RcIlxuICAgICAgICB9LFxuICAgICAgICBcImRlcHJlY2F0ZWRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZWN1cml0eVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9zZWN1cml0eVwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwicGF0aEl0ZW1cIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IGZhbHNlLFxuICAgICAgXCJwYXR0ZXJuUHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiXngtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3ZlbmRvckV4dGVuc2lvblwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIiRyZWZcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29wZXJhdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicHV0XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29wZXJhdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicG9zdFwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vcGVyYXRpb25cIlxuICAgICAgICB9LFxuICAgICAgICBcImRlbGV0ZVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vcGVyYXRpb25cIlxuICAgICAgICB9LFxuICAgICAgICBcIm9wdGlvbnNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3BlcmF0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJoZWFkXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29wZXJhdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGF0Y2hcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb3BlcmF0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXJhbWV0ZXJzXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3BhcmFtZXRlcnNMaXN0XCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJyZXNwb25zZXNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUmVzcG9uc2Ugb2JqZWN0cyBuYW1lcyBjYW4gZWl0aGVyIGJlIGFueSB2YWxpZCBIVFRQIHN0YXR1cyBjb2RlIG9yICdkZWZhdWx0Jy5cIixcbiAgICAgIFwibWluUHJvcGVydGllc1wiOiAxLFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiBmYWxzZSxcbiAgICAgIFwicGF0dGVyblByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIl4oWzAtOV17M30pJHxeKGRlZmF1bHQpJFwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9yZXNwb25zZVZhbHVlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJeeC1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvdmVuZG9yRXh0ZW5zaW9uXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwibm90XCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogZmFsc2UsXG4gICAgICAgIFwicGF0dGVyblByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiXngtXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvdmVuZG9yRXh0ZW5zaW9uXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwicmVzcG9uc2VWYWx1ZVwiOiB7XG4gICAgICBcIm9uZU9mXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvcmVzcG9uc2VcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9qc29uUmVmZXJlbmNlXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAgXCJyZXNwb25zZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICBcImRlc2NyaXB0aW9uXCJcbiAgICAgIF0sXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcInNjaGVtYVwiOiB7XG4gICAgICAgICAgXCJvbmVPZlwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvc2NoZW1hXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvZmlsZVNjaGVtYVwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcImhlYWRlcnNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvaGVhZGVyc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXhhbXBsZXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvZXhhbXBsZXNcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiBmYWxzZSxcbiAgICAgIFwicGF0dGVyblByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIl54LVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy92ZW5kb3JFeHRlbnNpb25cIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcImhlYWRlcnNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9oZWFkZXJcIlxuICAgICAgfVxuICAgIH0sXG4gICAgXCJoZWFkZXJcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IGZhbHNlLFxuICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgIFwidHlwZVwiXG4gICAgICBdLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwibnVtYmVyXCIsXG4gICAgICAgICAgICBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgXCJhcnJheVwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcImZvcm1hdFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9wcmltaXRpdmVzSXRlbXNcIlxuICAgICAgICB9LFxuICAgICAgICBcImNvbGxlY3Rpb25Gb3JtYXRcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvY29sbGVjdGlvbkZvcm1hdFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZGVmYXVsdFwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9kZWZhdWx0XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtYXhpbXVtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL21heGltdW1cIlxuICAgICAgICB9LFxuICAgICAgICBcImV4Y2x1c2l2ZU1heGltdW1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvZXhjbHVzaXZlTWF4aW11bVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWluaW11bVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9taW5pbXVtXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJleGNsdXNpdmVNaW5pbXVtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2V4Y2x1c2l2ZU1pbmltdW1cIlxuICAgICAgICB9LFxuICAgICAgICBcIm1heExlbmd0aFwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9tYXhMZW5ndGhcIlxuICAgICAgICB9LFxuICAgICAgICBcIm1pbkxlbmd0aFwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9taW5MZW5ndGhcIlxuICAgICAgICB9LFxuICAgICAgICBcInBhdHRlcm5cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvcGF0dGVyblwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWF4SXRlbXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbWF4SXRlbXNcIlxuICAgICAgICB9LFxuICAgICAgICBcIm1pbkl0ZW1zXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL21pbkl0ZW1zXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ1bmlxdWVJdGVtc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy91bmlxdWVJdGVtc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZW51bVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9lbnVtXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtdWx0aXBsZU9mXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL211bHRpcGxlT2ZcIlxuICAgICAgICB9LFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJwYXR0ZXJuUHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiXngtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3ZlbmRvckV4dGVuc2lvblwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwidmVuZG9yRXh0ZW5zaW9uXCI6IHtcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBbnkgcHJvcGVydHkgc3RhcnRpbmcgd2l0aCB4LSBpcyB2YWxpZC5cIixcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgIFwiYWRkaXRpb25hbEl0ZW1zXCI6IHRydWVcbiAgICB9LFxuICAgIFwiYm9keVBhcmFtZXRlclwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICBcIm5hbWVcIixcbiAgICAgICAgXCJpblwiLFxuICAgICAgICBcInNjaGVtYVwiXG4gICAgICBdLFxuICAgICAgXCJwYXR0ZXJuUHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiXngtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3ZlbmRvckV4dGVuc2lvblwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBicmllZiBkZXNjcmlwdGlvbiBvZiB0aGUgcGFyYW1ldGVyLiBUaGlzIGNvdWxkIGNvbnRhaW4gZXhhbXBsZXMgb2YgdXNlLiAgR2l0SHViIEZsYXZvcmVkIE1hcmtkb3duIGlzIGFsbG93ZWQuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIG5hbWUgb2YgdGhlIHBhcmFtZXRlci5cIlxuICAgICAgICB9LFxuICAgICAgICBcImluXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRGV0ZXJtaW5lcyB0aGUgbG9jYXRpb24gb2YgdGhlIHBhcmFtZXRlci5cIixcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJib2R5XCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVxdWlyZWRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0aGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBvciBvcHRpb25hbC5cIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgXCJzY2hlbWFcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvc2NoZW1hXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogZmFsc2VcbiAgICB9LFxuICAgIFwiaGVhZGVyUGFyYW1ldGVyU3ViU2NoZW1hXCI6IHtcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogZmFsc2UsXG4gICAgICBcInBhdHRlcm5Qcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJeeC1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvdmVuZG9yRXh0ZW5zaW9uXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwicmVxdWlyZWRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0aGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBvciBvcHRpb25hbC5cIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgXCJpblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkRldGVybWluZXMgdGhlIGxvY2F0aW9uIG9mIHRoZSBwYXJhbWV0ZXIuXCIsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwiaGVhZGVyXCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGJyaWVmIGRlc2NyaXB0aW9uIG9mIHRoZSBwYXJhbWV0ZXIuIFRoaXMgY291bGQgY29udGFpbiBleGFtcGxlcyBvZiB1c2UuICBHaXRIdWIgRmxhdm9yZWQgTWFya2Rvd24gaXMgYWxsb3dlZC5cIlxuICAgICAgICB9LFxuICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgbmFtZSBvZiB0aGUgcGFyYW1ldGVyLlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcIm51bWJlclwiLFxuICAgICAgICAgICAgXCJib29sZWFuXCIsXG4gICAgICAgICAgICBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiYXJyYXlcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJmb3JtYXRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvcHJpbWl0aXZlc0l0ZW1zXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjb2xsZWN0aW9uRm9ybWF0XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2NvbGxlY3Rpb25Gb3JtYXRcIlxuICAgICAgICB9LFxuICAgICAgICBcImRlZmF1bHRcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvZGVmYXVsdFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWF4aW11bVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9tYXhpbXVtXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJleGNsdXNpdmVNYXhpbXVtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2V4Y2x1c2l2ZU1heGltdW1cIlxuICAgICAgICB9LFxuICAgICAgICBcIm1pbmltdW1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbWluaW11bVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXhjbHVzaXZlTWluaW11bVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9leGNsdXNpdmVNaW5pbXVtXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtYXhMZW5ndGhcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbWF4TGVuZ3RoXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtaW5MZW5ndGhcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbWluTGVuZ3RoXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXR0ZXJuXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3BhdHRlcm5cIlxuICAgICAgICB9LFxuICAgICAgICBcIm1heEl0ZW1zXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL21heEl0ZW1zXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtaW5JdGVtc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9taW5JdGVtc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwidW5pcXVlSXRlbXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvdW5pcXVlSXRlbXNcIlxuICAgICAgICB9LFxuICAgICAgICBcImVudW1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvZW51bVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibXVsdGlwbGVPZlwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9tdWx0aXBsZU9mXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJxdWVyeVBhcmFtZXRlclN1YlNjaGVtYVwiOiB7XG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IGZhbHNlLFxuICAgICAgXCJwYXR0ZXJuUHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiXngtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3ZlbmRvckV4dGVuc2lvblwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcInJlcXVpcmVkXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkRldGVybWluZXMgd2hldGhlciBvciBub3QgdGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgb3Igb3B0aW9uYWwuXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIFwiaW5cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJEZXRlcm1pbmVzIHRoZSBsb2NhdGlvbiBvZiB0aGUgcGFyYW1ldGVyLlwiLFxuICAgICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgICBcInF1ZXJ5XCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGJyaWVmIGRlc2NyaXB0aW9uIG9mIHRoZSBwYXJhbWV0ZXIuIFRoaXMgY291bGQgY29udGFpbiBleGFtcGxlcyBvZiB1c2UuICBHaXRIdWIgRmxhdm9yZWQgTWFya2Rvd24gaXMgYWxsb3dlZC5cIlxuICAgICAgICB9LFxuICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgbmFtZSBvZiB0aGUgcGFyYW1ldGVyLlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiYWxsb3dFbXB0eVZhbHVlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IGZhbHNlLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJhbGxvd3Mgc2VuZGluZyBhIHBhcmFtZXRlciBieSBuYW1lIG9ubHkgb3Igd2l0aCBhbiBlbXB0eSB2YWx1ZS5cIlxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgICBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJudW1iZXJcIixcbiAgICAgICAgICAgIFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICBcImFycmF5XCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwiZm9ybWF0XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3ByaW1pdGl2ZXNJdGVtc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY29sbGVjdGlvbkZvcm1hdFwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9jb2xsZWN0aW9uRm9ybWF0V2l0aE11bHRpXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkZWZhdWx0XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2RlZmF1bHRcIlxuICAgICAgICB9LFxuICAgICAgICBcIm1heGltdW1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbWF4aW11bVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXhjbHVzaXZlTWF4aW11bVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9leGNsdXNpdmVNYXhpbXVtXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtaW5pbXVtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL21pbmltdW1cIlxuICAgICAgICB9LFxuICAgICAgICBcImV4Y2x1c2l2ZU1pbmltdW1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvZXhjbHVzaXZlTWluaW11bVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWF4TGVuZ3RoXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL21heExlbmd0aFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWluTGVuZ3RoXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL21pbkxlbmd0aFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGF0dGVyblwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9wYXR0ZXJuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtYXhJdGVtc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9tYXhJdGVtc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWluSXRlbXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbWluSXRlbXNcIlxuICAgICAgICB9LFxuICAgICAgICBcInVuaXF1ZUl0ZW1zXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3VuaXF1ZUl0ZW1zXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJlbnVtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2VudW1cIlxuICAgICAgICB9LFxuICAgICAgICBcIm11bHRpcGxlT2ZcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbXVsdGlwbGVPZlwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiZm9ybURhdGFQYXJhbWV0ZXJTdWJTY2hlbWFcIjoge1xuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiBmYWxzZSxcbiAgICAgIFwicGF0dGVyblByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIl54LVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy92ZW5kb3JFeHRlbnNpb25cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJyZXF1aXJlZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIG9yIG9wdGlvbmFsLlwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBcImluXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRGV0ZXJtaW5lcyB0aGUgbG9jYXRpb24gb2YgdGhlIHBhcmFtZXRlci5cIixcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJmb3JtRGF0YVwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBicmllZiBkZXNjcmlwdGlvbiBvZiB0aGUgcGFyYW1ldGVyLiBUaGlzIGNvdWxkIGNvbnRhaW4gZXhhbXBsZXMgb2YgdXNlLiAgR2l0SHViIEZsYXZvcmVkIE1hcmtkb3duIGlzIGFsbG93ZWQuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIG5hbWUgb2YgdGhlIHBhcmFtZXRlci5cIlxuICAgICAgICB9LFxuICAgICAgICBcImFsbG93RW1wdHlWYWx1ZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBmYWxzZSxcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiYWxsb3dzIHNlbmRpbmcgYSBwYXJhbWV0ZXIgYnkgbmFtZSBvbmx5IG9yIHdpdGggYW4gZW1wdHkgdmFsdWUuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwibnVtYmVyXCIsXG4gICAgICAgICAgICBcImJvb2xlYW5cIixcbiAgICAgICAgICAgIFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJhcnJheVwiLFxuICAgICAgICAgICAgXCJmaWxlXCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwiZm9ybWF0XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3ByaW1pdGl2ZXNJdGVtc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY29sbGVjdGlvbkZvcm1hdFwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9jb2xsZWN0aW9uRm9ybWF0V2l0aE11bHRpXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkZWZhdWx0XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2RlZmF1bHRcIlxuICAgICAgICB9LFxuICAgICAgICBcIm1heGltdW1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbWF4aW11bVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXhjbHVzaXZlTWF4aW11bVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9leGNsdXNpdmVNYXhpbXVtXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtaW5pbXVtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL21pbmltdW1cIlxuICAgICAgICB9LFxuICAgICAgICBcImV4Y2x1c2l2ZU1pbmltdW1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvZXhjbHVzaXZlTWluaW11bVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWF4TGVuZ3RoXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL21heExlbmd0aFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWluTGVuZ3RoXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL21pbkxlbmd0aFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGF0dGVyblwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9wYXR0ZXJuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtYXhJdGVtc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9tYXhJdGVtc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWluSXRlbXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbWluSXRlbXNcIlxuICAgICAgICB9LFxuICAgICAgICBcInVuaXF1ZUl0ZW1zXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3VuaXF1ZUl0ZW1zXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJlbnVtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2VudW1cIlxuICAgICAgICB9LFxuICAgICAgICBcIm11bHRpcGxlT2ZcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbXVsdGlwbGVPZlwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwicGF0aFBhcmFtZXRlclN1YlNjaGVtYVwiOiB7XG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IGZhbHNlLFxuICAgICAgXCJwYXR0ZXJuUHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiXngtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3ZlbmRvckV4dGVuc2lvblwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcInJlcXVpcmVkXCI6IFtcbiAgICAgICAgXCJyZXF1aXJlZFwiXG4gICAgICBdLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJyZXF1aXJlZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICAgXSxcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0aGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBvciBvcHRpb25hbC5cIlxuICAgICAgICB9LFxuICAgICAgICBcImluXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRGV0ZXJtaW5lcyB0aGUgbG9jYXRpb24gb2YgdGhlIHBhcmFtZXRlci5cIixcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJwYXRoXCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGJyaWVmIGRlc2NyaXB0aW9uIG9mIHRoZSBwYXJhbWV0ZXIuIFRoaXMgY291bGQgY29udGFpbiBleGFtcGxlcyBvZiB1c2UuICBHaXRIdWIgRmxhdm9yZWQgTWFya2Rvd24gaXMgYWxsb3dlZC5cIlxuICAgICAgICB9LFxuICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgbmFtZSBvZiB0aGUgcGFyYW1ldGVyLlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidHlwZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcIm51bWJlclwiLFxuICAgICAgICAgICAgXCJib29sZWFuXCIsXG4gICAgICAgICAgICBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiYXJyYXlcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJmb3JtYXRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvcHJpbWl0aXZlc0l0ZW1zXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjb2xsZWN0aW9uRm9ybWF0XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2NvbGxlY3Rpb25Gb3JtYXRcIlxuICAgICAgICB9LFxuICAgICAgICBcImRlZmF1bHRcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvZGVmYXVsdFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWF4aW11bVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9tYXhpbXVtXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJleGNsdXNpdmVNYXhpbXVtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2V4Y2x1c2l2ZU1heGltdW1cIlxuICAgICAgICB9LFxuICAgICAgICBcIm1pbmltdW1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbWluaW11bVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXhjbHVzaXZlTWluaW11bVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9leGNsdXNpdmVNaW5pbXVtXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtYXhMZW5ndGhcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbWF4TGVuZ3RoXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtaW5MZW5ndGhcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbWluTGVuZ3RoXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwYXR0ZXJuXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3BhdHRlcm5cIlxuICAgICAgICB9LFxuICAgICAgICBcIm1heEl0ZW1zXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL21heEl0ZW1zXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtaW5JdGVtc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9taW5JdGVtc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwidW5pcXVlSXRlbXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvdW5pcXVlSXRlbXNcIlxuICAgICAgICB9LFxuICAgICAgICBcImVudW1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvZW51bVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibXVsdGlwbGVPZlwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9tdWx0aXBsZU9mXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJub25Cb2R5UGFyYW1ldGVyXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgIFwibmFtZVwiLFxuICAgICAgICBcImluXCIsXG4gICAgICAgIFwidHlwZVwiXG4gICAgICBdLFxuICAgICAgXCJvbmVPZlwiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2hlYWRlclBhcmFtZXRlclN1YlNjaGVtYVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2Zvcm1EYXRhUGFyYW1ldGVyU3ViU2NoZW1hXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvcXVlcnlQYXJhbWV0ZXJTdWJTY2hlbWFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9wYXRoUGFyYW1ldGVyU3ViU2NoZW1hXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAgXCJwYXJhbWV0ZXJcIjoge1xuICAgICAgXCJvbmVPZlwiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2JvZHlQYXJhbWV0ZXJcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9ub25Cb2R5UGFyYW1ldGVyXCJcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0sXG4gICAgXCJzY2hlbWFcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBkZXRlcm1pbmlzdGljIHZlcnNpb24gb2YgYSBKU09OIFNjaGVtYSBvYmplY3QuXCIsXG4gICAgICBcInBhdHRlcm5Qcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJeeC1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvdmVuZG9yRXh0ZW5zaW9uXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiJHJlZlwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJmb3JtYXRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGl0bGVcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL3RpdGxlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEjL3Byb3BlcnRpZXMvZGVzY3JpcHRpb25cIlxuICAgICAgICB9LFxuICAgICAgICBcImRlZmF1bHRcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL2RlZmF1bHRcIlxuICAgICAgICB9LFxuICAgICAgICBcIm11bHRpcGxlT2ZcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL211bHRpcGxlT2ZcIlxuICAgICAgICB9LFxuICAgICAgICBcIm1heGltdW1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL21heGltdW1cIlxuICAgICAgICB9LFxuICAgICAgICBcImV4Y2x1c2l2ZU1heGltdW1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL2V4Y2x1c2l2ZU1heGltdW1cIlxuICAgICAgICB9LFxuICAgICAgICBcIm1pbmltdW1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL21pbmltdW1cIlxuICAgICAgICB9LFxuICAgICAgICBcImV4Y2x1c2l2ZU1pbmltdW1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL2V4Y2x1c2l2ZU1pbmltdW1cIlxuICAgICAgICB9LFxuICAgICAgICBcIm1heExlbmd0aFwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEjL2RlZmluaXRpb25zL3Bvc2l0aXZlSW50ZWdlclwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWluTGVuZ3RoXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCJodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSMvZGVmaW5pdGlvbnMvcG9zaXRpdmVJbnRlZ2VyRGVmYXVsdDBcIlxuICAgICAgICB9LFxuICAgICAgICBcInBhdHRlcm5cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL3BhdHRlcm5cIlxuICAgICAgICB9LFxuICAgICAgICBcIm1heEl0ZW1zXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCJodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSMvZGVmaW5pdGlvbnMvcG9zaXRpdmVJbnRlZ2VyXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtaW5JdGVtc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEjL2RlZmluaXRpb25zL3Bvc2l0aXZlSW50ZWdlckRlZmF1bHQwXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ1bmlxdWVJdGVtc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEjL3Byb3BlcnRpZXMvdW5pcXVlSXRlbXNcIlxuICAgICAgICB9LFxuICAgICAgICBcIm1heFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9kZWZpbml0aW9ucy9wb3NpdGl2ZUludGVnZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcIm1pblByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9kZWZpbml0aW9ucy9wb3NpdGl2ZUludGVnZXJEZWZhdWx0MFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVxdWlyZWRcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9kZWZpbml0aW9ucy9zdHJpbmdBcnJheVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZW51bVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEjL3Byb3BlcnRpZXMvZW51bVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiYW55T2ZcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3NjaGVtYVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiB7fVxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL3R5cGVcIlxuICAgICAgICB9LFxuICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICBcImFueU9mXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9zY2hlbWFcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICAgICAgXCJtaW5JdGVtc1wiOiAxLFxuICAgICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3NjaGVtYVwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiB7fVxuICAgICAgICB9LFxuICAgICAgICBcImFsbE9mXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgIFwibWluSXRlbXNcIjogMSxcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvc2NoZW1hXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3NjaGVtYVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRlZmF1bHRcIjoge31cbiAgICAgICAgfSxcbiAgICAgICAgXCJkaXNjcmltaW5hdG9yXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcInJlYWRPbmx5XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIFwieG1sXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3htbFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXh0ZXJuYWxEb2NzXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2V4dGVybmFsRG9jc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXhhbXBsZVwiOiB7fVxuICAgICAgfSxcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogZmFsc2VcbiAgICB9LFxuICAgIFwiZmlsZVNjaGVtYVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGRldGVybWluaXN0aWMgdmVyc2lvbiBvZiBhIEpTT04gU2NoZW1hIG9iamVjdC5cIixcbiAgICAgIFwicGF0dGVyblByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIl54LVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy92ZW5kb3JFeHRlbnNpb25cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgIFwidHlwZVwiXG4gICAgICBdLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJmb3JtYXRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGl0bGVcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL3RpdGxlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEjL3Byb3BlcnRpZXMvZGVzY3JpcHRpb25cIlxuICAgICAgICB9LFxuICAgICAgICBcImRlZmF1bHRcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL2RlZmF1bHRcIlxuICAgICAgICB9LFxuICAgICAgICBcInJlcXVpcmVkXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCJodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSMvZGVmaW5pdGlvbnMvc3RyaW5nQXJyYXlcIlxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgICBcImZpbGVcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJyZWFkT25seVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgIFwiZGVmYXVsdFwiOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBcImV4dGVybmFsRG9jc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9leHRlcm5hbERvY3NcIlxuICAgICAgICB9LFxuICAgICAgICBcImV4YW1wbGVcIjoge31cbiAgICAgIH0sXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IGZhbHNlXG4gICAgfSxcbiAgICBcInByaW1pdGl2ZXNJdGVtc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogZmFsc2UsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcInR5cGVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgICBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJudW1iZXJcIixcbiAgICAgICAgICAgIFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJib29sZWFuXCIsXG4gICAgICAgICAgICBcImFycmF5XCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwiZm9ybWF0XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3ByaW1pdGl2ZXNJdGVtc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY29sbGVjdGlvbkZvcm1hdFwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9jb2xsZWN0aW9uRm9ybWF0XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkZWZhdWx0XCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2RlZmF1bHRcIlxuICAgICAgICB9LFxuICAgICAgICBcIm1heGltdW1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbWF4aW11bVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXhjbHVzaXZlTWF4aW11bVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9leGNsdXNpdmVNYXhpbXVtXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtaW5pbXVtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL21pbmltdW1cIlxuICAgICAgICB9LFxuICAgICAgICBcImV4Y2x1c2l2ZU1pbmltdW1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvZXhjbHVzaXZlTWluaW11bVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWF4TGVuZ3RoXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL21heExlbmd0aFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWluTGVuZ3RoXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL21pbkxlbmd0aFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicGF0dGVyblwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9wYXR0ZXJuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtYXhJdGVtc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9tYXhJdGVtc1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWluSXRlbXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbWluSXRlbXNcIlxuICAgICAgICB9LFxuICAgICAgICBcInVuaXF1ZUl0ZW1zXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3VuaXF1ZUl0ZW1zXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJlbnVtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2VudW1cIlxuICAgICAgICB9LFxuICAgICAgICBcIm11bHRpcGxlT2ZcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvbXVsdGlwbGVPZlwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcInBhdHRlcm5Qcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJeeC1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvdmVuZG9yRXh0ZW5zaW9uXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJzZWN1cml0eVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvc2VjdXJpdHlSZXF1aXJlbWVudFwiXG4gICAgICB9LFxuICAgICAgXCJ1bmlxdWVJdGVtc1wiOiB0cnVlXG4gICAgfSxcbiAgICBcInNlY3VyaXR5UmVxdWlyZW1lbnRcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ1bmlxdWVJdGVtc1wiOiB0cnVlXG4gICAgICB9XG4gICAgfSxcbiAgICBcInhtbFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjogZmFsc2UsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwibmFtZXNwYWNlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcInByZWZpeFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJhdHRyaWJ1dGVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICBcImRlZmF1bHRcIjogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgXCJ3cmFwcGVkXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgXCJkZWZhdWx0XCI6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcInBhdHRlcm5Qcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJeeC1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvdmVuZG9yRXh0ZW5zaW9uXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJ0YWdcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IGZhbHNlLFxuICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgIFwibmFtZVwiXG4gICAgICBdLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJuYW1lXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICB9LFxuICAgICAgICBcImV4dGVybmFsRG9jc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9leHRlcm5hbERvY3NcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJwYXR0ZXJuUHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiXngtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3ZlbmRvckV4dGVuc2lvblwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwic2VjdXJpdHlEZWZpbml0aW9uc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIm9uZU9mXCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2Jhc2ljQXV0aGVudGljYXRpb25TZWN1cml0eVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL2FwaUtleVNlY3VyaXR5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb2F1dGgySW1wbGljaXRTZWN1cml0eVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL29hdXRoMlBhc3N3b3JkU2VjdXJpdHlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vYXV0aDJBcHBsaWNhdGlvblNlY3VyaXR5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb2F1dGgyQWNjZXNzQ29kZVNlY3VyaXR5XCJcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwiYmFzaWNBdXRoZW50aWNhdGlvblNlY3VyaXR5XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiBmYWxzZSxcbiAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICBcInR5cGVcIlxuICAgICAgXSxcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwiYmFzaWNcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwicGF0dGVyblByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIl54LVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy92ZW5kb3JFeHRlbnNpb25cIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcImFwaUtleVNlY3VyaXR5XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiBmYWxzZSxcbiAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICBcInR5cGVcIixcbiAgICAgICAgXCJuYW1lXCIsXG4gICAgICAgIFwiaW5cIlxuICAgICAgXSxcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwiYXBpS2V5XCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJpblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwiaGVhZGVyXCIsXG4gICAgICAgICAgICBcInF1ZXJ5XCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcInBhdHRlcm5Qcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJeeC1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvdmVuZG9yRXh0ZW5zaW9uXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJvYXV0aDJJbXBsaWNpdFNlY3VyaXR5XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiBmYWxzZSxcbiAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICBcInR5cGVcIixcbiAgICAgICAgXCJmbG93XCIsXG4gICAgICAgIFwiYXV0aG9yaXphdGlvblVybFwiXG4gICAgICBdLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJvYXV0aDJcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJmbG93XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJpbXBsaWNpdFwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcInNjb3Blc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vYXV0aDJTY29wZXNcIlxuICAgICAgICB9LFxuICAgICAgICBcImF1dGhvcml6YXRpb25VcmxcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZm9ybWF0XCI6IFwidXJpXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwicGF0dGVyblByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIl54LVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy92ZW5kb3JFeHRlbnNpb25cIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcIm9hdXRoMlBhc3N3b3JkU2VjdXJpdHlcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI6IGZhbHNlLFxuICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgIFwidHlwZVwiLFxuICAgICAgICBcImZsb3dcIixcbiAgICAgICAgXCJ0b2tlblVybFwiXG4gICAgICBdLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJvYXV0aDJcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJmbG93XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJwYXNzd29yZFwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcInNjb3Blc1wiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9vYXV0aDJTY29wZXNcIlxuICAgICAgICB9LFxuICAgICAgICBcInRva2VuVXJsXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImZvcm1hdFwiOiBcInVyaVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcInBhdHRlcm5Qcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJeeC1cIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvdmVuZG9yRXh0ZW5zaW9uXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJvYXV0aDJBcHBsaWNhdGlvblNlY3VyaXR5XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiBmYWxzZSxcbiAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICBcInR5cGVcIixcbiAgICAgICAgXCJmbG93XCIsXG4gICAgICAgIFwidG9rZW5VcmxcIlxuICAgICAgXSxcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwib2F1dGgyXCJcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwiZmxvd1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgIFwiYXBwbGljYXRpb25cIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJzY29wZXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb2F1dGgyU2NvcGVzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0b2tlblVybFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJmb3JtYXRcIjogXCJ1cmlcIlxuICAgICAgICB9LFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJwYXR0ZXJuUHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiXngtXCI6IHtcbiAgICAgICAgICBcIiRyZWZcIjogXCIjL2RlZmluaXRpb25zL3ZlbmRvckV4dGVuc2lvblwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwib2F1dGgyQWNjZXNzQ29kZVNlY3VyaXR5XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiBmYWxzZSxcbiAgICAgIFwicmVxdWlyZWRcIjogW1xuICAgICAgICBcInR5cGVcIixcbiAgICAgICAgXCJmbG93XCIsXG4gICAgICAgIFwiYXV0aG9yaXphdGlvblVybFwiLFxuICAgICAgICBcInRva2VuVXJsXCJcbiAgICAgIF0sXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcInR5cGVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgICBcIm9hdXRoMlwiXG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBcImZsb3dcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgICBcImFjY2Vzc0NvZGVcIlxuICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgXCJzY29wZXNcIjoge1xuICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvb2F1dGgyU2NvcGVzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJhdXRob3JpemF0aW9uVXJsXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImZvcm1hdFwiOiBcInVyaVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidG9rZW5VcmxcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZm9ybWF0XCI6IFwidXJpXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwicGF0dGVyblByb3BlcnRpZXNcIjoge1xuICAgICAgICBcIl54LVwiOiB7XG4gICAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy92ZW5kb3JFeHRlbnNpb25cIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcIm9hdXRoMlNjb3Blc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgfVxuICAgIH0sXG4gICAgXCJtZWRpYVR5cGVMaXN0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgXCIkcmVmXCI6IFwiIy9kZWZpbml0aW9ucy9taW1lVHlwZVwiXG4gICAgICB9LFxuICAgICAgXCJ1bmlxdWVJdGVtc1wiOiB0cnVlXG4gICAgfSxcbiAgICBcInBhcmFtZXRlcnNMaXN0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHBhcmFtZXRlcnMgbmVlZGVkIHRvIHNlbmQgYSB2YWxpZCBBUEkgY2FsbC5cIixcbiAgICAgIFwiYWRkaXRpb25hbEl0ZW1zXCI6IGZhbHNlLFxuICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgIFwib25lT2ZcIjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvcGFyYW1ldGVyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiJHJlZlwiOiBcIiMvZGVmaW5pdGlvbnMvanNvblJlZmVyZW5jZVwiXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgXCJ1bmlxdWVJdGVtc1wiOiB0cnVlXG4gICAgfSxcbiAgICBcInNjaGVtZXNMaXN0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHRyYW5zZmVyIHByb3RvY29sIG9mIHRoZSBBUEkuXCIsXG4gICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgXCJodHRwXCIsXG4gICAgICAgICAgXCJodHRwc1wiLFxuICAgICAgICAgIFwid3NcIixcbiAgICAgICAgICBcIndzc1wiXG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBcInVuaXF1ZUl0ZW1zXCI6IHRydWVcbiAgICB9LFxuICAgIFwiY29sbGVjdGlvbkZvcm1hdFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgIFwiY3N2XCIsXG4gICAgICAgIFwic3N2XCIsXG4gICAgICAgIFwidHN2XCIsXG4gICAgICAgIFwicGlwZXNcIlxuICAgICAgXSxcbiAgICAgIFwiZGVmYXVsdFwiOiBcImNzdlwiXG4gICAgfSxcbiAgICBcImNvbGxlY3Rpb25Gb3JtYXRXaXRoTXVsdGlcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImVudW1cIjogW1xuICAgICAgICBcImNzdlwiLFxuICAgICAgICBcInNzdlwiLFxuICAgICAgICBcInRzdlwiLFxuICAgICAgICBcInBpcGVzXCIsXG4gICAgICAgIFwibXVsdGlcIlxuICAgICAgXSxcbiAgICAgIFwiZGVmYXVsdFwiOiBcImNzdlwiXG4gICAgfSxcbiAgICBcInRpdGxlXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL3RpdGxlXCJcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgXCIkcmVmXCI6IFwiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEjL3Byb3BlcnRpZXMvZGVzY3JpcHRpb25cIlxuICAgIH0sXG4gICAgXCJkZWZhdWx0XCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL2RlZmF1bHRcIlxuICAgIH0sXG4gICAgXCJtdWx0aXBsZU9mXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL211bHRpcGxlT2ZcIlxuICAgIH0sXG4gICAgXCJtYXhpbXVtXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL21heGltdW1cIlxuICAgIH0sXG4gICAgXCJleGNsdXNpdmVNYXhpbXVtXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL2V4Y2x1c2l2ZU1heGltdW1cIlxuICAgIH0sXG4gICAgXCJtaW5pbXVtXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL21pbmltdW1cIlxuICAgIH0sXG4gICAgXCJleGNsdXNpdmVNaW5pbXVtXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL2V4Y2x1c2l2ZU1pbmltdW1cIlxuICAgIH0sXG4gICAgXCJtYXhMZW5ndGhcIjoge1xuICAgICAgXCIkcmVmXCI6IFwiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEjL2RlZmluaXRpb25zL3Bvc2l0aXZlSW50ZWdlclwiXG4gICAgfSxcbiAgICBcIm1pbkxlbmd0aFwiOiB7XG4gICAgICBcIiRyZWZcIjogXCJodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSMvZGVmaW5pdGlvbnMvcG9zaXRpdmVJbnRlZ2VyRGVmYXVsdDBcIlxuICAgIH0sXG4gICAgXCJwYXR0ZXJuXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL3BhdHRlcm5cIlxuICAgIH0sXG4gICAgXCJtYXhJdGVtc1wiOiB7XG4gICAgICBcIiRyZWZcIjogXCJodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSMvZGVmaW5pdGlvbnMvcG9zaXRpdmVJbnRlZ2VyXCJcbiAgICB9LFxuICAgIFwibWluSXRlbXNcIjoge1xuICAgICAgXCIkcmVmXCI6IFwiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEjL2RlZmluaXRpb25zL3Bvc2l0aXZlSW50ZWdlckRlZmF1bHQwXCJcbiAgICB9LFxuICAgIFwidW5pcXVlSXRlbXNcIjoge1xuICAgICAgXCIkcmVmXCI6IFwiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNC9zY2hlbWEjL3Byb3BlcnRpZXMvdW5pcXVlSXRlbXNcIlxuICAgIH0sXG4gICAgXCJlbnVtXCI6IHtcbiAgICAgIFwiJHJlZlwiOiBcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDQvc2NoZW1hIy9wcm9wZXJ0aWVzL2VudW1cIlxuICAgIH0sXG4gICAgXCJqc29uUmVmZXJlbmNlXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJyZXF1aXJlZFwiOiBbXG4gICAgICAgIFwiJHJlZlwiXG4gICAgICBdLFxuICAgICAgXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiOiBmYWxzZSxcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiJHJlZlwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSIsInZhciBuZXh0VGljayA9IHJlcXVpcmUoJ3Byb2Nlc3MvYnJvd3Nlci5qcycpLm5leHRUaWNrO1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIGltbWVkaWF0ZUlkcyA9IHt9O1xudmFyIG5leHRJbW1lZGlhdGVJZCA9IDA7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7IHRpbWVvdXQuY2xvc2UoKTsgfTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbCh3aW5kb3csIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBUaGF0J3Mgbm90IGhvdyBub2RlLmpzIGltcGxlbWVudHMgaXQgYnV0IHRoZSBleHBvc2VkIGFwaSBpcyB0aGUgc2FtZS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gXCJmdW5jdGlvblwiID8gc2V0SW1tZWRpYXRlIDogZnVuY3Rpb24oZm4pIHtcbiAgdmFyIGlkID0gbmV4dEltbWVkaWF0ZUlkKys7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBmYWxzZSA6IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICBpbW1lZGlhdGVJZHNbaWRdID0gdHJ1ZTtcblxuICBuZXh0VGljayhmdW5jdGlvbiBvbk5leHRUaWNrKCkge1xuICAgIGlmIChpbW1lZGlhdGVJZHNbaWRdKSB7XG4gICAgICAvLyBmbi5jYWxsKCkgaXMgZmFzdGVyIHNvIHdlIG9wdGltaXplIGZvciB0aGUgY29tbW9uIHVzZS1jYXNlXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2NhbGwtYXBwbHktc2VndVxuICAgICAgaWYgKGFyZ3MpIHtcbiAgICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmbi5jYWxsKG51bGwpO1xuICAgICAgfVxuICAgICAgLy8gUHJldmVudCBpZHMgZnJvbSBsZWFraW5nXG4gICAgICBleHBvcnRzLmNsZWFySW1tZWRpYXRlKGlkKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBpZDtcbn07XG5cbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSB0eXBlb2YgY2xlYXJJbW1lZGlhdGUgPT09IFwiZnVuY3Rpb25cIiA/IGNsZWFySW1tZWRpYXRlIDogZnVuY3Rpb24oaWQpIHtcbiAgZGVsZXRlIGltbWVkaWF0ZUlkc1tpZF07XG59OyIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYnVmKSB7XG5cdC8vIElmIHRoZSBidWZmZXIgaXMgYmFja2VkIGJ5IGEgVWludDhBcnJheSwgYSBmYXN0ZXIgdmVyc2lvbiB3aWxsIHdvcmtcblx0aWYgKGJ1ZiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcblx0XHQvLyBJZiB0aGUgYnVmZmVyIGlzbid0IGEgc3ViYXJyYXksIHJldHVybiB0aGUgdW5kZXJseWluZyBBcnJheUJ1ZmZlclxuXHRcdGlmIChidWYuYnl0ZU9mZnNldCA9PT0gMCAmJiBidWYuYnl0ZUxlbmd0aCA9PT0gYnVmLmJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gYnVmLmJ1ZmZlclxuXHRcdH0gZWxzZSBpZiAodHlwZW9mIGJ1Zi5idWZmZXIuc2xpY2UgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIHRvIGdldCBhIHByb3BlciBjb3B5XG5cdFx0XHRyZXR1cm4gYnVmLmJ1ZmZlci5zbGljZShidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVPZmZzZXQgKyBidWYuYnl0ZUxlbmd0aClcblx0XHR9XG5cdH1cblxuXHRpZiAoQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcblx0XHQvLyBUaGlzIGlzIHRoZSBzbG93IHZlcnNpb24gdGhhdCB3aWxsIHdvcmsgd2l0aCBhbnkgQnVmZmVyXG5cdFx0Ly8gaW1wbGVtZW50YXRpb24gKGV2ZW4gaW4gb2xkIGJyb3dzZXJzKVxuXHRcdHZhciBhcnJheUNvcHkgPSBuZXcgVWludDhBcnJheShidWYubGVuZ3RoKVxuXHRcdHZhciBsZW4gPSBidWYubGVuZ3RoXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0YXJyYXlDb3B5W2ldID0gYnVmW2ldXG5cdFx0fVxuXHRcdHJldHVybiBhcnJheUNvcHkuYnVmZmVyXG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcblx0fVxufVxuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIGdsb2JhbCwgZGVmaW5lLCBTeXN0ZW0sIFJlZmxlY3QsIFByb21pc2UgKi9cclxudmFyIF9fZXh0ZW5kcztcclxudmFyIF9fYXNzaWduO1xyXG52YXIgX19yZXN0O1xyXG52YXIgX19kZWNvcmF0ZTtcclxudmFyIF9fcGFyYW07XHJcbnZhciBfX21ldGFkYXRhO1xyXG52YXIgX19hd2FpdGVyO1xyXG52YXIgX19nZW5lcmF0b3I7XHJcbnZhciBfX2V4cG9ydFN0YXI7XHJcbnZhciBfX3ZhbHVlcztcclxudmFyIF9fcmVhZDtcclxudmFyIF9fc3ByZWFkO1xyXG52YXIgX19hd2FpdDtcclxudmFyIF9fYXN5bmNHZW5lcmF0b3I7XHJcbnZhciBfX2FzeW5jRGVsZWdhdG9yO1xyXG52YXIgX19hc3luY1ZhbHVlcztcclxudmFyIF9fbWFrZVRlbXBsYXRlT2JqZWN0O1xyXG52YXIgX19pbXBvcnRTdGFyO1xyXG52YXIgX19pbXBvcnREZWZhdWx0O1xyXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcclxuICAgIHZhciByb290ID0gdHlwZW9mIGdsb2JhbCA9PT0gXCJvYmplY3RcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6IHR5cGVvZiB0aGlzID09PSBcIm9iamVjdFwiID8gdGhpcyA6IHt9O1xyXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAgICAgZGVmaW5lKFwidHNsaWJcIiwgW1wiZXhwb3J0c1wiXSwgZnVuY3Rpb24gKGV4cG9ydHMpIHsgZmFjdG9yeShjcmVhdGVFeHBvcnRlcihyb290LCBjcmVhdGVFeHBvcnRlcihleHBvcnRzKSkpOyB9KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgZmFjdG9yeShjcmVhdGVFeHBvcnRlcihyb290LCBjcmVhdGVFeHBvcnRlcihtb2R1bGUuZXhwb3J0cykpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGZhY3RvcnkoY3JlYXRlRXhwb3J0ZXIocm9vdCkpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gY3JlYXRlRXhwb3J0ZXIoZXhwb3J0cywgcHJldmlvdXMpIHtcclxuICAgICAgICBpZiAoZXhwb3J0cyAhPT0gcm9vdCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGlkLCB2KSB7IHJldHVybiBleHBvcnRzW2lkXSA9IHByZXZpb3VzID8gcHJldmlvdXMoaWQsIHYpIDogdjsgfTtcclxuICAgIH1cclxufSlcclxuKGZ1bmN0aW9uIChleHBvcnRlcikge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcblxyXG4gICAgX19leHRlbmRzID0gZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcblxyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuXHJcbiAgICBfX3Jlc3QgPSBmdW5jdGlvbiAocywgZSkge1xyXG4gICAgICAgIHZhciB0ID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDApXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcblxyXG4gICAgX19kZWNvcmF0ZSA9IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgICAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fcGFyYW0gPSBmdW5jdGlvbiAocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbiAgICB9O1xyXG5cclxuICAgIF9fbWV0YWRhdGEgPSBmdW5jdGlvbiAobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2F3YWl0ZXIgPSBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgX19nZW5lcmF0b3IgPSBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xyXG4gICAgICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICAgICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICAgICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfX2V4cG9ydFN0YXIgPSBmdW5jdGlvbiAobSwgZXhwb3J0cykge1xyXG4gICAgICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxuICAgIH07XHJcblxyXG4gICAgX192YWx1ZXMgPSBmdW5jdGlvbiAobykge1xyXG4gICAgICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSwgaSA9IDA7XHJcbiAgICAgICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIF9fcmVhZCA9IGZ1bmN0aW9uIChvLCBuKSB7XHJcbiAgICAgICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICAgICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcjtcclxuICAgIH07XHJcblxyXG4gICAgX19zcHJlYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgICAgICByZXR1cm4gYXI7XHJcbiAgICB9O1xyXG5cclxuICAgIF9fYXdhaXQgPSBmdW5jdGlvbiAodikge1xyXG4gICAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG4gICAgfTtcclxuXHJcbiAgICBfX2FzeW5jR2VuZXJhdG9yID0gZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICAgICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgICAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICAgICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgIH1cclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxuICAgIH07XHJcblxyXG4gICAgX19hc3luY0RlbGVnYXRvciA9IGZ1bmN0aW9uIChvKSB7XHJcbiAgICAgICAgdmFyIGksIHA7XHJcbiAgICAgICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgICAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbiAgICB9O1xyXG5cclxuICAgIF9fYXN5bmNWYWx1ZXMgPSBmdW5jdGlvbiAobykge1xyXG4gICAgICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICAgICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgICAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICAgICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxuICAgIH07XHJcblxyXG4gICAgX19tYWtlVGVtcGxhdGVPYmplY3QgPSBmdW5jdGlvbiAoY29va2VkLCByYXcpIHtcclxuICAgICAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgICAgIHJldHVybiBjb29rZWQ7XHJcbiAgICB9O1xyXG5cclxuICAgIF9faW1wb3J0U3RhciA9IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgICAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgICAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgICAgIHJlc3VsdFtcImRlZmF1bHRcIl0gPSBtb2Q7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG4gICAgX19pbXBvcnREZWZhdWx0ID0gZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnRlcihcIl9fZXh0ZW5kc1wiLCBfX2V4dGVuZHMpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2Fzc2lnblwiLCBfX2Fzc2lnbik7XHJcbiAgICBleHBvcnRlcihcIl9fcmVzdFwiLCBfX3Jlc3QpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2RlY29yYXRlXCIsIF9fZGVjb3JhdGUpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX3BhcmFtXCIsIF9fcGFyYW0pO1xyXG4gICAgZXhwb3J0ZXIoXCJfX21ldGFkYXRhXCIsIF9fbWV0YWRhdGEpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2F3YWl0ZXJcIiwgX19hd2FpdGVyKTtcclxuICAgIGV4cG9ydGVyKFwiX19nZW5lcmF0b3JcIiwgX19nZW5lcmF0b3IpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2V4cG9ydFN0YXJcIiwgX19leHBvcnRTdGFyKTtcclxuICAgIGV4cG9ydGVyKFwiX192YWx1ZXNcIiwgX192YWx1ZXMpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX3JlYWRcIiwgX19yZWFkKTtcclxuICAgIGV4cG9ydGVyKFwiX19zcHJlYWRcIiwgX19zcHJlYWQpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2F3YWl0XCIsIF9fYXdhaXQpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2FzeW5jR2VuZXJhdG9yXCIsIF9fYXN5bmNHZW5lcmF0b3IpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2FzeW5jRGVsZWdhdG9yXCIsIF9fYXN5bmNEZWxlZ2F0b3IpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2FzeW5jVmFsdWVzXCIsIF9fYXN5bmNWYWx1ZXMpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX21ha2VUZW1wbGF0ZU9iamVjdFwiLCBfX21ha2VUZW1wbGF0ZU9iamVjdCk7XHJcbiAgICBleHBvcnRlcihcIl9faW1wb3J0U3RhclwiLCBfX2ltcG9ydFN0YXIpO1xyXG4gICAgZXhwb3J0ZXIoXCJfX2ltcG9ydERlZmF1bHRcIiwgX19pbXBvcnREZWZhdWx0KTtcclxufSk7XHJcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBwdW55Y29kZSA9IHJlcXVpcmUoJ3B1bnljb2RlJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG5leHBvcnRzLnBhcnNlID0gdXJsUGFyc2U7XG5leHBvcnRzLnJlc29sdmUgPSB1cmxSZXNvbHZlO1xuZXhwb3J0cy5yZXNvbHZlT2JqZWN0ID0gdXJsUmVzb2x2ZU9iamVjdDtcbmV4cG9ydHMuZm9ybWF0ID0gdXJsRm9ybWF0O1xuXG5leHBvcnRzLlVybCA9IFVybDtcblxuZnVuY3Rpb24gVXJsKCkge1xuICB0aGlzLnByb3RvY29sID0gbnVsbDtcbiAgdGhpcy5zbGFzaGVzID0gbnVsbDtcbiAgdGhpcy5hdXRoID0gbnVsbDtcbiAgdGhpcy5ob3N0ID0gbnVsbDtcbiAgdGhpcy5wb3J0ID0gbnVsbDtcbiAgdGhpcy5ob3N0bmFtZSA9IG51bGw7XG4gIHRoaXMuaGFzaCA9IG51bGw7XG4gIHRoaXMuc2VhcmNoID0gbnVsbDtcbiAgdGhpcy5xdWVyeSA9IG51bGw7XG4gIHRoaXMucGF0aG5hbWUgPSBudWxsO1xuICB0aGlzLnBhdGggPSBudWxsO1xuICB0aGlzLmhyZWYgPSBudWxsO1xufVxuXG4vLyBSZWZlcmVuY2U6IFJGQyAzOTg2LCBSRkMgMTgwOCwgUkZDIDIzOTZcblxuLy8gZGVmaW5lIHRoZXNlIGhlcmUgc28gYXQgbGVhc3QgdGhleSBvbmx5IGhhdmUgdG8gYmVcbi8vIGNvbXBpbGVkIG9uY2Ugb24gdGhlIGZpcnN0IG1vZHVsZSBsb2FkLlxudmFyIHByb3RvY29sUGF0dGVybiA9IC9eKFthLXowLTkuKy1dKzopL2ksXG4gICAgcG9ydFBhdHRlcm4gPSAvOlswLTldKiQvLFxuXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciBhIHNpbXBsZSBwYXRoIFVSTFxuICAgIHNpbXBsZVBhdGhQYXR0ZXJuID0gL14oXFwvXFwvPyg/IVxcLylbXlxcP1xcc10qKShcXD9bXlxcc10qKT8kLyxcblxuICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIHJlc2VydmVkIGZvciBkZWxpbWl0aW5nIFVSTHMuXG4gICAgLy8gV2UgYWN0dWFsbHkganVzdCBhdXRvLWVzY2FwZSB0aGVzZS5cbiAgICBkZWxpbXMgPSBbJzwnLCAnPicsICdcIicsICdgJywgJyAnLCAnXFxyJywgJ1xcbicsICdcXHQnXSxcblxuICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIG5vdCBhbGxvd2VkIGZvciB2YXJpb3VzIHJlYXNvbnMuXG4gICAgdW53aXNlID0gWyd7JywgJ30nLCAnfCcsICdcXFxcJywgJ14nLCAnYCddLmNvbmNhdChkZWxpbXMpLFxuXG4gICAgLy8gQWxsb3dlZCBieSBSRkNzLCBidXQgY2F1c2Ugb2YgWFNTIGF0dGFja3MuICBBbHdheXMgZXNjYXBlIHRoZXNlLlxuICAgIGF1dG9Fc2NhcGUgPSBbJ1xcJyddLmNvbmNhdCh1bndpc2UpLFxuICAgIC8vIENoYXJhY3RlcnMgdGhhdCBhcmUgbmV2ZXIgZXZlciBhbGxvd2VkIGluIGEgaG9zdG5hbWUuXG4gICAgLy8gTm90ZSB0aGF0IGFueSBpbnZhbGlkIGNoYXJzIGFyZSBhbHNvIGhhbmRsZWQsIGJ1dCB0aGVzZVxuICAgIC8vIGFyZSB0aGUgb25lcyB0aGF0IGFyZSAqZXhwZWN0ZWQqIHRvIGJlIHNlZW4sIHNvIHdlIGZhc3QtcGF0aFxuICAgIC8vIHRoZW0uXG4gICAgbm9uSG9zdENoYXJzID0gWyclJywgJy8nLCAnPycsICc7JywgJyMnXS5jb25jYXQoYXV0b0VzY2FwZSksXG4gICAgaG9zdEVuZGluZ0NoYXJzID0gWycvJywgJz8nLCAnIyddLFxuICAgIGhvc3RuYW1lTWF4TGVuID0gMjU1LFxuICAgIGhvc3RuYW1lUGFydFBhdHRlcm4gPSAvXlsrYS16MC05QS1aXy1dezAsNjN9JC8sXG4gICAgaG9zdG5hbWVQYXJ0U3RhcnQgPSAvXihbK2EtejAtOUEtWl8tXXswLDYzfSkoLiopJC8sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgY2FuIGFsbG93IFwidW5zYWZlXCIgYW5kIFwidW53aXNlXCIgY2hhcnMuXG4gICAgdW5zYWZlUHJvdG9jb2wgPSB7XG4gICAgICAnamF2YXNjcmlwdCc6IHRydWUsXG4gICAgICAnamF2YXNjcmlwdDonOiB0cnVlXG4gICAgfSxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBuZXZlciBoYXZlIGEgaG9zdG5hbWUuXG4gICAgaG9zdGxlc3NQcm90b2NvbCA9IHtcbiAgICAgICdqYXZhc2NyaXB0JzogdHJ1ZSxcbiAgICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgICB9LFxuICAgIC8vIHByb3RvY29scyB0aGF0IGFsd2F5cyBjb250YWluIGEgLy8gYml0LlxuICAgIHNsYXNoZWRQcm90b2NvbCA9IHtcbiAgICAgICdodHRwJzogdHJ1ZSxcbiAgICAgICdodHRwcyc6IHRydWUsXG4gICAgICAnZnRwJzogdHJ1ZSxcbiAgICAgICdnb3BoZXInOiB0cnVlLFxuICAgICAgJ2ZpbGUnOiB0cnVlLFxuICAgICAgJ2h0dHA6JzogdHJ1ZSxcbiAgICAgICdodHRwczonOiB0cnVlLFxuICAgICAgJ2Z0cDonOiB0cnVlLFxuICAgICAgJ2dvcGhlcjonOiB0cnVlLFxuICAgICAgJ2ZpbGU6JzogdHJ1ZVxuICAgIH0sXG4gICAgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpO1xuXG5mdW5jdGlvbiB1cmxQYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7XG4gIGlmICh1cmwgJiYgdXRpbC5pc09iamVjdCh1cmwpICYmIHVybCBpbnN0YW5jZW9mIFVybCkgcmV0dXJuIHVybDtcblxuICB2YXIgdSA9IG5ldyBVcmw7XG4gIHUucGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCk7XG4gIHJldHVybiB1O1xufVxuXG5VcmwucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24odXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAoIXV0aWwuaXNTdHJpbmcodXJsKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQYXJhbWV0ZXIgJ3VybCcgbXVzdCBiZSBhIHN0cmluZywgbm90IFwiICsgdHlwZW9mIHVybCk7XG4gIH1cblxuICAvLyBDb3B5IGNocm9tZSwgSUUsIG9wZXJhIGJhY2tzbGFzaC1oYW5kbGluZyBiZWhhdmlvci5cbiAgLy8gQmFjayBzbGFzaGVzIGJlZm9yZSB0aGUgcXVlcnkgc3RyaW5nIGdldCBjb252ZXJ0ZWQgdG8gZm9yd2FyZCBzbGFzaGVzXG4gIC8vIFNlZTogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI1OTE2XG4gIHZhciBxdWVyeUluZGV4ID0gdXJsLmluZGV4T2YoJz8nKSxcbiAgICAgIHNwbGl0dGVyID1cbiAgICAgICAgICAocXVlcnlJbmRleCAhPT0gLTEgJiYgcXVlcnlJbmRleCA8IHVybC5pbmRleE9mKCcjJykpID8gJz8nIDogJyMnLFxuICAgICAgdVNwbGl0ID0gdXJsLnNwbGl0KHNwbGl0dGVyKSxcbiAgICAgIHNsYXNoUmVnZXggPSAvXFxcXC9nO1xuICB1U3BsaXRbMF0gPSB1U3BsaXRbMF0ucmVwbGFjZShzbGFzaFJlZ2V4LCAnLycpO1xuICB1cmwgPSB1U3BsaXQuam9pbihzcGxpdHRlcik7XG5cbiAgdmFyIHJlc3QgPSB1cmw7XG5cbiAgLy8gdHJpbSBiZWZvcmUgcHJvY2VlZGluZy5cbiAgLy8gVGhpcyBpcyB0byBzdXBwb3J0IHBhcnNlIHN0dWZmIGxpa2UgXCIgIGh0dHA6Ly9mb28uY29tICBcXG5cIlxuICByZXN0ID0gcmVzdC50cmltKCk7XG5cbiAgaWYgKCFzbGFzaGVzRGVub3RlSG9zdCAmJiB1cmwuc3BsaXQoJyMnKS5sZW5ndGggPT09IDEpIHtcbiAgICAvLyBUcnkgZmFzdCBwYXRoIHJlZ2V4cFxuICAgIHZhciBzaW1wbGVQYXRoID0gc2ltcGxlUGF0aFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgICBpZiAoc2ltcGxlUGF0aCkge1xuICAgICAgdGhpcy5wYXRoID0gcmVzdDtcbiAgICAgIHRoaXMuaHJlZiA9IHJlc3Q7XG4gICAgICB0aGlzLnBhdGhuYW1lID0gc2ltcGxlUGF0aFsxXTtcbiAgICAgIGlmIChzaW1wbGVQYXRoWzJdKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoID0gc2ltcGxlUGF0aFsyXTtcbiAgICAgICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnlzdHJpbmcucGFyc2UodGhpcy5zZWFyY2guc3Vic3RyKDEpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5zZWFyY2guc3Vic3RyKDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZWFyY2ggPSAnJztcbiAgICAgICAgdGhpcy5xdWVyeSA9IHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG5cbiAgdmFyIHByb3RvID0gcHJvdG9jb2xQYXR0ZXJuLmV4ZWMocmVzdCk7XG4gIGlmIChwcm90bykge1xuICAgIHByb3RvID0gcHJvdG9bMF07XG4gICAgdmFyIGxvd2VyUHJvdG8gPSBwcm90by50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMucHJvdG9jb2wgPSBsb3dlclByb3RvO1xuICAgIHJlc3QgPSByZXN0LnN1YnN0cihwcm90by5sZW5ndGgpO1xuICB9XG5cbiAgLy8gZmlndXJlIG91dCBpZiBpdCdzIGdvdCBhIGhvc3RcbiAgLy8gdXNlckBzZXJ2ZXIgaXMgKmFsd2F5cyogaW50ZXJwcmV0ZWQgYXMgYSBob3N0bmFtZSwgYW5kIHVybFxuICAvLyByZXNvbHV0aW9uIHdpbGwgdHJlYXQgLy9mb28vYmFyIGFzIGhvc3Q9Zm9vLHBhdGg9YmFyIGJlY2F1c2UgdGhhdCdzXG4gIC8vIGhvdyB0aGUgYnJvd3NlciByZXNvbHZlcyByZWxhdGl2ZSBVUkxzLlxuICBpZiAoc2xhc2hlc0Rlbm90ZUhvc3QgfHwgcHJvdG8gfHwgcmVzdC5tYXRjaCgvXlxcL1xcL1teQFxcL10rQFteQFxcL10rLykpIHtcbiAgICB2YXIgc2xhc2hlcyA9IHJlc3Quc3Vic3RyKDAsIDIpID09PSAnLy8nO1xuICAgIGlmIChzbGFzaGVzICYmICEocHJvdG8gJiYgaG9zdGxlc3NQcm90b2NvbFtwcm90b10pKSB7XG4gICAgICByZXN0ID0gcmVzdC5zdWJzdHIoMik7XG4gICAgICB0aGlzLnNsYXNoZXMgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghaG9zdGxlc3NQcm90b2NvbFtwcm90b10gJiZcbiAgICAgIChzbGFzaGVzIHx8IChwcm90byAmJiAhc2xhc2hlZFByb3RvY29sW3Byb3RvXSkpKSB7XG5cbiAgICAvLyB0aGVyZSdzIGEgaG9zdG5hbWUuXG4gICAgLy8gdGhlIGZpcnN0IGluc3RhbmNlIG9mIC8sID8sIDssIG9yICMgZW5kcyB0aGUgaG9zdC5cbiAgICAvL1xuICAgIC8vIElmIHRoZXJlIGlzIGFuIEAgaW4gdGhlIGhvc3RuYW1lLCB0aGVuIG5vbi1ob3N0IGNoYXJzICphcmUqIGFsbG93ZWRcbiAgICAvLyB0byB0aGUgbGVmdCBvZiB0aGUgbGFzdCBAIHNpZ24sIHVubGVzcyBzb21lIGhvc3QtZW5kaW5nIGNoYXJhY3RlclxuICAgIC8vIGNvbWVzICpiZWZvcmUqIHRoZSBALXNpZ24uXG4gICAgLy8gVVJMcyBhcmUgb2Jub3hpb3VzLlxuICAgIC8vXG4gICAgLy8gZXg6XG4gICAgLy8gaHR0cDovL2FAYkBjLyA9PiB1c2VyOmFAYiBob3N0OmNcbiAgICAvLyBodHRwOi8vYUBiP0BjID0+IHVzZXI6YSBob3N0OmMgcGF0aDovP0BjXG5cbiAgICAvLyB2MC4xMiBUT0RPKGlzYWFjcyk6IFRoaXMgaXMgbm90IHF1aXRlIGhvdyBDaHJvbWUgZG9lcyB0aGluZ3MuXG4gICAgLy8gUmV2aWV3IG91ciB0ZXN0IGNhc2UgYWdhaW5zdCBicm93c2VycyBtb3JlIGNvbXByZWhlbnNpdmVseS5cblxuICAgIC8vIGZpbmQgdGhlIGZpcnN0IGluc3RhbmNlIG9mIGFueSBob3N0RW5kaW5nQ2hhcnNcbiAgICB2YXIgaG9zdEVuZCA9IC0xO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9zdEVuZGluZ0NoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKGhvc3RFbmRpbmdDaGFyc1tpXSk7XG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpXG4gICAgICAgIGhvc3RFbmQgPSBoZWM7XG4gICAgfVxuXG4gICAgLy8gYXQgdGhpcyBwb2ludCwgZWl0aGVyIHdlIGhhdmUgYW4gZXhwbGljaXQgcG9pbnQgd2hlcmUgdGhlXG4gICAgLy8gYXV0aCBwb3J0aW9uIGNhbm5vdCBnbyBwYXN0LCBvciB0aGUgbGFzdCBAIGNoYXIgaXMgdGhlIGRlY2lkZXIuXG4gICAgdmFyIGF1dGgsIGF0U2lnbjtcbiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpIHtcbiAgICAgIC8vIGF0U2lnbiBjYW4gYmUgYW55d2hlcmUuXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGF0U2lnbiBtdXN0IGJlIGluIGF1dGggcG9ydGlvbi5cbiAgICAgIC8vIGh0dHA6Ly9hQGIvY0BkID0+IGhvc3Q6YiBhdXRoOmEgcGF0aDovY0BkXG4gICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJywgaG9zdEVuZCk7XG4gICAgfVxuXG4gICAgLy8gTm93IHdlIGhhdmUgYSBwb3J0aW9uIHdoaWNoIGlzIGRlZmluaXRlbHkgdGhlIGF1dGguXG4gICAgLy8gUHVsbCB0aGF0IG9mZi5cbiAgICBpZiAoYXRTaWduICE9PSAtMSkge1xuICAgICAgYXV0aCA9IHJlc3Quc2xpY2UoMCwgYXRTaWduKTtcbiAgICAgIHJlc3QgPSByZXN0LnNsaWNlKGF0U2lnbiArIDEpO1xuICAgICAgdGhpcy5hdXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIH1cblxuICAgIC8vIHRoZSBob3N0IGlzIHRoZSByZW1haW5pbmcgdG8gdGhlIGxlZnQgb2YgdGhlIGZpcnN0IG5vbi1ob3N0IGNoYXJcbiAgICBob3N0RW5kID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub25Ib3N0Q2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2Yobm9uSG9zdENoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSlcbiAgICAgICAgaG9zdEVuZCA9IGhlYztcbiAgICB9XG4gICAgLy8gaWYgd2Ugc3RpbGwgaGF2ZSBub3QgaGl0IGl0LCB0aGVuIHRoZSBlbnRpcmUgdGhpbmcgaXMgYSBob3N0LlxuICAgIGlmIChob3N0RW5kID09PSAtMSlcbiAgICAgIGhvc3RFbmQgPSByZXN0Lmxlbmd0aDtcblxuICAgIHRoaXMuaG9zdCA9IHJlc3Quc2xpY2UoMCwgaG9zdEVuZCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoaG9zdEVuZCk7XG5cbiAgICAvLyBwdWxsIG91dCBwb3J0LlxuICAgIHRoaXMucGFyc2VIb3N0KCk7XG5cbiAgICAvLyB3ZSd2ZSBpbmRpY2F0ZWQgdGhhdCB0aGVyZSBpcyBhIGhvc3RuYW1lLFxuICAgIC8vIHNvIGV2ZW4gaWYgaXQncyBlbXB0eSwgaXQgaGFzIHRvIGJlIHByZXNlbnQuXG4gICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7XG5cbiAgICAvLyBpZiBob3N0bmFtZSBiZWdpbnMgd2l0aCBbIGFuZCBlbmRzIHdpdGggXVxuICAgIC8vIGFzc3VtZSB0aGF0IGl0J3MgYW4gSVB2NiBhZGRyZXNzLlxuICAgIHZhciBpcHY2SG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lWzBdID09PSAnWycgJiZcbiAgICAgICAgdGhpcy5ob3N0bmFtZVt0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDFdID09PSAnXSc7XG5cbiAgICAvLyB2YWxpZGF0ZSBhIGxpdHRsZS5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgdmFyIGhvc3RwYXJ0cyA9IHRoaXMuaG9zdG5hbWUuc3BsaXQoL1xcLi8pO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBob3N0cGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gaG9zdHBhcnRzW2ldO1xuICAgICAgICBpZiAoIXBhcnQpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIXBhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICB2YXIgbmV3cGFydCA9ICcnO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwLCBrID0gcGFydC5sZW5ndGg7IGogPCBrOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LmNoYXJDb2RlQXQoaikgPiAxMjcpIHtcbiAgICAgICAgICAgICAgLy8gd2UgcmVwbGFjZSBub24tQVNDSUkgY2hhciB3aXRoIGEgdGVtcG9yYXJ5IHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgIC8vIHdlIG5lZWQgdGhpcyB0byBtYWtlIHN1cmUgc2l6ZSBvZiBob3N0bmFtZSBpcyBub3RcbiAgICAgICAgICAgICAgLy8gYnJva2VuIGJ5IHJlcGxhY2luZyBub24tQVNDSUkgYnkgbm90aGluZ1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9ICd4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gcGFydFtqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gd2UgdGVzdCBhZ2FpbiB3aXRoIEFTQ0lJIGNoYXIgb25seVxuICAgICAgICAgIGlmICghbmV3cGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgICAgdmFyIHZhbGlkUGFydHMgPSBob3N0cGFydHMuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICB2YXIgbm90SG9zdCA9IGhvc3RwYXJ0cy5zbGljZShpICsgMSk7XG4gICAgICAgICAgICB2YXIgYml0ID0gcGFydC5tYXRjaChob3N0bmFtZVBhcnRTdGFydCk7XG4gICAgICAgICAgICBpZiAoYml0KSB7XG4gICAgICAgICAgICAgIHZhbGlkUGFydHMucHVzaChiaXRbMV0pO1xuICAgICAgICAgICAgICBub3RIb3N0LnVuc2hpZnQoYml0WzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub3RIb3N0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXN0ID0gJy8nICsgbm90SG9zdC5qb2luKCcuJykgKyByZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ob3N0bmFtZSA9IHZhbGlkUGFydHMuam9pbignLicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaG9zdG5hbWUubGVuZ3RoID4gaG9zdG5hbWVNYXhMZW4pIHtcbiAgICAgIHRoaXMuaG9zdG5hbWUgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaG9zdG5hbWVzIGFyZSBhbHdheXMgbG93ZXIgY2FzZS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKCFpcHY2SG9zdG5hbWUpIHtcbiAgICAgIC8vIElETkEgU3VwcG9ydDogUmV0dXJucyBhIHB1bnljb2RlZCByZXByZXNlbnRhdGlvbiBvZiBcImRvbWFpblwiLlxuICAgICAgLy8gSXQgb25seSBjb252ZXJ0cyBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgdGhhdFxuICAgICAgLy8gaGF2ZSBub24tQVNDSUkgY2hhcmFjdGVycywgaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZlxuICAgICAgLy8geW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0IGFscmVhZHkgaXMgQVNDSUktb25seS5cbiAgICAgIHRoaXMuaG9zdG5hbWUgPSBwdW55Y29kZS50b0FTQ0lJKHRoaXMuaG9zdG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBwID0gdGhpcy5wb3J0ID8gJzonICsgdGhpcy5wb3J0IDogJyc7XG4gICAgdmFyIGggPSB0aGlzLmhvc3RuYW1lIHx8ICcnO1xuICAgIHRoaXMuaG9zdCA9IGggKyBwO1xuICAgIHRoaXMuaHJlZiArPSB0aGlzLmhvc3Q7XG5cbiAgICAvLyBzdHJpcCBbIGFuZCBdIGZyb20gdGhlIGhvc3RuYW1lXG4gICAgLy8gdGhlIGhvc3QgZmllbGQgc3RpbGwgcmV0YWlucyB0aGVtLCB0aG91Z2hcbiAgICBpZiAoaXB2Nkhvc3RuYW1lKSB7XG4gICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS5zdWJzdHIoMSwgdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIGlmIChyZXN0WzBdICE9PSAnLycpIHtcbiAgICAgICAgcmVzdCA9ICcvJyArIHJlc3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gbm93IHJlc3QgaXMgc2V0IHRvIHRoZSBwb3N0LWhvc3Qgc3R1ZmYuXG4gIC8vIGNob3Agb2ZmIGFueSBkZWxpbSBjaGFycy5cbiAgaWYgKCF1bnNhZmVQcm90b2NvbFtsb3dlclByb3RvXSkge1xuXG4gICAgLy8gRmlyc3QsIG1ha2UgMTAwJSBzdXJlIHRoYXQgYW55IFwiYXV0b0VzY2FwZVwiIGNoYXJzIGdldFxuICAgIC8vIGVzY2FwZWQsIGV2ZW4gaWYgZW5jb2RlVVJJQ29tcG9uZW50IGRvZXNuJ3QgdGhpbmsgdGhleVxuICAgIC8vIG5lZWQgdG8gYmUuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdXRvRXNjYXBlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGFlID0gYXV0b0VzY2FwZVtpXTtcbiAgICAgIGlmIChyZXN0LmluZGV4T2YoYWUpID09PSAtMSlcbiAgICAgICAgY29udGludWU7XG4gICAgICB2YXIgZXNjID0gZW5jb2RlVVJJQ29tcG9uZW50KGFlKTtcbiAgICAgIGlmIChlc2MgPT09IGFlKSB7XG4gICAgICAgIGVzYyA9IGVzY2FwZShhZSk7XG4gICAgICB9XG4gICAgICByZXN0ID0gcmVzdC5zcGxpdChhZSkuam9pbihlc2MpO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gY2hvcCBvZmYgZnJvbSB0aGUgdGFpbCBmaXJzdC5cbiAgdmFyIGhhc2ggPSByZXN0LmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2ggIT09IC0xKSB7XG4gICAgLy8gZ290IGEgZnJhZ21lbnQgc3RyaW5nLlxuICAgIHRoaXMuaGFzaCA9IHJlc3Quc3Vic3RyKGhhc2gpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIGhhc2gpO1xuICB9XG4gIHZhciBxbSA9IHJlc3QuaW5kZXhPZignPycpO1xuICBpZiAocW0gIT09IC0xKSB7XG4gICAgdGhpcy5zZWFyY2ggPSByZXN0LnN1YnN0cihxbSk7XG4gICAgdGhpcy5xdWVyeSA9IHJlc3Quc3Vic3RyKHFtICsgMSk7XG4gICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgIHRoaXMucXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLnF1ZXJ5KTtcbiAgICB9XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgcW0pO1xuICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAvLyBubyBxdWVyeSBzdHJpbmcsIGJ1dCBwYXJzZVF1ZXJ5U3RyaW5nIHN0aWxsIHJlcXVlc3RlZFxuICAgIHRoaXMuc2VhcmNoID0gJyc7XG4gICAgdGhpcy5xdWVyeSA9IHt9O1xuICB9XG4gIGlmIChyZXN0KSB0aGlzLnBhdGhuYW1lID0gcmVzdDtcbiAgaWYgKHNsYXNoZWRQcm90b2NvbFtsb3dlclByb3RvXSAmJlxuICAgICAgdGhpcy5ob3N0bmFtZSAmJiAhdGhpcy5wYXRobmFtZSkge1xuICAgIHRoaXMucGF0aG5hbWUgPSAnLyc7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gIGlmICh0aGlzLnBhdGhuYW1lIHx8IHRoaXMuc2VhcmNoKSB7XG4gICAgdmFyIHAgPSB0aGlzLnBhdGhuYW1lIHx8ICcnO1xuICAgIHZhciBzID0gdGhpcy5zZWFyY2ggfHwgJyc7XG4gICAgdGhpcy5wYXRoID0gcCArIHM7XG4gIH1cblxuICAvLyBmaW5hbGx5LCByZWNvbnN0cnVjdCB0aGUgaHJlZiBiYXNlZCBvbiB3aGF0IGhhcyBiZWVuIHZhbGlkYXRlZC5cbiAgdGhpcy5ocmVmID0gdGhpcy5mb3JtYXQoKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBmb3JtYXQgYSBwYXJzZWQgb2JqZWN0IGludG8gYSB1cmwgc3RyaW5nXG5mdW5jdGlvbiB1cmxGb3JtYXQob2JqKSB7XG4gIC8vIGVuc3VyZSBpdCdzIGFuIG9iamVjdCwgYW5kIG5vdCBhIHN0cmluZyB1cmwuXG4gIC8vIElmIGl0J3MgYW4gb2JqLCB0aGlzIGlzIGEgbm8tb3AuXG4gIC8vIHRoaXMgd2F5LCB5b3UgY2FuIGNhbGwgdXJsX2Zvcm1hdCgpIG9uIHN0cmluZ3NcbiAgLy8gdG8gY2xlYW4gdXAgcG90ZW50aWFsbHkgd29ua3kgdXJscy5cbiAgaWYgKHV0aWwuaXNTdHJpbmcob2JqKSkgb2JqID0gdXJsUGFyc2Uob2JqKTtcbiAgaWYgKCEob2JqIGluc3RhbmNlb2YgVXJsKSkgcmV0dXJuIFVybC5wcm90b3R5cGUuZm9ybWF0LmNhbGwob2JqKTtcbiAgcmV0dXJuIG9iai5mb3JtYXQoKTtcbn1cblxuVXJsLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGF1dGggPSB0aGlzLmF1dGggfHwgJyc7XG4gIGlmIChhdXRoKSB7XG4gICAgYXV0aCA9IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKTtcbiAgICBhdXRoID0gYXV0aC5yZXBsYWNlKC8lM0EvaSwgJzonKTtcbiAgICBhdXRoICs9ICdAJztcbiAgfVxuXG4gIHZhciBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2wgfHwgJycsXG4gICAgICBwYXRobmFtZSA9IHRoaXMucGF0aG5hbWUgfHwgJycsXG4gICAgICBoYXNoID0gdGhpcy5oYXNoIHx8ICcnLFxuICAgICAgaG9zdCA9IGZhbHNlLFxuICAgICAgcXVlcnkgPSAnJztcblxuICBpZiAodGhpcy5ob3N0KSB7XG4gICAgaG9zdCA9IGF1dGggKyB0aGlzLmhvc3Q7XG4gIH0gZWxzZSBpZiAodGhpcy5ob3N0bmFtZSkge1xuICAgIGhvc3QgPSBhdXRoICsgKHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpID09PSAtMSA/XG4gICAgICAgIHRoaXMuaG9zdG5hbWUgOlxuICAgICAgICAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nKTtcbiAgICBpZiAodGhpcy5wb3J0KSB7XG4gICAgICBob3N0ICs9ICc6JyArIHRoaXMucG9ydDtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5xdWVyeSAmJlxuICAgICAgdXRpbC5pc09iamVjdCh0aGlzLnF1ZXJ5KSAmJlxuICAgICAgT2JqZWN0LmtleXModGhpcy5xdWVyeSkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSBxdWVyeXN0cmluZy5zdHJpbmdpZnkodGhpcy5xdWVyeSk7XG4gIH1cblxuICB2YXIgc2VhcmNoID0gdGhpcy5zZWFyY2ggfHwgKHF1ZXJ5ICYmICgnPycgKyBxdWVyeSkpIHx8ICcnO1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5zdWJzdHIoLTEpICE9PSAnOicpIHByb3RvY29sICs9ICc6JztcblxuICAvLyBvbmx5IHRoZSBzbGFzaGVkUHJvdG9jb2xzIGdldCB0aGUgLy8uICBOb3QgbWFpbHRvOiwgeG1wcDosIGV0Yy5cbiAgLy8gdW5sZXNzIHRoZXkgaGFkIHRoZW0gdG8gYmVnaW4gd2l0aC5cbiAgaWYgKHRoaXMuc2xhc2hlcyB8fFxuICAgICAgKCFwcm90b2NvbCB8fCBzbGFzaGVkUHJvdG9jb2xbcHJvdG9jb2xdKSAmJiBob3N0ICE9PSBmYWxzZSkge1xuICAgIGhvc3QgPSAnLy8nICsgKGhvc3QgfHwgJycpO1xuICAgIGlmIChwYXRobmFtZSAmJiBwYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykgcGF0aG5hbWUgPSAnLycgKyBwYXRobmFtZTtcbiAgfSBlbHNlIGlmICghaG9zdCkge1xuICAgIGhvc3QgPSAnJztcbiAgfVxuXG4gIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSAnIycpIGhhc2ggPSAnIycgKyBoYXNoO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaC5jaGFyQXQoMCkgIT09ICc/Jykgc2VhcmNoID0gJz8nICsgc2VhcmNoO1xuXG4gIHBhdGhuYW1lID0gcGF0aG5hbWUucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQobWF0Y2gpO1xuICB9KTtcbiAgc2VhcmNoID0gc2VhcmNoLnJlcGxhY2UoJyMnLCAnJTIzJyk7XG5cbiAgcmV0dXJuIHByb3RvY29sICsgaG9zdCArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbn07XG5cbmZ1bmN0aW9uIHVybFJlc29sdmUoc291cmNlLCByZWxhdGl2ZSkge1xuICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZShyZWxhdGl2ZSk7XG59XG5cblVybC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XG4gIHJldHVybiB0aGlzLnJlc29sdmVPYmplY3QodXJsUGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKSkuZm9ybWF0KCk7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlT2JqZWN0KHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgaWYgKCFzb3VyY2UpIHJldHVybiByZWxhdGl2ZTtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmVPYmplY3QocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmVPYmplY3QgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICBpZiAodXRpbC5pc1N0cmluZyhyZWxhdGl2ZSkpIHtcbiAgICB2YXIgcmVsID0gbmV3IFVybCgpO1xuICAgIHJlbC5wYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpO1xuICAgIHJlbGF0aXZlID0gcmVsO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IG5ldyBVcmwoKTtcbiAgdmFyIHRrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gIGZvciAodmFyIHRrID0gMDsgdGsgPCB0a2V5cy5sZW5ndGg7IHRrKyspIHtcbiAgICB2YXIgdGtleSA9IHRrZXlzW3RrXTtcbiAgICByZXN1bHRbdGtleV0gPSB0aGlzW3RrZXldO1xuICB9XG5cbiAgLy8gaGFzaCBpcyBhbHdheXMgb3ZlcnJpZGRlbiwgbm8gbWF0dGVyIHdoYXQuXG4gIC8vIGV2ZW4gaHJlZj1cIlwiIHdpbGwgcmVtb3ZlIGl0LlxuICByZXN1bHQuaGFzaCA9IHJlbGF0aXZlLmhhc2g7XG5cbiAgLy8gaWYgdGhlIHJlbGF0aXZlIHVybCBpcyBlbXB0eSwgdGhlbiB0aGVyZSdzIG5vdGhpbmcgbGVmdCB0byBkbyBoZXJlLlxuICBpZiAocmVsYXRpdmUuaHJlZiA9PT0gJycpIHtcbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaHJlZnMgbGlrZSAvL2Zvby9iYXIgYWx3YXlzIGN1dCB0byB0aGUgcHJvdG9jb2wuXG4gIGlmIChyZWxhdGl2ZS5zbGFzaGVzICYmICFyZWxhdGl2ZS5wcm90b2NvbCkge1xuICAgIC8vIHRha2UgZXZlcnl0aGluZyBleGNlcHQgdGhlIHByb3RvY29sIGZyb20gcmVsYXRpdmVcbiAgICB2YXIgcmtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGl2ZSk7XG4gICAgZm9yICh2YXIgcmsgPSAwOyByayA8IHJrZXlzLmxlbmd0aDsgcmsrKykge1xuICAgICAgdmFyIHJrZXkgPSBya2V5c1tya107XG4gICAgICBpZiAocmtleSAhPT0gJ3Byb3RvY29sJylcbiAgICAgICAgcmVzdWx0W3JrZXldID0gcmVsYXRpdmVbcmtleV07XG4gICAgfVxuXG4gICAgLy91cmxQYXJzZSBhcHBlbmRzIHRyYWlsaW5nIC8gdG8gdXJscyBsaWtlIGh0dHA6Ly93d3cuZXhhbXBsZS5jb21cbiAgICBpZiAoc2xhc2hlZFByb3RvY29sW3Jlc3VsdC5wcm90b2NvbF0gJiZcbiAgICAgICAgcmVzdWx0Lmhvc3RuYW1lICYmICFyZXN1bHQucGF0aG5hbWUpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gcmVzdWx0LnBhdGhuYW1lID0gJy8nO1xuICAgIH1cblxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAocmVsYXRpdmUucHJvdG9jb2wgJiYgcmVsYXRpdmUucHJvdG9jb2wgIT09IHJlc3VsdC5wcm90b2NvbCkge1xuICAgIC8vIGlmIGl0J3MgYSBrbm93biB1cmwgcHJvdG9jb2wsIHRoZW4gY2hhbmdpbmdcbiAgICAvLyB0aGUgcHJvdG9jb2wgZG9lcyB3ZWlyZCB0aGluZ3NcbiAgICAvLyBmaXJzdCwgaWYgaXQncyBub3QgZmlsZTosIHRoZW4gd2UgTVVTVCBoYXZlIGEgaG9zdCxcbiAgICAvLyBhbmQgaWYgdGhlcmUgd2FzIGEgcGF0aFxuICAgIC8vIHRvIGJlZ2luIHdpdGgsIHRoZW4gd2UgTVVTVCBoYXZlIGEgcGF0aC5cbiAgICAvLyBpZiBpdCBpcyBmaWxlOiwgdGhlbiB0aGUgaG9zdCBpcyBkcm9wcGVkLFxuICAgIC8vIGJlY2F1c2UgdGhhdCdzIGtub3duIHRvIGJlIGhvc3RsZXNzLlxuICAgIC8vIGFueXRoaW5nIGVsc2UgaXMgYXNzdW1lZCB0byBiZSBhYnNvbHV0ZS5cbiAgICBpZiAoIXNsYXNoZWRQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpO1xuICAgICAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gICAgICAgIHZhciBrID0ga2V5c1t2XTtcbiAgICAgICAgcmVzdWx0W2tdID0gcmVsYXRpdmVba107XG4gICAgICB9XG4gICAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmVzdWx0LnByb3RvY29sID0gcmVsYXRpdmUucHJvdG9jb2w7XG4gICAgaWYgKCFyZWxhdGl2ZS5ob3N0ICYmICFob3N0bGVzc1Byb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIHJlbFBhdGggPSAocmVsYXRpdmUucGF0aG5hbWUgfHwgJycpLnNwbGl0KCcvJyk7XG4gICAgICB3aGlsZSAocmVsUGF0aC5sZW5ndGggJiYgIShyZWxhdGl2ZS5ob3N0ID0gcmVsUGF0aC5zaGlmdCgpKSk7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3QpIHJlbGF0aXZlLmhvc3QgPSAnJztcbiAgICAgIGlmICghcmVsYXRpdmUuaG9zdG5hbWUpIHJlbGF0aXZlLmhvc3RuYW1lID0gJyc7XG4gICAgICBpZiAocmVsUGF0aFswXSAhPT0gJycpIHJlbFBhdGgudW5zaGlmdCgnJyk7XG4gICAgICBpZiAocmVsUGF0aC5sZW5ndGggPCAyKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsUGF0aC5qb2luKCcvJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbGF0aXZlLnBhdGhuYW1lO1xuICAgIH1cbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIHJlc3VsdC5ob3N0ID0gcmVsYXRpdmUuaG9zdCB8fCAnJztcbiAgICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGg7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdDtcbiAgICByZXN1bHQucG9ydCA9IHJlbGF0aXZlLnBvcnQ7XG4gICAgLy8gdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnBhdGhuYW1lIHx8IHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHZhciBwID0gcmVzdWx0LnBhdGhuYW1lIHx8ICcnO1xuICAgICAgdmFyIHMgPSByZXN1bHQuc2VhcmNoIHx8ICcnO1xuICAgICAgcmVzdWx0LnBhdGggPSBwICsgcztcbiAgICB9XG4gICAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB2YXIgaXNTb3VyY2VBYnMgPSAocmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyksXG4gICAgICBpc1JlbEFicyA9IChcbiAgICAgICAgICByZWxhdGl2ZS5ob3N0IHx8XG4gICAgICAgICAgcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLydcbiAgICAgICksXG4gICAgICBtdXN0RW5kQWJzID0gKGlzUmVsQWJzIHx8IGlzU291cmNlQWJzIHx8XG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHQuaG9zdCAmJiByZWxhdGl2ZS5wYXRobmFtZSkpLFxuICAgICAgcmVtb3ZlQWxsRG90cyA9IG11c3RFbmRBYnMsXG4gICAgICBzcmNQYXRoID0gcmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLFxuICAgICAgcmVsUGF0aCA9IHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgICBwc3ljaG90aWMgPSByZXN1bHQucHJvdG9jb2wgJiYgIXNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdO1xuXG4gIC8vIGlmIHRoZSB1cmwgaXMgYSBub24tc2xhc2hlZCB1cmwsIHRoZW4gcmVsYXRpdmVcbiAgLy8gbGlua3MgbGlrZSAuLi8uLiBzaG91bGQgYmUgYWJsZVxuICAvLyB0byBjcmF3bCB1cCB0byB0aGUgaG9zdG5hbWUsIGFzIHdlbGwuICBUaGlzIGlzIHN0cmFuZ2UuXG4gIC8vIHJlc3VsdC5wcm90b2NvbCBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSBub3cuXG4gIC8vIExhdGVyIG9uLCBwdXQgdGhlIGZpcnN0IHBhdGggcGFydCBpbnRvIHRoZSBob3N0IGZpZWxkLlxuICBpZiAocHN5Y2hvdGljKSB7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gJyc7XG4gICAgcmVzdWx0LnBvcnQgPSBudWxsO1xuICAgIGlmIChyZXN1bHQuaG9zdCkge1xuICAgICAgaWYgKHNyY1BhdGhbMF0gPT09ICcnKSBzcmNQYXRoWzBdID0gcmVzdWx0Lmhvc3Q7XG4gICAgICBlbHNlIHNyY1BhdGgudW5zaGlmdChyZXN1bHQuaG9zdCk7XG4gICAgfVxuICAgIHJlc3VsdC5ob3N0ID0gJyc7XG4gICAgaWYgKHJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgICByZWxhdGl2ZS5ob3N0bmFtZSA9IG51bGw7XG4gICAgICByZWxhdGl2ZS5wb3J0ID0gbnVsbDtcbiAgICAgIGlmIChyZWxhdGl2ZS5ob3N0KSB7XG4gICAgICAgIGlmIChyZWxQYXRoWzBdID09PSAnJykgcmVsUGF0aFswXSA9IHJlbGF0aXZlLmhvc3Q7XG4gICAgICAgIGVsc2UgcmVsUGF0aC51bnNoaWZ0KHJlbGF0aXZlLmhvc3QpO1xuICAgICAgfVxuICAgICAgcmVsYXRpdmUuaG9zdCA9IG51bGw7XG4gICAgfVxuICAgIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzICYmIChyZWxQYXRoWzBdID09PSAnJyB8fCBzcmNQYXRoWzBdID09PSAnJyk7XG4gIH1cblxuICBpZiAoaXNSZWxBYnMpIHtcbiAgICAvLyBpdCdzIGFic29sdXRlLlxuICAgIHJlc3VsdC5ob3N0ID0gKHJlbGF0aXZlLmhvc3QgfHwgcmVsYXRpdmUuaG9zdCA9PT0gJycpID9cbiAgICAgICAgICAgICAgICAgIHJlbGF0aXZlLmhvc3QgOiByZXN1bHQuaG9zdDtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSAocmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdG5hbWUgPT09ICcnKSA/XG4gICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgOiByZXN1bHQuaG9zdG5hbWU7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICBzcmNQYXRoID0gcmVsUGF0aDtcbiAgICAvLyBmYWxsIHRocm91Z2ggdG8gdGhlIGRvdC1oYW5kbGluZyBiZWxvdy5cbiAgfSBlbHNlIGlmIChyZWxQYXRoLmxlbmd0aCkge1xuICAgIC8vIGl0J3MgcmVsYXRpdmVcbiAgICAvLyB0aHJvdyBhd2F5IHRoZSBleGlzdGluZyBmaWxlLCBhbmQgdGFrZSB0aGUgbmV3IHBhdGggaW5zdGVhZC5cbiAgICBpZiAoIXNyY1BhdGgpIHNyY1BhdGggPSBbXTtcbiAgICBzcmNQYXRoLnBvcCgpO1xuICAgIHNyY1BhdGggPSBzcmNQYXRoLmNvbmNhdChyZWxQYXRoKTtcbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICB9IGVsc2UgaWYgKCF1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKHJlbGF0aXZlLnNlYXJjaCkpIHtcbiAgICAvLyBqdXN0IHB1bGwgb3V0IHRoZSBzZWFyY2guXG4gICAgLy8gbGlrZSBocmVmPSc/Zm9vJy5cbiAgICAvLyBQdXQgdGhpcyBhZnRlciB0aGUgb3RoZXIgdHdvIGNhc2VzIGJlY2F1c2UgaXQgc2ltcGxpZmllcyB0aGUgYm9vbGVhbnNcbiAgICBpZiAocHN5Y2hvdGljKSB7XG4gICAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IHNyY1BhdGguc2hpZnQoKTtcbiAgICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAgIC8vdGhpcyBlc3BlY2lhbGx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgICAgLy91cmwucmVzb2x2ZU9iamVjdCgnbWFpbHRvOmxvY2FsMUBkb21haW4xJywgJ2xvY2FsMkBkb21haW4yJylcbiAgICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKCF1dGlsLmlzTnVsbChyZXN1bHQucGF0aG5hbWUpIHx8ICF1dGlsLmlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkge1xuICAgIC8vIG5vIHBhdGggYXQgYWxsLiAgZWFzeS5cbiAgICAvLyB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIG90aGVyIHN0dWZmIGFib3ZlLlxuICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7XG4gICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQuc2VhcmNoKSB7XG4gICAgICByZXN1bHQucGF0aCA9ICcvJyArIHJlc3VsdC5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgICB9XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGlmIGEgdXJsIEVORHMgaW4gLiBvciAuLiwgdGhlbiBpdCBtdXN0IGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICAvLyBob3dldmVyLCBpZiBpdCBlbmRzIGluIGFueXRoaW5nIGVsc2Ugbm9uLXNsYXNoeSxcbiAgLy8gdGhlbiBpdCBtdXN0IE5PVCBnZXQgYSB0cmFpbGluZyBzbGFzaC5cbiAgdmFyIGxhc3QgPSBzcmNQYXRoLnNsaWNlKC0xKVswXTtcbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSAoXG4gICAgICAocmVzdWx0Lmhvc3QgfHwgcmVsYXRpdmUuaG9zdCB8fCBzcmNQYXRoLmxlbmd0aCA+IDEpICYmXG4gICAgICAobGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicpIHx8IGxhc3QgPT09ICcnKTtcblxuICAvLyBzdHJpcCBzaW5nbGUgZG90cywgcmVzb2x2ZSBkb3VibGUgZG90cyB0byBwYXJlbnQgZGlyXG4gIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBzcmNQYXRoLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICBsYXN0ID0gc3JjUGF0aFtpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoIW11c3RFbmRBYnMgJiYgIXJlbW92ZUFsbERvdHMpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHNyY1BhdGgudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAobXVzdEVuZEFicyAmJiBzcmNQYXRoWzBdICE9PSAnJyAmJlxuICAgICAgKCFzcmNQYXRoWzBdIHx8IHNyY1BhdGhbMF0uY2hhckF0KDApICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIChzcmNQYXRoLmpvaW4oJy8nKS5zdWJzdHIoLTEpICE9PSAnLycpKSB7XG4gICAgc3JjUGF0aC5wdXNoKCcnKTtcbiAgfVxuXG4gIHZhciBpc0Fic29sdXRlID0gc3JjUGF0aFswXSA9PT0gJycgfHxcbiAgICAgIChzcmNQYXRoWzBdICYmIHNyY1BhdGhbMF0uY2hhckF0KDApID09PSAnLycpO1xuXG4gIC8vIHB1dCB0aGUgaG9zdCBiYWNrXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IGlzQWJzb2x1dGUgPyAnJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNQYXRoLmxlbmd0aCA/IHNyY1BhdGguc2hpZnQoKSA6ICcnO1xuICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAvL3RoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgICAgICAgICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7XG4gICAgaWYgKGF1dGhJbkhvc3QpIHtcbiAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgfHwgKHJlc3VsdC5ob3N0ICYmIHNyY1BhdGgubGVuZ3RoKTtcblxuICBpZiAobXVzdEVuZEFicyAmJiAhaXNBYnNvbHV0ZSkge1xuICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICByZXN1bHQucGF0aCA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0LnBhdGhuYW1lID0gc3JjUGF0aC5qb2luKCcvJyk7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgcmVxdWVzdC5odHRwXG4gIGlmICghdXRpbC5pc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhdXRpbC5pc051bGwocmVzdWx0LnNlYXJjaCkpIHtcbiAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpO1xuICB9XG4gIHJlc3VsdC5hdXRoID0gcmVsYXRpdmUuYXV0aCB8fCByZXN1bHQuYXV0aDtcbiAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblVybC5wcm90b3R5cGUucGFyc2VIb3N0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBob3N0ID0gdGhpcy5ob3N0O1xuICB2YXIgcG9ydCA9IHBvcnRQYXR0ZXJuLmV4ZWMoaG9zdCk7XG4gIGlmIChwb3J0KSB7XG4gICAgcG9ydCA9IHBvcnRbMF07XG4gICAgaWYgKHBvcnQgIT09ICc6Jykge1xuICAgICAgdGhpcy5wb3J0ID0gcG9ydC5zdWJzdHIoMSk7XG4gICAgfVxuICAgIGhvc3QgPSBob3N0LnN1YnN0cigwLCBob3N0Lmxlbmd0aCAtIHBvcnQubGVuZ3RoKTtcbiAgfVxuICBpZiAoaG9zdCkgdGhpcy5ob3N0bmFtZSA9IGhvc3Q7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNTdHJpbmc6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB0eXBlb2YoYXJnKSA9PT0gJ3N0cmluZyc7XG4gIH0sXG4gIGlzT2JqZWN0OiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbiAgfSxcbiAgaXNOdWxsOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnID09PSBudWxsO1xuICB9LFxuICBpc051bGxPclVuZGVmaW5lZDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PSBudWxsO1xuICB9XG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZGVwcmVjYXRlO1xuXG4vKipcbiAqIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4gKiBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2Uubm9EZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudGhyb3dEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCB0aHJvdyBhbiBFcnJvciB3aGVuIGludm9rZWQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50cmFjZURlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIGludm9rZSBgY29uc29sZS50cmFjZSgpYCBpbnN0ZWFkIG9mIGBjb25zb2xlLmVycm9yKClgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gdGhlIGZ1bmN0aW9uIHRvIGRlcHJlY2F0ZVxuICogQHBhcmFtIHtTdHJpbmd9IG1zZyAtIHRoZSBzdHJpbmcgdG8gcHJpbnQgdG8gdGhlIGNvbnNvbGUgd2hlbiBgZm5gIGlzIGludm9rZWRcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYSBuZXcgXCJkZXByZWNhdGVkXCIgdmVyc2lvbiBvZiBgZm5gXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZSAoZm4sIG1zZykge1xuICBpZiAoY29uZmlnKCdub0RlcHJlY2F0aW9uJykpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChjb25maWcoJ3Rocm93RGVwcmVjYXRpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAoY29uZmlnKCd0cmFjZURlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufVxuXG4vKipcbiAqIENoZWNrcyBgbG9jYWxTdG9yYWdlYCBmb3IgYm9vbGVhbiB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBgbmFtZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29uZmlnIChuYW1lKSB7XG4gIC8vIGFjY2Vzc2luZyBnbG9iYWwubG9jYWxTdG9yYWdlIGNhbiB0cmlnZ2VyIGEgRE9NRXhjZXB0aW9uIGluIHNhbmRib3hlZCBpZnJhbWVzXG4gIHRyeSB7XG4gICAgaWYgKCFnbG9iYWwubG9jYWxTdG9yYWdlKSByZXR1cm4gZmFsc2U7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHZhbCA9IGdsb2JhbC5sb2NhbFN0b3JhZ2VbbmFtZV07XG4gIGlmIChudWxsID09IHZhbCkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBleHRlbmRcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gZXh0ZW5kKCkge1xuICAgIHZhciB0YXJnZXQgPSB7fVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXVxuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRcbn1cbiJdfQ==
