(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.SwaggerApi = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _ = (window._);
var pathLoader = (window.PathLoader);
var YAML = (window.jsyaml);

// Load promises polyfill if necessary
/* istanbul ignore if */
if (typeof Promise === 'undefined') {
  require('native-promise-only');
}

var supportedVersions = {
  '2.0': require('./lib/versions/2.0/')
};

/**
 * Creates a SwaggerApi object from its Swagger definition(s).
 *
 * @param {object} options - The options for loading the definition(s)
 * @param {object|string} options.definition - The Swagger definition location or structure
 * @param {object} [options.loaderOptions] - The options to pass to path-loader
 * @param {validatorCallback[]} [options.customValidators] - The custom validators
 * @param {function} [callback] - Node.js error-first callback
 *
 * @returns {Promise} A promise is always returned even if you provide a callback but it is not required to be used
 *
 * @example
 * // Example using promises
 * SwaggerApi.create({definition: 'http://petstore.swagger.io/v2/swagger.yaml'})
 *   .then(function (api) {
 *     console.log('Documentation URL: ', api.documentation);
 *   }, function (err) {
 *     console.error(err.stack);
 *   });
 *
 * @example
 * // Example using callbacks
 * SwaggerApi.create({definition: 'http://petstore.swagger.io/v2/swagger.yaml'}, function (err, api) {
 *   if (err) {
 *     console.error(err.stack);
 *   } else {
 *     console.log('Documentation URL: ', api.documentation);
 *   });
 */
module.exports.create = function (options, callback) {
  var allTasks = Promise.resolve();

  // Validate arguments
  allTasks = allTasks.then(function () {
    return new Promise(function (resolve) {
      if (_.isUndefined(options)) {
        throw new TypeError('options is required');
      } else if (!_.isPlainObject(options)) {
        throw new TypeError('options must be an object');
      } else if (_.isUndefined(options.definition)) {
        throw new TypeError('options.definition is required');
      } else if (!_.isPlainObject(options.definition) && !_.isString(options.definition)) {
        throw new TypeError('options.definition must be either an object or a string');
      } else if (!_.isUndefined(options.loaderOptions) && !_.isPlainObject(options.loaderOptions)) {
        throw new TypeError('options.loaderOptions must be an object');
      } else if (!_.isUndefined(options.customValidators) && !_.isArray(options.customValidators)) {
        throw new TypeError('options.customValidators must be an array');
      } else if (!_.isUndefined(callback) && !_.isFunction(callback)) {
        throw new TypeError('callback must be a function');
      }

      _.forEach(options.customValidators, function (validator, index) {
        if (!_.isFunction(validator)) {
          throw new TypeError('options.customValidators at index ' + index + ' must be a function');
        }
      });

      resolve();
    });
  });

  // Make a copy of the input options so as not to alter them
  options = _.cloneDeep(options);

  // Retrieve the definition if it is a path/URL
  allTasks = allTasks
    // Load the remote definition or return options.definition
    .then(function () {
      if (_.isString(options.definition)) {
        return pathLoader.load(options.definition, options.loaderOptions || {}).then(YAML.safeLoad);
      } else {
        return options.definition;
      }
    });

  // Process the Swagger definition (if possible)
  allTasks = allTasks
    .then(function (apiDefinition) {
      var definition = _.find(supportedVersions, function (pDefinition) {
        return pDefinition.canProcess(apiDefinition);
      });

      if (_.isUndefined(definition)) {
        throw new TypeError('Unable to identify the Swagger version or the Swagger version is unsupported');
      }

      return definition.createSwaggerApi(apiDefinition, options);
    });

  // Use the callback if provided and it is a function
  if (!_.isUndefined(callback) && _.isFunction(callback)) {
    allTasks = allTasks
      .then(function (swaggerApi) {
        callback(undefined, swaggerApi);
      }, function (err) {
        callback(err);
      });
  }

  return allTasks;
};

},{"./lib/versions/2.0/":8,"native-promise-only":95}],2:[function(require,module,exports){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _ = (window._);
var mocker = require('json-schema-faker');
var ZSchema = require('z-schema');

var draft04Json = require('./json-schema-draft-04.json');
var draft04Url = 'http://json-schema.org/draft-04/schema';

function removeValidationErrorParams (obj) {
  delete obj.params;

  if (obj.inner) {
    _.each(obj.inner, function (nObj) {
      removeValidationErrorParams(nObj);
    });
  }
}

/**
 * Helper method to create a JSON Schema Mocker.
 *
 * @param {object} [options] - The mocker options
 * @param {object} [options.formatGenerators] - The custom format generators to use
 *
 * @returns {object} The JSON Schema mocker
 */
module.exports.createJSONSchemaMocker = function (options) {
  /* istanbul ignore if */
  if (_.isUndefined(options)) {
    options = {};
  }

  // Add the custom format generators
  _.each(options.formatGenerators, function (handler, name) {
    mocker.formats(name, handler);
  });

  return mocker;
};

/**
 * Helper method to create a JSON Validator.
 *
 * @param {object} [options] - The validator options
 * @param {object} [options.formatValidators] - The custom format validators to use
 *
 * @returns {object} The JSON Schema validator
 */
module.exports.createJSONValidator = function (options) {
  var validator = new ZSchema({
    reportPathAsArray: true
  });

  /* istanbul ignore if */
  if (_.isUndefined(options)) {
    options = {};
  }

  // Add the draft-04 spec
  validator.setRemoteReference(draft04Url, draft04Json);

  // Add the custom validators
  _.each(options.formatValidators, function (handler, name) {
    ZSchema.registerFormat(name, handler);
  });

  return validator;
};

/**
 * Validates the provided value against the JSON Schema by name or value.
 *
 * @param {object} validator - The JSON Schema validator created via {@link #createJSONValidator}
 * @param {object} schema - The JSON Schema
 * @param {*} value - The value to validate
 *
 * @returns {object} Object containing the errors and warnings of the validation
 */
module.exports.validateAgainstSchema = function (validator, schema, value) {
  schema = _.cloneDeep(schema); // Clone the schema as z-schema alters the provided document

  var response = {
    errors: [],
    warnings: []
  };

  if (!validator.validate(value, schema)) {
    response.errors = _.map(validator.getLastErrors(), function (err) {
      removeValidationErrorParams(err);

      return err;
    });
  }

  return response;
};

},{"./json-schema-draft-04.json":3,"json-schema-faker":20,"z-schema":106}],3:[function(require,module,exports){
module.exports={
    "id": "http://json-schema.org/draft-04/schema#",
    "$schema": "http://json-schema.org/draft-04/schema#",
    "description": "Core schema meta-schema",
    "definitions": {
        "schemaArray": {
            "type": "array",
            "minItems": 1,
            "items": { "$ref": "#" }
        },
        "positiveInteger": {
            "type": "integer",
            "minimum": 0
        },
        "positiveIntegerDefault0": {
            "allOf": [ { "$ref": "#/definitions/positiveInteger" }, { "default": 0 } ]
        },
        "simpleTypes": {
            "enum": [ "array", "boolean", "integer", "null", "number", "object", "string" ]
        },
        "stringArray": {
            "type": "array",
            "items": { "type": "string" },
            "minItems": 1,
            "uniqueItems": true
        }
    },
    "type": "object",
    "properties": {
        "id": {
            "type": "string",
            "format": "uri"
        },
        "$schema": {
            "type": "string",
            "format": "uri"
        },
        "title": {
            "type": "string"
        },
        "description": {
            "type": "string"
        },
        "default": {},
        "multipleOf": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": true
        },
        "maximum": {
            "type": "number"
        },
        "exclusiveMaximum": {
            "type": "boolean",
            "default": false
        },
        "minimum": {
            "type": "number"
        },
        "exclusiveMinimum": {
            "type": "boolean",
            "default": false
        },
        "maxLength": { "$ref": "#/definitions/positiveInteger" },
        "minLength": { "$ref": "#/definitions/positiveIntegerDefault0" },
        "pattern": {
            "type": "string",
            "format": "regex"
        },
        "additionalItems": {
            "anyOf": [
                { "type": "boolean" },
                { "$ref": "#" }
            ],
            "default": {}
        },
        "items": {
            "anyOf": [
                { "$ref": "#" },
                { "$ref": "#/definitions/schemaArray" }
            ],
            "default": {}
        },
        "maxItems": { "$ref": "#/definitions/positiveInteger" },
        "minItems": { "$ref": "#/definitions/positiveIntegerDefault0" },
        "uniqueItems": {
            "type": "boolean",
            "default": false
        },
        "maxProperties": { "$ref": "#/definitions/positiveInteger" },
        "minProperties": { "$ref": "#/definitions/positiveIntegerDefault0" },
        "required": { "$ref": "#/definitions/stringArray" },
        "additionalProperties": {
            "anyOf": [
                { "type": "boolean" },
                { "$ref": "#" }
            ],
            "default": {}
        },
        "definitions": {
            "type": "object",
            "additionalProperties": { "$ref": "#" },
            "default": {}
        },
        "properties": {
            "type": "object",
            "additionalProperties": { "$ref": "#" },
            "default": {}
        },
        "patternProperties": {
            "type": "object",
            "additionalProperties": { "$ref": "#" },
            "default": {}
        },
        "dependencies": {
            "type": "object",
            "additionalProperties": {
                "anyOf": [
                    { "$ref": "#" },
                    { "$ref": "#/definitions/stringArray" }
                ]
            }
        },
        "enum": {
            "type": "array",
            "minItems": 1,
            "uniqueItems": true
        },
        "type": {
            "anyOf": [
                { "$ref": "#/definitions/simpleTypes" },
                {
                    "type": "array",
                    "items": { "$ref": "#/definitions/simpleTypes" },
                    "minItems": 1,
                    "uniqueItems": true
                }
            ]
        },
        "allOf": { "$ref": "#/definitions/schemaArray" },
        "anyOf": { "$ref": "#/definitions/schemaArray" },
        "oneOf": { "$ref": "#/definitions/schemaArray" },
        "not": { "$ref": "#" }
    },
    "dependencies": {
        "exclusiveMaximum": [ "maximum" ],
        "exclusiveMinimum": [ "minimum" ]
    },
    "default": {}
}

},{}],4:[function(require,module,exports){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _ = (window._);
var debug = require('debug')('swagger-core-api');

/**
 * The Swagger Operation object.
 *
 * <strong>Note:</strong> Do not use directly.
 *
 * @param {SwaggerApi} api - The Swagger API object
 * @param {string} path - The operation path
 * @param {string} method - The operation method
 * @param {string} ptr - The JSON Pointer to the operation
 * @param {object} definition - The operation definition
 *
 * @constructor
 */
function Operation (api, path, method, ptr, definition) {
  this.api = api;
  this.path = path;
  this.method = method;
  this.ptr = ptr;
  this.definition = definition;

  // Assign Swagger definition properties to the operation for easy access
  _.assign(this, definition);

  debug('Found operation at %s', ptr);

  this.parameterObjects = api.plugin.getOperationParameters(this);
}

/**
 * Returns all parameters for the operation.
 *
 * @returns {Parameter[]} All parameters for the operation.
 */
Operation.prototype.getParameters = function () {
  return this.parameterObjects;
};

/**
 * Returns the JSON Schema for the requested code or the default response if no code is provided.
 *
 * @param {number|string} [code=default] - The response code
 *
 * @returns {object} The JSON Schema for the response, which can be undefined if the response schema is not provided
 *
 * @throws {Error} Thrown whenever the requested code does not exist (Throwing an error instead of returning undefined
 *                 is required due to undefined being a valid response schema indicating a void response)
 */
Operation.prototype.getResponseSchema = function (code) {
  var response;

  if (_.isUndefined(code)) {
    code = 'default';
  } else if (_.isNumber(code)) {
    code = (Math.floor(100 * code) / 100).toFixed(); // Overly cautious but oh well...
  }

  response = this.definition.responses[code];

  if (_.isUndefined(response)) {
    throw new Error('This operation does not have a defined \'' + code + '\' response code');
  } else {
    return response.schema;
  }
};

/**
 * Returns a sample value based on the requested code or the default response if no code is provided.
 *
 * @param {number|string} [code=default] - The response code
 *
 * @returns {*} The sample value for the response, which can be undefined if the response schema is not provided
 *
 * @throws {Error} Thrown whenever the requested code does not exist (Throwing an error instead of returning undefined
 *                 is required due to undefined being a valid response schema indicating a void response)
 */
Operation.prototype.getResponseSample = function (code) {
  var schema = this.getResponseSchema(code);
  var sample;

  if (!_.isUndefined(schema)) {
    sample = this.api.plugin.getSample(schema);
  }

  return sample;
};

/**
 * The Swagger Parameter object.
 *
 * <strong>Note:</strong> Do not use directly.
 *
 * @param {Operation} operation - The Swagger Operation object
 * @param {string} ptr - The JSON Pointer to the parameter
 * @param {object} definition - The parameter definition
 * @param {object} schema - The JSON Schema for the parameter
 *
 * @constructor
 */
function Parameter (operation, ptr, definition, schema) {
  this.operation = operation;
  this.ptr = ptr;
  this.definition = definition;
  this.computedSchema = schema;

  // Assign Swagger definition properties to the parameter for easy access
  _.assign(this, definition);

  debug('Found operation parameter (%s %s) at %s', operation.method.toUpperCase(), operation.path, ptr);
}

/**
 * Returns the computed JSON Schema for this parameter object.
 *
 * @returns {object} The JSON Schema
 */
Parameter.prototype.getSchema = function () {
  return this.computedSchema;
};

/**
 * Returns a sample value for the parameter based on its schema;
 *
 * @returns {*} The sample value
 */
Parameter.prototype.getSample = function () {
  var sample;

  if (!_.isUndefined(this.computedSchema)) {
    sample = this.operation.api.plugin.getSample(this.computedSchema);
  }

  return sample;
};

/**
 * Callback used for validation.
 *
 * @param {SwaggerApi} api - The Swagger API object
 *
 * @returns {object} Object containing the errors and warnings of the validation
 *
 * @callback validatorCallback
 */

/**
 * The Swagger API object.
 *
 * <strong>Note:</strong> Do not use directly.
 *
 * @param {object} plugin - The Swagger version plugin
 * @param {object} definition - The Swagger definition
 * @param {object} resolved - The fully resolved Swagger definition
 * @param {object} references - The location and resolution of the resolved references in the Swagger definition
 * @param {object} options - The options passed to swaggerApi.create
 * @param {validatorCallback[]} [options.customValidators] - The custom validators
 *
 * @constructor
 */
function SwaggerApi (plugin, definition, resolved, references, options) {
  this.customValidators = [];
  this.definition = definition;
  this.documentation = plugin.documentation;
  this.errors = undefined;
  this.plugin = plugin;
  this.references = references;
  this.resolved = resolved;
  this.version = plugin.version;
  this.warnings = undefined;
  this.options = options;

  // Assign Swagger definition properties to the api for easy access
  _.assign(this, definition);

  debug('New Swagger API (%s)', _.isString(options.definition) ? options.definition : 'JavaScript Object');

  this.operationObjects = plugin.getOperations(this);

  // Register custom validators
  _.forEach(options.validators, this.registerValidator);
}

/**
 * Returns the errors from the last validate call.
 *
 * @returns {object[]} The errors from the previous call to validate or undefined if validate was never called
 */
SwaggerApi.prototype.getLastErrors = function () {
  return this.errors;
};

/**
 * Returns the warnings from the last validate call.
 *
 * @returns {object[]} The warnings from the previous call to validate or undefined if validate was never called
 */
SwaggerApi.prototype.getLastWarnings = function () {
  return this.warnings;
};

/**
 * Returns the operation for the provided path and method.
 *
 * @param {string} path - The Swagger path
 * @param {string} method - The Swagger operation method
 *
 * @returns {Operation} The operation for the provided path and method or undefined if there is no operation for that
 *                      path and method combination.
 */
SwaggerApi.prototype.getOperation = function (path, method) {
  return _.find(this.operationObjects, function (operation) {
    return operation.path === path && operation.method === method.toLowerCase();
  });
};

/**
 * Returns all operations for the provided path or all operations in the API.
 *
 * @param {string} [path] - The Swagger path
 *
 * @returns {Operation[]} All operations for the provided path or all API operations.
 */
SwaggerApi.prototype.getOperations = function (path) {
  return _.filter(this.operationObjects, function (operation) {
    return _.isUndefined(path) ? true : operation.path === path;
  });
};

/**
 * Registers a validator.
 *
 * @param {validatorCallback} validator - The validator
 *
 * @throws {TypeError} If the validator is not a function
 */
SwaggerApi.prototype.registerValidator = function (validator) {
  if (_.isUndefined(validator)) {
    throw new TypeError('validator is required');
  } else if (!_.isFunction(validator)) {
    throw new TypeError('validator must be a function');
  }

  this.customValidators.push(validator);
};

/**
 * Performs validation of the Swagger API document(s).
 *
 * @returns {boolean} True if all validators produce zero errors and false otherwise
 */
SwaggerApi.prototype.validate = function () {
  var self = this;

  // Reset the errors and warnings
  this.errors = [];
  this.warnings = [];

  function doValidation (validator) {
    var results = validator(self);

    if (results.errors.length > 0) {
      self.errors = self.errors.concat(results.errors);
    }

    if (results.warnings.length > 0) {
      self.warnings = self.warnings.concat(results.warnings);
    }
  }

  // Validate the document structurally
  doValidation(this.plugin.getJSONSchemaValidator());

  // Perform remaining validation only if the document is structurally valid
  if (this.errors.length === 0) {
    // Run plugin validators
    _.forEach(this.plugin.getSemanticValidators(), doValidation);

    // Run custom validators
    _.forEach(this.customValidators, doValidation);
  }

  return this.errors.length === 0;
};

module.exports = {
  Operation: Operation,
  Parameter: Parameter,
  SwaggerApi: SwaggerApi
};

},{"debug":16}],5:[function(require,module,exports){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _ = (window._);
var Base64 = require('js-base64').Base64;
var stringMocker = require('json-schema-faker/lib/types/string');

// Build the list of custom JSON Schema generator formats
module.exports.byte = function (gen, schema) {
  var cSchema = _.cloneDeep(schema);
  var sample;

  delete cSchema.format;

  sample = stringMocker(cSchema);

  return Base64.encode(sample);
};

module.exports.password = function (gen, schema) {
  return stringMocker(schema);
};

},{"js-base64":19,"json-schema-faker/lib/types/string":27}],6:[function(require,module,exports){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _ = (window._);

module.exports.int32 = module.exports.int64 = function (val) {
  var valid = true;
  var cVal;

  if (!_.isNumber(val)) {
    try {
      cVal = parseInt(val, 10);
    } catch (err) {
      valid = false;
    }
  }

  if (_.isNumber(cVal)) {
    valid = cVal % 1 === 0;
  }

  return valid;
};

module.exports.double = module.exports.float = function (val) {
  var valid = true;

  if (!_.isNumber(val)) {
    try {
      parseFloat(val);
    } catch (err) {
      valid = false;
    }
  }

  return valid;
};

module.exports.byte = function (val) {
  // TODO: We could do more here since technically 'byte' means a base64 encoded string
  return _.isString(val);
};

module.exports.password = function (val) {
  return _.isString(val);
};

},{}],7:[function(require,module,exports){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _ = (window._);

// https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#parameter-object
var parameterSchemaProperties = [
  'default',
  'description',
  'enum',
  'exclusiveMaximum',
  'exclusiveMinimum',
  'format',
  'items',
  'maxItems',
  'maxLength',
  'maximum',
  'minItems',
  'minLength',
  'minimum',
  'multipleOf',
  'pattern',
  'type',
  'uniqueItems'
];

module.exports.getParameterSchema = function (parameter) {
  var schema;

  if (_.isUndefined(parameter.schema)) {
    schema = {};

    // Build the schema from the schema-like parameter structure
    _.forEach(parameterSchemaProperties, function (name) {
      if (!_.isUndefined(parameter[name])) {
        schema[name] = parameter[name];
      }
    });
  } else {
    schema = parameter.schema;
  }

  return schema;
};

module.exports.supportedHttpMethods = ['get', 'put', 'post', 'delete', 'options', 'head', 'patch'];

},{}],8:[function(require,module,exports){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _ = (window._);
var JsonRefs = (window.JsonRefs);
var formatGenerators = require('./format-generators');
var helpers = require('../../helpers');
var types = require('../../types');
var validators = require('./validators');
var vHelpers = require('./helpers');

var docsUrl = 'https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md';
var mocker = helpers.createJSONSchemaMocker({
  formatGenerators: formatGenerators
});
var version = '2.0';

// The URL to the Swagger 2.0 documentation
module.exports.documentation = docsUrl;

// The array of supported HTTP methods for each path
module.exports.supportedHttpMethods = vHelpers.supportedHttpMethods;

// The version for this Swagger version
module.exports.version = version;

/**
 * Returns whether or not the provided definition can be processed.
 *
 * @param {object} definition - The potential Swagger definition to test
 *
 * @returns {boolean} Returns true only if the definition represents a Swagger 2.0 definition
 */
module.exports.canProcess = function (definition) {
  return definition.swagger === version;
};

/**
 * Creates a SwaggerApi object from the provided Swagger definition.
 *
 * @param {object} definition - The Swagger definition
 * @param {object} options - The options passed to swaggerApi.create
 *
 * @returns {Promise} A promise that resolves the SwaggerApi after processing
 */
module.exports.createSwaggerApi = function (definition, options) {
  return new Promise(function (resolve, reject) {
    JsonRefs.resolveRefs(definition, options.loaderOptions || {}, function (err, resolved, metadata) {
      var api;

      /* istanbul ignore if */
      if (err) {
        reject(err);
      } else {
        api = new types.SwaggerApi(module.exports, definition, resolved, metadata, options);

        // To avoid JSON Schema validation failing on missing references, we need to add back the broken references
        _.forEach(api.references, function (ref, ptr) {
          var rPath = JsonRefs.pathFromPointer(ptr);

          // Pop off the '$ref' part
          rPath.pop();

          if (!_.has(ref, 'value')) {
            _.set(api.resolved, rPath, {
              $ref: ref.ref
            });
          }
        });

        resolve(api);
      }
    });
  });
};

/**
 * Returns a function used to validate Swagger 2.0 documents against its JSON Schema.
 *
 * @returns {function} The validator to use
 */
module.exports.getJSONSchemaValidator = function () {
  return validators.jsonSchemaValidator;
};

/**
 * Creates an array of Operation objects for each operation defined in the Swagger document
 *
 * @param {types.SwaggerApi} api - The Swagger API object
 *
 * @returns {types.Operation[]} The Operation object array
 */
module.exports.getOperations = function (api) {
  var operations = [];

  _.forEach(api.resolved.paths, function (pathDef, path) {
    var pPath = ['paths', path];
    var pParams = _.reduce(pathDef.parameters || [], function (parameters, paramDef, index) {
      parameters[paramDef.name + ':' + paramDef.in] = {
        path: pPath.concat(['parameters', index.toString()]),
        definition: paramDef
      };

      return parameters;
    }, {});

    _.forEach(pathDef, function (operation, method) {
      // Do not process non-operations
      if (_.indexOf(vHelpers.supportedHttpMethods, method) === -1) {
        return;
      }

      var cOperation = _.cloneDeep(operation); // Clone so we do not alter the input
      var oParams = {}; // Used to keep track of unique parameters
      var oPath = pPath.concat(method);

      // Add path parameters
      _.forEach(pParams, function (pParam, key) {
        oParams[key] = pParam;
      });

      // Add operation parameters (Overrides path-level parameters of same name+in combination)
      _.forEach(operation.parameters, function (paramDef, index) {
        oParams[paramDef.name + ':' + paramDef.in] = {
          path: oPath.concat(['parameters', index.toString()]),
          definition: paramDef
        };
      });

      // Attach our computed parameters/security to the operation
      cOperation.parameters = _.map(_.values(oParams), function (parameter) {
        // Used later by getOperationParameters to circumvent the chicken/egg situation (Removed there as well)
        parameter.definition.$$$ptr$$$ = JsonRefs.pathToPointer(parameter.path);

        return parameter.definition;
      });


      if (_.isUndefined(cOperation.security)) {
        cOperation.security = api.resolved.security;
      }

      operations.push(new types.Operation(api, path, method, JsonRefs.pathToPointer(oPath), cOperation));
    });
  });

  return operations;
};

/**
 * Returns an array of Parameter objects for the proviced Operation.
 *
 * @param {types.Operation} operation - The Operation object
 *
 * @returns {types.Parameter[]} The Parameter object array
 */
module.exports.getOperationParameters = function (operation) {
  return _.map(operation.parameters, function (paramDef) {
    var ptr = paramDef.$$$ptr$$$;

    // Remove so we do not have these properties litered throughout the document
    delete paramDef.$$$ptr$$$;

    return new types.Parameter(operation, ptr, paramDef, vHelpers.getParameterSchema(paramDef));
  });
};

/**
 * Creates a sample value for the provided JSON Schema.
 *
 * @param {*} schema - The JSON Schema
 *
 * @returns {*} The sample value
 */
module.exports.getSample = function (schema) {
  return mocker(schema);
};

/**
 * Returns an array of functions used to validate Swagger 2.0 documents semantically.
 *
 * @returns {function[]} The validators to use
 */
module.exports.getSemanticValidators = function () {
  return validators.semanticValidators;
};

},{"../../helpers":2,"../../types":4,"./format-generators":5,"./helpers":7,"./validators":10}],9:[function(require,module,exports){
module.exports={
  "title": "A JSON Schema for Swagger 2.0 API.",
  "id": "http://swagger.io/v2/schema.json#",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "required": [
    "swagger",
    "info",
    "paths"
  ],
  "additionalProperties": false,
  "patternProperties": {
    "^x-": {
      "$ref": "#/definitions/vendorExtension"
    }
  },
  "properties": {
    "swagger": {
      "type": "string",
      "enum": [
        "2.0"
      ],
      "description": "The Swagger version of this document."
    },
    "info": {
      "$ref": "#/definitions/info"
    },
    "host": {
      "type": "string",
      "format": "uri",
      "pattern": "^[^{}/ :\\\\]+(?::\\d+)?$",
      "description": "The fully qualified URI to the host of the API."
    },
    "basePath": {
      "type": "string",
      "pattern": "^/",
      "description": "The base path to the API. Example: '/api'."
    },
    "schemes": {
      "$ref": "#/definitions/schemesList"
    },
    "consumes": {
      "description": "A list of MIME types accepted by the API.",
      "$ref": "#/definitions/mediaTypeList"
    },
    "produces": {
      "description": "A list of MIME types the API can produce.",
      "$ref": "#/definitions/mediaTypeList"
    },
    "paths": {
      "$ref": "#/definitions/paths"
    },
    "definitions": {
      "$ref": "#/definitions/definitions"
    },
    "parameters": {
      "$ref": "#/definitions/parameterDefinitions"
    },
    "responses": {
      "$ref": "#/definitions/responseDefinitions"
    },
    "security": {
      "$ref": "#/definitions/security"
    },
    "securityDefinitions": {
      "$ref": "#/definitions/securityDefinitions"
    },
    "tags": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/tag"
      },
      "uniqueItems": true
    },
    "externalDocs": {
      "$ref": "#/definitions/externalDocs"
    }
  },
  "definitions": {
    "info": {
      "type": "object",
      "description": "General information about the API.",
      "required": [
        "version",
        "title"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "title": {
          "type": "string",
          "description": "A unique and precise title of the API."
        },
        "version": {
          "type": "string",
          "description": "A semantic version number of the API."
        },
        "description": {
          "type": "string",
          "description": "A longer description of the API. Should be different from the title.  Github-flavored markdown is allowed."
        },
        "termsOfService": {
          "type": "string",
          "description": "The terms of service for the API."
        },
        "contact": {
          "$ref": "#/definitions/contact"
        },
        "license": {
          "$ref": "#/definitions/license"
        }
      }
    },
    "contact": {
      "type": "object",
      "description": "Contact information for the owners of the API.",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "The identifying name of the contact person/organization."
        },
        "url": {
          "type": "string",
          "description": "The URL pointing to the contact information.",
          "format": "uri"
        },
        "email": {
          "type": "string",
          "description": "The email address of the contact person/organization.",
          "format": "email"
        }
      }
    },
    "license": {
      "type": "object",
      "required": [
        "name"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the license type. It's encouraged to use an OSI compatible license."
        },
        "url": {
          "type": "string",
          "description": "The URL pointing to the license.",
          "format": "uri"
        }
      }
    },
    "paths": {
      "type": "object",
      "description": "Relative paths to the individual endpoints. They must be relative to the 'basePath'.",
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        },
        "^/": {
          "$ref": "#/definitions/pathItem"
        }
      },
      "additionalProperties": false
    },
    "definitions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/schema"
      },
      "description": "One or more JSON objects describing the schemas being consumed and produced by the API."
    },
    "parameterDefinitions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/parameter"
      },
      "description": "One or more JSON representations for parameters"
    },
    "responseDefinitions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/response"
      },
      "description": "One or more JSON representations for parameters"
    },
    "externalDocs": {
      "type": "object",
      "additionalProperties": false,
      "description": "information about external documentation",
      "required": [
        "url"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "examples": {
      "type": "object",
      "patternProperties": {
        "^[a-z0-9-]+/[a-z0-9\\-+]+$": {}
      },
      "additionalProperties": false
    },
    "mimeType": {
      "type": "string",
      "description": "The MIME type of the HTTP message."
    },
    "operation": {
      "type": "object",
      "required": [
        "responses"
      ],
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        },
        "summary": {
          "type": "string",
          "description": "A brief summary of the operation."
        },
        "description": {
          "type": "string",
          "description": "A longer description of the operation, github-flavored markdown is allowed."
        },
        "externalDocs": {
          "$ref": "#/definitions/externalDocs"
        },
        "operationId": {
          "type": "string",
          "description": "A friendly name of the operation"
        },
        "produces": {
          "description": "A list of MIME types the API can produce.",
          "$ref": "#/definitions/mediaTypeList"
        },
        "consumes": {
          "description": "A list of MIME types the API can consume.",
          "$ref": "#/definitions/mediaTypeList"
        },
        "parameters": {
          "$ref": "#/definitions/parametersList"
        },
        "responses": {
          "$ref": "#/definitions/responses"
        },
        "schemes": {
          "$ref": "#/definitions/schemesList"
        },
        "deprecated": {
          "type": "boolean",
          "default": false
        },
        "security": {
          "$ref": "#/definitions/security"
        }
      }
    },
    "pathItem": {
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "$ref": {
          "type": "string"
        },
        "get": {
          "$ref": "#/definitions/operation"
        },
        "put": {
          "$ref": "#/definitions/operation"
        },
        "post": {
          "$ref": "#/definitions/operation"
        },
        "delete": {
          "$ref": "#/definitions/operation"
        },
        "options": {
          "$ref": "#/definitions/operation"
        },
        "head": {
          "$ref": "#/definitions/operation"
        },
        "patch": {
          "$ref": "#/definitions/operation"
        },
        "parameters": {
          "$ref": "#/definitions/parametersList"
        }
      }
    },
    "responses": {
      "type": "object",
      "description": "Response objects names can either be any valid HTTP status code or 'default'.",
      "minProperties": 1,
      "additionalProperties": false,
      "patternProperties": {
        "^([0-9]{3})$|^(default)$": {
          "$ref": "#/definitions/responseValue"
        },
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "not": {
        "type": "object",
        "additionalProperties": false,
        "patternProperties": {
          "^x-": {
            "$ref": "#/definitions/vendorExtension"
          }
        }
      }
    },
    "responseValue": {
      "oneOf": [
        {
          "$ref": "#/definitions/response"
        },
        {
          "$ref": "#/definitions/jsonReference"
        }
      ]
    },
    "response": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "headers": {
          "$ref": "#/definitions/headers"
        },
        "examples": {
          "$ref": "#/definitions/examples"
        }
      },
      "additionalProperties": false
    },
    "headers": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/header"
      }
    },
    "header": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "integer",
            "boolean",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormat"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "vendorExtension": {
      "description": "Any property starting with x- is valid.",
      "additionalProperties": true,
      "additionalItems": true
    },
    "bodyParameter": {
      "type": "object",
      "required": [
        "name",
        "in",
        "schema"
      ],
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  Github-flavored markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "body"
          ]
        },
        "required": {
          "type": "boolean",
          "description": "Determines whether or not this parameter is required or optional.",
          "default": false
        },
        "schema": {
          "$ref": "#/definitions/schema"
        }
      },
      "additionalProperties": false
    },
    "headerParameterSubSchema": {
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "required": {
          "type": "boolean",
          "description": "Determines whether or not this parameter is required or optional.",
          "default": false
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "header"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  Github-flavored markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "integer",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormat"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      }
    },
    "queryParameterSubSchema": {
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "required": {
          "type": "boolean",
          "description": "Determines whether or not this parameter is required or optional.",
          "default": false
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "query"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  Github-flavored markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "allowEmptyValue": {
          "type": "boolean",
          "default": false,
          "description": "allows sending a parameter by name only or with an empty value."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "integer",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormatWithMulti"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      }
    },
    "formDataParameterSubSchema": {
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "required": {
          "type": "boolean",
          "description": "Determines whether or not this parameter is required or optional.",
          "default": false
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "formData"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  Github-flavored markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "allowEmptyValue": {
          "type": "boolean",
          "default": false,
          "description": "allows sending a parameter by name only or with an empty value."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "integer",
            "array",
            "file"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormatWithMulti"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      }
    },
    "pathParameterSubSchema": {
      "additionalProperties": false,
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "required": {
          "type": "boolean",
          "enum": [
            true
          ],
          "description": "Determines whether or not this parameter is required or optional."
        },
        "in": {
          "type": "string",
          "description": "Determines the location of the parameter.",
          "enum": [
            "path"
          ]
        },
        "description": {
          "type": "string",
          "description": "A brief description of the parameter. This could contain examples of use.  Github-flavored markdown is allowed."
        },
        "name": {
          "type": "string",
          "description": "The name of the parameter."
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "boolean",
            "integer",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormat"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      }
    },
    "nonBodyParameter": {
      "type": "object",
      "required": [
        "name",
        "in",
        "type"
      ],
      "oneOf": [
        {
          "$ref": "#/definitions/headerParameterSubSchema"
        },
        {
          "$ref": "#/definitions/formDataParameterSubSchema"
        },
        {
          "$ref": "#/definitions/queryParameterSubSchema"
        },
        {
          "$ref": "#/definitions/pathParameterSubSchema"
        }
      ]
    },
    "parameter": {
      "oneOf": [
        {
          "$ref": "#/definitions/bodyParameter"
        },
        {
          "$ref": "#/definitions/nonBodyParameter"
        }
      ]
    },
    "schema": {
      "type": "object",
      "description": "A deterministic version of a JSON Schema object.",
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      },
      "properties": {
        "$ref": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "title": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/title"
        },
        "description": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/description"
        },
        "default": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/default"
        },
        "multipleOf": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/multipleOf"
        },
        "maximum": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveInteger"
        },
        "minLength": {
          "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0"
        },
        "pattern": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/pattern"
        },
        "maxItems": {
          "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveInteger"
        },
        "minItems": {
          "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0"
        },
        "uniqueItems": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/uniqueItems"
        },
        "maxProperties": {
          "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveInteger"
        },
        "minProperties": {
          "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0"
        },
        "required": {
          "$ref": "http://json-schema.org/draft-04/schema#/definitions/stringArray"
        },
        "enum": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/enum"
        },
        "additionalProperties": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/additionalProperties"
        },
        "type": {
          "$ref": "http://json-schema.org/draft-04/schema#/properties/type"
        },
        "items": {
          "anyOf": [
            {
              "$ref": "#/definitions/schema"
            },
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "$ref": "#/definitions/schema"
              }
            }
          ],
          "default": {}
        },
        "allOf": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/schema"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/schema"
          },
          "default": {}
        },
        "discriminator": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean",
          "default": false
        },
        "xml": {
          "$ref": "#/definitions/xml"
        },
        "externalDocs": {
          "$ref": "#/definitions/externalDocs"
        },
        "example": {}
      },
      "additionalProperties": false
    },
    "primitivesItems": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "string",
            "number",
            "integer",
            "boolean",
            "array"
          ]
        },
        "format": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/primitivesItems"
        },
        "collectionFormat": {
          "$ref": "#/definitions/collectionFormat"
        },
        "default": {
          "$ref": "#/definitions/default"
        },
        "maximum": {
          "$ref": "#/definitions/maximum"
        },
        "exclusiveMaximum": {
          "$ref": "#/definitions/exclusiveMaximum"
        },
        "minimum": {
          "$ref": "#/definitions/minimum"
        },
        "exclusiveMinimum": {
          "$ref": "#/definitions/exclusiveMinimum"
        },
        "maxLength": {
          "$ref": "#/definitions/maxLength"
        },
        "minLength": {
          "$ref": "#/definitions/minLength"
        },
        "pattern": {
          "$ref": "#/definitions/pattern"
        },
        "maxItems": {
          "$ref": "#/definitions/maxItems"
        },
        "minItems": {
          "$ref": "#/definitions/minItems"
        },
        "uniqueItems": {
          "$ref": "#/definitions/uniqueItems"
        },
        "enum": {
          "$ref": "#/definitions/enum"
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOf"
        }
      }
    },
    "security": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/securityRequirement"
      },
      "uniqueItems": true
    },
    "securityRequirement": {
      "type": "object",
      "additionalProperties": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "uniqueItems": true
      }
    },
    "xml": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "attribute": {
          "type": "boolean",
          "default": false
        },
        "wrapped": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "tag": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "externalDocs": {
          "$ref": "#/definitions/externalDocs"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "securityDefinitions": {
      "type": "object",
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/basicAuthenticationSecurity"
          },
          {
            "$ref": "#/definitions/apiKeySecurity"
          },
          {
            "$ref": "#/definitions/oauth2ImplicitSecurity"
          },
          {
            "$ref": "#/definitions/oauth2PasswordSecurity"
          },
          {
            "$ref": "#/definitions/oauth2ApplicationSecurity"
          },
          {
            "$ref": "#/definitions/oauth2AccessCodeSecurity"
          }
        ]
      }
    },
    "basicAuthenticationSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "basic"
          ]
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "apiKeySecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "name",
        "in"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "apiKey"
          ]
        },
        "name": {
          "type": "string"
        },
        "in": {
          "type": "string",
          "enum": [
            "header",
            "query"
          ]
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2ImplicitSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "flow",
        "authorizationUrl"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "oauth2"
          ]
        },
        "flow": {
          "type": "string",
          "enum": [
            "implicit"
          ]
        },
        "scopes": {
          "$ref": "#/definitions/oauth2Scopes"
        },
        "authorizationUrl": {
          "type": "string",
          "format": "uri"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2PasswordSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "flow",
        "tokenUrl"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "oauth2"
          ]
        },
        "flow": {
          "type": "string",
          "enum": [
            "password"
          ]
        },
        "scopes": {
          "$ref": "#/definitions/oauth2Scopes"
        },
        "tokenUrl": {
          "type": "string",
          "format": "uri"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2ApplicationSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "flow",
        "tokenUrl"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "oauth2"
          ]
        },
        "flow": {
          "type": "string",
          "enum": [
            "application"
          ]
        },
        "scopes": {
          "$ref": "#/definitions/oauth2Scopes"
        },
        "tokenUrl": {
          "type": "string",
          "format": "uri"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2AccessCodeSecurity": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "flow",
        "authorizationUrl",
        "tokenUrl"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "oauth2"
          ]
        },
        "flow": {
          "type": "string",
          "enum": [
            "accessCode"
          ]
        },
        "scopes": {
          "$ref": "#/definitions/oauth2Scopes"
        },
        "authorizationUrl": {
          "type": "string",
          "format": "uri"
        },
        "tokenUrl": {
          "type": "string",
          "format": "uri"
        },
        "description": {
          "type": "string"
        }
      },
      "patternProperties": {
        "^x-": {
          "$ref": "#/definitions/vendorExtension"
        }
      }
    },
    "oauth2Scopes": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "mediaTypeList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/mimeType"
      },
      "uniqueItems": true
    },
    "parametersList": {
      "type": "array",
      "description": "The parameters needed to send a valid API call.",
      "additionalItems": false,
      "items": {
        "oneOf": [
          {
            "$ref": "#/definitions/parameter"
          },
          {
            "$ref": "#/definitions/jsonReference"
          }
        ]
      },
      "uniqueItems": true
    },
    "schemesList": {
      "type": "array",
      "description": "The transfer protocol of the API.",
      "items": {
        "type": "string",
        "enum": [
          "http",
          "https",
          "ws",
          "wss"
        ]
      },
      "uniqueItems": true
    },
    "collectionFormat": {
      "type": "string",
      "enum": [
        "csv",
        "ssv",
        "tsv",
        "pipes"
      ],
      "default": "csv"
    },
    "collectionFormatWithMulti": {
      "type": "string",
      "enum": [
        "csv",
        "ssv",
        "tsv",
        "pipes",
        "multi"
      ],
      "default": "csv"
    },
    "title": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/title"
    },
    "description": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/description"
    },
    "default": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/default"
    },
    "multipleOf": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/multipleOf"
    },
    "maximum": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/maximum"
    },
    "exclusiveMaximum": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/exclusiveMaximum"
    },
    "minimum": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/minimum"
    },
    "exclusiveMinimum": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/exclusiveMinimum"
    },
    "maxLength": {
      "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveInteger"
    },
    "minLength": {
      "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0"
    },
    "pattern": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/pattern"
    },
    "maxItems": {
      "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveInteger"
    },
    "minItems": {
      "$ref": "http://json-schema.org/draft-04/schema#/definitions/positiveIntegerDefault0"
    },
    "uniqueItems": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/uniqueItems"
    },
    "enum": {
      "$ref": "http://json-schema.org/draft-04/schema#/properties/enum"
    },
    "jsonReference": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "$ref": {
          "type": "string"
        }
      }
    }
  }
}
},{}],10:[function(require,module,exports){
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Apigee Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

'use strict';

var _ = (window._);
var customFormatValidators = require('./format-validators');
var helpers = require('../../helpers');
var JsonRefs = (window.JsonRefs);
var swaggerSchema = require('./schema.json');
var vHelpers = require('./helpers');

function getSchemaProperties (schema) {
  var properties = _.keys(schema.properties); // Start with the defined properties

  // Add properties defined in the parent
  _.forEach(schema.allOf, function (parent) {
    _.forEach(getSchemaProperties(parent), function (property) {
      if (_.indexOf(properties, property) === -1) {
        properties.push(property);
      }
    });
  });

  return properties;
}

function walkSchema (blacklist, schema, path, handlers, response) {
  var type = schema.type || 'object';

  function shouldSkip (cPath) {
    return _.indexOf(blacklist, JsonRefs.pathToPointer(cPath)) > -1;
  }

  // Do not process items in the blacklist as they've been processed already
  if (shouldSkip(path)) {
    return;
  }

  function walker (pSchema, pPath) {
    // Do not process items in the blacklist as they've been processed already
    if (shouldSkip(pPath)) {
      return;
    }

    _.forEach(pSchema, function (item, name) {
      if (_.isNumber(name)) {
        name = name.toString();
      }

      walkSchema(blacklist, item, pPath.concat(name), handlers, response);
    });

    _.forEach(handlers, function (handler) {
      handler(response, pSchema, pPath);
    });
  }

  if (!_.isUndefined(schema.schema)) {
    walkSchema(blacklist, schema.schema, path.concat('schema'), handlers, response);
  } else if (type === 'array' && !_.isUndefined(schema.items)) {
    walker(schema.items, path.concat('items'));
  } else if (type === 'object') {
    if (!_.isUndefined(schema.additionalProperties)) {
      walkSchema(blacklist, schema.additionalProperties, path.concat('additionalProperties'), handlers, response);
    }

    _.forEach(['allOf', 'properties'], function (propName) {
      if (!_.isUndefined(schema[propName])) {
        walker(schema[propName], path.concat(propName));
      }
    });
  }

  _.forEach(handlers, function (handler) {
    handler(response, schema, path);
  });
}

/**
 * Validates the resolved Swagger document against the Swagger 2.0 JSON Schema.
 *
 * @param {SwaggerApi} api - The SwaggerApi object
 *
 * @returns {object} Object containing the errors and warnings of the validation
 */
function validateStructure (api) {
  return helpers.validateAgainstSchema(helpers.createJSONValidator({
    formatValidators: customFormatValidators
  }), swaggerSchema, api.resolved);
}

/* Schema Object Validators */

function validateArrayTypeItemsExistence (response, schema, path) {
  if (schema.type === 'array' && _.isUndefined(schema.items)) {
    response.errors.push({
      code: 'OBJECT_MISSING_REQUIRED_PROPERTY',
      message: 'Missing required property: items',
      path: path
    });
  }
}

function validateDefaultValue (response, schema, path) {
  var result;

  if (!_.isUndefined(schema.default)) {
    result = helpers.validateAgainstSchema(helpers.createJSONValidator({
      formatValidators: customFormatValidators
    }), schema, schema.default);

    _.forEach(result.errors, function (error) {
      error.path = path.concat(error.path.concat('default'));

      response.errors.push(error);
    });

    _.forEach(result.warnings, function (warning) {
      warning.path = path.concat(warning.path.push('default'));

      response.warnings.push(warning);
    });
  }
}

function validateSchemaProperties (response, schema, path) {
  _.forEach(_.difference(schema.required || [], getSchemaProperties(schema)), function (name) {
    response.errors.push({
      code: 'OBJECT_MISSING_REQUIRED_PROPERTY_DEFINITION',
      message: 'Missing required property definition: ' + name,
      path: path
    });
  });
}

/**
 * Validates all references are to existing documents/document fragments.
 *
 * @param {SwaggerApi} api - The SwaggerApi object
 *
 * @returns {object} Object containing the errors and warnings of the validation
 */
function validateMissingReferences (api) {
  var response = {
    errors: [],
    warnings: []
  };

  _.forEach(api.references, function (ref, ptr) {
    if (!_.has(ref, 'value')) {
      response.errors.push({
        code: 'UNRESOLVABLE_REFERENCE',
        message: 'Reference could not be resolved: ' + ref.ref,
        path: JsonRefs.pathFromPointer(ptr)
      });
    }
  });

  return response;
}

/**
 * Validates all schema objects and schema-like objects (non-body path parameters).
 *
 * * Validates that all array types have their required items property
 *     (@see {@link https://github.com/swagger-api/swagger-spec/issues/174})
 * * Validates that all default values are valid based on its respective schema
 *
 * @param {SwaggerApi} api - The SwaggerApi object
 *
 * @returns {object} Object containing the errors and warnings of the validation
 */
function validateSchemaObjects (api) {
  // Build a blacklist to avoid cascading errors/warnings
  var blacklist = _.reduce(api.references, function (list, metadata, ptr) {
    var refPath = JsonRefs.pathFromPointer(ptr);

    // Remove the $ref part of the path
    refPath.pop();

    list.push(JsonRefs.pathToPointer(refPath));

    return list;
  }, []);
  var response = {
    errors: [],
    warnings: []
  };
  var validators = [
    validateArrayTypeItemsExistence,
    validateDefaultValue,
    validateSchemaProperties
  ];

  function validateParameters (parameters, path) {
    _.forEach(parameters, function (parameterDef, name) {
      var pPath;

      if (_.isNumber(name)) {
        name = name.toString();
      }

      pPath = path.concat(name);

      // Create JSON Schema for non-body parameters
      if (parameterDef.in !== 'body') {
        parameterDef = vHelpers.getParameterSchema(parameterDef);
      }

      walkSchema(blacklist, parameterDef, pPath, validators, response);
    });
  }

  function validateResponses (responses, path) {
    _.forEach(responses, function (responseDef, name) {
      var rPath = path.concat(name);

      _.forEach(responseDef.headers, function (header, hName) {
        walkSchema(blacklist, header, rPath.concat(['headers', hName]), validators, response);
      });

      if (!_.isUndefined(responseDef.schema)) {
        walkSchema(blacklist, responseDef.schema, rPath.concat('schema'), validators, response);
      }
    });
  }

  // Validate definitions
  _.forEach(api.resolved.definitions, function (definitionDef, name) {
    walkSchema(blacklist, definitionDef, ['definitions', name], validators, response);
  });

  // Validate global parameter definitions
  validateParameters(api.resolved.parameters, ['parameters']);

  // Validate global response definitions
  validateResponses(api.resolved.responses, ['responses']);

  // Validate paths and operations
  _.forEach(api.resolved.paths, function (pathDef, path) {
    var pPath = ['paths', path];

    // Validate path-level parameter definitions
    validateParameters(pathDef.parameters, pPath.concat('parameters'));

    _.forEach(pathDef, function (operationDef, method) {
      var oPath = pPath.concat(method);

      // Do not process non-operations
      if (_.indexOf(vHelpers.supportedHttpMethods, method) === -1) {
        return;
      }

      // Validate operation parameter definitions
      validateParameters(operationDef.parameters, oPath.concat('parameters'));

      // Validate operation response definitions
      validateResponses(operationDef.responses, oPath.concat('responses'));
    });
  });

  return response;
}

/**
 * Validates paths and operations (Written as one validator to avoid multiple passes)
 *
 * * Ensure that path parameters are defined for each path parameter declaration
 * * Ensure that defined path parameters match a declared path parameter
 * * Ensure that paths are functionally different
 * * Ensure that an operation only has one body parameter
 * * Ensure that an operation has only a body or formData parameter but not both
 * * Ensure that all operation parameters are unique (in + name)
 *
 * @param {SwaggerApi} api - The SwaggerApi object
 *
 * @returns {object} Object containing the errors and warnings of the validation
 */
function validatePathsAndOperations (api) {
  var response = {
    errors: [],
    warnings: []
  };

  function validateDuplicateParameter (seenParameters, parameter, path) {
    var pName = parameter.in + ':' + parameter.name;

    // Identify duplicate parameter names
    if (_.indexOf(seenParameters, pName) > -1) {
      response.errors.push({
        code: 'DUPLICATE_PARAMETER',
        message: 'Operation cannot have duplicate parameters: ' + JsonRefs.pathToPointer(path),
        path: path
      });
    } else {
      seenParameters.push(pName);
    }

    return seenParameters;
  }

  _.reduce(api.resolved.paths, function (paths, pathDef, path) {
    var declaredPathParameters = [];
    var normalizedPath = path;
    var pPath = ['paths', path];

    _.forEach(path.match(/\{(.*?)\}/g), function (arg, index) {
      // Record the path parameter name
      declaredPathParameters.push(arg.replace(/[{}]/g, ''));

      // Update the normalized path
      normalizedPath = normalizedPath.replace(arg, 'arg' + index);
    });

    // Idenfity paths that are functionally the same
    if (_.indexOf(paths, normalizedPath) > -1) {
      response.errors.push({
        code: 'EQUIVALENT_PATH',
        message: 'Equivalent path already exists: ' + path,
        path: pPath
      });
    } else {
      paths.push(normalizedPath);
    }

    // Identify duplicate path-level parameters (We do this manually since SwaggerApi#getOperation consolidates them)
    _.reduce(pathDef.parameters, function (seenParameters, parameter, index) {
      return validateDuplicateParameter(seenParameters, parameter, pPath.concat(['parameters', index.toString()]));
    }, []);

    _.forEach(pathDef, function (operationDef, method) {
      var definedPathParameters = {};
      var oPath = pPath.concat(method);
      var pathMetadata;
      var parameters;

      // Do not process non-operations
      if (_.indexOf(vHelpers.supportedHttpMethods, method) === -1) {
        return;
      }

      // Identify duplicate operation-level parameters (We do this manually for the same reasons above)
      _.reduce(operationDef.parameters, function (seenParameters, parameter, index) {
        return validateDuplicateParameter(seenParameters, parameter, oPath.concat(['parameters', index.toString()]));
      }, []);

      // Use SwaggerApi#getOperation to avoid having to consolidate parameters
      parameters = api.getOperation(path, method).getParameters();

      pathMetadata = _.reduce(parameters, function (metadata, parameter) {
        // Record path parameters
        if (parameter.in === 'path') {
          definedPathParameters[parameter.name] = parameter.ptr;
        } else if (parameter.in === 'body') {
          metadata.bodyParameteters += 1;
        } else if (parameter.in === 'formData') {
          metadata.formParameters += 1;
        }

        return metadata;
      }, {bodyParameteters: 0, formParameters: 0});

      // Identify multiple body parameters
      if (pathMetadata.bodyParameteters > 1) {
        response.errors.push({
          code: 'MULTIPLE_BODY_PARAMETERS',
          message: 'Operation cannot have multiple body parameters',
          path: oPath
        });
      }

      // Identify having both a body and a form parameter
      if (pathMetadata.bodyParameteters > 0 && pathMetadata.formParameters > 0) {
        response.errors.push({
          code: 'INVALID_PARAMETER_COMBINATION',
          message: 'Operation cannot have a body parameter and a formData parameter',
          path: oPath
        });
      }

      // Identify undefined path parameters
      _.forEach(_.difference(declaredPathParameters, _.keys(definedPathParameters)), function (name) {
        response.errors.push({
          code: 'MISSING_PATH_PARAMETER_DEFINITION',
          message: 'Path parameter is declared but is not defined: ' + name,
          path: oPath
        });
      });

      // Identify undeclared path parameters
      _.forEach(_.difference(_.keys(definedPathParameters), declaredPathParameters), function (name) {
        response.errors.push({
          code: 'MISSING_PATH_PARAMETER_DECLARATION',
          message: 'Path parameter is defined but is not declared: ' + name,
          path: JsonRefs.pathFromPointer(definedPathParameters[name])
        });
      });
    });

    return paths;
  }, []);

  return response;
}

module.exports = {
  jsonSchemaValidator: validateStructure,
  semanticValidators: [
    validateMissingReferences,
    validateSchemaObjects,
    validatePathsAndOperations
  ]
};

},{"../../helpers":2,"./format-validators":6,"./helpers":7,"./schema.json":9}],11:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var kMaxLength = 0x3fffffff
var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Note:
 *
 * - Implementation must support adding new properties to `Uint8Array` instances.
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *    incorrect length in some situations.
 *
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
 * get the Object implementation, which is slower but will work correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  this.length = 0
  this.parent = undefined

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined' && object.buffer instanceof ArrayBuffer) {
    return fromTypedArray(that, object)
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
    that._isBuffer = true
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  var i = 0
  var len = Math.min(x, y)
  while (i < len) {
    if (a[i] !== b[i]) break

    ++i
  }

  if (i !== len) {
    x = a[i]
    y = b[i]
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = String(string)

  if (string.length === 0) return 0

  switch (encoding || 'utf8') {
    case 'ascii':
    case 'binary':
    case 'raw':
      return string.length
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return string.length * 2
    case 'hex':
      return string.length >>> 1
    case 'utf8':
    case 'utf-8':
      return utf8ToBytes(string).length
    case 'base64':
      return base64ToBytes(string).length
    default:
      return string.length
  }
}
Buffer.byteLength = byteLength

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function toString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function get (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function set (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), targetStart)
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function _augment (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array set method before overwriting
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.indexOf = BP.indexOf
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUIntLE = BP.readUIntLE
  arr.readUIntBE = BP.readUIntBE
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readIntLE = BP.readIntLE
  arr.readIntBE = BP.readIntBE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUIntLE = BP.writeUIntLE
  arr.writeUIntBE = BP.writeUIntBE
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeIntLE = BP.writeIntLE
  arr.writeIntBE = BP.writeIntBE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []
  var i = 0

  for (; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (leadSurrogate) {
        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          leadSurrogate = codePoint
          continue
        } else {
          // valid surrogate pair
          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
          leadSurrogate = null
        }
      } else {
        // no lead yet

        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else {
          // valid lead
          leadSurrogate = codePoint
          continue
        }
      }
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
      leadSurrogate = null
    }

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x200000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

},{"base64-js":12,"ieee754":13,"is-array":14}],12:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],13:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],14:[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],15:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            currentQueue[queueIndex].run();
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],16:[function(require,module,exports){

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  return ('WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  return JSON.stringify(v);
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}
  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}

},{"./debug":17}],17:[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = Array.prototype.slice.call(arguments);

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    if ('function' === typeof exports.formatArgs) {
      args = exports.formatArgs.apply(self, args);
    }
    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":18}],18:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options){
  options = options || {};
  if ('string' == typeof val) return parse(val);
  return options.long
    ? long(val)
    : short(val);
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = '' + str;
  if (str.length > 10000) return;
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
  if (!match) return;
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function short(ms) {
  if (ms >= d) return Math.round(ms / d) + 'd';
  if (ms >= h) return Math.round(ms / h) + 'h';
  if (ms >= m) return Math.round(ms / m) + 'm';
  if (ms >= s) return Math.round(ms / s) + 's';
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function long(ms) {
  return plural(ms, d, 'day')
    || plural(ms, h, 'hour')
    || plural(ms, m, 'minute')
    || plural(ms, s, 'second')
    || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) return;
  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
  return Math.ceil(ms / n) + ' ' + name + 's';
}

},{}],19:[function(require,module,exports){
/*
 * $Id: base64.js,v 2.15 2014/04/05 12:58:57 dankogai Exp dankogai $
 *
 *  Licensed under the MIT license.
 *    http://opensource.org/licenses/mit-license
 *
 *  References:
 *    http://en.wikipedia.org/wiki/Base64
 */

(function(global) {
    'use strict';
    // existing version for noConflict()
    var _Base64 = global.Base64;
    var version = "2.1.8";
    // if node.js, we use Buffer
    var buffer;
    if (typeof module !== 'undefined' && module.exports) {
        buffer = require('buffer').Buffer;
    }
    // constants
    var b64chars
        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    var b64tab = function(bin) {
        var t = {};
        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;
        return t;
    }(b64chars);
    var fromCharCode = String.fromCharCode;
    // encoder stuff
    var cb_utob = function(c) {
        if (c.length < 2) {
            var cc = c.charCodeAt(0);
            return cc < 0x80 ? c
                : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))
                                + fromCharCode(0x80 | (cc & 0x3f)))
                : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))
                   + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
                   + fromCharCode(0x80 | ( cc         & 0x3f)));
        } else {
            var cc = 0x10000
                + (c.charCodeAt(0) - 0xD800) * 0x400
                + (c.charCodeAt(1) - 0xDC00);
            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))
                    + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))
                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
                    + fromCharCode(0x80 | ( cc         & 0x3f)));
        }
    };
    var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
    var utob = function(u) {
        return u.replace(re_utob, cb_utob);
    };
    var cb_encode = function(ccc) {
        var padlen = [0, 2, 1][ccc.length % 3],
        ord = ccc.charCodeAt(0) << 16
            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)
            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),
        chars = [
            b64chars.charAt( ord >>> 18),
            b64chars.charAt((ord >>> 12) & 63),
            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),
            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)
        ];
        return chars.join('');
    };
    var btoa = global.btoa ? function(b) {
        return global.btoa(b);
    } : function(b) {
        return b.replace(/[\s\S]{1,3}/g, cb_encode);
    };
    var _encode = buffer ? function (u) {
        return (u.constructor === buffer.constructor ? u : new buffer(u))
        .toString('base64')
    }
    : function (u) { return btoa(utob(u)) }
    ;
    var encode = function(u, urisafe) {
        return !urisafe
            ? _encode(String(u))
            : _encode(String(u)).replace(/[+\/]/g, function(m0) {
                return m0 == '+' ? '-' : '_';
            }).replace(/=/g, '');
    };
    var encodeURI = function(u) { return encode(u, true) };
    // decoder stuff
    var re_btou = new RegExp([
        '[\xC0-\xDF][\x80-\xBF]',
        '[\xE0-\xEF][\x80-\xBF]{2}',
        '[\xF0-\xF7][\x80-\xBF]{3}'
    ].join('|'), 'g');
    var cb_btou = function(cccc) {
        switch(cccc.length) {
        case 4:
            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)
                |    ((0x3f & cccc.charCodeAt(1)) << 12)
                |    ((0x3f & cccc.charCodeAt(2)) <<  6)
                |     (0x3f & cccc.charCodeAt(3)),
            offset = cp - 0x10000;
            return (fromCharCode((offset  >>> 10) + 0xD800)
                    + fromCharCode((offset & 0x3FF) + 0xDC00));
        case 3:
            return fromCharCode(
                ((0x0f & cccc.charCodeAt(0)) << 12)
                    | ((0x3f & cccc.charCodeAt(1)) << 6)
                    |  (0x3f & cccc.charCodeAt(2))
            );
        default:
            return  fromCharCode(
                ((0x1f & cccc.charCodeAt(0)) << 6)
                    |  (0x3f & cccc.charCodeAt(1))
            );
        }
    };
    var btou = function(b) {
        return b.replace(re_btou, cb_btou);
    };
    var cb_decode = function(cccc) {
        var len = cccc.length,
        padlen = len % 4,
        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)
            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)
            | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)
            | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),
        chars = [
            fromCharCode( n >>> 16),
            fromCharCode((n >>>  8) & 0xff),
            fromCharCode( n         & 0xff)
        ];
        chars.length -= [0, 0, 2, 1][padlen];
        return chars.join('');
    };
    var atob = global.atob ? function(a) {
        return global.atob(a);
    } : function(a){
        return a.replace(/[\s\S]{1,4}/g, cb_decode);
    };
    var _decode = buffer ? function(a) {
        return (a.constructor === buffer.constructor
                ? a : new buffer(a, 'base64')).toString();
    }
    : function(a) { return btou(atob(a)) };
    var decode = function(a){
        return _decode(
            String(a).replace(/[-_]/g, function(m0) { return m0 == '-' ? '+' : '/' })
                .replace(/[^A-Za-z0-9\+\/]/g, '')
        );
    };
    var noConflict = function() {
        var Base64 = global.Base64;
        global.Base64 = _Base64;
        return Base64;
    };
    // export Base64
    global.Base64 = {
        VERSION: version,
        atob: atob,
        btoa: btoa,
        fromBase64: decode,
        toBase64: encode,
        utob: utob,
        encode: encode,
        encodeURI: encodeURI,
        btou: btou,
        decode: decode,
        noConflict: noConflict
    };
    // if ES5 is available, make Base64.extendString() available
    if (typeof Object.defineProperty === 'function') {
        var noEnum = function(v){
            return {value:v,enumerable:false,writable:true,configurable:true};
        };
        global.Base64.extendString = function () {
            Object.defineProperty(
                String.prototype, 'fromBase64', noEnum(function () {
                    return decode(this)
                }));
            Object.defineProperty(
                String.prototype, 'toBase64', noEnum(function (urisafe) {
                    return encode(this, urisafe)
                }));
            Object.defineProperty(
                String.prototype, 'toBase64URI', noEnum(function () {
                    return encode(this, true)
                }));
        };
    }
    // that's it!
    if (global['Meteor']) {
       Base64 = global.Base64; // for normal export in Meteor.js
    }
})(this);

},{"buffer":11}],20:[function(require,module,exports){
'use strict';

var container = require('./util/container'),
    traverse = require('./util/traverse'),
    formats = require('./util/formats');

var deref = require('deref');

function generate(schema, refs) {
  var $ = deref();

  try {
    if (Array.isArray(refs)) {
      return traverse($(schema, refs, true));
    } else {
      $.refs = refs || {};
    }

    return traverse($(schema, true));
  } catch (e) {
    if (e.path) {
      throw new Error(e.message + ' in ' + '/' + e.path.join('/'));
    } else {
      throw e;
    }
  }
}

generate.formats = formats;
generate.extend = container.set;

module.exports = generate;

},{"./util/container":29,"./util/formats":31,"./util/traverse":36,"deref":38}],21:[function(require,module,exports){
'use strict';

var random = require('../util/random'),
    traverse = require('../util/traverse'),
    hasProps = require('../util/has-props');

var ParseError = require('../util/error');

function unique(path, items, value, sample) {
  var tmp = [],
      seen = [];

  function walk(obj) {
    var json = JSON.stringify(obj);

    if (seen.indexOf(json) === -1) {
      seen.push(json);
      tmp.push(obj);
    }
  }

  items.forEach(walk);

  // TODO: find a better solution?
  var limit = 100;

  while (tmp.length !== items.length) {
    walk(traverse(value.items || sample, path));

    if (!limit--) {
      break;
    }
  }

  return tmp;
}

module.exports = function(value, path) {
  var items = [];

  if (!(value.items || value.additionalItems)) {
    if (hasProps(value, 'minItems', 'maxItems', 'uniqueItems')) {
      throw new ParseError('missing items for ' + JSON.stringify(value), path);
    }

    return items;
  }

  if (Array.isArray(value.items)) {
    return Array.prototype.concat.apply(items, value.items.map(function(item, key) {
      return traverse(item, path.concat(['items', key]));
    }));
  }

  var length = random(value.minItems, value.maxItems, 1, 5),
      sample = typeof value.additionalItems === 'object' ? value.additionalItems : {};

  for (var current = items.length; current < length; current += 1) {
    items.push(traverse(value.items || sample, path.concat(['items', current])));
  }

  if (value.uniqueItems) {
    return unique(path.concat(['items']), items, value, sample);
  }

  return items;
};

},{"../util/error":30,"../util/has-props":32,"../util/random":35,"../util/traverse":36}],22:[function(require,module,exports){
'use strict';

module.exports = function() {
  return Math.random() > 0.5;
};

},{}],23:[function(require,module,exports){
'use strict';

var number = require('./number');

module.exports = function(value) {
  value.hasPrecision = false;

  return Math.floor(number(value));
};

},{"./number":25}],24:[function(require,module,exports){
'use strict';

module.exports = function() {
  return null;
};

},{}],25:[function(require,module,exports){
'use strict';

var MIN_INTEGER = -100000000,
    MAX_INTEGER = 100000000;

var string = require('./string'),
    random = require('../util/random');

module.exports = function(value) {
  if (value.faker || value.chance) {
    return string(value);
  }

  var min = typeof value.minimum === 'undefined' ? MIN_INTEGER : value.minimum,
      max = typeof value.maximum === 'undefined' ? MAX_INTEGER : value.maximum;

  if (value.exclusiveMinimum && value.minimum) {
    min += 1;
  }

  if (value.exclusiveMaximum && value.maximum) {
    max -= 1;
  }

  if (value.multipleOf) {
    var base = random(Math.floor(min / value.multipleOf), Math.floor(max / value.multipleOf)) * value.multipleOf;

    while (base < min) {
      base += value.multipleOf;
    }

    return base;
  }

  if (value.hasPrecision) {
    return random(false, min, max);
  }

  return random(Math.random() > 0.5, min, max);
};

},{"../util/random":35,"./string":27}],26:[function(require,module,exports){
'use strict';

var container = require('../util/container'),
    random = require('../util/random'),
    traverse = require('../util/traverse'),
    hasProps = require('../util/has-props');

var faker = container.get('faker'),
    RandExp = container.get('randexp'),
    randexp = RandExp.randexp;

var ParseError = require('../util/error');

module.exports = function(value, path) {
  var props = {};

  if (!(value.properties || value.patternProperties || value.additionalProperties)) {
    if (hasProps(value, 'minProperties', 'maxProperties', 'dependencies', 'required')) {
      throw new ParseError('missing properties for ' + JSON.stringify(value), path);
    }

    return props;
  }

  var reqProps = value.required || [],
      allProps = value.properties ? Object.keys(value.properties) : [];

  reqProps.forEach(function(key) {
    if (value.properties && value.properties[key]) {
      props[key] = value.properties[key];
    }
  });

  var optProps = allProps.filter(function(prop) {
    return reqProps.indexOf(prop) === -1;
  });

  if (value.patternProperties) {
    optProps = Array.prototype.concat.apply(optProps, Object.keys(value.patternProperties));
  }

  var length = random(value.minProperties, value.maxProperties, 0, optProps.length);

  random.shuffle(optProps).slice(0, length).forEach(function(key) {
    if (value.properties && value.properties[key]) {
      props[key] = value.properties[key];
    } else {
      props[randexp(key)] = value.patternProperties[key];
    }
  });

  var current = Object.keys(props).length,
      sample = typeof value.additionalProperties === 'object' ? value.additionalProperties : {};

  if (current < length) {
    faker.lorem.words(length - current).forEach(function(key) {
      props[key + randexp('\\w{1,10}')] = sample;
    });
  }

  return traverse(props, path.concat(['properties']));
};

},{"../util/container":29,"../util/error":30,"../util/has-props":32,"../util/random":35,"../util/traverse":36}],27:[function(require,module,exports){
'use strict';

var container = require('../util/container');

var faker = container.get('faker'),
    Chance = container.get('chance'),
    RandExp = container.get('randexp'),
    chance = new Chance(),
    randexp = RandExp.randexp;

var random = require('../util/random'),
    formats = require('../util/formats');

var regexps = {
  email: '[a-zA-Z\\d][a-zA-Z\\d-]{1,13}[a-zA-Z\\d]@{hostname}',
  hostname: '[a-zA-Z]{1,33}\\.[a-z]{2,4}',
  ipv6: '[abcdef\\d]{4}(:[abcdef\\d]{4}){7}',
  uri: '[a-zA-Z\\d_][\\w\\\/\\d_-]{1,40}'
};

function get(obj, key) {
  var parts = key.split('.');

  while (parts.length) {
    var prop = parts.shift();

    if (!obj[prop]) {
      break;
    }

    obj = obj[prop];
  }

  return obj;
}

function generate(value) {
  if (value.use) {
    var args = [],
        path = value.key;

    if (typeof path === 'object') {
      path = Object.keys(path)[0];

      if (Array.isArray(value.key[path])) {
        args = value.key[path];
      } else {
        args.push(value.key[path]);
      }
    }

    var gen = get(value.gen, path);

    if (typeof gen !== 'function') {
      throw new Error('unknown ' + value.use + '-generator for ' + JSON.stringify(value.key));
    }

    return gen.apply(value.gen, args);
  }

  switch (value.format) {
    case 'date-time':
      return new Date(random(0, 100000000000000)).toISOString();

    case 'email':
    case 'hostname':
    case 'ipv6':
    case 'uri':
      return randexp(regexps[value.format]).replace(/\{(\w+)\}/, function(matches, key) {
        return randexp(regexps[key]);
      });

    case 'ipv4':
      return [0, 0, 0, 0].map(function() {
        return random(0, 255);
      }).join('.');

    default:
      var callback = formats(value.format);

      if (typeof callback !== 'function') {
        throw new Error('unknown generator for ' + JSON.stringify(value.format));
      }

      var generators = {
        faker: faker,
        chance: chance,
        randexp: randexp
      };

      return callback(generators, value);
  }
}

module.exports = function(value) {
  if (value.faker || value.chance) {
    return generate({
      use: value.faker ? 'faker' : 'chance',
      gen: value.faker ? faker : chance,
      key: value.faker || value.chance
    });
  }

  if (value.format) {
    return generate(value);
  }

  if (value.pattern) {
    return randexp(value.pattern);
  }

  if (value.minLength || value.maxLength) {
    var min = Math.max(0, value.minLength || 0),
        max = random(min, value.maxLength);

    return randexp('.{' + min + ',' + max + '}');
  }

  return faker.lorem.words(random(1, 5)).join(' ');
};

},{"../util/container":29,"../util/formats":31,"../util/random":35}],28:[function(require,module,exports){
'use strict';

function combine(target) {
  var props = Array.prototype.slice.call(arguments, 1);

  props.forEach(function(obj) {
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        target[key] = obj[key];
      }
    }
  });
}

module.exports = combine;

},{}],29:[function(require,module,exports){
'use strict';

// static requires - handle both initial dependency load (deps will be available
// among other modules) as well as they will be included by browserify AST
var container = {
  faker: require('faker'),
  chance: require('chance'),
  randexp: require('randexp')
};

module.exports = {
  set: function(name, callback) {
    if (typeof container[name] === 'undefined') {
      throw new ReferenceError('"' + name + '" dependency doesn\'t exist.');
    }

    container[name] = callback(container[name]);
  },
  get: function(name) {
    return container[name];
  }
};

},{"chance":37,"faker":44,"randexp":88}],30:[function(require,module,exports){
'use strict';

function ParseError(message, path) {
  this.message = message;
  this.path = path;
  this.name = 'ParseError';
}

ParseError.prototype = Error.prototype;

module.exports = ParseError;

},{}],31:[function(require,module,exports){
'use strict';

var registry = {};

module.exports = function(name, callback) {
  if (callback) {
    registry[name] = callback;
  } else if (typeof name === 'object') {
    for (var method in name) {
      registry[method] = name[method];
    }
  } else if (name) {
    return registry[name];
  }

  return registry;
};

},{}],32:[function(require,module,exports){
'use strict';

module.exports = function(obj) {
  return Array.prototype.slice.call(arguments, 1).filter(function(key) {
    return typeof obj[key] !== 'undefined';
  }).length > 0;
};

},{}],33:[function(require,module,exports){
'use strict';

var inferredProperties = {
  array: [
    'additionalItems',
    'items',
    'maxItems',
    'minItems',
    'uniqueItems'
  ],
  integer: [
    'exclusiveMaximum',
    'exclusiveMinimum',
    'maximum',
    'minimum',
    'multipleOf'
  ],
  object: [
    'additionalProperties',
    'dependencies',
    'maxProperties',
    'minProperties',
    'patternProperties',
    'properties',
    'required'
  ],
  string: [
    'maxLength',
    'menlength',
    'pattern'
  ]
};

inferredProperties.number = inferredProperties.integer;

function mayHaveType(obj, props) {
  return Object.keys(obj).filter(function(prop) {
    return props.indexOf(prop) > -1;
  }).length > 0;
}

module.exports = function(obj) {
  for (var type in inferredProperties) {
    if (mayHaveType(obj, inferredProperties[type])) {
      return type;
    }
  }
};

},{}],34:[function(require,module,exports){
'use strict';

module.exports = {
  array: require('../types/array'),
  boolean: require('../types/boolean'),
  integer: require('../types/integer'),
  number: require('../types/number'),
  null: require('../types/null'),
  object: require('../types/object'),
  string: require('../types/string')
};

},{"../types/array":21,"../types/boolean":22,"../types/integer":23,"../types/null":24,"../types/number":25,"../types/object":26,"../types/string":27}],35:[function(require,module,exports){
'use strict';

var container = require('./container');

var faker = container.get('faker');

var random = module.exports = function(min, max, defMin, defMax) {
  var isInteger = true;

  if (typeof min === 'boolean') {
    // non-integer values
    isInteger = min;
    min = arguments[1];
    max = arguments[2];
    defMin = arguments[3];
    defMax = arguments[4];
  }

  defMin = typeof defMin === 'undefined' ? random.MIN_NUMBER : defMin;
  defMax = typeof defMax === 'undefined' ? random.MAX_NUMBER : defMax;

  min = typeof min === 'undefined' ? defMin : min;
  max = typeof max === 'undefined' ? defMax : max;

  if (max < min) {
    max += min;
  }

  return faker.random.number({
    min: min,
    max: Math.max(max, min + 1),
    precision: isInteger ? 1 : Math.random()
  });
};

random.shuffle = function(obj) {
  var copy = obj.slice(),
      length = obj.length;

  for (; length > 0;) {
    var key = Math.floor(Math.random() * length),
        tmp = copy[--length];

    copy[length] = copy[key];
    copy[key] = tmp;
  }

  return copy;
};

random.pick = function(obj) {
  return obj[Math.floor(Math.random() * obj.length)];
};

random.MIN_NUMBER = -100;
random.MAX_NUMBER = 100;

},{"./container":29}],36:[function(require,module,exports){
'use strict';

var random = require('./random'),
    combine = require('./combine');

var ParseError = require('./error');

var inferredType = require('./inferred');

function reduce(obj) {
  var mix = obj.allOf || obj.anyOf || obj.oneOf;

  if (!(mix && mix.length)) {
    for (var key in obj) {
      var value = obj[key];

      if (typeof value === 'object' && !(key === 'enum' || key === 'required')) {
        reduce(value);
      }
    }

    return;
  }

  if ((obj.oneOf || obj.anyOf) && mix.length) {
    mix = [random.pick(mix)];
  }

  delete obj.allOf;
  delete obj.anyOf;
  delete obj.oneOf;

  var fixed = {};

  mix.forEach(function(value) {
    combine(fixed, value);
  });

  combine(obj, fixed);

  while (obj.allOf || obj.anyOf || obj.oneOf) {
    reduce(obj);
  }
}

function traverse(obj, path) {
  var primitives = require('./primitives');

  var copy = {};

  if (Array.isArray(obj)) {
    copy = [];
  }

  path = path || [];

  reduce(obj);

  if (Array.isArray(obj.enum)) {
    return random.pick(obj.enum);
  }

  var type = obj.type;

  if (Array.isArray(type)) {
    type = random.pick(type);
  } else if (typeof type === 'undefined') {
    // Attempt to infer the type
    type = inferredType(obj) || type;
  }

  if (typeof type === 'string') {
    if (!primitives[type]) {
      throw new ParseError('unknown primitive ' + JSON.stringify(type), path.concat(['type']));
    }

    try {
      return primitives[type](obj, path);
    } catch (e) {
      if (typeof e.path === 'undefined') {
        throw new ParseError(e.message, path)
      }

      throw e;
    }
  }

  for (var key in obj) {
    var value = obj[key];

    if (typeof value === 'object') {
      copy[key] = traverse(value, path.concat([key]));
    } else {
      copy[key] = value;
    }
  }

  return copy;
}

module.exports = traverse;

},{"./combine":28,"./error":30,"./inferred":33,"./primitives":34,"./random":35}],37:[function(require,module,exports){
(function (Buffer){
//  Chance.js 0.7.5
//  http://chancejs.com
//  (c) 2013 Victor Quinn
//  Chance may be freely distributed or modified under the MIT license.

(function () {

    // Constants
    var MAX_INT = 9007199254740992;
    var MIN_INT = -MAX_INT;
    var NUMBERS = '0123456789';
    var CHARS_LOWER = 'abcdefghijklmnopqrstuvwxyz';
    var CHARS_UPPER = CHARS_LOWER.toUpperCase();
    var HEX_POOL  = NUMBERS + "abcdef";

    // Cached array helpers
    var slice = Array.prototype.slice;

    // Constructor
    function Chance (seed) {
        if (!(this instanceof Chance)) {
            return seed == null ? new Chance() : new Chance(seed);
        }

        // if user has provided a function, use that as the generator
        if (typeof seed === 'function') {
            this.random = seed;
            return this;
        }

        var seedling;

        if (arguments.length) {
            // set a starting value of zero so we can add to it
            this.seed = 0;
        }
        // otherwise, leave this.seed blank so that MT will recieve a blank

        for (var i = 0; i < arguments.length; i++) {
            seedling = 0;
            if (typeof arguments[i] === 'string') {
                for (var j = 0; j < arguments[i].length; j++) {
                    seedling += (arguments[i].length - j) * arguments[i].charCodeAt(j);
                }
            } else {
                seedling = arguments[i];
            }
            this.seed += (arguments.length - i) * seedling;
        }

        // If no generator function was provided, use our MT
        this.mt = this.mersenne_twister(this.seed);
        this.bimd5 = this.blueimp_md5();
        this.random = function () {
            return this.mt.random(this.seed);
        };

        return this;
    }

    Chance.prototype.VERSION = "0.7.5";

    // Random helper functions
    function initOptions(options, defaults) {
        options || (options = {});

        if (defaults) {
            for (var i in defaults) {
                if (typeof options[i] === 'undefined') {
                    options[i] = defaults[i];
                }
            }
        }

        return options;
    }

    function testRange(test, errorMessage) {
        if (test) {
            throw new RangeError(errorMessage);
        }
    }

    /**
     * Encode the input string with Base64.
     */
    var base64 = function() {
        throw new Error('No Base64 encoder available.');
    };

    // Select proper Base64 encoder.
    (function determineBase64Encoder() {
        if (typeof btoa === 'function') {
            base64 = btoa;
        } else if (typeof Buffer === 'function') {
            base64 = function(input) {
                return new Buffer(input).toString('base64');
            };
        }
    })();

    // -- Basics --

    /**
     *  Return a random bool, either true or false
     *
     *  @param {Object} [options={ likelihood: 50 }] alter the likelihood of
     *    receiving a true or false value back.
     *  @throws {RangeError} if the likelihood is out of bounds
     *  @returns {Bool} either true or false
     */
    Chance.prototype.bool = function (options) {
        // likelihood of success (true)
        options = initOptions(options, {likelihood : 50});

        // Note, we could get some minor perf optimizations by checking range
        // prior to initializing defaults, but that makes code a bit messier
        // and the check more complicated as we have to check existence of
        // the object then existence of the key before checking constraints.
        // Since the options initialization should be minor computationally,
        // decision made for code cleanliness intentionally. This is mentioned
        // here as it's the first occurrence, will not be mentioned again.
        testRange(
            options.likelihood < 0 || options.likelihood > 100,
            "Chance: Likelihood accepts values from 0 to 100."
        );

        return this.random() * 100 < options.likelihood;
    };

    /**
     *  Return a random character.
     *
     *  @param {Object} [options={}] can specify a character pool, only alpha,
     *    only symbols, and casing (lower or upper)
     *  @returns {String} a single random character
     *  @throws {RangeError} Can only specify alpha or symbols, not both
     */
    Chance.prototype.character = function (options) {
        options = initOptions(options);
        testRange(
            options.alpha && options.symbols,
            "Chance: Cannot specify both alpha and symbols."
        );

        var symbols = "!@#$%^&*()[]",
            letters, pool;

        if (options.casing === 'lower') {
            letters = CHARS_LOWER;
        } else if (options.casing === 'upper') {
            letters = CHARS_UPPER;
        } else {
            letters = CHARS_LOWER + CHARS_UPPER;
        }

        if (options.pool) {
            pool = options.pool;
        } else if (options.alpha) {
            pool = letters;
        } else if (options.symbols) {
            pool = symbols;
        } else {
            pool = letters + NUMBERS + symbols;
        }

        return pool.charAt(this.natural({max: (pool.length - 1)}));
    };

    // Note, wanted to use "float" or "double" but those are both JS reserved words.

    // Note, fixed means N OR LESS digits after the decimal. This because
    // It could be 14.9000 but in JavaScript, when this is cast as a number,
    // the trailing zeroes are dropped. Left to the consumer if trailing zeroes are
    // needed
    /**
     *  Return a random floating point number
     *
     *  @param {Object} [options={}] can specify a fixed precision, min, max
     *  @returns {Number} a single floating point number
     *  @throws {RangeError} Can only specify fixed or precision, not both. Also
     *    min cannot be greater than max
     */
    Chance.prototype.floating = function (options) {
        options = initOptions(options, {fixed : 4});
        testRange(
            options.fixed && options.precision,
            "Chance: Cannot specify both fixed and precision."
        );

        var num;
        var fixed = Math.pow(10, options.fixed);

        var max = MAX_INT / fixed;
        var min = -max;

        testRange(
            options.min && options.fixed && options.min < min,
            "Chance: Min specified is out of range with fixed. Min should be, at least, " + min
        );
        testRange(
            options.max && options.fixed && options.max > max,
            "Chance: Max specified is out of range with fixed. Max should be, at most, " + max
        );

        options = initOptions(options, { min : min, max : max });

        // Todo - Make this work!
        // options.precision = (typeof options.precision !== "undefined") ? options.precision : false;

        num = this.integer({min: options.min * fixed, max: options.max * fixed});
        var num_fixed = (num / fixed).toFixed(options.fixed);

        return parseFloat(num_fixed);
    };

    /**
     *  Return a random integer
     *
     *  NOTE the max and min are INCLUDED in the range. So:
     *  chance.integer({min: 1, max: 3});
     *  would return either 1, 2, or 3.
     *
     *  @param {Object} [options={}] can specify a min and/or max
     *  @returns {Number} a single random integer number
     *  @throws {RangeError} min cannot be greater than max
     */
    Chance.prototype.integer = function (options) {
        // 9007199254740992 (2^53) is the max integer number in JavaScript
        // See: http://vq.io/132sa2j
        options = initOptions(options, {min: MIN_INT, max: MAX_INT});
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");

        return Math.floor(this.random() * (options.max - options.min + 1) + options.min);
    };

    /**
     *  Return a random natural
     *
     *  NOTE the max and min are INCLUDED in the range. So:
     *  chance.natural({min: 1, max: 3});
     *  would return either 1, 2, or 3.
     *
     *  @param {Object} [options={}] can specify a min and/or max
     *  @returns {Number} a single random integer number
     *  @throws {RangeError} min cannot be greater than max
     */
    Chance.prototype.natural = function (options) {
        options = initOptions(options, {min: 0, max: MAX_INT});
        testRange(options.min < 0, "Chance: Min cannot be less than zero.");
        return this.integer(options);
    };

    /**
     *  Return a random string
     *
     *  @param {Object} [options={}] can specify a length
     *  @returns {String} a string of random length
     *  @throws {RangeError} length cannot be less than zero
     */
    Chance.prototype.string = function (options) {
        options = initOptions(options, { length: this.natural({min: 5, max: 20}) });
        testRange(options.length < 0, "Chance: Length cannot be less than zero.");
        var length = options.length,
            text = this.n(this.character, length, options);

        return text.join("");
    };

    // -- End Basics --

    // -- Helpers --

    Chance.prototype.capitalize = function (word) {
        return word.charAt(0).toUpperCase() + word.substr(1);
    };

    Chance.prototype.mixin = function (obj) {
        for (var func_name in obj) {
            Chance.prototype[func_name] = obj[func_name];
        }
        return this;
    };

    /**
     *  Given a function that generates something random and a number of items to generate,
     *    return an array of items where none repeat.
     *
     *  @param {Function} fn the function that generates something random
     *  @param {Number} num number of terms to generate
     *  @param {Object} options any options to pass on to the generator function
     *  @returns {Array} an array of length `num` with every item generated by `fn` and unique
     *
     *  There can be more parameters after these. All additional parameters are provided to the given function
     */
    Chance.prototype.unique = function(fn, num, options) {
        testRange(
            typeof fn !== "function",
            "Chance: The first argument must be a function."
        );

        options = initOptions(options, {
            // Default comparator to check that val is not already in arr.
            // Should return `false` if item not in array, `true` otherwise
            comparator: function(arr, val) {
                return arr.indexOf(val) !== -1;
            }
        });

        var arr = [], count = 0, result, MAX_DUPLICATES = num * 50, params = slice.call(arguments, 2);

        while (arr.length < num) {
            result = fn.apply(this, params);
            if (!options.comparator(arr, result)) {
                arr.push(result);
                // reset count when unique found
                count = 0;
            }

            if (++count > MAX_DUPLICATES) {
                throw new RangeError("Chance: num is likely too large for sample set");
            }
        }
        return arr;
    };

    /**
     *  Gives an array of n random terms
     *
     *  @param {Function} fn the function that generates something random
     *  @param {Number} n number of terms to generate
     *  @returns {Array} an array of length `n` with items generated by `fn`
     *
     *  There can be more parameters after these. All additional parameters are provided to the given function
     */
    Chance.prototype.n = function(fn, n) {
        testRange(
            typeof fn !== "function",
            "Chance: The first argument must be a function."
        );

        if (typeof n === 'undefined') {
            n = 1;
        }
        var i = n, arr = [], params = slice.call(arguments, 2);

        // Providing a negative count should result in a noop.
        i = Math.max( 0, i );

        for (null; i--; null) {
            arr.push(fn.apply(this, params));
        }

        return arr;
    };

    // H/T to SO for this one: http://vq.io/OtUrZ5
    Chance.prototype.pad = function (number, width, pad) {
        // Default pad to 0 if none provided
        pad = pad || '0';
        // Convert number to a string
        number = number + '';
        return number.length >= width ? number : new Array(width - number.length + 1).join(pad) + number;
    };

    Chance.prototype.pick = function (arr, count) {
        if (arr.length === 0) {
            throw new RangeError("Chance: Cannot pick() from an empty array");
        }
        if (!count || count === 1) {
            return arr[this.natural({max: arr.length - 1})];
        } else {
            return this.shuffle(arr).slice(0, count);
        }
    };

    Chance.prototype.shuffle = function (arr) {
        var old_array = arr.slice(0),
            new_array = [],
            j = 0,
            length = Number(old_array.length);

        for (var i = 0; i < length; i++) {
            // Pick a random index from the array
            j = this.natural({max: old_array.length - 1});
            // Add it to the new array
            new_array[i] = old_array[j];
            // Remove that element from the original array
            old_array.splice(j, 1);
        }

        return new_array;
    };

    // Returns a single item from an array with relative weighting of odds
    Chance.prototype.weighted = function(arr, weights) {
        if (arr.length !== weights.length) {
            throw new RangeError("Chance: length of array and weights must match");
        }

        // Handle weights that are less or equal to zero.
        for (var weightIndex = weights.length - 1; weightIndex >= 0; --weightIndex) {
            // If the weight is less or equal to zero, remove it and the value.
            if (weights[weightIndex] <= 0) {
                arr.splice(weightIndex,1);
                weights.splice(weightIndex,1);
            }
        }

        // If any of the weights are less than 1, we want to scale them up to whole
        //   numbers for the rest of this logic to work
        if (weights.some(function(weight) { return weight < 1; })) {
            var min = weights.reduce(function(min, weight) {
                return (weight < min) ? weight : min;
            }, weights[0]);

            var scaling_factor = 1 / min;

            weights = weights.map(function(weight) {
                return weight * scaling_factor;
            });
        }

        var sum = weights.reduce(function(total, weight) {
            return total + weight;
        }, 0);

        // get an index
        var selected = this.natural({ min: 1, max: sum });

        var total = 0;
        var chosen;
        // Using some() here so we can bail as soon as we get our match
        weights.some(function(weight, index) {
            if (selected <= total + weight) {
                chosen = arr[index];
                return true;
            }
            total += weight;
            return false;
        });

        return chosen;
    };

    // -- End Helpers --

    // -- Text --

    Chance.prototype.paragraph = function (options) {
        options = initOptions(options);

        var sentences = options.sentences || this.natural({min: 3, max: 7}),
            sentence_array = this.n(this.sentence, sentences);

        return sentence_array.join(' ');
    };

    // Could get smarter about this than generating random words and
    // chaining them together. Such as: http://vq.io/1a5ceOh
    Chance.prototype.sentence = function (options) {
        options = initOptions(options);

        var words = options.words || this.natural({min: 12, max: 18}),
            text, word_array = this.n(this.word, words);

        text = word_array.join(' ');

        // Capitalize first letter of sentence, add period at end
        text = this.capitalize(text) + '.';

        return text;
    };

    Chance.prototype.syllable = function (options) {
        options = initOptions(options);

        var length = options.length || this.natural({min: 2, max: 3}),
            consonants = 'bcdfghjklmnprstvwz', // consonants except hard to speak ones
            vowels = 'aeiou', // vowels
            all = consonants + vowels, // all
            text = '',
            chr;

        // I'm sure there's a more elegant way to do this, but this works
        // decently well.
        for (var i = 0; i < length; i++) {
            if (i === 0) {
                // First character can be anything
                chr = this.character({pool: all});
            } else if (consonants.indexOf(chr) === -1) {
                // Last character was a vowel, now we want a consonant
                chr = this.character({pool: consonants});
            } else {
                // Last character was a consonant, now we want a vowel
                chr = this.character({pool: vowels});
            }

            text += chr;
        }

        return text;
    };

    Chance.prototype.word = function (options) {
        options = initOptions(options);

        testRange(
            options.syllables && options.length,
            "Chance: Cannot specify both syllables AND length."
        );

        var syllables = options.syllables || this.natural({min: 1, max: 3}),
            text = '';

        if (options.length) {
            // Either bound word by length
            do {
                text += this.syllable();
            } while (text.length < options.length);
            text = text.substring(0, options.length);
        } else {
            // Or by number of syllables
            for (var i = 0; i < syllables; i++) {
                text += this.syllable();
            }
        }
        return text;
    };

    // -- End Text --

    // -- Person --

    Chance.prototype.age = function (options) {
        options = initOptions(options);
        var ageRange;

        switch (options.type) {
            case 'child':
                ageRange = {min: 1, max: 12};
                break;
            case 'teen':
                ageRange = {min: 13, max: 19};
                break;
            case 'adult':
                ageRange = {min: 18, max: 65};
                break;
            case 'senior':
                ageRange = {min: 65, max: 100};
                break;
            case 'all':
                ageRange = {min: 1, max: 100};
                break;
            default:
                ageRange = {min: 18, max: 65};
                break;
        }

        return this.natural(ageRange);
    };

    Chance.prototype.birthday = function (options) {
        options = initOptions(options, {
            year: (new Date().getFullYear() - this.age(options))
        });

        return this.date(options);
    };

    // CPF; ID to identify taxpayers in Brazil
    Chance.prototype.cpf = function () {
        var n = this.n(this.natural, 9, { max: 9 });
        var d1 = n[8]*2+n[7]*3+n[6]*4+n[5]*5+n[4]*6+n[3]*7+n[2]*8+n[1]*9+n[0]*10;
        d1 = 11 - (d1 % 11);
        if (d1>=10) {
            d1 = 0;
        }
        var d2 = d1*2+n[8]*3+n[7]*4+n[6]*5+n[5]*6+n[4]*7+n[3]*8+n[2]*9+n[1]*10+n[0]*11;
        d2 = 11 - (d2 % 11);
        if (d2>=10) {
            d2 = 0;
        }
        return ''+n[0]+n[1]+n[2]+'.'+n[3]+n[4]+n[5]+'.'+n[6]+n[7]+n[8]+'-'+d1+d2;
    };

    Chance.prototype.first = function (options) {
        options = initOptions(options, {gender: this.gender()});
        return this.pick(this.get("firstNames")[options.gender.toLowerCase()]);
    };

    Chance.prototype.gender = function () {
        return this.pick(['Male', 'Female']);
    };

    Chance.prototype.last = function () {
        return this.pick(this.get("lastNames"));
    };

    Chance.prototype.mrz = function (options) {
        var checkDigit = function (input) {
            var alpha = "<ABCDEFGHIJKLMNOPQRSTUVWXYXZ".split(''),
                multipliers = [ 7, 3, 1 ],
                runningTotal = 0;

            if (typeof input !== 'string') {
                input = input.toString();
            }

            input.split('').forEach(function(character, idx) {
                var pos = alpha.indexOf(character);

                if(pos !== -1) {
                    character = pos === 0 ? 0 : pos + 9;
                } else {
                    character = parseInt(character, 10);
                }
                character *= multipliers[idx % multipliers.length];
                runningTotal += character;
            });
            return runningTotal % 10;
        };
        var generate = function (opts) {
            var pad = function (length) {
                return new Array(length + 1).join('<');
            };
            var number = [ 'P<',
                           opts.issuer,
                           opts.last.toUpperCase(),
                           '<<',
                           opts.first.toUpperCase(),
                           pad(39 - (opts.last.length + opts.first.length + 2)),
                           opts.passportNumber,
                           checkDigit(opts.passportNumber),
                           opts.nationality,
                           opts.dob,
                           checkDigit(opts.dob),
                           opts.gender,
                           opts.expiry,
                           checkDigit(opts.expiry),
                           pad(14),
                           checkDigit(pad(14)) ].join('');

            return number +
                (checkDigit(number.substr(44, 10) +
                            number.substr(57, 7) +
                            number.substr(65, 7)));
        };

        var that = this;

        options = initOptions(options, {
            first: this.first(),
            last: this.last(),
            passportNumber: this.integer({min: 100000000, max: 999999999}),
            dob: (function () {
                var date = that.birthday({type: 'adult'});
                return [date.getFullYear().toString().substr(2),
                        that.pad(date.getMonth() + 1, 2),
                        that.pad(date.getDate(), 2)].join('');
            }()),
            expiry: (function () {
                var date = new Date();
                return [(date.getFullYear() + 5).toString().substr(2),
                        that.pad(date.getMonth() + 1, 2),
                        that.pad(date.getDate(), 2)].join('');
            }()),
            gender: this.gender() === 'Female' ? 'F': 'M',
            issuer: 'GBR',
            nationality: 'GBR'
        });
        return generate (options);
    };

    Chance.prototype.name = function (options) {
        options = initOptions(options);

        var first = this.first(options),
            last = this.last(),
            name;

        if (options.middle) {
            name = first + ' ' + this.first(options) + ' ' + last;
        } else if (options.middle_initial) {
            name = first + ' ' + this.character({alpha: true, casing: 'upper'}) + '. ' + last;
        } else {
            name = first + ' ' + last;
        }

        if (options.prefix) {
            name = this.prefix(options) + ' ' + name;
        }

        if (options.suffix) {
            name = name + ' ' + this.suffix(options);
        }

        return name;
    };

    // Return the list of available name prefixes based on supplied gender.
    Chance.prototype.name_prefixes = function (gender) {
        gender = gender || "all";
        gender = gender.toLowerCase();

        var prefixes = [
            { name: 'Doctor', abbreviation: 'Dr.' }
        ];

        if (gender === "male" || gender === "all") {
            prefixes.push({ name: 'Mister', abbreviation: 'Mr.' });
        }

        if (gender === "female" || gender === "all") {
            prefixes.push({ name: 'Miss', abbreviation: 'Miss' });
            prefixes.push({ name: 'Misses', abbreviation: 'Mrs.' });
        }

        return prefixes;
    };

    // Alias for name_prefix
    Chance.prototype.prefix = function (options) {
        return this.name_prefix(options);
    };

    Chance.prototype.name_prefix = function (options) {
        options = initOptions(options, { gender: "all" });
        return options.full ?
            this.pick(this.name_prefixes(options.gender)).name :
            this.pick(this.name_prefixes(options.gender)).abbreviation;
    };

    Chance.prototype.ssn = function (options) {
        options = initOptions(options, {ssnFour: false, dashes: true});
        var ssn_pool = "1234567890",
            ssn,
            dash = options.dashes ? '-' : '';

        if(!options.ssnFour) {
            ssn = this.string({pool: ssn_pool, length: 3}) + dash +
            this.string({pool: ssn_pool, length: 2}) + dash +
            this.string({pool: ssn_pool, length: 4});
        } else {
            ssn = this.string({pool: ssn_pool, length: 4});
        }
        return ssn;
    };

    // Return the list of available name suffixes
    Chance.prototype.name_suffixes = function () {
        var suffixes = [
            { name: 'Doctor of Osteopathic Medicine', abbreviation: 'D.O.' },
            { name: 'Doctor of Philosophy', abbreviation: 'Ph.D.' },
            { name: 'Esquire', abbreviation: 'Esq.' },
            { name: 'Junior', abbreviation: 'Jr.' },
            { name: 'Juris Doctor', abbreviation: 'J.D.' },
            { name: 'Master of Arts', abbreviation: 'M.A.' },
            { name: 'Master of Business Administration', abbreviation: 'M.B.A.' },
            { name: 'Master of Science', abbreviation: 'M.S.' },
            { name: 'Medical Doctor', abbreviation: 'M.D.' },
            { name: 'Senior', abbreviation: 'Sr.' },
            { name: 'The Third', abbreviation: 'III' },
            { name: 'The Fourth', abbreviation: 'IV' },
            { name: 'Bachelor of Engineering', abbreviation: 'B.E' },
            { name: 'Bachelor of Technology', abbreviation: 'B.TECH' }
        ];
        return suffixes;
    };

    // Alias for name_suffix
    Chance.prototype.suffix = function (options) {
        return this.name_suffix(options);
    };

    Chance.prototype.name_suffix = function (options) {
        options = initOptions(options);
        return options.full ?
            this.pick(this.name_suffixes()).name :
            this.pick(this.name_suffixes()).abbreviation;
    };

    // -- End Person --

    // -- Mobile --
    // Android GCM Registration ID
    Chance.prototype.android_id = function () {
        return "APA91" + this.string({ pool: "0123456789abcefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_", length: 178 });
    };

    // Apple Push Token
    Chance.prototype.apple_token = function () {
        return this.string({ pool: "abcdef1234567890", length: 64 });
    };

    // Windows Phone 8 ANID2
    Chance.prototype.wp8_anid2 = function () {
        return base64( this.hash( { length : 32 } ) );
    };

    // Windows Phone 7 ANID
    Chance.prototype.wp7_anid = function () {
        return 'A=' + this.guid().replace(/-/g, '').toUpperCase() + '&E=' + this.hash({ length:3 }) + '&W=' + this.integer({ min:0, max:9 });
    };

    // BlackBerry Device PIN
    Chance.prototype.bb_pin = function () {
        return this.hash({ length: 8 });
    };

    // -- End Mobile --

    // -- Web --
    Chance.prototype.avatar = function (options) {
        var url = null;
        var URL_BASE = '//www.gravatar.com/avatar/';
        var PROTOCOLS = {
            http: 'http',
            https: 'https'
        };
        var FILE_TYPES = {
            bmp: 'bmp',
            gif: 'gif',
            jpg: 'jpg',
            png: 'png'
        };
        var FALLBACKS = {
            '404': '404', // Return 404 if not found
            mm: 'mm', // Mystery man
            identicon: 'identicon', // Geometric pattern based on hash
            monsterid: 'monsterid', // A generated monster icon
            wavatar: 'wavatar', // A generated face
            retro: 'retro', // 8-bit icon
            blank: 'blank' // A transparent png
        };
        var RATINGS = {
            g: 'g',
            pg: 'pg',
            r: 'r',
            x: 'x'
        };
        var opts = {
            protocol: null,
            email: null,
            fileExtension: null,
            size: null,
            fallback: null,
            rating: null
        };

        if (!options) {
            // Set to a random email
            opts.email = this.email();
            options = {};
        }
        else if (typeof options === 'string') {
            opts.email = options;
            options = {};
        }
        else if (typeof options !== 'object') {
            return null;
        }
        else if (options.constructor === 'Array') {
            return null;
        }

        opts = initOptions(options, opts);

        if (!opts.email) {
            // Set to a random email
            opts.email = this.email();
        }

        // Safe checking for params
        opts.protocol = PROTOCOLS[opts.protocol] ? opts.protocol + ':' : '';
        opts.size = parseInt(opts.size, 0) ? opts.size : '';
        opts.rating = RATINGS[opts.rating] ? opts.rating : '';
        opts.fallback = FALLBACKS[opts.fallback] ? opts.fallback : '';
        opts.fileExtension = FILE_TYPES[opts.fileExtension] ? opts.fileExtension : '';

        url =
            opts.protocol +
            URL_BASE +
            this.bimd5.md5(opts.email) +
            (opts.fileExtension ? '.' + opts.fileExtension : '') +
            (opts.size || opts.rating || opts.fallback ? '?' : '') +
            (opts.size ? '&s=' + opts.size.toString() : '') +
            (opts.rating ? '&r=' + opts.rating : '') +
            (opts.fallback ? '&d=' + opts.fallback : '')
            ;

        return url;
    };

    Chance.prototype.color = function (options) {
        function gray(value, delimiter) {
            return [value, value, value].join(delimiter || '');
        }

        options = initOptions(options, {
            format: this.pick(['hex', 'shorthex', 'rgb', 'rgba', '0x']),
            grayscale: false,
            casing: 'lower'
        });

        var isGrayscale = options.grayscale;
        var colorValue;

        if (options.format === 'hex') {
            colorValue = '#' + (isGrayscale ? gray(this.hash({length: 2})) : this.hash({length: 6}));

        } else if (options.format === 'shorthex') {
            colorValue = '#' + (isGrayscale ? gray(this.hash({length: 1})) : this.hash({length: 3}));

        } else if (options.format === 'rgb') {
            if (isGrayscale) {
                colorValue = 'rgb(' + gray(this.natural({max: 255}), ',') + ')';
            } else {
                colorValue = 'rgb(' + this.natural({max: 255}) + ',' + this.natural({max: 255}) + ',' + this.natural({max: 255}) + ')';
            }
        } else if (options.format === 'rgba') {
            if (isGrayscale) {
                colorValue = 'rgba(' + gray(this.natural({max: 255}), ',') + ',' + this.floating({min:0, max:1}) + ')';
            } else {
                colorValue = 'rgba(' + this.natural({max: 255}) + ',' + this.natural({max: 255}) + ',' + this.natural({max: 255}) + ',' + this.floating({min:0, max:1}) + ')';
            }
        } else if (options.format === '0x') {
            colorValue = '0x' + (isGrayscale ? gray(this.hash({length: 2})) : this.hash({length: 6}));
        } else {
            throw new RangeError('Invalid format provided. Please provide one of "hex", "shorthex", "rgb", "rgba", or "0x".');
        }

        if (options.casing === 'upper' ) {
            colorValue = colorValue.toUpperCase();
        }

        return colorValue;
    };

    Chance.prototype.domain = function (options) {
        options = initOptions(options);
        return this.word() + '.' + (options.tld || this.tld());
    };

    Chance.prototype.email = function (options) {
        options = initOptions(options);
        return this.word({length: options.length}) + '@' + (options.domain || this.domain());
    };

    Chance.prototype.fbid = function () {
        return parseInt('10000' + this.natural({max: 100000000000}), 10);
    };

    Chance.prototype.google_analytics = function () {
        var account = this.pad(this.natural({max: 999999}), 6);
        var property = this.pad(this.natural({max: 99}), 2);

        return 'UA-' + account + '-' + property;
    };

    Chance.prototype.hashtag = function () {
        return '#' + this.word();
    };

    Chance.prototype.ip = function () {
        // Todo: This could return some reserved IPs. See http://vq.io/137dgYy
        // this should probably be updated to account for that rare as it may be
        return this.natural({max: 255}) + '.' +
               this.natural({max: 255}) + '.' +
               this.natural({max: 255}) + '.' +
               this.natural({max: 255});
    };

    Chance.prototype.ipv6 = function () {
        var ip_addr = this.n(this.hash, 8, {length: 4});

        return ip_addr.join(":");
    };

    Chance.prototype.klout = function () {
        return this.natural({min: 1, max: 99});
    };

    Chance.prototype.tlds = function () {
        return ['com', 'org', 'edu', 'gov', 'co.uk', 'net', 'io'];
    };

    Chance.prototype.tld = function () {
        return this.pick(this.tlds());
    };

    Chance.prototype.twitter = function () {
        return '@' + this.word();
    };

    Chance.prototype.url = function (options) {
        options = initOptions(options, { protocol: "http", domain: this.domain(options), domain_prefix: "", path: this.word(), extensions: []});

        var extension = options.extensions.length > 0 ? "." + this.pick(options.extensions) : "";
        var domain = options.domain_prefix ? options.domain_prefix + "." + options.domain : options.domain;

        return options.protocol + "://" + domain + "/" + options.path + extension;
    };

    // -- End Web --

    // -- Location --

    Chance.prototype.address = function (options) {
        options = initOptions(options);
        return this.natural({min: 5, max: 2000}) + ' ' + this.street(options);
    };

    Chance.prototype.altitude = function (options) {
        options = initOptions(options, {fixed: 5, min: 0, max: 8848});
        return this.floating({
            min: options.min,
            max: options.max,
            fixed: options.fixed
        });
    };

    Chance.prototype.areacode = function (options) {
        options = initOptions(options, {parens : true});
        // Don't want area codes to start with 1, or have a 9 as the second digit
        var areacode = this.natural({min: 2, max: 9}).toString() +
                this.natural({min: 0, max: 8}).toString() +
                this.natural({min: 0, max: 9}).toString();

        return options.parens ? '(' + areacode + ')' : areacode;
    };

    Chance.prototype.city = function () {
        return this.capitalize(this.word({syllables: 3}));
    };

    Chance.prototype.coordinates = function (options) {
        return this.latitude(options) + ', ' + this.longitude(options);
    };

    Chance.prototype.countries = function () {
        return this.get("countries");
    };

    Chance.prototype.country = function (options) {
        options = initOptions(options);
        var country = this.pick(this.countries());
        return options.full ? country.name : country.abbreviation;
    };

    Chance.prototype.depth = function (options) {
        options = initOptions(options, {fixed: 5, min: -2550, max: 0});
        return this.floating({
            min: options.min,
            max: options.max,
            fixed: options.fixed
        });
    };

    Chance.prototype.geohash = function (options) {
        options = initOptions(options, { length: 7 });
        return this.string({ length: options.length, pool: '0123456789bcdefghjkmnpqrstuvwxyz' });
    };

    Chance.prototype.geojson = function (options) {
        return this.latitude(options) + ', ' + this.longitude(options) + ', ' + this.altitude(options);
    };

    Chance.prototype.latitude = function (options) {
        options = initOptions(options, {fixed: 5, min: -90, max: 90});
        return this.floating({min: options.min, max: options.max, fixed: options.fixed});
    };

    Chance.prototype.longitude = function (options) {
        options = initOptions(options, {fixed: 5, min: -180, max: 180});
        return this.floating({min: options.min, max: options.max, fixed: options.fixed});
    };

    Chance.prototype.phone = function (options) {
        var self = this,
            numPick,
            ukNum = function (parts) {
                var section = [];
                //fills the section part of the phone number with random numbers.
                parts.sections.forEach(function(n) {
                    section.push(self.string({ pool: '0123456789', length: n}));
                });
                return parts.area + section.join(' ');
            };
        options = initOptions(options, {
            formatted: true,
            country: 'us',
            mobile: false
        });
        if (!options.formatted) {
            options.parens = false;
        }
        var phone;
        switch (options.country) {
            case 'fr':
                if (!options.mobile) {
                    numPick = this.pick([
                        // Valid zone and département codes.
                        '01' + this.pick(['30', '34', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '53', '55', '56', '58', '60', '64', '69', '70', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83']) + self.string({ pool: '0123456789', length: 6}),
                        '02' + this.pick(['14', '18', '22', '23', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '40', '41', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '56', '57', '61', '62', '69', '72', '76', '77', '78', '85', '90', '96', '97', '98', '99']) + self.string({ pool: '0123456789', length: 6}),
                        '03' + this.pick(['10', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '39', '44', '45', '51', '52', '54', '55', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90']) + self.string({ pool: '0123456789', length: 6}),
                        '04' + this.pick(['11', '13', '15', '20', '22', '26', '27', '30', '32', '34', '37', '42', '43', '44', '50', '56', '57', '63', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '88', '89', '90', '91', '92', '93', '94', '95', '97', '98']) + self.string({ pool: '0123456789', length: 6}),
                        '05' + this.pick(['08', '16', '17', '19', '24', '31', '32', '33', '34', '35', '40', '45', '46', '47', '49', '53', '55', '56', '57', '58', '59', '61', '62', '63', '64', '65', '67', '79', '81', '82', '86', '87', '90', '94']) + self.string({ pool: '0123456789', length: 6}),
                        '09' + self.string({ pool: '0123456789', length: 8}),
                    ]);
                    phone = options.formatted ? numPick.match(/../g).join(' ') : numPick;
                } else {
                    numPick = this.pick(['06', '07']) + self.string({ pool: '0123456789', length: 8});
                    phone = options.formatted ? numPick.match(/../g).join(' ') : numPick;
                }
                break;
            case 'uk':
                if (!options.mobile) {
                    numPick = this.pick([
                        //valid area codes of major cities/counties followed by random numbers in required format.
                        { area: '01' + this.character({ pool: '234569' }) + '1 ', sections: [3,4] },
                        { area: '020 ' + this.character({ pool: '378' }), sections: [3,4] },
                        { area: '023 ' + this.character({ pool: '89' }), sections: [3,4] },
                        { area: '024 7', sections: [3,4] },
                        { area: '028 ' + this.pick(['25','28','37','71','82','90','92','95']), sections: [2,4] },
                        { area: '012' + this.pick(['04','08','54','76','97','98']) + ' ', sections: [5] },
                        { area: '013' + this.pick(['63','64','84','86']) + ' ', sections: [5] },
                        { area: '014' + this.pick(['04','20','60','61','80','88']) + ' ', sections: [5] },
                        { area: '015' + this.pick(['24','27','62','66']) + ' ', sections: [5] },
                        { area: '016' + this.pick(['06','29','35','47','59','95']) + ' ', sections: [5] },
                        { area: '017' + this.pick(['26','44','50','68']) + ' ', sections: [5] },
                        { area: '018' + this.pick(['27','37','84','97']) + ' ', sections: [5] },
                        { area: '019' + this.pick(['00','05','35','46','49','63','95']) + ' ', sections: [5] }
                    ]);
                    phone = options.formatted ? ukNum(numPick) : ukNum(numPick).replace(' ', '', 'g');
                } else {
                    numPick = this.pick([
                        { area: '07' + this.pick(['4','5','7','8','9']), sections: [2,6] },
                        { area: '07624 ', sections: [6] }
                    ]);
                    phone = options.formatted ? ukNum(numPick) : ukNum(numPick).replace(' ', '');
                }
                break;
            case 'us':
                var areacode = this.areacode(options).toString();
                var exchange = this.natural({ min: 2, max: 9 }).toString() +
                    this.natural({ min: 0, max: 9 }).toString() +
                    this.natural({ min: 0, max: 9 }).toString();
                var subscriber = this.natural({ min: 1000, max: 9999 }).toString(); // this could be random [0-9]{4}
                phone = options.formatted ? areacode + ' ' + exchange + '-' + subscriber : areacode + exchange + subscriber;
        }
        return phone;
    };

    Chance.prototype.postal = function () {
        // Postal District
        var pd = this.character({pool: "XVTSRPNKLMHJGECBA"});
        // Forward Sortation Area (FSA)
        var fsa = pd + this.natural({max: 9}) + this.character({alpha: true, casing: "upper"});
        // Local Delivery Unut (LDU)
        var ldu = this.natural({max: 9}) + this.character({alpha: true, casing: "upper"}) + this.natural({max: 9});

        return fsa + " " + ldu;
    };

    Chance.prototype.provinces = function () {
        return this.get("provinces");
    };

    Chance.prototype.province = function (options) {
        return (options && options.full) ?
            this.pick(this.provinces()).name :
            this.pick(this.provinces()).abbreviation;
    };

    Chance.prototype.state = function (options) {
        return (options && options.full) ?
            this.pick(this.states(options)).name :
            this.pick(this.states(options)).abbreviation;
    };

    Chance.prototype.states = function (options) {
        options = initOptions(options);

        var states,
            us_states_and_dc = this.get("us_states_and_dc"),
            territories = this.get("territories"),
            armed_forces = this.get("armed_forces");

        states = us_states_and_dc;

        if (options.territories) {
            states = states.concat(territories);
        }
        if (options.armed_forces) {
            states = states.concat(armed_forces);
        }

        return states;
    };

    Chance.prototype.street = function (options) {
        options = initOptions(options);

        var street = this.word({syllables: 2});
        street = this.capitalize(street);
        street += ' ';
        street += options.short_suffix ?
            this.street_suffix().abbreviation :
            this.street_suffix().name;
        return street;
    };

    Chance.prototype.street_suffix = function () {
        return this.pick(this.street_suffixes());
    };

    Chance.prototype.street_suffixes = function () {
        // These are the most common suffixes.
        return this.get("street_suffixes");
    };

    // Note: only returning US zip codes, internationalization will be a whole
    // other beast to tackle at some point.
    Chance.prototype.zip = function (options) {
        var zip = this.n(this.natural, 5, {max: 9});

        if (options && options.plusfour === true) {
            zip.push('-');
            zip = zip.concat(this.n(this.natural, 4, {max: 9}));
        }

        return zip.join("");
    };

    // -- End Location --

    // -- Time

    Chance.prototype.ampm = function () {
        return this.bool() ? 'am' : 'pm';
    };

    Chance.prototype.date = function (options) {
        var date_string, date;

        // If interval is specified we ignore preset
        if(options && (options.min || options.max)) {
            options = initOptions(options, {
                american: true,
                string: false
            });
            var min = typeof options.min !== "undefined" ? options.min.getTime() : 1;
            // 100,000,000 days measured relative to midnight at the beginning of 01 January, 1970 UTC. http://es5.github.io/#x15.9.1.1
            var max = typeof options.max !== "undefined" ? options.max.getTime() : 8640000000000000;

            date = new Date(this.natural({min: min, max: max}));
        } else {
            var m = this.month({raw: true});
            var daysInMonth = m.days;

            if(options && options.month) {
                // Mod 12 to allow months outside range of 0-11 (not encouraged, but also not prevented).
                daysInMonth = this.get('months')[((options.month % 12) + 12) % 12].days;
            }

            options = initOptions(options, {
                year: parseInt(this.year(), 10),
                // Necessary to subtract 1 because Date() 0-indexes month but not day or year
                // for some reason.
                month: m.numeric - 1,
                day: this.natural({min: 1, max: daysInMonth}),
                hour: this.hour(),
                minute: this.minute(),
                second: this.second(),
                millisecond: this.millisecond(),
                american: true,
                string: false
            });

            date = new Date(options.year, options.month, options.day, options.hour, options.minute, options.second, options.millisecond);
        }

        if (options.american) {
            // Adding 1 to the month is necessary because Date() 0-indexes
            // months but not day for some odd reason.
            date_string = (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();
        } else {
            date_string = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();
        }

        return options.string ? date_string : date;
    };

    Chance.prototype.hammertime = function (options) {
        return this.date(options).getTime();
    };

    Chance.prototype.hour = function (options) {
        options = initOptions(options, {min: 1, max: options && options.twentyfour ? 24 : 12});

        testRange(options.min < 1, "Chance: Min cannot be less than 1.");
        testRange(options.twentyfour && options.max > 24, "Chance: Max cannot be greater than 24 for twentyfour option.");
        testRange(!options.twentyfour && options.max > 12, "Chance: Max cannot be greater than 12.");
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");

        return this.natural({min: options.min, max: options.max});
    };

    Chance.prototype.millisecond = function () {
        return this.natural({max: 999});
    };

    Chance.prototype.minute = Chance.prototype.second = function (options) {
        options = initOptions(options, {min: 0, max: 59});

        testRange(options.min < 0, "Chance: Min cannot be less than 0.");
        testRange(options.max > 59, "Chance: Max cannot be greater than 59.");
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");

        return this.natural({min: options.min, max: options.max});
    };

    Chance.prototype.month = function (options) {
        options = initOptions(options, {min: 1, max: 12});

        testRange(options.min < 1, "Chance: Min cannot be less than 1.");
        testRange(options.max > 12, "Chance: Max cannot be greater than 12.");
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");

        var month = this.pick(this.months().slice(options.min - 1, options.max));
        return options.raw ? month : month.name;
    };

    Chance.prototype.months = function () {
        return this.get("months");
    };

    Chance.prototype.second = function () {
        return this.natural({max: 59});
    };

    Chance.prototype.timestamp = function () {
        return this.natural({min: 1, max: parseInt(new Date().getTime() / 1000, 10)});
    };

    Chance.prototype.year = function (options) {
        // Default to current year as min if none specified
        options = initOptions(options, {min: new Date().getFullYear()});

        // Default to one century after current year as max if none specified
        options.max = (typeof options.max !== "undefined") ? options.max : options.min + 100;

        return this.natural(options).toString();
    };

    // -- End Time

    // -- Finance --

    Chance.prototype.cc = function (options) {
        options = initOptions(options);

        var type, number, to_generate;

        type = (options.type) ?
                    this.cc_type({ name: options.type, raw: true }) :
                    this.cc_type({ raw: true });

        number = type.prefix.split("");
        to_generate = type.length - type.prefix.length - 1;

        // Generates n - 1 digits
        number = number.concat(this.n(this.integer, to_generate, {min: 0, max: 9}));

        // Generates the last digit according to Luhn algorithm
        number.push(this.luhn_calculate(number.join("")));

        return number.join("");
    };

    Chance.prototype.cc_types = function () {
        // http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29
        return this.get("cc_types");
    };

    Chance.prototype.cc_type = function (options) {
        options = initOptions(options);
        var types = this.cc_types(),
            type = null;

        if (options.name) {
            for (var i = 0; i < types.length; i++) {
                // Accept either name or short_name to specify card type
                if (types[i].name === options.name || types[i].short_name === options.name) {
                    type = types[i];
                    break;
                }
            }
            if (type === null) {
                throw new RangeError("Credit card type '" + options.name + "'' is not supported");
            }
        } else {
            type = this.pick(types);
        }

        return options.raw ? type : type.name;
    };

    //return all world currency by ISO 4217
    Chance.prototype.currency_types = function () {
        return this.get("currency_types");
    };

    //return random world currency by ISO 4217
    Chance.prototype.currency = function () {
        return this.pick(this.currency_types());
    };

    //Return random correct currency exchange pair (e.g. EUR/USD) or array of currency code
    Chance.prototype.currency_pair = function (returnAsString) {
        var currencies = this.unique(this.currency, 2, {
            comparator: function(arr, val) {

                return arr.reduce(function(acc, item) {
                    // If a match has been found, short circuit check and just return
                    return acc || (item.code === val.code);
                }, false);
            }
        });

        if (returnAsString) {
            return currencies[0].code + '/' + currencies[1].code;
        } else {
            return currencies;
        }
    };

    Chance.prototype.dollar = function (options) {
        // By default, a somewhat more sane max for dollar than all available numbers
        options = initOptions(options, {max : 10000, min : 0});

        var dollar = this.floating({min: options.min, max: options.max, fixed: 2}).toString(),
            cents = dollar.split('.')[1];

        if (cents === undefined) {
            dollar += '.00';
        } else if (cents.length < 2) {
            dollar = dollar + '0';
        }

        if (dollar < 0) {
            return '-$' + dollar.replace('-', '');
        } else {
            return '$' + dollar;
        }
    };

    Chance.prototype.exp = function (options) {
        options = initOptions(options);
        var exp = {};

        exp.year = this.exp_year();

        // If the year is this year, need to ensure month is greater than the
        // current month or this expiration will not be valid
        if (exp.year === (new Date().getFullYear())) {
            exp.month = this.exp_month({future: true});
        } else {
            exp.month = this.exp_month();
        }

        return options.raw ? exp : exp.month + '/' + exp.year;
    };

    Chance.prototype.exp_month = function (options) {
        options = initOptions(options);
        var month, month_int,
            curMonth = new Date().getMonth();

        if (options.future) {
            do {
                month = this.month({raw: true}).numeric;
                month_int = parseInt(month, 10);
            } while (month_int < curMonth);
        } else {
            month = this.month({raw: true}).numeric;
        }

        return month;
    };

    Chance.prototype.exp_year = function () {
        return this.year({max: new Date().getFullYear() + 10});
    };

    // -- End Finance

    // -- Miscellaneous --

    // Dice - For all the board game geeks out there, myself included ;)
    function diceFn (range) {
        return function () {
            return this.natural(range);
        };
    }
    Chance.prototype.d4 = diceFn({min: 1, max: 4});
    Chance.prototype.d6 = diceFn({min: 1, max: 6});
    Chance.prototype.d8 = diceFn({min: 1, max: 8});
    Chance.prototype.d10 = diceFn({min: 1, max: 10});
    Chance.prototype.d12 = diceFn({min: 1, max: 12});
    Chance.prototype.d20 = diceFn({min: 1, max: 20});
    Chance.prototype.d30 = diceFn({min: 1, max: 30});
    Chance.prototype.d100 = diceFn({min: 1, max: 100});

    Chance.prototype.rpg = function (thrown, options) {
        options = initOptions(options);
        if (!thrown) {
            throw new RangeError("A type of die roll must be included");
        } else {
            var bits = thrown.toLowerCase().split("d"),
                rolls = [];

            if (bits.length !== 2 || !parseInt(bits[0], 10) || !parseInt(bits[1], 10)) {
                throw new Error("Invalid format provided. Please provide #d# where the first # is the number of dice to roll, the second # is the max of each die");
            }
            for (var i = bits[0]; i > 0; i--) {
                rolls[i - 1] = this.natural({min: 1, max: bits[1]});
            }
            return (typeof options.sum !== 'undefined' && options.sum) ? rolls.reduce(function (p, c) { return p + c; }) : rolls;
        }
    };

    // Guid
    Chance.prototype.guid = function (options) {
        options = initOptions(options, { version: 5 });

        var guid_pool = "abcdef1234567890",
            variant_pool = "ab89",
            guid = this.string({ pool: guid_pool, length: 8 }) + '-' +
                   this.string({ pool: guid_pool, length: 4 }) + '-' +
                   // The Version
                   options.version +
                   this.string({ pool: guid_pool, length: 3 }) + '-' +
                   // The Variant
                   this.string({ pool: variant_pool, length: 1 }) +
                   this.string({ pool: guid_pool, length: 3 }) + '-' +
                   this.string({ pool: guid_pool, length: 12 });
        return guid;
    };

    // Hash
    Chance.prototype.hash = function (options) {
        options = initOptions(options, {length : 40, casing: 'lower'});
        var pool = options.casing === 'upper' ? HEX_POOL.toUpperCase() : HEX_POOL;
        return this.string({pool: pool, length: options.length});
    };

    Chance.prototype.luhn_check = function (num) {
        var str = num.toString();
        var checkDigit = +str.substring(str.length - 1);
        return checkDigit === this.luhn_calculate(+str.substring(0, str.length - 1));
    };

    Chance.prototype.luhn_calculate = function (num) {
        var digits = num.toString().split("").reverse();
        var sum = 0;
        var digit;

        for (var i = 0, l = digits.length; l > i; ++i) {
            digit = +digits[i];
            if (i % 2 === 0) {
                digit *= 2;
                if (digit > 9) {
                    digit -= 9;
                }
            }
            sum += digit;
        }
        return (sum * 9) % 10;
    };

    // MD5 Hash
    Chance.prototype.md5 = function(options) {
        var opts = { str: '', key: null, raw: false };

        if (!options) {
            opts.str = this.string();
            options = {};
        }
        else if (typeof options === 'string') {
            opts.str = options;
            options = {};
        }
        else if (typeof options !== 'object') {
            return null;
        }
        else if(options.constructor === 'Array') {
            return null;
        }

        opts = initOptions(options, opts);

        if(!opts.str){
            throw new Error('A parameter is required to return an md5 hash.');
        }

        return this.bimd5.md5(opts.str, opts.key, opts.raw);
    };

    var data = {

        firstNames: {
            "male": ["James", "John", "Robert", "Michael", "William", "David", "Richard", "Joseph", "Charles", "Thomas", "Christopher", "Daniel", "Matthew", "George", "Donald", "Anthony", "Paul", "Mark", "Edward", "Steven", "Kenneth", "Andrew", "Brian", "Joshua", "Kevin", "Ronald", "Timothy", "Jason", "Jeffrey", "Frank", "Gary", "Ryan", "Nicholas", "Eric", "Stephen", "Jacob", "Larry", "Jonathan", "Scott", "Raymond", "Justin", "Brandon", "Gregory", "Samuel", "Benjamin", "Patrick", "Jack", "Henry", "Walter", "Dennis", "Jerry", "Alexander", "Peter", "Tyler", "Douglas", "Harold", "Aaron", "Jose", "Adam", "Arthur", "Zachary", "Carl", "Nathan", "Albert", "Kyle", "Lawrence", "Joe", "Willie", "Gerald", "Roger", "Keith", "Jeremy", "Terry", "Harry", "Ralph", "Sean", "Jesse", "Roy", "Louis", "Billy", "Austin", "Bruce", "Eugene", "Christian", "Bryan", "Wayne", "Russell", "Howard", "Fred", "Ethan", "Jordan", "Philip", "Alan", "Juan", "Randy", "Vincent", "Bobby", "Dylan", "Johnny", "Phillip", "Victor", "Clarence", "Ernest", "Martin", "Craig", "Stanley", "Shawn", "Travis", "Bradley", "Leonard", "Earl", "Gabriel", "Jimmy", "Francis", "Todd", "Noah", "Danny", "Dale", "Cody", "Carlos", "Allen", "Frederick", "Logan", "Curtis", "Alex", "Joel", "Luis", "Norman", "Marvin", "Glenn", "Tony", "Nathaniel", "Rodney", "Melvin", "Alfred", "Steve", "Cameron", "Chad", "Edwin", "Caleb", "Evan", "Antonio", "Lee", "Herbert", "Jeffery", "Isaac", "Derek", "Ricky", "Marcus", "Theodore", "Elijah", "Luke", "Jesus", "Eddie", "Troy", "Mike", "Dustin", "Ray", "Adrian", "Bernard", "Leroy", "Angel", "Randall", "Wesley", "Ian", "Jared", "Mason", "Hunter", "Calvin", "Oscar", "Clifford", "Jay", "Shane", "Ronnie", "Barry", "Lucas", "Corey", "Manuel", "Leo", "Tommy", "Warren", "Jackson", "Isaiah", "Connor", "Don", "Dean", "Jon", "Julian", "Miguel", "Bill", "Lloyd", "Charlie", "Mitchell", "Leon", "Jerome", "Darrell", "Jeremiah", "Alvin", "Brett", "Seth", "Floyd", "Jim", "Blake", "Micheal", "Gordon", "Trevor", "Lewis", "Erik", "Edgar", "Vernon", "Devin", "Gavin", "Jayden", "Chris", "Clyde", "Tom", "Derrick", "Mario", "Brent", "Marc", "Herman", "Chase", "Dominic", "Ricardo", "Franklin", "Maurice", "Max", "Aiden", "Owen", "Lester", "Gilbert", "Elmer", "Gene", "Francisco", "Glen", "Cory", "Garrett", "Clayton", "Sam", "Jorge", "Chester", "Alejandro", "Jeff", "Harvey", "Milton", "Cole", "Ivan", "Andre", "Duane", "Landon"],
            "female": ["Mary", "Emma", "Elizabeth", "Minnie", "Margaret", "Ida", "Alice", "Bertha", "Sarah", "Annie", "Clara", "Ella", "Florence", "Cora", "Martha", "Laura", "Nellie", "Grace", "Carrie", "Maude", "Mabel", "Bessie", "Jennie", "Gertrude", "Julia", "Hattie", "Edith", "Mattie", "Rose", "Catherine", "Lillian", "Ada", "Lillie", "Helen", "Jessie", "Louise", "Ethel", "Lula", "Myrtle", "Eva", "Frances", "Lena", "Lucy", "Edna", "Maggie", "Pearl", "Daisy", "Fannie", "Josephine", "Dora", "Rosa", "Katherine", "Agnes", "Marie", "Nora", "May", "Mamie", "Blanche", "Stella", "Ellen", "Nancy", "Effie", "Sallie", "Nettie", "Della", "Lizzie", "Flora", "Susie", "Maud", "Mae", "Etta", "Harriet", "Sadie", "Caroline", "Katie", "Lydia", "Elsie", "Kate", "Susan", "Mollie", "Alma", "Addie", "Georgia", "Eliza", "Lulu", "Nannie", "Lottie", "Amanda", "Belle", "Charlotte", "Rebecca", "Ruth", "Viola", "Olive", "Amelia", "Hannah", "Jane", "Virginia", "Emily", "Matilda", "Irene", "Kathryn", "Esther", "Willie", "Henrietta", "Ollie", "Amy", "Rachel", "Sara", "Estella", "Theresa", "Augusta", "Ora", "Pauline", "Josie", "Lola", "Sophia", "Leona", "Anne", "Mildred", "Ann", "Beulah", "Callie", "Lou", "Delia", "Eleanor", "Barbara", "Iva", "Louisa", "Maria", "Mayme", "Evelyn", "Estelle", "Nina", "Betty", "Marion", "Bettie", "Dorothy", "Luella", "Inez", "Lela", "Rosie", "Allie", "Millie", "Janie", "Cornelia", "Victoria", "Ruby", "Winifred", "Alta", "Celia", "Christine", "Beatrice", "Birdie", "Harriett", "Mable", "Myra", "Sophie", "Tillie", "Isabel", "Sylvia", "Carolyn", "Isabelle", "Leila", "Sally", "Ina", "Essie", "Bertie", "Nell", "Alberta", "Katharine", "Lora", "Rena", "Mina", "Rhoda", "Mathilda", "Abbie", "Eula", "Dollie", "Hettie", "Eunice", "Fanny", "Ola", "Lenora", "Adelaide", "Christina", "Lelia", "Nelle", "Sue", "Johanna", "Lilly", "Lucinda", "Minerva", "Lettie", "Roxie", "Cynthia", "Helena", "Hilda", "Hulda", "Bernice", "Genevieve", "Jean", "Cordelia", "Marian", "Francis", "Jeanette", "Adeline", "Gussie", "Leah", "Lois", "Lura", "Mittie", "Hallie", "Isabella", "Olga", "Phoebe", "Teresa", "Hester", "Lida", "Lina", "Winnie", "Claudia", "Marguerite", "Vera", "Cecelia", "Bess", "Emilie", "John", "Rosetta", "Verna", "Myrtie", "Cecilia", "Elva", "Olivia", "Ophelia", "Georgie", "Elnora", "Violet", "Adele", "Lily", "Linnie", "Loretta", "Madge", "Polly", "Virgie", "Eugenia", "Lucile", "Lucille", "Mabelle", "Rosalie"]
        },

        lastNames: ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Garcia', 'Martinez', 'Robinson', 'Clark', 'Rodriguez', 'Lewis', 'Lee', 'Walker', 'Hall', 'Allen', 'Young', 'Hernandez', 'King', 'Wright', 'Lopez', 'Hill', 'Scott', 'Green', 'Adams', 'Baker', 'Gonzalez', 'Nelson', 'Carter', 'Mitchell', 'Perez', 'Roberts', 'Turner', 'Phillips', 'Campbell', 'Parker', 'Evans', 'Edwards', 'Collins', 'Stewart', 'Sanchez', 'Morris', 'Rogers', 'Reed', 'Cook', 'Morgan', 'Bell', 'Murphy', 'Bailey', 'Rivera', 'Cooper', 'Richardson', 'Cox', 'Howard', 'Ward', 'Torres', 'Peterson', 'Gray', 'Ramirez', 'James', 'Watson', 'Brooks', 'Kelly', 'Sanders', 'Price', 'Bennett', 'Wood', 'Barnes', 'Ross', 'Henderson', 'Coleman', 'Jenkins', 'Perry', 'Powell', 'Long', 'Patterson', 'Hughes', 'Flores', 'Washington', 'Butler', 'Simmons', 'Foster', 'Gonzales', 'Bryant', 'Alexander', 'Russell', 'Griffin', 'Diaz', 'Hayes', 'Myers', 'Ford', 'Hamilton', 'Graham', 'Sullivan', 'Wallace', 'Woods', 'Cole', 'West', 'Jordan', 'Owens', 'Reynolds', 'Fisher', 'Ellis', 'Harrison', 'Gibson', 'McDonald', 'Cruz', 'Marshall', 'Ortiz', 'Gomez', 'Murray', 'Freeman', 'Wells', 'Webb', 'Simpson', 'Stevens', 'Tucker', 'Porter', 'Hunter', 'Hicks', 'Crawford', 'Henry', 'Boyd', 'Mason', 'Morales', 'Kennedy', 'Warren', 'Dixon', 'Ramos', 'Reyes', 'Burns', 'Gordon', 'Shaw', 'Holmes', 'Rice', 'Robertson', 'Hunt', 'Black', 'Daniels', 'Palmer', 'Mills', 'Nichols', 'Grant', 'Knight', 'Ferguson', 'Rose', 'Stone', 'Hawkins', 'Dunn', 'Perkins', 'Hudson', 'Spencer', 'Gardner', 'Stephens', 'Payne', 'Pierce', 'Berry', 'Matthews', 'Arnold', 'Wagner', 'Willis', 'Ray', 'Watkins', 'Olson', 'Carroll', 'Duncan', 'Snyder', 'Hart', 'Cunningham', 'Bradley', 'Lane', 'Andrews', 'Ruiz', 'Harper', 'Fox', 'Riley', 'Armstrong', 'Carpenter', 'Weaver', 'Greene', 'Lawrence', 'Elliott', 'Chavez', 'Sims', 'Austin', 'Peters', 'Kelley', 'Franklin', 'Lawson', 'Fields', 'Gutierrez', 'Ryan', 'Schmidt', 'Carr', 'Vasquez', 'Castillo', 'Wheeler', 'Chapman', 'Oliver', 'Montgomery', 'Richards', 'Williamson', 'Johnston', 'Banks', 'Meyer', 'Bishop', 'McCoy', 'Howell', 'Alvarez', 'Morrison', 'Hansen', 'Fernandez', 'Garza', 'Harvey', 'Little', 'Burton', 'Stanley', 'Nguyen', 'George', 'Jacobs', 'Reid', 'Kim', 'Fuller', 'Lynch', 'Dean', 'Gilbert', 'Garrett', 'Romero', 'Welch', 'Larson', 'Frazier', 'Burke', 'Hanson', 'Day', 'Mendoza', 'Moreno', 'Bowman', 'Medina', 'Fowler', 'Brewer', 'Hoffman', 'Carlson', 'Silva', 'Pearson', 'Holland', 'Douglas', 'Fleming', 'Jensen', 'Vargas', 'Byrd', 'Davidson', 'Hopkins', 'May', 'Terry', 'Herrera', 'Wade', 'Soto', 'Walters', 'Curtis', 'Neal', 'Caldwell', 'Lowe', 'Jennings', 'Barnett', 'Graves', 'Jimenez', 'Horton', 'Shelton', 'Barrett', 'Obrien', 'Castro', 'Sutton', 'Gregory', 'McKinney', 'Lucas', 'Miles', 'Craig', 'Rodriquez', 'Chambers', 'Holt', 'Lambert', 'Fletcher', 'Watts', 'Bates', 'Hale', 'Rhodes', 'Pena', 'Beck', 'Newman', 'Haynes', 'McDaniel', 'Mendez', 'Bush', 'Vaughn', 'Parks', 'Dawson', 'Santiago', 'Norris', 'Hardy', 'Love', 'Steele', 'Curry', 'Powers', 'Schultz', 'Barker', 'Guzman', 'Page', 'Munoz', 'Ball', 'Keller', 'Chandler', 'Weber', 'Leonard', 'Walsh', 'Lyons', 'Ramsey', 'Wolfe', 'Schneider', 'Mullins', 'Benson', 'Sharp', 'Bowen', 'Daniel', 'Barber', 'Cummings', 'Hines', 'Baldwin', 'Griffith', 'Valdez', 'Hubbard', 'Salazar', 'Reeves', 'Warner', 'Stevenson', 'Burgess', 'Santos', 'Tate', 'Cross', 'Garner', 'Mann', 'Mack', 'Moss', 'Thornton', 'Dennis', 'McGee', 'Farmer', 'Delgado', 'Aguilar', 'Vega', 'Glover', 'Manning', 'Cohen', 'Harmon', 'Rodgers', 'Robbins', 'Newton', 'Todd', 'Blair', 'Higgins', 'Ingram', 'Reese', 'Cannon', 'Strickland', 'Townsend', 'Potter', 'Goodwin', 'Walton', 'Rowe', 'Hampton', 'Ortega', 'Patton', 'Swanson', 'Joseph', 'Francis', 'Goodman', 'Maldonado', 'Yates', 'Becker', 'Erickson', 'Hodges', 'Rios', 'Conner', 'Adkins', 'Webster', 'Norman', 'Malone', 'Hammond', 'Flowers', 'Cobb', 'Moody', 'Quinn', 'Blake', 'Maxwell', 'Pope', 'Floyd', 'Osborne', 'Paul', 'McCarthy', 'Guerrero', 'Lindsey', 'Estrada', 'Sandoval', 'Gibbs', 'Tyler', 'Gross', 'Fitzgerald', 'Stokes', 'Doyle', 'Sherman', 'Saunders', 'Wise', 'Colon', 'Gill', 'Alvarado', 'Greer', 'Padilla', 'Simon', 'Waters', 'Nunez', 'Ballard', 'Schwartz', 'McBride', 'Houston', 'Christensen', 'Klein', 'Pratt', 'Briggs', 'Parsons', 'McLaughlin', 'Zimmerman', 'French', 'Buchanan', 'Moran', 'Copeland', 'Roy', 'Pittman', 'Brady', 'McCormick', 'Holloway', 'Brock', 'Poole', 'Frank', 'Logan', 'Owen', 'Bass', 'Marsh', 'Drake', 'Wong', 'Jefferson', 'Park', 'Morton', 'Abbott', 'Sparks', 'Patrick', 'Norton', 'Huff', 'Clayton', 'Massey', 'Lloyd', 'Figueroa', 'Carson', 'Bowers', 'Roberson', 'Barton', 'Tran', 'Lamb', 'Harrington', 'Casey', 'Boone', 'Cortez', 'Clarke', 'Mathis', 'Singleton', 'Wilkins', 'Cain', 'Bryan', 'Underwood', 'Hogan', 'McKenzie', 'Collier', 'Luna', 'Phelps', 'McGuire', 'Allison', 'Bridges', 'Wilkerson', 'Nash', 'Summers', 'Atkins'],

        // Data taken from https://github.com/umpirsky/country-list/blob/master/country/cldr/en_US/country.json
        countries: [{"name":"Afghanistan","abbreviation":"AF"},{"name":"Albania","abbreviation":"AL"},{"name":"Algeria","abbreviation":"DZ"},{"name":"American Samoa","abbreviation":"AS"},{"name":"Andorra","abbreviation":"AD"},{"name":"Angola","abbreviation":"AO"},{"name":"Anguilla","abbreviation":"AI"},{"name":"Antarctica","abbreviation":"AQ"},{"name":"Antigua and Barbuda","abbreviation":"AG"},{"name":"Argentina","abbreviation":"AR"},{"name":"Armenia","abbreviation":"AM"},{"name":"Aruba","abbreviation":"AW"},{"name":"Australia","abbreviation":"AU"},{"name":"Austria","abbreviation":"AT"},{"name":"Azerbaijan","abbreviation":"AZ"},{"name":"Bahamas","abbreviation":"BS"},{"name":"Bahrain","abbreviation":"BH"},{"name":"Bangladesh","abbreviation":"BD"},{"name":"Barbados","abbreviation":"BB"},{"name":"Belarus","abbreviation":"BY"},{"name":"Belgium","abbreviation":"BE"},{"name":"Belize","abbreviation":"BZ"},{"name":"Benin","abbreviation":"BJ"},{"name":"Bermuda","abbreviation":"BM"},{"name":"Bhutan","abbreviation":"BT"},{"name":"Bolivia","abbreviation":"BO"},{"name":"Bosnia and Herzegovina","abbreviation":"BA"},{"name":"Botswana","abbreviation":"BW"},{"name":"Bouvet Island","abbreviation":"BV"},{"name":"Brazil","abbreviation":"BR"},{"name":"British Antarctic Territory","abbreviation":"BQ"},{"name":"British Indian Ocean Territory","abbreviation":"IO"},{"name":"British Virgin Islands","abbreviation":"VG"},{"name":"Brunei","abbreviation":"BN"},{"name":"Bulgaria","abbreviation":"BG"},{"name":"Burkina Faso","abbreviation":"BF"},{"name":"Burundi","abbreviation":"BI"},{"name":"Cambodia","abbreviation":"KH"},{"name":"Cameroon","abbreviation":"CM"},{"name":"Canada","abbreviation":"CA"},{"name":"Canton and Enderbury Islands","abbreviation":"CT"},{"name":"Cape Verde","abbreviation":"CV"},{"name":"Cayman Islands","abbreviation":"KY"},{"name":"Central African Republic","abbreviation":"CF"},{"name":"Chad","abbreviation":"TD"},{"name":"Chile","abbreviation":"CL"},{"name":"China","abbreviation":"CN"},{"name":"Christmas Island","abbreviation":"CX"},{"name":"Cocos [Keeling] Islands","abbreviation":"CC"},{"name":"Colombia","abbreviation":"CO"},{"name":"Comoros","abbreviation":"KM"},{"name":"Congo - Brazzaville","abbreviation":"CG"},{"name":"Congo - Kinshasa","abbreviation":"CD"},{"name":"Cook Islands","abbreviation":"CK"},{"name":"Costa Rica","abbreviation":"CR"},{"name":"Croatia","abbreviation":"HR"},{"name":"Cuba","abbreviation":"CU"},{"name":"Cyprus","abbreviation":"CY"},{"name":"Czech Republic","abbreviation":"CZ"},{"name":"Côte d’Ivoire","abbreviation":"CI"},{"name":"Denmark","abbreviation":"DK"},{"name":"Djibouti","abbreviation":"DJ"},{"name":"Dominica","abbreviation":"DM"},{"name":"Dominican Republic","abbreviation":"DO"},{"name":"Dronning Maud Land","abbreviation":"NQ"},{"name":"East Germany","abbreviation":"DD"},{"name":"Ecuador","abbreviation":"EC"},{"name":"Egypt","abbreviation":"EG"},{"name":"El Salvador","abbreviation":"SV"},{"name":"Equatorial Guinea","abbreviation":"GQ"},{"name":"Eritrea","abbreviation":"ER"},{"name":"Estonia","abbreviation":"EE"},{"name":"Ethiopia","abbreviation":"ET"},{"name":"Falkland Islands","abbreviation":"FK"},{"name":"Faroe Islands","abbreviation":"FO"},{"name":"Fiji","abbreviation":"FJ"},{"name":"Finland","abbreviation":"FI"},{"name":"France","abbreviation":"FR"},{"name":"French Guiana","abbreviation":"GF"},{"name":"French Polynesia","abbreviation":"PF"},{"name":"French Southern Territories","abbreviation":"TF"},{"name":"French Southern and Antarctic Territories","abbreviation":"FQ"},{"name":"Gabon","abbreviation":"GA"},{"name":"Gambia","abbreviation":"GM"},{"name":"Georgia","abbreviation":"GE"},{"name":"Germany","abbreviation":"DE"},{"name":"Ghana","abbreviation":"GH"},{"name":"Gibraltar","abbreviation":"GI"},{"name":"Greece","abbreviation":"GR"},{"name":"Greenland","abbreviation":"GL"},{"name":"Grenada","abbreviation":"GD"},{"name":"Guadeloupe","abbreviation":"GP"},{"name":"Guam","abbreviation":"GU"},{"name":"Guatemala","abbreviation":"GT"},{"name":"Guernsey","abbreviation":"GG"},{"name":"Guinea","abbreviation":"GN"},{"name":"Guinea-Bissau","abbreviation":"GW"},{"name":"Guyana","abbreviation":"GY"},{"name":"Haiti","abbreviation":"HT"},{"name":"Heard Island and McDonald Islands","abbreviation":"HM"},{"name":"Honduras","abbreviation":"HN"},{"name":"Hong Kong SAR China","abbreviation":"HK"},{"name":"Hungary","abbreviation":"HU"},{"name":"Iceland","abbreviation":"IS"},{"name":"India","abbreviation":"IN"},{"name":"Indonesia","abbreviation":"ID"},{"name":"Iran","abbreviation":"IR"},{"name":"Iraq","abbreviation":"IQ"},{"name":"Ireland","abbreviation":"IE"},{"name":"Isle of Man","abbreviation":"IM"},{"name":"Israel","abbreviation":"IL"},{"name":"Italy","abbreviation":"IT"},{"name":"Jamaica","abbreviation":"JM"},{"name":"Japan","abbreviation":"JP"},{"name":"Jersey","abbreviation":"JE"},{"name":"Johnston Island","abbreviation":"JT"},{"name":"Jordan","abbreviation":"JO"},{"name":"Kazakhstan","abbreviation":"KZ"},{"name":"Kenya","abbreviation":"KE"},{"name":"Kiribati","abbreviation":"KI"},{"name":"Kuwait","abbreviation":"KW"},{"name":"Kyrgyzstan","abbreviation":"KG"},{"name":"Laos","abbreviation":"LA"},{"name":"Latvia","abbreviation":"LV"},{"name":"Lebanon","abbreviation":"LB"},{"name":"Lesotho","abbreviation":"LS"},{"name":"Liberia","abbreviation":"LR"},{"name":"Libya","abbreviation":"LY"},{"name":"Liechtenstein","abbreviation":"LI"},{"name":"Lithuania","abbreviation":"LT"},{"name":"Luxembourg","abbreviation":"LU"},{"name":"Macau SAR China","abbreviation":"MO"},{"name":"Macedonia","abbreviation":"MK"},{"name":"Madagascar","abbreviation":"MG"},{"name":"Malawi","abbreviation":"MW"},{"name":"Malaysia","abbreviation":"MY"},{"name":"Maldives","abbreviation":"MV"},{"name":"Mali","abbreviation":"ML"},{"name":"Malta","abbreviation":"MT"},{"name":"Marshall Islands","abbreviation":"MH"},{"name":"Martinique","abbreviation":"MQ"},{"name":"Mauritania","abbreviation":"MR"},{"name":"Mauritius","abbreviation":"MU"},{"name":"Mayotte","abbreviation":"YT"},{"name":"Metropolitan France","abbreviation":"FX"},{"name":"Mexico","abbreviation":"MX"},{"name":"Micronesia","abbreviation":"FM"},{"name":"Midway Islands","abbreviation":"MI"},{"name":"Moldova","abbreviation":"MD"},{"name":"Monaco","abbreviation":"MC"},{"name":"Mongolia","abbreviation":"MN"},{"name":"Montenegro","abbreviation":"ME"},{"name":"Montserrat","abbreviation":"MS"},{"name":"Morocco","abbreviation":"MA"},{"name":"Mozambique","abbreviation":"MZ"},{"name":"Myanmar [Burma]","abbreviation":"MM"},{"name":"Namibia","abbreviation":"NA"},{"name":"Nauru","abbreviation":"NR"},{"name":"Nepal","abbreviation":"NP"},{"name":"Netherlands","abbreviation":"NL"},{"name":"Netherlands Antilles","abbreviation":"AN"},{"name":"Neutral Zone","abbreviation":"NT"},{"name":"New Caledonia","abbreviation":"NC"},{"name":"New Zealand","abbreviation":"NZ"},{"name":"Nicaragua","abbreviation":"NI"},{"name":"Niger","abbreviation":"NE"},{"name":"Nigeria","abbreviation":"NG"},{"name":"Niue","abbreviation":"NU"},{"name":"Norfolk Island","abbreviation":"NF"},{"name":"North Korea","abbreviation":"KP"},{"name":"North Vietnam","abbreviation":"VD"},{"name":"Northern Mariana Islands","abbreviation":"MP"},{"name":"Norway","abbreviation":"NO"},{"name":"Oman","abbreviation":"OM"},{"name":"Pacific Islands Trust Territory","abbreviation":"PC"},{"name":"Pakistan","abbreviation":"PK"},{"name":"Palau","abbreviation":"PW"},{"name":"Palestinian Territories","abbreviation":"PS"},{"name":"Panama","abbreviation":"PA"},{"name":"Panama Canal Zone","abbreviation":"PZ"},{"name":"Papua New Guinea","abbreviation":"PG"},{"name":"Paraguay","abbreviation":"PY"},{"name":"People's Democratic Republic of Yemen","abbreviation":"YD"},{"name":"Peru","abbreviation":"PE"},{"name":"Philippines","abbreviation":"PH"},{"name":"Pitcairn Islands","abbreviation":"PN"},{"name":"Poland","abbreviation":"PL"},{"name":"Portugal","abbreviation":"PT"},{"name":"Puerto Rico","abbreviation":"PR"},{"name":"Qatar","abbreviation":"QA"},{"name":"Romania","abbreviation":"RO"},{"name":"Russia","abbreviation":"RU"},{"name":"Rwanda","abbreviation":"RW"},{"name":"Réunion","abbreviation":"RE"},{"name":"Saint Barthélemy","abbreviation":"BL"},{"name":"Saint Helena","abbreviation":"SH"},{"name":"Saint Kitts and Nevis","abbreviation":"KN"},{"name":"Saint Lucia","abbreviation":"LC"},{"name":"Saint Martin","abbreviation":"MF"},{"name":"Saint Pierre and Miquelon","abbreviation":"PM"},{"name":"Saint Vincent and the Grenadines","abbreviation":"VC"},{"name":"Samoa","abbreviation":"WS"},{"name":"San Marino","abbreviation":"SM"},{"name":"Saudi Arabia","abbreviation":"SA"},{"name":"Senegal","abbreviation":"SN"},{"name":"Serbia","abbreviation":"RS"},{"name":"Serbia and Montenegro","abbreviation":"CS"},{"name":"Seychelles","abbreviation":"SC"},{"name":"Sierra Leone","abbreviation":"SL"},{"name":"Singapore","abbreviation":"SG"},{"name":"Slovakia","abbreviation":"SK"},{"name":"Slovenia","abbreviation":"SI"},{"name":"Solomon Islands","abbreviation":"SB"},{"name":"Somalia","abbreviation":"SO"},{"name":"South Africa","abbreviation":"ZA"},{"name":"South Georgia and the South Sandwich Islands","abbreviation":"GS"},{"name":"South Korea","abbreviation":"KR"},{"name":"Spain","abbreviation":"ES"},{"name":"Sri Lanka","abbreviation":"LK"},{"name":"Sudan","abbreviation":"SD"},{"name":"Suriname","abbreviation":"SR"},{"name":"Svalbard and Jan Mayen","abbreviation":"SJ"},{"name":"Swaziland","abbreviation":"SZ"},{"name":"Sweden","abbreviation":"SE"},{"name":"Switzerland","abbreviation":"CH"},{"name":"Syria","abbreviation":"SY"},{"name":"São Tomé and Príncipe","abbreviation":"ST"},{"name":"Taiwan","abbreviation":"TW"},{"name":"Tajikistan","abbreviation":"TJ"},{"name":"Tanzania","abbreviation":"TZ"},{"name":"Thailand","abbreviation":"TH"},{"name":"Timor-Leste","abbreviation":"TL"},{"name":"Togo","abbreviation":"TG"},{"name":"Tokelau","abbreviation":"TK"},{"name":"Tonga","abbreviation":"TO"},{"name":"Trinidad and Tobago","abbreviation":"TT"},{"name":"Tunisia","abbreviation":"TN"},{"name":"Turkey","abbreviation":"TR"},{"name":"Turkmenistan","abbreviation":"TM"},{"name":"Turks and Caicos Islands","abbreviation":"TC"},{"name":"Tuvalu","abbreviation":"TV"},{"name":"U.S. Minor Outlying Islands","abbreviation":"UM"},{"name":"U.S. Miscellaneous Pacific Islands","abbreviation":"PU"},{"name":"U.S. Virgin Islands","abbreviation":"VI"},{"name":"Uganda","abbreviation":"UG"},{"name":"Ukraine","abbreviation":"UA"},{"name":"Union of Soviet Socialist Republics","abbreviation":"SU"},{"name":"United Arab Emirates","abbreviation":"AE"},{"name":"United Kingdom","abbreviation":"GB"},{"name":"United States","abbreviation":"US"},{"name":"Unknown or Invalid Region","abbreviation":"ZZ"},{"name":"Uruguay","abbreviation":"UY"},{"name":"Uzbekistan","abbreviation":"UZ"},{"name":"Vanuatu","abbreviation":"VU"},{"name":"Vatican City","abbreviation":"VA"},{"name":"Venezuela","abbreviation":"VE"},{"name":"Vietnam","abbreviation":"VN"},{"name":"Wake Island","abbreviation":"WK"},{"name":"Wallis and Futuna","abbreviation":"WF"},{"name":"Western Sahara","abbreviation":"EH"},{"name":"Yemen","abbreviation":"YE"},{"name":"Zambia","abbreviation":"ZM"},{"name":"Zimbabwe","abbreviation":"ZW"},{"name":"Åland Islands","abbreviation":"AX"}],

        provinces: [
            {name: 'Alberta', abbreviation: 'AB'},
            {name: 'British Columbia', abbreviation: 'BC'},
            {name: 'Manitoba', abbreviation: 'MB'},
            {name: 'New Brunswick', abbreviation: 'NB'},
            {name: 'Newfoundland and Labrador', abbreviation: 'NL'},
            {name: 'Nova Scotia', abbreviation: 'NS'},
            {name: 'Ontario', abbreviation: 'ON'},
            {name: 'Prince Edward Island', abbreviation: 'PE'},
            {name: 'Quebec', abbreviation: 'QC'},
            {name: 'Saskatchewan', abbreviation: 'SK'},

            // The case could be made that the following are not actually provinces
            // since they are technically considered "territories" however they all
            // look the same on an envelope!
            {name: 'Northwest Territories', abbreviation: 'NT'},
            {name: 'Nunavut', abbreviation: 'NU'},
            {name: 'Yukon', abbreviation: 'YT'}
        ],

        us_states_and_dc: [
            {name: 'Alabama', abbreviation: 'AL'},
            {name: 'Alaska', abbreviation: 'AK'},
            {name: 'Arizona', abbreviation: 'AZ'},
            {name: 'Arkansas', abbreviation: 'AR'},
            {name: 'California', abbreviation: 'CA'},
            {name: 'Colorado', abbreviation: 'CO'},
            {name: 'Connecticut', abbreviation: 'CT'},
            {name: 'Delaware', abbreviation: 'DE'},
            {name: 'District of Columbia', abbreviation: 'DC'},
            {name: 'Florida', abbreviation: 'FL'},
            {name: 'Georgia', abbreviation: 'GA'},
            {name: 'Hawaii', abbreviation: 'HI'},
            {name: 'Idaho', abbreviation: 'ID'},
            {name: 'Illinois', abbreviation: 'IL'},
            {name: 'Indiana', abbreviation: 'IN'},
            {name: 'Iowa', abbreviation: 'IA'},
            {name: 'Kansas', abbreviation: 'KS'},
            {name: 'Kentucky', abbreviation: 'KY'},
            {name: 'Louisiana', abbreviation: 'LA'},
            {name: 'Maine', abbreviation: 'ME'},
            {name: 'Maryland', abbreviation: 'MD'},
            {name: 'Massachusetts', abbreviation: 'MA'},
            {name: 'Michigan', abbreviation: 'MI'},
            {name: 'Minnesota', abbreviation: 'MN'},
            {name: 'Mississippi', abbreviation: 'MS'},
            {name: 'Missouri', abbreviation: 'MO'},
            {name: 'Montana', abbreviation: 'MT'},
            {name: 'Nebraska', abbreviation: 'NE'},
            {name: 'Nevada', abbreviation: 'NV'},
            {name: 'New Hampshire', abbreviation: 'NH'},
            {name: 'New Jersey', abbreviation: 'NJ'},
            {name: 'New Mexico', abbreviation: 'NM'},
            {name: 'New York', abbreviation: 'NY'},
            {name: 'North Carolina', abbreviation: 'NC'},
            {name: 'North Dakota', abbreviation: 'ND'},
            {name: 'Ohio', abbreviation: 'OH'},
            {name: 'Oklahoma', abbreviation: 'OK'},
            {name: 'Oregon', abbreviation: 'OR'},
            {name: 'Pennsylvania', abbreviation: 'PA'},
            {name: 'Rhode Island', abbreviation: 'RI'},
            {name: 'South Carolina', abbreviation: 'SC'},
            {name: 'South Dakota', abbreviation: 'SD'},
            {name: 'Tennessee', abbreviation: 'TN'},
            {name: 'Texas', abbreviation: 'TX'},
            {name: 'Utah', abbreviation: 'UT'},
            {name: 'Vermont', abbreviation: 'VT'},
            {name: 'Virginia', abbreviation: 'VA'},
            {name: 'Washington', abbreviation: 'WA'},
            {name: 'West Virginia', abbreviation: 'WV'},
            {name: 'Wisconsin', abbreviation: 'WI'},
            {name: 'Wyoming', abbreviation: 'WY'}
        ],

        territories: [
            {name: 'American Samoa', abbreviation: 'AS'},
            {name: 'Federated States of Micronesia', abbreviation: 'FM'},
            {name: 'Guam', abbreviation: 'GU'},
            {name: 'Marshall Islands', abbreviation: 'MH'},
            {name: 'Northern Mariana Islands', abbreviation: 'MP'},
            {name: 'Puerto Rico', abbreviation: 'PR'},
            {name: 'Virgin Islands, U.S.', abbreviation: 'VI'}
        ],

        armed_forces: [
            {name: 'Armed Forces Europe', abbreviation: 'AE'},
            {name: 'Armed Forces Pacific', abbreviation: 'AP'},
            {name: 'Armed Forces the Americas', abbreviation: 'AA'}
        ],

        street_suffixes: [
            {name: 'Avenue', abbreviation: 'Ave'},
            {name: 'Boulevard', abbreviation: 'Blvd'},
            {name: 'Center', abbreviation: 'Ctr'},
            {name: 'Circle', abbreviation: 'Cir'},
            {name: 'Court', abbreviation: 'Ct'},
            {name: 'Drive', abbreviation: 'Dr'},
            {name: 'Extension', abbreviation: 'Ext'},
            {name: 'Glen', abbreviation: 'Gln'},
            {name: 'Grove', abbreviation: 'Grv'},
            {name: 'Heights', abbreviation: 'Hts'},
            {name: 'Highway', abbreviation: 'Hwy'},
            {name: 'Junction', abbreviation: 'Jct'},
            {name: 'Key', abbreviation: 'Key'},
            {name: 'Lane', abbreviation: 'Ln'},
            {name: 'Loop', abbreviation: 'Loop'},
            {name: 'Manor', abbreviation: 'Mnr'},
            {name: 'Mill', abbreviation: 'Mill'},
            {name: 'Park', abbreviation: 'Park'},
            {name: 'Parkway', abbreviation: 'Pkwy'},
            {name: 'Pass', abbreviation: 'Pass'},
            {name: 'Path', abbreviation: 'Path'},
            {name: 'Pike', abbreviation: 'Pike'},
            {name: 'Place', abbreviation: 'Pl'},
            {name: 'Plaza', abbreviation: 'Plz'},
            {name: 'Point', abbreviation: 'Pt'},
            {name: 'Ridge', abbreviation: 'Rdg'},
            {name: 'River', abbreviation: 'Riv'},
            {name: 'Road', abbreviation: 'Rd'},
            {name: 'Square', abbreviation: 'Sq'},
            {name: 'Street', abbreviation: 'St'},
            {name: 'Terrace', abbreviation: 'Ter'},
            {name: 'Trail', abbreviation: 'Trl'},
            {name: 'Turnpike', abbreviation: 'Tpke'},
            {name: 'View', abbreviation: 'Vw'},
            {name: 'Way', abbreviation: 'Way'}
        ],

        months: [
            {name: 'January', short_name: 'Jan', numeric: '01', days: 31},
            // Not messing with leap years...
            {name: 'February', short_name: 'Feb', numeric: '02', days: 28},
            {name: 'March', short_name: 'Mar', numeric: '03', days: 31},
            {name: 'April', short_name: 'Apr', numeric: '04', days: 30},
            {name: 'May', short_name: 'May', numeric: '05', days: 31},
            {name: 'June', short_name: 'Jun', numeric: '06', days: 30},
            {name: 'July', short_name: 'Jul', numeric: '07', days: 31},
            {name: 'August', short_name: 'Aug', numeric: '08', days: 31},
            {name: 'September', short_name: 'Sep', numeric: '09', days: 30},
            {name: 'October', short_name: 'Oct', numeric: '10', days: 31},
            {name: 'November', short_name: 'Nov', numeric: '11', days: 30},
            {name: 'December', short_name: 'Dec', numeric: '12', days: 31}
        ],

        // http://en.wikipedia.org/wiki/Bank_card_number#Issuer_identification_number_.28IIN.29
        cc_types: [
            {name: "American Express", short_name: 'amex', prefix: '34', length: 15},
            {name: "Bankcard", short_name: 'bankcard', prefix: '5610', length: 16},
            {name: "China UnionPay", short_name: 'chinaunion', prefix: '62', length: 16},
            {name: "Diners Club Carte Blanche", short_name: 'dccarte', prefix: '300', length: 14},
            {name: "Diners Club enRoute", short_name: 'dcenroute', prefix: '2014', length: 15},
            {name: "Diners Club International", short_name: 'dcintl', prefix: '36', length: 14},
            {name: "Diners Club United States & Canada", short_name: 'dcusc', prefix: '54', length: 16},
            {name: "Discover Card", short_name: 'discover', prefix: '6011', length: 16},
            {name: "InstaPayment", short_name: 'instapay', prefix: '637', length: 16},
            {name: "JCB", short_name: 'jcb', prefix: '3528', length: 16},
            {name: "Laser", short_name: 'laser', prefix: '6304', length: 16},
            {name: "Maestro", short_name: 'maestro', prefix: '5018', length: 16},
            {name: "Mastercard", short_name: 'mc', prefix: '51', length: 16},
            {name: "Solo", short_name: 'solo', prefix: '6334', length: 16},
            {name: "Switch", short_name: 'switch', prefix: '4903', length: 16},
            {name: "Visa", short_name: 'visa', prefix: '4', length: 16},
            {name: "Visa Electron", short_name: 'electron', prefix: '4026', length: 16}
        ],

        //return all world currency by ISO 4217
        currency_types: [
            {'code' : 'AED', 'name' : 'United Arab Emirates Dirham'},
            {'code' : 'AFN', 'name' : 'Afghanistan Afghani'},
            {'code' : 'ALL', 'name' : 'Albania Lek'},
            {'code' : 'AMD', 'name' : 'Armenia Dram'},
            {'code' : 'ANG', 'name' : 'Netherlands Antilles Guilder'},
            {'code' : 'AOA', 'name' : 'Angola Kwanza'},
            {'code' : 'ARS', 'name' : 'Argentina Peso'},
            {'code' : 'AUD', 'name' : 'Australia Dollar'},
            {'code' : 'AWG', 'name' : 'Aruba Guilder'},
            {'code' : 'AZN', 'name' : 'Azerbaijan New Manat'},
            {'code' : 'BAM', 'name' : 'Bosnia and Herzegovina Convertible Marka'},
            {'code' : 'BBD', 'name' : 'Barbados Dollar'},
            {'code' : 'BDT', 'name' : 'Bangladesh Taka'},
            {'code' : 'BGN', 'name' : 'Bulgaria Lev'},
            {'code' : 'BHD', 'name' : 'Bahrain Dinar'},
            {'code' : 'BIF', 'name' : 'Burundi Franc'},
            {'code' : 'BMD', 'name' : 'Bermuda Dollar'},
            {'code' : 'BND', 'name' : 'Brunei Darussalam Dollar'},
            {'code' : 'BOB', 'name' : 'Bolivia Boliviano'},
            {'code' : 'BRL', 'name' : 'Brazil Real'},
            {'code' : 'BSD', 'name' : 'Bahamas Dollar'},
            {'code' : 'BTN', 'name' : 'Bhutan Ngultrum'},
            {'code' : 'BWP', 'name' : 'Botswana Pula'},
            {'code' : 'BYR', 'name' : 'Belarus Ruble'},
            {'code' : 'BZD', 'name' : 'Belize Dollar'},
            {'code' : 'CAD', 'name' : 'Canada Dollar'},
            {'code' : 'CDF', 'name' : 'Congo/Kinshasa Franc'},
            {'code' : 'CHF', 'name' : 'Switzerland Franc'},
            {'code' : 'CLP', 'name' : 'Chile Peso'},
            {'code' : 'CNY', 'name' : 'China Yuan Renminbi'},
            {'code' : 'COP', 'name' : 'Colombia Peso'},
            {'code' : 'CRC', 'name' : 'Costa Rica Colon'},
            {'code' : 'CUC', 'name' : 'Cuba Convertible Peso'},
            {'code' : 'CUP', 'name' : 'Cuba Peso'},
            {'code' : 'CVE', 'name' : 'Cape Verde Escudo'},
            {'code' : 'CZK', 'name' : 'Czech Republic Koruna'},
            {'code' : 'DJF', 'name' : 'Djibouti Franc'},
            {'code' : 'DKK', 'name' : 'Denmark Krone'},
            {'code' : 'DOP', 'name' : 'Dominican Republic Peso'},
            {'code' : 'DZD', 'name' : 'Algeria Dinar'},
            {'code' : 'EGP', 'name' : 'Egypt Pound'},
            {'code' : 'ERN', 'name' : 'Eritrea Nakfa'},
            {'code' : 'ETB', 'name' : 'Ethiopia Birr'},
            {'code' : 'EUR', 'name' : 'Euro Member Countries'},
            {'code' : 'FJD', 'name' : 'Fiji Dollar'},
            {'code' : 'FKP', 'name' : 'Falkland Islands (Malvinas) Pound'},
            {'code' : 'GBP', 'name' : 'United Kingdom Pound'},
            {'code' : 'GEL', 'name' : 'Georgia Lari'},
            {'code' : 'GGP', 'name' : 'Guernsey Pound'},
            {'code' : 'GHS', 'name' : 'Ghana Cedi'},
            {'code' : 'GIP', 'name' : 'Gibraltar Pound'},
            {'code' : 'GMD', 'name' : 'Gambia Dalasi'},
            {'code' : 'GNF', 'name' : 'Guinea Franc'},
            {'code' : 'GTQ', 'name' : 'Guatemala Quetzal'},
            {'code' : 'GYD', 'name' : 'Guyana Dollar'},
            {'code' : 'HKD', 'name' : 'Hong Kong Dollar'},
            {'code' : 'HNL', 'name' : 'Honduras Lempira'},
            {'code' : 'HRK', 'name' : 'Croatia Kuna'},
            {'code' : 'HTG', 'name' : 'Haiti Gourde'},
            {'code' : 'HUF', 'name' : 'Hungary Forint'},
            {'code' : 'IDR', 'name' : 'Indonesia Rupiah'},
            {'code' : 'ILS', 'name' : 'Israel Shekel'},
            {'code' : 'IMP', 'name' : 'Isle of Man Pound'},
            {'code' : 'INR', 'name' : 'India Rupee'},
            {'code' : 'IQD', 'name' : 'Iraq Dinar'},
            {'code' : 'IRR', 'name' : 'Iran Rial'},
            {'code' : 'ISK', 'name' : 'Iceland Krona'},
            {'code' : 'JEP', 'name' : 'Jersey Pound'},
            {'code' : 'JMD', 'name' : 'Jamaica Dollar'},
            {'code' : 'JOD', 'name' : 'Jordan Dinar'},
            {'code' : 'JPY', 'name' : 'Japan Yen'},
            {'code' : 'KES', 'name' : 'Kenya Shilling'},
            {'code' : 'KGS', 'name' : 'Kyrgyzstan Som'},
            {'code' : 'KHR', 'name' : 'Cambodia Riel'},
            {'code' : 'KMF', 'name' : 'Comoros Franc'},
            {'code' : 'KPW', 'name' : 'Korea (North) Won'},
            {'code' : 'KRW', 'name' : 'Korea (South) Won'},
            {'code' : 'KWD', 'name' : 'Kuwait Dinar'},
            {'code' : 'KYD', 'name' : 'Cayman Islands Dollar'},
            {'code' : 'KZT', 'name' : 'Kazakhstan Tenge'},
            {'code' : 'LAK', 'name' : 'Laos Kip'},
            {'code' : 'LBP', 'name' : 'Lebanon Pound'},
            {'code' : 'LKR', 'name' : 'Sri Lanka Rupee'},
            {'code' : 'LRD', 'name' : 'Liberia Dollar'},
            {'code' : 'LSL', 'name' : 'Lesotho Loti'},
            {'code' : 'LTL', 'name' : 'Lithuania Litas'},
            {'code' : 'LYD', 'name' : 'Libya Dinar'},
            {'code' : 'MAD', 'name' : 'Morocco Dirham'},
            {'code' : 'MDL', 'name' : 'Moldova Leu'},
            {'code' : 'MGA', 'name' : 'Madagascar Ariary'},
            {'code' : 'MKD', 'name' : 'Macedonia Denar'},
            {'code' : 'MMK', 'name' : 'Myanmar (Burma) Kyat'},
            {'code' : 'MNT', 'name' : 'Mongolia Tughrik'},
            {'code' : 'MOP', 'name' : 'Macau Pataca'},
            {'code' : 'MRO', 'name' : 'Mauritania Ouguiya'},
            {'code' : 'MUR', 'name' : 'Mauritius Rupee'},
            {'code' : 'MVR', 'name' : 'Maldives (Maldive Islands) Rufiyaa'},
            {'code' : 'MWK', 'name' : 'Malawi Kwacha'},
            {'code' : 'MXN', 'name' : 'Mexico Peso'},
            {'code' : 'MYR', 'name' : 'Malaysia Ringgit'},
            {'code' : 'MZN', 'name' : 'Mozambique Metical'},
            {'code' : 'NAD', 'name' : 'Namibia Dollar'},
            {'code' : 'NGN', 'name' : 'Nigeria Naira'},
            {'code' : 'NIO', 'name' : 'Nicaragua Cordoba'},
            {'code' : 'NOK', 'name' : 'Norway Krone'},
            {'code' : 'NPR', 'name' : 'Nepal Rupee'},
            {'code' : 'NZD', 'name' : 'New Zealand Dollar'},
            {'code' : 'OMR', 'name' : 'Oman Rial'},
            {'code' : 'PAB', 'name' : 'Panama Balboa'},
            {'code' : 'PEN', 'name' : 'Peru Nuevo Sol'},
            {'code' : 'PGK', 'name' : 'Papua New Guinea Kina'},
            {'code' : 'PHP', 'name' : 'Philippines Peso'},
            {'code' : 'PKR', 'name' : 'Pakistan Rupee'},
            {'code' : 'PLN', 'name' : 'Poland Zloty'},
            {'code' : 'PYG', 'name' : 'Paraguay Guarani'},
            {'code' : 'QAR', 'name' : 'Qatar Riyal'},
            {'code' : 'RON', 'name' : 'Romania New Leu'},
            {'code' : 'RSD', 'name' : 'Serbia Dinar'},
            {'code' : 'RUB', 'name' : 'Russia Ruble'},
            {'code' : 'RWF', 'name' : 'Rwanda Franc'},
            {'code' : 'SAR', 'name' : 'Saudi Arabia Riyal'},
            {'code' : 'SBD', 'name' : 'Solomon Islands Dollar'},
            {'code' : 'SCR', 'name' : 'Seychelles Rupee'},
            {'code' : 'SDG', 'name' : 'Sudan Pound'},
            {'code' : 'SEK', 'name' : 'Sweden Krona'},
            {'code' : 'SGD', 'name' : 'Singapore Dollar'},
            {'code' : 'SHP', 'name' : 'Saint Helena Pound'},
            {'code' : 'SLL', 'name' : 'Sierra Leone Leone'},
            {'code' : 'SOS', 'name' : 'Somalia Shilling'},
            {'code' : 'SPL', 'name' : 'Seborga Luigino'},
            {'code' : 'SRD', 'name' : 'Suriname Dollar'},
            {'code' : 'STD', 'name' : 'São Tomé and Príncipe Dobra'},
            {'code' : 'SVC', 'name' : 'El Salvador Colon'},
            {'code' : 'SYP', 'name' : 'Syria Pound'},
            {'code' : 'SZL', 'name' : 'Swaziland Lilangeni'},
            {'code' : 'THB', 'name' : 'Thailand Baht'},
            {'code' : 'TJS', 'name' : 'Tajikistan Somoni'},
            {'code' : 'TMT', 'name' : 'Turkmenistan Manat'},
            {'code' : 'TND', 'name' : 'Tunisia Dinar'},
            {'code' : 'TOP', 'name' : 'Tonga Pa\'anga'},
            {'code' : 'TRY', 'name' : 'Turkey Lira'},
            {'code' : 'TTD', 'name' : 'Trinidad and Tobago Dollar'},
            {'code' : 'TVD', 'name' : 'Tuvalu Dollar'},
            {'code' : 'TWD', 'name' : 'Taiwan New Dollar'},
            {'code' : 'TZS', 'name' : 'Tanzania Shilling'},
            {'code' : 'UAH', 'name' : 'Ukraine Hryvnia'},
            {'code' : 'UGX', 'name' : 'Uganda Shilling'},
            {'code' : 'USD', 'name' : 'United States Dollar'},
            {'code' : 'UYU', 'name' : 'Uruguay Peso'},
            {'code' : 'UZS', 'name' : 'Uzbekistan Som'},
            {'code' : 'VEF', 'name' : 'Venezuela Bolivar'},
            {'code' : 'VND', 'name' : 'Viet Nam Dong'},
            {'code' : 'VUV', 'name' : 'Vanuatu Vatu'},
            {'code' : 'WST', 'name' : 'Samoa Tala'},
            {'code' : 'XAF', 'name' : 'Communauté Financière Africaine (BEAC) CFA Franc BEAC'},
            {'code' : 'XCD', 'name' : 'East Caribbean Dollar'},
            {'code' : 'XDR', 'name' : 'International Monetary Fund (IMF) Special Drawing Rights'},
            {'code' : 'XOF', 'name' : 'Communauté Financière Africaine (BCEAO) Franc'},
            {'code' : 'XPF', 'name' : 'Comptoirs Français du Pacifique (CFP) Franc'},
            {'code' : 'YER', 'name' : 'Yemen Rial'},
            {'code' : 'ZAR', 'name' : 'South Africa Rand'},
            {'code' : 'ZMW', 'name' : 'Zambia Kwacha'},
            {'code' : 'ZWD', 'name' : 'Zimbabwe Dollar'}
        ]
    };

    var o_hasOwnProperty = Object.prototype.hasOwnProperty;
    var o_keys = (Object.keys || function(obj) {
      var result = [];
      for (var key in obj) {
        if (o_hasOwnProperty.call(obj, key)) {
          result.push(key);
        }
      }

      return result;
    });

    function _copyObject(source, target) {
      var keys = o_keys(source);
      var key;

      for (var i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        target[key] = source[key] || target[key];
      }
    }

    function _copyArray(source, target) {
      for (var i = 0, l = source.length; i < l; i++) {
        target[i] = source[i];
      }
    }

    function copyObject(source, _target) {
        var isArray = Array.isArray(source);
        var target = _target || (isArray ? new Array(source.length) : {});

        if (isArray) {
          _copyArray(source, target);
        } else {
          _copyObject(source, target);
        }

        return target;
    }

    /** Get the data based on key**/
    Chance.prototype.get = function (name) {
        return copyObject(data[name]);
    };

    // Mac Address
    Chance.prototype.mac_address = function(options){
        // typically mac addresses are separated by ":"
        // however they can also be separated by "-"
        // the network variant uses a dot every fourth byte

        options = initOptions(options);
        if(!options.separator) {
            options.separator =  options.networkVersion ? "." : ":";
        }

        var mac_pool="ABCDEF1234567890",
            mac = "";
        if(!options.networkVersion) {
            mac = this.n(this.string, 6, { pool: mac_pool, length:2 }).join(options.separator);
        } else {
            mac = this.n(this.string, 3, { pool: mac_pool, length:4 }).join(options.separator);
        }

        return mac;
    };

    Chance.prototype.normal = function (options) {
        options = initOptions(options, {mean : 0, dev : 1});

        // The Marsaglia Polar method
        var s, u, v, norm,
            mean = options.mean,
            dev = options.dev;

        do {
            // U and V are from the uniform distribution on (-1, 1)
            u = this.random() * 2 - 1;
            v = this.random() * 2 - 1;

            s = u * u + v * v;
        } while (s >= 1);

        // Compute the standard normal variate
        norm = u * Math.sqrt(-2 * Math.log(s) / s);

        // Shape and scale
        return dev * norm + mean;
    };

    Chance.prototype.radio = function (options) {
        // Initial Letter (Typically Designated by Side of Mississippi River)
        options = initOptions(options, {side : "?"});
        var fl = "";
        switch (options.side.toLowerCase()) {
        case "east":
        case "e":
            fl = "W";
            break;
        case "west":
        case "w":
            fl = "K";
            break;
        default:
            fl = this.character({pool: "KW"});
            break;
        }

        return fl + this.character({alpha: true, casing: "upper"}) +
                this.character({alpha: true, casing: "upper"}) +
                this.character({alpha: true, casing: "upper"});
    };

    // Set the data as key and data or the data map
    Chance.prototype.set = function (name, values) {
        if (typeof name === "string") {
            data[name] = values;
        } else {
            data = copyObject(name, data);
        }
    };

    Chance.prototype.tv = function (options) {
        return this.radio(options);
    };

    // ID number for Brazil companies
    Chance.prototype.cnpj = function () {
        var n = this.n(this.natural, 8, { max: 9 });
        var d1 = 2+n[7]*6+n[6]*7+n[5]*8+n[4]*9+n[3]*2+n[2]*3+n[1]*4+n[0]*5;
        d1 = 11 - (d1 % 11);
        if (d1>=10){
            d1 = 0;
        }
        var d2 = d1*2+3+n[7]*7+n[6]*8+n[5]*9+n[4]*2+n[3]*3+n[2]*4+n[1]*5+n[0]*6;
        d2 = 11 - (d2 % 11);
        if (d2>=10){
            d2 = 0;
        }
        return ''+n[0]+n[1]+'.'+n[2]+n[3]+n[4]+'.'+n[5]+n[6]+n[7]+'/0001-'+d1+d2;
    };

    // -- End Miscellaneous --

    Chance.prototype.mersenne_twister = function (seed) {
        return new MersenneTwister(seed);
    };

    Chance.prototype.blueimp_md5 = function () {
        return new BlueImpMD5();
    };

    // Mersenne Twister from https://gist.github.com/banksean/300494
    var MersenneTwister = function (seed) {
        if (seed === undefined) {
            // kept random number same size as time used previously to ensure no unexpected results downstream
            seed = Math.floor(Math.random()*Math.pow(10,13));
        }
        /* Period parameters */
        this.N = 624;
        this.M = 397;
        this.MATRIX_A = 0x9908b0df;   /* constant vector a */
        this.UPPER_MASK = 0x80000000; /* most significant w-r bits */
        this.LOWER_MASK = 0x7fffffff; /* least significant r bits */

        this.mt = new Array(this.N); /* the array for the state vector */
        this.mti = this.N + 1; /* mti==N + 1 means mt[N] is not initialized */

        this.init_genrand(seed);
    };

    /* initializes mt[N] with a seed */
    MersenneTwister.prototype.init_genrand = function (s) {
        this.mt[0] = s >>> 0;
        for (this.mti = 1; this.mti < this.N; this.mti++) {
            s = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);
            this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253) + this.mti;
            /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
            /* In the previous versions, MSBs of the seed affect   */
            /* only MSBs of the array mt[].                        */
            /* 2002/01/09 modified by Makoto Matsumoto             */
            this.mt[this.mti] >>>= 0;
            /* for >32 bit machines */
        }
    };

    /* initialize by an array with array-length */
    /* init_key is the array for initializing keys */
    /* key_length is its length */
    /* slight change for C++, 2004/2/26 */
    MersenneTwister.prototype.init_by_array = function (init_key, key_length) {
        var i = 1, j = 0, k, s;
        this.init_genrand(19650218);
        k = (this.N > key_length ? this.N : key_length);
        for (; k; k--) {
            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);
            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525))) + init_key[j] + j; /* non linear */
            this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
            i++;
            j++;
            if (i >= this.N) { this.mt[0] = this.mt[this.N - 1]; i = 1; }
            if (j >= key_length) { j = 0; }
        }
        for (k = this.N - 1; k; k--) {
            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);
            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941)) - i; /* non linear */
            this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
            i++;
            if (i >= this.N) { this.mt[0] = this.mt[this.N - 1]; i = 1; }
        }

        this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
    };

    /* generates a random number on [0,0xffffffff]-interval */
    MersenneTwister.prototype.genrand_int32 = function () {
        var y;
        var mag01 = new Array(0x0, this.MATRIX_A);
        /* mag01[x] = x * MATRIX_A  for x=0,1 */

        if (this.mti >= this.N) { /* generate N words at one time */
            var kk;

            if (this.mti === this.N + 1) {   /* if init_genrand() has not been called, */
                this.init_genrand(5489); /* a default initial seed is used */
            }
            for (kk = 0; kk < this.N - this.M; kk++) {
                y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk + 1]&this.LOWER_MASK);
                this.mt[kk] = this.mt[kk + this.M] ^ (y >>> 1) ^ mag01[y & 0x1];
            }
            for (;kk < this.N - 1; kk++) {
                y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk + 1]&this.LOWER_MASK);
                this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];
            }
            y = (this.mt[this.N - 1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);
            this.mt[this.N - 1] = this.mt[this.M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];

            this.mti = 0;
        }

        y = this.mt[this.mti++];

        /* Tempering */
        y ^= (y >>> 11);
        y ^= (y << 7) & 0x9d2c5680;
        y ^= (y << 15) & 0xefc60000;
        y ^= (y >>> 18);

        return y >>> 0;
    };

    /* generates a random number on [0,0x7fffffff]-interval */
    MersenneTwister.prototype.genrand_int31 = function () {
        return (this.genrand_int32() >>> 1);
    };

    /* generates a random number on [0,1]-real-interval */
    MersenneTwister.prototype.genrand_real1 = function () {
        return this.genrand_int32() * (1.0 / 4294967295.0);
        /* divided by 2^32-1 */
    };

    /* generates a random number on [0,1)-real-interval */
    MersenneTwister.prototype.random = function () {
        return this.genrand_int32() * (1.0 / 4294967296.0);
        /* divided by 2^32 */
    };

    /* generates a random number on (0,1)-real-interval */
    MersenneTwister.prototype.genrand_real3 = function () {
        return (this.genrand_int32() + 0.5) * (1.0 / 4294967296.0);
        /* divided by 2^32 */
    };

    /* generates a random number on [0,1) with 53-bit resolution*/
    MersenneTwister.prototype.genrand_res53 = function () {
        var a = this.genrand_int32()>>>5, b = this.genrand_int32()>>>6;
        return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);
    };

    // BlueImp MD5 hashing algorithm from https://github.com/blueimp/JavaScript-MD5
    var BlueImpMD5 = function () {};

    BlueImpMD5.prototype.VERSION = '1.0.1';

    /*
    * Add integers, wrapping at 2^32. This uses 16-bit operations internally
    * to work around bugs in some JS interpreters.
    */
    BlueImpMD5.prototype.safe_add = function safe_add(x, y) {
        var lsw = (x & 0xFFFF) + (y & 0xFFFF),
            msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 0xFFFF);
    };

    /*
    * Bitwise rotate a 32-bit number to the left.
    */
    BlueImpMD5.prototype.bit_roll = function (num, cnt) {
        return (num << cnt) | (num >>> (32 - cnt));
    };

    /*
    * These functions implement the five basic operations the algorithm uses.
    */
    BlueImpMD5.prototype.md5_cmn = function (q, a, b, x, s, t) {
        return this.safe_add(this.bit_roll(this.safe_add(this.safe_add(a, q), this.safe_add(x, t)), s), b);
    };
    BlueImpMD5.prototype.md5_ff = function (a, b, c, d, x, s, t) {
        return this.md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
    };
    BlueImpMD5.prototype.md5_gg = function (a, b, c, d, x, s, t) {
        return this.md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
    };
    BlueImpMD5.prototype.md5_hh = function (a, b, c, d, x, s, t) {
        return this.md5_cmn(b ^ c ^ d, a, b, x, s, t);
    };
    BlueImpMD5.prototype.md5_ii = function (a, b, c, d, x, s, t) {
        return this.md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
    };

    /*
    * Calculate the MD5 of an array of little-endian words, and a bit length.
    */
    BlueImpMD5.prototype.binl_md5 = function (x, len) {
        /* append padding */
        x[len >> 5] |= 0x80 << (len % 32);
        x[(((len + 64) >>> 9) << 4) + 14] = len;

        var i, olda, oldb, oldc, oldd,
            a =  1732584193,
            b = -271733879,
            c = -1732584194,
            d =  271733878;

        for (i = 0; i < x.length; i += 16) {
            olda = a;
            oldb = b;
            oldc = c;
            oldd = d;

            a = this.md5_ff(a, b, c, d, x[i],       7, -680876936);
            d = this.md5_ff(d, a, b, c, x[i +  1], 12, -389564586);
            c = this.md5_ff(c, d, a, b, x[i +  2], 17,  606105819);
            b = this.md5_ff(b, c, d, a, x[i +  3], 22, -1044525330);
            a = this.md5_ff(a, b, c, d, x[i +  4],  7, -176418897);
            d = this.md5_ff(d, a, b, c, x[i +  5], 12,  1200080426);
            c = this.md5_ff(c, d, a, b, x[i +  6], 17, -1473231341);
            b = this.md5_ff(b, c, d, a, x[i +  7], 22, -45705983);
            a = this.md5_ff(a, b, c, d, x[i +  8],  7,  1770035416);
            d = this.md5_ff(d, a, b, c, x[i +  9], 12, -1958414417);
            c = this.md5_ff(c, d, a, b, x[i + 10], 17, -42063);
            b = this.md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
            a = this.md5_ff(a, b, c, d, x[i + 12],  7,  1804603682);
            d = this.md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
            c = this.md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
            b = this.md5_ff(b, c, d, a, x[i + 15], 22,  1236535329);

            a = this.md5_gg(a, b, c, d, x[i +  1],  5, -165796510);
            d = this.md5_gg(d, a, b, c, x[i +  6],  9, -1069501632);
            c = this.md5_gg(c, d, a, b, x[i + 11], 14,  643717713);
            b = this.md5_gg(b, c, d, a, x[i],      20, -373897302);
            a = this.md5_gg(a, b, c, d, x[i +  5],  5, -701558691);
            d = this.md5_gg(d, a, b, c, x[i + 10],  9,  38016083);
            c = this.md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
            b = this.md5_gg(b, c, d, a, x[i +  4], 20, -405537848);
            a = this.md5_gg(a, b, c, d, x[i +  9],  5,  568446438);
            d = this.md5_gg(d, a, b, c, x[i + 14],  9, -1019803690);
            c = this.md5_gg(c, d, a, b, x[i +  3], 14, -187363961);
            b = this.md5_gg(b, c, d, a, x[i +  8], 20,  1163531501);
            a = this.md5_gg(a, b, c, d, x[i + 13],  5, -1444681467);
            d = this.md5_gg(d, a, b, c, x[i +  2],  9, -51403784);
            c = this.md5_gg(c, d, a, b, x[i +  7], 14,  1735328473);
            b = this.md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);

            a = this.md5_hh(a, b, c, d, x[i +  5],  4, -378558);
            d = this.md5_hh(d, a, b, c, x[i +  8], 11, -2022574463);
            c = this.md5_hh(c, d, a, b, x[i + 11], 16,  1839030562);
            b = this.md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
            a = this.md5_hh(a, b, c, d, x[i +  1],  4, -1530992060);
            d = this.md5_hh(d, a, b, c, x[i +  4], 11,  1272893353);
            c = this.md5_hh(c, d, a, b, x[i +  7], 16, -155497632);
            b = this.md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
            a = this.md5_hh(a, b, c, d, x[i + 13],  4,  681279174);
            d = this.md5_hh(d, a, b, c, x[i],      11, -358537222);
            c = this.md5_hh(c, d, a, b, x[i +  3], 16, -722521979);
            b = this.md5_hh(b, c, d, a, x[i +  6], 23,  76029189);
            a = this.md5_hh(a, b, c, d, x[i +  9],  4, -640364487);
            d = this.md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
            c = this.md5_hh(c, d, a, b, x[i + 15], 16,  530742520);
            b = this.md5_hh(b, c, d, a, x[i +  2], 23, -995338651);

            a = this.md5_ii(a, b, c, d, x[i],       6, -198630844);
            d = this.md5_ii(d, a, b, c, x[i +  7], 10,  1126891415);
            c = this.md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
            b = this.md5_ii(b, c, d, a, x[i +  5], 21, -57434055);
            a = this.md5_ii(a, b, c, d, x[i + 12],  6,  1700485571);
            d = this.md5_ii(d, a, b, c, x[i +  3], 10, -1894986606);
            c = this.md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
            b = this.md5_ii(b, c, d, a, x[i +  1], 21, -2054922799);
            a = this.md5_ii(a, b, c, d, x[i +  8],  6,  1873313359);
            d = this.md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
            c = this.md5_ii(c, d, a, b, x[i +  6], 15, -1560198380);
            b = this.md5_ii(b, c, d, a, x[i + 13], 21,  1309151649);
            a = this.md5_ii(a, b, c, d, x[i +  4],  6, -145523070);
            d = this.md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
            c = this.md5_ii(c, d, a, b, x[i +  2], 15,  718787259);
            b = this.md5_ii(b, c, d, a, x[i +  9], 21, -343485551);

            a = this.safe_add(a, olda);
            b = this.safe_add(b, oldb);
            c = this.safe_add(c, oldc);
            d = this.safe_add(d, oldd);
        }
        return [a, b, c, d];
    };

    /*
    * Convert an array of little-endian words to a string
    */
    BlueImpMD5.prototype.binl2rstr = function (input) {
        var i,
            output = '';
        for (i = 0; i < input.length * 32; i += 8) {
            output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);
        }
        return output;
    };

    /*
    * Convert a raw string to an array of little-endian words
    * Characters >255 have their high-byte silently ignored.
    */
    BlueImpMD5.prototype.rstr2binl = function (input) {
        var i,
            output = [];
        output[(input.length >> 2) - 1] = undefined;
        for (i = 0; i < output.length; i += 1) {
            output[i] = 0;
        }
        for (i = 0; i < input.length * 8; i += 8) {
            output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);
        }
        return output;
    };

    /*
    * Calculate the MD5 of a raw string
    */
    BlueImpMD5.prototype.rstr_md5 = function (s) {
        return this.binl2rstr(this.binl_md5(this.rstr2binl(s), s.length * 8));
    };

    /*
    * Calculate the HMAC-MD5, of a key and some data (raw strings)
    */
    BlueImpMD5.prototype.rstr_hmac_md5 = function (key, data) {
        var i,
            bkey = this.rstr2binl(key),
            ipad = [],
            opad = [],
            hash;
        ipad[15] = opad[15] = undefined;
        if (bkey.length > 16) {
            bkey = this.binl_md5(bkey, key.length * 8);
        }
        for (i = 0; i < 16; i += 1) {
            ipad[i] = bkey[i] ^ 0x36363636;
            opad[i] = bkey[i] ^ 0x5C5C5C5C;
        }
        hash = this.binl_md5(ipad.concat(this.rstr2binl(data)), 512 + data.length * 8);
        return this.binl2rstr(this.binl_md5(opad.concat(hash), 512 + 128));
    };

    /*
    * Convert a raw string to a hex string
    */
    BlueImpMD5.prototype.rstr2hex = function (input) {
        var hex_tab = '0123456789abcdef',
            output = '',
            x,
            i;
        for (i = 0; i < input.length; i += 1) {
            x = input.charCodeAt(i);
            output += hex_tab.charAt((x >>> 4) & 0x0F) +
                hex_tab.charAt(x & 0x0F);
        }
        return output;
    };

    /*
    * Encode a string as utf-8
    */
    BlueImpMD5.prototype.str2rstr_utf8 = function (input) {
        return unescape(encodeURIComponent(input));
    };

    /*
    * Take string arguments and return either raw or hex encoded strings
    */
    BlueImpMD5.prototype.raw_md5 = function (s) {
        return this.rstr_md5(this.str2rstr_utf8(s));
    };
    BlueImpMD5.prototype.hex_md5 = function (s) {
        return this.rstr2hex(this.raw_md5(s));
    };
    BlueImpMD5.prototype.raw_hmac_md5 = function (k, d) {
        return this.rstr_hmac_md5(this.str2rstr_utf8(k), this.str2rstr_utf8(d));
    };
    BlueImpMD5.prototype.hex_hmac_md5 = function (k, d) {
        return this.rstr2hex(this.raw_hmac_md5(k, d));
    };

    BlueImpMD5.prototype.md5 = function (string, key, raw) {
        if (!key) {
            if (!raw) {
                return this.hex_md5(string);
            }

            return this.raw_md5(string);
        }

        if (!raw) {
            return this.hex_hmac_md5(key, string);
        }

        return this.raw_hmac_md5(key, string);
    };

    // CommonJS module
    if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
            exports = module.exports = Chance;
        }
        exports.Chance = Chance;
    }

    // Register as an anonymous AMD module
    if (typeof define === 'function' && define.amd) {
        define([], function () {
            return Chance;
        });
    }

    // if there is a importsScrips object define chance for worker
    if (typeof importScripts !== 'undefined') {
        chance = new Chance();
    }

    // If there is a window object, that at least has a document property,
    // instantiate and define chance on the window
    if (typeof window === "object" && typeof window.document === "object") {
        window.Chance = Chance;
        window.chance = new Chance();
    }
})();

}).call(this,require("buffer").Buffer)

},{"buffer":11}],38:[function(require,module,exports){
'use strict';

var $ = require('./util/uri-helpers');

$.findByRef = require('./util/find-reference');
$.resolveSchema = require('./util/resolve-schema');
$.normalizeSchema = require('./util/normalize-schema');

var instance = module.exports = function() {
  function $ref(fakeroot, schema, refs, ex) {
    if (typeof fakeroot === 'object') {
      ex = refs;
      refs = schema;
      schema = fakeroot;
      fakeroot = undefined;
    }

    if (!Array.isArray(refs)) {
      ex = !!refs;
      refs = [];
    }

    function push(ref) {
      if (typeof ref.id === 'string') {
        var id = $.resolveURL(fakeroot, ref.id).replace(/\/#?$/, '');

        if (id.indexOf('#') > -1) {
          var parts = id.split('#');

          if (parts[1].charAt() === '/') {
            id = parts[0];
          } else {
            id = parts[1] || parts[0];
          }
        }

        if (!$ref.refs[id]) {
          $ref.refs[id] = ref;
        }
      }
    }

    refs.concat([schema]).forEach(function(ref) {
      schema = $.normalizeSchema(fakeroot, ref, push);
      push(schema);
    });

    return $.resolveSchema(schema, $ref.refs, ex);
  }

  $ref.refs = {};
  $ref.util = $;

  return $ref;
};

instance.util = $;

},{"./util/find-reference":40,"./util/normalize-schema":41,"./util/resolve-schema":42,"./util/uri-helpers":43}],39:[function(require,module,exports){
'use strict';

var clone = module.exports = function(obj) {
  if (!obj || typeof obj !== 'object') {
    return obj;
  }

  var target = Array.isArray(obj) ? [] : {};

  function copy(key, value) {
    target[key] = clone(value);
  }

  if (Array.isArray(target)) {
    obj.forEach(function(value, key) {
      copy(key, value);
    });
  } else if (Object.prototype.toString.call(obj) === '[object Object]') {
    Object.keys(obj).forEach(function(key) {
      copy(key, obj[key]);
    });
  }

  return target;
};

},{}],40:[function(require,module,exports){
'use strict';

var $ = require('./uri-helpers');

function get(obj, path) {
  var hash = path.split('#')[1];

  var parts = hash.split('/').slice(1);

  while (parts.length) {
    var key = decodeURIComponent(parts.shift()).replace(/~1/g, '/').replace(/~0/g, '~');

    if (typeof obj[key] === 'undefined') {
      throw new Error('Reference not found: ' + path);
    }

    obj = obj[key];
  }

  return obj;
}

var find = module.exports = function(id, refs) {
  var target = refs[id] || refs[id.split('#')[1]] || refs[$.getDocumentURI(id)];

  if (target) {
    target = id.indexOf('#/') > -1 ? get(target, id) : target;
  } else {
    for (var key in refs) {
      if ($.resolveURL(refs[key].id, id) === refs[key].id) {
        target = refs[key];
        break;
      }
    }
  }

  if (!target) {
    throw new Error('Reference not found: ' + id);
  }

  while (target.$ref) {
    target = find(target.$ref, refs);
  }

  return target;
};

},{"./uri-helpers":43}],41:[function(require,module,exports){
'use strict';

var $ = require('./uri-helpers');

var cloneObj = require('./clone-obj');

var SCHEMA_URI = [
  'http://json-schema.org/schema#',
  'http://json-schema.org/draft-04/schema#'
];

function expand(obj, parent, callback) {
  if (obj) {
    var id = typeof obj.id === 'string' ? obj.id : '#';

    if (!$.isURL(id)) {
      id = $.resolveURL(parent === id ? null : parent, id);
    }

    if (typeof obj.$ref === 'string' && !$.isURL(obj.$ref)) {
      obj.$ref = $.resolveURL(id, obj.$ref);
    }

    if (typeof obj.id === 'string') {
      obj.id = parent = id;
    }
  }

  for (var key in obj) {
    var value = obj[key];

    if (typeof value === 'object' && !(key === 'enum' || key === 'required')) {
      expand(value, parent, callback);
    }
  }

  if (typeof callback === 'function') {
    callback(obj);
  }
}

module.exports = function(fakeroot, schema, push) {
  if (typeof fakeroot === 'object') {
    push = schema;
    schema = fakeroot;
    fakeroot = null;
  }

  var base = fakeroot || '',
      copy = cloneObj(schema);

  if (copy.$schema && SCHEMA_URI.indexOf(copy.$schema) === -1) {
    throw new Error('Unsupported schema version (v4 only)');
  }

  base = $.resolveURL(copy.$schema || SCHEMA_URI[0], base);

  expand(copy, $.resolveURL(copy.id, base), push);

  // TODO: required for json-pointer to itself?
  copy.id = copy.id || '#';

  return copy;
};

},{"./clone-obj":39,"./uri-helpers":43}],42:[function(require,module,exports){
'use strict';

var $ = require('./uri-helpers');

var find = require('./find-reference');

function clone(obj, refs, child, expand) {
  var copy = {};

  if (Array.isArray(obj)) {
    copy = [];
  }

  if ($.isURL(obj.$ref)) {
    var fixed = find(obj.$ref, refs);

    if (fixed && expand) {
      var id = typeof fixed.id === 'string' ? fixed.id : '#';

      obj = fixed;

      if (obj.$ref !== id) {
        return clone(fixed, refs, true, expand);
      }

      delete obj.$ref;
    }
  }

  for (var key in obj) {
    var value = obj[key];

    if (typeof value === 'object' && !(key === 'enum' || key === 'required')) {
      copy[key] = clone(value, refs, true, expand);
    } else {
      copy[key] = value;
    }
  }

  // TODO: seriously are required or not?
  if (child) {
    if (typeof copy.$schema === 'string') {
      delete copy.$schema;
    }

    if (typeof copy.id === 'string') {
      delete copy.id;
    }
  }

  return copy;
}

module.exports = function(obj, refs, expand) {
  return clone(obj, refs, false, expand);
};

},{"./find-reference":40,"./uri-helpers":43}],43:[function(require,module,exports){
'use strict';

// https://gist.github.com/pjt33/efb2f1134bab986113fd

function URLUtils(url, baseURL) {
  var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(?:\/\/(?:([^:@]*)(?::([^:@]*))?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
  if (!m) {
    throw new RangeError();
  }
  var href = m[0] || '';
  var protocol = m[1] || '';
  var username = m[2] || '';
  var password = m[3] || '';
  var host = m[4] || '';
  var hostname = m[5] || '';
  var port = m[6] || '';
  var pathname = m[7] || '';
  var search = m[8] || '';
  var hash = m[9] || '';
  if (baseURL !== undefined) {
    var base = new URLUtils(baseURL);
    var flag = protocol === '' && host === '' && username === '';
    if (flag && pathname === '' && search === '') {
      search = base.search;
    }
    if (flag && pathname.charAt(0) !== '/') {
      pathname = (pathname !== '' ? (base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + pathname) : base.pathname);
    }
    // dot segments removal
    var output = [];

    pathname.replace(/\/?[^\/]+/g, function(p) {
      if (p === '/..') {
        output.pop();
      } else {
        output.push(p);
      }
    });

    pathname = output.join('') || '/';

    if (flag) {
      port = base.port;
      hostname = base.hostname;
      host = base.host;
      password = base.password;
      username = base.username;
    }
    if (protocol === '') {
      protocol = base.protocol;
    }
    href = protocol + (host !== '' ? '//' : '') + (username !== '' ? username + (password !== '' ? ':' + password : '') + '@' : '') + host + pathname + search + hash;
  }
  this.href = href;
  this.origin = protocol + (host !== '' ? '//' + host : '');
  this.protocol = protocol;
  this.username = username;
  this.password = password;
  this.host = host;
  this.hostname = hostname;
  this.port = port;
  this.pathname = pathname;
  this.search = search;
  this.hash = hash;
}

function isURL(path) {
  if (typeof path === 'string' && /^\w+:\/\//.test(path)) {
    return true;
  }
}

function parseURI(href, base) {
  return new URLUtils(href, base);
}

function resolveURL(base, href) {
  base = base || 'http://json-schema.org/schema#';

  href = parseURI(href, base);
  base = parseURI(base);

  if (base.hash && !href.hash) {
    return href.href + base.hash;
  }

  return href.href;
}

function getDocumentURI(uri) {
  return typeof uri === 'string' && uri.split('#')[0];
}

module.exports = {
  isURL: isURL,
  parseURI: parseURI,
  resolveURL: resolveURL,
  getDocumentURI: getDocumentURI
};

},{}],44:[function(require,module,exports){
/*

   this index.js file is used for including the faker library as a CommonJS module, instead of a bundle

   you can include the faker library into your existing node.js application by requiring the entire /faker directory

    var faker = require(./faker);
    var randomName = faker.name.findName();

   you can also simply include the "faker.js" file which is the auto-generated bundled version of the faker library

    var faker = require(./customAppPath/faker);
    var randomName = faker.name.findName();


  if you plan on modifying the faker library you should be performing your changes in the /lib/ directory

*/

exports.name = require('./lib/name');
exports.address = require('./lib/address');
exports.phone = require('./lib/phone_number');
exports.internet = require('./lib/internet');
exports.company = require('./lib/company');
exports.image = require('./lib/image');
exports.lorem = require('./lib/lorem');
exports.helpers =  require('./lib/helpers');
exports.date = require('./lib/date');
exports.random = require('./lib/random');
exports.finance = require('./lib/finance');
exports.hacker = require('./lib/hacker');

var locales = exports.locales = require('./lib/locales');

// default locale
exports.locale = "en";

// in case a locale is missing a definition, fallback to this locale
exports.localeFallback = "en";

exports.definitions = {};

var _definitions = {
  "name": ["first_name", "last_name", "prefix", "suffix"],
  "address": ["city_prefix", "city_suffix", "street_suffix", "county", "country", "state", "state_abbr"],
  "company": ["adjective", "noun", "descriptor", "bs_adjective", "bs_noun", "bs_verb"],
  "lorem": ["words"],
  "hacker": ["abbreviation", "adjective", "noun", "verb", "ingverb"],
  "phone_number": ["formats"],
  "finance": ["account_type", "transaction_type", "currency"],
  "internet": ["avatar_uri", "domain_suffix", "free_email", "password"]
};

// Create a Getter for all definitions.foo.bar propetries
Object.keys(_definitions).forEach(function(d){
  if (typeof exports.definitions[d] === "undefined") {
    exports.definitions[d] = {};
  }
  _definitions[d].forEach(function(p){
    Object.defineProperty(exports.definitions[d], p, {
      get: function () {
        if (typeof locales[exports.locale][d] === "undefined" || typeof locales[exports.locale][d][p] === "undefined") {
          // certain localization sets contain less data then others.
          // in the case of a missing defintion, use the default localeFallback to substitute the missing set data
          return locales[exports.localeFallback][d][p];
        } else {
          // return localized data
          return locales[exports.locale][d][p];
        }
      }
    });
  });
});
},{"./lib/address":45,"./lib/company":46,"./lib/date":47,"./lib/finance":48,"./lib/hacker":49,"./lib/helpers":50,"./lib/image":51,"./lib/internet":52,"./lib/locales":53,"./lib/lorem":81,"./lib/name":82,"./lib/phone_number":83,"./lib/random":84}],45:[function(require,module,exports){
var Helpers = require('./helpers');
var faker = require('../index');

var address = {
    zipCode: function () {
        return Helpers.replaceSymbolWithNumber(faker.random.array_element(["#####", '#####-####']));
    },

    city: function () {
        var result;
        switch (faker.random.number(3)) {
        case 0:
            result = faker.address.cityPrefix() + " " + faker.name.firstName() + faker.address.citySuffix();
            break;
        case 1:
            result = faker.address.cityPrefix() + " " + faker.name.firstName();
            break;
        case 2:
            result = faker.name.firstName() + faker.address.citySuffix();
            break;
        case 3:
            result = faker.name.lastName() + faker.address.citySuffix();
            break;
        }
        return result;
    },

    cityPrefix: function () {
      return faker.random.array_element(faker.definitions.address.city_prefix);
    },

    citySuffix: function () {
      return faker.random.array_element(faker.definitions.address.city_suffix);
    },

    streetName: function () {
        var result;
        switch (faker.random.number(1)) {
        case 0:
            result = faker.name.lastName() + " " + faker.address.streetSuffix();
            break;
        case 1:
            result = faker.name.firstName() + " " + faker.address.streetSuffix();
            break;
        }
        return result;
    },

    //
    // TODO: change all these methods that accept a boolean to instead accept an options hash.
    //
    streetAddress: function (useFullAddress) {
        if (useFullAddress === undefined) { useFullAddress = false; }
        var address = "";
        switch (faker.random.number(2)) {
        case 0:
            address = Helpers.replaceSymbolWithNumber("#####") + " " + faker.address.streetName();
            break;
        case 1:
            address = Helpers.replaceSymbolWithNumber("####") +  " " + faker.address.streetName();
            break;
        case 2:
            address = Helpers.replaceSymbolWithNumber("###") + " " + faker.address.streetName();
            break;
        }
        return useFullAddress ? (address + " " + faker.address.secondaryAddress()) : address;
    },

    streetSuffix: function () {
        return faker.random.array_element(faker.definitions.address.street_suffix);
    },

    secondaryAddress: function () {
        return Helpers.replaceSymbolWithNumber(faker.random.array_element(
            [
                'Apt. ###',
                'Suite ###'
            ]
        ));
    },

    county: function () {
      return faker.random.array_element(faker.definitions.address.county);
    },

    country: function () {
      return faker.random.array_element(faker.definitions.address.country);
    },

    state: function (useAbbr) {
        return faker.random.array_element(faker.definitions.address.state);
    },

    stateAbbr: function () {
        return faker.random.array_element(faker.definitions.address.state_abbr);
    },

    latitude: function () {
        return (faker.random.number(180 * 10000) / 10000.0 - 90.0).toFixed(4);
    },

    longitude: function () {
        return (faker.random.number(360 * 10000) / 10000.0 - 180.0).toFixed(4);
    }
};

module.exports = address;

},{"../index":44,"./helpers":50}],46:[function(require,module,exports){
var faker = require('../index');

var company = {

    suffixes: function () {
        return ["Inc", "and Sons", "LLC", "Group", "and Daughters"];
    },

    companyName: function (format) {
        switch ((format ? format : faker.random.number(2))) {
        case 0:
            return faker.name.lastName() + " " + faker.company.companySuffix();
        case 1:
            return faker.name.lastName() + "-" + faker.name.lastName();
        case 2:
            return faker.name.lastName() + ", " + faker.name.lastName() + " and " + faker.name.lastName();
        }
    },

    companySuffix: function () {
        return faker.random.array_element(faker.company.suffixes());
    },

    catchPhrase: function () {
        return faker.company.catchPhraseAdjective() + " " +
            faker.company.catchPhraseDescriptor() + " " +
            faker.company.catchPhraseNoun();
    },

    bs: function () {
        return faker.company.bsAdjective() + " " +
            faker.company.bsBuzz() + " " +
            faker.company.bsNoun();
    },

    catchPhraseAdjective: function () {
        return faker.random.array_element(faker.definitions.company.adjective);
    },

    catchPhraseDescriptor: function () {
        return faker.random.array_element(faker.definitions.company.descriptor);
    },

    catchPhraseNoun: function () {
        return faker.random.array_element(faker.definitions.company.noun);
    },

    bsAdjective: function () {
        return faker.random.array_element(faker.definitions.company.bs_adjective);
    },

    bsBuzz: function () {
        return faker.random.array_element(faker.definitions.company.bs_verb);
    },

    bsNoun: function () {
        return faker.random.array_element(faker.definitions.company.bs_noun);
    }

};

module.exports = company;

},{"../index":44}],47:[function(require,module,exports){
var faker = require("../index");

var date = {

    past: function (years, refDate) {
        var date = (refDate) ? new Date(Date.parse(refDate)) : new Date();
        var range = {
          min: 1000,
          max: (years || 1) * 365 * 24 * 3600 * 1000
        };

        var past = date.getTime();
        past -= faker.random.number(range); // some time from now to N years ago, in milliseconds
        date.setTime(past);

        return date;
    },

    future: function (years, refDate) {
        var date = (refDate) ? new Date(Date.parse(refDate)) : new Date();
        var range = {
          min: 1000,
          max: (years || 1) * 365 * 24 * 3600 * 1000
        };

        var future = date.getTime();
        future += faker.random.number(range); // some time from now to N years later, in milliseconds
        date.setTime(future);

        return date;
    },

    between: function (from, to) {
        var fromMilli = Date.parse(from);
        var dateOffset = faker.random.number(Date.parse(to) - fromMilli);

        var newDate = new Date(fromMilli + dateOffset);

        return newDate;
    },

    recent: function (days) {
        var date = new Date();
        var range = {
          min: 1000,
          max: (days || 1) * 24 * 3600 * 1000
        };

        var future = date.getTime();
        future -= faker.random.number(range); // some time from now to N days ago, in milliseconds
        date.setTime(future);

        return date;
    }
};
module.exports = date;

},{"../index":44}],48:[function(require,module,exports){
var Helpers = require('./helpers'),
    faker = require('../index');

var finance = {

    account: function (length) {

        length = length || 8;

        var template = '';

        for (var i = 0; i < length; i++) {
            template = template + '#';
        }
        length = null;
        return Helpers.replaceSymbolWithNumber(template);
    },

    accountName: function () {

        return [Helpers.randomize(faker.definitions.finance.account_type), 'Account'].join(' ');
    },

    mask: function (length, parens, elipsis) {


        //set defaults
        length = (length == 0 || !length || typeof length == 'undefined') ? 4 : length;
        parens = (parens === null) ? true : parens;
        elipsis = (elipsis === null) ? true : elipsis;

        //create a template for length
        var template = '';

        for (var i = 0; i < length; i++) {
            template = template + '#';
        }

        //prefix with elipsis
        template = (elipsis) ? ['...', template].join('') : template;

        template = (parens) ? ['(', template, ')'].join('') : template;

        //generate random numbers
        template = Helpers.replaceSymbolWithNumber(template);

        return template;

    },

    //min and max take in minimum and maximum amounts, dec is the decimal place you want rounded to, symbol is $, €, £, etc
    //NOTE: this returns a string representation of the value, if you want a number use parseFloat and no symbol

    amount: function (min, max, dec, symbol) {

        min = min || 0;
        max = max || 1000;
        dec = dec || 2;
        symbol = symbol || '';

        return symbol + (Math.round((Math.random() * (max - min) + min) * Math.pow(10, dec)) / Math.pow(10, dec)).toFixed(dec);

    },

    transactionType: function () {
        return Helpers.randomize(faker.definitions.finance.transaction_type);
    },

    currencyCode: function () {
        return faker.random.object_element(faker.definitions.finance.currency)['code'];
    },

    currencyName: function () {
        return faker.random.object_element(faker.definitions.finance.currency, 'key');
    },

    currencySymbol: function () {
        var symbol;

        while (!symbol) {
            symbol = faker.random.object_element(faker.definitions.finance.currency)['symbol'];
        }
        return symbol;
    }
};

module.exports = finance;
},{"../index":44,"./helpers":50}],49:[function(require,module,exports){
var faker = require('../index');

var hacker = {

  abbreviation : function () {
    return faker.random.array_element(faker.definitions.hacker.abbreviation);
  },

  adjective : function () {
    return faker.random.array_element(faker.definitions.hacker.adjective);
  },

  noun : function () {
    return faker.random.array_element(faker.definitions.hacker.noun);
  },

  verb : function () {
    return faker.random.array_element(faker.definitions.hacker.verb);
  },

  ingverb : function () {
    return faker.random.array_element(faker.definitions.hacker.ingverb);
  },

  phrase : function () {

    var data = {
      abbreviation: hacker.abbreviation(),
      adjective: hacker.adjective(),
      ingverb: hacker.ingverb(),
      noun: hacker.noun(),
      verb: hacker.verb()
    };

    var phrase = faker.random.array_element([ "If we {{verb}} the {{noun}}, we can get to the {{abbreviation}} {{noun}} through the {{adjective}} {{abbreviation}} {{noun}}!",
      "We need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!",
      "Try to {{verb}} the {{abbreviation}} {{noun}}, maybe it will {{verb}} the {{adjective}} {{noun}}!",
      "You can't {{verb}} the {{noun}} without {{ingverb}} the {{adjective}} {{abbreviation}} {{noun}}!",
      "Use the {{adjective}} {{abbreviation}} {{noun}}, then you can {{verb}} the {{adjective}} {{noun}}!",
      "The {{abbreviation}} {{noun}} is down, {{verb}} the {{adjective}} {{noun}} so we can {{verb}} the {{abbreviation}} {{noun}}!",
      "{{ingverb}} the {{noun}} won't do anything, we need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!",
      "I'll {{verb}} the {{adjective}} {{abbreviation}} {{noun}}, that should {{noun}} the {{abbreviation}} {{noun}}!"
   ]);

   return faker.helpers.mustache(phrase, data);

  },


};

module.exports = hacker;

},{"../index":44}],50:[function(require,module,exports){
var faker = require('../index');

// backword-compatibility
exports.randomNumber = function (range) {
    return faker.random.number(range);
};

// backword-compatibility
exports.randomize = function (array) {
    array = array || ["a", "b", "c"];
    return faker.random.array_element(array);
};

// slugifies string
exports.slugify = function (string) {
    string = string || "";
    return string.replace(/ /g, '-').replace(/[^\w\.\-]+/g, '');
};

// parses string for a symbol and replace it with a random number from 1-10
exports.replaceSymbolWithNumber = function (string, symbol) {
    string = string || "";
    // default symbol is '#'
    if (symbol === undefined) {
        symbol = '#';
    }

    var str = '';
    for (var i = 0; i < string.length; i++) {
        if (string.charAt(i) == symbol) {
            str += faker.random.number(9);
        } else {
            str += string.charAt(i);
        }
    }
    return str;
};

// takes an array and returns it randomized
exports.shuffle = function (o) {
    o = o || ["a", "b", "c"];
    for (var j, x, i = o.length-1; i; j = faker.random.number(i), x = o[--i], o[i] = o[j], o[j] = x);
    return o;
};

exports.mustache = function (str, data) {
  for(var p in data) {
    var re = new RegExp('{{' + p + '}}', 'g')
    str = str.replace(re, data[p]);
  }
  return str;
};

exports.createCard = function () {
    return {
        "name": faker.name.findName(),
        "username": faker.internet.userName(),
        "email": faker.internet.email(),
        "address": {
            "streetA": faker.address.streetName(),
            "streetB": faker.address.streetAddress(),
            "streetC": faker.address.streetAddress(true),
            "streetD": faker.address.secondaryAddress(),
            "city": faker.address.city(),
            "state": faker.address.state(),
            "country": faker.address.country(),
            "zipcode": faker.address.zipCode(),
            "geo": {
                "lat": faker.address.latitude(),
                "lng": faker.address.longitude()
            }
        },
        "phone": faker.phone.phoneNumber(),
        "website": faker.internet.domainName(),
        "company": {
            "name": faker.company.companyName(),
            "catchPhrase": faker.company.catchPhrase(),
            "bs": faker.company.bs()
        },
        "posts": [
            {
                "words": faker.lorem.words(),
                "sentence": faker.lorem.sentence(),
                "sentences": faker.lorem.sentences(),
                "paragraph": faker.lorem.paragraph()
            },
            {
                "words": faker.lorem.words(),
                "sentence": faker.lorem.sentence(),
                "sentences": faker.lorem.sentences(),
                "paragraph": faker.lorem.paragraph()
            },
            {
                "words": faker.lorem.words(),
                "sentence": faker.lorem.sentence(),
                "sentences": faker.lorem.sentences(),
                "paragraph": faker.lorem.paragraph()
            }
        ],
        "accountHistory": [faker.helpers.createTransaction(), faker.helpers.createTransaction(), faker.helpers.createTransaction()]
    };
};

exports.contextualCard = function () {
  var name = faker.name.firstName(),
      userName = faker.internet.userName(name);
  return {
      "name": name,
      "username": userName,
      "avatar": faker.internet.avatar(),
      "email": faker.internet.email(userName),
      "dob": faker.date.past(50, new Date("Sat Sep 20 1992 21:35:02 GMT+0200 (CEST)")),
      "phone": faker.phone.phoneNumber(),
      "address": {
          "street": faker.address.streetName(true),
          "suite": faker.address.secondaryAddress(),
          "city": faker.address.city(),
          "zipcode": faker.address.zipCode(),
          "geo": {
              "lat": faker.address.latitude(),
              "lng": faker.address.longitude()
          }
      },
      "website": faker.internet.domainName(),
      "company": {
          "name": faker.company.companyName(),
          "catchPhrase": faker.company.catchPhrase(),
          "bs": faker.company.bs()
      }
  };
};


exports.userCard = function () {
    return {
        "name": faker.name.findName(),
        "username": faker.internet.userName(),
        "email": faker.internet.email(),
        "address": {
            "street": faker.address.streetName(true),
            "suite": faker.address.secondaryAddress(),
            "city": faker.address.city(),
            "zipcode": faker.address.zipCode(),
            "geo": {
                "lat": faker.address.latitude(),
                "lng": faker.address.longitude()
            }
        },
        "phone": faker.phone.phoneNumber(),
        "website": faker.internet.domainName(),
        "company": {
            "name": faker.company.companyName(),
            "catchPhrase": faker.company.catchPhrase(),
            "bs": faker.company.bs()
        }
    };
};

exports.createTransaction = function(){
  return {
    "amount" : faker.finance.amount(),
    "date" : new Date(2012, 1, 2),  //TODO: add a ranged date method
    "business": faker.company.companyName(),
    "name": [faker.finance.accountName(), faker.finance.mask()].join(' '),
    "type" : exports.randomize(faker.definitions.finance.transaction_type),
    "account" : faker.finance.account()
  };
};

/*
String.prototype.capitalize = function () { //v1.0
    return this.replace(/\w+/g, function (a) {
        return a.charAt(0).toUpperCase() + a.substr(1).toLowerCase();
    });
};
*/


},{"../index":44}],51:[function(require,module,exports){
var faker = require('../index');

var image = {
  image: function () {
    var categories = ["abstract", "animals", "business", "cats", "city", "food", "nightlife", "fashion", "people", "nature", "sports", "technics", "transport"];
    return image[faker.random.array_element(categories)]();
  },
  avatar: function () {
    return faker.internet.avatar();
  },
  imageUrl: function (width, height, category) {
      var width = width || 640;
      var height = height || 480;

      var url ='http://lorempixel.com/' + width + '/' + height;
      if (typeof category !== 'undefined') {
        url += '/' + category;
      }
      return url;
  },
  abstract: function (width, height) {
    return faker.image.imageUrl(width, height, 'abstract');
  },
  animals: function (width, height) {
    return faker.image.imageUrl(width, height, 'animals');
  },
  business: function (width, height) {
    return faker.image.imageUrl(width, height, 'business');
  },
  cats: function (width, height) {
    return faker.image.imageUrl(width, height, 'cats');
  },
  city: function (width, height) {
    return faker.image.imageUrl(width, height, 'city');
  },
  food: function (width, height) {
    return faker.image.imageUrl(width, height, 'food');
  },
  nightlife: function (width, height) {
    return faker.image.imageUrl(width, height, 'nightlife');
  },
  fashion: function (width, height) {
    return faker.image.imageUrl(width, height, 'fashion');
  },
  people: function (width, height) {
    return faker.image.imageUrl(width, height, 'people');
  },
  nature: function (width, height) {
    return faker.image.imageUrl(width, height, 'nature');
  },
  sports: function (width, height) {
    return faker.image.imageUrl(width, height, 'sports');
  },
  technics: function (width, height) {
    return faker.image.imageUrl(width, height, 'technics');
  },
  transport: function (width, height) {
    return faker.image.imageUrl(width, height, 'transport');
  }
};

module.exports = image;

},{"../index":44}],52:[function(require,module,exports){
var faker = require('../index'),
    password_generator = require('../vendor/password-generator.js'),
    random_ua = require('../vendor/user-agent');

var internet = {

    avatar: function () {
        return faker.random.array_element(faker.definitions.internet.avatar_uri);
    },

    email: function (firstName, lastName, provider) {
        provider = provider || faker.random.array_element(faker.definitions.internet.free_email);
        return  faker.helpers.slugify(faker.internet.userName(firstName, lastName)) + "@" + provider;
    },

    userName: function (firstName, lastName) {
        var result;
        firstName = firstName || faker.name.firstName();
        lastName = lastName || faker.name.lastName();
        switch (faker.random.number(2)) {
        case 0:
            result = firstName + faker.random.number(99);
            break;
        case 1:
            result = firstName + faker.random.array_element([".", "_"]) + lastName;
            break;
        case 2:
            result = firstName + faker.random.array_element([".", "_"]) + lastName + faker.random.number(99);
            break;
        }
        result = result.replace(/'/g, "");
        result = result.replace(/ /g, "");
        return result;
    },

    domainName: function () {
        return faker.internet.domainWord() + "." + faker.internet.domainSuffix();
    },

    domainSuffix: function () {
        return faker.random.array_element(faker.definitions.internet.domain_suffix);
    },

    domainWord:  function () {
        return faker.name.firstName().replace(/([^A-Z0-9._%+-])/ig, '').toLowerCase();
    },

    ip: function () {
        var randNum = function () {
            return (faker.random.number(255)).toFixed(0);
        };

        var result = [];
        for (var i = 0; i < 4; i++) {
            result[i] = randNum();
        }

        return result.join(".");
    },

    userAgent: function () {
      return random_ua.generate();
    },

    color: function (baseRed255, baseGreen255, baseBlue255) {
        baseRed255 = baseRed255 || 0;
        baseGreen255 = baseGreen255 || 0;
        baseBlue255 = baseBlue255 || 0;
        // based on awesome response : http://stackoverflow.com/questions/43044/algorithm-to-randomly-generate-an-aesthetically-pleasing-color-palette
        var red = Math.floor((faker.random.number(256) + baseRed255) / 2);
        var green = Math.floor((faker.random.number(256) + baseGreen255) / 2);
        var blue = Math.floor((faker.random.number(256) + baseBlue255) / 2);
        var redStr = red.toString(16);
        var greenStr = green.toString(16);
        var blueStr = blue.toString(16);
        return '#' +
          (redStr.length === 1 ? '0' : '') + redStr +
          (greenStr.length === 1 ? '0' : '') + greenStr +
          (blueStr.length === 1 ? '0': '') + blueStr;

    },

    password: function (len, memorable, pattern, prefix) {
      len = len || 15;
      if (typeof memorable === "undefined") {
        memorable = false;
      }
      return password_generator(len, memorable, pattern, prefix);
    }
};

module.exports = internet;

},{"../index":44,"../vendor/password-generator.js":86,"../vendor/user-agent":87}],53:[function(require,module,exports){
var faker = require('../index');
exports['de'] = require('./locales/de.js');
exports['de_AT'] = require('./locales/de_AT.js');
exports['de_CH'] = require('./locales/de_CH.js');
exports['en'] = require('./locales/en.js');
exports['en_AU'] = require('./locales/en_AU.js');
exports['en_BORK'] = require('./locales/en_BORK.js');
exports['en_CA'] = require('./locales/en_CA.js');
exports['en_GB'] = require('./locales/en_GB.js');
exports['en_IND'] = require('./locales/en_IND.js');
exports['en_US'] = require('./locales/en_US.js');
exports['en_au_ocker'] = require('./locales/en_au_ocker.js');
exports['es'] = require('./locales/es.js');
exports['fa'] = require('./locales/fa.js');
exports['fr'] = require('./locales/fr.js');
exports['it'] = require('./locales/it.js');
exports['ja'] = require('./locales/ja.js');
exports['ko'] = require('./locales/ko.js');
exports['nb_NO'] = require('./locales/nb_NO.js');
exports['nep'] = require('./locales/nep.js');
exports['nl'] = require('./locales/nl.js');
exports['pl'] = require('./locales/pl.js');
exports['pt_BR'] = require('./locales/pt_BR.js');
exports['ru'] = require('./locales/ru.js');
exports['sk'] = require('./locales/sk.js');
exports['sv'] = require('./locales/sv.js');
exports['vi'] = require('./locales/vi.js');
exports['zh_CN'] = require('./locales/zh_CN.js');
},{"../index":44,"./locales/de.js":54,"./locales/de_AT.js":55,"./locales/de_CH.js":56,"./locales/en.js":57,"./locales/en_AU.js":58,"./locales/en_BORK.js":59,"./locales/en_CA.js":60,"./locales/en_GB.js":61,"./locales/en_IND.js":62,"./locales/en_US.js":63,"./locales/en_au_ocker.js":64,"./locales/es.js":65,"./locales/fa.js":66,"./locales/fr.js":67,"./locales/it.js":68,"./locales/ja.js":69,"./locales/ko.js":70,"./locales/nb_NO.js":71,"./locales/nep.js":72,"./locales/nl.js":73,"./locales/pl.js":74,"./locales/pt_BR.js":75,"./locales/ru.js":76,"./locales/sk.js":77,"./locales/sv.js":78,"./locales/vi.js":79,"./locales/zh_CN.js":80}],54:[function(require,module,exports){
var de = {};
module["exports"] = de;
de.title = "German";
de.address = {
  "city_prefix": [
    "Nord",
    "Ost",
    "West",
    "Süd",
    "Neu",
    "Alt",
    "Bad"
  ],
  "city_suffix": [
    "stadt",
    "dorf",
    "land",
    "scheid",
    "burg"
  ],
  "country": [
    "Ägypten",
    "Äquatorialguinea",
    "Äthiopien",
    "Österreich",
    "Afghanistan",
    "Albanien",
    "Algerien",
    "Amerikanisch-Samoa",
    "Amerikanische Jungferninseln",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antarktis",
    "Antigua und Barbuda",
    "Argentinien",
    "Armenien",
    "Aruba",
    "Aserbaidschan",
    "Australien",
    "Bahamas",
    "Bahrain",
    "Bangladesch",
    "Barbados",
    "Belarus",
    "Belgien",
    "Belize",
    "Benin",
    "die Bermudas",
    "Bhutan",
    "Bolivien",
    "Bosnien und Herzegowina",
    "Botsuana",
    "Bouvetinsel",
    "Brasilien",
    "Britische Jungferninseln",
    "Britisches Territorium im Indischen Ozean",
    "Brunei Darussalam",
    "Bulgarien",
    "Burkina Faso",
    "Burundi",
    "Chile",
    "China",
    "Cookinseln",
    "Costa Rica",
    "Dänemark",
    "Demokratische Republik Kongo",
    "Demokratische Volksrepublik Korea",
    "Deutschland",
    "Dominica",
    "Dominikanische Republik",
    "Dschibuti",
    "Ecuador",
    "El Salvador",
    "Eritrea",
    "Estland",
    "Färöer",
    "Falklandinseln",
    "Fidschi",
    "Finnland",
    "Frankreich",
    "Französisch-Guayana",
    "Französisch-Polynesien",
    "Französische Gebiete im südlichen Indischen Ozean",
    "Gabun",
    "Gambia",
    "Georgien",
    "Ghana",
    "Gibraltar",
    "Grönland",
    "Grenada",
    "Griechenland",
    "Guadeloupe",
    "Guam",
    "Guatemala",
    "Guinea",
    "Guinea-Bissau",
    "Guyana",
    "Haiti",
    "Heard und McDonaldinseln",
    "Honduras",
    "Hongkong",
    "Indien",
    "Indonesien",
    "Irak",
    "Iran",
    "Irland",
    "Island",
    "Israel",
    "Italien",
    "Jamaika",
    "Japan",
    "Jemen",
    "Jordanien",
    "Jugoslawien",
    "Kaimaninseln",
    "Kambodscha",
    "Kamerun",
    "Kanada",
    "Kap Verde",
    "Kasachstan",
    "Katar",
    "Kenia",
    "Kirgisistan",
    "Kiribati",
    "Kleinere amerikanische Überseeinseln",
    "Kokosinseln",
    "Kolumbien",
    "Komoren",
    "Kongo",
    "Kroatien",
    "Kuba",
    "Kuwait",
    "Laos",
    "Lesotho",
    "Lettland",
    "Libanon",
    "Liberia",
    "Libyen",
    "Liechtenstein",
    "Litauen",
    "Luxemburg",
    "Macau",
    "Madagaskar",
    "Malawi",
    "Malaysia",
    "Malediven",
    "Mali",
    "Malta",
    "ehemalige jugoslawische Republik Mazedonien",
    "Marokko",
    "Marshallinseln",
    "Martinique",
    "Mauretanien",
    "Mauritius",
    "Mayotte",
    "Mexiko",
    "Mikronesien",
    "Monaco",
    "Mongolei",
    "Montserrat",
    "Mosambik",
    "Myanmar",
    "Nördliche Marianen",
    "Namibia",
    "Nauru",
    "Nepal",
    "Neukaledonien",
    "Neuseeland",
    "Nicaragua",
    "Niederländische Antillen",
    "Niederlande",
    "Niger",
    "Nigeria",
    "Niue",
    "Norfolkinsel",
    "Norwegen",
    "Oman",
    "Osttimor",
    "Pakistan",
    "Palau",
    "Panama",
    "Papua-Neuguinea",
    "Paraguay",
    "Peru",
    "Philippinen",
    "Pitcairninseln",
    "Polen",
    "Portugal",
    "Puerto Rico",
    "Réunion",
    "Republik Korea",
    "Republik Moldau",
    "Ruanda",
    "Rumänien",
    "Russische Föderation",
    "São Tomé und Príncipe",
    "Südafrika",
    "Südgeorgien und Südliche Sandwichinseln",
    "Salomonen",
    "Sambia",
    "Samoa",
    "San Marino",
    "Saudi-Arabien",
    "Schweden",
    "Schweiz",
    "Senegal",
    "Seychellen",
    "Sierra Leone",
    "Simbabwe",
    "Singapur",
    "Slowakei",
    "Slowenien",
    "Somalien",
    "Spanien",
    "Sri Lanka",
    "St. Helena",
    "St. Kitts und Nevis",
    "St. Lucia",
    "St. Pierre und Miquelon",
    "St. Vincent und die Grenadinen",
    "Sudan",
    "Surinam",
    "Svalbard und Jan Mayen",
    "Swasiland",
    "Syrien",
    "Türkei",
    "Tadschikistan",
    "Taiwan",
    "Tansania",
    "Thailand",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidad und Tobago",
    "Tschad",
    "Tschechische Republik",
    "Tunesien",
    "Turkmenistan",
    "Turks- und Caicosinseln",
    "Tuvalu",
    "Uganda",
    "Ukraine",
    "Ungarn",
    "Uruguay",
    "Usbekistan",
    "Vanuatu",
    "Vatikanstadt",
    "Venezuela",
    "Vereinigte Arabische Emirate",
    "Vereinigte Staaten",
    "Vereinigtes Königreich",
    "Vietnam",
    "Wallis und Futuna",
    "Weihnachtsinsel",
    "Westsahara",
    "Zentralafrikanische Republik",
    "Zypern"
  ],
  "street_root": [
    "Ackerweg",
    "Adalbert-Stifter-Str.",
    "Adalbertstr.",
    "Adolf-Baeyer-Str.",
    "Adolf-Kaschny-Str.",
    "Adolf-Reichwein-Str.",
    "Adolfsstr.",
    "Ahornweg",
    "Ahrstr.",
    "Akazienweg",
    "Albert-Einstein-Str.",
    "Albert-Schweitzer-Str.",
    "Albertus-Magnus-Str.",
    "Albert-Zarthe-Weg",
    "Albin-Edelmann-Str.",
    "Albrecht-Haushofer-Str.",
    "Aldegundisstr.",
    "Alexanderstr.",
    "Alfred-Delp-Str.",
    "Alfred-Kubin-Str.",
    "Alfred-Stock-Str.",
    "Alkenrather Str.",
    "Allensteiner Str.",
    "Alsenstr.",
    "Alt Steinbücheler Weg",
    "Alte Garten",
    "Alte Heide",
    "Alte Landstr.",
    "Alte Ziegelei",
    "Altenberger Str.",
    "Altenhof",
    "Alter Grenzweg",
    "Altstadtstr.",
    "Am Alten Gaswerk",
    "Am Alten Schafstall",
    "Am Arenzberg",
    "Am Benthal",
    "Am Birkenberg",
    "Am Blauen Berg",
    "Am Borsberg",
    "Am Brungen",
    "Am Büchelter Hof",
    "Am Buttermarkt",
    "Am Ehrenfriedhof",
    "Am Eselsdamm",
    "Am Falkenberg",
    "Am Frankenberg",
    "Am Gesundheitspark",
    "Am Gierlichshof",
    "Am Graben",
    "Am Hagelkreuz",
    "Am Hang",
    "Am Heidkamp",
    "Am Hemmelrather Hof",
    "Am Hofacker",
    "Am Hohen Ufer",
    "Am Höllers Eck",
    "Am Hühnerberg",
    "Am Jägerhof",
    "Am Junkernkamp",
    "Am Kemperstiegel",
    "Am Kettnersbusch",
    "Am Kiesberg",
    "Am Klösterchen",
    "Am Knechtsgraben",
    "Am Köllerweg",
    "Am Köttersbach",
    "Am Kreispark",
    "Am Kronefeld",
    "Am Küchenhof",
    "Am Kühnsbusch",
    "Am Lindenfeld",
    "Am Märchen",
    "Am Mittelberg",
    "Am Mönchshof",
    "Am Mühlenbach",
    "Am Neuenhof",
    "Am Nonnenbruch",
    "Am Plattenbusch",
    "Am Quettinger Feld",
    "Am Rosenhügel",
    "Am Sandberg",
    "Am Scherfenbrand",
    "Am Schokker",
    "Am Silbersee",
    "Am Sonnenhang",
    "Am Sportplatz",
    "Am Stadtpark",
    "Am Steinberg",
    "Am Telegraf",
    "Am Thelenhof",
    "Am Vogelkreuz",
    "Am Vogelsang",
    "Am Vogelsfeldchen",
    "Am Wambacher Hof",
    "Am Wasserturm",
    "Am Weidenbusch",
    "Am Weiher",
    "Am Weingarten",
    "Am Werth",
    "Amselweg",
    "An den Irlen",
    "An den Rheinauen",
    "An der Bergerweide",
    "An der Dingbank",
    "An der Evangelischen Kirche",
    "An der Evgl. Kirche",
    "An der Feldgasse",
    "An der Fettehenne",
    "An der Kante",
    "An der Laach",
    "An der Lehmkuhle",
    "An der Lichtenburg",
    "An der Luisenburg",
    "An der Robertsburg",
    "An der Schmitten",
    "An der Schusterinsel",
    "An der Steinrütsch",
    "An St. Andreas",
    "An St. Remigius",
    "Andreasstr.",
    "Ankerweg",
    "Annette-Kolb-Str.",
    "Apenrader Str.",
    "Arnold-Ohletz-Str.",
    "Atzlenbacher Str.",
    "Auerweg",
    "Auestr.",
    "Auf dem Acker",
    "Auf dem Blahnenhof",
    "Auf dem Bohnbüchel",
    "Auf dem Bruch",
    "Auf dem End",
    "Auf dem Forst",
    "Auf dem Herberg",
    "Auf dem Lehn",
    "Auf dem Stein",
    "Auf dem Weierberg",
    "Auf dem Weiherhahn",
    "Auf den Reien",
    "Auf der Donnen",
    "Auf der Grieße",
    "Auf der Ohmer",
    "Auf der Weide",
    "Auf'm Berg",
    "Auf'm Kamp",
    "Augustastr.",
    "August-Kekulé-Str.",
    "A.-W.-v.-Hofmann-Str.",
    "Bahnallee",
    "Bahnhofstr.",
    "Baltrumstr.",
    "Bamberger Str.",
    "Baumberger Str.",
    "Bebelstr.",
    "Beckers Kämpchen",
    "Beerenstr.",
    "Beethovenstr.",
    "Behringstr.",
    "Bendenweg",
    "Bensberger Str.",
    "Benzstr.",
    "Bergische Landstr.",
    "Bergstr.",
    "Berliner Platz",
    "Berliner Str.",
    "Bernhard-Letterhaus-Str.",
    "Bernhard-Lichtenberg-Str.",
    "Bernhard-Ridder-Str.",
    "Bernsteinstr.",
    "Bertha-Middelhauve-Str.",
    "Bertha-von-Suttner-Str.",
    "Bertolt-Brecht-Str.",
    "Berzeliusstr.",
    "Bielertstr.",
    "Biesenbach",
    "Billrothstr.",
    "Birkenbergstr.",
    "Birkengartenstr.",
    "Birkenweg",
    "Bismarckstr.",
    "Bitterfelder Str.",
    "Blankenburg",
    "Blaukehlchenweg",
    "Blütenstr.",
    "Boberstr.",
    "Böcklerstr.",
    "Bodelschwinghstr.",
    "Bodestr.",
    "Bogenstr.",
    "Bohnenkampsweg",
    "Bohofsweg",
    "Bonifatiusstr.",
    "Bonner Str.",
    "Borkumstr.",
    "Bornheimer Str.",
    "Borsigstr.",
    "Borussiastr.",
    "Bracknellstr.",
    "Brahmsweg",
    "Brandenburger Str.",
    "Breidenbachstr.",
    "Breslauer Str.",
    "Bruchhauser Str.",
    "Brückenstr.",
    "Brucknerstr.",
    "Brüder-Bonhoeffer-Str.",
    "Buchenweg",
    "Bürgerbuschweg",
    "Burgloch",
    "Burgplatz",
    "Burgstr.",
    "Burgweg",
    "Bürriger Weg",
    "Burscheider Str.",
    "Buschkämpchen",
    "Butterheider Str.",
    "Carl-Duisberg-Platz",
    "Carl-Duisberg-Str.",
    "Carl-Leverkus-Str.",
    "Carl-Maria-von-Weber-Platz",
    "Carl-Maria-von-Weber-Str.",
    "Carlo-Mierendorff-Str.",
    "Carl-Rumpff-Str.",
    "Carl-von-Ossietzky-Str.",
    "Charlottenburger Str.",
    "Christian-Heß-Str.",
    "Claasbruch",
    "Clemens-Winkler-Str.",
    "Concordiastr.",
    "Cranachstr.",
    "Dahlemer Str.",
    "Daimlerstr.",
    "Damaschkestr.",
    "Danziger Str.",
    "Debengasse",
    "Dechant-Fein-Str.",
    "Dechant-Krey-Str.",
    "Deichtorstr.",
    "Dhünnberg",
    "Dhünnstr.",
    "Dianastr.",
    "Diedenhofener Str.",
    "Diepental",
    "Diepenthaler Str.",
    "Dieselstr.",
    "Dillinger Str.",
    "Distelkamp",
    "Dohrgasse",
    "Domblick",
    "Dönhoffstr.",
    "Dornierstr.",
    "Drachenfelsstr.",
    "Dr.-August-Blank-Str.",
    "Dresdener Str.",
    "Driescher Hecke",
    "Drosselweg",
    "Dudweilerstr.",
    "Dünenweg",
    "Dünfelder Str.",
    "Dünnwalder Grenzweg",
    "Düppeler Str.",
    "Dürerstr.",
    "Dürscheider Weg",
    "Düsseldorfer Str.",
    "Edelrather Weg",
    "Edmund-Husserl-Str.",
    "Eduard-Spranger-Str.",
    "Ehrlichstr.",
    "Eichenkamp",
    "Eichenweg",
    "Eidechsenweg",
    "Eifelstr.",
    "Eifgenstr.",
    "Eintrachtstr.",
    "Elbestr.",
    "Elisabeth-Langgässer-Str.",
    "Elisabethstr.",
    "Elisabeth-von-Thadden-Str.",
    "Elisenstr.",
    "Elsa-Brändström-Str.",
    "Elsbachstr.",
    "Else-Lasker-Schüler-Str.",
    "Elsterstr.",
    "Emil-Fischer-Str.",
    "Emil-Nolde-Str.",
    "Engelbertstr.",
    "Engstenberger Weg",
    "Entenpfuhl",
    "Erbelegasse",
    "Erftstr.",
    "Erfurter Str.",
    "Erich-Heckel-Str.",
    "Erich-Klausener-Str.",
    "Erich-Ollenhauer-Str.",
    "Erlenweg",
    "Ernst-Bloch-Str.",
    "Ernst-Ludwig-Kirchner-Str.",
    "Erzbergerstr.",
    "Eschenallee",
    "Eschenweg",
    "Esmarchstr.",
    "Espenweg",
    "Euckenstr.",
    "Eulengasse",
    "Eulenkamp",
    "Ewald-Flamme-Str.",
    "Ewald-Röll-Str.",
    "Fährstr.",
    "Farnweg",
    "Fasanenweg",
    "Faßbacher Hof",
    "Felderstr.",
    "Feldkampstr.",
    "Feldsiefer Weg",
    "Feldsiefer Wiesen",
    "Feldstr.",
    "Feldtorstr.",
    "Felix-von-Roll-Str.",
    "Ferdinand-Lassalle-Str.",
    "Fester Weg",
    "Feuerbachstr.",
    "Feuerdornweg",
    "Fichtenweg",
    "Fichtestr.",
    "Finkelsteinstr.",
    "Finkenweg",
    "Fixheider Str.",
    "Flabbenhäuschen",
    "Flensburger Str.",
    "Fliederweg",
    "Florastr.",
    "Florianweg",
    "Flotowstr.",
    "Flurstr.",
    "Föhrenweg",
    "Fontanestr.",
    "Forellental",
    "Fortunastr.",
    "Franz-Esser-Str.",
    "Franz-Hitze-Str.",
    "Franz-Kail-Str.",
    "Franz-Marc-Str.",
    "Freiburger Str.",
    "Freiheitstr.",
    "Freiherr-vom-Stein-Str.",
    "Freudenthal",
    "Freudenthaler Weg",
    "Fridtjof-Nansen-Str.",
    "Friedenberger Str.",
    "Friedensstr.",
    "Friedhofstr.",
    "Friedlandstr.",
    "Friedlieb-Ferdinand-Runge-Str.",
    "Friedrich-Bayer-Str.",
    "Friedrich-Bergius-Platz",
    "Friedrich-Ebert-Platz",
    "Friedrich-Ebert-Str.",
    "Friedrich-Engels-Str.",
    "Friedrich-List-Str.",
    "Friedrich-Naumann-Str.",
    "Friedrich-Sertürner-Str.",
    "Friedrichstr.",
    "Friedrich-Weskott-Str.",
    "Friesenweg",
    "Frischenberg",
    "Fritz-Erler-Str.",
    "Fritz-Henseler-Str.",
    "Fröbelstr.",
    "Fürstenbergplatz",
    "Fürstenbergstr.",
    "Gabriele-Münter-Str.",
    "Gartenstr.",
    "Gebhardstr.",
    "Geibelstr.",
    "Gellertstr.",
    "Georg-von-Vollmar-Str.",
    "Gerhard-Domagk-Str.",
    "Gerhart-Hauptmann-Str.",
    "Gerichtsstr.",
    "Geschwister-Scholl-Str.",
    "Gezelinallee",
    "Gierener Weg",
    "Ginsterweg",
    "Gisbert-Cremer-Str.",
    "Glücksburger Str.",
    "Gluckstr.",
    "Gneisenaustr.",
    "Goetheplatz",
    "Goethestr.",
    "Golo-Mann-Str.",
    "Görlitzer Str.",
    "Görresstr.",
    "Graebestr.",
    "Graf-Galen-Platz",
    "Gregor-Mendel-Str.",
    "Greifswalder Str.",
    "Grillenweg",
    "Gronenborner Weg",
    "Große Kirchstr.",
    "Grunder Wiesen",
    "Grundermühle",
    "Grundermühlenhof",
    "Grundermühlenweg",
    "Grüner Weg",
    "Grunewaldstr.",
    "Grünstr.",
    "Günther-Weisenborn-Str.",
    "Gustav-Freytag-Str.",
    "Gustav-Heinemann-Str.",
    "Gustav-Radbruch-Str.",
    "Gut Reuschenberg",
    "Gutenbergstr.",
    "Haberstr.",
    "Habichtgasse",
    "Hafenstr.",
    "Hagenauer Str.",
    "Hahnenblecher",
    "Halenseestr.",
    "Halfenleimbach",
    "Hallesche Str.",
    "Halligstr.",
    "Hamberger Str.",
    "Hammerweg",
    "Händelstr.",
    "Hannah-Höch-Str.",
    "Hans-Arp-Str.",
    "Hans-Gerhard-Str.",
    "Hans-Sachs-Str.",
    "Hans-Schlehahn-Str.",
    "Hans-von-Dohnanyi-Str.",
    "Hardenbergstr.",
    "Haselweg",
    "Hauptstr.",
    "Haus-Vorster-Str.",
    "Hauweg",
    "Havelstr.",
    "Havensteinstr.",
    "Haydnstr.",
    "Hebbelstr.",
    "Heckenweg",
    "Heerweg",
    "Hegelstr.",
    "Heidberg",
    "Heidehöhe",
    "Heidestr.",
    "Heimstättenweg",
    "Heinrich-Böll-Str.",
    "Heinrich-Brüning-Str.",
    "Heinrich-Claes-Str.",
    "Heinrich-Heine-Str.",
    "Heinrich-Hörlein-Str.",
    "Heinrich-Lübke-Str.",
    "Heinrich-Lützenkirchen-Weg",
    "Heinrichstr.",
    "Heinrich-Strerath-Str.",
    "Heinrich-von-Kleist-Str.",
    "Heinrich-von-Stephan-Str.",
    "Heisterbachstr.",
    "Helenenstr.",
    "Helmestr.",
    "Hemmelrather Weg",
    "Henry-T.-v.-Böttinger-Str.",
    "Herderstr.",
    "Heribertstr.",
    "Hermann-Ehlers-Str.",
    "Hermann-Hesse-Str.",
    "Hermann-König-Str.",
    "Hermann-Löns-Str.",
    "Hermann-Milde-Str.",
    "Hermann-Nörrenberg-Str.",
    "Hermann-von-Helmholtz-Str.",
    "Hermann-Waibel-Str.",
    "Herzogstr.",
    "Heymannstr.",
    "Hindenburgstr.",
    "Hirzenberg",
    "Hitdorfer Kirchweg",
    "Hitdorfer Str.",
    "Höfer Mühle",
    "Höfer Weg",
    "Hohe Str.",
    "Höhenstr.",
    "Höltgestal",
    "Holunderweg",
    "Holzer Weg",
    "Holzer Wiesen",
    "Hornpottweg",
    "Hubertusweg",
    "Hufelandstr.",
    "Hufer Weg",
    "Humboldtstr.",
    "Hummelsheim",
    "Hummelweg",
    "Humperdinckstr.",
    "Hüscheider Gärten",
    "Hüscheider Str.",
    "Hütte",
    "Ilmstr.",
    "Im Bergischen Heim",
    "Im Bruch",
    "Im Buchenhain",
    "Im Bühl",
    "Im Burgfeld",
    "Im Dorf",
    "Im Eisholz",
    "Im Friedenstal",
    "Im Frohental",
    "Im Grunde",
    "Im Hederichsfeld",
    "Im Jücherfeld",
    "Im Kalkfeld",
    "Im Kirberg",
    "Im Kirchfeld",
    "Im Kreuzbruch",
    "Im Mühlenfeld",
    "Im Nesselrader Kamp",
    "Im Oberdorf",
    "Im Oberfeld",
    "Im Rosengarten",
    "Im Rottland",
    "Im Scheffengarten",
    "Im Staderfeld",
    "Im Steinfeld",
    "Im Weidenblech",
    "Im Winkel",
    "Im Ziegelfeld",
    "Imbach",
    "Imbacher Weg",
    "Immenweg",
    "In den Blechenhöfen",
    "In den Dehlen",
    "In der Birkenau",
    "In der Dasladen",
    "In der Felderhütten",
    "In der Hartmannswiese",
    "In der Höhle",
    "In der Schaafsdellen",
    "In der Wasserkuhl",
    "In der Wüste",
    "In Holzhausen",
    "Insterstr.",
    "Jacob-Fröhlen-Str.",
    "Jägerstr.",
    "Jahnstr.",
    "Jakob-Eulenberg-Weg",
    "Jakobistr.",
    "Jakob-Kaiser-Str.",
    "Jenaer Str.",
    "Johannes-Baptist-Str.",
    "Johannes-Dott-Str.",
    "Johannes-Popitz-Str.",
    "Johannes-Wislicenus-Str.",
    "Johannisburger Str.",
    "Johann-Janssen-Str.",
    "Johann-Wirtz-Weg",
    "Josefstr.",
    "Jüch",
    "Julius-Doms-Str.",
    "Julius-Leber-Str.",
    "Kaiserplatz",
    "Kaiserstr.",
    "Kaiser-Wilhelm-Allee",
    "Kalkstr.",
    "Kämpchenstr.",
    "Kämpenwiese",
    "Kämper Weg",
    "Kamptalweg",
    "Kanalstr.",
    "Kandinskystr.",
    "Kantstr.",
    "Kapellenstr.",
    "Karl-Arnold-Str.",
    "Karl-Bosch-Str.",
    "Karl-Bückart-Str.",
    "Karl-Carstens-Ring",
    "Karl-Friedrich-Goerdeler-Str.",
    "Karl-Jaspers-Str.",
    "Karl-König-Str.",
    "Karl-Krekeler-Str.",
    "Karl-Marx-Str.",
    "Karlstr.",
    "Karl-Ulitzka-Str.",
    "Karl-Wichmann-Str.",
    "Karl-Wingchen-Str.",
    "Käsenbrod",
    "Käthe-Kollwitz-Str.",
    "Katzbachstr.",
    "Kerschensteinerstr.",
    "Kiefernweg",
    "Kieler Str.",
    "Kieselstr.",
    "Kiesweg",
    "Kinderhausen",
    "Kleiberweg",
    "Kleine Kirchstr.",
    "Kleingansweg",
    "Kleinheider Weg",
    "Klief",
    "Kneippstr.",
    "Knochenbergsweg",
    "Kochergarten",
    "Kocherstr.",
    "Kockelsberg",
    "Kolberger Str.",
    "Kolmarer Str.",
    "Kölner Gasse",
    "Kölner Str.",
    "Kolpingstr.",
    "Königsberger Platz",
    "Konrad-Adenauer-Platz",
    "Köpenicker Str.",
    "Kopernikusstr.",
    "Körnerstr.",
    "Köschenberg",
    "Köttershof",
    "Kreuzbroicher Str.",
    "Kreuzkamp",
    "Krummer Weg",
    "Kruppstr.",
    "Kuhlmannweg",
    "Kump",
    "Kumper Weg",
    "Kunstfeldstr.",
    "Küppersteger Str.",
    "Kursiefen",
    "Kursiefer Weg",
    "Kurtekottenweg",
    "Kurt-Schumacher-Ring",
    "Kyllstr.",
    "Langenfelder Str.",
    "Längsleimbach",
    "Lärchenweg",
    "Legienstr.",
    "Lehner Mühle",
    "Leichlinger Str.",
    "Leimbacher Hof",
    "Leinestr.",
    "Leineweberstr.",
    "Leipziger Str.",
    "Lerchengasse",
    "Lessingstr.",
    "Libellenweg",
    "Lichstr.",
    "Liebigstr.",
    "Lindenstr.",
    "Lingenfeld",
    "Linienstr.",
    "Lippe",
    "Löchergraben",
    "Löfflerstr.",
    "Loheweg",
    "Lohrbergstr.",
    "Lohrstr.",
    "Löhstr.",
    "Lortzingstr.",
    "Lötzener Str.",
    "Löwenburgstr.",
    "Lucasstr.",
    "Ludwig-Erhard-Platz",
    "Ludwig-Girtler-Str.",
    "Ludwig-Knorr-Str.",
    "Luisenstr.",
    "Lupinenweg",
    "Lurchenweg",
    "Lützenkirchener Str.",
    "Lycker Str.",
    "Maashofstr.",
    "Manforter Str.",
    "Marc-Chagall-Str.",
    "Maria-Dresen-Str.",
    "Maria-Terwiel-Str.",
    "Marie-Curie-Str.",
    "Marienburger Str.",
    "Mariendorfer Str.",
    "Marienwerderstr.",
    "Marie-Schlei-Str.",
    "Marktplatz",
    "Markusweg",
    "Martin-Buber-Str.",
    "Martin-Heidegger-Str.",
    "Martin-Luther-Str.",
    "Masurenstr.",
    "Mathildenweg",
    "Maurinusstr.",
    "Mauspfad",
    "Max-Beckmann-Str.",
    "Max-Delbrück-Str.",
    "Max-Ernst-Str.",
    "Max-Holthausen-Platz",
    "Max-Horkheimer-Str.",
    "Max-Liebermann-Str.",
    "Max-Pechstein-Str.",
    "Max-Planck-Str.",
    "Max-Scheler-Str.",
    "Max-Schönenberg-Str.",
    "Maybachstr.",
    "Meckhofer Feld",
    "Meisenweg",
    "Memelstr.",
    "Menchendahler Str.",
    "Mendelssohnstr.",
    "Merziger Str.",
    "Mettlacher Str.",
    "Metzer Str.",
    "Michaelsweg",
    "Miselohestr.",
    "Mittelstr.",
    "Mohlenstr.",
    "Moltkestr.",
    "Monheimer Str.",
    "Montanusstr.",
    "Montessoriweg",
    "Moosweg",
    "Morsbroicher Str.",
    "Moselstr.",
    "Moskauer Str.",
    "Mozartstr.",
    "Mühlenweg",
    "Muhrgasse",
    "Muldestr.",
    "Mülhausener Str.",
    "Mülheimer Str.",
    "Münsters Gäßchen",
    "Münzstr.",
    "Müritzstr.",
    "Myliusstr.",
    "Nachtigallenweg",
    "Nauener Str.",
    "Neißestr.",
    "Nelly-Sachs-Str.",
    "Netzestr.",
    "Neuendriesch",
    "Neuenhausgasse",
    "Neuenkamp",
    "Neujudenhof",
    "Neukronenberger Str.",
    "Neustadtstr.",
    "Nicolai-Hartmann-Str.",
    "Niederblecher",
    "Niederfeldstr.",
    "Nietzschestr.",
    "Nikolaus-Groß-Str.",
    "Nobelstr.",
    "Norderneystr.",
    "Nordstr.",
    "Ober dem Hof",
    "Obere Lindenstr.",
    "Obere Str.",
    "Oberölbach",
    "Odenthaler Str.",
    "Oderstr.",
    "Okerstr.",
    "Olof-Palme-Str.",
    "Ophovener Str.",
    "Opladener Platz",
    "Opladener Str.",
    "Ortelsburger Str.",
    "Oskar-Moll-Str.",
    "Oskar-Schlemmer-Str.",
    "Oststr.",
    "Oswald-Spengler-Str.",
    "Otto-Dix-Str.",
    "Otto-Grimm-Str.",
    "Otto-Hahn-Str.",
    "Otto-Müller-Str.",
    "Otto-Stange-Str.",
    "Ottostr.",
    "Otto-Varnhagen-Str.",
    "Otto-Wels-Str.",
    "Ottweilerstr.",
    "Oulustr.",
    "Overfeldweg",
    "Pappelweg",
    "Paracelsusstr.",
    "Parkstr.",
    "Pastor-Louis-Str.",
    "Pastor-Scheibler-Str.",
    "Pastorskamp",
    "Paul-Klee-Str.",
    "Paul-Löbe-Str.",
    "Paulstr.",
    "Peenestr.",
    "Pescher Busch",
    "Peschstr.",
    "Pestalozzistr.",
    "Peter-Grieß-Str.",
    "Peter-Joseph-Lenné-Str.",
    "Peter-Neuenheuser-Str.",
    "Petersbergstr.",
    "Peterstr.",
    "Pfarrer-Jekel-Str.",
    "Pfarrer-Klein-Str.",
    "Pfarrer-Röhr-Str.",
    "Pfeilshofstr.",
    "Philipp-Ott-Str.",
    "Piet-Mondrian-Str.",
    "Platanenweg",
    "Pommernstr.",
    "Porschestr.",
    "Poststr.",
    "Potsdamer Str.",
    "Pregelstr.",
    "Prießnitzstr.",
    "Pützdelle",
    "Quarzstr.",
    "Quettinger Str.",
    "Rat-Deycks-Str.",
    "Rathenaustr.",
    "Ratherkämp",
    "Ratiborer Str.",
    "Raushofstr.",
    "Regensburger Str.",
    "Reinickendorfer Str.",
    "Renkgasse",
    "Rennbaumplatz",
    "Rennbaumstr.",
    "Reuschenberger Str.",
    "Reusrather Str.",
    "Reuterstr.",
    "Rheinallee",
    "Rheindorfer Str.",
    "Rheinstr.",
    "Rhein-Wupper-Platz",
    "Richard-Wagner-Str.",
    "Rilkestr.",
    "Ringstr.",
    "Robert-Blum-Str.",
    "Robert-Koch-Str.",
    "Robert-Medenwald-Str.",
    "Rolandstr.",
    "Romberg",
    "Röntgenstr.",
    "Roonstr.",
    "Ropenstall",
    "Ropenstaller Weg",
    "Rosenthal",
    "Rostocker Str.",
    "Rotdornweg",
    "Röttgerweg",
    "Rückertstr.",
    "Rudolf-Breitscheid-Str.",
    "Rudolf-Mann-Platz",
    "Rudolf-Stracke-Str.",
    "Ruhlachplatz",
    "Ruhlachstr.",
    "Rüttersweg",
    "Saalestr.",
    "Saarbrücker Str.",
    "Saarlauterner Str.",
    "Saarstr.",
    "Salamanderweg",
    "Samlandstr.",
    "Sanddornstr.",
    "Sandstr.",
    "Sauerbruchstr.",
    "Schäfershütte",
    "Scharnhorststr.",
    "Scheffershof",
    "Scheidemannstr.",
    "Schellingstr.",
    "Schenkendorfstr.",
    "Schießbergstr.",
    "Schillerstr.",
    "Schlangenhecke",
    "Schlebuscher Heide",
    "Schlebuscher Str.",
    "Schlebuschrath",
    "Schlehdornstr.",
    "Schleiermacherstr.",
    "Schloßstr.",
    "Schmalenbruch",
    "Schnepfenflucht",
    "Schöffenweg",
    "Schöllerstr.",
    "Schöne Aussicht",
    "Schöneberger Str.",
    "Schopenhauerstr.",
    "Schubertplatz",
    "Schubertstr.",
    "Schulberg",
    "Schulstr.",
    "Schumannstr.",
    "Schwalbenweg",
    "Schwarzastr.",
    "Sebastianusweg",
    "Semmelweisstr.",
    "Siebelplatz",
    "Siemensstr.",
    "Solinger Str.",
    "Sonderburger Str.",
    "Spandauer Str.",
    "Speestr.",
    "Sperberweg",
    "Sperlingsweg",
    "Spitzwegstr.",
    "Sporrenberger Mühle",
    "Spreestr.",
    "St. Ingberter Str.",
    "Starenweg",
    "Stauffenbergstr.",
    "Stefan-Zweig-Str.",
    "Stegerwaldstr.",
    "Steglitzer Str.",
    "Steinbücheler Feld",
    "Steinbücheler Str.",
    "Steinstr.",
    "Steinweg",
    "Stephan-Lochner-Str.",
    "Stephanusstr.",
    "Stettiner Str.",
    "Stixchesstr.",
    "Stöckenstr.",
    "Stralsunder Str.",
    "Straßburger Str.",
    "Stresemannplatz",
    "Strombergstr.",
    "Stromstr.",
    "Stüttekofener Str.",
    "Sudestr.",
    "Sürderstr.",
    "Syltstr.",
    "Talstr.",
    "Tannenbergstr.",
    "Tannenweg",
    "Taubenweg",
    "Teitscheider Weg",
    "Telegrafenstr.",
    "Teltower Str.",
    "Tempelhofer Str.",
    "Theodor-Adorno-Str.",
    "Theodor-Fliedner-Str.",
    "Theodor-Gierath-Str.",
    "Theodor-Haubach-Str.",
    "Theodor-Heuss-Ring",
    "Theodor-Storm-Str.",
    "Theodorstr.",
    "Thomas-Dehler-Str.",
    "Thomas-Morus-Str.",
    "Thomas-von-Aquin-Str.",
    "Tönges Feld",
    "Torstr.",
    "Treptower Str.",
    "Treuburger Str.",
    "Uhlandstr.",
    "Ulmenweg",
    "Ulmer Str.",
    "Ulrichstr.",
    "Ulrich-von-Hassell-Str.",
    "Umlag",
    "Unstrutstr.",
    "Unter dem Schildchen",
    "Unterölbach",
    "Unterstr.",
    "Uppersberg",
    "Van\\'t-Hoff-Str.",
    "Veit-Stoß-Str.",
    "Vereinsstr.",
    "Viktor-Meyer-Str.",
    "Vincent-van-Gogh-Str.",
    "Virchowstr.",
    "Voigtslach",
    "Volhardstr.",
    "Völklinger Str.",
    "Von-Brentano-Str.",
    "Von-Diergardt-Str.",
    "Von-Eichendorff-Str.",
    "Von-Ketteler-Str.",
    "Von-Knoeringen-Str.",
    "Von-Pettenkofer-Str.",
    "Von-Siebold-Str.",
    "Wacholderweg",
    "Waldstr.",
    "Walter-Flex-Str.",
    "Walter-Hempel-Str.",
    "Walter-Hochapfel-Str.",
    "Walter-Nernst-Str.",
    "Wannseestr.",
    "Warnowstr.",
    "Warthestr.",
    "Weddigenstr.",
    "Weichselstr.",
    "Weidenstr.",
    "Weidfeldstr.",
    "Weiherfeld",
    "Weiherstr.",
    "Weinhäuser Str.",
    "Weißdornweg",
    "Weißenseestr.",
    "Weizkamp",
    "Werftstr.",
    "Werkstättenstr.",
    "Werner-Heisenberg-Str.",
    "Werrastr.",
    "Weyerweg",
    "Widdauener Str.",
    "Wiebertshof",
    "Wiehbachtal",
    "Wiembachallee",
    "Wiesdorfer Platz",
    "Wiesenstr.",
    "Wilhelm-Busch-Str.",
    "Wilhelm-Hastrich-Str.",
    "Wilhelm-Leuschner-Str.",
    "Wilhelm-Liebknecht-Str.",
    "Wilhelmsgasse",
    "Wilhelmstr.",
    "Willi-Baumeister-Str.",
    "Willy-Brandt-Ring",
    "Winand-Rossi-Str.",
    "Windthorststr.",
    "Winkelweg",
    "Winterberg",
    "Wittenbergstr.",
    "Wolf-Vostell-Str.",
    "Wolkenburgstr.",
    "Wupperstr.",
    "Wuppertalstr.",
    "Wüstenhof",
    "Yitzhak-Rabin-Str.",
    "Zauberkuhle",
    "Zedernweg",
    "Zehlendorfer Str.",
    "Zehntenweg",
    "Zeisigweg",
    "Zeppelinstr.",
    "Zschopaustr.",
    "Zum Claashäuschen",
    "Zündhütchenweg",
    "Zur Alten Brauerei",
    "Zur alten Fabrik"
  ],
  "building_number": [
    "###",
    "##",
    "#",
    "##a",
    "##b",
    "##c"
  ],
  "secondary_address": [
    "Apt. ###",
    "Zimmer ###",
    "# OG"
  ],
  "postcode": [
    "#####",
    "#####"
  ],
  "state": [
    "Baden-Württemberg",
    "Bayern",
    "Berlin",
    "Brandenburg",
    "Bremen",
    "Hamburg",
    "Hessen",
    "Mecklenburg-Vorpommern",
    "Niedersachsen",
    "Nordrhein-Westfalen",
    "Rheinland-Pfalz",
    "Saarland",
    "Sachsen",
    "Sachsen-Anhalt",
    "Schleswig-Holstein",
    "Thüringen"
  ],
  "state_abbr": [
    "BW",
    "BY",
    "BE",
    "BB",
    "HB",
    "HH",
    "HE",
    "MV",
    "NI",
    "NW",
    "RP",
    "SL",
    "SN",
    "ST",
    "SH",
    "TH"
  ],
  "city": [
    "#{city_prefix} #{Name.first_name}#{city_suffix}",
    "#{city_prefix} #{Name.first_name}",
    "#{Name.first_name}#{city_suffix}",
    "#{Name.last_name}#{city_suffix}"
  ],
  "street_name": [
    "#{street_root}"
  ],
  "street_address": [
    "#{street_name} #{building_number}"
  ],
  "default_country": [
    "Deutschland"
  ]
};
de.company = {
  "suffix": [
    "GmbH",
    "AG",
    "Gruppe",
    "KG",
    "GmbH & Co. KG",
    "UG",
    "OHG"
  ],
  "legal_form": [
    "GmbH",
    "AG",
    "Gruppe",
    "KG",
    "GmbH & Co. KG",
    "UG",
    "OHG"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} und #{Name.last_name}"
  ]
};
de.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ],
  "domain_suffix": [
    "com",
    "info",
    "name",
    "net",
    "org",
    "de",
    "ch"
  ]
};
de.lorem = {
  "words": [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ]
};
de.name = {
  "first_name": [
    "Aaron",
    "Abdul",
    "Abdullah",
    "Adam",
    "Adrian",
    "Adriano",
    "Ahmad",
    "Ahmed",
    "Ahmet",
    "Alan",
    "Albert",
    "Alessandro",
    "Alessio",
    "Alex",
    "Alexander",
    "Alfred",
    "Ali",
    "Amar",
    "Amir",
    "Amon",
    "Andre",
    "Andreas",
    "Andrew",
    "Angelo",
    "Ansgar",
    "Anthony",
    "Anton",
    "Antonio",
    "Arda",
    "Arian",
    "Armin",
    "Arne",
    "Arno",
    "Arthur",
    "Artur",
    "Arved",
    "Arvid",
    "Ayman",
    "Baran",
    "Baris",
    "Bastian",
    "Batuhan",
    "Bela",
    "Ben",
    "Benedikt",
    "Benjamin",
    "Bennet",
    "Bennett",
    "Benno",
    "Bent",
    "Berat",
    "Berkay",
    "Bernd",
    "Bilal",
    "Bjarne",
    "Björn",
    "Bo",
    "Boris",
    "Brandon",
    "Brian",
    "Bruno",
    "Bryan",
    "Burak",
    "Calvin",
    "Can",
    "Carl",
    "Carlo",
    "Carlos",
    "Caspar",
    "Cedric",
    "Cedrik",
    "Cem",
    "Charlie",
    "Chris",
    "Christian",
    "Christiano",
    "Christoph",
    "Christopher",
    "Claas",
    "Clemens",
    "Colin",
    "Collin",
    "Conner",
    "Connor",
    "Constantin",
    "Corvin",
    "Curt",
    "Damian",
    "Damien",
    "Daniel",
    "Danilo",
    "Danny",
    "Darian",
    "Dario",
    "Darius",
    "Darren",
    "David",
    "Davide",
    "Davin",
    "Dean",
    "Deniz",
    "Dennis",
    "Denny",
    "Devin",
    "Diego",
    "Dion",
    "Domenic",
    "Domenik",
    "Dominic",
    "Dominik",
    "Dorian",
    "Dustin",
    "Dylan",
    "Ecrin",
    "Eddi",
    "Eddy",
    "Edgar",
    "Edwin",
    "Efe",
    "Ege",
    "Elia",
    "Eliah",
    "Elias",
    "Elijah",
    "Emanuel",
    "Emil",
    "Emilian",
    "Emilio",
    "Emir",
    "Emirhan",
    "Emre",
    "Enes",
    "Enno",
    "Enrico",
    "Eren",
    "Eric",
    "Erik",
    "Etienne",
    "Fabian",
    "Fabien",
    "Fabio",
    "Fabrice",
    "Falk",
    "Felix",
    "Ferdinand",
    "Fiete",
    "Filip",
    "Finlay",
    "Finley",
    "Finn",
    "Finnley",
    "Florian",
    "Francesco",
    "Franz",
    "Frederic",
    "Frederick",
    "Frederik",
    "Friedrich",
    "Fritz",
    "Furkan",
    "Fynn",
    "Gabriel",
    "Georg",
    "Gerrit",
    "Gian",
    "Gianluca",
    "Gino",
    "Giuliano",
    "Giuseppe",
    "Gregor",
    "Gustav",
    "Hagen",
    "Hamza",
    "Hannes",
    "Hanno",
    "Hans",
    "Hasan",
    "Hassan",
    "Hauke",
    "Hendrik",
    "Hennes",
    "Henning",
    "Henri",
    "Henrick",
    "Henrik",
    "Henry",
    "Hugo",
    "Hussein",
    "Ian",
    "Ibrahim",
    "Ilias",
    "Ilja",
    "Ilyas",
    "Immanuel",
    "Ismael",
    "Ismail",
    "Ivan",
    "Iven",
    "Jack",
    "Jacob",
    "Jaden",
    "Jakob",
    "Jamal",
    "James",
    "Jamie",
    "Jan",
    "Janek",
    "Janis",
    "Janne",
    "Jannek",
    "Jannes",
    "Jannik",
    "Jannis",
    "Jano",
    "Janosch",
    "Jared",
    "Jari",
    "Jarne",
    "Jarno",
    "Jaron",
    "Jason",
    "Jasper",
    "Jay",
    "Jayden",
    "Jayson",
    "Jean",
    "Jens",
    "Jeremias",
    "Jeremie",
    "Jeremy",
    "Jermaine",
    "Jerome",
    "Jesper",
    "Jesse",
    "Jim",
    "Jimmy",
    "Joe",
    "Joel",
    "Joey",
    "Johann",
    "Johannes",
    "John",
    "Johnny",
    "Jon",
    "Jona",
    "Jonah",
    "Jonas",
    "Jonathan",
    "Jonte",
    "Joost",
    "Jordan",
    "Joris",
    "Joscha",
    "Joschua",
    "Josef",
    "Joseph",
    "Josh",
    "Joshua",
    "Josua",
    "Juan",
    "Julian",
    "Julien",
    "Julius",
    "Juri",
    "Justin",
    "Justus",
    "Kaan",
    "Kai",
    "Kalle",
    "Karim",
    "Karl",
    "Karlo",
    "Kay",
    "Keanu",
    "Kenan",
    "Kenny",
    "Keno",
    "Kerem",
    "Kerim",
    "Kevin",
    "Kian",
    "Kilian",
    "Kim",
    "Kimi",
    "Kjell",
    "Klaas",
    "Klemens",
    "Konrad",
    "Konstantin",
    "Koray",
    "Korbinian",
    "Kurt",
    "Lars",
    "Lasse",
    "Laurence",
    "Laurens",
    "Laurenz",
    "Laurin",
    "Lean",
    "Leander",
    "Leandro",
    "Leif",
    "Len",
    "Lenn",
    "Lennard",
    "Lennart",
    "Lennert",
    "Lennie",
    "Lennox",
    "Lenny",
    "Leo",
    "Leon",
    "Leonard",
    "Leonardo",
    "Leonhard",
    "Leonidas",
    "Leopold",
    "Leroy",
    "Levent",
    "Levi",
    "Levin",
    "Lewin",
    "Lewis",
    "Liam",
    "Lian",
    "Lias",
    "Lino",
    "Linus",
    "Lio",
    "Lion",
    "Lionel",
    "Logan",
    "Lorenz",
    "Lorenzo",
    "Loris",
    "Louis",
    "Luan",
    "Luc",
    "Luca",
    "Lucas",
    "Lucian",
    "Lucien",
    "Ludwig",
    "Luis",
    "Luiz",
    "Luk",
    "Luka",
    "Lukas",
    "Luke",
    "Lutz",
    "Maddox",
    "Mads",
    "Magnus",
    "Maik",
    "Maksim",
    "Malik",
    "Malte",
    "Manuel",
    "Marc",
    "Marcel",
    "Marco",
    "Marcus",
    "Marek",
    "Marian",
    "Mario",
    "Marius",
    "Mark",
    "Marko",
    "Markus",
    "Marlo",
    "Marlon",
    "Marten",
    "Martin",
    "Marvin",
    "Marwin",
    "Mateo",
    "Mathis",
    "Matis",
    "Mats",
    "Matteo",
    "Mattes",
    "Matthias",
    "Matthis",
    "Matti",
    "Mattis",
    "Maurice",
    "Max",
    "Maxim",
    "Maximilian",
    "Mehmet",
    "Meik",
    "Melvin",
    "Merlin",
    "Mert",
    "Michael",
    "Michel",
    "Mick",
    "Miguel",
    "Mika",
    "Mikail",
    "Mike",
    "Milan",
    "Milo",
    "Mio",
    "Mirac",
    "Mirco",
    "Mirko",
    "Mohamed",
    "Mohammad",
    "Mohammed",
    "Moritz",
    "Morten",
    "Muhammed",
    "Murat",
    "Mustafa",
    "Nathan",
    "Nathanael",
    "Nelson",
    "Neo",
    "Nevio",
    "Nick",
    "Niclas",
    "Nico",
    "Nicolai",
    "Nicolas",
    "Niels",
    "Nikita",
    "Niklas",
    "Niko",
    "Nikolai",
    "Nikolas",
    "Nils",
    "Nino",
    "Noah",
    "Noel",
    "Norman",
    "Odin",
    "Oke",
    "Ole",
    "Oliver",
    "Omar",
    "Onur",
    "Oscar",
    "Oskar",
    "Pascal",
    "Patrice",
    "Patrick",
    "Paul",
    "Peer",
    "Pepe",
    "Peter",
    "Phil",
    "Philip",
    "Philipp",
    "Pierre",
    "Piet",
    "Pit",
    "Pius",
    "Quentin",
    "Quirin",
    "Rafael",
    "Raik",
    "Ramon",
    "Raphael",
    "Rasmus",
    "Raul",
    "Rayan",
    "René",
    "Ricardo",
    "Riccardo",
    "Richard",
    "Rick",
    "Rico",
    "Robert",
    "Robin",
    "Rocco",
    "Roman",
    "Romeo",
    "Ron",
    "Ruben",
    "Ryan",
    "Said",
    "Salih",
    "Sam",
    "Sami",
    "Sammy",
    "Samuel",
    "Sandro",
    "Santino",
    "Sascha",
    "Sean",
    "Sebastian",
    "Selim",
    "Semih",
    "Shawn",
    "Silas",
    "Simeon",
    "Simon",
    "Sinan",
    "Sky",
    "Stefan",
    "Steffen",
    "Stephan",
    "Steve",
    "Steven",
    "Sven",
    "Sönke",
    "Sören",
    "Taha",
    "Tamino",
    "Tammo",
    "Tarik",
    "Tayler",
    "Taylor",
    "Teo",
    "Theo",
    "Theodor",
    "Thies",
    "Thilo",
    "Thomas",
    "Thorben",
    "Thore",
    "Thorge",
    "Tiago",
    "Til",
    "Till",
    "Tillmann",
    "Tim",
    "Timm",
    "Timo",
    "Timon",
    "Timothy",
    "Tino",
    "Titus",
    "Tizian",
    "Tjark",
    "Tobias",
    "Tom",
    "Tommy",
    "Toni",
    "Tony",
    "Torben",
    "Tore",
    "Tristan",
    "Tyler",
    "Tyron",
    "Umut",
    "Valentin",
    "Valentino",
    "Veit",
    "Victor",
    "Viktor",
    "Vin",
    "Vincent",
    "Vito",
    "Vitus",
    "Wilhelm",
    "Willi",
    "William",
    "Willy",
    "Xaver",
    "Yannic",
    "Yannick",
    "Yannik",
    "Yannis",
    "Yasin",
    "Youssef",
    "Yunus",
    "Yusuf",
    "Yven",
    "Yves",
    "Ömer",
    "Aaliyah",
    "Abby",
    "Abigail",
    "Ada",
    "Adelina",
    "Adriana",
    "Aileen",
    "Aimee",
    "Alana",
    "Alea",
    "Alena",
    "Alessa",
    "Alessia",
    "Alexa",
    "Alexandra",
    "Alexia",
    "Alexis",
    "Aleyna",
    "Alia",
    "Alica",
    "Alice",
    "Alicia",
    "Alina",
    "Alisa",
    "Alisha",
    "Alissa",
    "Aliya",
    "Aliyah",
    "Allegra",
    "Alma",
    "Alyssa",
    "Amalia",
    "Amanda",
    "Amelia",
    "Amelie",
    "Amina",
    "Amira",
    "Amy",
    "Ana",
    "Anabel",
    "Anastasia",
    "Andrea",
    "Angela",
    "Angelina",
    "Angelique",
    "Anja",
    "Ann",
    "Anna",
    "Annabel",
    "Annabell",
    "Annabelle",
    "Annalena",
    "Anne",
    "Anneke",
    "Annelie",
    "Annemarie",
    "Anni",
    "Annie",
    "Annika",
    "Anny",
    "Anouk",
    "Antonia",
    "Arda",
    "Ariana",
    "Ariane",
    "Arwen",
    "Ashley",
    "Asya",
    "Aurelia",
    "Aurora",
    "Ava",
    "Ayleen",
    "Aylin",
    "Ayse",
    "Azra",
    "Betty",
    "Bianca",
    "Bianka",
    "Caitlin",
    "Cara",
    "Carina",
    "Carla",
    "Carlotta",
    "Carmen",
    "Carolin",
    "Carolina",
    "Caroline",
    "Cassandra",
    "Catharina",
    "Catrin",
    "Cecile",
    "Cecilia",
    "Celia",
    "Celina",
    "Celine",
    "Ceyda",
    "Ceylin",
    "Chantal",
    "Charleen",
    "Charlotta",
    "Charlotte",
    "Chayenne",
    "Cheyenne",
    "Chiara",
    "Christin",
    "Christina",
    "Cindy",
    "Claire",
    "Clara",
    "Clarissa",
    "Colleen",
    "Collien",
    "Cora",
    "Corinna",
    "Cosima",
    "Dana",
    "Daniela",
    "Daria",
    "Darleen",
    "Defne",
    "Delia",
    "Denise",
    "Diana",
    "Dilara",
    "Dina",
    "Dorothea",
    "Ecrin",
    "Eda",
    "Eileen",
    "Ela",
    "Elaine",
    "Elanur",
    "Elea",
    "Elena",
    "Eleni",
    "Eleonora",
    "Eliana",
    "Elif",
    "Elina",
    "Elisa",
    "Elisabeth",
    "Ella",
    "Ellen",
    "Elli",
    "Elly",
    "Elsa",
    "Emelie",
    "Emely",
    "Emilia",
    "Emilie",
    "Emily",
    "Emma",
    "Emmely",
    "Emmi",
    "Emmy",
    "Enie",
    "Enna",
    "Enya",
    "Esma",
    "Estelle",
    "Esther",
    "Eva",
    "Evelin",
    "Evelina",
    "Eveline",
    "Evelyn",
    "Fabienne",
    "Fatima",
    "Fatma",
    "Felicia",
    "Felicitas",
    "Felina",
    "Femke",
    "Fenja",
    "Fine",
    "Finia",
    "Finja",
    "Finnja",
    "Fiona",
    "Flora",
    "Florentine",
    "Francesca",
    "Franka",
    "Franziska",
    "Frederike",
    "Freya",
    "Frida",
    "Frieda",
    "Friederike",
    "Giada",
    "Gina",
    "Giulia",
    "Giuliana",
    "Greta",
    "Hailey",
    "Hana",
    "Hanna",
    "Hannah",
    "Heidi",
    "Helen",
    "Helena",
    "Helene",
    "Helin",
    "Henriette",
    "Henrike",
    "Hermine",
    "Ida",
    "Ilayda",
    "Imke",
    "Ina",
    "Ines",
    "Inga",
    "Inka",
    "Irem",
    "Isa",
    "Isabel",
    "Isabell",
    "Isabella",
    "Isabelle",
    "Ivonne",
    "Jacqueline",
    "Jamie",
    "Jamila",
    "Jana",
    "Jane",
    "Janin",
    "Janina",
    "Janine",
    "Janna",
    "Janne",
    "Jara",
    "Jasmin",
    "Jasmina",
    "Jasmine",
    "Jella",
    "Jenna",
    "Jennifer",
    "Jenny",
    "Jessica",
    "Jessy",
    "Jette",
    "Jil",
    "Jill",
    "Joana",
    "Joanna",
    "Joelina",
    "Joeline",
    "Joelle",
    "Johanna",
    "Joleen",
    "Jolie",
    "Jolien",
    "Jolin",
    "Jolina",
    "Joline",
    "Jona",
    "Jonah",
    "Jonna",
    "Josefin",
    "Josefine",
    "Josephin",
    "Josephine",
    "Josie",
    "Josy",
    "Joy",
    "Joyce",
    "Judith",
    "Judy",
    "Jule",
    "Julia",
    "Juliana",
    "Juliane",
    "Julie",
    "Julienne",
    "Julika",
    "Julina",
    "Juna",
    "Justine",
    "Kaja",
    "Karina",
    "Karla",
    "Karlotta",
    "Karolina",
    "Karoline",
    "Kassandra",
    "Katarina",
    "Katharina",
    "Kathrin",
    "Katja",
    "Katrin",
    "Kaya",
    "Kayra",
    "Kiana",
    "Kiara",
    "Kim",
    "Kimberley",
    "Kimberly",
    "Kira",
    "Klara",
    "Korinna",
    "Kristin",
    "Kyra",
    "Laila",
    "Lana",
    "Lara",
    "Larissa",
    "Laura",
    "Laureen",
    "Lavinia",
    "Lea",
    "Leah",
    "Leana",
    "Leandra",
    "Leann",
    "Lee",
    "Leila",
    "Lena",
    "Lene",
    "Leni",
    "Lenia",
    "Lenja",
    "Lenya",
    "Leona",
    "Leoni",
    "Leonie",
    "Leonora",
    "Leticia",
    "Letizia",
    "Levke",
    "Leyla",
    "Lia",
    "Liah",
    "Liana",
    "Lili",
    "Lilia",
    "Lilian",
    "Liliana",
    "Lilith",
    "Lilli",
    "Lillian",
    "Lilly",
    "Lily",
    "Lina",
    "Linda",
    "Lindsay",
    "Line",
    "Linn",
    "Linnea",
    "Lisa",
    "Lisann",
    "Lisanne",
    "Liv",
    "Livia",
    "Liz",
    "Lola",
    "Loreen",
    "Lorena",
    "Lotta",
    "Lotte",
    "Louisa",
    "Louise",
    "Luana",
    "Luca",
    "Lucia",
    "Lucie",
    "Lucienne",
    "Lucy",
    "Luisa",
    "Luise",
    "Luka",
    "Luna",
    "Luzie",
    "Lya",
    "Lydia",
    "Lyn",
    "Lynn",
    "Madeleine",
    "Madita",
    "Madleen",
    "Madlen",
    "Magdalena",
    "Maike",
    "Mailin",
    "Maira",
    "Maja",
    "Malena",
    "Malia",
    "Malin",
    "Malina",
    "Mandy",
    "Mara",
    "Marah",
    "Mareike",
    "Maren",
    "Maria",
    "Mariam",
    "Marie",
    "Marieke",
    "Mariella",
    "Marika",
    "Marina",
    "Marisa",
    "Marissa",
    "Marit",
    "Marla",
    "Marleen",
    "Marlen",
    "Marlena",
    "Marlene",
    "Marta",
    "Martha",
    "Mary",
    "Maryam",
    "Mathilda",
    "Mathilde",
    "Matilda",
    "Maxi",
    "Maxima",
    "Maxine",
    "Maya",
    "Mayra",
    "Medina",
    "Medine",
    "Meike",
    "Melanie",
    "Melek",
    "Melike",
    "Melina",
    "Melinda",
    "Melis",
    "Melisa",
    "Melissa",
    "Merle",
    "Merve",
    "Meryem",
    "Mette",
    "Mia",
    "Michaela",
    "Michelle",
    "Mieke",
    "Mila",
    "Milana",
    "Milena",
    "Milla",
    "Mina",
    "Mira",
    "Miray",
    "Miriam",
    "Mirja",
    "Mona",
    "Monique",
    "Nadine",
    "Nadja",
    "Naemi",
    "Nancy",
    "Naomi",
    "Natalia",
    "Natalie",
    "Nathalie",
    "Neele",
    "Nela",
    "Nele",
    "Nelli",
    "Nelly",
    "Nia",
    "Nicole",
    "Nika",
    "Nike",
    "Nikita",
    "Nila",
    "Nina",
    "Nisa",
    "Noemi",
    "Nora",
    "Olivia",
    "Patricia",
    "Patrizia",
    "Paula",
    "Paulina",
    "Pauline",
    "Penelope",
    "Philine",
    "Phoebe",
    "Pia",
    "Rahel",
    "Rania",
    "Rebecca",
    "Rebekka",
    "Riana",
    "Rieke",
    "Rike",
    "Romina",
    "Romy",
    "Ronja",
    "Rosa",
    "Rosalie",
    "Ruby",
    "Sabrina",
    "Sahra",
    "Sally",
    "Salome",
    "Samantha",
    "Samia",
    "Samira",
    "Sandra",
    "Sandy",
    "Sanja",
    "Saphira",
    "Sara",
    "Sarah",
    "Saskia",
    "Selin",
    "Selina",
    "Selma",
    "Sena",
    "Sidney",
    "Sienna",
    "Silja",
    "Sina",
    "Sinja",
    "Smilla",
    "Sofia",
    "Sofie",
    "Sonja",
    "Sophia",
    "Sophie",
    "Soraya",
    "Stefanie",
    "Stella",
    "Stephanie",
    "Stina",
    "Sude",
    "Summer",
    "Susanne",
    "Svea",
    "Svenja",
    "Sydney",
    "Tabea",
    "Talea",
    "Talia",
    "Tamara",
    "Tamia",
    "Tamina",
    "Tanja",
    "Tara",
    "Tarja",
    "Teresa",
    "Tessa",
    "Thalea",
    "Thalia",
    "Thea",
    "Theresa",
    "Tia",
    "Tina",
    "Tomke",
    "Tuana",
    "Valentina",
    "Valeria",
    "Valerie",
    "Vanessa",
    "Vera",
    "Veronika",
    "Victoria",
    "Viktoria",
    "Viola",
    "Vivian",
    "Vivien",
    "Vivienne",
    "Wibke",
    "Wiebke",
    "Xenia",
    "Yara",
    "Yaren",
    "Yasmin",
    "Ylvi",
    "Ylvie",
    "Yvonne",
    "Zara",
    "Zehra",
    "Zeynep",
    "Zoe",
    "Zoey",
    "Zoé"
  ],
  "last_name": [
    "Abel",
    "Abicht",
    "Abraham",
    "Abramovic",
    "Abt",
    "Achilles",
    "Achkinadze",
    "Ackermann",
    "Adam",
    "Adams",
    "Ade",
    "Agostini",
    "Ahlke",
    "Ahrenberg",
    "Ahrens",
    "Aigner",
    "Albert",
    "Albrecht",
    "Alexa",
    "Alexander",
    "Alizadeh",
    "Allgeyer",
    "Amann",
    "Amberg",
    "Anding",
    "Anggreny",
    "Apitz",
    "Arendt",
    "Arens",
    "Arndt",
    "Aryee",
    "Aschenbroich",
    "Assmus",
    "Astafei",
    "Auer",
    "Axmann",
    "Baarck",
    "Bachmann",
    "Badane",
    "Bader",
    "Baganz",
    "Bahl",
    "Bak",
    "Balcer",
    "Balck",
    "Balkow",
    "Balnuweit",
    "Balzer",
    "Banse",
    "Barr",
    "Bartels",
    "Barth",
    "Barylla",
    "Baseda",
    "Battke",
    "Bauer",
    "Bauermeister",
    "Baumann",
    "Baumeister",
    "Bauschinger",
    "Bauschke",
    "Bayer",
    "Beavogui",
    "Beck",
    "Beckel",
    "Becker",
    "Beckmann",
    "Bedewitz",
    "Beele",
    "Beer",
    "Beggerow",
    "Beh",
    "Behr",
    "Behrenbruch",
    "Belz",
    "Bender",
    "Benecke",
    "Benner",
    "Benninger",
    "Benzing",
    "Berends",
    "Berger",
    "Berner",
    "Berning",
    "Bertenbreiter",
    "Best",
    "Bethke",
    "Betz",
    "Beushausen",
    "Beutelspacher",
    "Beyer",
    "Biba",
    "Bichler",
    "Bickel",
    "Biedermann",
    "Bieler",
    "Bielert",
    "Bienasch",
    "Bienias",
    "Biesenbach",
    "Bigdeli",
    "Birkemeyer",
    "Bittner",
    "Blank",
    "Blaschek",
    "Blassneck",
    "Bloch",
    "Blochwitz",
    "Blockhaus",
    "Blum",
    "Blume",
    "Bock",
    "Bode",
    "Bogdashin",
    "Bogenrieder",
    "Bohge",
    "Bolm",
    "Borgschulze",
    "Bork",
    "Bormann",
    "Bornscheuer",
    "Borrmann",
    "Borsch",
    "Boruschewski",
    "Bos",
    "Bosler",
    "Bourrouag",
    "Bouschen",
    "Boxhammer",
    "Boyde",
    "Bozsik",
    "Brand",
    "Brandenburg",
    "Brandis",
    "Brandt",
    "Brauer",
    "Braun",
    "Brehmer",
    "Breitenstein",
    "Bremer",
    "Bremser",
    "Brenner",
    "Brettschneider",
    "Breu",
    "Breuer",
    "Briesenick",
    "Bringmann",
    "Brinkmann",
    "Brix",
    "Broening",
    "Brosch",
    "Bruckmann",
    "Bruder",
    "Bruhns",
    "Brunner",
    "Bruns",
    "Bräutigam",
    "Brömme",
    "Brüggmann",
    "Buchholz",
    "Buchrucker",
    "Buder",
    "Bultmann",
    "Bunjes",
    "Burger",
    "Burghagen",
    "Burkhard",
    "Burkhardt",
    "Burmeister",
    "Busch",
    "Buschbaum",
    "Busemann",
    "Buss",
    "Busse",
    "Bussmann",
    "Byrd",
    "Bäcker",
    "Böhm",
    "Bönisch",
    "Börgeling",
    "Börner",
    "Böttner",
    "Büchele",
    "Bühler",
    "Büker",
    "Büngener",
    "Bürger",
    "Bürklein",
    "Büscher",
    "Büttner",
    "Camara",
    "Carlowitz",
    "Carlsohn",
    "Caspari",
    "Caspers",
    "Chapron",
    "Christ",
    "Cierpinski",
    "Clarius",
    "Cleem",
    "Cleve",
    "Co",
    "Conrad",
    "Cordes",
    "Cornelsen",
    "Cors",
    "Cotthardt",
    "Crews",
    "Cronjäger",
    "Crosskofp",
    "Da",
    "Dahm",
    "Dahmen",
    "Daimer",
    "Damaske",
    "Danneberg",
    "Danner",
    "Daub",
    "Daubner",
    "Daudrich",
    "Dauer",
    "Daum",
    "Dauth",
    "Dautzenberg",
    "De",
    "Decker",
    "Deckert",
    "Deerberg",
    "Dehmel",
    "Deja",
    "Delonge",
    "Demut",
    "Dengler",
    "Denner",
    "Denzinger",
    "Derr",
    "Dertmann",
    "Dethloff",
    "Deuschle",
    "Dieckmann",
    "Diedrich",
    "Diekmann",
    "Dienel",
    "Dies",
    "Dietrich",
    "Dietz",
    "Dietzsch",
    "Diezel",
    "Dilla",
    "Dingelstedt",
    "Dippl",
    "Dittmann",
    "Dittmar",
    "Dittmer",
    "Dix",
    "Dobbrunz",
    "Dobler",
    "Dohring",
    "Dolch",
    "Dold",
    "Dombrowski",
    "Donie",
    "Doskoczynski",
    "Dragu",
    "Drechsler",
    "Drees",
    "Dreher",
    "Dreier",
    "Dreissigacker",
    "Dressler",
    "Drews",
    "Duma",
    "Dutkiewicz",
    "Dyett",
    "Dylus",
    "Dächert",
    "Döbel",
    "Döring",
    "Dörner",
    "Dörre",
    "Dück",
    "Eberhard",
    "Eberhardt",
    "Ecker",
    "Eckhardt",
    "Edorh",
    "Effler",
    "Eggenmueller",
    "Ehm",
    "Ehmann",
    "Ehrig",
    "Eich",
    "Eichmann",
    "Eifert",
    "Einert",
    "Eisenlauer",
    "Ekpo",
    "Elbe",
    "Eleyth",
    "Elss",
    "Emert",
    "Emmelmann",
    "Ender",
    "Engel",
    "Engelen",
    "Engelmann",
    "Eplinius",
    "Erdmann",
    "Erhardt",
    "Erlei",
    "Erm",
    "Ernst",
    "Ertl",
    "Erwes",
    "Esenwein",
    "Esser",
    "Evers",
    "Everts",
    "Ewald",
    "Fahner",
    "Faller",
    "Falter",
    "Farber",
    "Fassbender",
    "Faulhaber",
    "Fehrig",
    "Feld",
    "Felke",
    "Feller",
    "Fenner",
    "Fenske",
    "Feuerbach",
    "Fietz",
    "Figl",
    "Figura",
    "Filipowski",
    "Filsinger",
    "Fincke",
    "Fink",
    "Finke",
    "Fischer",
    "Fitschen",
    "Fleischer",
    "Fleischmann",
    "Floder",
    "Florczak",
    "Flore",
    "Flottmann",
    "Forkel",
    "Forst",
    "Frahmeke",
    "Frank",
    "Franke",
    "Franta",
    "Frantz",
    "Franz",
    "Franzis",
    "Franzmann",
    "Frauen",
    "Frauendorf",
    "Freigang",
    "Freimann",
    "Freimuth",
    "Freisen",
    "Frenzel",
    "Frey",
    "Fricke",
    "Fried",
    "Friedek",
    "Friedenberg",
    "Friedmann",
    "Friedrich",
    "Friess",
    "Frisch",
    "Frohn",
    "Frosch",
    "Fuchs",
    "Fuhlbrügge",
    "Fusenig",
    "Fust",
    "Förster",
    "Gaba",
    "Gabius",
    "Gabler",
    "Gadschiew",
    "Gakstädter",
    "Galander",
    "Gamlin",
    "Gamper",
    "Gangnus",
    "Ganzmann",
    "Garatva",
    "Gast",
    "Gastel",
    "Gatzka",
    "Gauder",
    "Gebhardt",
    "Geese",
    "Gehre",
    "Gehrig",
    "Gehring",
    "Gehrke",
    "Geiger",
    "Geisler",
    "Geissler",
    "Gelling",
    "Gens",
    "Gerbennow",
    "Gerdel",
    "Gerhardt",
    "Gerschler",
    "Gerson",
    "Gesell",
    "Geyer",
    "Ghirmai",
    "Ghosh",
    "Giehl",
    "Gierisch",
    "Giesa",
    "Giesche",
    "Gilde",
    "Glatting",
    "Goebel",
    "Goedicke",
    "Goldbeck",
    "Goldfuss",
    "Goldkamp",
    "Goldkühle",
    "Goller",
    "Golling",
    "Gollnow",
    "Golomski",
    "Gombert",
    "Gotthardt",
    "Gottschalk",
    "Gotz",
    "Goy",
    "Gradzki",
    "Graf",
    "Grams",
    "Grasse",
    "Gratzky",
    "Grau",
    "Greb",
    "Green",
    "Greger",
    "Greithanner",
    "Greschner",
    "Griem",
    "Griese",
    "Grimm",
    "Gromisch",
    "Gross",
    "Grosser",
    "Grossheim",
    "Grosskopf",
    "Grothaus",
    "Grothkopp",
    "Grotke",
    "Grube",
    "Gruber",
    "Grundmann",
    "Gruning",
    "Gruszecki",
    "Gröss",
    "Grötzinger",
    "Grün",
    "Grüner",
    "Gummelt",
    "Gunkel",
    "Gunther",
    "Gutjahr",
    "Gutowicz",
    "Gutschank",
    "Göbel",
    "Göckeritz",
    "Göhler",
    "Görlich",
    "Görmer",
    "Götz",
    "Götzelmann",
    "Güldemeister",
    "Günther",
    "Günz",
    "Gürbig",
    "Haack",
    "Haaf",
    "Habel",
    "Hache",
    "Hackbusch",
    "Hackelbusch",
    "Hadfield",
    "Hadwich",
    "Haferkamp",
    "Hahn",
    "Hajek",
    "Hallmann",
    "Hamann",
    "Hanenberger",
    "Hannecker",
    "Hanniske",
    "Hansen",
    "Hardy",
    "Hargasser",
    "Harms",
    "Harnapp",
    "Harter",
    "Harting",
    "Hartlieb",
    "Hartmann",
    "Hartwig",
    "Hartz",
    "Haschke",
    "Hasler",
    "Hasse",
    "Hassfeld",
    "Haug",
    "Hauke",
    "Haupt",
    "Haverney",
    "Heberstreit",
    "Hechler",
    "Hecht",
    "Heck",
    "Hedermann",
    "Hehl",
    "Heidelmann",
    "Heidler",
    "Heinemann",
    "Heinig",
    "Heinke",
    "Heinrich",
    "Heinze",
    "Heiser",
    "Heist",
    "Hellmann",
    "Helm",
    "Helmke",
    "Helpling",
    "Hengmith",
    "Henkel",
    "Hennes",
    "Henry",
    "Hense",
    "Hensel",
    "Hentel",
    "Hentschel",
    "Hentschke",
    "Hepperle",
    "Herberger",
    "Herbrand",
    "Hering",
    "Hermann",
    "Hermecke",
    "Herms",
    "Herold",
    "Herrmann",
    "Herschmann",
    "Hertel",
    "Herweg",
    "Herwig",
    "Herzenberg",
    "Hess",
    "Hesse",
    "Hessek",
    "Hessler",
    "Hetzler",
    "Heuck",
    "Heydemüller",
    "Hiebl",
    "Hildebrand",
    "Hildenbrand",
    "Hilgendorf",
    "Hillard",
    "Hiller",
    "Hingsen",
    "Hingst",
    "Hinrichs",
    "Hirsch",
    "Hirschberg",
    "Hirt",
    "Hodea",
    "Hoffman",
    "Hoffmann",
    "Hofmann",
    "Hohenberger",
    "Hohl",
    "Hohn",
    "Hohnheiser",
    "Hold",
    "Holdt",
    "Holinski",
    "Holl",
    "Holtfreter",
    "Holz",
    "Holzdeppe",
    "Holzner",
    "Hommel",
    "Honz",
    "Hooss",
    "Hoppe",
    "Horak",
    "Horn",
    "Horna",
    "Hornung",
    "Hort",
    "Howard",
    "Huber",
    "Huckestein",
    "Hudak",
    "Huebel",
    "Hugo",
    "Huhn",
    "Hujo",
    "Huke",
    "Huls",
    "Humbert",
    "Huneke",
    "Huth",
    "Häber",
    "Häfner",
    "Höcke",
    "Höft",
    "Höhne",
    "Hönig",
    "Hördt",
    "Hübenbecker",
    "Hübl",
    "Hübner",
    "Hügel",
    "Hüttcher",
    "Hütter",
    "Ibe",
    "Ihly",
    "Illing",
    "Isak",
    "Isekenmeier",
    "Itt",
    "Jacob",
    "Jacobs",
    "Jagusch",
    "Jahn",
    "Jahnke",
    "Jakobs",
    "Jakubczyk",
    "Jambor",
    "Jamrozy",
    "Jander",
    "Janich",
    "Janke",
    "Jansen",
    "Jarets",
    "Jaros",
    "Jasinski",
    "Jasper",
    "Jegorov",
    "Jellinghaus",
    "Jeorga",
    "Jerschabek",
    "Jess",
    "John",
    "Jonas",
    "Jossa",
    "Jucken",
    "Jung",
    "Jungbluth",
    "Jungton",
    "Just",
    "Jürgens",
    "Kaczmarek",
    "Kaesmacher",
    "Kahl",
    "Kahlert",
    "Kahles",
    "Kahlmeyer",
    "Kaiser",
    "Kalinowski",
    "Kallabis",
    "Kallensee",
    "Kampf",
    "Kampschulte",
    "Kappe",
    "Kappler",
    "Karhoff",
    "Karrass",
    "Karst",
    "Karsten",
    "Karus",
    "Kass",
    "Kasten",
    "Kastner",
    "Katzinski",
    "Kaufmann",
    "Kaul",
    "Kausemann",
    "Kawohl",
    "Kazmarek",
    "Kedzierski",
    "Keil",
    "Keiner",
    "Keller",
    "Kelm",
    "Kempe",
    "Kemper",
    "Kempter",
    "Kerl",
    "Kern",
    "Kesselring",
    "Kesselschläger",
    "Kette",
    "Kettenis",
    "Keutel",
    "Kick",
    "Kiessling",
    "Kinadeter",
    "Kinzel",
    "Kinzy",
    "Kirch",
    "Kirst",
    "Kisabaka",
    "Klaas",
    "Klabuhn",
    "Klapper",
    "Klauder",
    "Klaus",
    "Kleeberg",
    "Kleiber",
    "Klein",
    "Kleinert",
    "Kleininger",
    "Kleinmann",
    "Kleinsteuber",
    "Kleiss",
    "Klemme",
    "Klimczak",
    "Klinger",
    "Klink",
    "Klopsch",
    "Klose",
    "Kloss",
    "Kluge",
    "Kluwe",
    "Knabe",
    "Kneifel",
    "Knetsch",
    "Knies",
    "Knippel",
    "Knobel",
    "Knoblich",
    "Knoll",
    "Knorr",
    "Knorscheidt",
    "Knut",
    "Kobs",
    "Koch",
    "Kochan",
    "Kock",
    "Koczulla",
    "Koderisch",
    "Koehl",
    "Koehler",
    "Koenig",
    "Koester",
    "Kofferschlager",
    "Koha",
    "Kohle",
    "Kohlmann",
    "Kohnle",
    "Kohrt",
    "Koj",
    "Kolb",
    "Koleiski",
    "Kolokas",
    "Komoll",
    "Konieczny",
    "Konig",
    "Konow",
    "Konya",
    "Koob",
    "Kopf",
    "Kosenkow",
    "Koster",
    "Koszewski",
    "Koubaa",
    "Kovacs",
    "Kowalick",
    "Kowalinski",
    "Kozakiewicz",
    "Krabbe",
    "Kraft",
    "Kral",
    "Kramer",
    "Krauel",
    "Kraus",
    "Krause",
    "Krauspe",
    "Kreb",
    "Krebs",
    "Kreissig",
    "Kresse",
    "Kreutz",
    "Krieger",
    "Krippner",
    "Krodinger",
    "Krohn",
    "Krol",
    "Kron",
    "Krueger",
    "Krug",
    "Kruger",
    "Krull",
    "Kruschinski",
    "Krämer",
    "Kröckert",
    "Kröger",
    "Krüger",
    "Kubera",
    "Kufahl",
    "Kuhlee",
    "Kuhnen",
    "Kulimann",
    "Kulma",
    "Kumbernuss",
    "Kummle",
    "Kunz",
    "Kupfer",
    "Kupprion",
    "Kuprion",
    "Kurnicki",
    "Kurrat",
    "Kurschilgen",
    "Kuschewitz",
    "Kuschmann",
    "Kuske",
    "Kustermann",
    "Kutscherauer",
    "Kutzner",
    "Kwadwo",
    "Kähler",
    "Käther",
    "Köhler",
    "Köhrbrück",
    "Köhre",
    "Kölotzei",
    "König",
    "Köpernick",
    "Köseoglu",
    "Kúhn",
    "Kúhnert",
    "Kühn",
    "Kühnel",
    "Kühnemund",
    "Kühnert",
    "Kühnke",
    "Küsters",
    "Küter",
    "Laack",
    "Lack",
    "Ladewig",
    "Lakomy",
    "Lammert",
    "Lamos",
    "Landmann",
    "Lang",
    "Lange",
    "Langfeld",
    "Langhirt",
    "Lanig",
    "Lauckner",
    "Lauinger",
    "Laurén",
    "Lausecker",
    "Laux",
    "Laws",
    "Lax",
    "Leberer",
    "Lehmann",
    "Lehner",
    "Leibold",
    "Leide",
    "Leimbach",
    "Leipold",
    "Leist",
    "Leiter",
    "Leiteritz",
    "Leitheim",
    "Leiwesmeier",
    "Lenfers",
    "Lenk",
    "Lenz",
    "Lenzen",
    "Leo",
    "Lepthin",
    "Lesch",
    "Leschnik",
    "Letzelter",
    "Lewin",
    "Lewke",
    "Leyckes",
    "Lg",
    "Lichtenfeld",
    "Lichtenhagen",
    "Lichtl",
    "Liebach",
    "Liebe",
    "Liebich",
    "Liebold",
    "Lieder",
    "Lienshöft",
    "Linden",
    "Lindenberg",
    "Lindenmayer",
    "Lindner",
    "Linke",
    "Linnenbaum",
    "Lippe",
    "Lipske",
    "Lipus",
    "Lischka",
    "Lobinger",
    "Logsch",
    "Lohmann",
    "Lohre",
    "Lohse",
    "Lokar",
    "Loogen",
    "Lorenz",
    "Losch",
    "Loska",
    "Lott",
    "Loy",
    "Lubina",
    "Ludolf",
    "Lufft",
    "Lukoschek",
    "Lutje",
    "Lutz",
    "Löser",
    "Löwa",
    "Lübke",
    "Maak",
    "Maczey",
    "Madetzky",
    "Madubuko",
    "Mai",
    "Maier",
    "Maisch",
    "Malek",
    "Malkus",
    "Mallmann",
    "Malucha",
    "Manns",
    "Manz",
    "Marahrens",
    "Marchewski",
    "Margis",
    "Markowski",
    "Marl",
    "Marner",
    "Marquart",
    "Marschek",
    "Martel",
    "Marten",
    "Martin",
    "Marx",
    "Marxen",
    "Mathes",
    "Mathies",
    "Mathiszik",
    "Matschke",
    "Mattern",
    "Matthes",
    "Matula",
    "Mau",
    "Maurer",
    "Mauroff",
    "May",
    "Maybach",
    "Mayer",
    "Mebold",
    "Mehl",
    "Mehlhorn",
    "Mehlorn",
    "Meier",
    "Meisch",
    "Meissner",
    "Meloni",
    "Melzer",
    "Menga",
    "Menne",
    "Mensah",
    "Mensing",
    "Merkel",
    "Merseburg",
    "Mertens",
    "Mesloh",
    "Metzger",
    "Metzner",
    "Mewes",
    "Meyer",
    "Michallek",
    "Michel",
    "Mielke",
    "Mikitenko",
    "Milde",
    "Minah",
    "Mintzlaff",
    "Mockenhaupt",
    "Moede",
    "Moedl",
    "Moeller",
    "Moguenara",
    "Mohr",
    "Mohrhard",
    "Molitor",
    "Moll",
    "Moller",
    "Molzan",
    "Montag",
    "Moormann",
    "Mordhorst",
    "Morgenstern",
    "Morhelfer",
    "Moritz",
    "Moser",
    "Motchebon",
    "Motzenbbäcker",
    "Mrugalla",
    "Muckenthaler",
    "Mues",
    "Muller",
    "Mulrain",
    "Mächtig",
    "Mäder",
    "Möcks",
    "Mögenburg",
    "Möhsner",
    "Möldner",
    "Möllenbeck",
    "Möller",
    "Möllinger",
    "Mörsch",
    "Mühleis",
    "Müller",
    "Münch",
    "Nabein",
    "Nabow",
    "Nagel",
    "Nannen",
    "Nastvogel",
    "Nau",
    "Naubert",
    "Naumann",
    "Ne",
    "Neimke",
    "Nerius",
    "Neubauer",
    "Neubert",
    "Neuendorf",
    "Neumair",
    "Neumann",
    "Neupert",
    "Neurohr",
    "Neuschwander",
    "Newton",
    "Ney",
    "Nicolay",
    "Niedermeier",
    "Nieklauson",
    "Niklaus",
    "Nitzsche",
    "Noack",
    "Nodler",
    "Nolte",
    "Normann",
    "Norris",
    "Northoff",
    "Nowak",
    "Nussbeck",
    "Nwachukwu",
    "Nytra",
    "Nöh",
    "Oberem",
    "Obergföll",
    "Obermaier",
    "Ochs",
    "Oeser",
    "Olbrich",
    "Onnen",
    "Ophey",
    "Oppong",
    "Orth",
    "Orthmann",
    "Oschkenat",
    "Osei",
    "Osenberg",
    "Ostendarp",
    "Ostwald",
    "Otte",
    "Otto",
    "Paesler",
    "Pajonk",
    "Pallentin",
    "Panzig",
    "Paschke",
    "Patzwahl",
    "Paukner",
    "Peselman",
    "Peter",
    "Peters",
    "Petzold",
    "Pfeiffer",
    "Pfennig",
    "Pfersich",
    "Pfingsten",
    "Pflieger",
    "Pflügner",
    "Philipp",
    "Pichlmaier",
    "Piesker",
    "Pietsch",
    "Pingpank",
    "Pinnock",
    "Pippig",
    "Pitschugin",
    "Plank",
    "Plass",
    "Platzer",
    "Plauk",
    "Plautz",
    "Pletsch",
    "Plotzitzka",
    "Poehn",
    "Poeschl",
    "Pogorzelski",
    "Pohl",
    "Pohland",
    "Pohle",
    "Polifka",
    "Polizzi",
    "Pollmächer",
    "Pomp",
    "Ponitzsch",
    "Porsche",
    "Porth",
    "Poschmann",
    "Poser",
    "Pottel",
    "Prah",
    "Prange",
    "Prediger",
    "Pressler",
    "Preuk",
    "Preuss",
    "Prey",
    "Priemer",
    "Proske",
    "Pusch",
    "Pöche",
    "Pöge",
    "Raabe",
    "Rabenstein",
    "Rach",
    "Radtke",
    "Rahn",
    "Ranftl",
    "Rangen",
    "Ranz",
    "Rapp",
    "Rath",
    "Rau",
    "Raubuch",
    "Raukuc",
    "Rautenkranz",
    "Rehwagen",
    "Reiber",
    "Reichardt",
    "Reichel",
    "Reichling",
    "Reif",
    "Reifenrath",
    "Reimann",
    "Reinberg",
    "Reinelt",
    "Reinhardt",
    "Reinke",
    "Reitze",
    "Renk",
    "Rentz",
    "Renz",
    "Reppin",
    "Restle",
    "Restorff",
    "Retzke",
    "Reuber",
    "Reumann",
    "Reus",
    "Reuss",
    "Reusse",
    "Rheder",
    "Rhoden",
    "Richards",
    "Richter",
    "Riedel",
    "Riediger",
    "Rieger",
    "Riekmann",
    "Riepl",
    "Riermeier",
    "Riester",
    "Riethmüller",
    "Rietmüller",
    "Rietscher",
    "Ringel",
    "Ringer",
    "Rink",
    "Ripken",
    "Ritosek",
    "Ritschel",
    "Ritter",
    "Rittweg",
    "Ritz",
    "Roba",
    "Rockmeier",
    "Rodehau",
    "Rodowski",
    "Roecker",
    "Roggatz",
    "Rohländer",
    "Rohrer",
    "Rokossa",
    "Roleder",
    "Roloff",
    "Roos",
    "Rosbach",
    "Roschinsky",
    "Rose",
    "Rosenauer",
    "Rosenbauer",
    "Rosenthal",
    "Rosksch",
    "Rossberg",
    "Rossler",
    "Roth",
    "Rother",
    "Ruch",
    "Ruckdeschel",
    "Rumpf",
    "Rupprecht",
    "Ruth",
    "Ryjikh",
    "Ryzih",
    "Rädler",
    "Räntsch",
    "Rödiger",
    "Röse",
    "Röttger",
    "Rücker",
    "Rüdiger",
    "Rüter",
    "Sachse",
    "Sack",
    "Saflanis",
    "Sagafe",
    "Sagonas",
    "Sahner",
    "Saile",
    "Sailer",
    "Salow",
    "Salzer",
    "Salzmann",
    "Sammert",
    "Sander",
    "Sarvari",
    "Sattelmaier",
    "Sauer",
    "Sauerland",
    "Saumweber",
    "Savoia",
    "Scc",
    "Schacht",
    "Schaefer",
    "Schaffarzik",
    "Schahbasian",
    "Scharf",
    "Schedler",
    "Scheer",
    "Schelk",
    "Schellenbeck",
    "Schembera",
    "Schenk",
    "Scherbarth",
    "Scherer",
    "Schersing",
    "Scherz",
    "Scheurer",
    "Scheuring",
    "Scheytt",
    "Schielke",
    "Schieskow",
    "Schildhauer",
    "Schilling",
    "Schima",
    "Schimmer",
    "Schindzielorz",
    "Schirmer",
    "Schirrmeister",
    "Schlachter",
    "Schlangen",
    "Schlawitz",
    "Schlechtweg",
    "Schley",
    "Schlicht",
    "Schlitzer",
    "Schmalzle",
    "Schmid",
    "Schmidt",
    "Schmidtchen",
    "Schmitt",
    "Schmitz",
    "Schmuhl",
    "Schneider",
    "Schnelting",
    "Schnieder",
    "Schniedermeier",
    "Schnürer",
    "Schoberg",
    "Scholz",
    "Schonberg",
    "Schondelmaier",
    "Schorr",
    "Schott",
    "Schottmann",
    "Schouren",
    "Schrader",
    "Schramm",
    "Schreck",
    "Schreiber",
    "Schreiner",
    "Schreiter",
    "Schroder",
    "Schröder",
    "Schuermann",
    "Schuff",
    "Schuhaj",
    "Schuldt",
    "Schult",
    "Schulte",
    "Schultz",
    "Schultze",
    "Schulz",
    "Schulze",
    "Schumacher",
    "Schumann",
    "Schupp",
    "Schuri",
    "Schuster",
    "Schwab",
    "Schwalm",
    "Schwanbeck",
    "Schwandke",
    "Schwanitz",
    "Schwarthoff",
    "Schwartz",
    "Schwarz",
    "Schwarzer",
    "Schwarzkopf",
    "Schwarzmeier",
    "Schwatlo",
    "Schweisfurth",
    "Schwennen",
    "Schwerdtner",
    "Schwidde",
    "Schwirkschlies",
    "Schwuchow",
    "Schäfer",
    "Schäffel",
    "Schäffer",
    "Schäning",
    "Schöckel",
    "Schönball",
    "Schönbeck",
    "Schönberg",
    "Schönebeck",
    "Schönenberger",
    "Schönfeld",
    "Schönherr",
    "Schönlebe",
    "Schötz",
    "Schüler",
    "Schüppel",
    "Schütz",
    "Schütze",
    "Seeger",
    "Seelig",
    "Sehls",
    "Seibold",
    "Seidel",
    "Seiders",
    "Seigel",
    "Seiler",
    "Seitz",
    "Semisch",
    "Senkel",
    "Sewald",
    "Siebel",
    "Siebert",
    "Siegling",
    "Sielemann",
    "Siemon",
    "Siener",
    "Sievers",
    "Siewert",
    "Sihler",
    "Sillah",
    "Simon",
    "Sinnhuber",
    "Sischka",
    "Skibicki",
    "Sladek",
    "Slotta",
    "Smieja",
    "Soboll",
    "Sokolowski",
    "Soller",
    "Sollner",
    "Sommer",
    "Somssich",
    "Sonn",
    "Sonnabend",
    "Spahn",
    "Spank",
    "Spelmeyer",
    "Spiegelburg",
    "Spielvogel",
    "Spinner",
    "Spitzmüller",
    "Splinter",
    "Sporrer",
    "Sprenger",
    "Spöttel",
    "Stahl",
    "Stang",
    "Stanger",
    "Stauss",
    "Steding",
    "Steffen",
    "Steffny",
    "Steidl",
    "Steigauf",
    "Stein",
    "Steinecke",
    "Steinert",
    "Steinkamp",
    "Steinmetz",
    "Stelkens",
    "Stengel",
    "Stengl",
    "Stenzel",
    "Stepanov",
    "Stephan",
    "Stern",
    "Steuk",
    "Stief",
    "Stifel",
    "Stoll",
    "Stolle",
    "Stolz",
    "Storl",
    "Storp",
    "Stoutjesdijk",
    "Stratmann",
    "Straub",
    "Strausa",
    "Streck",
    "Streese",
    "Strege",
    "Streit",
    "Streller",
    "Strieder",
    "Striezel",
    "Strogies",
    "Strohschank",
    "Strunz",
    "Strutz",
    "Stube",
    "Stöckert",
    "Stöppler",
    "Stöwer",
    "Stürmer",
    "Suffa",
    "Sujew",
    "Sussmann",
    "Suthe",
    "Sutschet",
    "Swillims",
    "Szendrei",
    "Sören",
    "Sürth",
    "Tafelmeier",
    "Tang",
    "Tasche",
    "Taufratshofer",
    "Tegethof",
    "Teichmann",
    "Tepper",
    "Terheiden",
    "Terlecki",
    "Teufel",
    "Theele",
    "Thieke",
    "Thimm",
    "Thiomas",
    "Thomas",
    "Thriene",
    "Thränhardt",
    "Thust",
    "Thyssen",
    "Thöne",
    "Tidow",
    "Tiedtke",
    "Tietze",
    "Tilgner",
    "Tillack",
    "Timmermann",
    "Tischler",
    "Tischmann",
    "Tittman",
    "Tivontschik",
    "Tonat",
    "Tonn",
    "Trampeli",
    "Trauth",
    "Trautmann",
    "Travan",
    "Treff",
    "Tremmel",
    "Tress",
    "Tsamonikian",
    "Tschiers",
    "Tschirch",
    "Tuch",
    "Tucholke",
    "Tudow",
    "Tuschmo",
    "Tächl",
    "Többen",
    "Töpfer",
    "Uhlemann",
    "Uhlig",
    "Uhrig",
    "Uibel",
    "Uliczka",
    "Ullmann",
    "Ullrich",
    "Umbach",
    "Umlauft",
    "Umminger",
    "Unger",
    "Unterpaintner",
    "Urban",
    "Urbaniak",
    "Urbansky",
    "Urhig",
    "Vahlensieck",
    "Van",
    "Vangermain",
    "Vater",
    "Venghaus",
    "Verniest",
    "Verzi",
    "Vey",
    "Viellehner",
    "Vieweg",
    "Voelkel",
    "Vogel",
    "Vogelgsang",
    "Vogt",
    "Voigt",
    "Vokuhl",
    "Volk",
    "Volker",
    "Volkmann",
    "Von",
    "Vona",
    "Vontein",
    "Wachenbrunner",
    "Wachtel",
    "Wagner",
    "Waibel",
    "Wakan",
    "Waldmann",
    "Wallner",
    "Wallstab",
    "Walter",
    "Walther",
    "Walton",
    "Walz",
    "Wanner",
    "Wartenberg",
    "Waschbüsch",
    "Wassilew",
    "Wassiluk",
    "Weber",
    "Wehrsen",
    "Weidlich",
    "Weidner",
    "Weigel",
    "Weight",
    "Weiler",
    "Weimer",
    "Weis",
    "Weiss",
    "Weller",
    "Welsch",
    "Welz",
    "Welzel",
    "Weniger",
    "Wenk",
    "Werle",
    "Werner",
    "Werrmann",
    "Wessel",
    "Wessinghage",
    "Weyel",
    "Wezel",
    "Wichmann",
    "Wickert",
    "Wiebe",
    "Wiechmann",
    "Wiegelmann",
    "Wierig",
    "Wiese",
    "Wieser",
    "Wilhelm",
    "Wilky",
    "Will",
    "Willwacher",
    "Wilts",
    "Wimmer",
    "Winkelmann",
    "Winkler",
    "Winter",
    "Wischek",
    "Wischer",
    "Wissing",
    "Wittich",
    "Wittl",
    "Wolf",
    "Wolfarth",
    "Wolff",
    "Wollenberg",
    "Wollmann",
    "Woytkowska",
    "Wujak",
    "Wurm",
    "Wyludda",
    "Wölpert",
    "Wöschler",
    "Wühn",
    "Wünsche",
    "Zach",
    "Zaczkiewicz",
    "Zahn",
    "Zaituc",
    "Zandt",
    "Zanner",
    "Zapletal",
    "Zauber",
    "Zeidler",
    "Zekl",
    "Zender",
    "Zeuch",
    "Zeyen",
    "Zeyhle",
    "Ziegler",
    "Zimanyi",
    "Zimmer",
    "Zimmermann",
    "Zinser",
    "Zintl",
    "Zipp",
    "Zipse",
    "Zschunke",
    "Zuber",
    "Zwiener",
    "Zümsande",
    "Östringer",
    "Überacker"
  ],
  "prefix": [
    "Hr.",
    "Fr.",
    "Dr.",
    "Prof. Dr."
  ],
  "nobility_title_prefix": [
    "zu",
    "von",
    "vom",
    "von der"
  ],
  "name": [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{nobility_title_prefix} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}"
  ]
};
de.phone_number = {
  "formats": [
    "(0###) #########",
    "(0####) #######",
    "+49-###-#######",
    "+49-####-########"
  ]
};
de.cell_phone = {
  "formats": [
    "+49-1##-#######",
    "+49-1###-########"
  ]
};

},{}],55:[function(require,module,exports){
var de_AT = {};
module["exports"] = de_AT;
de_AT.title = "German (Austria)";
de_AT.address = {
  "country": [
    "Ägypten",
    "Äquatorialguinea",
    "Äthiopien",
    "Österreich",
    "Afghanistan",
    "Albanien",
    "Algerien",
    "Amerikanisch-Samoa",
    "Amerikanische Jungferninseln",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antarktis",
    "Antigua und Barbuda",
    "Argentinien",
    "Armenien",
    "Aruba",
    "Aserbaidschan",
    "Australien",
    "Bahamas",
    "Bahrain",
    "Bangladesch",
    "Barbados",
    "Belarus",
    "Belgien",
    "Belize",
    "Benin",
    "die Bermudas",
    "Bhutan",
    "Bolivien",
    "Bosnien und Herzegowina",
    "Botsuana",
    "Bouvetinsel",
    "Brasilien",
    "Britische Jungferninseln",
    "Britisches Territorium im Indischen Ozean",
    "Brunei Darussalam",
    "Bulgarien",
    "Burkina Faso",
    "Burundi",
    "Chile",
    "China",
    "Cookinseln",
    "Costa Rica",
    "Dänemark",
    "Demokratische Republik Kongo",
    "Demokratische Volksrepublik Korea",
    "Deutschland",
    "Dominica",
    "Dominikanische Republik",
    "Dschibuti",
    "Ecuador",
    "El Salvador",
    "Eritrea",
    "Estland",
    "Färöer",
    "Falklandinseln",
    "Fidschi",
    "Finnland",
    "Frankreich",
    "Französisch-Guayana",
    "Französisch-Polynesien",
    "Französische Gebiete im südlichen Indischen Ozean",
    "Gabun",
    "Gambia",
    "Georgien",
    "Ghana",
    "Gibraltar",
    "Grönland",
    "Grenada",
    "Griechenland",
    "Guadeloupe",
    "Guam",
    "Guatemala",
    "Guinea",
    "Guinea-Bissau",
    "Guyana",
    "Haiti",
    "Heard und McDonaldinseln",
    "Honduras",
    "Hongkong",
    "Indien",
    "Indonesien",
    "Irak",
    "Iran",
    "Irland",
    "Island",
    "Israel",
    "Italien",
    "Jamaika",
    "Japan",
    "Jemen",
    "Jordanien",
    "Jugoslawien",
    "Kaimaninseln",
    "Kambodscha",
    "Kamerun",
    "Kanada",
    "Kap Verde",
    "Kasachstan",
    "Katar",
    "Kenia",
    "Kirgisistan",
    "Kiribati",
    "Kleinere amerikanische Überseeinseln",
    "Kokosinseln",
    "Kolumbien",
    "Komoren",
    "Kongo",
    "Kroatien",
    "Kuba",
    "Kuwait",
    "Laos",
    "Lesotho",
    "Lettland",
    "Libanon",
    "Liberia",
    "Libyen",
    "Liechtenstein",
    "Litauen",
    "Luxemburg",
    "Macau",
    "Madagaskar",
    "Malawi",
    "Malaysia",
    "Malediven",
    "Mali",
    "Malta",
    "ehemalige jugoslawische Republik Mazedonien",
    "Marokko",
    "Marshallinseln",
    "Martinique",
    "Mauretanien",
    "Mauritius",
    "Mayotte",
    "Mexiko",
    "Mikronesien",
    "Monaco",
    "Mongolei",
    "Montserrat",
    "Mosambik",
    "Myanmar",
    "Nördliche Marianen",
    "Namibia",
    "Nauru",
    "Nepal",
    "Neukaledonien",
    "Neuseeland",
    "Nicaragua",
    "Niederländische Antillen",
    "Niederlande",
    "Niger",
    "Nigeria",
    "Niue",
    "Norfolkinsel",
    "Norwegen",
    "Oman",
    "Osttimor",
    "Pakistan",
    "Palau",
    "Panama",
    "Papua-Neuguinea",
    "Paraguay",
    "Peru",
    "Philippinen",
    "Pitcairninseln",
    "Polen",
    "Portugal",
    "Puerto Rico",
    "Réunion",
    "Republik Korea",
    "Republik Moldau",
    "Ruanda",
    "Rumänien",
    "Russische Föderation",
    "São Tomé und Príncipe",
    "Südafrika",
    "Südgeorgien und Südliche Sandwichinseln",
    "Salomonen",
    "Sambia",
    "Samoa",
    "San Marino",
    "Saudi-Arabien",
    "Schweden",
    "Schweiz",
    "Senegal",
    "Seychellen",
    "Sierra Leone",
    "Simbabwe",
    "Singapur",
    "Slowakei",
    "Slowenien",
    "Somalien",
    "Spanien",
    "Sri Lanka",
    "St. Helena",
    "St. Kitts und Nevis",
    "St. Lucia",
    "St. Pierre und Miquelon",
    "St. Vincent und die Grenadinen",
    "Sudan",
    "Surinam",
    "Svalbard und Jan Mayen",
    "Swasiland",
    "Syrien",
    "Türkei",
    "Tadschikistan",
    "Taiwan",
    "Tansania",
    "Thailand",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidad und Tobago",
    "Tschad",
    "Tschechische Republik",
    "Tunesien",
    "Turkmenistan",
    "Turks- und Caicosinseln",
    "Tuvalu",
    "Uganda",
    "Ukraine",
    "Ungarn",
    "Uruguay",
    "Usbekistan",
    "Vanuatu",
    "Vatikanstadt",
    "Venezuela",
    "Vereinigte Arabische Emirate",
    "Vereinigte Staaten",
    "Vereinigtes Königreich",
    "Vietnam",
    "Wallis und Futuna",
    "Weihnachtsinsel",
    "Westsahara",
    "Zentralafrikanische Republik",
    "Zypern"
  ],
  "street_root": [
    "Ahorn",
    "Ahorngasse (St. Andrä)",
    "Alleestraße (Poysbrunn)",
    "Alpenlandstraße",
    "Alte Poststraße",
    "Alte Ufergasse",
    "Am Kronawett (Hagenbrunn)",
    "Am Mühlwasser",
    "Am Rebenhang",
    "Am Sternweg",
    "Anton Wildgans-Straße",
    "Auer-von-Welsbach-Weg",
    "Auf der Stift",
    "Aufeldgasse",
    "Bahngasse",
    "Bahnhofstraße",
    "Bahnstraße (Gerhaus)",
    "Basteigasse",
    "Berggasse",
    "Bergstraße",
    "Birkenweg",
    "Blasiussteig",
    "Blattur",
    "Bruderhofgasse",
    "Brunnelligasse",
    "Bühelweg",
    "Darnautgasse",
    "Donaugasse",
    "Dorfplatz (Haselbach)",
    "Dr.-Oberreiter-Straße",
    "Dr.Karl Holoubek-Str.",
    "Drautal Bundesstraße",
    "Dürnrohrer Straße",
    "Ebenthalerstraße",
    "Eckgrabenweg",
    "Erlenstraße",
    "Erlenweg",
    "Eschenweg",
    "Etrichgasse",
    "Fassergasse",
    "Feichteggerwiese",
    "Feld-Weg",
    "Feldgasse",
    "Feldstapfe",
    "Fischpointweg",
    "Flachbergstraße",
    "Flurweg",
    "Franz Schubert-Gasse",
    "Franz-Schneeweiß-Weg",
    "Franz-von-Assisi-Straße",
    "Fritz-Pregl-Straße",
    "Fuchsgrubenweg",
    "Födlerweg",
    "Föhrenweg",
    "Fünfhaus (Paasdorf)",
    "Gabelsbergerstraße",
    "Gartenstraße",
    "Geigen",
    "Geigergasse",
    "Gemeindeaugasse",
    "Gemeindeplatz",
    "Georg-Aichinger-Straße",
    "Glanfeldbachweg",
    "Graben (Burgauberg)",
    "Grub",
    "Gröretgasse",
    "Grünbach",
    "Gösting",
    "Hainschwang",
    "Hans-Mauracher-Straße",
    "Hart",
    "Teichstraße",
    "Hauptplatz",
    "Hauptstraße",
    "Heideweg",
    "Heinrich Landauer Gasse",
    "Helenengasse",
    "Hermann von Gilmweg",
    "Hermann-Löns-Gasse",
    "Herminengasse",
    "Hernstorferstraße",
    "Hirsdorf",
    "Hochfeistritz",
    "Hochhaus Neue Donau",
    "Hof",
    "Hussovits Gasse",
    "Höggen",
    "Hütten",
    "Janzgasse",
    "Jochriemgutstraße",
    "Johann-Strauß-Gasse",
    "Julius-Raab-Straße",
    "Kahlenberger Straße",
    "Karl Kraft-Straße",
    "Kegelprielstraße",
    "Keltenberg-Eponaweg",
    "Kennedybrücke",
    "Kerpelystraße",
    "Kindergartenstraße",
    "Kinderheimgasse",
    "Kirchenplatz",
    "Kirchweg",
    "Klagenfurter Straße",
    "Klamm",
    "Kleinbaumgarten",
    "Klingergasse",
    "Koloniestraße",
    "Konrad-Duden-Gasse",
    "Krankenhausstraße",
    "Kubinstraße",
    "Köhldorfergasse",
    "Lackenweg",
    "Lange Mekotte",
    "Leifling",
    "Leopold Frank-Straße (Pellendorf)",
    "Lerchengasse (Pirka)",
    "Lichtensternsiedlung V",
    "Lindenhofstraße",
    "Lindenweg",
    "Luegstraße",
    "Maierhof",
    "Malerweg",
    "Mitterweg",
    "Mittlere Hauptstraße",
    "Moosbachgasse",
    "Morettigasse",
    "Musikpavillon Riezlern",
    "Mühlboden",
    "Mühle",
    "Mühlenweg",
    "Neustiftgasse",
    "Niederegg",
    "Niedergams",
    "Nordwestbahnbrücke",
    "Oberbödenalm",
    "Obere Berggasse",
    "Oedt",
    "Am Färberberg",
    "Ottogasse",
    "Paul Peters-Gasse",
    "Perspektivstraße",
    "Poppichl",
    "Privatweg",
    "Prixgasse",
    "Pyhra",
    "Radetzkystraße",
    "Raiden",
    "Reichensteinstraße",
    "Reitbauernstraße",
    "Reiterweg",
    "Reitschulgasse",
    "Ringweg",
    "Rupertistraße",
    "Römerstraße",
    "Römerweg",
    "Sackgasse",
    "Schaunbergerstraße",
    "Schloßweg",
    "Schulgasse (Langeck)",
    "Schönholdsiedlung",
    "Seeblick",
    "Seestraße",
    "Semriacherstraße",
    "Simling",
    "Sipbachzeller Straße",
    "Sonnenweg",
    "Spargelfeldgasse",
    "Spiesmayrweg",
    "Sportplatzstraße",
    "St.Ulrich",
    "Steilmannstraße",
    "Steingrüneredt",
    "Strassfeld",
    "Straßerau",
    "Stöpflweg",
    "Stüra",
    "Taferngasse",
    "Tennweg",
    "Thomas Koschat-Gasse",
    "Tiroler Straße",
    "Torrogasse",
    "Uferstraße (Schwarzau am Steinfeld)",
    "Unterdörfl",
    "Unterer Sonnrainweg",
    "Verwaltersiedlung",
    "Waldhang",
    "Wasen",
    "Weidenstraße",
    "Weiherweg",
    "Wettsteingasse",
    "Wiener Straße",
    "Windisch",
    "Zebragasse",
    "Zellerstraße",
    "Ziehrerstraße",
    "Zulechnerweg",
    "Zwergjoch",
    "Ötzbruck"
  ],
  "building_number": [
    "###",
    "##",
    "#",
    "##a",
    "##b",
    "##c"
  ],
  "secondary_address": [
    "Apt. ###",
    "Zimmer ###",
    "# OG"
  ],
  "postcode": [
    "####"
  ],
  "state": [
    "Burgenland",
    "Kärnten",
    "Niederösterreich",
    "Oberösterreich",
    "Salzburg",
    "Steiermark",
    "Tirol",
    "Vorarlberg",
    "Wien"
  ],
  "state_abbr": [
    "Bgld.",
    "Ktn.",
    "NÖ",
    "OÖ",
    "Sbg.",
    "Stmk.",
    "T",
    "Vbg.",
    "W"
  ],
  "city_name": [
    "Aigen im Mühlkreis",
    "Allerheiligen bei Wildon",
    "Altenfelden",
    "Arriach",
    "Axams",
    "Baumgartenberg",
    "Bergern im Dunkelsteinerwald",
    "Berndorf bei Salzburg",
    "Bregenz",
    "Breitenbach am Inn",
    "Deutsch-Wagram",
    "Dienten am Hochkönig",
    "Dietach",
    "Dornbirn",
    "Dürnkrut",
    "Eben im Pongau",
    "Ebenthal in Kärnten",
    "Eichgraben",
    "Eisenstadt",
    "Ellmau",
    "Feistritz am Wechsel",
    "Finkenberg",
    "Fiss",
    "Frantschach-St. Gertraud",
    "Fritzens",
    "Gams bei Hieflau",
    "Geiersberg",
    "Graz",
    "Großhöflein",
    "Gößnitz",
    "Hartl",
    "Hausleiten",
    "Herzogenburg",
    "Hinterhornbach",
    "Hochwolkersdorf",
    "Ilz",
    "Ilztal",
    "Innerbraz",
    "Innsbruck",
    "Itter",
    "Jagerberg",
    "Jeging",
    "Johnsbach",
    "Johnsdorf-Brunn",
    "Jungholz",
    "Kirchdorf am Inn",
    "Klagenfurt",
    "Kottes-Purk",
    "Krumau am Kamp",
    "Krumbach",
    "Lavamünd",
    "Lech",
    "Linz",
    "Ludesch",
    "Lödersdorf",
    "Marbach an der Donau",
    "Mattsee",
    "Mautern an der Donau",
    "Mauterndorf",
    "Mitterbach am Erlaufsee",
    "Neudorf bei Passail",
    "Neudorf bei Staatz",
    "Neukirchen an der Enknach",
    "Neustift an der Lafnitz",
    "Niederleis",
    "Oberndorf in Tirol",
    "Oberstorcha",
    "Oberwaltersdorf",
    "Oed-Oehling",
    "Ort im Innkreis",
    "Pilgersdorf",
    "Pitschgau",
    "Pollham",
    "Preitenegg",
    "Purbach am Neusiedler See",
    "Rabenwald",
    "Raiding",
    "Rastenfeld",
    "Ratten",
    "Rettenegg",
    "Salzburg",
    "Sankt Johann im Saggautal",
    "St. Peter am Kammersberg",
    "St. Pölten",
    "St. Veit an der Glan",
    "Taxenbach",
    "Tragwein",
    "Trebesing",
    "Trieben",
    "Turnau",
    "Ungerdorf",
    "Unterauersbach",
    "Unterstinkenbrunn",
    "Untertilliach",
    "Uttendorf",
    "Vals",
    "Velden am Wörther See",
    "Viehhofen",
    "Villach",
    "Vitis",
    "Waidhofen an der Thaya",
    "Waldkirchen am Wesen",
    "Weißkirchen an der Traun",
    "Wien",
    "Wimpassing im Schwarzatale",
    "Ybbs an der Donau",
    "Ybbsitz",
    "Yspertal",
    "Zeillern",
    "Zell am Pettenfirst",
    "Zell an der Pram",
    "Zerlach",
    "Zwölfaxing",
    "Öblarn",
    "Übelbach",
    "Überackern",
    "Übersaxen",
    "Übersbach"
  ],
  "city": [
    "#{city_name}"
  ],
  "street_name": [
    "#{street_root}"
  ],
  "street_address": [
    "#{street_name} #{building_number}"
  ],
  "default_country": [
    "Österreich"
  ]
};
de_AT.company = {
  "suffix": [
    "GmbH",
    "AG",
    "Gruppe",
    "KG",
    "GmbH & Co. KG",
    "UG",
    "OHG"
  ],
  "legal_form": [
    "GmbH",
    "AG",
    "Gruppe",
    "KG",
    "GmbH & Co. KG",
    "UG",
    "OHG"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} und #{Name.last_name}"
  ]
};
de_AT.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ],
  "domain_suffix": [
    "com",
    "info",
    "name",
    "net",
    "org",
    "de",
    "ch",
    "at"
  ]
};
de_AT.name = {
  "first_name": [
    "Aaron",
    "Abdul",
    "Abdullah",
    "Adam",
    "Adrian",
    "Adriano",
    "Ahmad",
    "Ahmed",
    "Ahmet",
    "Alan",
    "Albert",
    "Alessandro",
    "Alessio",
    "Alex",
    "Alexander",
    "Alfred",
    "Ali",
    "Amar",
    "Amir",
    "Amon",
    "Andre",
    "Andreas",
    "Andrew",
    "Angelo",
    "Ansgar",
    "Anthony",
    "Anton",
    "Antonio",
    "Arda",
    "Arian",
    "Armin",
    "Arne",
    "Arno",
    "Arthur",
    "Artur",
    "Arved",
    "Arvid",
    "Ayman",
    "Baran",
    "Baris",
    "Bastian",
    "Batuhan",
    "Bela",
    "Ben",
    "Benedikt",
    "Benjamin",
    "Bennet",
    "Bennett",
    "Benno",
    "Bent",
    "Berat",
    "Berkay",
    "Bernd",
    "Bilal",
    "Bjarne",
    "Björn",
    "Bo",
    "Boris",
    "Brandon",
    "Brian",
    "Bruno",
    "Bryan",
    "Burak",
    "Calvin",
    "Can",
    "Carl",
    "Carlo",
    "Carlos",
    "Caspar",
    "Cedric",
    "Cedrik",
    "Cem",
    "Charlie",
    "Chris",
    "Christian",
    "Christiano",
    "Christoph",
    "Christopher",
    "Claas",
    "Clemens",
    "Colin",
    "Collin",
    "Conner",
    "Connor",
    "Constantin",
    "Corvin",
    "Curt",
    "Damian",
    "Damien",
    "Daniel",
    "Danilo",
    "Danny",
    "Darian",
    "Dario",
    "Darius",
    "Darren",
    "David",
    "Davide",
    "Davin",
    "Dean",
    "Deniz",
    "Dennis",
    "Denny",
    "Devin",
    "Diego",
    "Dion",
    "Domenic",
    "Domenik",
    "Dominic",
    "Dominik",
    "Dorian",
    "Dustin",
    "Dylan",
    "Ecrin",
    "Eddi",
    "Eddy",
    "Edgar",
    "Edwin",
    "Efe",
    "Ege",
    "Elia",
    "Eliah",
    "Elias",
    "Elijah",
    "Emanuel",
    "Emil",
    "Emilian",
    "Emilio",
    "Emir",
    "Emirhan",
    "Emre",
    "Enes",
    "Enno",
    "Enrico",
    "Eren",
    "Eric",
    "Erik",
    "Etienne",
    "Fabian",
    "Fabien",
    "Fabio",
    "Fabrice",
    "Falk",
    "Felix",
    "Ferdinand",
    "Fiete",
    "Filip",
    "Finlay",
    "Finley",
    "Finn",
    "Finnley",
    "Florian",
    "Francesco",
    "Franz",
    "Frederic",
    "Frederick",
    "Frederik",
    "Friedrich",
    "Fritz",
    "Furkan",
    "Fynn",
    "Gabriel",
    "Georg",
    "Gerrit",
    "Gian",
    "Gianluca",
    "Gino",
    "Giuliano",
    "Giuseppe",
    "Gregor",
    "Gustav",
    "Hagen",
    "Hamza",
    "Hannes",
    "Hanno",
    "Hans",
    "Hasan",
    "Hassan",
    "Hauke",
    "Hendrik",
    "Hennes",
    "Henning",
    "Henri",
    "Henrick",
    "Henrik",
    "Henry",
    "Hugo",
    "Hussein",
    "Ian",
    "Ibrahim",
    "Ilias",
    "Ilja",
    "Ilyas",
    "Immanuel",
    "Ismael",
    "Ismail",
    "Ivan",
    "Iven",
    "Jack",
    "Jacob",
    "Jaden",
    "Jakob",
    "Jamal",
    "James",
    "Jamie",
    "Jan",
    "Janek",
    "Janis",
    "Janne",
    "Jannek",
    "Jannes",
    "Jannik",
    "Jannis",
    "Jano",
    "Janosch",
    "Jared",
    "Jari",
    "Jarne",
    "Jarno",
    "Jaron",
    "Jason",
    "Jasper",
    "Jay",
    "Jayden",
    "Jayson",
    "Jean",
    "Jens",
    "Jeremias",
    "Jeremie",
    "Jeremy",
    "Jermaine",
    "Jerome",
    "Jesper",
    "Jesse",
    "Jim",
    "Jimmy",
    "Joe",
    "Joel",
    "Joey",
    "Johann",
    "Johannes",
    "John",
    "Johnny",
    "Jon",
    "Jona",
    "Jonah",
    "Jonas",
    "Jonathan",
    "Jonte",
    "Joost",
    "Jordan",
    "Joris",
    "Joscha",
    "Joschua",
    "Josef",
    "Joseph",
    "Josh",
    "Joshua",
    "Josua",
    "Juan",
    "Julian",
    "Julien",
    "Julius",
    "Juri",
    "Justin",
    "Justus",
    "Kaan",
    "Kai",
    "Kalle",
    "Karim",
    "Karl",
    "Karlo",
    "Kay",
    "Keanu",
    "Kenan",
    "Kenny",
    "Keno",
    "Kerem",
    "Kerim",
    "Kevin",
    "Kian",
    "Kilian",
    "Kim",
    "Kimi",
    "Kjell",
    "Klaas",
    "Klemens",
    "Konrad",
    "Konstantin",
    "Koray",
    "Korbinian",
    "Kurt",
    "Lars",
    "Lasse",
    "Laurence",
    "Laurens",
    "Laurenz",
    "Laurin",
    "Lean",
    "Leander",
    "Leandro",
    "Leif",
    "Len",
    "Lenn",
    "Lennard",
    "Lennart",
    "Lennert",
    "Lennie",
    "Lennox",
    "Lenny",
    "Leo",
    "Leon",
    "Leonard",
    "Leonardo",
    "Leonhard",
    "Leonidas",
    "Leopold",
    "Leroy",
    "Levent",
    "Levi",
    "Levin",
    "Lewin",
    "Lewis",
    "Liam",
    "Lian",
    "Lias",
    "Lino",
    "Linus",
    "Lio",
    "Lion",
    "Lionel",
    "Logan",
    "Lorenz",
    "Lorenzo",
    "Loris",
    "Louis",
    "Luan",
    "Luc",
    "Luca",
    "Lucas",
    "Lucian",
    "Lucien",
    "Ludwig",
    "Luis",
    "Luiz",
    "Luk",
    "Luka",
    "Lukas",
    "Luke",
    "Lutz",
    "Maddox",
    "Mads",
    "Magnus",
    "Maik",
    "Maksim",
    "Malik",
    "Malte",
    "Manuel",
    "Marc",
    "Marcel",
    "Marco",
    "Marcus",
    "Marek",
    "Marian",
    "Mario",
    "Marius",
    "Mark",
    "Marko",
    "Markus",
    "Marlo",
    "Marlon",
    "Marten",
    "Martin",
    "Marvin",
    "Marwin",
    "Mateo",
    "Mathis",
    "Matis",
    "Mats",
    "Matteo",
    "Mattes",
    "Matthias",
    "Matthis",
    "Matti",
    "Mattis",
    "Maurice",
    "Max",
    "Maxim",
    "Maximilian",
    "Mehmet",
    "Meik",
    "Melvin",
    "Merlin",
    "Mert",
    "Michael",
    "Michel",
    "Mick",
    "Miguel",
    "Mika",
    "Mikail",
    "Mike",
    "Milan",
    "Milo",
    "Mio",
    "Mirac",
    "Mirco",
    "Mirko",
    "Mohamed",
    "Mohammad",
    "Mohammed",
    "Moritz",
    "Morten",
    "Muhammed",
    "Murat",
    "Mustafa",
    "Nathan",
    "Nathanael",
    "Nelson",
    "Neo",
    "Nevio",
    "Nick",
    "Niclas",
    "Nico",
    "Nicolai",
    "Nicolas",
    "Niels",
    "Nikita",
    "Niklas",
    "Niko",
    "Nikolai",
    "Nikolas",
    "Nils",
    "Nino",
    "Noah",
    "Noel",
    "Norman",
    "Odin",
    "Oke",
    "Ole",
    "Oliver",
    "Omar",
    "Onur",
    "Oscar",
    "Oskar",
    "Pascal",
    "Patrice",
    "Patrick",
    "Paul",
    "Peer",
    "Pepe",
    "Peter",
    "Phil",
    "Philip",
    "Philipp",
    "Pierre",
    "Piet",
    "Pit",
    "Pius",
    "Quentin",
    "Quirin",
    "Rafael",
    "Raik",
    "Ramon",
    "Raphael",
    "Rasmus",
    "Raul",
    "Rayan",
    "René",
    "Ricardo",
    "Riccardo",
    "Richard",
    "Rick",
    "Rico",
    "Robert",
    "Robin",
    "Rocco",
    "Roman",
    "Romeo",
    "Ron",
    "Ruben",
    "Ryan",
    "Said",
    "Salih",
    "Sam",
    "Sami",
    "Sammy",
    "Samuel",
    "Sandro",
    "Santino",
    "Sascha",
    "Sean",
    "Sebastian",
    "Selim",
    "Semih",
    "Shawn",
    "Silas",
    "Simeon",
    "Simon",
    "Sinan",
    "Sky",
    "Stefan",
    "Steffen",
    "Stephan",
    "Steve",
    "Steven",
    "Sven",
    "Sönke",
    "Sören",
    "Taha",
    "Tamino",
    "Tammo",
    "Tarik",
    "Tayler",
    "Taylor",
    "Teo",
    "Theo",
    "Theodor",
    "Thies",
    "Thilo",
    "Thomas",
    "Thorben",
    "Thore",
    "Thorge",
    "Tiago",
    "Til",
    "Till",
    "Tillmann",
    "Tim",
    "Timm",
    "Timo",
    "Timon",
    "Timothy",
    "Tino",
    "Titus",
    "Tizian",
    "Tjark",
    "Tobias",
    "Tom",
    "Tommy",
    "Toni",
    "Tony",
    "Torben",
    "Tore",
    "Tristan",
    "Tyler",
    "Tyron",
    "Umut",
    "Valentin",
    "Valentino",
    "Veit",
    "Victor",
    "Viktor",
    "Vin",
    "Vincent",
    "Vito",
    "Vitus",
    "Wilhelm",
    "Willi",
    "William",
    "Willy",
    "Xaver",
    "Yannic",
    "Yannick",
    "Yannik",
    "Yannis",
    "Yasin",
    "Youssef",
    "Yunus",
    "Yusuf",
    "Yven",
    "Yves",
    "Ömer",
    "Aaliyah",
    "Abby",
    "Abigail",
    "Ada",
    "Adelina",
    "Adriana",
    "Aileen",
    "Aimee",
    "Alana",
    "Alea",
    "Alena",
    "Alessa",
    "Alessia",
    "Alexa",
    "Alexandra",
    "Alexia",
    "Alexis",
    "Aleyna",
    "Alia",
    "Alica",
    "Alice",
    "Alicia",
    "Alina",
    "Alisa",
    "Alisha",
    "Alissa",
    "Aliya",
    "Aliyah",
    "Allegra",
    "Alma",
    "Alyssa",
    "Amalia",
    "Amanda",
    "Amelia",
    "Amelie",
    "Amina",
    "Amira",
    "Amy",
    "Ana",
    "Anabel",
    "Anastasia",
    "Andrea",
    "Angela",
    "Angelina",
    "Angelique",
    "Anja",
    "Ann",
    "Anna",
    "Annabel",
    "Annabell",
    "Annabelle",
    "Annalena",
    "Anne",
    "Anneke",
    "Annelie",
    "Annemarie",
    "Anni",
    "Annie",
    "Annika",
    "Anny",
    "Anouk",
    "Antonia",
    "Arda",
    "Ariana",
    "Ariane",
    "Arwen",
    "Ashley",
    "Asya",
    "Aurelia",
    "Aurora",
    "Ava",
    "Ayleen",
    "Aylin",
    "Ayse",
    "Azra",
    "Betty",
    "Bianca",
    "Bianka",
    "Caitlin",
    "Cara",
    "Carina",
    "Carla",
    "Carlotta",
    "Carmen",
    "Carolin",
    "Carolina",
    "Caroline",
    "Cassandra",
    "Catharina",
    "Catrin",
    "Cecile",
    "Cecilia",
    "Celia",
    "Celina",
    "Celine",
    "Ceyda",
    "Ceylin",
    "Chantal",
    "Charleen",
    "Charlotta",
    "Charlotte",
    "Chayenne",
    "Cheyenne",
    "Chiara",
    "Christin",
    "Christina",
    "Cindy",
    "Claire",
    "Clara",
    "Clarissa",
    "Colleen",
    "Collien",
    "Cora",
    "Corinna",
    "Cosima",
    "Dana",
    "Daniela",
    "Daria",
    "Darleen",
    "Defne",
    "Delia",
    "Denise",
    "Diana",
    "Dilara",
    "Dina",
    "Dorothea",
    "Ecrin",
    "Eda",
    "Eileen",
    "Ela",
    "Elaine",
    "Elanur",
    "Elea",
    "Elena",
    "Eleni",
    "Eleonora",
    "Eliana",
    "Elif",
    "Elina",
    "Elisa",
    "Elisabeth",
    "Ella",
    "Ellen",
    "Elli",
    "Elly",
    "Elsa",
    "Emelie",
    "Emely",
    "Emilia",
    "Emilie",
    "Emily",
    "Emma",
    "Emmely",
    "Emmi",
    "Emmy",
    "Enie",
    "Enna",
    "Enya",
    "Esma",
    "Estelle",
    "Esther",
    "Eva",
    "Evelin",
    "Evelina",
    "Eveline",
    "Evelyn",
    "Fabienne",
    "Fatima",
    "Fatma",
    "Felicia",
    "Felicitas",
    "Felina",
    "Femke",
    "Fenja",
    "Fine",
    "Finia",
    "Finja",
    "Finnja",
    "Fiona",
    "Flora",
    "Florentine",
    "Francesca",
    "Franka",
    "Franziska",
    "Frederike",
    "Freya",
    "Frida",
    "Frieda",
    "Friederike",
    "Giada",
    "Gina",
    "Giulia",
    "Giuliana",
    "Greta",
    "Hailey",
    "Hana",
    "Hanna",
    "Hannah",
    "Heidi",
    "Helen",
    "Helena",
    "Helene",
    "Helin",
    "Henriette",
    "Henrike",
    "Hermine",
    "Ida",
    "Ilayda",
    "Imke",
    "Ina",
    "Ines",
    "Inga",
    "Inka",
    "Irem",
    "Isa",
    "Isabel",
    "Isabell",
    "Isabella",
    "Isabelle",
    "Ivonne",
    "Jacqueline",
    "Jamie",
    "Jamila",
    "Jana",
    "Jane",
    "Janin",
    "Janina",
    "Janine",
    "Janna",
    "Janne",
    "Jara",
    "Jasmin",
    "Jasmina",
    "Jasmine",
    "Jella",
    "Jenna",
    "Jennifer",
    "Jenny",
    "Jessica",
    "Jessy",
    "Jette",
    "Jil",
    "Jill",
    "Joana",
    "Joanna",
    "Joelina",
    "Joeline",
    "Joelle",
    "Johanna",
    "Joleen",
    "Jolie",
    "Jolien",
    "Jolin",
    "Jolina",
    "Joline",
    "Jona",
    "Jonah",
    "Jonna",
    "Josefin",
    "Josefine",
    "Josephin",
    "Josephine",
    "Josie",
    "Josy",
    "Joy",
    "Joyce",
    "Judith",
    "Judy",
    "Jule",
    "Julia",
    "Juliana",
    "Juliane",
    "Julie",
    "Julienne",
    "Julika",
    "Julina",
    "Juna",
    "Justine",
    "Kaja",
    "Karina",
    "Karla",
    "Karlotta",
    "Karolina",
    "Karoline",
    "Kassandra",
    "Katarina",
    "Katharina",
    "Kathrin",
    "Katja",
    "Katrin",
    "Kaya",
    "Kayra",
    "Kiana",
    "Kiara",
    "Kim",
    "Kimberley",
    "Kimberly",
    "Kira",
    "Klara",
    "Korinna",
    "Kristin",
    "Kyra",
    "Laila",
    "Lana",
    "Lara",
    "Larissa",
    "Laura",
    "Laureen",
    "Lavinia",
    "Lea",
    "Leah",
    "Leana",
    "Leandra",
    "Leann",
    "Lee",
    "Leila",
    "Lena",
    "Lene",
    "Leni",
    "Lenia",
    "Lenja",
    "Lenya",
    "Leona",
    "Leoni",
    "Leonie",
    "Leonora",
    "Leticia",
    "Letizia",
    "Levke",
    "Leyla",
    "Lia",
    "Liah",
    "Liana",
    "Lili",
    "Lilia",
    "Lilian",
    "Liliana",
    "Lilith",
    "Lilli",
    "Lillian",
    "Lilly",
    "Lily",
    "Lina",
    "Linda",
    "Lindsay",
    "Line",
    "Linn",
    "Linnea",
    "Lisa",
    "Lisann",
    "Lisanne",
    "Liv",
    "Livia",
    "Liz",
    "Lola",
    "Loreen",
    "Lorena",
    "Lotta",
    "Lotte",
    "Louisa",
    "Louise",
    "Luana",
    "Luca",
    "Lucia",
    "Lucie",
    "Lucienne",
    "Lucy",
    "Luisa",
    "Luise",
    "Luka",
    "Luna",
    "Luzie",
    "Lya",
    "Lydia",
    "Lyn",
    "Lynn",
    "Madeleine",
    "Madita",
    "Madleen",
    "Madlen",
    "Magdalena",
    "Maike",
    "Mailin",
    "Maira",
    "Maja",
    "Malena",
    "Malia",
    "Malin",
    "Malina",
    "Mandy",
    "Mara",
    "Marah",
    "Mareike",
    "Maren",
    "Maria",
    "Mariam",
    "Marie",
    "Marieke",
    "Mariella",
    "Marika",
    "Marina",
    "Marisa",
    "Marissa",
    "Marit",
    "Marla",
    "Marleen",
    "Marlen",
    "Marlena",
    "Marlene",
    "Marta",
    "Martha",
    "Mary",
    "Maryam",
    "Mathilda",
    "Mathilde",
    "Matilda",
    "Maxi",
    "Maxima",
    "Maxine",
    "Maya",
    "Mayra",
    "Medina",
    "Medine",
    "Meike",
    "Melanie",
    "Melek",
    "Melike",
    "Melina",
    "Melinda",
    "Melis",
    "Melisa",
    "Melissa",
    "Merle",
    "Merve",
    "Meryem",
    "Mette",
    "Mia",
    "Michaela",
    "Michelle",
    "Mieke",
    "Mila",
    "Milana",
    "Milena",
    "Milla",
    "Mina",
    "Mira",
    "Miray",
    "Miriam",
    "Mirja",
    "Mona",
    "Monique",
    "Nadine",
    "Nadja",
    "Naemi",
    "Nancy",
    "Naomi",
    "Natalia",
    "Natalie",
    "Nathalie",
    "Neele",
    "Nela",
    "Nele",
    "Nelli",
    "Nelly",
    "Nia",
    "Nicole",
    "Nika",
    "Nike",
    "Nikita",
    "Nila",
    "Nina",
    "Nisa",
    "Noemi",
    "Nora",
    "Olivia",
    "Patricia",
    "Patrizia",
    "Paula",
    "Paulina",
    "Pauline",
    "Penelope",
    "Philine",
    "Phoebe",
    "Pia",
    "Rahel",
    "Rania",
    "Rebecca",
    "Rebekka",
    "Riana",
    "Rieke",
    "Rike",
    "Romina",
    "Romy",
    "Ronja",
    "Rosa",
    "Rosalie",
    "Ruby",
    "Sabrina",
    "Sahra",
    "Sally",
    "Salome",
    "Samantha",
    "Samia",
    "Samira",
    "Sandra",
    "Sandy",
    "Sanja",
    "Saphira",
    "Sara",
    "Sarah",
    "Saskia",
    "Selin",
    "Selina",
    "Selma",
    "Sena",
    "Sidney",
    "Sienna",
    "Silja",
    "Sina",
    "Sinja",
    "Smilla",
    "Sofia",
    "Sofie",
    "Sonja",
    "Sophia",
    "Sophie",
    "Soraya",
    "Stefanie",
    "Stella",
    "Stephanie",
    "Stina",
    "Sude",
    "Summer",
    "Susanne",
    "Svea",
    "Svenja",
    "Sydney",
    "Tabea",
    "Talea",
    "Talia",
    "Tamara",
    "Tamia",
    "Tamina",
    "Tanja",
    "Tara",
    "Tarja",
    "Teresa",
    "Tessa",
    "Thalea",
    "Thalia",
    "Thea",
    "Theresa",
    "Tia",
    "Tina",
    "Tomke",
    "Tuana",
    "Valentina",
    "Valeria",
    "Valerie",
    "Vanessa",
    "Vera",
    "Veronika",
    "Victoria",
    "Viktoria",
    "Viola",
    "Vivian",
    "Vivien",
    "Vivienne",
    "Wibke",
    "Wiebke",
    "Xenia",
    "Yara",
    "Yaren",
    "Yasmin",
    "Ylvi",
    "Ylvie",
    "Yvonne",
    "Zara",
    "Zehra",
    "Zeynep",
    "Zoe",
    "Zoey",
    "Zoé"
  ],
  "last_name": [
    "Abel",
    "Abicht",
    "Abraham",
    "Abramovic",
    "Abt",
    "Achilles",
    "Achkinadze",
    "Ackermann",
    "Adam",
    "Adams",
    "Ade",
    "Agostini",
    "Ahlke",
    "Ahrenberg",
    "Ahrens",
    "Aigner",
    "Albert",
    "Albrecht",
    "Alexa",
    "Alexander",
    "Alizadeh",
    "Allgeyer",
    "Amann",
    "Amberg",
    "Anding",
    "Anggreny",
    "Apitz",
    "Arendt",
    "Arens",
    "Arndt",
    "Aryee",
    "Aschenbroich",
    "Assmus",
    "Astafei",
    "Auer",
    "Axmann",
    "Baarck",
    "Bachmann",
    "Badane",
    "Bader",
    "Baganz",
    "Bahl",
    "Bak",
    "Balcer",
    "Balck",
    "Balkow",
    "Balnuweit",
    "Balzer",
    "Banse",
    "Barr",
    "Bartels",
    "Barth",
    "Barylla",
    "Baseda",
    "Battke",
    "Bauer",
    "Bauermeister",
    "Baumann",
    "Baumeister",
    "Bauschinger",
    "Bauschke",
    "Bayer",
    "Beavogui",
    "Beck",
    "Beckel",
    "Becker",
    "Beckmann",
    "Bedewitz",
    "Beele",
    "Beer",
    "Beggerow",
    "Beh",
    "Behr",
    "Behrenbruch",
    "Belz",
    "Bender",
    "Benecke",
    "Benner",
    "Benninger",
    "Benzing",
    "Berends",
    "Berger",
    "Berner",
    "Berning",
    "Bertenbreiter",
    "Best",
    "Bethke",
    "Betz",
    "Beushausen",
    "Beutelspacher",
    "Beyer",
    "Biba",
    "Bichler",
    "Bickel",
    "Biedermann",
    "Bieler",
    "Bielert",
    "Bienasch",
    "Bienias",
    "Biesenbach",
    "Bigdeli",
    "Birkemeyer",
    "Bittner",
    "Blank",
    "Blaschek",
    "Blassneck",
    "Bloch",
    "Blochwitz",
    "Blockhaus",
    "Blum",
    "Blume",
    "Bock",
    "Bode",
    "Bogdashin",
    "Bogenrieder",
    "Bohge",
    "Bolm",
    "Borgschulze",
    "Bork",
    "Bormann",
    "Bornscheuer",
    "Borrmann",
    "Borsch",
    "Boruschewski",
    "Bos",
    "Bosler",
    "Bourrouag",
    "Bouschen",
    "Boxhammer",
    "Boyde",
    "Bozsik",
    "Brand",
    "Brandenburg",
    "Brandis",
    "Brandt",
    "Brauer",
    "Braun",
    "Brehmer",
    "Breitenstein",
    "Bremer",
    "Bremser",
    "Brenner",
    "Brettschneider",
    "Breu",
    "Breuer",
    "Briesenick",
    "Bringmann",
    "Brinkmann",
    "Brix",
    "Broening",
    "Brosch",
    "Bruckmann",
    "Bruder",
    "Bruhns",
    "Brunner",
    "Bruns",
    "Bräutigam",
    "Brömme",
    "Brüggmann",
    "Buchholz",
    "Buchrucker",
    "Buder",
    "Bultmann",
    "Bunjes",
    "Burger",
    "Burghagen",
    "Burkhard",
    "Burkhardt",
    "Burmeister",
    "Busch",
    "Buschbaum",
    "Busemann",
    "Buss",
    "Busse",
    "Bussmann",
    "Byrd",
    "Bäcker",
    "Böhm",
    "Bönisch",
    "Börgeling",
    "Börner",
    "Böttner",
    "Büchele",
    "Bühler",
    "Büker",
    "Büngener",
    "Bürger",
    "Bürklein",
    "Büscher",
    "Büttner",
    "Camara",
    "Carlowitz",
    "Carlsohn",
    "Caspari",
    "Caspers",
    "Chapron",
    "Christ",
    "Cierpinski",
    "Clarius",
    "Cleem",
    "Cleve",
    "Co",
    "Conrad",
    "Cordes",
    "Cornelsen",
    "Cors",
    "Cotthardt",
    "Crews",
    "Cronjäger",
    "Crosskofp",
    "Da",
    "Dahm",
    "Dahmen",
    "Daimer",
    "Damaske",
    "Danneberg",
    "Danner",
    "Daub",
    "Daubner",
    "Daudrich",
    "Dauer",
    "Daum",
    "Dauth",
    "Dautzenberg",
    "De",
    "Decker",
    "Deckert",
    "Deerberg",
    "Dehmel",
    "Deja",
    "Delonge",
    "Demut",
    "Dengler",
    "Denner",
    "Denzinger",
    "Derr",
    "Dertmann",
    "Dethloff",
    "Deuschle",
    "Dieckmann",
    "Diedrich",
    "Diekmann",
    "Dienel",
    "Dies",
    "Dietrich",
    "Dietz",
    "Dietzsch",
    "Diezel",
    "Dilla",
    "Dingelstedt",
    "Dippl",
    "Dittmann",
    "Dittmar",
    "Dittmer",
    "Dix",
    "Dobbrunz",
    "Dobler",
    "Dohring",
    "Dolch",
    "Dold",
    "Dombrowski",
    "Donie",
    "Doskoczynski",
    "Dragu",
    "Drechsler",
    "Drees",
    "Dreher",
    "Dreier",
    "Dreissigacker",
    "Dressler",
    "Drews",
    "Duma",
    "Dutkiewicz",
    "Dyett",
    "Dylus",
    "Dächert",
    "Döbel",
    "Döring",
    "Dörner",
    "Dörre",
    "Dück",
    "Eberhard",
    "Eberhardt",
    "Ecker",
    "Eckhardt",
    "Edorh",
    "Effler",
    "Eggenmueller",
    "Ehm",
    "Ehmann",
    "Ehrig",
    "Eich",
    "Eichmann",
    "Eifert",
    "Einert",
    "Eisenlauer",
    "Ekpo",
    "Elbe",
    "Eleyth",
    "Elss",
    "Emert",
    "Emmelmann",
    "Ender",
    "Engel",
    "Engelen",
    "Engelmann",
    "Eplinius",
    "Erdmann",
    "Erhardt",
    "Erlei",
    "Erm",
    "Ernst",
    "Ertl",
    "Erwes",
    "Esenwein",
    "Esser",
    "Evers",
    "Everts",
    "Ewald",
    "Fahner",
    "Faller",
    "Falter",
    "Farber",
    "Fassbender",
    "Faulhaber",
    "Fehrig",
    "Feld",
    "Felke",
    "Feller",
    "Fenner",
    "Fenske",
    "Feuerbach",
    "Fietz",
    "Figl",
    "Figura",
    "Filipowski",
    "Filsinger",
    "Fincke",
    "Fink",
    "Finke",
    "Fischer",
    "Fitschen",
    "Fleischer",
    "Fleischmann",
    "Floder",
    "Florczak",
    "Flore",
    "Flottmann",
    "Forkel",
    "Forst",
    "Frahmeke",
    "Frank",
    "Franke",
    "Franta",
    "Frantz",
    "Franz",
    "Franzis",
    "Franzmann",
    "Frauen",
    "Frauendorf",
    "Freigang",
    "Freimann",
    "Freimuth",
    "Freisen",
    "Frenzel",
    "Frey",
    "Fricke",
    "Fried",
    "Friedek",
    "Friedenberg",
    "Friedmann",
    "Friedrich",
    "Friess",
    "Frisch",
    "Frohn",
    "Frosch",
    "Fuchs",
    "Fuhlbrügge",
    "Fusenig",
    "Fust",
    "Förster",
    "Gaba",
    "Gabius",
    "Gabler",
    "Gadschiew",
    "Gakstädter",
    "Galander",
    "Gamlin",
    "Gamper",
    "Gangnus",
    "Ganzmann",
    "Garatva",
    "Gast",
    "Gastel",
    "Gatzka",
    "Gauder",
    "Gebhardt",
    "Geese",
    "Gehre",
    "Gehrig",
    "Gehring",
    "Gehrke",
    "Geiger",
    "Geisler",
    "Geissler",
    "Gelling",
    "Gens",
    "Gerbennow",
    "Gerdel",
    "Gerhardt",
    "Gerschler",
    "Gerson",
    "Gesell",
    "Geyer",
    "Ghirmai",
    "Ghosh",
    "Giehl",
    "Gierisch",
    "Giesa",
    "Giesche",
    "Gilde",
    "Glatting",
    "Goebel",
    "Goedicke",
    "Goldbeck",
    "Goldfuss",
    "Goldkamp",
    "Goldkühle",
    "Goller",
    "Golling",
    "Gollnow",
    "Golomski",
    "Gombert",
    "Gotthardt",
    "Gottschalk",
    "Gotz",
    "Goy",
    "Gradzki",
    "Graf",
    "Grams",
    "Grasse",
    "Gratzky",
    "Grau",
    "Greb",
    "Green",
    "Greger",
    "Greithanner",
    "Greschner",
    "Griem",
    "Griese",
    "Grimm",
    "Gromisch",
    "Gross",
    "Grosser",
    "Grossheim",
    "Grosskopf",
    "Grothaus",
    "Grothkopp",
    "Grotke",
    "Grube",
    "Gruber",
    "Grundmann",
    "Gruning",
    "Gruszecki",
    "Gröss",
    "Grötzinger",
    "Grün",
    "Grüner",
    "Gummelt",
    "Gunkel",
    "Gunther",
    "Gutjahr",
    "Gutowicz",
    "Gutschank",
    "Göbel",
    "Göckeritz",
    "Göhler",
    "Görlich",
    "Görmer",
    "Götz",
    "Götzelmann",
    "Güldemeister",
    "Günther",
    "Günz",
    "Gürbig",
    "Haack",
    "Haaf",
    "Habel",
    "Hache",
    "Hackbusch",
    "Hackelbusch",
    "Hadfield",
    "Hadwich",
    "Haferkamp",
    "Hahn",
    "Hajek",
    "Hallmann",
    "Hamann",
    "Hanenberger",
    "Hannecker",
    "Hanniske",
    "Hansen",
    "Hardy",
    "Hargasser",
    "Harms",
    "Harnapp",
    "Harter",
    "Harting",
    "Hartlieb",
    "Hartmann",
    "Hartwig",
    "Hartz",
    "Haschke",
    "Hasler",
    "Hasse",
    "Hassfeld",
    "Haug",
    "Hauke",
    "Haupt",
    "Haverney",
    "Heberstreit",
    "Hechler",
    "Hecht",
    "Heck",
    "Hedermann",
    "Hehl",
    "Heidelmann",
    "Heidler",
    "Heinemann",
    "Heinig",
    "Heinke",
    "Heinrich",
    "Heinze",
    "Heiser",
    "Heist",
    "Hellmann",
    "Helm",
    "Helmke",
    "Helpling",
    "Hengmith",
    "Henkel",
    "Hennes",
    "Henry",
    "Hense",
    "Hensel",
    "Hentel",
    "Hentschel",
    "Hentschke",
    "Hepperle",
    "Herberger",
    "Herbrand",
    "Hering",
    "Hermann",
    "Hermecke",
    "Herms",
    "Herold",
    "Herrmann",
    "Herschmann",
    "Hertel",
    "Herweg",
    "Herwig",
    "Herzenberg",
    "Hess",
    "Hesse",
    "Hessek",
    "Hessler",
    "Hetzler",
    "Heuck",
    "Heydemüller",
    "Hiebl",
    "Hildebrand",
    "Hildenbrand",
    "Hilgendorf",
    "Hillard",
    "Hiller",
    "Hingsen",
    "Hingst",
    "Hinrichs",
    "Hirsch",
    "Hirschberg",
    "Hirt",
    "Hodea",
    "Hoffman",
    "Hoffmann",
    "Hofmann",
    "Hohenberger",
    "Hohl",
    "Hohn",
    "Hohnheiser",
    "Hold",
    "Holdt",
    "Holinski",
    "Holl",
    "Holtfreter",
    "Holz",
    "Holzdeppe",
    "Holzner",
    "Hommel",
    "Honz",
    "Hooss",
    "Hoppe",
    "Horak",
    "Horn",
    "Horna",
    "Hornung",
    "Hort",
    "Howard",
    "Huber",
    "Huckestein",
    "Hudak",
    "Huebel",
    "Hugo",
    "Huhn",
    "Hujo",
    "Huke",
    "Huls",
    "Humbert",
    "Huneke",
    "Huth",
    "Häber",
    "Häfner",
    "Höcke",
    "Höft",
    "Höhne",
    "Hönig",
    "Hördt",
    "Hübenbecker",
    "Hübl",
    "Hübner",
    "Hügel",
    "Hüttcher",
    "Hütter",
    "Ibe",
    "Ihly",
    "Illing",
    "Isak",
    "Isekenmeier",
    "Itt",
    "Jacob",
    "Jacobs",
    "Jagusch",
    "Jahn",
    "Jahnke",
    "Jakobs",
    "Jakubczyk",
    "Jambor",
    "Jamrozy",
    "Jander",
    "Janich",
    "Janke",
    "Jansen",
    "Jarets",
    "Jaros",
    "Jasinski",
    "Jasper",
    "Jegorov",
    "Jellinghaus",
    "Jeorga",
    "Jerschabek",
    "Jess",
    "John",
    "Jonas",
    "Jossa",
    "Jucken",
    "Jung",
    "Jungbluth",
    "Jungton",
    "Just",
    "Jürgens",
    "Kaczmarek",
    "Kaesmacher",
    "Kahl",
    "Kahlert",
    "Kahles",
    "Kahlmeyer",
    "Kaiser",
    "Kalinowski",
    "Kallabis",
    "Kallensee",
    "Kampf",
    "Kampschulte",
    "Kappe",
    "Kappler",
    "Karhoff",
    "Karrass",
    "Karst",
    "Karsten",
    "Karus",
    "Kass",
    "Kasten",
    "Kastner",
    "Katzinski",
    "Kaufmann",
    "Kaul",
    "Kausemann",
    "Kawohl",
    "Kazmarek",
    "Kedzierski",
    "Keil",
    "Keiner",
    "Keller",
    "Kelm",
    "Kempe",
    "Kemper",
    "Kempter",
    "Kerl",
    "Kern",
    "Kesselring",
    "Kesselschläger",
    "Kette",
    "Kettenis",
    "Keutel",
    "Kick",
    "Kiessling",
    "Kinadeter",
    "Kinzel",
    "Kinzy",
    "Kirch",
    "Kirst",
    "Kisabaka",
    "Klaas",
    "Klabuhn",
    "Klapper",
    "Klauder",
    "Klaus",
    "Kleeberg",
    "Kleiber",
    "Klein",
    "Kleinert",
    "Kleininger",
    "Kleinmann",
    "Kleinsteuber",
    "Kleiss",
    "Klemme",
    "Klimczak",
    "Klinger",
    "Klink",
    "Klopsch",
    "Klose",
    "Kloss",
    "Kluge",
    "Kluwe",
    "Knabe",
    "Kneifel",
    "Knetsch",
    "Knies",
    "Knippel",
    "Knobel",
    "Knoblich",
    "Knoll",
    "Knorr",
    "Knorscheidt",
    "Knut",
    "Kobs",
    "Koch",
    "Kochan",
    "Kock",
    "Koczulla",
    "Koderisch",
    "Koehl",
    "Koehler",
    "Koenig",
    "Koester",
    "Kofferschlager",
    "Koha",
    "Kohle",
    "Kohlmann",
    "Kohnle",
    "Kohrt",
    "Koj",
    "Kolb",
    "Koleiski",
    "Kolokas",
    "Komoll",
    "Konieczny",
    "Konig",
    "Konow",
    "Konya",
    "Koob",
    "Kopf",
    "Kosenkow",
    "Koster",
    "Koszewski",
    "Koubaa",
    "Kovacs",
    "Kowalick",
    "Kowalinski",
    "Kozakiewicz",
    "Krabbe",
    "Kraft",
    "Kral",
    "Kramer",
    "Krauel",
    "Kraus",
    "Krause",
    "Krauspe",
    "Kreb",
    "Krebs",
    "Kreissig",
    "Kresse",
    "Kreutz",
    "Krieger",
    "Krippner",
    "Krodinger",
    "Krohn",
    "Krol",
    "Kron",
    "Krueger",
    "Krug",
    "Kruger",
    "Krull",
    "Kruschinski",
    "Krämer",
    "Kröckert",
    "Kröger",
    "Krüger",
    "Kubera",
    "Kufahl",
    "Kuhlee",
    "Kuhnen",
    "Kulimann",
    "Kulma",
    "Kumbernuss",
    "Kummle",
    "Kunz",
    "Kupfer",
    "Kupprion",
    "Kuprion",
    "Kurnicki",
    "Kurrat",
    "Kurschilgen",
    "Kuschewitz",
    "Kuschmann",
    "Kuske",
    "Kustermann",
    "Kutscherauer",
    "Kutzner",
    "Kwadwo",
    "Kähler",
    "Käther",
    "Köhler",
    "Köhrbrück",
    "Köhre",
    "Kölotzei",
    "König",
    "Köpernick",
    "Köseoglu",
    "Kúhn",
    "Kúhnert",
    "Kühn",
    "Kühnel",
    "Kühnemund",
    "Kühnert",
    "Kühnke",
    "Küsters",
    "Küter",
    "Laack",
    "Lack",
    "Ladewig",
    "Lakomy",
    "Lammert",
    "Lamos",
    "Landmann",
    "Lang",
    "Lange",
    "Langfeld",
    "Langhirt",
    "Lanig",
    "Lauckner",
    "Lauinger",
    "Laurén",
    "Lausecker",
    "Laux",
    "Laws",
    "Lax",
    "Leberer",
    "Lehmann",
    "Lehner",
    "Leibold",
    "Leide",
    "Leimbach",
    "Leipold",
    "Leist",
    "Leiter",
    "Leiteritz",
    "Leitheim",
    "Leiwesmeier",
    "Lenfers",
    "Lenk",
    "Lenz",
    "Lenzen",
    "Leo",
    "Lepthin",
    "Lesch",
    "Leschnik",
    "Letzelter",
    "Lewin",
    "Lewke",
    "Leyckes",
    "Lg",
    "Lichtenfeld",
    "Lichtenhagen",
    "Lichtl",
    "Liebach",
    "Liebe",
    "Liebich",
    "Liebold",
    "Lieder",
    "Lienshöft",
    "Linden",
    "Lindenberg",
    "Lindenmayer",
    "Lindner",
    "Linke",
    "Linnenbaum",
    "Lippe",
    "Lipske",
    "Lipus",
    "Lischka",
    "Lobinger",
    "Logsch",
    "Lohmann",
    "Lohre",
    "Lohse",
    "Lokar",
    "Loogen",
    "Lorenz",
    "Losch",
    "Loska",
    "Lott",
    "Loy",
    "Lubina",
    "Ludolf",
    "Lufft",
    "Lukoschek",
    "Lutje",
    "Lutz",
    "Löser",
    "Löwa",
    "Lübke",
    "Maak",
    "Maczey",
    "Madetzky",
    "Madubuko",
    "Mai",
    "Maier",
    "Maisch",
    "Malek",
    "Malkus",
    "Mallmann",
    "Malucha",
    "Manns",
    "Manz",
    "Marahrens",
    "Marchewski",
    "Margis",
    "Markowski",
    "Marl",
    "Marner",
    "Marquart",
    "Marschek",
    "Martel",
    "Marten",
    "Martin",
    "Marx",
    "Marxen",
    "Mathes",
    "Mathies",
    "Mathiszik",
    "Matschke",
    "Mattern",
    "Matthes",
    "Matula",
    "Mau",
    "Maurer",
    "Mauroff",
    "May",
    "Maybach",
    "Mayer",
    "Mebold",
    "Mehl",
    "Mehlhorn",
    "Mehlorn",
    "Meier",
    "Meisch",
    "Meissner",
    "Meloni",
    "Melzer",
    "Menga",
    "Menne",
    "Mensah",
    "Mensing",
    "Merkel",
    "Merseburg",
    "Mertens",
    "Mesloh",
    "Metzger",
    "Metzner",
    "Mewes",
    "Meyer",
    "Michallek",
    "Michel",
    "Mielke",
    "Mikitenko",
    "Milde",
    "Minah",
    "Mintzlaff",
    "Mockenhaupt",
    "Moede",
    "Moedl",
    "Moeller",
    "Moguenara",
    "Mohr",
    "Mohrhard",
    "Molitor",
    "Moll",
    "Moller",
    "Molzan",
    "Montag",
    "Moormann",
    "Mordhorst",
    "Morgenstern",
    "Morhelfer",
    "Moritz",
    "Moser",
    "Motchebon",
    "Motzenbbäcker",
    "Mrugalla",
    "Muckenthaler",
    "Mues",
    "Muller",
    "Mulrain",
    "Mächtig",
    "Mäder",
    "Möcks",
    "Mögenburg",
    "Möhsner",
    "Möldner",
    "Möllenbeck",
    "Möller",
    "Möllinger",
    "Mörsch",
    "Mühleis",
    "Müller",
    "Münch",
    "Nabein",
    "Nabow",
    "Nagel",
    "Nannen",
    "Nastvogel",
    "Nau",
    "Naubert",
    "Naumann",
    "Ne",
    "Neimke",
    "Nerius",
    "Neubauer",
    "Neubert",
    "Neuendorf",
    "Neumair",
    "Neumann",
    "Neupert",
    "Neurohr",
    "Neuschwander",
    "Newton",
    "Ney",
    "Nicolay",
    "Niedermeier",
    "Nieklauson",
    "Niklaus",
    "Nitzsche",
    "Noack",
    "Nodler",
    "Nolte",
    "Normann",
    "Norris",
    "Northoff",
    "Nowak",
    "Nussbeck",
    "Nwachukwu",
    "Nytra",
    "Nöh",
    "Oberem",
    "Obergföll",
    "Obermaier",
    "Ochs",
    "Oeser",
    "Olbrich",
    "Onnen",
    "Ophey",
    "Oppong",
    "Orth",
    "Orthmann",
    "Oschkenat",
    "Osei",
    "Osenberg",
    "Ostendarp",
    "Ostwald",
    "Otte",
    "Otto",
    "Paesler",
    "Pajonk",
    "Pallentin",
    "Panzig",
    "Paschke",
    "Patzwahl",
    "Paukner",
    "Peselman",
    "Peter",
    "Peters",
    "Petzold",
    "Pfeiffer",
    "Pfennig",
    "Pfersich",
    "Pfingsten",
    "Pflieger",
    "Pflügner",
    "Philipp",
    "Pichlmaier",
    "Piesker",
    "Pietsch",
    "Pingpank",
    "Pinnock",
    "Pippig",
    "Pitschugin",
    "Plank",
    "Plass",
    "Platzer",
    "Plauk",
    "Plautz",
    "Pletsch",
    "Plotzitzka",
    "Poehn",
    "Poeschl",
    "Pogorzelski",
    "Pohl",
    "Pohland",
    "Pohle",
    "Polifka",
    "Polizzi",
    "Pollmächer",
    "Pomp",
    "Ponitzsch",
    "Porsche",
    "Porth",
    "Poschmann",
    "Poser",
    "Pottel",
    "Prah",
    "Prange",
    "Prediger",
    "Pressler",
    "Preuk",
    "Preuss",
    "Prey",
    "Priemer",
    "Proske",
    "Pusch",
    "Pöche",
    "Pöge",
    "Raabe",
    "Rabenstein",
    "Rach",
    "Radtke",
    "Rahn",
    "Ranftl",
    "Rangen",
    "Ranz",
    "Rapp",
    "Rath",
    "Rau",
    "Raubuch",
    "Raukuc",
    "Rautenkranz",
    "Rehwagen",
    "Reiber",
    "Reichardt",
    "Reichel",
    "Reichling",
    "Reif",
    "Reifenrath",
    "Reimann",
    "Reinberg",
    "Reinelt",
    "Reinhardt",
    "Reinke",
    "Reitze",
    "Renk",
    "Rentz",
    "Renz",
    "Reppin",
    "Restle",
    "Restorff",
    "Retzke",
    "Reuber",
    "Reumann",
    "Reus",
    "Reuss",
    "Reusse",
    "Rheder",
    "Rhoden",
    "Richards",
    "Richter",
    "Riedel",
    "Riediger",
    "Rieger",
    "Riekmann",
    "Riepl",
    "Riermeier",
    "Riester",
    "Riethmüller",
    "Rietmüller",
    "Rietscher",
    "Ringel",
    "Ringer",
    "Rink",
    "Ripken",
    "Ritosek",
    "Ritschel",
    "Ritter",
    "Rittweg",
    "Ritz",
    "Roba",
    "Rockmeier",
    "Rodehau",
    "Rodowski",
    "Roecker",
    "Roggatz",
    "Rohländer",
    "Rohrer",
    "Rokossa",
    "Roleder",
    "Roloff",
    "Roos",
    "Rosbach",
    "Roschinsky",
    "Rose",
    "Rosenauer",
    "Rosenbauer",
    "Rosenthal",
    "Rosksch",
    "Rossberg",
    "Rossler",
    "Roth",
    "Rother",
    "Ruch",
    "Ruckdeschel",
    "Rumpf",
    "Rupprecht",
    "Ruth",
    "Ryjikh",
    "Ryzih",
    "Rädler",
    "Räntsch",
    "Rödiger",
    "Röse",
    "Röttger",
    "Rücker",
    "Rüdiger",
    "Rüter",
    "Sachse",
    "Sack",
    "Saflanis",
    "Sagafe",
    "Sagonas",
    "Sahner",
    "Saile",
    "Sailer",
    "Salow",
    "Salzer",
    "Salzmann",
    "Sammert",
    "Sander",
    "Sarvari",
    "Sattelmaier",
    "Sauer",
    "Sauerland",
    "Saumweber",
    "Savoia",
    "Scc",
    "Schacht",
    "Schaefer",
    "Schaffarzik",
    "Schahbasian",
    "Scharf",
    "Schedler",
    "Scheer",
    "Schelk",
    "Schellenbeck",
    "Schembera",
    "Schenk",
    "Scherbarth",
    "Scherer",
    "Schersing",
    "Scherz",
    "Scheurer",
    "Scheuring",
    "Scheytt",
    "Schielke",
    "Schieskow",
    "Schildhauer",
    "Schilling",
    "Schima",
    "Schimmer",
    "Schindzielorz",
    "Schirmer",
    "Schirrmeister",
    "Schlachter",
    "Schlangen",
    "Schlawitz",
    "Schlechtweg",
    "Schley",
    "Schlicht",
    "Schlitzer",
    "Schmalzle",
    "Schmid",
    "Schmidt",
    "Schmidtchen",
    "Schmitt",
    "Schmitz",
    "Schmuhl",
    "Schneider",
    "Schnelting",
    "Schnieder",
    "Schniedermeier",
    "Schnürer",
    "Schoberg",
    "Scholz",
    "Schonberg",
    "Schondelmaier",
    "Schorr",
    "Schott",
    "Schottmann",
    "Schouren",
    "Schrader",
    "Schramm",
    "Schreck",
    "Schreiber",
    "Schreiner",
    "Schreiter",
    "Schroder",
    "Schröder",
    "Schuermann",
    "Schuff",
    "Schuhaj",
    "Schuldt",
    "Schult",
    "Schulte",
    "Schultz",
    "Schultze",
    "Schulz",
    "Schulze",
    "Schumacher",
    "Schumann",
    "Schupp",
    "Schuri",
    "Schuster",
    "Schwab",
    "Schwalm",
    "Schwanbeck",
    "Schwandke",
    "Schwanitz",
    "Schwarthoff",
    "Schwartz",
    "Schwarz",
    "Schwarzer",
    "Schwarzkopf",
    "Schwarzmeier",
    "Schwatlo",
    "Schweisfurth",
    "Schwennen",
    "Schwerdtner",
    "Schwidde",
    "Schwirkschlies",
    "Schwuchow",
    "Schäfer",
    "Schäffel",
    "Schäffer",
    "Schäning",
    "Schöckel",
    "Schönball",
    "Schönbeck",
    "Schönberg",
    "Schönebeck",
    "Schönenberger",
    "Schönfeld",
    "Schönherr",
    "Schönlebe",
    "Schötz",
    "Schüler",
    "Schüppel",
    "Schütz",
    "Schütze",
    "Seeger",
    "Seelig",
    "Sehls",
    "Seibold",
    "Seidel",
    "Seiders",
    "Seigel",
    "Seiler",
    "Seitz",
    "Semisch",
    "Senkel",
    "Sewald",
    "Siebel",
    "Siebert",
    "Siegling",
    "Sielemann",
    "Siemon",
    "Siener",
    "Sievers",
    "Siewert",
    "Sihler",
    "Sillah",
    "Simon",
    "Sinnhuber",
    "Sischka",
    "Skibicki",
    "Sladek",
    "Slotta",
    "Smieja",
    "Soboll",
    "Sokolowski",
    "Soller",
    "Sollner",
    "Sommer",
    "Somssich",
    "Sonn",
    "Sonnabend",
    "Spahn",
    "Spank",
    "Spelmeyer",
    "Spiegelburg",
    "Spielvogel",
    "Spinner",
    "Spitzmüller",
    "Splinter",
    "Sporrer",
    "Sprenger",
    "Spöttel",
    "Stahl",
    "Stang",
    "Stanger",
    "Stauss",
    "Steding",
    "Steffen",
    "Steffny",
    "Steidl",
    "Steigauf",
    "Stein",
    "Steinecke",
    "Steinert",
    "Steinkamp",
    "Steinmetz",
    "Stelkens",
    "Stengel",
    "Stengl",
    "Stenzel",
    "Stepanov",
    "Stephan",
    "Stern",
    "Steuk",
    "Stief",
    "Stifel",
    "Stoll",
    "Stolle",
    "Stolz",
    "Storl",
    "Storp",
    "Stoutjesdijk",
    "Stratmann",
    "Straub",
    "Strausa",
    "Streck",
    "Streese",
    "Strege",
    "Streit",
    "Streller",
    "Strieder",
    "Striezel",
    "Strogies",
    "Strohschank",
    "Strunz",
    "Strutz",
    "Stube",
    "Stöckert",
    "Stöppler",
    "Stöwer",
    "Stürmer",
    "Suffa",
    "Sujew",
    "Sussmann",
    "Suthe",
    "Sutschet",
    "Swillims",
    "Szendrei",
    "Sören",
    "Sürth",
    "Tafelmeier",
    "Tang",
    "Tasche",
    "Taufratshofer",
    "Tegethof",
    "Teichmann",
    "Tepper",
    "Terheiden",
    "Terlecki",
    "Teufel",
    "Theele",
    "Thieke",
    "Thimm",
    "Thiomas",
    "Thomas",
    "Thriene",
    "Thränhardt",
    "Thust",
    "Thyssen",
    "Thöne",
    "Tidow",
    "Tiedtke",
    "Tietze",
    "Tilgner",
    "Tillack",
    "Timmermann",
    "Tischler",
    "Tischmann",
    "Tittman",
    "Tivontschik",
    "Tonat",
    "Tonn",
    "Trampeli",
    "Trauth",
    "Trautmann",
    "Travan",
    "Treff",
    "Tremmel",
    "Tress",
    "Tsamonikian",
    "Tschiers",
    "Tschirch",
    "Tuch",
    "Tucholke",
    "Tudow",
    "Tuschmo",
    "Tächl",
    "Többen",
    "Töpfer",
    "Uhlemann",
    "Uhlig",
    "Uhrig",
    "Uibel",
    "Uliczka",
    "Ullmann",
    "Ullrich",
    "Umbach",
    "Umlauft",
    "Umminger",
    "Unger",
    "Unterpaintner",
    "Urban",
    "Urbaniak",
    "Urbansky",
    "Urhig",
    "Vahlensieck",
    "Van",
    "Vangermain",
    "Vater",
    "Venghaus",
    "Verniest",
    "Verzi",
    "Vey",
    "Viellehner",
    "Vieweg",
    "Voelkel",
    "Vogel",
    "Vogelgsang",
    "Vogt",
    "Voigt",
    "Vokuhl",
    "Volk",
    "Volker",
    "Volkmann",
    "Von",
    "Vona",
    "Vontein",
    "Wachenbrunner",
    "Wachtel",
    "Wagner",
    "Waibel",
    "Wakan",
    "Waldmann",
    "Wallner",
    "Wallstab",
    "Walter",
    "Walther",
    "Walton",
    "Walz",
    "Wanner",
    "Wartenberg",
    "Waschbüsch",
    "Wassilew",
    "Wassiluk",
    "Weber",
    "Wehrsen",
    "Weidlich",
    "Weidner",
    "Weigel",
    "Weight",
    "Weiler",
    "Weimer",
    "Weis",
    "Weiss",
    "Weller",
    "Welsch",
    "Welz",
    "Welzel",
    "Weniger",
    "Wenk",
    "Werle",
    "Werner",
    "Werrmann",
    "Wessel",
    "Wessinghage",
    "Weyel",
    "Wezel",
    "Wichmann",
    "Wickert",
    "Wiebe",
    "Wiechmann",
    "Wiegelmann",
    "Wierig",
    "Wiese",
    "Wieser",
    "Wilhelm",
    "Wilky",
    "Will",
    "Willwacher",
    "Wilts",
    "Wimmer",
    "Winkelmann",
    "Winkler",
    "Winter",
    "Wischek",
    "Wischer",
    "Wissing",
    "Wittich",
    "Wittl",
    "Wolf",
    "Wolfarth",
    "Wolff",
    "Wollenberg",
    "Wollmann",
    "Woytkowska",
    "Wujak",
    "Wurm",
    "Wyludda",
    "Wölpert",
    "Wöschler",
    "Wühn",
    "Wünsche",
    "Zach",
    "Zaczkiewicz",
    "Zahn",
    "Zaituc",
    "Zandt",
    "Zanner",
    "Zapletal",
    "Zauber",
    "Zeidler",
    "Zekl",
    "Zender",
    "Zeuch",
    "Zeyen",
    "Zeyhle",
    "Ziegler",
    "Zimanyi",
    "Zimmer",
    "Zimmermann",
    "Zinser",
    "Zintl",
    "Zipp",
    "Zipse",
    "Zschunke",
    "Zuber",
    "Zwiener",
    "Zümsande",
    "Östringer",
    "Überacker"
  ],
  "prefix": [
    "Dr.",
    "Prof. Dr."
  ],
  "nobility_title_prefix": [
    "zu",
    "von",
    "vom",
    "von der"
  ],
  "name": [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{nobility_title_prefix} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}"
  ]
};
de_AT.phone_number = {
  "formats": [
    "01 #######",
    "01#######",
    "+43-1-#######",
    "+431#######",
    "0#### ####",
    "0#########",
    "+43-####-####",
    "+43 ########"
  ]
};
de_AT.cell_phone = {
  "formats": [
    "+43-6##-#######",
    "06##-########",
    "+436#########",
    "06##########"
  ]
};

},{}],56:[function(require,module,exports){
var de_CH = {};
module["exports"] = de_CH;
de_CH.title = "German (Switzerland)";
de_CH.address = {
  "country_code": [
    "CH",
    "CH",
    "CH",
    "DE",
    "AT",
    "US",
    "LI",
    "US",
    "HK",
    "VN"
  ],
  "postcode": [
    "1###",
    "2###",
    "3###",
    "4###",
    "5###",
    "6###",
    "7###",
    "8###",
    "9###"
  ],
  "default_country": [
    "Schweiz"
  ]
};
de_CH.company = {
  "suffix": [
    "AG",
    "GmbH",
    "und Söhne",
    "und Partner",
    "& Co.",
    "Gruppe",
    "LLC",
    "Inc."
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} und #{Name.last_name}"
  ]
};
de_CH.internet = {
  "domain_suffix": [
    "com",
    "net",
    "biz",
    "ch",
    "de",
    "li",
    "at",
    "ch",
    "ch"
  ]
};
de_CH.phone_number = {
  "formats": [
    "0800 ### ###",
    "0800 ## ## ##",
    "0## ### ## ##",
    "0## ### ## ##",
    "+41 ## ### ## ##",
    "0900 ### ###",
    "076 ### ## ##",
    "+4178 ### ## ##",
    "0041 79 ### ## ##"
  ]
};

},{}],57:[function(require,module,exports){
var en = {};
module["exports"] = en;
en.title = "English";
en.separator = " & ";
en.address = {
  "city_prefix": [
    "North",
    "East",
    "West",
    "South",
    "New",
    "Lake",
    "Port"
  ],
  "city_suffix": [
    "town",
    "ton",
    "land",
    "ville",
    "berg",
    "burgh",
    "borough",
    "bury",
    "view",
    "port",
    "mouth",
    "stad",
    "furt",
    "chester",
    "mouth",
    "fort",
    "haven",
    "side",
    "shire"
  ],
  // TODO: get common County names in America and populate here
  "county": [
    "Avon",
    "Bedfordshire",
    "Berkshire",
    "Borders",
    "Buckinghamshire",
    "Cambridgeshire"
  ],
  "country": [
    "Afghanistan",
    "Albania",
    "Algeria",
    "American Samoa",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antarctica (the territory South of 60 deg S)",
    "Antigua and Barbuda",
    "Argentina",
    "Armenia",
    "Aruba",
    "Australia",
    "Austria",
    "Azerbaijan",
    "Bahamas",
    "Bahrain",
    "Bangladesh",
    "Barbados",
    "Belarus",
    "Belgium",
    "Belize",
    "Benin",
    "Bermuda",
    "Bhutan",
    "Bolivia",
    "Bosnia and Herzegovina",
    "Botswana",
    "Bouvet Island (Bouvetoya)",
    "Brazil",
    "British Indian Ocean Territory (Chagos Archipelago)",
    "Brunei Darussalam",
    "Bulgaria",
    "Burkina Faso",
    "Burundi",
    "Cambodia",
    "Cameroon",
    "Canada",
    "Cape Verde",
    "Cayman Islands",
    "Central African Republic",
    "Chad",
    "Chile",
    "China",
    "Christmas Island",
    "Cocos (Keeling) Islands",
    "Colombia",
    "Comoros",
    "Congo",
    "Congo",
    "Cook Islands",
    "Costa Rica",
    "Cote d'Ivoire",
    "Croatia",
    "Cuba",
    "Cyprus",
    "Czech Republic",
    "Denmark",
    "Djibouti",
    "Dominica",
    "Dominican Republic",
    "Ecuador",
    "Egypt",
    "El Salvador",
    "Equatorial Guinea",
    "Eritrea",
    "Estonia",
    "Ethiopia",
    "Faroe Islands",
    "Falkland Islands (Malvinas)",
    "Fiji",
    "Finland",
    "France",
    "French Guiana",
    "French Polynesia",
    "French Southern Territories",
    "Gabon",
    "Gambia",
    "Georgia",
    "Germany",
    "Ghana",
    "Gibraltar",
    "Greece",
    "Greenland",
    "Grenada",
    "Guadeloupe",
    "Guam",
    "Guatemala",
    "Guernsey",
    "Guinea",
    "Guinea-Bissau",
    "Guyana",
    "Haiti",
    "Heard Island and McDonald Islands",
    "Holy See (Vatican City State)",
    "Honduras",
    "Hong Kong",
    "Hungary",
    "Iceland",
    "India",
    "Indonesia",
    "Iran",
    "Iraq",
    "Ireland",
    "Isle of Man",
    "Israel",
    "Italy",
    "Jamaica",
    "Japan",
    "Jersey",
    "Jordan",
    "Kazakhstan",
    "Kenya",
    "Kiribati",
    "Democratic People's Republic of Korea",
    "Republic of Korea",
    "Kuwait",
    "Kyrgyz Republic",
    "Lao People's Democratic Republic",
    "Latvia",
    "Lebanon",
    "Lesotho",
    "Liberia",
    "Libyan Arab Jamahiriya",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Macao",
    "Macedonia",
    "Madagascar",
    "Malawi",
    "Malaysia",
    "Maldives",
    "Mali",
    "Malta",
    "Marshall Islands",
    "Martinique",
    "Mauritania",
    "Mauritius",
    "Mayotte",
    "Mexico",
    "Micronesia",
    "Moldova",
    "Monaco",
    "Mongolia",
    "Montenegro",
    "Montserrat",
    "Morocco",
    "Mozambique",
    "Myanmar",
    "Namibia",
    "Nauru",
    "Nepal",
    "Netherlands Antilles",
    "Netherlands",
    "New Caledonia",
    "New Zealand",
    "Nicaragua",
    "Niger",
    "Nigeria",
    "Niue",
    "Norfolk Island",
    "Northern Mariana Islands",
    "Norway",
    "Oman",
    "Pakistan",
    "Palau",
    "Palestinian Territory",
    "Panama",
    "Papua New Guinea",
    "Paraguay",
    "Peru",
    "Philippines",
    "Pitcairn Islands",
    "Poland",
    "Portugal",
    "Puerto Rico",
    "Qatar",
    "Reunion",
    "Romania",
    "Russian Federation",
    "Rwanda",
    "Saint Barthelemy",
    "Saint Helena",
    "Saint Kitts and Nevis",
    "Saint Lucia",
    "Saint Martin",
    "Saint Pierre and Miquelon",
    "Saint Vincent and the Grenadines",
    "Samoa",
    "San Marino",
    "Sao Tome and Principe",
    "Saudi Arabia",
    "Senegal",
    "Serbia",
    "Seychelles",
    "Sierra Leone",
    "Singapore",
    "Slovakia (Slovak Republic)",
    "Slovenia",
    "Solomon Islands",
    "Somalia",
    "South Africa",
    "South Georgia and the South Sandwich Islands",
    "Spain",
    "Sri Lanka",
    "Sudan",
    "Suriname",
    "Svalbard & Jan Mayen Islands",
    "Swaziland",
    "Sweden",
    "Switzerland",
    "Syrian Arab Republic",
    "Taiwan",
    "Tajikistan",
    "Tanzania",
    "Thailand",
    "Timor-Leste",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidad and Tobago",
    "Tunisia",
    "Turkey",
    "Turkmenistan",
    "Turks and Caicos Islands",
    "Tuvalu",
    "Uganda",
    "Ukraine",
    "United Arab Emirates",
    "United Kingdom",
    "United States of America",
    "United States Minor Outlying Islands",
    "Uruguay",
    "Uzbekistan",
    "Vanuatu",
    "Venezuela",
    "Vietnam",
    "Virgin Islands, British",
    "Virgin Islands, U.S.",
    "Wallis and Futuna",
    "Western Sahara",
    "Yemen",
    "Zambia",
    "Zimbabwe"
  ],
  "country_code": [
    "AD",
    "AE",
    "AF",
    "AG",
    "AI",
    "AL",
    "AM",
    "AO",
    "AQ",
    "AR",
    "AS",
    "AT",
    "AU",
    "AW",
    "AX",
    "AZ",
    "BA",
    "BB",
    "BD",
    "BE",
    "BF",
    "BG",
    "BH",
    "BI",
    "BJ",
    "BL",
    "BM",
    "BN",
    "BO",
    "BQ",
    "BQ",
    "BR",
    "BS",
    "BT",
    "BV",
    "BW",
    "BY",
    "BZ",
    "CA",
    "CC",
    "CD",
    "CF",
    "CG",
    "CH",
    "CI",
    "CK",
    "CL",
    "CM",
    "CN",
    "CO",
    "CR",
    "CU",
    "CV",
    "CW",
    "CX",
    "CY",
    "CZ",
    "DE",
    "DJ",
    "DK",
    "DM",
    "DO",
    "DZ",
    "EC",
    "EE",
    "EG",
    "EH",
    "ER",
    "ES",
    "ET",
    "FI",
    "FJ",
    "FK",
    "FM",
    "FO",
    "FR",
    "GA",
    "GB",
    "GD",
    "GE",
    "GF",
    "GG",
    "GH",
    "GI",
    "GL",
    "GM",
    "GN",
    "GP",
    "GQ",
    "GR",
    "GS",
    "GT",
    "GU",
    "GW",
    "GY",
    "HK",
    "HM",
    "HN",
    "HR",
    "HT",
    "HU",
    "ID",
    "IE",
    "IL",
    "IM",
    "IN",
    "IO",
    "IQ",
    "IR",
    "IS",
    "IT",
    "JE",
    "JM",
    "JO",
    "JP",
    "KE",
    "KG",
    "KH",
    "KI",
    "KM",
    "KN",
    "KP",
    "KR",
    "KW",
    "KY",
    "KZ",
    "LA",
    "LB",
    "LC",
    "LI",
    "LK",
    "LR",
    "LS",
    "LT",
    "LU",
    "LV",
    "LY",
    "MA",
    "MC",
    "MD",
    "ME",
    "MF",
    "MG",
    "MH",
    "MK",
    "ML",
    "MM",
    "MN",
    "MO",
    "MP",
    "MQ",
    "MR",
    "MS",
    "MT",
    "MU",
    "MV",
    "MW",
    "MX",
    "MY",
    "MZ",
    "NA",
    "NC",
    "NE",
    "NF",
    "NG",
    "NI",
    "NL",
    "NO",
    "NP",
    "NR",
    "NU",
    "NZ",
    "OM",
    "PA",
    "PE",
    "PF",
    "PG",
    "PH",
    "PK",
    "PL",
    "PM",
    "PN",
    "PR",
    "PS",
    "PT",
    "PW",
    "PY",
    "QA",
    "RE",
    "RO",
    "RS",
    "RU",
    "RW",
    "SA",
    "SB",
    "SC",
    "SD",
    "SE",
    "SG",
    "SH",
    "SI",
    "SJ",
    "SK",
    "SL",
    "SM",
    "SN",
    "SO",
    "SR",
    "SS",
    "ST",
    "SV",
    "SX",
    "SY",
    "SZ",
    "TC",
    "TD",
    "TF",
    "TG",
    "TH",
    "TJ",
    "TK",
    "TL",
    "TM",
    "TN",
    "TO",
    "TR",
    "TT",
    "TV",
    "TW",
    "TZ",
    "UA",
    "UG",
    "UM",
    "US",
    "UY",
    "UZ",
    "VA",
    "VC",
    "VE",
    "VG",
    "VI",
    "VN",
    "VU",
    "WF",
    "WS",
    "YE",
    "YT",
    "ZA",
    "ZM",
    "ZW"
  ],
  "building_number": [
    "#####",
    "####",
    "###"
  ],
  "street_suffix": [
    "Alley",
    "Avenue",
    "Branch",
    "Bridge",
    "Brook",
    "Brooks",
    "Burg",
    "Burgs",
    "Bypass",
    "Camp",
    "Canyon",
    "Cape",
    "Causeway",
    "Center",
    "Centers",
    "Circle",
    "Circles",
    "Cliff",
    "Cliffs",
    "Club",
    "Common",
    "Corner",
    "Corners",
    "Course",
    "Court",
    "Courts",
    "Cove",
    "Coves",
    "Creek",
    "Crescent",
    "Crest",
    "Crossing",
    "Crossroad",
    "Curve",
    "Dale",
    "Dam",
    "Divide",
    "Drive",
    "Drive",
    "Drives",
    "Estate",
    "Estates",
    "Expressway",
    "Extension",
    "Extensions",
    "Fall",
    "Falls",
    "Ferry",
    "Field",
    "Fields",
    "Flat",
    "Flats",
    "Ford",
    "Fords",
    "Forest",
    "Forge",
    "Forges",
    "Fork",
    "Forks",
    "Fort",
    "Freeway",
    "Garden",
    "Gardens",
    "Gateway",
    "Glen",
    "Glens",
    "Green",
    "Greens",
    "Grove",
    "Groves",
    "Harbor",
    "Harbors",
    "Haven",
    "Heights",
    "Highway",
    "Hill",
    "Hills",
    "Hollow",
    "Inlet",
    "Inlet",
    "Island",
    "Island",
    "Islands",
    "Islands",
    "Isle",
    "Isle",
    "Junction",
    "Junctions",
    "Key",
    "Keys",
    "Knoll",
    "Knolls",
    "Lake",
    "Lakes",
    "Land",
    "Landing",
    "Lane",
    "Light",
    "Lights",
    "Loaf",
    "Lock",
    "Locks",
    "Locks",
    "Lodge",
    "Lodge",
    "Loop",
    "Mall",
    "Manor",
    "Manors",
    "Meadow",
    "Meadows",
    "Mews",
    "Mill",
    "Mills",
    "Mission",
    "Mission",
    "Motorway",
    "Mount",
    "Mountain",
    "Mountain",
    "Mountains",
    "Mountains",
    "Neck",
    "Orchard",
    "Oval",
    "Overpass",
    "Park",
    "Parks",
    "Parkway",
    "Parkways",
    "Pass",
    "Passage",
    "Path",
    "Pike",
    "Pine",
    "Pines",
    "Place",
    "Plain",
    "Plains",
    "Plains",
    "Plaza",
    "Plaza",
    "Point",
    "Points",
    "Port",
    "Port",
    "Ports",
    "Ports",
    "Prairie",
    "Prairie",
    "Radial",
    "Ramp",
    "Ranch",
    "Rapid",
    "Rapids",
    "Rest",
    "Ridge",
    "Ridges",
    "River",
    "Road",
    "Road",
    "Roads",
    "Roads",
    "Route",
    "Row",
    "Rue",
    "Run",
    "Shoal",
    "Shoals",
    "Shore",
    "Shores",
    "Skyway",
    "Spring",
    "Springs",
    "Springs",
    "Spur",
    "Spurs",
    "Square",
    "Square",
    "Squares",
    "Squares",
    "Station",
    "Station",
    "Stravenue",
    "Stravenue",
    "Stream",
    "Stream",
    "Street",
    "Street",
    "Streets",
    "Summit",
    "Summit",
    "Terrace",
    "Throughway",
    "Trace",
    "Track",
    "Trafficway",
    "Trail",
    "Trail",
    "Tunnel",
    "Tunnel",
    "Turnpike",
    "Turnpike",
    "Underpass",
    "Union",
    "Unions",
    "Valley",
    "Valleys",
    "Via",
    "Viaduct",
    "View",
    "Views",
    "Village",
    "Village",
    "Villages",
    "Ville",
    "Vista",
    "Vista",
    "Walk",
    "Walks",
    "Wall",
    "Way",
    "Ways",
    "Well",
    "Wells"
  ],
  "secondary_address": [
    "Apt. ###",
    "Suite ###"
  ],
  "postcode": [
    "#####",
    "#####-####"
  ],
  "postcode_by_state": [
    "#####",
    "#####-####"
  ],
  "state": [
    "Alabama",
    "Alaska",
    "Arizona",
    "Arkansas",
    "California",
    "Colorado",
    "Connecticut",
    "Delaware",
    "Florida",
    "Georgia",
    "Hawaii",
    "Idaho",
    "Illinois",
    "Indiana",
    "Iowa",
    "Kansas",
    "Kentucky",
    "Louisiana",
    "Maine",
    "Maryland",
    "Massachusetts",
    "Michigan",
    "Minnesota",
    "Mississippi",
    "Missouri",
    "Montana",
    "Nebraska",
    "Nevada",
    "New Hampshire",
    "New Jersey",
    "New Mexico",
    "New York",
    "North Carolina",
    "North Dakota",
    "Ohio",
    "Oklahoma",
    "Oregon",
    "Pennsylvania",
    "Rhode Island",
    "South Carolina",
    "South Dakota",
    "Tennessee",
    "Texas",
    "Utah",
    "Vermont",
    "Virginia",
    "Washington",
    "West Virginia",
    "Wisconsin",
    "Wyoming"
  ],
  "state_abbr": [
    "AL",
    "AK",
    "AZ",
    "AR",
    "CA",
    "CO",
    "CT",
    "DE",
    "FL",
    "GA",
    "HI",
    "ID",
    "IL",
    "IN",
    "IA",
    "KS",
    "KY",
    "LA",
    "ME",
    "MD",
    "MA",
    "MI",
    "MN",
    "MS",
    "MO",
    "MT",
    "NE",
    "NV",
    "NH",
    "NJ",
    "NM",
    "NY",
    "NC",
    "ND",
    "OH",
    "OK",
    "OR",
    "PA",
    "RI",
    "SC",
    "SD",
    "TN",
    "TX",
    "UT",
    "VT",
    "VA",
    "WA",
    "WV",
    "WI",
    "WY"
  ],
  "time_zone": [
    "Pacific/Midway",
    "Pacific/Pago_Pago",
    "Pacific/Honolulu",
    "America/Juneau",
    "America/Los_Angeles",
    "America/Tijuana",
    "America/Denver",
    "America/Phoenix",
    "America/Chihuahua",
    "America/Mazatlan",
    "America/Chicago",
    "America/Regina",
    "America/Mexico_City",
    "America/Mexico_City",
    "America/Monterrey",
    "America/Guatemala",
    "America/New_York",
    "America/Indiana/Indianapolis",
    "America/Bogota",
    "America/Lima",
    "America/Lima",
    "America/Halifax",
    "America/Caracas",
    "America/La_Paz",
    "America/Santiago",
    "America/St_Johns",
    "America/Sao_Paulo",
    "America/Argentina/Buenos_Aires",
    "America/Guyana",
    "America/Godthab",
    "Atlantic/South_Georgia",
    "Atlantic/Azores",
    "Atlantic/Cape_Verde",
    "Europe/Dublin",
    "Europe/London",
    "Europe/Lisbon",
    "Europe/London",
    "Africa/Casablanca",
    "Africa/Monrovia",
    "Etc/UTC",
    "Europe/Belgrade",
    "Europe/Bratislava",
    "Europe/Budapest",
    "Europe/Ljubljana",
    "Europe/Prague",
    "Europe/Sarajevo",
    "Europe/Skopje",
    "Europe/Warsaw",
    "Europe/Zagreb",
    "Europe/Brussels",
    "Europe/Copenhagen",
    "Europe/Madrid",
    "Europe/Paris",
    "Europe/Amsterdam",
    "Europe/Berlin",
    "Europe/Berlin",
    "Europe/Rome",
    "Europe/Stockholm",
    "Europe/Vienna",
    "Africa/Algiers",
    "Europe/Bucharest",
    "Africa/Cairo",
    "Europe/Helsinki",
    "Europe/Kiev",
    "Europe/Riga",
    "Europe/Sofia",
    "Europe/Tallinn",
    "Europe/Vilnius",
    "Europe/Athens",
    "Europe/Istanbul",
    "Europe/Minsk",
    "Asia/Jerusalem",
    "Africa/Harare",
    "Africa/Johannesburg",
    "Europe/Moscow",
    "Europe/Moscow",
    "Europe/Moscow",
    "Asia/Kuwait",
    "Asia/Riyadh",
    "Africa/Nairobi",
    "Asia/Baghdad",
    "Asia/Tehran",
    "Asia/Muscat",
    "Asia/Muscat",
    "Asia/Baku",
    "Asia/Tbilisi",
    "Asia/Yerevan",
    "Asia/Kabul",
    "Asia/Yekaterinburg",
    "Asia/Karachi",
    "Asia/Karachi",
    "Asia/Tashkent",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kathmandu",
    "Asia/Dhaka",
    "Asia/Dhaka",
    "Asia/Colombo",
    "Asia/Almaty",
    "Asia/Novosibirsk",
    "Asia/Rangoon",
    "Asia/Bangkok",
    "Asia/Bangkok",
    "Asia/Jakarta",
    "Asia/Krasnoyarsk",
    "Asia/Shanghai",
    "Asia/Chongqing",
    "Asia/Hong_Kong",
    "Asia/Urumqi",
    "Asia/Kuala_Lumpur",
    "Asia/Singapore",
    "Asia/Taipei",
    "Australia/Perth",
    "Asia/Irkutsk",
    "Asia/Ulaanbaatar",
    "Asia/Seoul",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Yakutsk",
    "Australia/Darwin",
    "Australia/Adelaide",
    "Australia/Melbourne",
    "Australia/Melbourne",
    "Australia/Sydney",
    "Australia/Brisbane",
    "Australia/Hobart",
    "Asia/Vladivostok",
    "Pacific/Guam",
    "Pacific/Port_Moresby",
    "Asia/Magadan",
    "Asia/Magadan",
    "Pacific/Noumea",
    "Pacific/Fiji",
    "Asia/Kamchatka",
    "Pacific/Majuro",
    "Pacific/Auckland",
    "Pacific/Auckland",
    "Pacific/Tongatapu",
    "Pacific/Fakaofo",
    "Pacific/Apia"
  ],
  "city": [
    "#{city_prefix} #{Name.first_name}#{city_suffix}",
    "#{city_prefix} #{Name.first_name}",
    "#{Name.first_name}#{city_suffix}",
    "#{Name.last_name}#{city_suffix}"
  ],
  "street_name": [
    "#{Name.first_name} #{street_suffix}",
    "#{Name.last_name} #{street_suffix}"
  ],
  "street_address": [
    "#{building_number} #{street_name}"
  ],
  "default_country": [
    "United States of America"
  ]
};
en.credit_card = {
  "visa": [
    "/4###########L/",
    "/4###-####-####-###L/"
  ],
  "mastercard": [
    "/5[1-5]##-####-####-###L/",
    "/6771-89##-####-###L/"
  ],
  "discover": [
    "/6011-####-####-###L/",
    "/65##-####-####-###L/",
    "/64[4-9]#-####-####-###L/",
    "/6011-62##-####-####-###L/",
    "/65##-62##-####-####-###L/",
    "/64[4-9]#-62##-####-####-###L/"
  ],
  "american_express": [
    "/34##-######-####L/",
    "/37##-######-####L/"
  ],
  "diners_club": [
    "/30[0-5]#-######-###L/",
    "/368#-######-###L/"
  ],
  "jcb": [
    "/3528-####-####-###L/",
    "/3529-####-####-###L/",
    "/35[3-8]#-####-####-###L/"
  ],
  "switch": [
    "/6759-####-####-###L/",
    "/6759-####-####-####-#L/",
    "/6759-####-####-####-##L/"
  ],
  "solo": [
    "/6767-####-####-###L/",
    "/6767-####-####-####-#L/",
    "/6767-####-####-####-##L/"
  ],
  "dankort": "/5019-####-####-###L/",
  "maestro": [
    "/50#{9,16}L/",
    "/5[6-8]#{9,16}L/",
    "/56##{9,16}L/"
  ],
  "forbrugsforeningen": "/6007-22##-####-###L/",
  "laser": [
    "/6304###########L/",
    "/6706###########L/",
    "/6771###########L/",
    "/6709###########L/",
    "/6304#########{5,6}L/",
    "/6706#########{5,6}L/",
    "/6771#########{5,6}L/",
    "/6709#########{5,6}L/"
  ]
};
en.company = {
  "suffix": [
    "Inc",
    "and Sons",
    "LLC",
    "Group"
  ],
  "adjective": [
      "Adaptive",
      "Advanced",
      "Ameliorated",
      "Assimilated",
      "Automated",
      "Balanced",
      "Business-focused",
      "Centralized",
      "Cloned",
      "Compatible",
      "Configurable",
      "Cross-group",
      "Cross-platform",
      "Customer-focused",
      "Customizable",
      "Decentralized",
      "De-engineered",
      "Devolved",
      "Digitized",
      "Distributed",
      "Diverse",
      "Down-sized",
      "Enhanced",
      "Enterprise-wide",
      "Ergonomic",
      "Exclusive",
      "Expanded",
      "Extended",
      "Face to face",
      "Focused",
      "Front-line",
      "Fully-configurable",
      "Function-based",
      "Fundamental",
      "Future-proofed",
      "Grass-roots",
      "Horizontal",
      "Implemented",
      "Innovative",
      "Integrated",
      "Intuitive",
      "Inverse",
      "Managed",
      "Mandatory",
      "Monitored",
      "Multi-channelled",
      "Multi-lateral",
      "Multi-layered",
      "Multi-tiered",
      "Networked",
      "Object-based",
      "Open-architected",
      "Open-source",
      "Operative",
      "Optimized",
      "Optional",
      "Organic",
      "Organized",
      "Persevering",
      "Persistent",
      "Phased",
      "Polarised",
      "Pre-emptive",
      "Proactive",
      "Profit-focused",
      "Profound",
      "Programmable",
      "Progressive",
      "Public-key",
      "Quality-focused",
      "Reactive",
      "Realigned",
      "Re-contextualized",
      "Re-engineered",
      "Reduced",
      "Reverse-engineered",
      "Right-sized",
      "Robust",
      "Seamless",
      "Secured",
      "Self-enabling",
      "Sharable",
      "Stand-alone",
      "Streamlined",
      "Switchable",
      "Synchronised",
      "Synergistic",
      "Synergized",
      "Team-oriented",
      "Total",
      "Triple-buffered",
      "Universal",
      "Up-sized",
      "Upgradable",
      "User-centric",
      "User-friendly",
      "Versatile",
      "Virtual",
      "Visionary",
      "Vision-oriented"
  ],
  "descriptor": [
      "24 hour",
      "24/7",
      "3rd generation",
      "4th generation",
      "5th generation",
      "6th generation",
      "actuating",
      "analyzing",
      "asymmetric",
      "asynchronous",
      "attitude-oriented",
      "background",
      "bandwidth-monitored",
      "bi-directional",
      "bifurcated",
      "bottom-line",
      "clear-thinking",
      "client-driven",
      "client-server",
      "coherent",
      "cohesive",
      "composite",
      "context-sensitive",
      "contextually-based",
      "content-based",
      "dedicated",
      "demand-driven",
      "didactic",
      "directional",
      "discrete",
      "disintermediate",
      "dynamic",
      "eco-centric",
      "empowering",
      "encompassing",
      "even-keeled",
      "executive",
      "explicit",
      "exuding",
      "fault-tolerant",
      "foreground",
      "fresh-thinking",
      "full-range",
      "global",
      "grid-enabled",
      "heuristic",
      "high-level",
      "holistic",
      "homogeneous",
      "human-resource",
      "hybrid",
      "impactful",
      "incremental",
      "intangible",
      "interactive",
      "intermediate",
      "leading edge",
      "local",
      "logistical",
      "maximized",
      "methodical",
      "mission-critical",
      "mobile",
      "modular",
      "motivating",
      "multimedia",
      "multi-state",
      "multi-tasking",
      "national",
      "needs-based",
      "neutral",
      "next generation",
      "non-volatile",
      "object-oriented",
      "optimal",
      "optimizing",
      "radical",
      "real-time",
      "reciprocal",
      "regional",
      "responsive",
      "scalable",
      "secondary",
      "solution-oriented",
      "stable",
      "static",
      "systematic",
      "systemic",
      "system-worthy",
      "tangible",
      "tertiary",
      "transitional",
      "uniform",
      "upward-trending",
      "user-facing",
      "value-added",
      "web-enabled",
      "well-modulated",
      "zero administration",
      "zero defect",
      "zero tolerance"
    ],
    "noun": [
      "ability",
      "access",
      "adapter",
      "algorithm",
      "alliance",
      "analyzer",
      "application",
      "approach",
      "architecture",
      "archive",
      "artificial intelligence",
      "array",
      "attitude",
      "benchmark",
      "budgetary management",
      "capability",
      "capacity",
      "challenge",
      "circuit",
      "collaboration",
      "complexity",
      "concept",
      "conglomeration",
      "contingency",
      "core",
      "customer loyalty",
      "database",
      "data-warehouse",
      "definition",
      "emulation",
      "encoding",
      "encryption",
      "extranet",
      "firmware",
      "flexibility",
      "focus group",
      "forecast",
      "frame",
      "framework",
      "function",
      "functionalities",
      "Graphic Interface",
      "groupware",
      "Graphical User Interface",
      "hardware",
      "help-desk",
      "hierarchy",
      "hub",
      "implementation",
      "info-mediaries",
      "infrastructure",
      "initiative",
      "installation",
      "instruction set",
      "interface",
      "internet solution",
      "intranet",
      "knowledge user",
      "knowledge base",
      "local area network",
      "leverage",
      "matrices",
      "matrix",
      "methodology",
      "middleware",
      "migration",
      "model",
      "moderator",
      "monitoring",
      "moratorium",
      "neural-net",
      "open architecture",
      "open system",
      "orchestration",
      "paradigm",
      "parallelism",
      "policy",
      "portal",
      "pricing structure",
      "process improvement",
      "product",
      "productivity",
      "project",
      "projection",
      "protocol",
      "secured line",
      "service-desk",
      "software",
      "solution",
      "standardization",
      "strategy",
      "structure",
      "success",
      "superstructure",
      "support",
      "synergy",
      "system engine",
      "task-force",
      "throughput",
      "time-frame",
      "toolset",
      "utilisation",
      "website",
      "workforce"
   ],
  "bs_verb": [
      "implement",
      "utilize",
      "integrate",
      "streamline",
      "optimize",
      "evolve",
      "transform",
      "embrace",
      "enable",
      "orchestrate",
      "leverage",
      "reinvent",
      "aggregate",
      "architect",
      "enhance",
      "incentivize",
      "morph",
      "empower",
      "envisioneer",
      "monetize",
      "harness",
      "facilitate",
      "seize",
      "disintermediate",
      "synergize",
      "strategize",
      "deploy",
      "brand",
      "grow",
      "target",
      "syndicate",
      "synthesize",
      "deliver",
      "mesh",
      "incubate",
      "engage",
      "maximize",
      "benchmark",
      "expedite",
      "reintermediate",
      "whiteboard",
      "visualize",
      "repurpose",
      "innovate",
      "scale",
      "unleash",
      "drive",
      "extend",
      "engineer",
      "revolutionize",
      "generate",
      "exploit",
      "transition",
      "e-enable",
      "iterate",
      "cultivate",
      "matrix",
      "productize",
      "redefine",
      "recontextualize"
    ],
    "bs_adjective": [
      "clicks-and-mortar",
      "value-added",
      "vertical",
      "proactive",
      "robust",
      "revolutionary",
      "scalable",
      "leading-edge",
      "innovative",
      "intuitive",
      "strategic",
      "e-business",
      "mission-critical",
      "sticky",
      "one-to-one",
      "24/7",
      "end-to-end",
      "global",
      "B2B",
      "B2C",
      "granular",
      "frictionless",
      "virtual",
      "viral",
      "dynamic",
      "24/365",
      "best-of-breed",
      "killer",
      "magnetic",
      "bleeding-edge",
      "web-enabled",
      "interactive",
      "dot-com",
      "sexy",
      "back-end",
      "real-time",
      "efficient",
      "front-end",
      "distributed",
      "seamless",
      "extensible",
      "turn-key",
      "world-class",
      "open-source",
      "cross-platform",
      "cross-media",
      "synergistic",
      "bricks-and-clicks",
      "out-of-the-box",
      "enterprise",
      "integrated",
      "impactful",
      "wireless",
      "transparent",
      "next-generation",
      "cutting-edge",
      "user-centric",
      "visionary",
      "customized",
      "ubiquitous",
      "plug-and-play",
      "collaborative",
      "compelling",
      "holistic",
      "rich"
    ],
    "bs_noun": [
      "synergies",
      "web-readiness",
      "paradigms",
      "markets",
      "partnerships",
      "infrastructures",
      "platforms",
      "initiatives",
      "channels",
      "eyeballs",
      "communities",
      "ROI",
      "solutions",
      "e-tailers",
      "e-services",
      "action-items",
      "portals",
      "niches",
      "technologies",
      "content",
      "vortals",
      "supply-chains",
      "convergence",
      "relationships",
      "architectures",
      "interfaces",
      "e-markets",
      "e-commerce",
      "systems",
      "bandwidth",
      "infomediaries",
      "models",
      "mindshare",
      "deliverables",
      "users",
      "schemas",
      "networks",
      "applications",
      "metrics",
      "e-business",
      "functionalities",
      "experiences",
      "web services",
      "methodologies"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} and #{Name.last_name}"
  ]
};
en.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ],
  "domain_suffix": [
    "com",
    "biz",
    "info",
    "name",
    "net",
    "org"
  ]
};

//All this avatar have been authorized by its awesome users to be use on live websites (not just mockups)
//For more information, please visit: http://uifaces.com/authorized
var avatarUri = ["jarjan/128.jpg",
    "mahdif/128.jpg",
    "sprayaga/128.jpg",
    "ruzinav/128.jpg",
    "Skyhartman/128.jpg",
    "moscoz/128.jpg",
    "kurafire/128.jpg",
    "91bilal/128.jpg",
    "igorgarybaldi/128.jpg",
    "calebogden/128.jpg",
    "malykhinv/128.jpg",
    "joelhelin/128.jpg",
    "kushsolitary/128.jpg",
    "coreyweb/128.jpg",
    "snowshade/128.jpg",
    "areus/128.jpg",
    "holdenweb/128.jpg",
    "heyimjuani/128.jpg",
    "envex/128.jpg",
    "unterdreht/128.jpg",
    "collegeman/128.jpg",
    "peejfancher/128.jpg",
    "andyisonline/128.jpg",
    "ultragex/128.jpg",
    "fuck_you_two/128.jpg",
    "adellecharles/128.jpg",
    "ateneupopular/128.jpg",
    "ahmetalpbalkan/128.jpg",
    "Stievius/128.jpg",
    "kerem/128.jpg",
    "osvaldas/128.jpg",
    "angelceballos/128.jpg",
    "thierrykoblentz/128.jpg",
    "peterlandt/128.jpg",
    "catarino/128.jpg",
    "wr/128.jpg",
    "weglov/128.jpg",
    "brandclay/128.jpg",
    "flame_kaizar/128.jpg",
    "ahmetsulek/128.jpg",
    "nicolasfolliot/128.jpg",
    "jayrobinson/128.jpg",
    "victorerixon/128.jpg",
    "kolage/128.jpg",
    "michzen/128.jpg",
    "markjenkins/128.jpg",
    "nicolai_larsen/128.jpg",
    "gt/128.jpg",
    "noxdzine/128.jpg",
    "alagoon/128.jpg",
    "idiot/128.jpg",
    "mizko/128.jpg",
    "chadengle/128.jpg",
    "mutlu82/128.jpg",
    "simobenso/128.jpg",
    "vocino/128.jpg",
    "guiiipontes/128.jpg",
    "soyjavi/128.jpg",
    "joshaustin/128.jpg",
    "tomaslau/128.jpg",
    "VinThomas/128.jpg",
    "ManikRathee/128.jpg",
    "langate/128.jpg",
    "cemshid/128.jpg",
    "leemunroe/128.jpg",
    "_shahedk/128.jpg",
    "enda/128.jpg",
    "BillSKenney/128.jpg",
    "divya/128.jpg",
    "joshhemsley/128.jpg",
    "sindresorhus/128.jpg",
    "soffes/128.jpg",
    "9lessons/128.jpg",
    "linux29/128.jpg",
    "Chakintosh/128.jpg",
    "anaami/128.jpg",
    "joreira/128.jpg",
    "shadeed9/128.jpg",
    "scottkclark/128.jpg",
    "jedbridges/128.jpg",
    "salleedesign/128.jpg",
    "marakasina/128.jpg",
    "ariil/128.jpg",
    "BrianPurkiss/128.jpg",
    "michaelmartinho/128.jpg",
    "bublienko/128.jpg",
    "devankoshal/128.jpg",
    "ZacharyZorbas/128.jpg",
    "timmillwood/128.jpg",
    "joshuasortino/128.jpg",
    "damenleeturks/128.jpg",
    "tomas_janousek/128.jpg",
    "herrhaase/128.jpg",
    "RussellBishop/128.jpg",
    "brajeshwar/128.jpg",
    "nachtmeister/128.jpg",
    "cbracco/128.jpg",
    "bermonpainter/128.jpg",
    "abdullindenis/128.jpg",
    "isacosta/128.jpg",
    "suprb/128.jpg",
    "yalozhkin/128.jpg",
    "chandlervdw/128.jpg",
    "iamgarth/128.jpg",
    "_victa/128.jpg",
    "commadelimited/128.jpg",
    "roybarberuk/128.jpg",
    "axel/128.jpg",
    "vladarbatov/128.jpg",
    "ffbel/128.jpg",
    "syropian/128.jpg",
    "ankitind/128.jpg",
    "traneblow/128.jpg",
    "flashmurphy/128.jpg",
    "ChrisFarina78/128.jpg",
    "baliomega/128.jpg",
    "saschamt/128.jpg",
    "jm_denis/128.jpg",
    "anoff/128.jpg",
    "kennyadr/128.jpg",
    "chatyrko/128.jpg",
    "dingyi/128.jpg",
    "mds/128.jpg",
    "terryxlife/128.jpg",
    "aaroni/128.jpg",
    "kinday/128.jpg",
    "prrstn/128.jpg",
    "eduardostuart/128.jpg",
    "dhilipsiva/128.jpg",
    "GavicoInd/128.jpg",
    "baires/128.jpg",
    "rohixx/128.jpg",
    "bigmancho/128.jpg",
    "blakesimkins/128.jpg",
    "leeiio/128.jpg",
    "tjrus/128.jpg",
    "uberschizo/128.jpg",
    "kylefoundry/128.jpg",
    "claudioguglieri/128.jpg",
    "ripplemdk/128.jpg",
    "exentrich/128.jpg",
    "jakemoore/128.jpg",
    "joaoedumedeiros/128.jpg",
    "poormini/128.jpg",
    "tereshenkov/128.jpg",
    "keryilmaz/128.jpg",
    "haydn_woods/128.jpg",
    "rude/128.jpg",
    "llun/128.jpg",
    "sgaurav_baghel/128.jpg",
    "jamiebrittain/128.jpg",
    "badlittleduck/128.jpg",
    "pifagor/128.jpg",
    "agromov/128.jpg",
    "benefritz/128.jpg",
    "erwanhesry/128.jpg",
    "diesellaws/128.jpg",
    "jeremiaha/128.jpg",
    "koridhandy/128.jpg",
    "chaensel/128.jpg",
    "andrewcohen/128.jpg",
    "smaczny/128.jpg",
    "gonzalorobaina/128.jpg",
    "nandini_m/128.jpg",
    "sydlawrence/128.jpg",
    "cdharrison/128.jpg",
    "tgerken/128.jpg",
    "lewisainslie/128.jpg",
    "charliecwaite/128.jpg",
    "robbschiller/128.jpg",
    "flexrs/128.jpg",
    "mattdetails/128.jpg",
    "raquelwilson/128.jpg",
    "karsh/128.jpg",
    "mrmartineau/128.jpg",
    "opnsrce/128.jpg",
    "hgharrygo/128.jpg",
    "maximseshuk/128.jpg",
    "uxalex/128.jpg",
    "samihah/128.jpg",
    "chanpory/128.jpg",
    "sharvin/128.jpg",
    "josemarques/128.jpg",
    "jefffis/128.jpg",
    "krystalfister/128.jpg",
    "lokesh_coder/128.jpg",
    "thedamianhdez/128.jpg",
    "dpmachado/128.jpg",
    "funwatercat/128.jpg",
    "timothycd/128.jpg",
    "ivanfilipovbg/128.jpg",
    "picard102/128.jpg",
    "marcobarbosa/128.jpg",
    "krasnoukhov/128.jpg",
    "g3d/128.jpg",
    "ademilter/128.jpg",
    "rickdt/128.jpg",
    "operatino/128.jpg",
    "bungiwan/128.jpg",
    "hugomano/128.jpg",
    "logorado/128.jpg",
    "dc_user/128.jpg",
    "horaciobella/128.jpg",
    "SlaapMe/128.jpg",
    "teeragit/128.jpg",
    "iqonicd/128.jpg",
    "ilya_pestov/128.jpg",
    "andrewarrow/128.jpg",
    "ssiskind/128.jpg",
    "stan/128.jpg",
    "HenryHoffman/128.jpg",
    "rdsaunders/128.jpg",
    "adamsxu/128.jpg",
    "curiousoffice/128.jpg",
    "themadray/128.jpg",
    "michigangraham/128.jpg",
    "kohette/128.jpg",
    "nickfratter/128.jpg",
    "runningskull/128.jpg",
    "madysondesigns/128.jpg",
    "brenton_clarke/128.jpg",
    "jennyshen/128.jpg",
    "bradenhamm/128.jpg",
    "kurtinc/128.jpg",
    "amanruzaini/128.jpg",
    "coreyhaggard/128.jpg",
    "Karimmove/128.jpg",
    "aaronalfred/128.jpg",
    "wtrsld/128.jpg",
    "jitachi/128.jpg",
    "therealmarvin/128.jpg",
    "pmeissner/128.jpg",
    "ooomz/128.jpg",
    "chacky14/128.jpg",
    "jesseddy/128.jpg",
    "thinmatt/128.jpg",
    "shanehudson/128.jpg",
    "akmur/128.jpg",
    "IsaryAmairani/128.jpg",
    "arthurholcombe1/128.jpg",
    "andychipster/128.jpg",
    "boxmodel/128.jpg",
    "ehsandiary/128.jpg",
    "LucasPerdidao/128.jpg",
    "shalt0ni/128.jpg",
    "swaplord/128.jpg",
    "kaelifa/128.jpg",
    "plbabin/128.jpg",
    "guillemboti/128.jpg",
    "arindam_/128.jpg",
    "renbyrd/128.jpg",
    "thiagovernetti/128.jpg",
    "jmillspaysbills/128.jpg",
    "mikemai2awesome/128.jpg",
    "jervo/128.jpg",
    "mekal/128.jpg",
    "sta1ex/128.jpg",
    "robergd/128.jpg",
    "felipecsl/128.jpg",
    "andrea211087/128.jpg",
    "garand/128.jpg",
    "dhooyenga/128.jpg",
    "abovefunction/128.jpg",
    "pcridesagain/128.jpg",
    "randomlies/128.jpg",
    "BryanHorsey/128.jpg",
    "heykenneth/128.jpg",
    "dahparra/128.jpg",
    "allthingssmitty/128.jpg",
    "danvernon/128.jpg",
    "beweinreich/128.jpg",
    "increase/128.jpg",
    "falvarad/128.jpg",
    "alxndrustinov/128.jpg",
    "souuf/128.jpg",
    "orkuncaylar/128.jpg",
    "AM_Kn2/128.jpg",
    "gearpixels/128.jpg",
    "bassamology/128.jpg",
    "vimarethomas/128.jpg",
    "kosmar/128.jpg",
    "SULiik/128.jpg",
    "mrjamesnoble/128.jpg",
    "silvanmuhlemann/128.jpg",
    "shaneIxD/128.jpg",
    "nacho/128.jpg",
    "yigitpinarbasi/128.jpg",
    "buzzusborne/128.jpg",
    "aaronkwhite/128.jpg",
    "rmlewisuk/128.jpg",
    "giancarlon/128.jpg",
    "nbirckel/128.jpg",
    "d_nny_m_cher/128.jpg",
    "sdidonato/128.jpg",
    "atariboy/128.jpg",
    "abotap/128.jpg",
    "karalek/128.jpg",
    "psdesignuk/128.jpg",
    "ludwiczakpawel/128.jpg",
    "nemanjaivanovic/128.jpg",
    "baluli/128.jpg",
    "ahmadajmi/128.jpg",
    "vovkasolovev/128.jpg",
    "samgrover/128.jpg",
    "derienzo777/128.jpg",
    "jonathansimmons/128.jpg",
    "nelsonjoyce/128.jpg",
    "S0ufi4n3/128.jpg",
    "xtopherpaul/128.jpg",
    "oaktreemedia/128.jpg",
    "nateschulte/128.jpg",
    "findingjenny/128.jpg",
    "namankreative/128.jpg",
    "antonyzotov/128.jpg",
    "we_social/128.jpg",
    "leehambley/128.jpg",
    "solid_color/128.jpg",
    "abelcabans/128.jpg",
    "mbilderbach/128.jpg",
    "kkusaa/128.jpg",
    "jordyvdboom/128.jpg",
    "carlosgavina/128.jpg",
    "pechkinator/128.jpg",
    "vc27/128.jpg",
    "rdbannon/128.jpg",
    "croakx/128.jpg",
    "suribbles/128.jpg",
    "kerihenare/128.jpg",
    "catadeleon/128.jpg",
    "gcmorley/128.jpg",
    "duivvv/128.jpg",
    "saschadroste/128.jpg",
    "victorDubugras/128.jpg",
    "wintopia/128.jpg",
    "mattbilotti/128.jpg",
    "taylorling/128.jpg",
    "megdraws/128.jpg",
    "meln1ks/128.jpg",
    "mahmoudmetwally/128.jpg",
    "Silveredge9/128.jpg",
    "derekebradley/128.jpg",
    "happypeter1983/128.jpg",
    "travis_arnold/128.jpg",
    "artem_kostenko/128.jpg",
    "adobi/128.jpg",
    "daykiine/128.jpg",
    "alek_djuric/128.jpg",
    "scips/128.jpg",
    "miguelmendes/128.jpg",
    "justinrhee/128.jpg",
    "alsobrooks/128.jpg",
    "fronx/128.jpg",
    "mcflydesign/128.jpg",
    "santi_urso/128.jpg",
    "allfordesign/128.jpg",
    "stayuber/128.jpg",
    "bertboerland/128.jpg",
    "marosholly/128.jpg",
    "adamnac/128.jpg",
    "cynthiasavard/128.jpg",
    "muringa/128.jpg",
    "danro/128.jpg",
    "hiemil/128.jpg",
    "jackiesaik/128.jpg",
    "zacsnider/128.jpg",
    "iduuck/128.jpg",
    "antjanus/128.jpg",
    "aroon_sharma/128.jpg",
    "dshster/128.jpg",
    "thehacker/128.jpg",
    "michaelbrooksjr/128.jpg",
    "ryanmclaughlin/128.jpg",
    "clubb3rry/128.jpg",
    "taybenlor/128.jpg",
    "xripunov/128.jpg",
    "myastro/128.jpg",
    "adityasutomo/128.jpg",
    "digitalmaverick/128.jpg",
    "hjartstrorn/128.jpg",
    "itolmach/128.jpg",
    "vaughanmoffitt/128.jpg",
    "abdots/128.jpg",
    "isnifer/128.jpg",
    "sergeysafonov/128.jpg",
    "maz/128.jpg",
    "scrapdnb/128.jpg",
    "chrismj83/128.jpg",
    "vitorleal/128.jpg",
    "sokaniwaal/128.jpg",
    "zaki3d/128.jpg",
    "illyzoren/128.jpg",
    "mocabyte/128.jpg",
    "osmanince/128.jpg",
    "djsherman/128.jpg",
    "davidhemphill/128.jpg",
    "waghner/128.jpg",
    "necodymiconer/128.jpg",
    "praveen_vijaya/128.jpg",
    "fabbrucci/128.jpg",
    "cliffseal/128.jpg",
    "travishines/128.jpg",
    "kuldarkalvik/128.jpg",
    "Elt_n/128.jpg",
    "phillapier/128.jpg",
    "okseanjay/128.jpg",
    "id835559/128.jpg",
    "kudretkeskin/128.jpg",
    "anjhero/128.jpg",
    "duck4fuck/128.jpg",
    "scott_riley/128.jpg",
    "noufalibrahim/128.jpg",
    "h1brd/128.jpg",
    "borges_marcos/128.jpg",
    "devinhalladay/128.jpg",
    "ciaranr/128.jpg",
    "stefooo/128.jpg",
    "mikebeecham/128.jpg",
    "tonymillion/128.jpg",
    "joshuaraichur/128.jpg",
    "irae/128.jpg",
    "petrangr/128.jpg",
    "dmitriychuta/128.jpg",
    "charliegann/128.jpg",
    "arashmanteghi/128.jpg",
    "adhamdannaway/128.jpg",
    "ainsleywagon/128.jpg",
    "svenlen/128.jpg",
    "faisalabid/128.jpg",
    "beshur/128.jpg",
    "carlyson/128.jpg",
    "dutchnadia/128.jpg",
    "teddyzetterlund/128.jpg",
    "samuelkraft/128.jpg",
    "aoimedia/128.jpg",
    "toddrew/128.jpg",
    "codepoet_ru/128.jpg",
    "artvavs/128.jpg",
    "benoitboucart/128.jpg",
    "jomarmen/128.jpg",
    "kolmarlopez/128.jpg",
    "creartinc/128.jpg",
    "homka/128.jpg",
    "gaborenton/128.jpg",
    "robinclediere/128.jpg",
    "maximsorokin/128.jpg",
    "plasticine/128.jpg",
    "j2deme/128.jpg",
    "peachananr/128.jpg",
    "kapaluccio/128.jpg",
    "de_ascanio/128.jpg",
    "rikas/128.jpg",
    "dawidwu/128.jpg",
    "marcoramires/128.jpg",
    "angelcreative/128.jpg",
    "rpatey/128.jpg",
    "popey/128.jpg",
    "rehatkathuria/128.jpg",
    "the_purplebunny/128.jpg",
    "1markiz/128.jpg",
    "ajaxy_ru/128.jpg",
    "brenmurrell/128.jpg",
    "dudestein/128.jpg",
    "oskarlevinson/128.jpg",
    "victorstuber/128.jpg",
    "nehfy/128.jpg",
    "vicivadeline/128.jpg",
    "leandrovaranda/128.jpg",
    "scottgallant/128.jpg",
    "victor_haydin/128.jpg",
    "sawrb/128.jpg",
    "ryhanhassan/128.jpg",
    "amayvs/128.jpg",
    "a_brixen/128.jpg",
    "karolkrakowiak_/128.jpg",
    "herkulano/128.jpg",
    "geran7/128.jpg",
    "cggaurav/128.jpg",
    "chris_witko/128.jpg",
    "lososina/128.jpg",
    "polarity/128.jpg",
    "mattlat/128.jpg",
    "brandonburke/128.jpg",
    "constantx/128.jpg",
    "teylorfeliz/128.jpg",
    "craigelimeliah/128.jpg",
    "rachelreveley/128.jpg",
    "reabo101/128.jpg",
    "rahmeen/128.jpg",
    "ky/128.jpg",
    "rickyyean/128.jpg",
    "j04ntoh/128.jpg",
    "spbroma/128.jpg",
    "sebashton/128.jpg",
    "jpenico/128.jpg",
    "francis_vega/128.jpg",
    "oktayelipek/128.jpg",
    "kikillo/128.jpg",
    "fabbianz/128.jpg",
    "larrygerard/128.jpg",
    "BroumiYoussef/128.jpg",
    "0therplanet/128.jpg",
    "mbilalsiddique1/128.jpg",
    "ionuss/128.jpg",
    "grrr_nl/128.jpg",
    "liminha/128.jpg",
    "rawdiggie/128.jpg",
    "ryandownie/128.jpg",
    "sethlouey/128.jpg",
    "pixage/128.jpg",
    "arpitnj/128.jpg",
    "switmer777/128.jpg",
    "josevnclch/128.jpg",
    "kanickairaj/128.jpg",
    "puzik/128.jpg",
    "tbakdesigns/128.jpg",
    "besbujupi/128.jpg",
    "supjoey/128.jpg",
    "lowie/128.jpg",
    "linkibol/128.jpg",
    "balintorosz/128.jpg",
    "imcoding/128.jpg",
    "agustincruiz/128.jpg",
    "gusoto/128.jpg",
    "thomasschrijer/128.jpg",
    "superoutman/128.jpg",
    "kalmerrautam/128.jpg",
    "gabrielizalo/128.jpg",
    "gojeanyn/128.jpg",
    "davidbaldie/128.jpg",
    "_vojto/128.jpg",
    "laurengray/128.jpg",
    "jydesign/128.jpg",
    "mymyboy/128.jpg",
    "nellleo/128.jpg",
    "marciotoledo/128.jpg",
    "ninjad3m0/128.jpg",
    "to_soham/128.jpg",
    "hasslunsford/128.jpg",
    "muridrahhal/128.jpg",
    "levisan/128.jpg",
    "grahamkennery/128.jpg",
    "lepetitogre/128.jpg",
    "antongenkin/128.jpg",
    "nessoila/128.jpg",
    "amandabuzard/128.jpg",
    "safrankov/128.jpg",
    "cocolero/128.jpg",
    "dss49/128.jpg",
    "matt3224/128.jpg",
    "bluesix/128.jpg",
    "quailandquasar/128.jpg",
    "AlbertoCococi/128.jpg",
    "lepinski/128.jpg",
    "sementiy/128.jpg",
    "mhudobivnik/128.jpg",
    "thibaut_re/128.jpg",
    "olgary/128.jpg",
    "shojberg/128.jpg",
    "mtolokonnikov/128.jpg",
    "bereto/128.jpg",
    "naupintos/128.jpg",
    "wegotvices/128.jpg",
    "xadhix/128.jpg",
    "macxim/128.jpg",
    "rodnylobos/128.jpg",
    "madcampos/128.jpg",
    "madebyvadim/128.jpg",
    "bartoszdawydzik/128.jpg",
    "supervova/128.jpg",
    "markretzloff/128.jpg",
    "vonachoo/128.jpg",
    "darylws/128.jpg",
    "stevedesigner/128.jpg",
    "mylesb/128.jpg",
    "herbigt/128.jpg",
    "depaulawagner/128.jpg",
    "geshan/128.jpg",
    "gizmeedevil1991/128.jpg",
    "_scottburgess/128.jpg",
    "lisovsky/128.jpg",
    "davidsasda/128.jpg",
    "artd_sign/128.jpg",
    "YoungCutlass/128.jpg",
    "mgonto/128.jpg",
    "itstotallyamy/128.jpg",
    "victorquinn/128.jpg",
    "osmond/128.jpg",
    "oksanafrewer/128.jpg",
    "zauerkraut/128.jpg",
    "iamkeithmason/128.jpg",
    "nitinhayaran/128.jpg",
    "lmjabreu/128.jpg",
    "mandalareopens/128.jpg",
    "thinkleft/128.jpg",
    "ponchomendivil/128.jpg",
    "juamperro/128.jpg",
    "brunodesign1206/128.jpg",
    "caseycavanagh/128.jpg",
    "luxe/128.jpg",
    "dotgridline/128.jpg",
    "spedwig/128.jpg",
    "madewulf/128.jpg",
    "mattsapii/128.jpg",
    "helderleal/128.jpg",
    "chrisstumph/128.jpg",
    "jayphen/128.jpg",
    "nsamoylov/128.jpg",
    "chrisvanderkooi/128.jpg",
    "justme_timothyg/128.jpg",
    "otozk/128.jpg",
    "prinzadi/128.jpg",
    "gu5taf/128.jpg",
    "cyril_gaillard/128.jpg",
    "d_kobelyatsky/128.jpg",
    "daniloc/128.jpg",
    "nwdsha/128.jpg",
    "romanbulah/128.jpg",
    "skkirilov/128.jpg",
    "dvdwinden/128.jpg",
    "dannol/128.jpg",
    "thekevinjones/128.jpg",
    "jwalter14/128.jpg",
    "timgthomas/128.jpg",
    "buddhasource/128.jpg",
    "uxpiper/128.jpg",
    "thatonetommy/128.jpg",
    "diansigitp/128.jpg",
    "adrienths/128.jpg",
    "klimmka/128.jpg",
    "gkaam/128.jpg",
    "derekcramer/128.jpg",
    "jennyyo/128.jpg",
    "nerrsoft/128.jpg",
    "xalionmalik/128.jpg",
    "edhenderson/128.jpg",
    "keyuri85/128.jpg",
    "roxanejammet/128.jpg",
    "kimcool/128.jpg",
    "edkf/128.jpg",
    "matkins/128.jpg",
    "alessandroribe/128.jpg",
    "jacksonlatka/128.jpg",
    "lebronjennan/128.jpg",
    "kostaspt/128.jpg",
    "karlkanall/128.jpg",
    "moynihan/128.jpg",
    "danpliego/128.jpg",
    "saulihirvi/128.jpg",
    "wesleytrankin/128.jpg",
    "fjaguero/128.jpg",
    "bowbrick/128.jpg",
    "mashaaaaal/128.jpg",
    "yassiryahya/128.jpg",
    "dparrelli/128.jpg",
    "fotomagin/128.jpg",
    "aka_james/128.jpg",
    "denisepires/128.jpg",
    "iqbalperkasa/128.jpg",
    "martinansty/128.jpg",
    "jarsen/128.jpg",
    "r_oy/128.jpg",
    "justinrob/128.jpg",
    "gabrielrosser/128.jpg",
    "malgordon/128.jpg",
    "carlfairclough/128.jpg",
    "michaelabehsera/128.jpg",
    "pierrestoffe/128.jpg",
    "enjoythetau/128.jpg",
    "loganjlambert/128.jpg",
    "rpeezy/128.jpg",
    "coreyginnivan/128.jpg",
    "michalhron/128.jpg",
    "msveet/128.jpg",
    "lingeswaran/128.jpg",
    "kolsvein/128.jpg",
    "peter576/128.jpg",
    "reideiredale/128.jpg",
    "joeymurdah/128.jpg",
    "raphaelnikson/128.jpg",
    "mvdheuvel/128.jpg",
    "maxlinderman/128.jpg",
    "jimmuirhead/128.jpg",
    "begreative/128.jpg",
    "frankiefreesbie/128.jpg",
    "robturlinckx/128.jpg",
    "Talbi_ConSept/128.jpg",
    "longlivemyword/128.jpg",
    "vanchesz/128.jpg",
    "maiklam/128.jpg",
    "hermanobrother/128.jpg",
    "rez___a/128.jpg",
    "gregsqueeb/128.jpg",
    "greenbes/128.jpg",
    "_ragzor/128.jpg",
    "anthonysukow/128.jpg",
    "fluidbrush/128.jpg",
    "dactrtr/128.jpg",
    "jehnglynn/128.jpg",
    "bergmartin/128.jpg",
    "hugocornejo/128.jpg",
    "_kkga/128.jpg",
    "dzantievm/128.jpg",
    "sawalazar/128.jpg",
    "sovesove/128.jpg",
    "jonsgotwood/128.jpg",
    "byryan/128.jpg",
    "vytautas_a/128.jpg",
    "mizhgan/128.jpg",
    "cicerobr/128.jpg",
    "nilshelmersson/128.jpg",
    "d33pthought/128.jpg",
    "davecraige/128.jpg",
    "nckjrvs/128.jpg",
    "alexandermayes/128.jpg",
    "jcubic/128.jpg",
    "craigrcoles/128.jpg",
    "bagawarman/128.jpg",
    "rob_thomas10/128.jpg",
    "cofla/128.jpg",
    "maikelk/128.jpg",
    "rtgibbons/128.jpg",
    "russell_baylis/128.jpg",
    "mhesslow/128.jpg",
    "codysanfilippo/128.jpg",
    "webtanya/128.jpg",
    "madebybrenton/128.jpg",
    "dcalonaci/128.jpg",
    "perfectflow/128.jpg",
    "jjsiii/128.jpg",
    "saarabpreet/128.jpg",
    "kumarrajan12123/128.jpg",
    "iamsteffen/128.jpg",
    "themikenagle/128.jpg",
    "ceekaytweet/128.jpg",
    "larrybolt/128.jpg",
    "conspirator/128.jpg",
    "dallasbpeters/128.jpg",
    "n3dmax/128.jpg",
    "terpimost/128.jpg",
    "kirillz/128.jpg",
    "byrnecore/128.jpg",
    "j_drake_/128.jpg",
    "calebjoyce/128.jpg",
    "russoedu/128.jpg",
    "hoangloi/128.jpg",
    "tobysaxon/128.jpg",
    "gofrasdesign/128.jpg",
    "dimaposnyy/128.jpg",
    "tjisousa/128.jpg",
    "okandungel/128.jpg",
    "billyroshan/128.jpg",
    "oskamaya/128.jpg",
    "motionthinks/128.jpg",
    "knilob/128.jpg",
    "ashocka18/128.jpg",
    "marrimo/128.jpg",
    "bartjo/128.jpg",
    "omnizya/128.jpg",
    "ernestsemerda/128.jpg",
    "andreas_pr/128.jpg",
    "edgarchris99/128.jpg",
    "thomasgeisen/128.jpg",
    "gseguin/128.jpg",
    "joannefournier/128.jpg",
    "demersdesigns/128.jpg",
    "adammarsbar/128.jpg",
    "nasirwd/128.jpg",
    "n_tassone/128.jpg",
    "javorszky/128.jpg",
    "themrdave/128.jpg",
    "yecidsm/128.jpg",
    "nicollerich/128.jpg",
    "canapud/128.jpg",
    "nicoleglynn/128.jpg",
    "judzhin_miles/128.jpg",
    "designervzm/128.jpg",
    "kianoshp/128.jpg",
    "evandrix/128.jpg",
    "alterchuca/128.jpg",
    "dhrubo/128.jpg",
    "ma_tiax/128.jpg",
    "ssbb_me/128.jpg",
    "dorphern/128.jpg",
    "mauriolg/128.jpg",
    "bruno_mart/128.jpg",
    "mactopus/128.jpg",
    "the_winslet/128.jpg",
    "joemdesign/128.jpg",
    "Shriiiiimp/128.jpg",
    "jacobbennett/128.jpg",
    "nfedoroff/128.jpg",
    "iamglimy/128.jpg",
    "allagringaus/128.jpg",
    "aiiaiiaii/128.jpg",
    "olaolusoga/128.jpg",
    "buryaknick/128.jpg",
    "wim1k/128.jpg",
    "nicklacke/128.jpg",
    "a1chapone/128.jpg",
    "steynviljoen/128.jpg",
    "strikewan/128.jpg",
    "ryankirkman/128.jpg",
    "andrewabogado/128.jpg",
    "doooon/128.jpg",
    "jagan123/128.jpg",
    "ariffsetiawan/128.jpg",
    "elenadissi/128.jpg",
    "mwarkentin/128.jpg",
    "thierrymeier_/128.jpg",
    "r_garcia/128.jpg",
    "dmackerman/128.jpg",
    "borantula/128.jpg",
    "konus/128.jpg",
    "spacewood_/128.jpg",
    "ryuchi311/128.jpg",
    "evanshajed/128.jpg",
    "tristanlegros/128.jpg",
    "shoaib253/128.jpg",
    "aislinnkelly/128.jpg",
    "okcoker/128.jpg",
    "timpetricola/128.jpg",
    "sunshinedgirl/128.jpg",
    "chadami/128.jpg",
    "aleclarsoniv/128.jpg",
    "nomidesigns/128.jpg",
    "petebernardo/128.jpg",
    "scottiedude/128.jpg",
    "millinet/128.jpg",
    "imsoper/128.jpg",
    "imammuht/128.jpg",
    "benjamin_knight/128.jpg",
    "nepdud/128.jpg",
    "joki4/128.jpg",
    "lanceguyatt/128.jpg",
    "bboy1895/128.jpg",
    "amywebbb/128.jpg",
    "rweve/128.jpg",
    "haruintesettden/128.jpg",
    "ricburton/128.jpg",
    "nelshd/128.jpg",
    "batsirai/128.jpg",
    "primozcigler/128.jpg",
    "jffgrdnr/128.jpg",
    "8d3k/128.jpg",
    "geneseleznev/128.jpg",
    "al_li/128.jpg",
    "souperphly/128.jpg",
    "mslarkina/128.jpg",
    "2fockus/128.jpg",
    "cdavis565/128.jpg",
    "xiel/128.jpg",
    "turkutuuli/128.jpg",
    "uxward/128.jpg",
    "lebinoclard/128.jpg",
    "gauravjassal/128.jpg",
    "davidmerrique/128.jpg",
    "mdsisto/128.jpg",
    "andrewofficer/128.jpg",
    "kojourin/128.jpg",
    "dnirmal/128.jpg",
    "kevka/128.jpg",
    "mr_shiznit/128.jpg",
    "aluisio_azevedo/128.jpg",
    "cloudstudio/128.jpg",
    "danvierich/128.jpg",
    "alexivanichkin/128.jpg",
    "fran_mchamy/128.jpg",
    "perretmagali/128.jpg",
    "betraydan/128.jpg",
    "cadikkara/128.jpg",
    "matbeedotcom/128.jpg",
    "jeremyworboys/128.jpg",
    "bpartridge/128.jpg",
    "michaelkoper/128.jpg",
    "silv3rgvn/128.jpg",
    "alevizio/128.jpg",
    "johnsmithagency/128.jpg",
    "lawlbwoy/128.jpg",
    "vitor376/128.jpg",
    "desastrozo/128.jpg",
    "thimo_cz/128.jpg",
    "jasonmarkjones/128.jpg",
    "lhausermann/128.jpg",
    "xravil/128.jpg",
    "guischmitt/128.jpg",
    "vigobronx/128.jpg",
    "panghal0/128.jpg",
    "miguelkooreman/128.jpg",
    "surgeonist/128.jpg",
    "christianoliff/128.jpg",
    "caspergrl/128.jpg",
    "iamkarna/128.jpg",
    "ipavelek/128.jpg",
    "pierre_nel/128.jpg",
    "y2graphic/128.jpg",
    "sterlingrules/128.jpg",
    "elbuscainfo/128.jpg",
    "bennyjien/128.jpg",
    "stushona/128.jpg",
    "estebanuribe/128.jpg",
    "embrcecreations/128.jpg",
    "danillos/128.jpg",
    "elliotlewis/128.jpg",
    "charlesrpratt/128.jpg",
    "vladyn/128.jpg",
    "emmeffess/128.jpg",
    "carlosblanco_eu/128.jpg",
    "leonfedotov/128.jpg",
    "rangafangs/128.jpg",
    "chris_frees/128.jpg",
    "tgormtx/128.jpg",
    "bryan_topham/128.jpg",
    "jpscribbles/128.jpg",
    "mighty55/128.jpg",
    "carbontwelve/128.jpg",
    "isaacfifth/128.jpg",
    "iamjdeleon/128.jpg",
    "snowwrite/128.jpg",
    "barputro/128.jpg",
    "drewbyreese/128.jpg",
    "sachacorazzi/128.jpg",
    "bistrianiosip/128.jpg",
    "magoo04/128.jpg",
    "pehamondello/128.jpg",
    "yayteejay/128.jpg",
    "a_harris88/128.jpg",
    "algunsanabria/128.jpg",
    "zforrester/128.jpg",
    "ovall/128.jpg",
    "carlosjgsousa/128.jpg",
    "geobikas/128.jpg",
    "ah_lice/128.jpg",
    "looneydoodle/128.jpg",
    "nerdgr8/128.jpg",
    "ddggccaa/128.jpg",
    "zackeeler/128.jpg",
    "normanbox/128.jpg",
    "el_fuertisimo/128.jpg",
    "ismail_biltagi/128.jpg",
    "juangomezw/128.jpg",
    "jnmnrd/128.jpg",
    "patrickcoombe/128.jpg",
    "ryanjohnson_me/128.jpg",
    "markolschesky/128.jpg",
    "jeffgolenski/128.jpg",
    "kvasnic/128.jpg",
    "lindseyzilla/128.jpg",
    "gauchomatt/128.jpg",
    "afusinatto/128.jpg",
    "kevinoh/128.jpg",
    "okansurreel/128.jpg",
    "adamawesomeface/128.jpg",
    "emileboudeling/128.jpg",
    "arishi_/128.jpg",
    "juanmamartinez/128.jpg",
    "wikiziner/128.jpg",
    "danthms/128.jpg",
    "mkginfo/128.jpg",
    "terrorpixel/128.jpg",
    "curiousonaut/128.jpg",
    "prheemo/128.jpg",
    "michaelcolenso/128.jpg",
    "foczzi/128.jpg",
    "martip07/128.jpg",
    "thaodang17/128.jpg",
    "johncafazza/128.jpg",
    "robinlayfield/128.jpg",
    "franciscoamk/128.jpg",
    "abdulhyeuk/128.jpg",
    "marklamb/128.jpg",
    "edobene/128.jpg",
    "andresenfredrik/128.jpg",
    "mikaeljorhult/128.jpg",
    "chrisslowik/128.jpg",
    "vinciarts/128.jpg",
    "meelford/128.jpg",
    "elliotnolten/128.jpg",
    "yehudab/128.jpg",
    "vijaykarthik/128.jpg",
    "bfrohs/128.jpg",
    "josep_martins/128.jpg",
    "attacks/128.jpg",
    "sur4dye/128.jpg",
    "tumski/128.jpg",
    "instalox/128.jpg",
    "mangosango/128.jpg",
    "paulfarino/128.jpg",
    "kazaky999/128.jpg",
    "kiwiupover/128.jpg",
    "nvkznemo/128.jpg",
    "tom_even/128.jpg",
    "ratbus/128.jpg",
    "woodsman001/128.jpg",
    "joshmedeski/128.jpg",
    "thewillbeard/128.jpg",
    "psaikali/128.jpg",
    "joe_black/128.jpg",
    "aleinadsays/128.jpg",
    "marcusgorillius/128.jpg",
    "hota_v/128.jpg",
    "jghyllebert/128.jpg",
    "shinze/128.jpg",
    "janpalounek/128.jpg",
    "jeremiespoken/128.jpg",
    "her_ruu/128.jpg",
    "dansowter/128.jpg",
    "felipeapiress/128.jpg",
    "magugzbrand2d/128.jpg",
    "posterjob/128.jpg",
    "nathalie_fs/128.jpg",
    "bobbytwoshoes/128.jpg",
    "dreizle/128.jpg",
    "jeremymouton/128.jpg",
    "elisabethkjaer/128.jpg",
    "notbadart/128.jpg",
    "mohanrohith/128.jpg",
    "jlsolerdeltoro/128.jpg",
    "itskawsar/128.jpg",
    "slowspock/128.jpg",
    "zvchkelly/128.jpg",
    "wiljanslofstra/128.jpg",
    "craighenneberry/128.jpg",
    "trubeatto/128.jpg",
    "juaumlol/128.jpg",
    "samscouto/128.jpg",
    "BenouarradeM/128.jpg",
    "gipsy_raf/128.jpg",
    "netonet_il/128.jpg",
    "arkokoley/128.jpg",
    "itsajimithing/128.jpg",
    "smalonso/128.jpg",
    "victordeanda/128.jpg",
    "_dwite_/128.jpg",
    "richardgarretts/128.jpg",
    "gregrwilkinson/128.jpg",
    "anatolinicolae/128.jpg",
    "lu4sh1i/128.jpg",
    "stefanotirloni/128.jpg",
    "ostirbu/128.jpg",
    "darcystonge/128.jpg",
    "naitanamoreno/128.jpg",
    "michaelcomiskey/128.jpg",
    "adhiardana/128.jpg",
    "marcomano_/128.jpg",
    "davidcazalis/128.jpg",
    "falconerie/128.jpg",
    "gregkilian/128.jpg",
    "bcrad/128.jpg",
    "bolzanmarco/128.jpg",
    "low_res/128.jpg",
    "vlajki/128.jpg",
    "petar_prog/128.jpg",
    "jonkspr/128.jpg",
    "akmalfikri/128.jpg",
    "mfacchinello/128.jpg",
    "atanism/128.jpg",
    "harry_sistalam/128.jpg",
    "murrayswift/128.jpg",
    "bobwassermann/128.jpg",
    "gavr1l0/128.jpg",
    "madshensel/128.jpg",
    "mr_subtle/128.jpg",
    "deviljho_/128.jpg",
    "salimianoff/128.jpg",
    "joetruesdell/128.jpg",
    "twittypork/128.jpg",
    "airskylar/128.jpg",
    "dnezkumar/128.jpg",
    "dgajjar/128.jpg",
    "cherif_b/128.jpg",
    "salvafc/128.jpg",
    "louis_currie/128.jpg",
    "deeenright/128.jpg",
    "cybind/128.jpg",
    "eyronn/128.jpg",
    "vickyshits/128.jpg",
    "sweetdelisa/128.jpg",
    "cboller1/128.jpg",
    "andresdjasso/128.jpg",
    "melvindidit/128.jpg",
    "andysolomon/128.jpg",
    "thaisselenator_/128.jpg",
    "lvovenok/128.jpg",
    "giuliusa/128.jpg",
    "belyaev_rs/128.jpg",
    "overcloacked/128.jpg",
    "kamal_chaneman/128.jpg",
    "incubo82/128.jpg",
    "hellofeverrrr/128.jpg",
    "mhaligowski/128.jpg",
    "sunlandictwin/128.jpg",
    "bu7921/128.jpg",
    "andytlaw/128.jpg",
    "jeremery/128.jpg",
    "finchjke/128.jpg",
    "manigm/128.jpg",
    "umurgdk/128.jpg",
    "scottfeltham/128.jpg",
    "ganserene/128.jpg",
    "mutu_krish/128.jpg",
    "jodytaggart/128.jpg",
    "ntfblog/128.jpg",
    "tanveerrao/128.jpg",
    "hfalucas/128.jpg",
    "alxleroydeval/128.jpg",
    "kucingbelang4/128.jpg",
    "bargaorobalo/128.jpg",
    "colgruv/128.jpg",
    "stalewine/128.jpg",
    "kylefrost/128.jpg",
    "baumannzone/128.jpg",
    "angelcolberg/128.jpg",
    "sachingawas/128.jpg",
    "jjshaw14/128.jpg",
    "ramanathan_pdy/128.jpg",
    "johndezember/128.jpg",
    "nilshoenson/128.jpg",
    "brandonmorreale/128.jpg",
    "nutzumi/128.jpg",
    "brandonflatsoda/128.jpg",
    "sergeyalmone/128.jpg",
    "klefue/128.jpg",
    "kirangopal/128.jpg",
    "baumann_alex/128.jpg",
    "matthewkay_/128.jpg",
    "jay_wilburn/128.jpg",
    "shesgared/128.jpg",
    "apriendeau/128.jpg",
    "johnriordan/128.jpg",
    "wake_gs/128.jpg",
    "aleksitappura/128.jpg",
    "emsgulam/128.jpg",
    "xilantra/128.jpg",
    "imomenui/128.jpg",
    "sircalebgrove/128.jpg",
    "newbrushes/128.jpg",
    "hsinyo23/128.jpg",
    "m4rio/128.jpg",
    "katiemdaly/128.jpg",
    "s4f1/128.jpg",
    "ecommerceil/128.jpg",
    "marlinjayakody/128.jpg",
    "swooshycueb/128.jpg",
    "sangdth/128.jpg",
    "coderdiaz/128.jpg",
    "bluefx_/128.jpg",
    "vivekprvr/128.jpg",
    "sasha_shestakov/128.jpg",
    "eugeneeweb/128.jpg",
    "dgclegg/128.jpg",
    "n1ght_coder/128.jpg",
    "dixchen/128.jpg",
    "blakehawksworth/128.jpg",
    "trueblood_33/128.jpg",
    "hai_ninh_nguyen/128.jpg",
    "marclgonzales/128.jpg",
    "yesmeck/128.jpg",
    "stephcoue/128.jpg",
    "doronmalki/128.jpg",
    "ruehldesign/128.jpg",
    "anasnakawa/128.jpg",
    "kijanmaharjan/128.jpg",
    "wearesavas/128.jpg",
    "stefvdham/128.jpg",
    "tweetubhai/128.jpg",
    "alecarpentier/128.jpg",
    "fiterik/128.jpg",
    "antonyryndya/128.jpg",
    "d00maz/128.jpg",
    "theonlyzeke/128.jpg",
    "missaaamy/128.jpg",
    "carlosm/128.jpg",
    "manekenthe/128.jpg",
    "reetajayendra/128.jpg",
    "jeremyshimko/128.jpg",
    "justinrgraham/128.jpg",
    "stefanozoffoli/128.jpg",
    "overra/128.jpg",
    "mrebay007/128.jpg",
    "shvelo96/128.jpg",
    "pyronite/128.jpg",
    "thedjpetersen/128.jpg",
    "rtyukmaev/128.jpg",
    "_williamguerra/128.jpg",
    "albertaugustin/128.jpg",
    "vikashpathak18/128.jpg",
    "kevinjohndayy/128.jpg",
    "vj_demien/128.jpg",
    "colirpixoil/128.jpg",
    "goddardlewis/128.jpg",
    "laasli/128.jpg",
    "jqiuss/128.jpg",
    "heycamtaylor/128.jpg",
    "nastya_mane/128.jpg",
    "mastermindesign/128.jpg",
    "ccinojasso1/128.jpg",
    "nyancecom/128.jpg",
    "sandywoodruff/128.jpg",
    "bighanddesign/128.jpg",
    "sbtransparent/128.jpg",
    "aviddayentonbay/128.jpg",
    "richwild/128.jpg",
    "kaysix_dizzy/128.jpg",
    "tur8le/128.jpg",
    "seyedhossein1/128.jpg",
    "privetwagner/128.jpg",
    "emmandenn/128.jpg",
    "dev_essentials/128.jpg",
    "jmfsocial/128.jpg",
    "_yardenoon/128.jpg",
    "mateaodviteza/128.jpg",
    "weavermedia/128.jpg",
    "mufaddal_mw/128.jpg",
    "hafeeskhan/128.jpg",
    "ashernatali/128.jpg",
    "sulaqo/128.jpg",
    "eddiechen/128.jpg",
    "josecarlospsh/128.jpg",
    "vm_f/128.jpg",
    "enricocicconi/128.jpg",
    "danmartin70/128.jpg",
    "gmourier/128.jpg",
    "donjain/128.jpg",
    "mrxloka/128.jpg",
    "_pedropinho/128.jpg",
    "eitarafa/128.jpg",
    "oscarowusu/128.jpg",
    "ralph_lam/128.jpg",
    "panchajanyag/128.jpg",
    "woodydotmx/128.jpg",
    "jerrybai1907/128.jpg",
    "marshallchen_/128.jpg",
    "xamorep/128.jpg",
    "aio___/128.jpg",
    "chaabane_wail/128.jpg",
    "txcx/128.jpg",
    "akashsharma39/128.jpg",
    "falling_soul/128.jpg",
    "sainraja/128.jpg",
    "mugukamil/128.jpg",
    "johannesneu/128.jpg",
    "markwienands/128.jpg",
    "karthipanraj/128.jpg",
    "balakayuriy/128.jpg",
    "alan_zhang_/128.jpg",
    "layerssss/128.jpg",
    "kaspernordkvist/128.jpg",
    "mirfanqureshi/128.jpg",
    "hanna_smi/128.jpg",
    "VMilescu/128.jpg",
    "aeon56/128.jpg",
    "m_kalibry/128.jpg",
    "sreejithexp/128.jpg",
    "dicesales/128.jpg",
    "dhoot_amit/128.jpg",
    "smenov/128.jpg",
    "lonesomelemon/128.jpg",
    "vladimirdevic/128.jpg",
    "joelcipriano/128.jpg",
    "haligaliharun/128.jpg",
    "buleswapnil/128.jpg",
    "serefka/128.jpg",
    "ifarafonow/128.jpg",
    "vikasvinfotech/128.jpg",
    "urrutimeoli/128.jpg",
    "areandacom/128.jpg"
];

en.internet.avatar_uri = [];

for (var i = 0; i < avatarUri.length; i++) {
  en.internet.avatar_uri.push("https://s3.amazonaws.com/uifaces/faces/twitter/" + avatarUri[i]);
};

en.lorem = {
  "words": [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ],
  "supplemental": [
    "abbas",
    "abduco",
    "abeo",
    "abscido",
    "absconditus",
    "absens",
    "absorbeo",
    "absque",
    "abstergo",
    "absum",
    "abundans",
    "abutor",
    "accedo",
    "accendo",
    "acceptus",
    "accipio",
    "accommodo",
    "accusator",
    "acer",
    "acerbitas",
    "acervus",
    "acidus",
    "acies",
    "acquiro",
    "acsi",
    "adamo",
    "adaugeo",
    "addo",
    "adduco",
    "ademptio",
    "adeo",
    "adeptio",
    "adfectus",
    "adfero",
    "adficio",
    "adflicto",
    "adhaero",
    "adhuc",
    "adicio",
    "adimpleo",
    "adinventitias",
    "adipiscor",
    "adiuvo",
    "administratio",
    "admiratio",
    "admitto",
    "admoneo",
    "admoveo",
    "adnuo",
    "adopto",
    "adsidue",
    "adstringo",
    "adsuesco",
    "adsum",
    "adulatio",
    "adulescens",
    "adultus",
    "aduro",
    "advenio",
    "adversus",
    "advoco",
    "aedificium",
    "aeger",
    "aegre",
    "aegrotatio",
    "aegrus",
    "aeneus",
    "aequitas",
    "aequus",
    "aer",
    "aestas",
    "aestivus",
    "aestus",
    "aetas",
    "aeternus",
    "ager",
    "aggero",
    "aggredior",
    "agnitio",
    "agnosco",
    "ago",
    "ait",
    "aiunt",
    "alienus",
    "alii",
    "alioqui",
    "aliqua",
    "alius",
    "allatus",
    "alo",
    "alter",
    "altus",
    "alveus",
    "amaritudo",
    "ambitus",
    "ambulo",
    "amicitia",
    "amiculum",
    "amissio",
    "amita",
    "amitto",
    "amo",
    "amor",
    "amoveo",
    "amplexus",
    "amplitudo",
    "amplus",
    "ancilla",
    "angelus",
    "angulus",
    "angustus",
    "animadverto",
    "animi",
    "animus",
    "annus",
    "anser",
    "ante",
    "antea",
    "antepono",
    "antiquus",
    "aperio",
    "aperte",
    "apostolus",
    "apparatus",
    "appello",
    "appono",
    "appositus",
    "approbo",
    "apto",
    "aptus",
    "apud",
    "aqua",
    "ara",
    "aranea",
    "arbitro",
    "arbor",
    "arbustum",
    "arca",
    "arceo",
    "arcesso",
    "arcus",
    "argentum",
    "argumentum",
    "arguo",
    "arma",
    "armarium",
    "armo",
    "aro",
    "ars",
    "articulus",
    "artificiose",
    "arto",
    "arx",
    "ascisco",
    "ascit",
    "asper",
    "aspicio",
    "asporto",
    "assentator",
    "astrum",
    "atavus",
    "ater",
    "atqui",
    "atrocitas",
    "atrox",
    "attero",
    "attollo",
    "attonbitus",
    "auctor",
    "auctus",
    "audacia",
    "audax",
    "audentia",
    "audeo",
    "audio",
    "auditor",
    "aufero",
    "aureus",
    "auris",
    "aurum",
    "aut",
    "autem",
    "autus",
    "auxilium",
    "avaritia",
    "avarus",
    "aveho",
    "averto",
    "avoco",
    "baiulus",
    "balbus",
    "barba",
    "bardus",
    "basium",
    "beatus",
    "bellicus",
    "bellum",
    "bene",
    "beneficium",
    "benevolentia",
    "benigne",
    "bestia",
    "bibo",
    "bis",
    "blandior",
    "bonus",
    "bos",
    "brevis",
    "cado",
    "caecus",
    "caelestis",
    "caelum",
    "calamitas",
    "calcar",
    "calco",
    "calculus",
    "callide",
    "campana",
    "candidus",
    "canis",
    "canonicus",
    "canto",
    "capillus",
    "capio",
    "capitulus",
    "capto",
    "caput",
    "carbo",
    "carcer",
    "careo",
    "caries",
    "cariosus",
    "caritas",
    "carmen",
    "carpo",
    "carus",
    "casso",
    "caste",
    "casus",
    "catena",
    "caterva",
    "cattus",
    "cauda",
    "causa",
    "caute",
    "caveo",
    "cavus",
    "cedo",
    "celebrer",
    "celer",
    "celo",
    "cena",
    "cenaculum",
    "ceno",
    "censura",
    "centum",
    "cerno",
    "cernuus",
    "certe",
    "certo",
    "certus",
    "cervus",
    "cetera",
    "charisma",
    "chirographum",
    "cibo",
    "cibus",
    "cicuta",
    "cilicium",
    "cimentarius",
    "ciminatio",
    "cinis",
    "circumvenio",
    "cito",
    "civis",
    "civitas",
    "clam",
    "clamo",
    "claro",
    "clarus",
    "claudeo",
    "claustrum",
    "clementia",
    "clibanus",
    "coadunatio",
    "coaegresco",
    "coepi",
    "coerceo",
    "cogito",
    "cognatus",
    "cognomen",
    "cogo",
    "cohaero",
    "cohibeo",
    "cohors",
    "colligo",
    "colloco",
    "collum",
    "colo",
    "color",
    "coma",
    "combibo",
    "comburo",
    "comedo",
    "comes",
    "cometes",
    "comis",
    "comitatus",
    "commemoro",
    "comminor",
    "commodo",
    "communis",
    "comparo",
    "compello",
    "complectus",
    "compono",
    "comprehendo",
    "comptus",
    "conatus",
    "concedo",
    "concido",
    "conculco",
    "condico",
    "conduco",
    "confero",
    "confido",
    "conforto",
    "confugo",
    "congregatio",
    "conicio",
    "coniecto",
    "conitor",
    "coniuratio",
    "conor",
    "conqueror",
    "conscendo",
    "conservo",
    "considero",
    "conspergo",
    "constans",
    "consuasor",
    "contabesco",
    "contego",
    "contigo",
    "contra",
    "conturbo",
    "conventus",
    "convoco",
    "copia",
    "copiose",
    "cornu",
    "corona",
    "corpus",
    "correptius",
    "corrigo",
    "corroboro",
    "corrumpo",
    "coruscus",
    "cotidie",
    "crapula",
    "cras",
    "crastinus",
    "creator",
    "creber",
    "crebro",
    "credo",
    "creo",
    "creptio",
    "crepusculum",
    "cresco",
    "creta",
    "cribro",
    "crinis",
    "cruciamentum",
    "crudelis",
    "cruentus",
    "crur",
    "crustulum",
    "crux",
    "cubicularis",
    "cubitum",
    "cubo",
    "cui",
    "cuius",
    "culpa",
    "culpo",
    "cultellus",
    "cultura",
    "cum",
    "cunabula",
    "cunae",
    "cunctatio",
    "cupiditas",
    "cupio",
    "cuppedia",
    "cupressus",
    "cur",
    "cura",
    "curatio",
    "curia",
    "curiositas",
    "curis",
    "curo",
    "curriculum",
    "currus",
    "cursim",
    "curso",
    "cursus",
    "curto",
    "curtus",
    "curvo",
    "curvus",
    "custodia",
    "damnatio",
    "damno",
    "dapifer",
    "debeo",
    "debilito",
    "decens",
    "decerno",
    "decet",
    "decimus",
    "decipio",
    "decor",
    "decretum",
    "decumbo",
    "dedecor",
    "dedico",
    "deduco",
    "defaeco",
    "defendo",
    "defero",
    "defessus",
    "defetiscor",
    "deficio",
    "defigo",
    "defleo",
    "defluo",
    "defungo",
    "degenero",
    "degero",
    "degusto",
    "deinde",
    "delectatio",
    "delego",
    "deleo",
    "delibero",
    "delicate",
    "delinquo",
    "deludo",
    "demens",
    "demergo",
    "demitto",
    "demo",
    "demonstro",
    "demoror",
    "demulceo",
    "demum",
    "denego",
    "denique",
    "dens",
    "denuncio",
    "denuo",
    "deorsum",
    "depereo",
    "depono",
    "depopulo",
    "deporto",
    "depraedor",
    "deprecator",
    "deprimo",
    "depromo",
    "depulso",
    "deputo",
    "derelinquo",
    "derideo",
    "deripio",
    "desidero",
    "desino",
    "desipio",
    "desolo",
    "desparatus",
    "despecto",
    "despirmatio",
    "infit",
    "inflammatio",
    "paens",
    "patior",
    "patria",
    "patrocinor",
    "patruus",
    "pauci",
    "paulatim",
    "pauper",
    "pax",
    "peccatus",
    "pecco",
    "pecto",
    "pectus",
    "pecunia",
    "pecus",
    "peior",
    "pel",
    "ocer",
    "socius",
    "sodalitas",
    "sol",
    "soleo",
    "solio",
    "solitudo",
    "solium",
    "sollers",
    "sollicito",
    "solum",
    "solus",
    "solutio",
    "solvo",
    "somniculosus",
    "somnus",
    "sonitus",
    "sono",
    "sophismata",
    "sopor",
    "sordeo",
    "sortitus",
    "spargo",
    "speciosus",
    "spectaculum",
    "speculum",
    "sperno",
    "spero",
    "spes",
    "spiculum",
    "spiritus",
    "spoliatio",
    "sponte",
    "stabilis",
    "statim",
    "statua",
    "stella",
    "stillicidium",
    "stipes",
    "stips",
    "sto",
    "strenuus",
    "strues",
    "studio",
    "stultus",
    "suadeo",
    "suasoria",
    "sub",
    "subito",
    "subiungo",
    "sublime",
    "subnecto",
    "subseco",
    "substantia",
    "subvenio",
    "succedo",
    "succurro",
    "sufficio",
    "suffoco",
    "suffragium",
    "suggero",
    "sui",
    "sulum",
    "sum",
    "summa",
    "summisse",
    "summopere",
    "sumo",
    "sumptus",
    "supellex",
    "super",
    "suppellex",
    "supplanto",
    "suppono",
    "supra",
    "surculus",
    "surgo",
    "sursum",
    "suscipio",
    "suspendo",
    "sustineo",
    "suus",
    "synagoga",
    "tabella",
    "tabernus",
    "tabesco",
    "tabgo",
    "tabula",
    "taceo",
    "tactus",
    "taedium",
    "talio",
    "talis",
    "talus",
    "tam",
    "tamdiu",
    "tamen",
    "tametsi",
    "tamisium",
    "tamquam",
    "tandem",
    "tantillus",
    "tantum",
    "tardus",
    "tego",
    "temeritas",
    "temperantia",
    "templum",
    "temptatio",
    "tempus",
    "tenax",
    "tendo",
    "teneo",
    "tener",
    "tenuis",
    "tenus",
    "tepesco",
    "tepidus",
    "ter",
    "terebro",
    "teres",
    "terga",
    "tergeo",
    "tergiversatio",
    "tergo",
    "tergum",
    "termes",
    "terminatio",
    "tero",
    "terra",
    "terreo",
    "territo",
    "terror",
    "tersus",
    "tertius",
    "testimonium",
    "texo",
    "textilis",
    "textor",
    "textus",
    "thalassinus",
    "theatrum",
    "theca",
    "thema",
    "theologus",
    "thermae",
    "thesaurus",
    "thesis",
    "thorax",
    "thymbra",
    "thymum",
    "tibi",
    "timidus",
    "timor",
    "titulus",
    "tolero",
    "tollo",
    "tondeo",
    "tonsor",
    "torqueo",
    "torrens",
    "tot",
    "totidem",
    "toties",
    "totus",
    "tracto",
    "trado",
    "traho",
    "trans",
    "tredecim",
    "tremo",
    "trepide",
    "tres",
    "tribuo",
    "tricesimus",
    "triduana",
    "triginta",
    "tripudio",
    "tristis",
    "triumphus",
    "trucido",
    "truculenter",
    "tubineus",
    "tui",
    "tum",
    "tumultus",
    "tunc",
    "turba",
    "turbo",
    "turpe",
    "turpis",
    "tutamen",
    "tutis",
    "tyrannus",
    "uberrime",
    "ubi",
    "ulciscor",
    "ullus",
    "ulterius",
    "ultio",
    "ultra",
    "umbra",
    "umerus",
    "umquam",
    "una",
    "unde",
    "undique",
    "universe",
    "unus",
    "urbanus",
    "urbs",
    "uredo",
    "usitas",
    "usque",
    "ustilo",
    "ustulo",
    "usus",
    "uter",
    "uterque",
    "utilis",
    "utique",
    "utor",
    "utpote",
    "utrimque",
    "utroque",
    "utrum",
    "uxor",
    "vaco",
    "vacuus",
    "vado",
    "vae",
    "valde",
    "valens",
    "valeo",
    "valetudo",
    "validus",
    "vallum",
    "vapulus",
    "varietas",
    "varius",
    "vehemens",
    "vel",
    "velociter",
    "velum",
    "velut",
    "venia",
    "venio",
    "ventito",
    "ventosus",
    "ventus",
    "venustas",
    "ver",
    "verbera",
    "verbum",
    "vere",
    "verecundia",
    "vereor",
    "vergo",
    "veritas",
    "vero",
    "versus",
    "verto",
    "verumtamen",
    "verus",
    "vesco",
    "vesica",
    "vesper",
    "vespillo",
    "vester",
    "vestigium",
    "vestrum",
    "vetus",
    "via",
    "vicinus",
    "vicissitudo",
    "victoria",
    "victus",
    "videlicet",
    "video",
    "viduata",
    "viduo",
    "vigilo",
    "vigor",
    "vilicus",
    "vilis",
    "vilitas",
    "villa",
    "vinco",
    "vinculum",
    "vindico",
    "vinitor",
    "vinum",
    "vir",
    "virga",
    "virgo",
    "viridis",
    "viriliter",
    "virtus",
    "vis",
    "viscus",
    "vita",
    "vitiosus",
    "vitium",
    "vito",
    "vivo",
    "vix",
    "vobis",
    "vociferor",
    "voco",
    "volaticus",
    "volo",
    "volubilis",
    "voluntarius",
    "volup",
    "volutabrum",
    "volva",
    "vomer",
    "vomica",
    "vomito",
    "vorago",
    "vorax",
    "voro",
    "vos",
    "votum",
    "voveo",
    "vox",
    "vulariter",
    "vulgaris",
    "vulgivagus",
    "vulgo",
    "vulgus",
    "vulnero",
    "vulnus",
    "vulpes",
    "vulticulus",
    "vultuosus",
    "xiphias"
  ]
};
en.name = {
  "first_name": [
    "Aaliyah",
    "Aaron",
    "Abagail",
    "Abbey",
    "Abbie",
    "Abbigail",
    "Abby",
    "Abdiel",
    "Abdul",
    "Abdullah",
    "Abe",
    "Abel",
    "Abelardo",
    "Abigail",
    "Abigale",
    "Abigayle",
    "Abner",
    "Abraham",
    "Ada",
    "Adah",
    "Adalberto",
    "Adaline",
    "Adam",
    "Adan",
    "Addie",
    "Addison",
    "Adela",
    "Adelbert",
    "Adele",
    "Adelia",
    "Adeline",
    "Adell",
    "Adella",
    "Adelle",
    "Aditya",
    "Adolf",
    "Adolfo",
    "Adolph",
    "Adolphus",
    "Adonis",
    "Adrain",
    "Adrian",
    "Adriana",
    "Adrianna",
    "Adriel",
    "Adrien",
    "Adrienne",
    "Afton",
    "Aglae",
    "Agnes",
    "Agustin",
    "Agustina",
    "Ahmad",
    "Ahmed",
    "Aida",
    "Aidan",
    "Aiden",
    "Aileen",
    "Aimee",
    "Aisha",
    "Aiyana",
    "Akeem",
    "Al",
    "Alaina",
    "Alan",
    "Alana",
    "Alanis",
    "Alanna",
    "Alayna",
    "Alba",
    "Albert",
    "Alberta",
    "Albertha",
    "Alberto",
    "Albin",
    "Albina",
    "Alda",
    "Alden",
    "Alec",
    "Aleen",
    "Alejandra",
    "Alejandrin",
    "Alek",
    "Alena",
    "Alene",
    "Alessandra",
    "Alessandro",
    "Alessia",
    "Aletha",
    "Alex",
    "Alexa",
    "Alexander",
    "Alexandra",
    "Alexandre",
    "Alexandrea",
    "Alexandria",
    "Alexandrine",
    "Alexandro",
    "Alexane",
    "Alexanne",
    "Alexie",
    "Alexis",
    "Alexys",
    "Alexzander",
    "Alf",
    "Alfonso",
    "Alfonzo",
    "Alford",
    "Alfred",
    "Alfreda",
    "Alfredo",
    "Ali",
    "Alia",
    "Alice",
    "Alicia",
    "Alisa",
    "Alisha",
    "Alison",
    "Alivia",
    "Aliya",
    "Aliyah",
    "Aliza",
    "Alize",
    "Allan",
    "Allen",
    "Allene",
    "Allie",
    "Allison",
    "Ally",
    "Alphonso",
    "Alta",
    "Althea",
    "Alva",
    "Alvah",
    "Alvena",
    "Alvera",
    "Alverta",
    "Alvina",
    "Alvis",
    "Alyce",
    "Alycia",
    "Alysa",
    "Alysha",
    "Alyson",
    "Alysson",
    "Amalia",
    "Amanda",
    "Amani",
    "Amara",
    "Amari",
    "Amaya",
    "Amber",
    "Ambrose",
    "Amelia",
    "Amelie",
    "Amely",
    "America",
    "Americo",
    "Amie",
    "Amina",
    "Amir",
    "Amira",
    "Amiya",
    "Amos",
    "Amparo",
    "Amy",
    "Amya",
    "Ana",
    "Anabel",
    "Anabelle",
    "Anahi",
    "Anais",
    "Anastacio",
    "Anastasia",
    "Anderson",
    "Andre",
    "Andreane",
    "Andreanne",
    "Andres",
    "Andrew",
    "Andy",
    "Angel",
    "Angela",
    "Angelica",
    "Angelina",
    "Angeline",
    "Angelita",
    "Angelo",
    "Angie",
    "Angus",
    "Anibal",
    "Anika",
    "Anissa",
    "Anita",
    "Aniya",
    "Aniyah",
    "Anjali",
    "Anna",
    "Annabel",
    "Annabell",
    "Annabelle",
    "Annalise",
    "Annamae",
    "Annamarie",
    "Anne",
    "Annetta",
    "Annette",
    "Annie",
    "Ansel",
    "Ansley",
    "Anthony",
    "Antoinette",
    "Antone",
    "Antonetta",
    "Antonette",
    "Antonia",
    "Antonietta",
    "Antonina",
    "Antonio",
    "Antwan",
    "Antwon",
    "Anya",
    "April",
    "Ara",
    "Araceli",
    "Aracely",
    "Arch",
    "Archibald",
    "Ardella",
    "Arden",
    "Ardith",
    "Arely",
    "Ari",
    "Ariane",
    "Arianna",
    "Aric",
    "Ariel",
    "Arielle",
    "Arjun",
    "Arlene",
    "Arlie",
    "Arlo",
    "Armand",
    "Armando",
    "Armani",
    "Arnaldo",
    "Arne",
    "Arno",
    "Arnold",
    "Arnoldo",
    "Arnulfo",
    "Aron",
    "Art",
    "Arthur",
    "Arturo",
    "Arvel",
    "Arvid",
    "Arvilla",
    "Aryanna",
    "Asa",
    "Asha",
    "Ashlee",
    "Ashleigh",
    "Ashley",
    "Ashly",
    "Ashlynn",
    "Ashton",
    "Ashtyn",
    "Asia",
    "Assunta",
    "Astrid",
    "Athena",
    "Aubree",
    "Aubrey",
    "Audie",
    "Audra",
    "Audreanne",
    "Audrey",
    "August",
    "Augusta",
    "Augustine",
    "Augustus",
    "Aurelia",
    "Aurelie",
    "Aurelio",
    "Aurore",
    "Austen",
    "Austin",
    "Austyn",
    "Autumn",
    "Ava",
    "Avery",
    "Avis",
    "Axel",
    "Ayana",
    "Ayden",
    "Ayla",
    "Aylin",
    "Baby",
    "Bailee",
    "Bailey",
    "Barbara",
    "Barney",
    "Baron",
    "Barrett",
    "Barry",
    "Bart",
    "Bartholome",
    "Barton",
    "Baylee",
    "Beatrice",
    "Beau",
    "Beaulah",
    "Bell",
    "Bella",
    "Belle",
    "Ben",
    "Benedict",
    "Benjamin",
    "Bennett",
    "Bennie",
    "Benny",
    "Benton",
    "Berenice",
    "Bernadette",
    "Bernadine",
    "Bernard",
    "Bernardo",
    "Berneice",
    "Bernhard",
    "Bernice",
    "Bernie",
    "Berniece",
    "Bernita",
    "Berry",
    "Bert",
    "Berta",
    "Bertha",
    "Bertram",
    "Bertrand",
    "Beryl",
    "Bessie",
    "Beth",
    "Bethany",
    "Bethel",
    "Betsy",
    "Bette",
    "Bettie",
    "Betty",
    "Bettye",
    "Beulah",
    "Beverly",
    "Bianka",
    "Bill",
    "Billie",
    "Billy",
    "Birdie",
    "Blair",
    "Blaise",
    "Blake",
    "Blanca",
    "Blanche",
    "Blaze",
    "Bo",
    "Bobbie",
    "Bobby",
    "Bonita",
    "Bonnie",
    "Boris",
    "Boyd",
    "Brad",
    "Braden",
    "Bradford",
    "Bradley",
    "Bradly",
    "Brady",
    "Braeden",
    "Brain",
    "Brandi",
    "Brando",
    "Brandon",
    "Brandt",
    "Brandy",
    "Brandyn",
    "Brannon",
    "Branson",
    "Brant",
    "Braulio",
    "Braxton",
    "Brayan",
    "Breana",
    "Breanna",
    "Breanne",
    "Brenda",
    "Brendan",
    "Brenden",
    "Brendon",
    "Brenna",
    "Brennan",
    "Brennon",
    "Brent",
    "Bret",
    "Brett",
    "Bria",
    "Brian",
    "Briana",
    "Brianne",
    "Brice",
    "Bridget",
    "Bridgette",
    "Bridie",
    "Brielle",
    "Brigitte",
    "Brionna",
    "Brisa",
    "Britney",
    "Brittany",
    "Brock",
    "Broderick",
    "Brody",
    "Brook",
    "Brooke",
    "Brooklyn",
    "Brooks",
    "Brown",
    "Bruce",
    "Bryana",
    "Bryce",
    "Brycen",
    "Bryon",
    "Buck",
    "Bud",
    "Buddy",
    "Buford",
    "Bulah",
    "Burdette",
    "Burley",
    "Burnice",
    "Buster",
    "Cade",
    "Caden",
    "Caesar",
    "Caitlyn",
    "Cale",
    "Caleb",
    "Caleigh",
    "Cali",
    "Calista",
    "Callie",
    "Camden",
    "Cameron",
    "Camila",
    "Camilla",
    "Camille",
    "Camren",
    "Camron",
    "Camryn",
    "Camylle",
    "Candace",
    "Candelario",
    "Candice",
    "Candida",
    "Candido",
    "Cara",
    "Carey",
    "Carissa",
    "Carlee",
    "Carleton",
    "Carley",
    "Carli",
    "Carlie",
    "Carlo",
    "Carlos",
    "Carlotta",
    "Carmel",
    "Carmela",
    "Carmella",
    "Carmelo",
    "Carmen",
    "Carmine",
    "Carol",
    "Carolanne",
    "Carole",
    "Carolina",
    "Caroline",
    "Carolyn",
    "Carolyne",
    "Carrie",
    "Carroll",
    "Carson",
    "Carter",
    "Cary",
    "Casandra",
    "Casey",
    "Casimer",
    "Casimir",
    "Casper",
    "Cassandra",
    "Cassandre",
    "Cassidy",
    "Cassie",
    "Catalina",
    "Caterina",
    "Catharine",
    "Catherine",
    "Cathrine",
    "Cathryn",
    "Cathy",
    "Cayla",
    "Ceasar",
    "Cecelia",
    "Cecil",
    "Cecile",
    "Cecilia",
    "Cedrick",
    "Celestine",
    "Celestino",
    "Celia",
    "Celine",
    "Cesar",
    "Chad",
    "Chadd",
    "Chadrick",
    "Chaim",
    "Chance",
    "Chandler",
    "Chanel",
    "Chanelle",
    "Charity",
    "Charlene",
    "Charles",
    "Charley",
    "Charlie",
    "Charlotte",
    "Chase",
    "Chasity",
    "Chauncey",
    "Chaya",
    "Chaz",
    "Chelsea",
    "Chelsey",
    "Chelsie",
    "Chesley",
    "Chester",
    "Chet",
    "Cheyanne",
    "Cheyenne",
    "Chloe",
    "Chris",
    "Christ",
    "Christa",
    "Christelle",
    "Christian",
    "Christiana",
    "Christina",
    "Christine",
    "Christop",
    "Christophe",
    "Christopher",
    "Christy",
    "Chyna",
    "Ciara",
    "Cicero",
    "Cielo",
    "Cierra",
    "Cindy",
    "Citlalli",
    "Clair",
    "Claire",
    "Clara",
    "Clarabelle",
    "Clare",
    "Clarissa",
    "Clark",
    "Claud",
    "Claude",
    "Claudia",
    "Claudie",
    "Claudine",
    "Clay",
    "Clemens",
    "Clement",
    "Clementina",
    "Clementine",
    "Clemmie",
    "Cleo",
    "Cleora",
    "Cleta",
    "Cletus",
    "Cleve",
    "Cleveland",
    "Clifford",
    "Clifton",
    "Clint",
    "Clinton",
    "Clotilde",
    "Clovis",
    "Cloyd",
    "Clyde",
    "Coby",
    "Cody",
    "Colby",
    "Cole",
    "Coleman",
    "Colin",
    "Colleen",
    "Collin",
    "Colt",
    "Colten",
    "Colton",
    "Columbus",
    "Concepcion",
    "Conner",
    "Connie",
    "Connor",
    "Conor",
    "Conrad",
    "Constance",
    "Constantin",
    "Consuelo",
    "Cooper",
    "Cora",
    "Coralie",
    "Corbin",
    "Cordelia",
    "Cordell",
    "Cordia",
    "Cordie",
    "Corene",
    "Corine",
    "Cornelius",
    "Cornell",
    "Corrine",
    "Cortez",
    "Cortney",
    "Cory",
    "Coty",
    "Courtney",
    "Coy",
    "Craig",
    "Crawford",
    "Creola",
    "Cristal",
    "Cristian",
    "Cristina",
    "Cristobal",
    "Cristopher",
    "Cruz",
    "Crystal",
    "Crystel",
    "Cullen",
    "Curt",
    "Curtis",
    "Cydney",
    "Cynthia",
    "Cyril",
    "Cyrus",
    "Dagmar",
    "Dahlia",
    "Daija",
    "Daisha",
    "Daisy",
    "Dakota",
    "Dale",
    "Dallas",
    "Dallin",
    "Dalton",
    "Damaris",
    "Dameon",
    "Damian",
    "Damien",
    "Damion",
    "Damon",
    "Dan",
    "Dana",
    "Dandre",
    "Dane",
    "D'angelo",
    "Dangelo",
    "Danial",
    "Daniela",
    "Daniella",
    "Danielle",
    "Danika",
    "Dannie",
    "Danny",
    "Dante",
    "Danyka",
    "Daphne",
    "Daphnee",
    "Daphney",
    "Darby",
    "Daren",
    "Darian",
    "Dariana",
    "Darien",
    "Dario",
    "Darion",
    "Darius",
    "Darlene",
    "Daron",
    "Darrel",
    "Darrell",
    "Darren",
    "Darrick",
    "Darrin",
    "Darrion",
    "Darron",
    "Darryl",
    "Darwin",
    "Daryl",
    "Dashawn",
    "Dasia",
    "Dave",
    "David",
    "Davin",
    "Davion",
    "Davon",
    "Davonte",
    "Dawn",
    "Dawson",
    "Dax",
    "Dayana",
    "Dayna",
    "Dayne",
    "Dayton",
    "Dean",
    "Deangelo",
    "Deanna",
    "Deborah",
    "Declan",
    "Dedric",
    "Dedrick",
    "Dee",
    "Deion",
    "Deja",
    "Dejah",
    "Dejon",
    "Dejuan",
    "Delaney",
    "Delbert",
    "Delfina",
    "Delia",
    "Delilah",
    "Dell",
    "Della",
    "Delmer",
    "Delores",
    "Delpha",
    "Delphia",
    "Delphine",
    "Delta",
    "Demarco",
    "Demarcus",
    "Demario",
    "Demetris",
    "Demetrius",
    "Demond",
    "Dena",
    "Denis",
    "Dennis",
    "Deon",
    "Deondre",
    "Deontae",
    "Deonte",
    "Dereck",
    "Derek",
    "Derick",
    "Deron",
    "Derrick",
    "Deshaun",
    "Deshawn",
    "Desiree",
    "Desmond",
    "Dessie",
    "Destany",
    "Destin",
    "Destinee",
    "Destiney",
    "Destini",
    "Destiny",
    "Devan",
    "Devante",
    "Deven",
    "Devin",
    "Devon",
    "Devonte",
    "Devyn",
    "Dewayne",
    "Dewitt",
    "Dexter",
    "Diamond",
    "Diana",
    "Dianna",
    "Diego",
    "Dillan",
    "Dillon",
    "Dimitri",
    "Dina",
    "Dino",
    "Dion",
    "Dixie",
    "Dock",
    "Dolly",
    "Dolores",
    "Domenic",
    "Domenica",
    "Domenick",
    "Domenico",
    "Domingo",
    "Dominic",
    "Dominique",
    "Don",
    "Donald",
    "Donato",
    "Donavon",
    "Donna",
    "Donnell",
    "Donnie",
    "Donny",
    "Dora",
    "Dorcas",
    "Dorian",
    "Doris",
    "Dorothea",
    "Dorothy",
    "Dorris",
    "Dortha",
    "Dorthy",
    "Doug",
    "Douglas",
    "Dovie",
    "Doyle",
    "Drake",
    "Drew",
    "Duane",
    "Dudley",
    "Dulce",
    "Duncan",
    "Durward",
    "Dustin",
    "Dusty",
    "Dwight",
    "Dylan",
    "Earl",
    "Earlene",
    "Earline",
    "Earnest",
    "Earnestine",
    "Easter",
    "Easton",
    "Ebba",
    "Ebony",
    "Ed",
    "Eda",
    "Edd",
    "Eddie",
    "Eden",
    "Edgar",
    "Edgardo",
    "Edison",
    "Edmond",
    "Edmund",
    "Edna",
    "Eduardo",
    "Edward",
    "Edwardo",
    "Edwin",
    "Edwina",
    "Edyth",
    "Edythe",
    "Effie",
    "Efrain",
    "Efren",
    "Eileen",
    "Einar",
    "Eino",
    "Eladio",
    "Elaina",
    "Elbert",
    "Elda",
    "Eldon",
    "Eldora",
    "Eldred",
    "Eldridge",
    "Eleanora",
    "Eleanore",
    "Eleazar",
    "Electa",
    "Elena",
    "Elenor",
    "Elenora",
    "Eleonore",
    "Elfrieda",
    "Eli",
    "Elian",
    "Eliane",
    "Elias",
    "Eliezer",
    "Elijah",
    "Elinor",
    "Elinore",
    "Elisa",
    "Elisabeth",
    "Elise",
    "Eliseo",
    "Elisha",
    "Elissa",
    "Eliza",
    "Elizabeth",
    "Ella",
    "Ellen",
    "Ellie",
    "Elliot",
    "Elliott",
    "Ellis",
    "Ellsworth",
    "Elmer",
    "Elmira",
    "Elmo",
    "Elmore",
    "Elna",
    "Elnora",
    "Elody",
    "Eloisa",
    "Eloise",
    "Elouise",
    "Eloy",
    "Elroy",
    "Elsa",
    "Else",
    "Elsie",
    "Elta",
    "Elton",
    "Elva",
    "Elvera",
    "Elvie",
    "Elvis",
    "Elwin",
    "Elwyn",
    "Elyse",
    "Elyssa",
    "Elza",
    "Emanuel",
    "Emelia",
    "Emelie",
    "Emely",
    "Emerald",
    "Emerson",
    "Emery",
    "Emie",
    "Emil",
    "Emile",
    "Emilia",
    "Emiliano",
    "Emilie",
    "Emilio",
    "Emily",
    "Emma",
    "Emmalee",
    "Emmanuel",
    "Emmanuelle",
    "Emmet",
    "Emmett",
    "Emmie",
    "Emmitt",
    "Emmy",
    "Emory",
    "Ena",
    "Enid",
    "Enoch",
    "Enola",
    "Enos",
    "Enrico",
    "Enrique",
    "Ephraim",
    "Era",
    "Eriberto",
    "Eric",
    "Erica",
    "Erich",
    "Erick",
    "Ericka",
    "Erik",
    "Erika",
    "Erin",
    "Erling",
    "Erna",
    "Ernest",
    "Ernestina",
    "Ernestine",
    "Ernesto",
    "Ernie",
    "Ervin",
    "Erwin",
    "Eryn",
    "Esmeralda",
    "Esperanza",
    "Esta",
    "Esteban",
    "Estefania",
    "Estel",
    "Estell",
    "Estella",
    "Estelle",
    "Estevan",
    "Esther",
    "Estrella",
    "Etha",
    "Ethan",
    "Ethel",
    "Ethelyn",
    "Ethyl",
    "Ettie",
    "Eudora",
    "Eugene",
    "Eugenia",
    "Eula",
    "Eulah",
    "Eulalia",
    "Euna",
    "Eunice",
    "Eusebio",
    "Eva",
    "Evalyn",
    "Evan",
    "Evangeline",
    "Evans",
    "Eve",
    "Eveline",
    "Evelyn",
    "Everardo",
    "Everett",
    "Everette",
    "Evert",
    "Evie",
    "Ewald",
    "Ewell",
    "Ezekiel",
    "Ezequiel",
    "Ezra",
    "Fabian",
    "Fabiola",
    "Fae",
    "Fannie",
    "Fanny",
    "Fatima",
    "Faustino",
    "Fausto",
    "Favian",
    "Fay",
    "Faye",
    "Federico",
    "Felicia",
    "Felicita",
    "Felicity",
    "Felipa",
    "Felipe",
    "Felix",
    "Felton",
    "Fermin",
    "Fern",
    "Fernando",
    "Ferne",
    "Fidel",
    "Filiberto",
    "Filomena",
    "Finn",
    "Fiona",
    "Flavie",
    "Flavio",
    "Fleta",
    "Fletcher",
    "Flo",
    "Florence",
    "Florencio",
    "Florian",
    "Florida",
    "Florine",
    "Flossie",
    "Floy",
    "Floyd",
    "Ford",
    "Forest",
    "Forrest",
    "Foster",
    "Frances",
    "Francesca",
    "Francesco",
    "Francis",
    "Francisca",
    "Francisco",
    "Franco",
    "Frank",
    "Frankie",
    "Franz",
    "Fred",
    "Freda",
    "Freddie",
    "Freddy",
    "Frederic",
    "Frederick",
    "Frederik",
    "Frederique",
    "Fredrick",
    "Fredy",
    "Freeda",
    "Freeman",
    "Freida",
    "Frida",
    "Frieda",
    "Friedrich",
    "Fritz",
    "Furman",
    "Gabe",
    "Gabriel",
    "Gabriella",
    "Gabrielle",
    "Gaetano",
    "Gage",
    "Gail",
    "Gardner",
    "Garett",
    "Garfield",
    "Garland",
    "Garnet",
    "Garnett",
    "Garret",
    "Garrett",
    "Garrick",
    "Garrison",
    "Garry",
    "Garth",
    "Gaston",
    "Gavin",
    "Gay",
    "Gayle",
    "Gaylord",
    "Gene",
    "General",
    "Genesis",
    "Genevieve",
    "Gennaro",
    "Genoveva",
    "Geo",
    "Geoffrey",
    "George",
    "Georgette",
    "Georgiana",
    "Georgianna",
    "Geovanni",
    "Geovanny",
    "Geovany",
    "Gerald",
    "Geraldine",
    "Gerard",
    "Gerardo",
    "Gerda",
    "Gerhard",
    "Germaine",
    "German",
    "Gerry",
    "Gerson",
    "Gertrude",
    "Gia",
    "Gianni",
    "Gideon",
    "Gilbert",
    "Gilberto",
    "Gilda",
    "Giles",
    "Gillian",
    "Gina",
    "Gino",
    "Giovani",
    "Giovanna",
    "Giovanni",
    "Giovanny",
    "Gisselle",
    "Giuseppe",
    "Gladyce",
    "Gladys",
    "Glen",
    "Glenda",
    "Glenna",
    "Glennie",
    "Gloria",
    "Godfrey",
    "Golda",
    "Golden",
    "Gonzalo",
    "Gordon",
    "Grace",
    "Gracie",
    "Graciela",
    "Grady",
    "Graham",
    "Grant",
    "Granville",
    "Grayce",
    "Grayson",
    "Green",
    "Greg",
    "Gregg",
    "Gregoria",
    "Gregorio",
    "Gregory",
    "Greta",
    "Gretchen",
    "Greyson",
    "Griffin",
    "Grover",
    "Guadalupe",
    "Gudrun",
    "Guido",
    "Guillermo",
    "Guiseppe",
    "Gunnar",
    "Gunner",
    "Gus",
    "Gussie",
    "Gust",
    "Gustave",
    "Guy",
    "Gwen",
    "Gwendolyn",
    "Hadley",
    "Hailee",
    "Hailey",
    "Hailie",
    "Hal",
    "Haleigh",
    "Haley",
    "Halie",
    "Halle",
    "Hallie",
    "Hank",
    "Hanna",
    "Hannah",
    "Hans",
    "Hardy",
    "Harley",
    "Harmon",
    "Harmony",
    "Harold",
    "Harrison",
    "Harry",
    "Harvey",
    "Haskell",
    "Hassan",
    "Hassie",
    "Hattie",
    "Haven",
    "Hayden",
    "Haylee",
    "Hayley",
    "Haylie",
    "Hazel",
    "Hazle",
    "Heath",
    "Heather",
    "Heaven",
    "Heber",
    "Hector",
    "Heidi",
    "Helen",
    "Helena",
    "Helene",
    "Helga",
    "Hellen",
    "Helmer",
    "Heloise",
    "Henderson",
    "Henri",
    "Henriette",
    "Henry",
    "Herbert",
    "Herman",
    "Hermann",
    "Hermina",
    "Herminia",
    "Herminio",
    "Hershel",
    "Herta",
    "Hertha",
    "Hester",
    "Hettie",
    "Hilario",
    "Hilbert",
    "Hilda",
    "Hildegard",
    "Hillard",
    "Hillary",
    "Hilma",
    "Hilton",
    "Hipolito",
    "Hiram",
    "Hobart",
    "Holden",
    "Hollie",
    "Hollis",
    "Holly",
    "Hope",
    "Horace",
    "Horacio",
    "Hortense",
    "Hosea",
    "Houston",
    "Howard",
    "Howell",
    "Hoyt",
    "Hubert",
    "Hudson",
    "Hugh",
    "Hulda",
    "Humberto",
    "Hunter",
    "Hyman",
    "Ian",
    "Ibrahim",
    "Icie",
    "Ida",
    "Idell",
    "Idella",
    "Ignacio",
    "Ignatius",
    "Ike",
    "Ila",
    "Ilene",
    "Iliana",
    "Ima",
    "Imani",
    "Imelda",
    "Immanuel",
    "Imogene",
    "Ines",
    "Irma",
    "Irving",
    "Irwin",
    "Isaac",
    "Isabel",
    "Isabell",
    "Isabella",
    "Isabelle",
    "Isac",
    "Isadore",
    "Isai",
    "Isaiah",
    "Isaias",
    "Isidro",
    "Ismael",
    "Isobel",
    "Isom",
    "Israel",
    "Issac",
    "Itzel",
    "Iva",
    "Ivah",
    "Ivory",
    "Ivy",
    "Izabella",
    "Izaiah",
    "Jabari",
    "Jace",
    "Jacey",
    "Jacinthe",
    "Jacinto",
    "Jack",
    "Jackeline",
    "Jackie",
    "Jacklyn",
    "Jackson",
    "Jacky",
    "Jaclyn",
    "Jacquelyn",
    "Jacques",
    "Jacynthe",
    "Jada",
    "Jade",
    "Jaden",
    "Jadon",
    "Jadyn",
    "Jaeden",
    "Jaida",
    "Jaiden",
    "Jailyn",
    "Jaime",
    "Jairo",
    "Jakayla",
    "Jake",
    "Jakob",
    "Jaleel",
    "Jalen",
    "Jalon",
    "Jalyn",
    "Jamaal",
    "Jamal",
    "Jamar",
    "Jamarcus",
    "Jamel",
    "Jameson",
    "Jamey",
    "Jamie",
    "Jamil",
    "Jamir",
    "Jamison",
    "Jammie",
    "Jan",
    "Jana",
    "Janae",
    "Jane",
    "Janelle",
    "Janessa",
    "Janet",
    "Janice",
    "Janick",
    "Janie",
    "Janis",
    "Janiya",
    "Jannie",
    "Jany",
    "Jaquan",
    "Jaquelin",
    "Jaqueline",
    "Jared",
    "Jaren",
    "Jarod",
    "Jaron",
    "Jarred",
    "Jarrell",
    "Jarret",
    "Jarrett",
    "Jarrod",
    "Jarvis",
    "Jasen",
    "Jasmin",
    "Jason",
    "Jasper",
    "Jaunita",
    "Javier",
    "Javon",
    "Javonte",
    "Jay",
    "Jayce",
    "Jaycee",
    "Jayda",
    "Jayde",
    "Jayden",
    "Jaydon",
    "Jaylan",
    "Jaylen",
    "Jaylin",
    "Jaylon",
    "Jayme",
    "Jayne",
    "Jayson",
    "Jazlyn",
    "Jazmin",
    "Jazmyn",
    "Jazmyne",
    "Jean",
    "Jeanette",
    "Jeanie",
    "Jeanne",
    "Jed",
    "Jedediah",
    "Jedidiah",
    "Jeff",
    "Jefferey",
    "Jeffery",
    "Jeffrey",
    "Jeffry",
    "Jena",
    "Jenifer",
    "Jennie",
    "Jennifer",
    "Jennings",
    "Jennyfer",
    "Jensen",
    "Jerad",
    "Jerald",
    "Jeramie",
    "Jeramy",
    "Jerel",
    "Jeremie",
    "Jeremy",
    "Jermain",
    "Jermaine",
    "Jermey",
    "Jerod",
    "Jerome",
    "Jeromy",
    "Jerrell",
    "Jerrod",
    "Jerrold",
    "Jerry",
    "Jess",
    "Jesse",
    "Jessica",
    "Jessie",
    "Jessika",
    "Jessy",
    "Jessyca",
    "Jesus",
    "Jett",
    "Jettie",
    "Jevon",
    "Jewel",
    "Jewell",
    "Jillian",
    "Jimmie",
    "Jimmy",
    "Jo",
    "Joan",
    "Joana",
    "Joanie",
    "Joanne",
    "Joannie",
    "Joanny",
    "Joany",
    "Joaquin",
    "Jocelyn",
    "Jodie",
    "Jody",
    "Joe",
    "Joel",
    "Joelle",
    "Joesph",
    "Joey",
    "Johan",
    "Johann",
    "Johanna",
    "Johathan",
    "John",
    "Johnathan",
    "Johnathon",
    "Johnnie",
    "Johnny",
    "Johnpaul",
    "Johnson",
    "Jolie",
    "Jon",
    "Jonas",
    "Jonatan",
    "Jonathan",
    "Jonathon",
    "Jordan",
    "Jordane",
    "Jordi",
    "Jordon",
    "Jordy",
    "Jordyn",
    "Jorge",
    "Jose",
    "Josefa",
    "Josefina",
    "Joseph",
    "Josephine",
    "Josh",
    "Joshua",
    "Joshuah",
    "Josiah",
    "Josiane",
    "Josianne",
    "Josie",
    "Josue",
    "Jovan",
    "Jovani",
    "Jovanny",
    "Jovany",
    "Joy",
    "Joyce",
    "Juana",
    "Juanita",
    "Judah",
    "Judd",
    "Jude",
    "Judge",
    "Judson",
    "Judy",
    "Jules",
    "Julia",
    "Julian",
    "Juliana",
    "Julianne",
    "Julie",
    "Julien",
    "Juliet",
    "Julio",
    "Julius",
    "June",
    "Junior",
    "Junius",
    "Justen",
    "Justice",
    "Justina",
    "Justine",
    "Juston",
    "Justus",
    "Justyn",
    "Juvenal",
    "Juwan",
    "Kacey",
    "Kaci",
    "Kacie",
    "Kade",
    "Kaden",
    "Kadin",
    "Kaela",
    "Kaelyn",
    "Kaia",
    "Kailee",
    "Kailey",
    "Kailyn",
    "Kaitlin",
    "Kaitlyn",
    "Kale",
    "Kaleb",
    "Kaleigh",
    "Kaley",
    "Kali",
    "Kallie",
    "Kameron",
    "Kamille",
    "Kamren",
    "Kamron",
    "Kamryn",
    "Kane",
    "Kara",
    "Kareem",
    "Karelle",
    "Karen",
    "Kari",
    "Kariane",
    "Karianne",
    "Karina",
    "Karine",
    "Karl",
    "Karlee",
    "Karley",
    "Karli",
    "Karlie",
    "Karolann",
    "Karson",
    "Kasandra",
    "Kasey",
    "Kassandra",
    "Katarina",
    "Katelin",
    "Katelyn",
    "Katelynn",
    "Katharina",
    "Katherine",
    "Katheryn",
    "Kathleen",
    "Kathlyn",
    "Kathryn",
    "Kathryne",
    "Katlyn",
    "Katlynn",
    "Katrina",
    "Katrine",
    "Kattie",
    "Kavon",
    "Kay",
    "Kaya",
    "Kaycee",
    "Kayden",
    "Kayla",
    "Kaylah",
    "Kaylee",
    "Kayleigh",
    "Kayley",
    "Kayli",
    "Kaylie",
    "Kaylin",
    "Keagan",
    "Keanu",
    "Keara",
    "Keaton",
    "Keegan",
    "Keeley",
    "Keely",
    "Keenan",
    "Keira",
    "Keith",
    "Kellen",
    "Kelley",
    "Kelli",
    "Kellie",
    "Kelly",
    "Kelsi",
    "Kelsie",
    "Kelton",
    "Kelvin",
    "Ken",
    "Kendall",
    "Kendra",
    "Kendrick",
    "Kenna",
    "Kennedi",
    "Kennedy",
    "Kenneth",
    "Kennith",
    "Kenny",
    "Kenton",
    "Kenya",
    "Kenyatta",
    "Kenyon",
    "Keon",
    "Keshaun",
    "Keshawn",
    "Keven",
    "Kevin",
    "Kevon",
    "Keyon",
    "Keyshawn",
    "Khalid",
    "Khalil",
    "Kian",
    "Kiana",
    "Kianna",
    "Kiara",
    "Kiarra",
    "Kiel",
    "Kiera",
    "Kieran",
    "Kiley",
    "Kim",
    "Kimberly",
    "King",
    "Kip",
    "Kira",
    "Kirk",
    "Kirsten",
    "Kirstin",
    "Kitty",
    "Kobe",
    "Koby",
    "Kody",
    "Kolby",
    "Kole",
    "Korbin",
    "Korey",
    "Kory",
    "Kraig",
    "Kris",
    "Krista",
    "Kristian",
    "Kristin",
    "Kristina",
    "Kristofer",
    "Kristoffer",
    "Kristopher",
    "Kristy",
    "Krystal",
    "Krystel",
    "Krystina",
    "Kurt",
    "Kurtis",
    "Kyla",
    "Kyle",
    "Kylee",
    "Kyleigh",
    "Kyler",
    "Kylie",
    "Kyra",
    "Lacey",
    "Lacy",
    "Ladarius",
    "Lafayette",
    "Laila",
    "Laisha",
    "Lamar",
    "Lambert",
    "Lamont",
    "Lance",
    "Landen",
    "Lane",
    "Laney",
    "Larissa",
    "Laron",
    "Larry",
    "Larue",
    "Laura",
    "Laurel",
    "Lauren",
    "Laurence",
    "Lauretta",
    "Lauriane",
    "Laurianne",
    "Laurie",
    "Laurine",
    "Laury",
    "Lauryn",
    "Lavada",
    "Lavern",
    "Laverna",
    "Laverne",
    "Lavina",
    "Lavinia",
    "Lavon",
    "Lavonne",
    "Lawrence",
    "Lawson",
    "Layla",
    "Layne",
    "Lazaro",
    "Lea",
    "Leann",
    "Leanna",
    "Leanne",
    "Leatha",
    "Leda",
    "Lee",
    "Leif",
    "Leila",
    "Leilani",
    "Lela",
    "Lelah",
    "Leland",
    "Lelia",
    "Lempi",
    "Lemuel",
    "Lenna",
    "Lennie",
    "Lenny",
    "Lenora",
    "Lenore",
    "Leo",
    "Leola",
    "Leon",
    "Leonard",
    "Leonardo",
    "Leone",
    "Leonel",
    "Leonie",
    "Leonor",
    "Leonora",
    "Leopold",
    "Leopoldo",
    "Leora",
    "Lera",
    "Lesley",
    "Leslie",
    "Lesly",
    "Lessie",
    "Lester",
    "Leta",
    "Letha",
    "Letitia",
    "Levi",
    "Lew",
    "Lewis",
    "Lexi",
    "Lexie",
    "Lexus",
    "Lia",
    "Liam",
    "Liana",
    "Libbie",
    "Libby",
    "Lila",
    "Lilian",
    "Liliana",
    "Liliane",
    "Lilla",
    "Lillian",
    "Lilliana",
    "Lillie",
    "Lilly",
    "Lily",
    "Lilyan",
    "Lina",
    "Lincoln",
    "Linda",
    "Lindsay",
    "Lindsey",
    "Linnea",
    "Linnie",
    "Linwood",
    "Lionel",
    "Lisa",
    "Lisandro",
    "Lisette",
    "Litzy",
    "Liza",
    "Lizeth",
    "Lizzie",
    "Llewellyn",
    "Lloyd",
    "Logan",
    "Lois",
    "Lola",
    "Lolita",
    "Loma",
    "Lon",
    "London",
    "Lonie",
    "Lonnie",
    "Lonny",
    "Lonzo",
    "Lora",
    "Loraine",
    "Loren",
    "Lorena",
    "Lorenz",
    "Lorenza",
    "Lorenzo",
    "Lori",
    "Lorine",
    "Lorna",
    "Lottie",
    "Lou",
    "Louie",
    "Louisa",
    "Lourdes",
    "Louvenia",
    "Lowell",
    "Loy",
    "Loyal",
    "Loyce",
    "Lucas",
    "Luciano",
    "Lucie",
    "Lucienne",
    "Lucile",
    "Lucinda",
    "Lucio",
    "Lucious",
    "Lucius",
    "Lucy",
    "Ludie",
    "Ludwig",
    "Lue",
    "Luella",
    "Luigi",
    "Luis",
    "Luisa",
    "Lukas",
    "Lula",
    "Lulu",
    "Luna",
    "Lupe",
    "Lura",
    "Lurline",
    "Luther",
    "Luz",
    "Lyda",
    "Lydia",
    "Lyla",
    "Lynn",
    "Lyric",
    "Lysanne",
    "Mabel",
    "Mabelle",
    "Mable",
    "Mac",
    "Macey",
    "Maci",
    "Macie",
    "Mack",
    "Mackenzie",
    "Macy",
    "Madaline",
    "Madalyn",
    "Maddison",
    "Madeline",
    "Madelyn",
    "Madelynn",
    "Madge",
    "Madie",
    "Madilyn",
    "Madisen",
    "Madison",
    "Madisyn",
    "Madonna",
    "Madyson",
    "Mae",
    "Maegan",
    "Maeve",
    "Mafalda",
    "Magali",
    "Magdalen",
    "Magdalena",
    "Maggie",
    "Magnolia",
    "Magnus",
    "Maia",
    "Maida",
    "Maiya",
    "Major",
    "Makayla",
    "Makenna",
    "Makenzie",
    "Malachi",
    "Malcolm",
    "Malika",
    "Malinda",
    "Mallie",
    "Mallory",
    "Malvina",
    "Mandy",
    "Manley",
    "Manuel",
    "Manuela",
    "Mara",
    "Marc",
    "Marcel",
    "Marcelina",
    "Marcelino",
    "Marcella",
    "Marcelle",
    "Marcellus",
    "Marcelo",
    "Marcia",
    "Marco",
    "Marcos",
    "Marcus",
    "Margaret",
    "Margarete",
    "Margarett",
    "Margaretta",
    "Margarette",
    "Margarita",
    "Marge",
    "Margie",
    "Margot",
    "Margret",
    "Marguerite",
    "Maria",
    "Mariah",
    "Mariam",
    "Marian",
    "Mariana",
    "Mariane",
    "Marianna",
    "Marianne",
    "Mariano",
    "Maribel",
    "Marie",
    "Mariela",
    "Marielle",
    "Marietta",
    "Marilie",
    "Marilou",
    "Marilyne",
    "Marina",
    "Mario",
    "Marion",
    "Marisa",
    "Marisol",
    "Maritza",
    "Marjolaine",
    "Marjorie",
    "Marjory",
    "Mark",
    "Markus",
    "Marlee",
    "Marlen",
    "Marlene",
    "Marley",
    "Marlin",
    "Marlon",
    "Marques",
    "Marquis",
    "Marquise",
    "Marshall",
    "Marta",
    "Martin",
    "Martina",
    "Martine",
    "Marty",
    "Marvin",
    "Mary",
    "Maryam",
    "Maryjane",
    "Maryse",
    "Mason",
    "Mateo",
    "Mathew",
    "Mathias",
    "Mathilde",
    "Matilda",
    "Matilde",
    "Matt",
    "Matteo",
    "Mattie",
    "Maud",
    "Maude",
    "Maudie",
    "Maureen",
    "Maurice",
    "Mauricio",
    "Maurine",
    "Maverick",
    "Mavis",
    "Max",
    "Maxie",
    "Maxime",
    "Maximilian",
    "Maximillia",
    "Maximillian",
    "Maximo",
    "Maximus",
    "Maxine",
    "Maxwell",
    "May",
    "Maya",
    "Maybell",
    "Maybelle",
    "Maye",
    "Maymie",
    "Maynard",
    "Mayra",
    "Mazie",
    "Mckayla",
    "Mckenna",
    "Mckenzie",
    "Meagan",
    "Meaghan",
    "Meda",
    "Megane",
    "Meggie",
    "Meghan",
    "Mekhi",
    "Melany",
    "Melba",
    "Melisa",
    "Melissa",
    "Mellie",
    "Melody",
    "Melvin",
    "Melvina",
    "Melyna",
    "Melyssa",
    "Mercedes",
    "Meredith",
    "Merl",
    "Merle",
    "Merlin",
    "Merritt",
    "Mertie",
    "Mervin",
    "Meta",
    "Mia",
    "Micaela",
    "Micah",
    "Michael",
    "Michaela",
    "Michale",
    "Micheal",
    "Michel",
    "Michele",
    "Michelle",
    "Miguel",
    "Mikayla",
    "Mike",
    "Mikel",
    "Milan",
    "Miles",
    "Milford",
    "Miller",
    "Millie",
    "Milo",
    "Milton",
    "Mina",
    "Minerva",
    "Minnie",
    "Miracle",
    "Mireille",
    "Mireya",
    "Misael",
    "Missouri",
    "Misty",
    "Mitchel",
    "Mitchell",
    "Mittie",
    "Modesta",
    "Modesto",
    "Mohamed",
    "Mohammad",
    "Mohammed",
    "Moises",
    "Mollie",
    "Molly",
    "Mona",
    "Monica",
    "Monique",
    "Monroe",
    "Monserrat",
    "Monserrate",
    "Montana",
    "Monte",
    "Monty",
    "Morgan",
    "Moriah",
    "Morris",
    "Mortimer",
    "Morton",
    "Mose",
    "Moses",
    "Moshe",
    "Mossie",
    "Mozell",
    "Mozelle",
    "Muhammad",
    "Muriel",
    "Murl",
    "Murphy",
    "Murray",
    "Mustafa",
    "Mya",
    "Myah",
    "Mylene",
    "Myles",
    "Myra",
    "Myriam",
    "Myrl",
    "Myrna",
    "Myron",
    "Myrtice",
    "Myrtie",
    "Myrtis",
    "Myrtle",
    "Nadia",
    "Nakia",
    "Name",
    "Nannie",
    "Naomi",
    "Naomie",
    "Napoleon",
    "Narciso",
    "Nash",
    "Nasir",
    "Nat",
    "Natalia",
    "Natalie",
    "Natasha",
    "Nathan",
    "Nathanael",
    "Nathanial",
    "Nathaniel",
    "Nathen",
    "Nayeli",
    "Neal",
    "Ned",
    "Nedra",
    "Neha",
    "Neil",
    "Nelda",
    "Nella",
    "Nelle",
    "Nellie",
    "Nels",
    "Nelson",
    "Neoma",
    "Nestor",
    "Nettie",
    "Neva",
    "Newell",
    "Newton",
    "Nia",
    "Nicholas",
    "Nicholaus",
    "Nichole",
    "Nick",
    "Nicklaus",
    "Nickolas",
    "Nico",
    "Nicola",
    "Nicolas",
    "Nicole",
    "Nicolette",
    "Nigel",
    "Nikita",
    "Nikki",
    "Nikko",
    "Niko",
    "Nikolas",
    "Nils",
    "Nina",
    "Noah",
    "Noble",
    "Noe",
    "Noel",
    "Noelia",
    "Noemi",
    "Noemie",
    "Noemy",
    "Nola",
    "Nolan",
    "Nona",
    "Nora",
    "Norbert",
    "Norberto",
    "Norene",
    "Norma",
    "Norris",
    "Norval",
    "Norwood",
    "Nova",
    "Novella",
    "Nya",
    "Nyah",
    "Nyasia",
    "Obie",
    "Oceane",
    "Ocie",
    "Octavia",
    "Oda",
    "Odell",
    "Odessa",
    "Odie",
    "Ofelia",
    "Okey",
    "Ola",
    "Olaf",
    "Ole",
    "Olen",
    "Oleta",
    "Olga",
    "Olin",
    "Oliver",
    "Ollie",
    "Oma",
    "Omari",
    "Omer",
    "Ona",
    "Onie",
    "Opal",
    "Ophelia",
    "Ora",
    "Oral",
    "Oran",
    "Oren",
    "Orie",
    "Orin",
    "Orion",
    "Orland",
    "Orlando",
    "Orlo",
    "Orpha",
    "Orrin",
    "Orval",
    "Orville",
    "Osbaldo",
    "Osborne",
    "Oscar",
    "Osvaldo",
    "Oswald",
    "Oswaldo",
    "Otha",
    "Otho",
    "Otilia",
    "Otis",
    "Ottilie",
    "Ottis",
    "Otto",
    "Ova",
    "Owen",
    "Ozella",
    "Pablo",
    "Paige",
    "Palma",
    "Pamela",
    "Pansy",
    "Paolo",
    "Paris",
    "Parker",
    "Pascale",
    "Pasquale",
    "Pat",
    "Patience",
    "Patricia",
    "Patrick",
    "Patsy",
    "Pattie",
    "Paul",
    "Paula",
    "Pauline",
    "Paxton",
    "Payton",
    "Pearl",
    "Pearlie",
    "Pearline",
    "Pedro",
    "Peggie",
    "Penelope",
    "Percival",
    "Percy",
    "Perry",
    "Pete",
    "Peter",
    "Petra",
    "Peyton",
    "Philip",
    "Phoebe",
    "Phyllis",
    "Pierce",
    "Pierre",
    "Pietro",
    "Pink",
    "Pinkie",
    "Piper",
    "Polly",
    "Porter",
    "Precious",
    "Presley",
    "Preston",
    "Price",
    "Prince",
    "Princess",
    "Priscilla",
    "Providenci",
    "Prudence",
    "Queen",
    "Queenie",
    "Quentin",
    "Quincy",
    "Quinn",
    "Quinten",
    "Quinton",
    "Rachael",
    "Rachel",
    "Rachelle",
    "Rae",
    "Raegan",
    "Rafael",
    "Rafaela",
    "Raheem",
    "Rahsaan",
    "Rahul",
    "Raina",
    "Raleigh",
    "Ralph",
    "Ramiro",
    "Ramon",
    "Ramona",
    "Randal",
    "Randall",
    "Randi",
    "Randy",
    "Ransom",
    "Raoul",
    "Raphael",
    "Raphaelle",
    "Raquel",
    "Rashad",
    "Rashawn",
    "Rasheed",
    "Raul",
    "Raven",
    "Ray",
    "Raymond",
    "Raymundo",
    "Reagan",
    "Reanna",
    "Reba",
    "Rebeca",
    "Rebecca",
    "Rebeka",
    "Rebekah",
    "Reece",
    "Reed",
    "Reese",
    "Regan",
    "Reggie",
    "Reginald",
    "Reid",
    "Reilly",
    "Reina",
    "Reinhold",
    "Remington",
    "Rene",
    "Renee",
    "Ressie",
    "Reta",
    "Retha",
    "Retta",
    "Reuben",
    "Reva",
    "Rex",
    "Rey",
    "Reyes",
    "Reymundo",
    "Reyna",
    "Reynold",
    "Rhea",
    "Rhett",
    "Rhianna",
    "Rhiannon",
    "Rhoda",
    "Ricardo",
    "Richard",
    "Richie",
    "Richmond",
    "Rick",
    "Rickey",
    "Rickie",
    "Ricky",
    "Rico",
    "Rigoberto",
    "Riley",
    "Rita",
    "River",
    "Robb",
    "Robbie",
    "Robert",
    "Roberta",
    "Roberto",
    "Robin",
    "Robyn",
    "Rocio",
    "Rocky",
    "Rod",
    "Roderick",
    "Rodger",
    "Rodolfo",
    "Rodrick",
    "Rodrigo",
    "Roel",
    "Rogelio",
    "Roger",
    "Rogers",
    "Rolando",
    "Rollin",
    "Roma",
    "Romaine",
    "Roman",
    "Ron",
    "Ronaldo",
    "Ronny",
    "Roosevelt",
    "Rory",
    "Rosa",
    "Rosalee",
    "Rosalia",
    "Rosalind",
    "Rosalinda",
    "Rosalyn",
    "Rosamond",
    "Rosanna",
    "Rosario",
    "Roscoe",
    "Rose",
    "Rosella",
    "Roselyn",
    "Rosemarie",
    "Rosemary",
    "Rosendo",
    "Rosetta",
    "Rosie",
    "Rosina",
    "Roslyn",
    "Ross",
    "Rossie",
    "Rowan",
    "Rowena",
    "Rowland",
    "Roxane",
    "Roxanne",
    "Roy",
    "Royal",
    "Royce",
    "Rozella",
    "Ruben",
    "Rubie",
    "Ruby",
    "Rubye",
    "Rudolph",
    "Rudy",
    "Rupert",
    "Russ",
    "Russel",
    "Russell",
    "Rusty",
    "Ruth",
    "Ruthe",
    "Ruthie",
    "Ryan",
    "Ryann",
    "Ryder",
    "Rylan",
    "Rylee",
    "Ryleigh",
    "Ryley",
    "Sabina",
    "Sabrina",
    "Sabryna",
    "Sadie",
    "Sadye",
    "Sage",
    "Saige",
    "Sallie",
    "Sally",
    "Salma",
    "Salvador",
    "Salvatore",
    "Sam",
    "Samanta",
    "Samantha",
    "Samara",
    "Samir",
    "Sammie",
    "Sammy",
    "Samson",
    "Sandra",
    "Sandrine",
    "Sandy",
    "Sanford",
    "Santa",
    "Santiago",
    "Santina",
    "Santino",
    "Santos",
    "Sarah",
    "Sarai",
    "Sarina",
    "Sasha",
    "Saul",
    "Savanah",
    "Savanna",
    "Savannah",
    "Savion",
    "Scarlett",
    "Schuyler",
    "Scot",
    "Scottie",
    "Scotty",
    "Seamus",
    "Sean",
    "Sebastian",
    "Sedrick",
    "Selena",
    "Selina",
    "Selmer",
    "Serena",
    "Serenity",
    "Seth",
    "Shad",
    "Shaina",
    "Shakira",
    "Shana",
    "Shane",
    "Shanel",
    "Shanelle",
    "Shania",
    "Shanie",
    "Shaniya",
    "Shanna",
    "Shannon",
    "Shanny",
    "Shanon",
    "Shany",
    "Sharon",
    "Shaun",
    "Shawn",
    "Shawna",
    "Shaylee",
    "Shayna",
    "Shayne",
    "Shea",
    "Sheila",
    "Sheldon",
    "Shemar",
    "Sheridan",
    "Sherman",
    "Sherwood",
    "Shirley",
    "Shyann",
    "Shyanne",
    "Sibyl",
    "Sid",
    "Sidney",
    "Sienna",
    "Sierra",
    "Sigmund",
    "Sigrid",
    "Sigurd",
    "Silas",
    "Sim",
    "Simeon",
    "Simone",
    "Sincere",
    "Sister",
    "Skye",
    "Skyla",
    "Skylar",
    "Sofia",
    "Soledad",
    "Solon",
    "Sonia",
    "Sonny",
    "Sonya",
    "Sophia",
    "Sophie",
    "Spencer",
    "Stacey",
    "Stacy",
    "Stan",
    "Stanford",
    "Stanley",
    "Stanton",
    "Stefan",
    "Stefanie",
    "Stella",
    "Stephan",
    "Stephania",
    "Stephanie",
    "Stephany",
    "Stephen",
    "Stephon",
    "Sterling",
    "Steve",
    "Stevie",
    "Stewart",
    "Stone",
    "Stuart",
    "Summer",
    "Sunny",
    "Susan",
    "Susana",
    "Susanna",
    "Susie",
    "Suzanne",
    "Sven",
    "Syble",
    "Sydnee",
    "Sydney",
    "Sydni",
    "Sydnie",
    "Sylvan",
    "Sylvester",
    "Sylvia",
    "Tabitha",
    "Tad",
    "Talia",
    "Talon",
    "Tamara",
    "Tamia",
    "Tania",
    "Tanner",
    "Tanya",
    "Tara",
    "Taryn",
    "Tate",
    "Tatum",
    "Tatyana",
    "Taurean",
    "Tavares",
    "Taya",
    "Taylor",
    "Teagan",
    "Ted",
    "Telly",
    "Terence",
    "Teresa",
    "Terrance",
    "Terrell",
    "Terrence",
    "Terrill",
    "Terry",
    "Tess",
    "Tessie",
    "Tevin",
    "Thad",
    "Thaddeus",
    "Thalia",
    "Thea",
    "Thelma",
    "Theo",
    "Theodora",
    "Theodore",
    "Theresa",
    "Therese",
    "Theresia",
    "Theron",
    "Thomas",
    "Thora",
    "Thurman",
    "Tia",
    "Tiana",
    "Tianna",
    "Tiara",
    "Tierra",
    "Tiffany",
    "Tillman",
    "Timmothy",
    "Timmy",
    "Timothy",
    "Tina",
    "Tito",
    "Titus",
    "Tobin",
    "Toby",
    "Tod",
    "Tom",
    "Tomas",
    "Tomasa",
    "Tommie",
    "Toney",
    "Toni",
    "Tony",
    "Torey",
    "Torrance",
    "Torrey",
    "Toy",
    "Trace",
    "Tracey",
    "Tracy",
    "Travis",
    "Travon",
    "Tre",
    "Tremaine",
    "Tremayne",
    "Trent",
    "Trenton",
    "Tressa",
    "Tressie",
    "Treva",
    "Trever",
    "Trevion",
    "Trevor",
    "Trey",
    "Trinity",
    "Trisha",
    "Tristian",
    "Tristin",
    "Triston",
    "Troy",
    "Trudie",
    "Trycia",
    "Trystan",
    "Turner",
    "Twila",
    "Tyler",
    "Tyra",
    "Tyree",
    "Tyreek",
    "Tyrel",
    "Tyrell",
    "Tyrese",
    "Tyrique",
    "Tyshawn",
    "Tyson",
    "Ubaldo",
    "Ulices",
    "Ulises",
    "Una",
    "Unique",
    "Urban",
    "Uriah",
    "Uriel",
    "Ursula",
    "Vada",
    "Valentin",
    "Valentina",
    "Valentine",
    "Valerie",
    "Vallie",
    "Van",
    "Vance",
    "Vanessa",
    "Vaughn",
    "Veda",
    "Velda",
    "Vella",
    "Velma",
    "Velva",
    "Vena",
    "Verda",
    "Verdie",
    "Vergie",
    "Verla",
    "Verlie",
    "Vern",
    "Verna",
    "Verner",
    "Vernice",
    "Vernie",
    "Vernon",
    "Verona",
    "Veronica",
    "Vesta",
    "Vicenta",
    "Vicente",
    "Vickie",
    "Vicky",
    "Victor",
    "Victoria",
    "Vida",
    "Vidal",
    "Vilma",
    "Vince",
    "Vincent",
    "Vincenza",
    "Vincenzo",
    "Vinnie",
    "Viola",
    "Violet",
    "Violette",
    "Virgie",
    "Virgil",
    "Virginia",
    "Virginie",
    "Vita",
    "Vito",
    "Viva",
    "Vivian",
    "Viviane",
    "Vivianne",
    "Vivien",
    "Vivienne",
    "Vladimir",
    "Wade",
    "Waino",
    "Waldo",
    "Walker",
    "Wallace",
    "Walter",
    "Walton",
    "Wanda",
    "Ward",
    "Warren",
    "Watson",
    "Wava",
    "Waylon",
    "Wayne",
    "Webster",
    "Weldon",
    "Wellington",
    "Wendell",
    "Wendy",
    "Werner",
    "Westley",
    "Weston",
    "Whitney",
    "Wilber",
    "Wilbert",
    "Wilburn",
    "Wiley",
    "Wilford",
    "Wilfred",
    "Wilfredo",
    "Wilfrid",
    "Wilhelm",
    "Wilhelmine",
    "Will",
    "Willa",
    "Willard",
    "William",
    "Willie",
    "Willis",
    "Willow",
    "Willy",
    "Wilma",
    "Wilmer",
    "Wilson",
    "Wilton",
    "Winfield",
    "Winifred",
    "Winnifred",
    "Winona",
    "Winston",
    "Woodrow",
    "Wyatt",
    "Wyman",
    "Xander",
    "Xavier",
    "Xzavier",
    "Yadira",
    "Yasmeen",
    "Yasmin",
    "Yasmine",
    "Yazmin",
    "Yesenia",
    "Yessenia",
    "Yolanda",
    "Yoshiko",
    "Yvette",
    "Yvonne",
    "Zachariah",
    "Zachary",
    "Zachery",
    "Zack",
    "Zackary",
    "Zackery",
    "Zakary",
    "Zander",
    "Zane",
    "Zaria",
    "Zechariah",
    "Zelda",
    "Zella",
    "Zelma",
    "Zena",
    "Zetta",
    "Zion",
    "Zita",
    "Zoe",
    "Zoey",
    "Zoie",
    "Zoila",
    "Zola",
    "Zora",
    "Zula"
  ],
  "last_name": [
    "Abbott",
    "Abernathy",
    "Abshire",
    "Adams",
    "Altenwerth",
    "Anderson",
    "Ankunding",
    "Armstrong",
    "Auer",
    "Aufderhar",
    "Bahringer",
    "Bailey",
    "Balistreri",
    "Barrows",
    "Bartell",
    "Bartoletti",
    "Barton",
    "Bashirian",
    "Batz",
    "Bauch",
    "Baumbach",
    "Bayer",
    "Beahan",
    "Beatty",
    "Bechtelar",
    "Becker",
    "Bednar",
    "Beer",
    "Beier",
    "Berge",
    "Bergnaum",
    "Bergstrom",
    "Bernhard",
    "Bernier",
    "Bins",
    "Blanda",
    "Blick",
    "Block",
    "Bode",
    "Boehm",
    "Bogan",
    "Bogisich",
    "Borer",
    "Bosco",
    "Botsford",
    "Boyer",
    "Boyle",
    "Bradtke",
    "Brakus",
    "Braun",
    "Breitenberg",
    "Brekke",
    "Brown",
    "Bruen",
    "Buckridge",
    "Carroll",
    "Carter",
    "Cartwright",
    "Casper",
    "Cassin",
    "Champlin",
    "Christiansen",
    "Cole",
    "Collier",
    "Collins",
    "Conn",
    "Connelly",
    "Conroy",
    "Considine",
    "Corkery",
    "Cormier",
    "Corwin",
    "Cremin",
    "Crist",
    "Crona",
    "Cronin",
    "Crooks",
    "Cruickshank",
    "Cummerata",
    "Cummings",
    "Dach",
    "D'Amore",
    "Daniel",
    "Dare",
    "Daugherty",
    "Davis",
    "Deckow",
    "Denesik",
    "Dibbert",
    "Dickens",
    "Dicki",
    "Dickinson",
    "Dietrich",
    "Donnelly",
    "Dooley",
    "Douglas",
    "Doyle",
    "DuBuque",
    "Durgan",
    "Ebert",
    "Effertz",
    "Eichmann",
    "Emard",
    "Emmerich",
    "Erdman",
    "Ernser",
    "Fadel",
    "Fahey",
    "Farrell",
    "Fay",
    "Feeney",
    "Feest",
    "Feil",
    "Ferry",
    "Fisher",
    "Flatley",
    "Frami",
    "Franecki",
    "Friesen",
    "Fritsch",
    "Funk",
    "Gaylord",
    "Gerhold",
    "Gerlach",
    "Gibson",
    "Gislason",
    "Gleason",
    "Gleichner",
    "Glover",
    "Goldner",
    "Goodwin",
    "Gorczany",
    "Gottlieb",
    "Goyette",
    "Grady",
    "Graham",
    "Grant",
    "Green",
    "Greenfelder",
    "Greenholt",
    "Grimes",
    "Gulgowski",
    "Gusikowski",
    "Gutkowski",
    "Gutmann",
    "Haag",
    "Hackett",
    "Hagenes",
    "Hahn",
    "Haley",
    "Halvorson",
    "Hamill",
    "Hammes",
    "Hand",
    "Hane",
    "Hansen",
    "Harber",
    "Harris",
    "Hartmann",
    "Harvey",
    "Hauck",
    "Hayes",
    "Heaney",
    "Heathcote",
    "Hegmann",
    "Heidenreich",
    "Heller",
    "Herman",
    "Hermann",
    "Hermiston",
    "Herzog",
    "Hessel",
    "Hettinger",
    "Hickle",
    "Hilll",
    "Hills",
    "Hilpert",
    "Hintz",
    "Hirthe",
    "Hodkiewicz",
    "Hoeger",
    "Homenick",
    "Hoppe",
    "Howe",
    "Howell",
    "Hudson",
    "Huel",
    "Huels",
    "Hyatt",
    "Jacobi",
    "Jacobs",
    "Jacobson",
    "Jakubowski",
    "Jaskolski",
    "Jast",
    "Jenkins",
    "Jerde",
    "Johns",
    "Johnson",
    "Johnston",
    "Jones",
    "Kassulke",
    "Kautzer",
    "Keebler",
    "Keeling",
    "Kemmer",
    "Kerluke",
    "Kertzmann",
    "Kessler",
    "Kiehn",
    "Kihn",
    "Kilback",
    "King",
    "Kirlin",
    "Klein",
    "Kling",
    "Klocko",
    "Koch",
    "Koelpin",
    "Koepp",
    "Kohler",
    "Konopelski",
    "Koss",
    "Kovacek",
    "Kozey",
    "Krajcik",
    "Kreiger",
    "Kris",
    "Kshlerin",
    "Kub",
    "Kuhic",
    "Kuhlman",
    "Kuhn",
    "Kulas",
    "Kunde",
    "Kunze",
    "Kuphal",
    "Kutch",
    "Kuvalis",
    "Labadie",
    "Lakin",
    "Lang",
    "Langosh",
    "Langworth",
    "Larkin",
    "Larson",
    "Leannon",
    "Lebsack",
    "Ledner",
    "Leffler",
    "Legros",
    "Lehner",
    "Lemke",
    "Lesch",
    "Leuschke",
    "Lind",
    "Lindgren",
    "Littel",
    "Little",
    "Lockman",
    "Lowe",
    "Lubowitz",
    "Lueilwitz",
    "Luettgen",
    "Lynch",
    "Macejkovic",
    "MacGyver",
    "Maggio",
    "Mann",
    "Mante",
    "Marks",
    "Marquardt",
    "Marvin",
    "Mayer",
    "Mayert",
    "McClure",
    "McCullough",
    "McDermott",
    "McGlynn",
    "McKenzie",
    "McLaughlin",
    "Medhurst",
    "Mertz",
    "Metz",
    "Miller",
    "Mills",
    "Mitchell",
    "Moen",
    "Mohr",
    "Monahan",
    "Moore",
    "Morar",
    "Morissette",
    "Mosciski",
    "Mraz",
    "Mueller",
    "Muller",
    "Murazik",
    "Murphy",
    "Murray",
    "Nader",
    "Nicolas",
    "Nienow",
    "Nikolaus",
    "Nitzsche",
    "Nolan",
    "Oberbrunner",
    "O'Connell",
    "O'Conner",
    "O'Hara",
    "O'Keefe",
    "O'Kon",
    "Okuneva",
    "Olson",
    "Ondricka",
    "O'Reilly",
    "Orn",
    "Ortiz",
    "Osinski",
    "Pacocha",
    "Padberg",
    "Pagac",
    "Parisian",
    "Parker",
    "Paucek",
    "Pfannerstill",
    "Pfeffer",
    "Pollich",
    "Pouros",
    "Powlowski",
    "Predovic",
    "Price",
    "Prohaska",
    "Prosacco",
    "Purdy",
    "Quigley",
    "Quitzon",
    "Rath",
    "Ratke",
    "Rau",
    "Raynor",
    "Reichel",
    "Reichert",
    "Reilly",
    "Reinger",
    "Rempel",
    "Renner",
    "Reynolds",
    "Rice",
    "Rippin",
    "Ritchie",
    "Robel",
    "Roberts",
    "Rodriguez",
    "Rogahn",
    "Rohan",
    "Rolfson",
    "Romaguera",
    "Roob",
    "Rosenbaum",
    "Rowe",
    "Ruecker",
    "Runolfsdottir",
    "Runolfsson",
    "Runte",
    "Russel",
    "Rutherford",
    "Ryan",
    "Sanford",
    "Satterfield",
    "Sauer",
    "Sawayn",
    "Schaden",
    "Schaefer",
    "Schamberger",
    "Schiller",
    "Schimmel",
    "Schinner",
    "Schmeler",
    "Schmidt",
    "Schmitt",
    "Schneider",
    "Schoen",
    "Schowalter",
    "Schroeder",
    "Schulist",
    "Schultz",
    "Schumm",
    "Schuppe",
    "Schuster",
    "Senger",
    "Shanahan",
    "Shields",
    "Simonis",
    "Sipes",
    "Skiles",
    "Smith",
    "Smitham",
    "Spencer",
    "Spinka",
    "Sporer",
    "Stamm",
    "Stanton",
    "Stark",
    "Stehr",
    "Steuber",
    "Stiedemann",
    "Stokes",
    "Stoltenberg",
    "Stracke",
    "Streich",
    "Stroman",
    "Strosin",
    "Swaniawski",
    "Swift",
    "Terry",
    "Thiel",
    "Thompson",
    "Tillman",
    "Torp",
    "Torphy",
    "Towne",
    "Toy",
    "Trantow",
    "Tremblay",
    "Treutel",
    "Tromp",
    "Turcotte",
    "Turner",
    "Ullrich",
    "Upton",
    "Vandervort",
    "Veum",
    "Volkman",
    "Von",
    "VonRueden",
    "Waelchi",
    "Walker",
    "Walsh",
    "Walter",
    "Ward",
    "Waters",
    "Watsica",
    "Weber",
    "Wehner",
    "Weimann",
    "Weissnat",
    "Welch",
    "West",
    "White",
    "Wiegand",
    "Wilderman",
    "Wilkinson",
    "Will",
    "Williamson",
    "Willms",
    "Windler",
    "Wintheiser",
    "Wisoky",
    "Wisozk",
    "Witting",
    "Wiza",
    "Wolf",
    "Wolff",
    "Wuckert",
    "Wunsch",
    "Wyman",
    "Yost",
    "Yundt",
    "Zboncak",
    "Zemlak",
    "Ziemann",
    "Zieme",
    "Zulauf"
  ],
  "prefix": [
    "Mr.",
    "Mrs.",
    "Ms.",
    "Miss",
    "Dr."
  ],
  "suffix": [
    "Jr.",
    "Sr.",
    "I",
    "II",
    "III",
    "IV",
    "V",
    "MD",
    "DDS",
    "PhD",
    "DVM"
  ],
  "title": {
    "descriptor": [
      "Lead",
      "Senior",
      "Direct",
      "Corporate",
      "Dynamic",
      "Future",
      "Product",
      "National",
      "Regional",
      "District",
      "Central",
      "Global",
      "Customer",
      "Investor",
      "Dynamic",
      "International",
      "Legacy",
      "Forward",
      "Internal",
      "Human",
      "Chief",
      "Principal"
    ],
    "level": [
      "Solutions",
      "Program",
      "Brand",
      "Security",
      "Research",
      "Marketing",
      "Directives",
      "Implementation",
      "Integration",
      "Functionality",
      "Response",
      "Paradigm",
      "Tactics",
      "Identity",
      "Markets",
      "Group",
      "Division",
      "Applications",
      "Optimization",
      "Operations",
      "Infrastructure",
      "Intranet",
      "Communications",
      "Web",
      "Branding",
      "Quality",
      "Assurance",
      "Mobility",
      "Accounts",
      "Data",
      "Creative",
      "Configuration",
      "Accountability",
      "Interactions",
      "Factors",
      "Usability",
      "Metrics"
    ],
    "job": [
      "Supervisor",
      "Associate",
      "Executive",
      "Liason",
      "Officer",
      "Manager",
      "Engineer",
      "Specialist",
      "Director",
      "Coordinator",
      "Administrator",
      "Architect",
      "Analyst",
      "Designer",
      "Planner",
      "Orchestrator",
      "Technician",
      "Developer",
      "Producer",
      "Consultant",
      "Assistant",
      "Facilitator",
      "Agent",
      "Representative",
      "Strategist"
    ]
  },
  "name": [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name} #{suffix}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}"
  ]
};
en.phone_number = {
  "formats": [
    "###-###-####",
    "(###) ###-####",
    "1-###-###-####",
    "###.###.####",
    "###-###-####",
    "(###) ###-####",
    "1-###-###-####",
    "###.###.####",
    "###-###-#### x###",
    "(###) ###-#### x###",
    "1-###-###-#### x###",
    "###.###.#### x###",
    "###-###-#### x####",
    "(###) ###-#### x####",
    "1-###-###-#### x####",
    "###.###.#### x####",
    "###-###-#### x#####",
    "(###) ###-#### x#####",
    "1-###-###-#### x#####",
    "###.###.#### x#####"
  ]
};
en.cell_phone = {
  "formats": [
    "###-###-####",
    "(###) ###-####",
    "1-###-###-####",
    "###.###.####"
  ]
};
en.business = {
  "credit_card_numbers": [
    "1234-2121-1221-1211",
    "1212-1221-1121-1234",
    "1211-1221-1234-2201",
    "1228-1221-1221-1431"
  ],
  "credit_card_expiry_dates": [
    "2011-10-12",
    "2012-11-12",
    "2015-11-11",
    "2013-9-12"
  ],
  "credit_card_types": [
    "visa",
    "mastercard",
    "americanexpress",
    "discover"
  ]
};
en.commerce = {
  "color": [
    "red",
    "green",
    "blue",
    "yellow",
    "purple",
    "mint green",
    "teal",
    "white",
    "black",
    "orange",
    "pink",
    "grey",
    "maroon",
    "violet",
    "turquoise",
    "tan",
    "sky blue",
    "salmon",
    "plum",
    "orchid",
    "olive",
    "magenta",
    "lime",
    "ivory",
    "indigo",
    "gold",
    "fuchsia",
    "cyan",
    "azure",
    "lavender",
    "silver"
  ],
  "department": [
    "Books",
    "Movies",
    "Music",
    "Games",
    "Electronics",
    "Computers",
    "Home",
    "Garden",
    "Tools",
    "Grocery",
    "Health",
    "Beauty",
    "Toys",
    "Kids",
    "Baby",
    "Clothing",
    "Shoes",
    "Jewelery",
    "Sports",
    "Outdoors",
    "Automotive",
    "Industrial"
  ],
  "product_name": {
    "adjective": [
      "Small",
      "Ergonomic",
      "Rustic",
      "Intelligent",
      "Gorgeous",
      "Incredible",
      "Fantastic",
      "Practical",
      "Sleek",
      "Awesome"
    ],
    "material": [
      "Steel",
      "Wooden",
      "Concrete",
      "Plastic",
      "Cotton",
      "Granite",
      "Rubber"
    ],
    "product": [
      "Chair",
      "Car",
      "Computer",
      "Gloves",
      "Pants",
      "Shirt",
      "Table",
      "Shoes",
      "Hat"
    ]
  }
};
en.team = {
  "creature": [
    "ants",
    "bats",
    "bears",
    "bees",
    "birds",
    "buffalo",
    "cats",
    "chickens",
    "cattle",
    "dogs",
    "dolphins",
    "ducks",
    "elephants",
    "fishes",
    "foxes",
    "frogs",
    "geese",
    "goats",
    "horses",
    "kangaroos",
    "lions",
    "monkeys",
    "owls",
    "oxen",
    "penguins",
    "people",
    "pigs",
    "rabbits",
    "sheep",
    "tigers",
    "whales",
    "wolves",
    "zebras",
    "banshees",
    "crows",
    "black cats",
    "chimeras",
    "ghosts",
    "conspirators",
    "dragons",
    "dwarves",
    "elves",
    "enchanters",
    "exorcists",
    "sons",
    "foes",
    "giants",
    "gnomes",
    "goblins",
    "gooses",
    "griffins",
    "lycanthropes",
    "nemesis",
    "ogres",
    "oracles",
    "prophets",
    "sorcerors",
    "spiders",
    "spirits",
    "vampires",
    "warlocks",
    "vixens",
    "werewolves",
    "witches",
    "worshipers",
    "zombies",
    "druids"
  ],
  "name": [
    "#{Address.state} #{creature}"
  ]
};
en.hacker = {
  "abbreviation": [
    "TCP",
    "HTTP",
    "SDD",
    "RAM",
    "GB",
    "CSS",
    "SSL",
    "AGP",
    "SQL",
    "FTP",
    "PCI",
    "AI",
    "ADP",
    "RSS",
    "XML",
    "EXE",
    "COM",
    "HDD",
    "THX",
    "SMTP",
    "SMS",
    "USB",
    "PNG",
    "SAS",
    "IB",
    "SCSI",
    "JSON",
    "XSS",
    "JBOD"
  ],
  "adjective": [
    "auxiliary",
    "primary",
    "back-end",
    "digital",
    "open-source",
    "virtual",
    "cross-platform",
    "redundant",
    "online",
    "haptic",
    "multi-byte",
    "bluetooth",
    "wireless",
    "1080p",
    "neural",
    "optical",
    "solid state",
    "mobile"
  ],
  "noun": [
    "driver",
    "protocol",
    "bandwidth",
    "panel",
    "microchip",
    "program",
    "port",
    "card",
    "array",
    "interface",
    "system",
    "sensor",
    "firewall",
    "hard drive",
    "pixel",
    "alarm",
    "feed",
    "monitor",
    "application",
    "transmitter",
    "bus",
    "circuit",
    "capacitor",
    "matrix"
  ],
  "verb": [
    "back up",
    "bypass",
    "hack",
    "override",
    "compress",
    "copy",
    "navigate",
    "index",
    "connect",
    "generate",
    "quantify",
    "calculate",
    "synthesize",
    "input",
    "transmit",
    "program",
    "reboot",
    "parse"
  ],
  "ingverb": [
    "backing up",
    "bypassing",
    "hacking",
    "overriding",
    "compressing",
    "copying",
    "navigating",
    "indexing",
    "connecting",
    "generating",
    "quantifying",
    "calculating",
    "synthesizing",
    "transmitting",
    "programming",
    "parsing"
  ]
};
en.app = {
  "name": [
    "Redhold",
    "Treeflex",
    "Trippledex",
    "Kanlam",
    "Bigtax",
    "Daltfresh",
    "Toughjoyfax",
    "Mat Lam Tam",
    "Otcom",
    "Tres-Zap",
    "Y-Solowarm",
    "Tresom",
    "Voltsillam",
    "Biodex",
    "Greenlam",
    "Viva",
    "Matsoft",
    "Temp",
    "Zoolab",
    "Subin",
    "Rank",
    "Job",
    "Stringtough",
    "Tin",
    "It",
    "Home Ing",
    "Zamit",
    "Sonsing",
    "Konklab",
    "Alpha",
    "Latlux",
    "Voyatouch",
    "Alphazap",
    "Holdlamis",
    "Zaam-Dox",
    "Sub-Ex",
    "Quo Lux",
    "Bamity",
    "Ventosanzap",
    "Lotstring",
    "Hatity",
    "Tempsoft",
    "Overhold",
    "Fixflex",
    "Konklux",
    "Zontrax",
    "Tampflex",
    "Span",
    "Namfix",
    "Transcof",
    "Stim",
    "Fix San",
    "Sonair",
    "Stronghold",
    "Fintone",
    "Y-find",
    "Opela",
    "Lotlux",
    "Ronstring",
    "Zathin",
    "Duobam",
    "Keylex"
  ],
  "version": [
    "0.#.#",
    "0.##",
    "#.##",
    "#.#",
    "#.#.#"
  ],
  "author": [
    "#{Name.name}",
    "#{Company.name}"
  ]
};

en.finance = {};
en.finance.account_type = ["Checking","Savings","Money Market", "Investment", "Home Loan", "Credit Card", "Auto Loan", "Personal Loan"];
en.finance.transaction_type = ["deposit", "withdrawal", "payment", "invoice"];

en.finance.currency = {
  "UAE Dirham": {
    "code": "AED",
    "symbol": ""
  },
  "Afghani": {
    "code": "AFN",
    "symbol": "؋"
  },
  "Lek": {
    "code": "ALL",
    "symbol": "Lek"
  },
  "Armenian Dram": {
    "code": "AMD",
    "symbol": ""
  },
  "Netherlands Antillian Guilder": {
    "code": "ANG",
    "symbol": "ƒ"
  },
  "Kwanza": {
    "code": "AOA",
    "symbol": ""
  },
  "Argentine Peso": {
    "code": "ARS",
    "symbol": "$"
  },
  "Australian Dollar": {
    "code": "AUD",
    "symbol": "$"
  },
  "Aruban Guilder": {
    "code": "AWG",
    "symbol": "ƒ"
  },
  "Azerbaijanian Manat": {
    "code": "AZN",
    "symbol": "ман"
  },
  "Convertible Marks": {
    "code": "BAM",
    "symbol": "KM"
  },
  "Barbados Dollar": {
    "code": "BBD",
    "symbol": "$"
  },
  "Taka": {
    "code": "BDT",
    "symbol": ""
  },
  "Bulgarian Lev": {
    "code": "BGN",
    "symbol": "лв"
  },
  "Bahraini Dinar": {
    "code": "BHD",
    "symbol": ""
  },
  "Burundi Franc": {
    "code": "BIF",
    "symbol": ""
  },
  "Bermudian Dollar (customarily known as Bermuda Dollar)": {
    "code": "BMD",
    "symbol": "$"
  },
  "Brunei Dollar": {
    "code": "BND",
    "symbol": "$"
  },
  "Boliviano Mvdol": {
    "code": "BOB BOV",
    "symbol": "$b"
  },
  "Brazilian Real": {
    "code": "BRL",
    "symbol": "R$"
  },
  "Bahamian Dollar": {
    "code": "BSD",
    "symbol": "$"
  },
  "Pula": {
    "code": "BWP",
    "symbol": "P"
  },
  "Belarussian Ruble": {
    "code": "BYR",
    "symbol": "p."
  },
  "Belize Dollar": {
    "code": "BZD",
    "symbol": "BZ$"
  },
  "Canadian Dollar": {
    "code": "CAD",
    "symbol": "$"
  },
  "Congolese Franc": {
    "code": "CDF",
    "symbol": ""
  },
  "Swiss Franc": {
    "code": "CHF",
    "symbol": "CHF"
  },
  "Chilean Peso Unidades de fomento": {
    "code": "CLP CLF",
    "symbol": "$"
  },
  "Yuan Renminbi": {
    "code": "CNY",
    "symbol": "¥"
  },
  "Colombian Peso Unidad de Valor Real": {
    "code": "COP COU",
    "symbol": "$"
  },
  "Costa Rican Colon": {
    "code": "CRC",
    "symbol": "₡"
  },
  "Cuban Peso Peso Convertible": {
    "code": "CUP CUC",
    "symbol": "₱"
  },
  "Cape Verde Escudo": {
    "code": "CVE",
    "symbol": ""
  },
  "Czech Koruna": {
    "code": "CZK",
    "symbol": "Kč"
  },
  "Djibouti Franc": {
    "code": "DJF",
    "symbol": ""
  },
  "Danish Krone": {
    "code": "DKK",
    "symbol": "kr"
  },
  "Dominican Peso": {
    "code": "DOP",
    "symbol": "RD$"
  },
  "Algerian Dinar": {
    "code": "DZD",
    "symbol": ""
  },
  "Kroon": {
    "code": "EEK",
    "symbol": ""
  },
  "Egyptian Pound": {
    "code": "EGP",
    "symbol": "£"
  },
  "Nakfa": {
    "code": "ERN",
    "symbol": ""
  },
  "Ethiopian Birr": {
    "code": "ETB",
    "symbol": ""
  },
  "Euro": {
    "code": "EUR",
    "symbol": "€"
  },
  "Fiji Dollar": {
    "code": "FJD",
    "symbol": "$"
  },
  "Falkland Islands Pound": {
    "code": "FKP",
    "symbol": "£"
  },
  "Pound Sterling": {
    "code": "GBP",
    "symbol": "£"
  },
  "Lari": {
    "code": "GEL",
    "symbol": ""
  },
  "Cedi": {
    "code": "GHS",
    "symbol": ""
  },
  "Gibraltar Pound": {
    "code": "GIP",
    "symbol": "£"
  },
  "Dalasi": {
    "code": "GMD",
    "symbol": ""
  },
  "Guinea Franc": {
    "code": "GNF",
    "symbol": ""
  },
  "Quetzal": {
    "code": "GTQ",
    "symbol": "Q"
  },
  "Guyana Dollar": {
    "code": "GYD",
    "symbol": "$"
  },
  "Hong Kong Dollar": {
    "code": "HKD",
    "symbol": "$"
  },
  "Lempira": {
    "code": "HNL",
    "symbol": "L"
  },
  "Croatian Kuna": {
    "code": "HRK",
    "symbol": "kn"
  },
  "Gourde US Dollar": {
    "code": "HTG USD",
    "symbol": ""
  },
  "Forint": {
    "code": "HUF",
    "symbol": "Ft"
  },
  "Rupiah": {
    "code": "IDR",
    "symbol": "Rp"
  },
  "New Israeli Sheqel": {
    "code": "ILS",
    "symbol": "₪"
  },
  "Indian Rupee": {
    "code": "INR",
    "symbol": ""
  },
  "Indian Rupee Ngultrum": {
    "code": "INR BTN",
    "symbol": ""
  },
  "Iraqi Dinar": {
    "code": "IQD",
    "symbol": ""
  },
  "Iranian Rial": {
    "code": "IRR",
    "symbol": "﷼"
  },
  "Iceland Krona": {
    "code": "ISK",
    "symbol": "kr"
  },
  "Jamaican Dollar": {
    "code": "JMD",
    "symbol": "J$"
  },
  "Jordanian Dinar": {
    "code": "JOD",
    "symbol": ""
  },
  "Yen": {
    "code": "JPY",
    "symbol": "¥"
  },
  "Kenyan Shilling": {
    "code": "KES",
    "symbol": ""
  },
  "Som": {
    "code": "KGS",
    "symbol": "лв"
  },
  "Riel": {
    "code": "KHR",
    "symbol": "៛"
  },
  "Comoro Franc": {
    "code": "KMF",
    "symbol": ""
  },
  "North Korean Won": {
    "code": "KPW",
    "symbol": "₩"
  },
  "Won": {
    "code": "KRW",
    "symbol": "₩"
  },
  "Kuwaiti Dinar": {
    "code": "KWD",
    "symbol": ""
  },
  "Cayman Islands Dollar": {
    "code": "KYD",
    "symbol": "$"
  },
  "Tenge": {
    "code": "KZT",
    "symbol": "лв"
  },
  "Kip": {
    "code": "LAK",
    "symbol": "₭"
  },
  "Lebanese Pound": {
    "code": "LBP",
    "symbol": "£"
  },
  "Sri Lanka Rupee": {
    "code": "LKR",
    "symbol": "₨"
  },
  "Liberian Dollar": {
    "code": "LRD",
    "symbol": "$"
  },
  "Lithuanian Litas": {
    "code": "LTL",
    "symbol": "Lt"
  },
  "Latvian Lats": {
    "code": "LVL",
    "symbol": "Ls"
  },
  "Libyan Dinar": {
    "code": "LYD",
    "symbol": ""
  },
  "Moroccan Dirham": {
    "code": "MAD",
    "symbol": ""
  },
  "Moldovan Leu": {
    "code": "MDL",
    "symbol": ""
  },
  "Malagasy Ariary": {
    "code": "MGA",
    "symbol": ""
  },
  "Denar": {
    "code": "MKD",
    "symbol": "ден"
  },
  "Kyat": {
    "code": "MMK",
    "symbol": ""
  },
  "Tugrik": {
    "code": "MNT",
    "symbol": "₮"
  },
  "Pataca": {
    "code": "MOP",
    "symbol": ""
  },
  "Ouguiya": {
    "code": "MRO",
    "symbol": ""
  },
  "Mauritius Rupee": {
    "code": "MUR",
    "symbol": "₨"
  },
  "Rufiyaa": {
    "code": "MVR",
    "symbol": ""
  },
  "Kwacha": {
    "code": "MWK",
    "symbol": ""
  },
  "Mexican Peso Mexican Unidad de Inversion (UDI)": {
    "code": "MXN MXV",
    "symbol": "$"
  },
  "Malaysian Ringgit": {
    "code": "MYR",
    "symbol": "RM"
  },
  "Metical": {
    "code": "MZN",
    "symbol": "MT"
  },
  "Naira": {
    "code": "NGN",
    "symbol": "₦"
  },
  "Cordoba Oro": {
    "code": "NIO",
    "symbol": "C$"
  },
  "Norwegian Krone": {
    "code": "NOK",
    "symbol": "kr"
  },
  "Nepalese Rupee": {
    "code": "NPR",
    "symbol": "₨"
  },
  "New Zealand Dollar": {
    "code": "NZD",
    "symbol": "$"
  },
  "Rial Omani": {
    "code": "OMR",
    "symbol": "﷼"
  },
  "Balboa US Dollar": {
    "code": "PAB USD",
    "symbol": "B/."
  },
  "Nuevo Sol": {
    "code": "PEN",
    "symbol": "S/."
  },
  "Kina": {
    "code": "PGK",
    "symbol": ""
  },
  "Philippine Peso": {
    "code": "PHP",
    "symbol": "Php"
  },
  "Pakistan Rupee": {
    "code": "PKR",
    "symbol": "₨"
  },
  "Zloty": {
    "code": "PLN",
    "symbol": "zł"
  },
  "Guarani": {
    "code": "PYG",
    "symbol": "Gs"
  },
  "Qatari Rial": {
    "code": "QAR",
    "symbol": "﷼"
  },
  "New Leu": {
    "code": "RON",
    "symbol": "lei"
  },
  "Serbian Dinar": {
    "code": "RSD",
    "symbol": "Дин."
  },
  "Russian Ruble": {
    "code": "RUB",
    "symbol": "руб"
  },
  "Rwanda Franc": {
    "code": "RWF",
    "symbol": ""
  },
  "Saudi Riyal": {
    "code": "SAR",
    "symbol": "﷼"
  },
  "Solomon Islands Dollar": {
    "code": "SBD",
    "symbol": "$"
  },
  "Seychelles Rupee": {
    "code": "SCR",
    "symbol": "₨"
  },
  "Sudanese Pound": {
    "code": "SDG",
    "symbol": ""
  },
  "Swedish Krona": {
    "code": "SEK",
    "symbol": "kr"
  },
  "Singapore Dollar": {
    "code": "SGD",
    "symbol": "$"
  },
  "Saint Helena Pound": {
    "code": "SHP",
    "symbol": "£"
  },
  "Leone": {
    "code": "SLL",
    "symbol": ""
  },
  "Somali Shilling": {
    "code": "SOS",
    "symbol": "S"
  },
  "Surinam Dollar": {
    "code": "SRD",
    "symbol": "$"
  },
  "Dobra": {
    "code": "STD",
    "symbol": ""
  },
  "El Salvador Colon US Dollar": {
    "code": "SVC USD",
    "symbol": "$"
  },
  "Syrian Pound": {
    "code": "SYP",
    "symbol": "£"
  },
  "Lilangeni": {
    "code": "SZL",
    "symbol": ""
  },
  "Baht": {
    "code": "THB",
    "symbol": "฿"
  },
  "Somoni": {
    "code": "TJS",
    "symbol": ""
  },
  "Manat": {
    "code": "TMT",
    "symbol": ""
  },
  "Tunisian Dinar": {
    "code": "TND",
    "symbol": ""
  },
  "Pa'anga": {
    "code": "TOP",
    "symbol": ""
  },
  "Turkish Lira": {
    "code": "TRY",
    "symbol": "TL"
  },
  "Trinidad and Tobago Dollar": {
    "code": "TTD",
    "symbol": "TT$"
  },
  "New Taiwan Dollar": {
    "code": "TWD",
    "symbol": "NT$"
  },
  "Tanzanian Shilling": {
    "code": "TZS",
    "symbol": ""
  },
  "Hryvnia": {
    "code": "UAH",
    "symbol": "₴"
  },
  "Uganda Shilling": {
    "code": "UGX",
    "symbol": ""
  },
  "US Dollar": {
    "code": "USD",
    "symbol": "$"
  },
  "Peso Uruguayo Uruguay Peso en Unidades Indexadas": {
    "code": "UYU UYI",
    "symbol": "$U"
  },
  "Uzbekistan Sum": {
    "code": "UZS",
    "symbol": "лв"
  },
  "Bolivar Fuerte": {
    "code": "VEF",
    "symbol": "Bs"
  },
  "Dong": {
    "code": "VND",
    "symbol": "₫"
  },
  "Vatu": {
    "code": "VUV",
    "symbol": ""
  },
  "Tala": {
    "code": "WST",
    "symbol": ""
  },
  "CFA Franc BEAC": {
    "code": "XAF",
    "symbol": ""
  },
  "Silver": {
    "code": "XAG",
    "symbol": ""
  },
  "Gold": {
    "code": "XAU",
    "symbol": ""
  },
  "Bond Markets Units European Composite Unit (EURCO)": {
    "code": "XBA",
    "symbol": ""
  },
  "European Monetary Unit (E.M.U.-6)": {
    "code": "XBB",
    "symbol": ""
  },
  "European Unit of Account 9(E.U.A.-9)": {
    "code": "XBC",
    "symbol": ""
  },
  "European Unit of Account 17(E.U.A.-17)": {
    "code": "XBD",
    "symbol": ""
  },
  "East Caribbean Dollar": {
    "code": "XCD",
    "symbol": "$"
  },
  "SDR": {
    "code": "XDR",
    "symbol": ""
  },
  "UIC-Franc": {
    "code": "XFU",
    "symbol": ""
  },
  "CFA Franc BCEAO": {
    "code": "XOF",
    "symbol": ""
  },
  "Palladium": {
    "code": "XPD",
    "symbol": ""
  },
  "CFP Franc": {
    "code": "XPF",
    "symbol": ""
  },
  "Platinum": {
    "code": "XPT",
    "symbol": ""
  },
  "Codes specifically reserved for testing purposes": {
    "code": "XTS",
    "symbol": ""
  },
  "Yemeni Rial": {
    "code": "YER",
    "symbol": "﷼"
  },
  "Rand": {
    "code": "ZAR",
    "symbol": "R"
  },
  "Rand Loti": {
    "code": "ZAR LSL",
    "symbol": ""
  },
  "Rand Namibia Dollar": {
    "code": "ZAR NAD",
    "symbol": ""
  },
  "Zambian Kwacha": {
    "code": "ZMK",
    "symbol": ""
  },
  "Zimbabwe Dollar": {
    "code": "ZWL",
    "symbol": ""
  }
};
},{}],58:[function(require,module,exports){
var en_AU = {};
module["exports"] = en_AU;
en_AU.title = "Australia (English)";
en_AU.name = {
  "first_name": [
    "William",
    "Jack",
    "Oliver",
    "Joshua",
    "Thomas",
    "Lachlan",
    "Cooper",
    "Noah",
    "Ethan",
    "Lucas",
    "James",
    "Samuel",
    "Jacob",
    "Liam",
    "Alexander",
    "Benjamin",
    "Max",
    "Isaac",
    "Daniel",
    "Riley",
    "Ryan",
    "Charlie",
    "Tyler",
    "Jake",
    "Matthew",
    "Xavier",
    "Harry",
    "Jayden",
    "Nicholas",
    "Harrison",
    "Levi",
    "Luke",
    "Adam",
    "Henry",
    "Aiden",
    "Dylan",
    "Oscar",
    "Michael",
    "Jackson",
    "Logan",
    "Joseph",
    "Blake",
    "Nathan",
    "Connor",
    "Elijah",
    "Nate",
    "Archie",
    "Bailey",
    "Marcus",
    "Cameron",
    "Jordan",
    "Zachary",
    "Caleb",
    "Hunter",
    "Ashton",
    "Toby",
    "Aidan",
    "Hayden",
    "Mason",
    "Hamish",
    "Edward",
    "Angus",
    "Eli",
    "Sebastian",
    "Christian",
    "Patrick",
    "Andrew",
    "Anthony",
    "Luca",
    "Kai",
    "Beau",
    "Alex",
    "George",
    "Callum",
    "Finn",
    "Zac",
    "Mitchell",
    "Jett",
    "Jesse",
    "Gabriel",
    "Leo",
    "Declan",
    "Charles",
    "Jasper",
    "Jonathan",
    "Aaron",
    "Hugo",
    "David",
    "Christopher",
    "Chase",
    "Owen",
    "Justin",
    "Ali",
    "Darcy",
    "Lincoln",
    "Cody",
    "Phoenix",
    "Sam",
    "John",
    "Joel",
    "Isabella",
    "Ruby",
    "Chloe",
    "Olivia",
    "Charlotte",
    "Mia",
    "Lily",
    "Emily",
    "Ella",
    "Sienna",
    "Sophie",
    "Amelia",
    "Grace",
    "Ava",
    "Zoe",
    "Emma",
    "Sophia",
    "Matilda",
    "Hannah",
    "Jessica",
    "Lucy",
    "Georgia",
    "Sarah",
    "Abigail",
    "Zara",
    "Eva",
    "Scarlett",
    "Jasmine",
    "Chelsea",
    "Lilly",
    "Ivy",
    "Isla",
    "Evie",
    "Isabelle",
    "Maddison",
    "Layla",
    "Summer",
    "Annabelle",
    "Alexis",
    "Elizabeth",
    "Bella",
    "Holly",
    "Lara",
    "Madison",
    "Alyssa",
    "Maya",
    "Tahlia",
    "Claire",
    "Hayley",
    "Imogen",
    "Jade",
    "Ellie",
    "Sofia",
    "Addison",
    "Molly",
    "Phoebe",
    "Alice",
    "Savannah",
    "Gabriella",
    "Kayla",
    "Mikayla",
    "Abbey",
    "Eliza",
    "Willow",
    "Alexandra",
    "Poppy",
    "Samantha",
    "Stella",
    "Amy",
    "Amelie",
    "Anna",
    "Piper",
    "Gemma",
    "Isabel",
    "Victoria",
    "Stephanie",
    "Caitlin",
    "Heidi",
    "Paige",
    "Rose",
    "Amber",
    "Audrey",
    "Claudia",
    "Taylor",
    "Madeline",
    "Angelina",
    "Natalie",
    "Charli",
    "Lauren",
    "Ashley",
    "Violet",
    "Mackenzie",
    "Abby",
    "Skye",
    "Lillian",
    "Alana",
    "Lola",
    "Leah",
    "Eve",
    "Kiara"
  ],
  "last_name": [
    "Smith",
    "Jones",
    "Williams",
    "Brown",
    "Wilson",
    "Taylor",
    "Johnson",
    "White",
    "Martin",
    "Anderson",
    "Thompson",
    "Nguyen",
    "Thomas",
    "Walker",
    "Harris",
    "Lee",
    "Ryan",
    "Robinson",
    "Kelly",
    "King",
    "Davis",
    "Wright",
    "Evans",
    "Roberts",
    "Green",
    "Hall",
    "Wood",
    "Jackson",
    "Clarke",
    "Patel",
    "Khan",
    "Lewis",
    "James",
    "Phillips",
    "Mason",
    "Mitchell",
    "Rose",
    "Davies",
    "Rodriguez",
    "Cox",
    "Alexander",
    "Garden",
    "Campbell",
    "Johnston",
    "Moore",
    "Smyth",
    "O'neill",
    "Doherty",
    "Stewart",
    "Quinn",
    "Murphy",
    "Graham",
    "Mclaughlin",
    "Hamilton",
    "Murray",
    "Hughes",
    "Robertson",
    "Thomson",
    "Scott",
    "Macdonald",
    "Reid",
    "Clark",
    "Ross",
    "Young",
    "Watson",
    "Paterson",
    "Morrison",
    "Morgan",
    "Griffiths",
    "Edwards",
    "Rees",
    "Jenkins",
    "Owen",
    "Price",
    "Moss",
    "Richards",
    "Abbott",
    "Adams",
    "Armstrong",
    "Bahringer",
    "Bailey",
    "Barrows",
    "Bartell",
    "Bartoletti",
    "Barton",
    "Bauch",
    "Baumbach",
    "Bayer",
    "Beahan",
    "Beatty",
    "Becker",
    "Beier",
    "Berge",
    "Bergstrom",
    "Bode",
    "Bogan",
    "Borer",
    "Bosco",
    "Botsford",
    "Boyer",
    "Boyle",
    "Braun",
    "Bruen",
    "Carroll",
    "Carter",
    "Cartwright",
    "Casper",
    "Cassin",
    "Champlin",
    "Christiansen",
    "Cole",
    "Collier",
    "Collins",
    "Connelly",
    "Conroy",
    "Corkery",
    "Cormier",
    "Corwin",
    "Cronin",
    "Crooks",
    "Cruickshank",
    "Cummings",
    "D'amore",
    "Daniel",
    "Dare",
    "Daugherty",
    "Dickens",
    "Dickinson",
    "Dietrich",
    "Donnelly",
    "Dooley",
    "Douglas",
    "Doyle",
    "Durgan",
    "Ebert",
    "Emard",
    "Emmerich",
    "Erdman",
    "Ernser",
    "Fadel",
    "Fahey",
    "Farrell",
    "Fay",
    "Feeney",
    "Feil",
    "Ferry",
    "Fisher",
    "Flatley",
    "Gibson",
    "Gleason",
    "Glover",
    "Goldner",
    "Goodwin",
    "Grady",
    "Grant",
    "Greenfelder",
    "Greenholt",
    "Grimes",
    "Gutmann",
    "Hackett",
    "Hahn",
    "Haley",
    "Hammes",
    "Hand",
    "Hane",
    "Hansen",
    "Harber",
    "Hartmann",
    "Harvey",
    "Hayes",
    "Heaney",
    "Heathcote",
    "Heller",
    "Hermann",
    "Hermiston",
    "Hessel",
    "Hettinger",
    "Hickle",
    "Hill",
    "Hills",
    "Hoppe",
    "Howe",
    "Howell",
    "Hudson",
    "Huel",
    "Hyatt",
    "Jacobi",
    "Jacobs",
    "Jacobson",
    "Jerde",
    "Johns",
    "Keeling",
    "Kemmer",
    "Kessler",
    "Kiehn",
    "Kirlin",
    "Klein",
    "Koch",
    "Koelpin",
    "Kohler",
    "Koss",
    "Kovacek",
    "Kreiger",
    "Kris",
    "Kuhlman",
    "Kuhn",
    "Kulas",
    "Kunde",
    "Kutch",
    "Lakin",
    "Lang",
    "Langworth",
    "Larkin",
    "Larson",
    "Leannon",
    "Leffler",
    "Little",
    "Lockman",
    "Lowe",
    "Lynch",
    "Mann",
    "Marks",
    "Marvin",
    "Mayer",
    "Mccullough",
    "Mcdermott",
    "Mckenzie",
    "Miller",
    "Mills",
    "Monahan",
    "Morissette",
    "Mueller",
    "Muller",
    "Nader",
    "Nicolas",
    "Nolan",
    "O'connell",
    "O'conner",
    "O'hara",
    "O'keefe",
    "Olson",
    "O'reilly",
    "Parisian",
    "Parker",
    "Quigley",
    "Reilly",
    "Reynolds",
    "Rice",
    "Ritchie",
    "Rohan",
    "Rolfson",
    "Rowe",
    "Russel",
    "Rutherford",
    "Sanford",
    "Sauer",
    "Schmidt",
    "Schmitt",
    "Schneider",
    "Schroeder",
    "Schultz",
    "Shields",
    "Smitham",
    "Spencer",
    "Stanton",
    "Stark",
    "Stokes",
    "Swift",
    "Tillman",
    "Towne",
    "Tremblay",
    "Tromp",
    "Turcotte",
    "Turner",
    "Walsh",
    "Walter",
    "Ward",
    "Waters",
    "Weber",
    "Welch",
    "West",
    "Wilderman",
    "Wilkinson",
    "Williamson",
    "Windler",
    "Wolf"
  ]
};
en_AU.company = {
  "suffix": [
    "Pty Ltd",
    "and Sons",
    "Corp",
    "Group",
    "Brothers",
    "Partners"
  ]
};
en_AU.internet = {
  "domain_suffix": [
    "com.au",
    "com",
    "net.au",
    "net",
    "org.au",
    "org"
  ]
};
en_AU.address = {
  "state_abbr": [
    "NSW",
    "QLD",
    "NT",
    "SA",
    "WA",
    "TAS",
    "ACT",
    "VIC"
  ],
  "state": [
    "New South Wales",
    "Queensland",
    "Northern Territory",
    "South Australia",
    "Western Australia",
    "Tasmania",
    "Australian Capital Territory",
    "Victoria"
  ],
  "postcode": [
    "0###",
    "2###",
    "3###",
    "4###",
    "5###",
    "6###",
    "7###"
  ],
  "building_number": [
    "####",
    "###",
    "##"
  ],
  "street_suffix": [
    "Avenue",
    "Boulevard",
    "Circle",
    "Circuit",
    "Court",
    "Crescent",
    "Crest",
    "Drive",
    "Estate Dr",
    "Grove",
    "Hill",
    "Island",
    "Junction",
    "Knoll",
    "Lane",
    "Loop",
    "Mall",
    "Manor",
    "Meadow",
    "Mews",
    "Parade",
    "Parkway",
    "Pass",
    "Place",
    "Plaza",
    "Ridge",
    "Road",
    "Run",
    "Square",
    "Station St",
    "Street",
    "Summit",
    "Terrace",
    "Track",
    "Trail",
    "View Rd",
    "Way"
  ],
  "default_country": [
    "Australia"
  ]
};
en_AU.phone_number = {
  "formats": [
    "0# #### ####",
    "+61 # #### ####",
    "04## ### ###",
    "+61 4## ### ###"
  ]
};

},{}],59:[function(require,module,exports){
var en_BORK = {};
module["exports"] = en_BORK;
en_BORK.title = "Bork (English)";
en_BORK.lorem = {
  "words": [
    "Boot",
    "I",
    "Nu",
    "Nur",
    "Tu",
    "Um",
    "a",
    "becoose-a",
    "boot",
    "bork",
    "burn",
    "chuuses",
    "cumplete-a",
    "cun",
    "cunseqooences",
    "curcoomstunces",
    "dee",
    "deeslikes",
    "denuoonceeng",
    "desures",
    "du",
    "eccuoont",
    "ectooel",
    "edfuntege-a",
    "efueeds",
    "egeeen",
    "ell",
    "ere-a",
    "feend",
    "foolt",
    "frum",
    "geefe-a",
    "gesh",
    "greet",
    "heem",
    "heppeeness",
    "hes",
    "hoo",
    "hoomun",
    "idea",
    "ifer",
    "in",
    "incuoonter",
    "injuy",
    "itselff",
    "ixcept",
    "ixemple-a",
    "ixerceese-a",
    "ixpleeen",
    "ixplurer",
    "ixpuoond",
    "ixtremely",
    "knoo",
    "lebureeuoos",
    "lufes",
    "meestekee",
    "mester-booeelder",
    "moost",
    "mun",
    "nu",
    "nut",
    "oobteeen",
    "oocceseeunelly",
    "ooccoor",
    "ooff",
    "oone-a",
    "oor",
    "peeen",
    "peeenffool",
    "physeecel",
    "pleesoore-a",
    "poorsooe-a",
    "poorsooes",
    "preeesing",
    "prucoore-a",
    "prudooces",
    "reeght",
    "reshunelly",
    "resooltunt",
    "sume-a",
    "teecheengs",
    "teke-a",
    "thees",
    "thet",
    "thuse-a",
    "treefiel",
    "troot",
    "tu",
    "tueel",
    "und",
    "undertekes",
    "unnuyeeng",
    "uny",
    "unyune-a",
    "us",
    "veell",
    "veet",
    "ves",
    "vheech",
    "vhu",
    "yuoo",
    "zee",
    "zeere-a"
  ]
};

},{}],60:[function(require,module,exports){
var en_CA = {};
module["exports"] = en_CA;
en_CA.title = "Canada (English)";
en_CA.address = {
  "postcode": [
    "?#? #?#",
    "?#?#?#"
  ],
  "state": [
    "Alberta",
    "British Columbia",
    "Manitoba",
    "New Brunswick",
    "Newfoundland and Labrador",
    "Nova Scotia",
    "Northwest Territories",
    "Nunavut",
    "Ontario",
    "Prince Edward Island",
    "Quebec",
    "Saskatchewan",
    "Yukon"
  ],
  "state_abbr": [
    "AB",
    "BC",
    "MB",
    "NB",
    "NL",
    "NS",
    "NU",
    "NT",
    "ON",
    "PE",
    "QC",
    "SK",
    "YK"
  ],
  "default_country": [
    "Canada"
  ]
};
en_CA.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.ca",
    "hotmail.com"
  ],
  "domain_suffix": [
    "ca",
    "com",
    "biz",
    "info",
    "name",
    "net",
    "org"
  ]
};
en_CA.phone_number = {
  "formats": [
    "###-###-####",
    "(###)###-####",
    "###.###.####",
    "1-###-###-####",
    "###-###-#### x###",
    "(###)###-#### x###",
    "1-###-###-#### x###",
    "###.###.#### x###",
    "###-###-#### x####",
    "(###)###-#### x####",
    "1-###-###-#### x####",
    "###.###.#### x####",
    "###-###-#### x#####",
    "(###)###-#### x#####",
    "1-###-###-#### x#####",
    "###.###.#### x#####"
  ]
};

},{}],61:[function(require,module,exports){
var en_GB = {};
module["exports"] = en_GB;
en_GB.title = "Great Britain (English)";
en_GB.address = {
  "postcode": "/[A-PR-UWYZ][A-HK-Y]?[0-9][ABEHMNPRVWXY0-9]? [0-9][ABD-HJLN-UW-Z]{2}/",
  "county": [
    "Avon",
    "Bedfordshire",
    "Berkshire",
    "Borders",
    "Buckinghamshire",
    "Cambridgeshire",
    "Central",
    "Cheshire",
    "Cleveland",
    "Clwyd",
    "Cornwall",
    "County Antrim",
    "County Armagh",
    "County Down",
    "County Fermanagh",
    "County Londonderry",
    "County Tyrone",
    "Cumbria",
    "Derbyshire",
    "Devon",
    "Dorset",
    "Dumfries and Galloway",
    "Durham",
    "Dyfed",
    "East Sussex",
    "Essex",
    "Fife",
    "Gloucestershire",
    "Grampian",
    "Greater Manchester",
    "Gwent",
    "Gwynedd County",
    "Hampshire",
    "Herefordshire",
    "Hertfordshire",
    "Highlands and Islands",
    "Humberside",
    "Isle of Wight",
    "Kent",
    "Lancashire",
    "Leicestershire",
    "Lincolnshire",
    "Lothian",
    "Merseyside",
    "Mid Glamorgan",
    "Norfolk",
    "North Yorkshire",
    "Northamptonshire",
    "Northumberland",
    "Nottinghamshire",
    "Oxfordshire",
    "Powys",
    "Rutland",
    "Shropshire",
    "Somerset",
    "South Glamorgan",
    "South Yorkshire",
    "Staffordshire",
    "Strathclyde",
    "Suffolk",
    "Surrey",
    "Tayside",
    "Tyne and Wear",
    "Warwickshire",
    "West Glamorgan",
    "West Midlands",
    "West Sussex",
    "West Yorkshire",
    "Wiltshire",
    "Worcestershire"
  ],
  "uk_country": [
    "England",
    "Scotland",
    "Wales",
    "Northern Ireland"
  ],
  "default_country": [
    "England",
    "Scotland",
    "Wales",
    "Northern Ireland"
  ]
};
en_GB.internet = {
  "domain_suffix": [
    "co.uk",
    "com",
    "biz",
    "info",
    "name"
  ]
};
en_GB.phone_number = {
  "formats": [
    "01#### #####",
    "01### ######",
    "01#1 ### ####",
    "011# ### ####",
    "02# #### ####",
    "03## ### ####",
    "055 #### ####",
    "056 #### ####",
    "0800 ### ####",
    "08## ### ####",
    "09## ### ####",
    "016977 ####",
    "01### #####",
    "0500 ######",
    "0800 ######"
  ]
};
en_GB.cell_phone = {
  "formats": [
    "074## ######",
    "075## ######",
    "076## ######",
    "077## ######",
    "078## ######",
    "079## ######"
  ]
};

},{}],62:[function(require,module,exports){
var en_IND = {};
module["exports"] = en_IND;
en_IND.title = "India (English)";
en_IND.name = {
  "first_name": [
    "Aadrika",
    "Aanandinii",
    "Aaratrika",
    "Aarya",
    "Arya",
    "Aashritha",
    "Aatmaja",
    "Atmaja",
    "Abhaya",
    "Adwitiya",
    "Agrata",
    "Ahilya",
    "Ahalya",
    "Aishani",
    "Akshainie",
    "Akshata",
    "Akshita",
    "Akula",
    "Ambar",
    "Amodini",
    "Amrita",
    "Amritambu",
    "Anala",
    "Anamika",
    "Ananda",
    "Anandamayi",
    "Ananta",
    "Anila",
    "Anjali",
    "Anjushri",
    "Anjushree",
    "Annapurna",
    "Anshula",
    "Anuja",
    "Anusuya",
    "Anasuya",
    "Anasooya",
    "Anwesha",
    "Apsara",
    "Aruna",
    "Asha",
    "Aasa",
    "Aasha",
    "Aslesha",
    "Atreyi",
    "Atreyee",
    "Avani",
    "Abani",
    "Avantika",
    "Ayushmati",
    "Baidehi",
    "Vaidehi",
    "Bala",
    "Baala",
    "Balamani",
    "Basanti",
    "Vasanti",
    "Bela",
    "Bhadra",
    "Bhagirathi",
    "Bhagwanti",
    "Bhagwati",
    "Bhamini",
    "Bhanumati",
    "Bhaanumati",
    "Bhargavi",
    "Bhavani",
    "Bhilangana",
    "Bilwa",
    "Bilva",
    "Buddhana",
    "Chakrika",
    "Chanda",
    "Chandi",
    "Chandni",
    "Chandini",
    "Chandani",
    "Chandra",
    "Chandira",
    "Chandrabhaga",
    "Chandrakala",
    "Chandrakin",
    "Chandramani",
    "Chandrani",
    "Chandraprabha",
    "Chandraswaroopa",
    "Chandravati",
    "Chapala",
    "Charumati",
    "Charvi",
    "Chatura",
    "Chitrali",
    "Chitramala",
    "Chitrangada",
    "Daksha",
    "Dakshayani",
    "Damayanti",
    "Darshwana",
    "Deepali",
    "Dipali",
    "Deeptimoyee",
    "Deeptimayee",
    "Devangana",
    "Devani",
    "Devasree",
    "Devi",
    "Daevi",
    "Devika",
    "Daevika",
    "Dhaanyalakshmi",
    "Dhanalakshmi",
    "Dhana",
    "Dhanadeepa",
    "Dhara",
    "Dharani",
    "Dharitri",
    "Dhatri",
    "Diksha",
    "Deeksha",
    "Divya",
    "Draupadi",
    "Dulari",
    "Durga",
    "Durgeshwari",
    "Ekaparnika",
    "Elakshi",
    "Enakshi",
    "Esha",
    "Eshana",
    "Eshita",
    "Gautami",
    "Gayatri",
    "Geeta",
    "Geetanjali",
    "Gitanjali",
    "Gemine",
    "Gemini",
    "Girja",
    "Girija",
    "Gita",
    "Hamsini",
    "Harinakshi",
    "Harita",
    "Heema",
    "Himadri",
    "Himani",
    "Hiranya",
    "Indira",
    "Jaimini",
    "Jaya",
    "Jyoti",
    "Jyotsana",
    "Kali",
    "Kalinda",
    "Kalpana",
    "Kalyani",
    "Kama",
    "Kamala",
    "Kamla",
    "Kanchan",
    "Kanishka",
    "Kanti",
    "Kashyapi",
    "Kumari",
    "Kumuda",
    "Lakshmi",
    "Laxmi",
    "Lalita",
    "Lavanya",
    "Leela",
    "Lila",
    "Leela",
    "Madhuri",
    "Malti",
    "Malati",
    "Mandakini",
    "Mandaakin",
    "Mangala",
    "Mangalya",
    "Mani",
    "Manisha",
    "Manjusha",
    "Meena",
    "Mina",
    "Meenakshi",
    "Minakshi",
    "Menka",
    "Menaka",
    "Mohana",
    "Mohini",
    "Nalini",
    "Nikita",
    "Ojaswini",
    "Omana",
    "Oormila",
    "Urmila",
    "Opalina",
    "Opaline",
    "Padma",
    "Parvati",
    "Poornima",
    "Purnima",
    "Pramila",
    "Prasanna",
    "Preity",
    "Prema",
    "Priya",
    "Priyala",
    "Pushti",
    "Radha",
    "Rageswari",
    "Rageshwari",
    "Rajinder",
    "Ramaa",
    "Rati",
    "Rita",
    "Rohana",
    "Rukhmani",
    "Rukmin",
    "Rupinder",
    "Sanya",
    "Sarada",
    "Sharda",
    "Sarala",
    "Sarla",
    "Saraswati",
    "Sarisha",
    "Saroja",
    "Shakti",
    "Shakuntala",
    "Shanti",
    "Sharmila",
    "Shashi",
    "Shashikala",
    "Sheela",
    "Shivakari",
    "Shobhana",
    "Shresth",
    "Shresthi",
    "Shreya",
    "Shreyashi",
    "Shridevi",
    "Shrishti",
    "Shubha",
    "Shubhaprada",
    "Siddhi",
    "Sitara",
    "Sloka",
    "Smita",
    "Smriti",
    "Soma",
    "Subhashini",
    "Subhasini",
    "Sucheta",
    "Sudeva",
    "Sujata",
    "Sukanya",
    "Suma",
    "Suma",
    "Sumitra",
    "Sunita",
    "Suryakantam",
    "Sushma",
    "Swara",
    "Swarnalata",
    "Sweta",
    "Shwet",
    "Tanirika",
    "Tanushree",
    "Tanushri",
    "Tanushri",
    "Tanya",
    "Tara",
    "Trisha",
    "Uma",
    "Usha",
    "Vaijayanti",
    "Vaijayanthi",
    "Baijayanti",
    "Vaishvi",
    "Vaishnavi",
    "Vaishno",
    "Varalakshmi",
    "Vasudha",
    "Vasundhara",
    "Veda",
    "Vedanshi",
    "Vidya",
    "Vimala",
    "Vrinda",
    "Vrund",
    "Aadi",
    "Aadidev",
    "Aadinath",
    "Aaditya",
    "Aagam",
    "Aagney",
    "Aamod",
    "Aanandaswarup",
    "Anand Swarup",
    "Aanjaneya",
    "Anjaneya",
    "Aaryan",
    "Aryan",
    "Aatmaj",
    "Aatreya",
    "Aayushmaan",
    "Aayushman",
    "Abhaidev",
    "Abhaya",
    "Abhirath",
    "Abhisyanta",
    "Acaryatanaya",
    "Achalesvara",
    "Acharyanandana",
    "Acharyasuta",
    "Achintya",
    "Achyut",
    "Adheesh",
    "Adhiraj",
    "Adhrit",
    "Adikavi",
    "Adinath",
    "Aditeya",
    "Aditya",
    "Adityanandan",
    "Adityanandana",
    "Adripathi",
    "Advaya",
    "Agasti",
    "Agastya",
    "Agneya",
    "Aagneya",
    "Agnimitra",
    "Agniprava",
    "Agnivesh",
    "Agrata",
    "Ajit",
    "Ajeet",
    "Akroor",
    "Akshaj",
    "Akshat",
    "Akshayakeerti",
    "Alok",
    "Aalok",
    "Amaranaath",
    "Amarnath",
    "Amaresh",
    "Ambar",
    "Ameyatma",
    "Amish",
    "Amogh",
    "Amrit",
    "Anaadi",
    "Anagh",
    "Anal",
    "Anand",
    "Aanand",
    "Anang",
    "Anil",
    "Anilaabh",
    "Anilabh",
    "Anish",
    "Ankal",
    "Anunay",
    "Anurag",
    "Anuraag",
    "Archan",
    "Arindam",
    "Arjun",
    "Arnesh",
    "Arun",
    "Ashlesh",
    "Ashok",
    "Atmanand",
    "Atmananda",
    "Avadhesh",
    "Baalaaditya",
    "Baladitya",
    "Baalagopaal",
    "Balgopal",
    "Balagopal",
    "Bahula",
    "Bakula",
    "Bala",
    "Balaaditya",
    "Balachandra",
    "Balagovind",
    "Bandhu",
    "Bandhul",
    "Bankim",
    "Bankimchandra",
    "Bhadrak",
    "Bhadraksh",
    "Bhadran",
    "Bhagavaan",
    "Bhagvan",
    "Bharadwaj",
    "Bhardwaj",
    "Bharat",
    "Bhargava",
    "Bhasvan",
    "Bhaasvan",
    "Bhaswar",
    "Bhaaswar",
    "Bhaumik",
    "Bhaves",
    "Bheeshma",
    "Bhisham",
    "Bhishma",
    "Bhima",
    "Bhoj",
    "Bhramar",
    "Bhudev",
    "Bhudeva",
    "Bhupati",
    "Bhoopati",
    "Bhoopat",
    "Bhupen",
    "Bhushan",
    "Bhooshan",
    "Bhushit",
    "Bhooshit",
    "Bhuvanesh",
    "Bhuvaneshwar",
    "Bilva",
    "Bodhan",
    "Brahma",
    "Brahmabrata",
    "Brahmanandam",
    "Brahmaanand",
    "Brahmdev",
    "Brajendra",
    "Brajesh",
    "Brijesh",
    "Birjesh",
    "Budhil",
    "Chakor",
    "Chakradhar",
    "Chakravartee",
    "Chakravarti",
    "Chanakya",
    "Chaanakya",
    "Chandak",
    "Chandan",
    "Chandra",
    "Chandraayan",
    "Chandrabhan",
    "Chandradev",
    "Chandraketu",
    "Chandramauli",
    "Chandramohan",
    "Chandran",
    "Chandranath",
    "Chapal",
    "Charak",
    "Charuchandra",
    "Chaaruchandra",
    "Charuvrat",
    "Chatur",
    "Chaturaanan",
    "Chaturbhuj",
    "Chetan",
    "Chaten",
    "Chaitan",
    "Chetanaanand",
    "Chidaakaash",
    "Chidaatma",
    "Chidambar",
    "Chidambaram",
    "Chidananda",
    "Chinmayanand",
    "Chinmayananda",
    "Chiranjeev",
    "Chiranjeeve",
    "Chitraksh",
    "Daiwik",
    "Daksha",
    "Damodara",
    "Dandak",
    "Dandapaani",
    "Darshan",
    "Datta",
    "Dayaamay",
    "Dayamayee",
    "Dayaananda",
    "Dayaanidhi",
    "Kin",
    "Deenabandhu",
    "Deepan",
    "Deepankar",
    "Dipankar",
    "Deependra",
    "Dipendra",
    "Deepesh",
    "Dipesh",
    "Deeptanshu",
    "Deeptendu",
    "Diptendu",
    "Deeptiman",
    "Deeptimoy",
    "Deeptimay",
    "Dev",
    "Deb",
    "Devadatt",
    "Devagya",
    "Devajyoti",
    "Devak",
    "Devdan",
    "Deven",
    "Devesh",
    "Deveshwar",
    "Devi",
    "Devvrat",
    "Dhananjay",
    "Dhanapati",
    "Dhanpati",
    "Dhanesh",
    "Dhanu",
    "Dhanvin",
    "Dharmaketu",
    "Dhruv",
    "Dhyanesh",
    "Dhyaneshwar",
    "Digambar",
    "Digambara",
    "Dinakar",
    "Dinkar",
    "Dinesh",
    "Divaakar",
    "Divakar",
    "Deevakar",
    "Divjot",
    "Dron",
    "Drona",
    "Dwaipayan",
    "Dwaipayana",
    "Eekalabya",
    "Ekalavya",
    "Ekaksh",
    "Ekaaksh",
    "Ekaling",
    "Ekdant",
    "Ekadant",
    "Gajaadhar",
    "Gajadhar",
    "Gajbaahu",
    "Gajabahu",
    "Ganak",
    "Ganaka",
    "Ganapati",
    "Gandharv",
    "Gandharva",
    "Ganesh",
    "Gangesh",
    "Garud",
    "Garuda",
    "Gati",
    "Gatik",
    "Gaurang",
    "Gauraang",
    "Gauranga",
    "Gouranga",
    "Gautam",
    "Gautama",
    "Goutam",
    "Ghanaanand",
    "Ghanshyam",
    "Ghanashyam",
    "Giri",
    "Girik",
    "Girika",
    "Girindra",
    "Giriraaj",
    "Giriraj",
    "Girish",
    "Gopal",
    "Gopaal",
    "Gopi",
    "Gopee",
    "Gorakhnath",
    "Gorakhanatha",
    "Goswamee",
    "Goswami",
    "Gotum",
    "Gautam",
    "Govinda",
    "Gobinda",
    "Gudakesha",
    "Gudakesa",
    "Gurdev",
    "Guru",
    "Hari",
    "Harinarayan",
    "Harit",
    "Himadri",
    "Hiranmay",
    "Hiranmaya",
    "Hiranya",
    "Inder",
    "Indra",
    "Indra",
    "Jagadish",
    "Jagadisha",
    "Jagathi",
    "Jagdeep",
    "Jagdish",
    "Jagmeet",
    "Jahnu",
    "Jai",
    "Javas",
    "Jay",
    "Jitendra",
    "Jitender",
    "Jyotis",
    "Kailash",
    "Kama",
    "Kamalesh",
    "Kamlesh",
    "Kanak",
    "Kanaka",
    "Kannan",
    "Kannen",
    "Karan",
    "Karthik",
    "Kartik",
    "Karunanidhi",
    "Kashyap",
    "Kiran",
    "Kirti",
    "Keerti",
    "Krishna",
    "Krishnadas",
    "Krishnadasa",
    "Kumar",
    "Lai",
    "Lakshman",
    "Laxman",
    "Lakshmidhar",
    "Lakshminath",
    "Lal",
    "Laal",
    "Mahendra",
    "Mohinder",
    "Mahesh",
    "Maheswar",
    "Mani",
    "Manik",
    "Manikya",
    "Manoj",
    "Marut",
    "Mayoor",
    "Meghnad",
    "Meghnath",
    "Mohan",
    "Mukesh",
    "Mukul",
    "Nagabhushanam",
    "Nanda",
    "Narayan",
    "Narendra",
    "Narinder",
    "Naveen",
    "Navin",
    "Nawal",
    "Naval",
    "Nimit",
    "Niranjan",
    "Nirbhay",
    "Niro",
    "Param",
    "Paramartha",
    "Pran",
    "Pranay",
    "Prasad",
    "Prathamesh",
    "Prayag",
    "Prem",
    "Puneet",
    "Purushottam",
    "Rahul",
    "Raj",
    "Rajan",
    "Rajendra",
    "Rajinder",
    "Rajiv",
    "Rakesh",
    "Ramesh",
    "Rameshwar",
    "Ranjit",
    "Ranjeet",
    "Ravi",
    "Ritesh",
    "Rohan",
    "Rohit",
    "Rudra",
    "Sachin",
    "Sameer",
    "Samir",
    "Sanjay",
    "Sanka",
    "Sarvin",
    "Satish",
    "Satyen",
    "Shankar",
    "Shantanu",
    "Shashi",
    "Sher",
    "Shiv",
    "Siddarth",
    "Siddhran",
    "Som",
    "Somu",
    "Somnath",
    "Subhash",
    "Subodh",
    "Suman",
    "Suresh",
    "Surya",
    "Suryakant",
    "Suryakanta",
    "Sushil",
    "Susheel",
    "Swami",
    "Swapnil",
    "Tapan",
    "Tara",
    "Tarun",
    "Tej",
    "Tejas",
    "Trilochan",
    "Trilochana",
    "Trilok",
    "Trilokesh",
    "Triloki",
    "Triloki Nath",
    "Trilokanath",
    "Tushar",
    "Udai",
    "Udit",
    "Ujjawal",
    "Ujjwal",
    "Umang",
    "Upendra",
    "Uttam",
    "Vasudev",
    "Vasudeva",
    "Vedang",
    "Vedanga",
    "Vidhya",
    "Vidur",
    "Vidhur",
    "Vijay",
    "Vimal",
    "Vinay",
    "Vishnu",
    "Bishnu",
    "Vishwamitra",
    "Vyas",
    "Yogendra",
    "Yoginder",
    "Yogesh"
  ],
  "last_name": [
    "Abbott",
    "Achari",
    "Acharya",
    "Adiga",
    "Agarwal",
    "Ahluwalia",
    "Ahuja",
    "Arora",
    "Asan",
    "Bandopadhyay",
    "Banerjee",
    "Bharadwaj",
    "Bhat",
    "Butt",
    "Bhattacharya",
    "Bhattathiri",
    "Chaturvedi",
    "Chattopadhyay",
    "Chopra",
    "Desai",
    "Deshpande",
    "Devar",
    "Dhawan",
    "Dubashi",
    "Dutta",
    "Dwivedi",
    "Embranthiri",
    "Ganaka",
    "Gandhi",
    "Gill",
    "Gowda",
    "Guha",
    "Guneta",
    "Gupta",
    "Iyer",
    "Iyengar",
    "Jain",
    "Jha",
    "Johar",
    "Joshi",
    "Kakkar",
    "Kaniyar",
    "Kapoor",
    "Kaul",
    "Kaur",
    "Khan",
    "Khanna",
    "Khatri",
    "Kocchar",
    "Mahajan",
    "Malik",
    "Marar",
    "Menon",
    "Mehra",
    "Mehrotra",
    "Mishra",
    "Mukhopadhyay",
    "Nayar",
    "Naik",
    "Nair",
    "Nambeesan",
    "Namboothiri",
    "Nehru",
    "Pandey",
    "Panicker",
    "Patel",
    "Patil",
    "Pilla",
    "Pillai",
    "Pothuvaal",
    "Prajapat",
    "Rana",
    "Reddy",
    "Saini",
    "Sethi",
    "Shah",
    "Sharma",
    "Shukla",
    "Singh",
    "Sinha",
    "Somayaji",
    "Tagore",
    "Talwar",
    "Tandon",
    "Trivedi",
    "Varrier",
    "Varma",
    "Varman",
    "Verma"
  ]
};
en_IND.address = {
  "postcode": [
    "?#? #?#"
  ],
  "state": [
    "Andra Pradesh",
    "Arunachal Pradesh",
    "Assam",
    "Bihar",
    "Chhattisgarh",
    "Goa",
    "Gujarat",
    "Haryana",
    "Himachal Pradesh",
    "Jammu and Kashmir",
    "Jharkhand",
    "Karnataka",
    "Kerala",
    "Madya Pradesh",
    "Maharashtra",
    "Manipur",
    "Meghalaya",
    "Mizoram",
    "Nagaland",
    "Orissa",
    "Punjab",
    "Rajasthan",
    "Sikkim",
    "Tamil Nadu",
    "Tripura",
    "Uttaranchal",
    "Uttar Pradesh",
    "West Bengal",
    "Andaman and Nicobar Islands",
    "Chandigarh",
    "Dadar and Nagar Haveli",
    "Daman and Diu",
    "Delhi",
    "Lakshadweep",
    "Pondicherry"
  ],
  "state_abbr": [
    "AP",
    "AR",
    "AS",
    "BR",
    "CG",
    "DL",
    "GA",
    "GJ",
    "HR",
    "HP",
    "JK",
    "JS",
    "KA",
    "KL",
    "MP",
    "MH",
    "MN",
    "ML",
    "MZ",
    "NL",
    "OR",
    "PB",
    "RJ",
    "SK",
    "TN",
    "TR",
    "UK",
    "UP",
    "WB",
    "AN",
    "CH",
    "DN",
    "DD",
    "LD",
    "PY"
  ],
  "default_country": [
    "India",
    "Indian Republic",
    "Bharat",
    "Hindustan"
  ]
};
en_IND.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.co.in",
    "hotmail.com"
  ],
  "domain_suffix": [
    "in",
    "com",
    "biz",
    "info",
    "name",
    "net",
    "org",
    "co.in"
  ]
};
en_IND.company = {
  "suffix": [
    "Pvt Ltd",
    "Limited",
    "Ltd",
    "and Sons",
    "Corp",
    "Group",
    "Brothers"
  ]
};
en_IND.phone_number = {
  "formats": [
    "+91###-###-####",
    "+91##########",
    "+91-###-#######"
  ]
};

},{}],63:[function(require,module,exports){
var en_US = {};
module["exports"] = en_US;
en_US.title = "United States (English)";
en_US.internet = {
  "domain_suffix": [
    "com",
    "us",
    "biz",
    "info",
    "name",
    "net",
    "org"
  ]
};
en_US.address = {
  "default_country": [
    "United States",
    "United States of America",
    "USA"
  ],
  "postcode_by_state": {
    "AL": "350##",
    "AK": "995##",
    "AS": "967##",
    "AZ": "850##",
    "AR": "717##",
    "CA": "900##",
    "CO": "800##",
    "CT": "061##",
    "DC": "204##",
    "DE": "198##",
    "FL": "322##",
    "GA": "301##",
    "HI": "967##",
    "ID": "832##",
    "IL": "600##",
    "IN": "463##",
    "IA": "510##",
    "KS": "666##",
    "KY": "404##",
    "LA": "701##",
    "ME": "042##",
    "MD": "210##",
    "MA": "026##",
    "MI": "480##",
    "MN": "555##",
    "MS": "387##",
    "MO": "650##",
    "MT": "590##",
    "NE": "688##",
    "NV": "898##",
    "NH": "036##",
    "NJ": "076##",
    "NM": "880##",
    "NY": "122##",
    "NC": "288##",
    "ND": "586##",
    "OH": "444##",
    "OK": "730##",
    "OR": "979##",
    "PA": "186##",
    "RI": "029##",
    "SC": "299##",
    "SD": "577##",
    "TN": "383##",
    "TX": "798##",
    "UT": "847##",
    "VT": "050##",
    "VA": "222##",
    "WA": "990##",
    "WV": "247##",
    "WI": "549##",
    "WY": "831##"
  }
};
en_US.phone_number = {
  "area_code": [
    "201",
    "202",
    "203",
    "205",
    "206",
    "207",
    "208",
    "209",
    "210",
    "212",
    "213",
    "214",
    "215",
    "216",
    "217",
    "218",
    "219",
    "224",
    "225",
    "227",
    "228",
    "229",
    "231",
    "234",
    "239",
    "240",
    "248",
    "251",
    "252",
    "253",
    "254",
    "256",
    "260",
    "262",
    "267",
    "269",
    "270",
    "276",
    "281",
    "283",
    "301",
    "302",
    "303",
    "304",
    "305",
    "307",
    "308",
    "309",
    "310",
    "312",
    "313",
    "314",
    "315",
    "316",
    "317",
    "318",
    "319",
    "320",
    "321",
    "323",
    "330",
    "331",
    "334",
    "336",
    "337",
    "339",
    "347",
    "351",
    "352",
    "360",
    "361",
    "386",
    "401",
    "402",
    "404",
    "405",
    "406",
    "407",
    "408",
    "409",
    "410",
    "412",
    "413",
    "414",
    "415",
    "417",
    "419",
    "423",
    "424",
    "425",
    "434",
    "435",
    "440",
    "443",
    "445",
    "464",
    "469",
    "470",
    "475",
    "478",
    "479",
    "480",
    "484",
    "501",
    "502",
    "503",
    "504",
    "505",
    "507",
    "508",
    "509",
    "510",
    "512",
    "513",
    "515",
    "516",
    "517",
    "518",
    "520",
    "530",
    "540",
    "541",
    "551",
    "557",
    "559",
    "561",
    "562",
    "563",
    "564",
    "567",
    "570",
    "571",
    "573",
    "574",
    "580",
    "585",
    "586",
    "601",
    "602",
    "603",
    "605",
    "606",
    "607",
    "608",
    "609",
    "610",
    "612",
    "614",
    "615",
    "616",
    "617",
    "618",
    "619",
    "620",
    "623",
    "626",
    "630",
    "631",
    "636",
    "641",
    "646",
    "650",
    "651",
    "660",
    "661",
    "662",
    "667",
    "678",
    "682",
    "701",
    "702",
    "703",
    "704",
    "706",
    "707",
    "708",
    "712",
    "713",
    "714",
    "715",
    "716",
    "717",
    "718",
    "719",
    "720",
    "724",
    "727",
    "731",
    "732",
    "734",
    "737",
    "740",
    "754",
    "757",
    "760",
    "763",
    "765",
    "770",
    "772",
    "773",
    "774",
    "775",
    "781",
    "785",
    "786",
    "801",
    "802",
    "803",
    "804",
    "805",
    "806",
    "808",
    "810",
    "812",
    "813",
    "814",
    "815",
    "816",
    "817",
    "818",
    "828",
    "830",
    "831",
    "832",
    "835",
    "843",
    "845",
    "847",
    "848",
    "850",
    "856",
    "857",
    "858",
    "859",
    "860",
    "862",
    "863",
    "864",
    "865",
    "870",
    "872",
    "878",
    "901",
    "903",
    "904",
    "906",
    "907",
    "908",
    "909",
    "910",
    "912",
    "913",
    "914",
    "915",
    "916",
    "917",
    "918",
    "919",
    "920",
    "925",
    "928",
    "931",
    "936",
    "937",
    "940",
    "941",
    "947",
    "949",
    "952",
    "954",
    "956",
    "959",
    "970",
    "971",
    "972",
    "973",
    "975",
    "978",
    "979",
    "980",
    "984",
    "985",
    "989"
  ],
  "exchange_code": [
    "201",
    "202",
    "203",
    "205",
    "206",
    "207",
    "208",
    "209",
    "210",
    "212",
    "213",
    "214",
    "215",
    "216",
    "217",
    "218",
    "219",
    "224",
    "225",
    "227",
    "228",
    "229",
    "231",
    "234",
    "239",
    "240",
    "248",
    "251",
    "252",
    "253",
    "254",
    "256",
    "260",
    "262",
    "267",
    "269",
    "270",
    "276",
    "281",
    "283",
    "301",
    "302",
    "303",
    "304",
    "305",
    "307",
    "308",
    "309",
    "310",
    "312",
    "313",
    "314",
    "315",
    "316",
    "317",
    "318",
    "319",
    "320",
    "321",
    "323",
    "330",
    "331",
    "334",
    "336",
    "337",
    "339",
    "347",
    "351",
    "352",
    "360",
    "361",
    "386",
    "401",
    "402",
    "404",
    "405",
    "406",
    "407",
    "408",
    "409",
    "410",
    "412",
    "413",
    "414",
    "415",
    "417",
    "419",
    "423",
    "424",
    "425",
    "434",
    "435",
    "440",
    "443",
    "445",
    "464",
    "469",
    "470",
    "475",
    "478",
    "479",
    "480",
    "484",
    "501",
    "502",
    "503",
    "504",
    "505",
    "507",
    "508",
    "509",
    "510",
    "512",
    "513",
    "515",
    "516",
    "517",
    "518",
    "520",
    "530",
    "540",
    "541",
    "551",
    "557",
    "559",
    "561",
    "562",
    "563",
    "564",
    "567",
    "570",
    "571",
    "573",
    "574",
    "580",
    "585",
    "586",
    "601",
    "602",
    "603",
    "605",
    "606",
    "607",
    "608",
    "609",
    "610",
    "612",
    "614",
    "615",
    "616",
    "617",
    "618",
    "619",
    "620",
    "623",
    "626",
    "630",
    "631",
    "636",
    "641",
    "646",
    "650",
    "651",
    "660",
    "661",
    "662",
    "667",
    "678",
    "682",
    "701",
    "702",
    "703",
    "704",
    "706",
    "707",
    "708",
    "712",
    "713",
    "714",
    "715",
    "716",
    "717",
    "718",
    "719",
    "720",
    "724",
    "727",
    "731",
    "732",
    "734",
    "737",
    "740",
    "754",
    "757",
    "760",
    "763",
    "765",
    "770",
    "772",
    "773",
    "774",
    "775",
    "781",
    "785",
    "786",
    "801",
    "802",
    "803",
    "804",
    "805",
    "806",
    "808",
    "810",
    "812",
    "813",
    "814",
    "815",
    "816",
    "817",
    "818",
    "828",
    "830",
    "831",
    "832",
    "835",
    "843",
    "845",
    "847",
    "848",
    "850",
    "856",
    "857",
    "858",
    "859",
    "860",
    "862",
    "863",
    "864",
    "865",
    "870",
    "872",
    "878",
    "901",
    "903",
    "904",
    "906",
    "907",
    "908",
    "909",
    "910",
    "912",
    "913",
    "914",
    "915",
    "916",
    "917",
    "918",
    "919",
    "920",
    "925",
    "928",
    "931",
    "936",
    "937",
    "940",
    "941",
    "947",
    "949",
    "952",
    "954",
    "956",
    "959",
    "970",
    "971",
    "972",
    "973",
    "975",
    "978",
    "979",
    "980",
    "984",
    "985",
    "989"
  ]
};

},{}],64:[function(require,module,exports){
var en_au_ocker = {};
module["exports"] = en_au_ocker;
en_au_ocker.title = "Australia Ocker (English)";
en_au_ocker.name = {
  "first_name": [
    "Charlotte",
    "Ava",
    "Chloe",
    "Emily",
    "Olivia",
    "Zoe",
    "Lily",
    "Sophie",
    "Amelia",
    "Sofia",
    "Ella",
    "Isabella",
    "Ruby",
    "Sienna",
    "Mia+3",
    "Grace",
    "Emma",
    "Ivy",
    "Layla",
    "Abigail",
    "Isla",
    "Hannah",
    "Zara",
    "Lucy",
    "Evie",
    "Annabelle",
    "Madison",
    "Alice",
    "Georgia",
    "Maya",
    "Madeline",
    "Audrey",
    "Scarlett",
    "Isabelle",
    "Chelsea",
    "Mila",
    "Holly",
    "Indiana",
    "Poppy",
    "Harper",
    "Sarah",
    "Alyssa",
    "Jasmine",
    "Imogen",
    "Hayley",
    "Pheobe",
    "Eva",
    "Evelyn",
    "Mackenzie",
    "Ayla",
    "Oliver",
    "Jack",
    "Jackson",
    "William",
    "Ethan",
    "Charlie",
    "Lucas",
    "Cooper",
    "Lachlan",
    "Noah",
    "Liam",
    "Alexander",
    "Max",
    "Isaac",
    "Thomas",
    "Xavier",
    "Oscar",
    "Benjamin",
    "Aiden",
    "Mason",
    "Samuel",
    "James",
    "Levi",
    "Riley",
    "Harrison",
    "Ryan",
    "Henry",
    "Jacob",
    "Joshua",
    "Leo",
    "Zach",
    "Harry",
    "Hunter",
    "Flynn",
    "Archie",
    "Tyler",
    "Elijah",
    "Hayden",
    "Jayden",
    "Blake",
    "Archer",
    "Ashton",
    "Sebastian",
    "Zachery",
    "Lincoln",
    "Mitchell",
    "Luca",
    "Nathan",
    "Kai",
    "Connor",
    "Tom",
    "Nigel",
    "Matt",
    "Sean"
  ],
  "last_name": [
    "Smith",
    "Jones",
    "Williams",
    "Brown",
    "Wilson",
    "Taylor",
    "Morton",
    "White",
    "Martin",
    "Anderson",
    "Thompson",
    "Nguyen",
    "Thomas",
    "Walker",
    "Harris",
    "Lee",
    "Ryan",
    "Robinson",
    "Kelly",
    "King",
    "Rausch",
    "Ridge",
    "Connolly",
    "LeQuesne"
  ],
  "ocker_first_name": [
    "Bazza",
    "Bluey",
    "Davo",
    "Johno",
    "Shano",
    "Shazza"
  ]
};
en_au_ocker.company = {
  "suffix": [
    "Pty Ltd",
    "and Sons",
    "Corp",
    "Group",
    "Brothers",
    "Partners"
  ]
};
en_au_ocker.internet = {
  "domain_suffix": [
    "com.au",
    "com",
    "net.au",
    "net",
    "org.au",
    "org"
  ]
};
en_au_ocker.address = {
  "street_root": [
    "Ramsay Street",
    "Bonnie Doon",
    "Cavill Avenue",
    "Queen Street"
  ],
  "street_name": [
    "#{street_root}"
  ],
  "city_prefix": [
    "Bondi",
    "Burleigh Heads",
    "Carlton",
    "Fitzroy",
    "Fremantle",
    "Glenelg",
    "Manly",
    "Noosa",
    "Stones Corner",
    "St Kilda",
    "Surry Hills",
    "Yarra Valley"
  ],
  "city": [
    "#{city_prefix}"
  ],
  "state_abbr": [
    "NSW",
    "QLD",
    "NT",
    "SA",
    "WA",
    "TAS",
    "ACT",
    "VIC"
  ],
  "region": [
    "South East Queensland",
    "Wide Bay Burnett",
    "Margaret River",
    "Port Pirie",
    "Gippsland",
    "Elizabeth",
    "Barossa"
  ],
  "state": [
    "New South Wales",
    "Queensland",
    "Northern Territory",
    "South Australia",
    "Western Australia",
    "Tasmania",
    "Australian Capital Territory",
    "Victoria"
  ],
  "postcode": [
    "0###",
    "2###",
    "3###",
    "4###",
    "5###",
    "6###",
    "7###"
  ],
  "building_number": [
    "####",
    "###",
    "##"
  ],
  "street_suffix": [
    "Avenue",
    "Boulevard",
    "Circle",
    "Circuit",
    "Court",
    "Crescent",
    "Crest",
    "Drive",
    "Estate Dr",
    "Grove",
    "Hill",
    "Island",
    "Junction",
    "Knoll",
    "Lane",
    "Loop",
    "Mall",
    "Manor",
    "Meadow",
    "Mews",
    "Parade",
    "Parkway",
    "Pass",
    "Place",
    "Plaza",
    "Ridge",
    "Road",
    "Run",
    "Square",
    "Station St",
    "Street",
    "Summit",
    "Terrace",
    "Track",
    "Trail",
    "View Rd",
    "Way"
  ],
  "default_country": [
    "Australia"
  ]
};
en_au_ocker.phone_number = {
  "formats": [
    "0# #### ####",
    "+61 # #### ####",
    "04## ### ###",
    "+61 4## ### ###"
  ]
};

},{}],65:[function(require,module,exports){
var es = {};
module["exports"] = es;
es.title = "Spanish";
es.address = {
  "city_prefix": [
    "Parla",
    "Telde",
    "Baracaldo",
    "San Fernando",
    "Torrevieja",
    "Lugo",
    "Santiago de Compostela",
    "Gerona",
    "Cáceres",
    "Lorca",
    "Coslada",
    "Talavera de la Reina",
    "El Puerto de Santa María",
    "Cornellá de Llobregat",
    "Avilés",
    "Palencia",
    "Gecho",
    "Orihuela",
    "Pontevedra",
    "Pozuelo de Alarcón",
    "Toledo",
    "El Ejido",
    "Guadalajara",
    "Gandía",
    "Ceuta",
    "Ferrol",
    "Chiclana de la Frontera",
    "Manresa",
    "Roquetas de Mar",
    "Ciudad Real",
    "Rubí",
    "Benidorm",
    "San Sebastían de los Reyes",
    "Ponferrada",
    "Zamora",
    "Alcalá de Guadaira",
    "Fuengirola",
    "Mijas",
    "Sanlúcar de Barrameda",
    "La Línea de la Concepción",
    "Majadahonda",
    "Sagunto",
    "El Prat de LLobregat",
    "Viladecans",
    "Linares",
    "Alcoy",
    "Irún",
    "Estepona",
    "Torremolinos",
    "Rivas-Vaciamadrid",
    "Molina de Segura",
    "Paterna",
    "Granollers",
    "Santa Lucía de Tirajana",
    "Motril",
    "Cerdañola del Vallés",
    "Arrecife",
    "Segovia",
    "Torrelavega",
    "Elda",
    "Mérida",
    "Ávila",
    "Valdemoro",
    "Cuenta",
    "Collado Villalba",
    "Benalmádena",
    "Mollet del Vallés",
    "Puertollano",
    "Madrid",
    "Barcelona",
    "Valencia",
    "Sevilla",
    "Zaragoza",
    "Málaga",
    "Murcia",
    "Palma de Mallorca",
    "Las Palmas de Gran Canaria",
    "Bilbao",
    "Córdoba",
    "Alicante",
    "Valladolid",
    "Vigo",
    "Gijón",
    "Hospitalet de LLobregat",
    "La Coruña",
    "Granada",
    "Vitoria",
    "Elche",
    "Santa Cruz de Tenerife",
    "Oviedo",
    "Badalona",
    "Cartagena",
    "Móstoles",
    "Jerez de la Frontera",
    "Tarrasa",
    "Sabadell",
    "Alcalá de Henares",
    "Pamplona",
    "Fuenlabrada",
    "Almería",
    "San Sebastián",
    "Leganés",
    "Santander",
    "Burgos",
    "Castellón de la Plana",
    "Alcorcón",
    "Albacete",
    "Getafe",
    "Salamanca",
    "Huelva",
    "Logroño",
    "Badajoz",
    "San Cristróbal de la Laguna",
    "León",
    "Tarragona",
    "Cádiz",
    "Lérida",
    "Marbella",
    "Mataró",
    "Dos Hermanas",
    "Santa Coloma de Gramanet",
    "Jaén",
    "Algeciras",
    "Torrejón de Ardoz",
    "Orense",
    "Alcobendas",
    "Reus",
    "Calahorra",
    "Inca"
  ],
  "country": [
    "Afganistán",
    "Albania",
    "Argelia",
    "Andorra",
    "Angola",
    "Argentina",
    "Armenia",
    "Aruba",
    "Australia",
    "Austria",
    "Azerbayán",
    "Bahamas",
    "Barein",
    "Bangladesh",
    "Barbados",
    "Bielorusia",
    "Bélgica",
    "Belice",
    "Bermuda",
    "Bután",
    "Bolivia",
    "Bosnia Herzegovina",
    "Botswana",
    "Brasil",
    "Bulgaria",
    "Burkina Faso",
    "Burundi",
    "Camboya",
    "Camerún",
    "Canada",
    "Cabo Verde",
    "Islas Caimán",
    "Chad",
    "Chile",
    "China",
    "Isla de Navidad",
    "Colombia",
    "Comodos",
    "Congo",
    "Costa Rica",
    "Costa de Marfil",
    "Croacia",
    "Cuba",
    "Chipre",
    "República Checa",
    "Dinamarca",
    "Dominica",
    "República Dominicana",
    "Ecuador",
    "Egipto",
    "El Salvador",
    "Guinea Ecuatorial",
    "Eritrea",
    "Estonia",
    "Etiopía",
    "Islas Faro",
    "Fiji",
    "Finlandia",
    "Francia",
    "Gabón",
    "Gambia",
    "Georgia",
    "Alemania",
    "Ghana",
    "Grecia",
    "Groenlandia",
    "Granada",
    "Guadalupe",
    "Guam",
    "Guatemala",
    "Guinea",
    "Guinea-Bisau",
    "Guayana",
    "Haiti",
    "Honduras",
    "Hong Kong",
    "Hungria",
    "Islandia",
    "India",
    "Indonesia",
    "Iran",
    "Irak",
    "Irlanda",
    "Italia",
    "Jamaica",
    "Japón",
    "Jordania",
    "Kazajistan",
    "Kenia",
    "Kiribati",
    "Corea",
    "Kuwait",
    "Letonia",
    "Líbano",
    "Liberia",
    "Liechtenstein",
    "Lituania",
    "Luxemburgo",
    "Macao",
    "Macedonia",
    "Madagascar",
    "Malawi",
    "Malasia",
    "Maldivas",
    "Mali",
    "Malta",
    "Martinica",
    "Mauritania",
    "Méjico",
    "Micronesia",
    "Moldavia",
    "Mónaco",
    "Mongolia",
    "Montenegro",
    "Montserrat",
    "Marruecos",
    "Mozambique",
    "Namibia",
    "Nauru",
    "Nepal",
    "Holanda",
    "Nueva Zelanda",
    "Nicaragua",
    "Niger",
    "Nigeria",
    "Noruega",
    "Omán",
    "Pakistan",
    "Panamá",
    "Papúa Nueva Guinea",
    "Paraguay",
    "Perú",
    "Filipinas",
    "Poland",
    "Portugal",
    "Puerto Rico",
    "Rusia",
    "Ruanda",
    "Samoa",
    "San Marino",
    "Santo Tomé y Principe",
    "Arabia Saudí",
    "Senegal",
    "Serbia",
    "Seychelles",
    "Sierra Leona",
    "Singapur",
    "Eslovaquia",
    "Eslovenia",
    "Somalia",
    "España",
    "Sri Lanka",
    "Sudán",
    "Suriname",
    "Suecia",
    "Suiza",
    "Siria",
    "Taiwan",
    "Tajikistan",
    "Tanzania",
    "Tailandia",
    "Timor-Leste",
    "Togo",
    "Tonga",
    "Trinidad y Tobago",
    "Tunez",
    "Turquia",
    "Uganda",
    "Ucrania",
    "Emiratos Árabes Unidos",
    "Reino Unido",
    "Estados Unidos de América",
    "Uruguay",
    "Uzbekistan",
    "Vanuatu",
    "Venezuela",
    "Vietnam",
    "Yemen",
    "Zambia",
    "Zimbabwe"
  ],
  "building_number": [
    " s/n.",
    ", #",
    ", ##",
    " #",
    " ##"
  ],
  "street_suffix": [
    "Aldea",
    "Apartamento",
    "Arrabal",
    "Arroyo",
    "Avenida",
    "Bajada",
    "Barranco",
    "Barrio",
    "Bloque",
    "Calle",
    "Calleja",
    "Camino",
    "Carretera",
    "Caserio",
    "Colegio",
    "Colonia",
    "Conjunto",
    "Cuesta",
    "Chalet",
    "Edificio",
    "Entrada",
    "Escalinata",
    "Explanada",
    "Extramuros",
    "Extrarradio",
    "Ferrocarril",
    "Glorieta",
    "Gran Subida",
    "Grupo",
    "Huerta",
    "Jardines",
    "Lado",
    "Lugar",
    "Manzana",
    "Masía",
    "Mercado",
    "Monte",
    "Muelle",
    "Municipio",
    "Parcela",
    "Parque",
    "Partida",
    "Pasaje",
    "Paseo",
    "Plaza",
    "Poblado",
    "Polígono",
    "Prolongación",
    "Puente",
    "Puerta",
    "Quinta",
    "Ramal",
    "Rambla",
    "Rampa",
    "Riera",
    "Rincón",
    "Ronda",
    "Rua",
    "Salida",
    "Sector",
    "Sección",
    "Senda",
    "Solar",
    "Subida",
    "Terrenos",
    "Torrente",
    "Travesía",
    "Urbanización",
    "Vía",
    "Vía Pública"
  ],
  "secondary_address": [
    "Esc. ###",
    "Puerta ###"
  ],
  "postcode": [
    "#####"
  ],
  "province": [
    "Álava",
    "Albacete",
    "Alicante",
    "Almería",
    "Asturias",
    "Ávila",
    "Badajoz",
    "Barcelona",
    "Burgos",
    "Cantabria",
    "Castellón",
    "Ciudad Real",
    "Cuenca",
    "Cáceres",
    "Cádiz",
    "Córdoba",
    "Gerona",
    "Granada",
    "Guadalajara",
    "Guipúzcoa",
    "Huelva",
    "Huesca",
    "Islas Baleares",
    "Jaén",
    "La Coruña",
    "La Rioja",
    "Las Palmas",
    "León",
    "Lugo",
    "lérida",
    "Madrid",
    "Murcia",
    "Málaga",
    "Navarra",
    "Orense",
    "Palencia",
    "Pontevedra",
    "Salamanca",
    "Santa Cruz de Tenerife",
    "Segovia",
    "Sevilla",
    "Soria",
    "Tarragona",
    "Teruel",
    "Toledo",
    "Valencia",
    "Valladolid",
    "Vizcaya",
    "Zamora",
    "Zaragoza"
  ],
  "state": [
    "Andalucía",
    "Aragón",
    "Principado de Asturias",
    "Baleares",
    "Canarias",
    "Cantabria",
    "Castilla-La Mancha",
    "Castilla y León",
    "Cataluña",
    "Comunidad Valenciana",
    "Extremadura",
    "Galicia",
    "La Rioja",
    "Comunidad de Madrid",
    "Navarra",
    "País Vasco",
    "Región de Murcia"
  ],
  "state_abbr": [
    "And",
    "Ara",
    "Ast",
    "Bal",
    "Can",
    "Cbr",
    "Man",
    "Leo",
    "Cat",
    "Com",
    "Ext",
    "Gal",
    "Rio",
    "Mad",
    "Nav",
    "Vas",
    "Mur"
  ],
  "time_zone": [
    "Pacífico/Midway",
    "Pacífico/Pago_Pago",
    "Pacífico/Honolulu",
    "America/Juneau",
    "America/Los_Angeles",
    "America/Tijuana",
    "America/Denver",
    "America/Phoenix",
    "America/Chihuahua",
    "America/Mazatlan",
    "America/Chicago",
    "America/Regina",
    "America/Mexico_City",
    "America/Mexico_City",
    "America/Monterrey",
    "America/Guatemala",
    "America/New_York",
    "America/Indiana/Indianapolis",
    "America/Bogota",
    "America/Lima",
    "America/Lima",
    "America/Halifax",
    "America/Caracas",
    "America/La_Paz",
    "America/Santiago",
    "America/St_Johns",
    "America/Sao_Paulo",
    "America/Argentina/Buenos_Aires",
    "America/Guyana",
    "America/Godthab",
    "Atlantic/South_Georgia",
    "Atlantic/Azores",
    "Atlantic/Cape_Verde",
    "Europa/Dublin",
    "Europa/London",
    "Europa/Lisbon",
    "Europa/London",
    "Africa/Casablanca",
    "Africa/Monrovia",
    "Etc/UTC",
    "Europa/Belgrade",
    "Europa/Bratislava",
    "Europa/Budapest",
    "Europa/Ljubljana",
    "Europa/Prague",
    "Europa/Sarajevo",
    "Europa/Skopje",
    "Europa/Warsaw",
    "Europa/Zagreb",
    "Europa/Brussels",
    "Europa/Copenhagen",
    "Europa/Madrid",
    "Europa/Paris",
    "Europa/Amsterdam",
    "Europa/Berlin",
    "Europa/Berlin",
    "Europa/Rome",
    "Europa/Stockholm",
    "Europa/Vienna",
    "Africa/Algiers",
    "Europa/Bucharest",
    "Africa/Cairo",
    "Europa/Helsinki",
    "Europa/Kiev",
    "Europa/Riga",
    "Europa/Sofia",
    "Europa/Tallinn",
    "Europa/Vilnius",
    "Europa/Athens",
    "Europa/Istanbul",
    "Europa/Minsk",
    "Asia/Jerusalen",
    "Africa/Harare",
    "Africa/Johannesburg",
    "Europa/Moscú",
    "Europa/Moscú",
    "Europa/Moscú",
    "Asia/Kuwait",
    "Asia/Riyadh",
    "Africa/Nairobi",
    "Asia/Baghdad",
    "Asia/Tehran",
    "Asia/Muscat",
    "Asia/Muscat",
    "Asia/Baku",
    "Asia/Tbilisi",
    "Asia/Yerevan",
    "Asia/Kabul",
    "Asia/Yekaterinburg",
    "Asia/Karachi",
    "Asia/Karachi",
    "Asia/Tashkent",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kathmandu",
    "Asia/Dhaka",
    "Asia/Dhaka",
    "Asia/Colombo",
    "Asia/Almaty",
    "Asia/Novosibirsk",
    "Asia/Rangoon",
    "Asia/Bangkok",
    "Asia/Bangkok",
    "Asia/Jakarta",
    "Asia/Krasnoyarsk",
    "Asia/Shanghai",
    "Asia/Chongqing",
    "Asia/Hong_Kong",
    "Asia/Urumqi",
    "Asia/Kuala_Lumpur",
    "Asia/Singapore",
    "Asia/Taipei",
    "Australia/Perth",
    "Asia/Irkutsk",
    "Asia/Ulaanbaatar",
    "Asia/Seoul",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Yakutsk",
    "Australia/Darwin",
    "Australia/Adelaide",
    "Australia/Melbourne",
    "Australia/Melbourne",
    "Australia/Sydney",
    "Australia/Brisbane",
    "Australia/Hobart",
    "Asia/Vladivostok",
    "Pacífico/Guam",
    "Pacífico/Port_Moresby",
    "Asia/Magadan",
    "Asia/Magadan",
    "Pacífico/Noumea",
    "Pacífico/Fiji",
    "Asia/Kamchatka",
    "Pacífico/Majuro",
    "Pacífico/Auckland",
    "Pacífico/Auckland",
    "Pacífico/Tongatapu",
    "Pacífico/Fakaofo",
    "Pacífico/Apia"
  ],
  "city": [
    "#{city_prefix}"
  ],
  "street_name": [
    "#{street_suffix} #{Name.first_name}",
    "#{street_suffix} #{Name.first_name} #{Name.last_name}"
  ],
  "street_address": [
    "#{street_name}#{building_number}",
    "#{street_name}#{building_number} #{secondary_address}"
  ],
  "default_country": [
    "España"
  ]
};
es.company = {
  "suffix": [
    "S.L.",
    "e Hijos",
    "S.A.",
    "Hermanos"
  ],
  "noun": [
      "habilidad",
      "acceso",
      "adaptador",
      "algoritmo",
      "alianza",
      "analista",
      "aplicación",
      "enfoque",
      "arquitectura",
      "archivo",
      "inteligencia artificial",
      "array",
      "actitud",
      "medición",
      "gestión presupuestaria",
      "capacidad",
      "desafío",
      "circuito",
      "colaboración",
      "complejidad",
      "concepto",
      "conglomeración",
      "contingencia",
      "núcleo",
      "fidelidad",
      "base de datos",
      "data-warehouse",
      "definición",
      "emulación",
      "codificar",
      "encriptar",
      "extranet",
      "firmware",
      "flexibilidad",
      "focus group",
      "previsión",
      "base de trabajo",
      "función",
      "funcionalidad",
      "Interfaz Gráfica",
      "groupware",
      "Interfaz gráfico de usuario",
      "hardware",
      "Soporte",
      "jerarquía",
      "conjunto",
      "implementación",
      "infraestructura",
      "iniciativa",
      "instalación",
      "conjunto de instrucciones",
      "interfaz",
      "intranet",
      "base del conocimiento",
      "red de area local",
      "aprovechar",
      "matrices",
      "metodologías",
      "middleware",
      "migración",
      "modelo",
      "moderador",
      "monitorizar",
      "arquitectura abierta",
      "sistema abierto",
      "orquestar",
      "paradigma",
      "paralelismo",
      "política",
      "portal",
      "estructura de precios",
      "proceso de mejora",
      "producto",
      "productividad",
      "proyecto",
      "proyección",
      "protocolo",
      "línea segura",
      "software",
      "solución",
      "estandardización",
      "estrategia",
      "estructura",
      "éxito",
      "superestructura",
      "soporte",
      "sinergia",
      "mediante",
      "marco de tiempo",
      "caja de herramientas",
      "utilización",
      "website",
      "fuerza de trabajo"
    ],
    "descriptor": [
      "24 horas",
      "24/7",
      "3rd generación",
      "4th generación",
      "5th generación",
      "6th generación",
      "analizada",
      "asimétrica",
      "asíncrona",
      "monitorizada por red",
      "bidireccional",
      "bifurcada",
      "generada por el cliente",
      "cliente servidor",
      "coherente",
      "cohesiva",
      "compuesto",
      "sensible al contexto",
      "basado en el contexto",
      "basado en contenido",
      "dedicada",
      "generado por la demanda",
      "didactica",
      "direccional",
      "discreta",
      "dinámica",
      "potenciada",
      "acompasada",
      "ejecutiva",
      "explícita",
      "tolerante a fallos",
      "innovadora",
      "amplio ábanico",
      "global",
      "heurística",
      "alto nivel",
      "holística",
      "homogénea",
      "hibrida",
      "incremental",
      "intangible",
      "interactiva",
      "intermedia",
      "local",
      "logística",
      "maximizada",
      "metódica",
      "misión crítica",
      "móbil",
      "modular",
      "motivadora",
      "multimedia",
      "multiestado",
      "multitarea",
      "nacional",
      "basado en necesidades",
      "neutral",
      "nueva generación",
      "no-volátil",
      "orientado a objetos",
      "óptima",
      "optimizada",
      "radical",
      "tiempo real",
      "recíproca",
      "regional",
      "escalable",
      "secundaria",
      "orientada a soluciones",
      "estable",
      "estatica",
      "sistemática",
      "sistémica",
      "tangible",
      "terciaria",
      "transicional",
      "uniforme",
      "valor añadido",
      "vía web",
      "defectos cero",
      "tolerancia cero"
    ],
    "adjective": [
      "Adaptativo",
      "Avanzado",
      "Asimilado",
      "Automatizado",
      "Equilibrado",
      "Centrado en el negocio",
      "Centralizado",
      "Clonado",
      "Compatible",
      "Configurable",
      "Multi grupo",
      "Multi plataforma",
      "Centrado en el usuario",
      "Configurable",
      "Descentralizado",
      "Digitalizado",
      "Distribuido",
      "Diverso",
      "Reducido",
      "Mejorado",
      "Para toda la empresa",
      "Ergonomico",
      "Exclusivo",
      "Expandido",
      "Extendido",
      "Cara a cara",
      "Enfocado",
      "Totalmente configurable",
      "Fundamental",
      "Orígenes",
      "Horizontal",
      "Implementado",
      "Innovador",
      "Integrado",
      "Intuitivo",
      "Inverso",
      "Gestionado",
      "Obligatorio",
      "Monitorizado",
      "Multi canal",
      "Multi lateral",
      "Multi capa",
      "En red",
      "Orientado a objetos",
      "Open-source",
      "Operativo",
      "Optimizado",
      "Opcional",
      "Organico",
      "Organizado",
      "Perseverando",
      "Persistente",
      "en fases",
      "Polarizado",
      "Pre-emptivo",
      "Proactivo",
      "Enfocado a benficios",
      "Profundo",
      "Programable",
      "Progresivo",
      "Public-key",
      "Enfocado en la calidad",
      "Reactivo",
      "Realineado",
      "Re-contextualizado",
      "Re-implementado",
      "Reducido",
      "Ingenieria inversa",
      "Robusto",
      "Fácil",
      "Seguro",
      "Auto proporciona",
      "Compartible",
      "Intercambiable",
      "Sincronizado",
      "Orientado a equipos",
      "Total",
      "Universal",
      "Mejorado",
      "Actualizable",
      "Centrado en el usuario",
      "Amigable",
      "Versatil",
      "Virtual",
      "Visionario"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name} y #{Name.last_name}",
    "#{Name.last_name} #{Name.last_name} #{suffix}",
    "#{Name.last_name}, #{Name.last_name} y #{Name.last_name} Asociados"
  ]
};
es.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ],
  "domain_suffix": [
    "com",
    "es",
    "info",
    "com.es",
    "org"
  ]
};
es.name = {
  "first_name": [
    "Adán",
    "Agustín",
    "Alberto",
    "Alejandro",
    "Alfonso",
    "Alfredo",
    "Andrés",
    "Antonio",
    "Armando",
    "Arturo",
    "Benito",
    "Benjamín",
    "Bernardo",
    "Carlos",
    "César",
    "Claudio",
    "Clemente",
    "Cristian",
    "Cristobal",
    "Daniel",
    "David",
    "Diego",
    "Eduardo",
    "Emilio",
    "Enrique",
    "Ernesto",
    "Esteban",
    "Federico",
    "Felipe",
    "Fernando",
    "Francisco",
    "Gabriel",
    "Gerardo",
    "Germán",
    "Gilberto",
    "Gonzalo",
    "Gregorio",
    "Guillermo",
    "Gustavo",
    "Hernán",
    "Homero",
    "Horacio",
    "Hugo",
    "Ignacio",
    "Jacobo",
    "Jaime",
    "Javier",
    "Jerónimo",
    "Jesús",
    "Joaquín",
    "Jorge",
    "Jorge Luis",
    "José",
    "José Eduardo",
    "José Emilio",
    "José Luis",
    "José María",
    "Juan",
    "Juan Carlos",
    "Julio",
    "Julio César",
    "Lorenzo",
    "Lucas",
    "Luis",
    "Luis Miguel",
    "Manuel",
    "Marco Antonio",
    "Marcos",
    "Mariano",
    "Mario",
    "Martín",
    "Mateo",
    "Miguel",
    "Miguel Ángel",
    "Nicolás",
    "Octavio",
    "Óscar",
    "Pablo",
    "Patricio",
    "Pedro",
    "Rafael",
    "Ramiro",
    "Ramón",
    "Raúl",
    "Ricardo",
    "Roberto",
    "Rodrigo",
    "Rubén",
    "Salvador",
    "Samuel",
    "Sancho",
    "Santiago",
    "Sergio",
    "Teodoro",
    "Timoteo",
    "Tomás",
    "Vicente",
    "Víctor",
    "Adela",
    "Adriana",
    "Alejandra",
    "Alicia",
    "Amalia",
    "Ana",
    "Ana Luisa",
    "Ana María",
    "Andrea",
    "Anita",
    "Ángela",
    "Antonia",
    "Ariadna",
    "Barbara",
    "Beatriz",
    "Berta",
    "Blanca",
    "Caridad",
    "Carla",
    "Carlota",
    "Carmen",
    "Carolina",
    "Catalina",
    "Cecilia",
    "Clara",
    "Claudia",
    "Concepción",
    "Conchita",
    "Cristina",
    "Daniela",
    "Débora",
    "Diana",
    "Dolores",
    "Lola",
    "Dorotea",
    "Elena",
    "Elisa",
    "Eloisa",
    "Elsa",
    "Elvira",
    "Emilia",
    "Esperanza",
    "Estela",
    "Ester",
    "Eva",
    "Florencia",
    "Francisca",
    "Gabriela",
    "Gloria",
    "Graciela",
    "Guadalupe",
    "Guillermina",
    "Inés",
    "Irene",
    "Isabel",
    "Isabela",
    "Josefina",
    "Juana",
    "Julia",
    "Laura",
    "Leonor",
    "Leticia",
    "Lilia",
    "Lorena",
    "Lourdes",
    "Lucia",
    "Luisa",
    "Luz",
    "Magdalena",
    "Manuela",
    "Marcela",
    "Margarita",
    "María",
    "María del Carmen",
    "María Cristina",
    "María Elena",
    "María Eugenia",
    "María José",
    "María Luisa",
    "María Soledad",
    "María Teresa",
    "Mariana",
    "Maricarmen",
    "Marilu",
    "Marisol",
    "Marta",
    "Mayte",
    "Mercedes",
    "Micaela",
    "Mónica",
    "Natalia",
    "Norma",
    "Olivia",
    "Patricia",
    "Pilar",
    "Ramona",
    "Raquel",
    "Rebeca",
    "Reina",
    "Rocio",
    "Rosa",
    "Rosalia",
    "Rosario",
    "Sara",
    "Silvia",
    "Sofia",
    "Soledad",
    "Sonia",
    "Susana",
    "Teresa",
    "Verónica",
    "Victoria",
    "Virginia",
    "Yolanda"
  ],
  "last_name": [
    "Abeyta",
    "Abrego",
    "Abreu",
    "Acevedo",
    "Acosta",
    "Acuña",
    "Adame",
    "Adorno",
    "Agosto",
    "Aguayo",
    "Águilar",
    "Aguilera",
    "Aguirre",
    "Alanis",
    "Alaniz",
    "Alarcón",
    "Alba",
    "Alcala",
    "Alcántar",
    "Alcaraz",
    "Alejandro",
    "Alemán",
    "Alfaro",
    "Alicea",
    "Almanza",
    "Almaraz",
    "Almonte",
    "Alonso",
    "Alonzo",
    "Altamirano",
    "Alva",
    "Alvarado",
    "Alvarez",
    "Amador",
    "Amaya",
    "Anaya",
    "Anguiano",
    "Angulo",
    "Aparicio",
    "Apodaca",
    "Aponte",
    "Aragón",
    "Araña",
    "Aranda",
    "Arce",
    "Archuleta",
    "Arellano",
    "Arenas",
    "Arevalo",
    "Arguello",
    "Arias",
    "Armas",
    "Armendáriz",
    "Armenta",
    "Armijo",
    "Arredondo",
    "Arreola",
    "Arriaga",
    "Arroyo",
    "Arteaga",
    "Atencio",
    "Ávalos",
    "Ávila",
    "Avilés",
    "Ayala",
    "Baca",
    "Badillo",
    "Báez",
    "Baeza",
    "Bahena",
    "Balderas",
    "Ballesteros",
    "Banda",
    "Bañuelos",
    "Barajas",
    "Barela",
    "Barragán",
    "Barraza",
    "Barrera",
    "Barreto",
    "Barrientos",
    "Barrios",
    "Batista",
    "Becerra",
    "Beltrán",
    "Benavides",
    "Benavídez",
    "Benítez",
    "Bermúdez",
    "Bernal",
    "Berríos",
    "Bétancourt",
    "Blanco",
    "Bonilla",
    "Borrego",
    "Botello",
    "Bravo",
    "Briones",
    "Briseño",
    "Brito",
    "Bueno",
    "Burgos",
    "Bustamante",
    "Bustos",
    "Caballero",
    "Cabán",
    "Cabrera",
    "Cadena",
    "Caldera",
    "Calderón",
    "Calvillo",
    "Camacho",
    "Camarillo",
    "Campos",
    "Canales",
    "Candelaria",
    "Cano",
    "Cantú",
    "Caraballo",
    "Carbajal",
    "Cardenas",
    "Cardona",
    "Carmona",
    "Carranza",
    "Carrasco",
    "Carrasquillo",
    "Carreón",
    "Carrera",
    "Carrero",
    "Carrillo",
    "Carrion",
    "Carvajal",
    "Casanova",
    "Casares",
    "Casárez",
    "Casas",
    "Casillas",
    "Castañeda",
    "Castellanos",
    "Castillo",
    "Castro",
    "Cavazos",
    "Cazares",
    "Ceballos",
    "Cedillo",
    "Ceja",
    "Centeno",
    "Cepeda",
    "Cerda",
    "Cervantes",
    "Cervántez",
    "Chacón",
    "Chapa",
    "Chavarría",
    "Chávez",
    "Cintrón",
    "Cisneros",
    "Collado",
    "Collazo",
    "Colón",
    "Colunga",
    "Concepción",
    "Contreras",
    "Cordero",
    "Córdova",
    "Cornejo",
    "Corona",
    "Coronado",
    "Corral",
    "Corrales",
    "Correa",
    "Cortés",
    "Cortez",
    "Cotto",
    "Covarrubias",
    "Crespo",
    "Cruz",
    "Cuellar",
    "Curiel",
    "Dávila",
    "de Anda",
    "de Jesús",
    "Delacrúz",
    "Delafuente",
    "Delagarza",
    "Delao",
    "Delapaz",
    "Delarosa",
    "Delatorre",
    "Deleón",
    "Delgadillo",
    "Delgado",
    "Delrío",
    "Delvalle",
    "Díaz",
    "Domínguez",
    "Domínquez",
    "Duarte",
    "Dueñas",
    "Duran",
    "Echevarría",
    "Elizondo",
    "Enríquez",
    "Escalante",
    "Escamilla",
    "Escobar",
    "Escobedo",
    "Esparza",
    "Espinal",
    "Espino",
    "Espinosa",
    "Espinoza",
    "Esquibel",
    "Esquivel",
    "Estévez",
    "Estrada",
    "Fajardo",
    "Farías",
    "Feliciano",
    "Fernández",
    "Ferrer",
    "Fierro",
    "Figueroa",
    "Flores",
    "Flórez",
    "Fonseca",
    "Franco",
    "Frías",
    "Fuentes",
    "Gaitán",
    "Galarza",
    "Galindo",
    "Gallardo",
    "Gallegos",
    "Galván",
    "Gálvez",
    "Gamboa",
    "Gamez",
    "Gaona",
    "Garay",
    "García",
    "Garibay",
    "Garica",
    "Garrido",
    "Garza",
    "Gastélum",
    "Gaytán",
    "Gil",
    "Girón",
    "Godínez",
    "Godoy",
    "Gómez",
    "Gonzales",
    "González",
    "Gollum",
    "Gracia",
    "Granado",
    "Granados",
    "Griego",
    "Grijalva",
    "Guajardo",
    "Guardado",
    "Guerra",
    "Guerrero",
    "Guevara",
    "Guillen",
    "Gurule",
    "Gutiérrez",
    "Guzmán",
    "Haro",
    "Henríquez",
    "Heredia",
    "Hernádez",
    "Hernandes",
    "Hernández",
    "Herrera",
    "Hidalgo",
    "Hinojosa",
    "Holguín",
    "Huerta",
    "Hurtado",
    "Ibarra",
    "Iglesias",
    "Irizarry",
    "Jaime",
    "Jaimes",
    "Jáquez",
    "Jaramillo",
    "Jasso",
    "Jiménez",
    "Jimínez",
    "Juárez",
    "Jurado",
    "Laboy",
    "Lara",
    "Laureano",
    "Leal",
    "Lebrón",
    "Ledesma",
    "Leiva",
    "Lemus",
    "León",
    "Lerma",
    "Leyva",
    "Limón",
    "Linares",
    "Lira",
    "Llamas",
    "Loera",
    "Lomeli",
    "Longoria",
    "López",
    "Lovato",
    "Loya",
    "Lozada",
    "Lozano",
    "Lucero",
    "Lucio",
    "Luevano",
    "Lugo",
    "Luna",
    "Macías",
    "Madera",
    "Madrid",
    "Madrigal",
    "Maestas",
    "Magaña",
    "Malave",
    "Maldonado",
    "Manzanares",
    "Mares",
    "Marín",
    "Márquez",
    "Marrero",
    "Marroquín",
    "Martínez",
    "Mascareñas",
    "Mata",
    "Mateo",
    "Matías",
    "Matos",
    "Maya",
    "Mayorga",
    "Medina",
    "Medrano",
    "Mejía",
    "Meléndez",
    "Melgar",
    "Mena",
    "Menchaca",
    "Méndez",
    "Mendoza",
    "Menéndez",
    "Meraz",
    "Mercado",
    "Merino",
    "Mesa",
    "Meza",
    "Miramontes",
    "Miranda",
    "Mireles",
    "Mojica",
    "Molina",
    "Mondragón",
    "Monroy",
    "Montalvo",
    "Montañez",
    "Montaño",
    "Montemayor",
    "Montenegro",
    "Montero",
    "Montes",
    "Montez",
    "Montoya",
    "Mora",
    "Morales",
    "Moreno",
    "Mota",
    "Moya",
    "Munguía",
    "Muñiz",
    "Muñoz",
    "Murillo",
    "Muro",
    "Nájera",
    "Naranjo",
    "Narváez",
    "Nava",
    "Navarrete",
    "Navarro",
    "Nazario",
    "Negrete",
    "Negrón",
    "Nevárez",
    "Nieto",
    "Nieves",
    "Niño",
    "Noriega",
    "Núñez",
    "Ocampo",
    "Ocasio",
    "Ochoa",
    "Ojeda",
    "Olivares",
    "Olivárez",
    "Olivas",
    "Olivera",
    "Olivo",
    "Olmos",
    "Olvera",
    "Ontiveros",
    "Oquendo",
    "Ordóñez",
    "Orellana",
    "Ornelas",
    "Orosco",
    "Orozco",
    "Orta",
    "Ortega",
    "Ortiz",
    "Osorio",
    "Otero",
    "Ozuna",
    "Pabón",
    "Pacheco",
    "Padilla",
    "Padrón",
    "Páez",
    "Pagan",
    "Palacios",
    "Palomino",
    "Palomo",
    "Pantoja",
    "Paredes",
    "Parra",
    "Partida",
    "Patiño",
    "Paz",
    "Pedraza",
    "Pedroza",
    "Pelayo",
    "Peña",
    "Perales",
    "Peralta",
    "Perea",
    "Peres",
    "Pérez",
    "Pichardo",
    "Piña",
    "Pineda",
    "Pizarro",
    "Polanco",
    "Ponce",
    "Porras",
    "Portillo",
    "Posada",
    "Prado",
    "Preciado",
    "Prieto",
    "Puente",
    "Puga",
    "Pulido",
    "Quesada",
    "Quezada",
    "Quiñones",
    "Quiñónez",
    "Quintana",
    "Quintanilla",
    "Quintero",
    "Quiroz",
    "Rael",
    "Ramírez",
    "Ramón",
    "Ramos",
    "Rangel",
    "Rascón",
    "Raya",
    "Razo",
    "Regalado",
    "Rendón",
    "Rentería",
    "Reséndez",
    "Reyes",
    "Reyna",
    "Reynoso",
    "Rico",
    "Rincón",
    "Riojas",
    "Ríos",
    "Rivas",
    "Rivera",
    "Rivero",
    "Robledo",
    "Robles",
    "Rocha",
    "Rodarte",
    "Rodrígez",
    "Rodríguez",
    "Rodríquez",
    "Rojas",
    "Rojo",
    "Roldán",
    "Rolón",
    "Romero",
    "Romo",
    "Roque",
    "Rosado",
    "Rosales",
    "Rosario",
    "Rosas",
    "Roybal",
    "Rubio",
    "Ruelas",
    "Ruiz",
    "Saavedra",
    "Sáenz",
    "Saiz",
    "Salas",
    "Salazar",
    "Salcedo",
    "Salcido",
    "Saldaña",
    "Saldivar",
    "Salgado",
    "Salinas",
    "Samaniego",
    "Sanabria",
    "Sanches",
    "Sánchez",
    "Sandoval",
    "Santacruz",
    "Santana",
    "Santiago",
    "Santillán",
    "Sarabia",
    "Sauceda",
    "Saucedo",
    "Sedillo",
    "Segovia",
    "Segura",
    "Sepúlveda",
    "Serna",
    "Serrano",
    "Serrato",
    "Sevilla",
    "Sierra",
    "Sisneros",
    "Solano",
    "Solís",
    "Soliz",
    "Solorio",
    "Solorzano",
    "Soria",
    "Sosa",
    "Sotelo",
    "Soto",
    "Suárez",
    "Tafoya",
    "Tamayo",
    "Tamez",
    "Tapia",
    "Tejada",
    "Tejeda",
    "Téllez",
    "Tello",
    "Terán",
    "Terrazas",
    "Tijerina",
    "Tirado",
    "Toledo",
    "Toro",
    "Torres",
    "Tórrez",
    "Tovar",
    "Trejo",
    "Treviño",
    "Trujillo",
    "Ulibarri",
    "Ulloa",
    "Urbina",
    "Ureña",
    "Urías",
    "Uribe",
    "Urrutia",
    "Vaca",
    "Valadez",
    "Valdés",
    "Valdez",
    "Valdivia",
    "Valencia",
    "Valentín",
    "Valenzuela",
    "Valladares",
    "Valle",
    "Vallejo",
    "Valles",
    "Valverde",
    "Vanegas",
    "Varela",
    "Vargas",
    "Vásquez",
    "Vázquez",
    "Vega",
    "Vela",
    "Velasco",
    "Velásquez",
    "Velázquez",
    "Vélez",
    "Véliz",
    "Venegas",
    "Vera",
    "Verdugo",
    "Verduzco",
    "Vergara",
    "Viera",
    "Vigil",
    "Villa",
    "Villagómez",
    "Villalobos",
    "Villalpando",
    "Villanueva",
    "Villareal",
    "Villarreal",
    "Villaseñor",
    "Villegas",
    "Yáñez",
    "Ybarra",
    "Zambrano",
    "Zamora",
    "Zamudio",
    "Zapata",
    "Zaragoza",
    "Zarate",
    "Zavala",
    "Zayas",
    "Zelaya",
    "Zepeda",
    "Zúñiga"
  ],
  "prefix": [
    "Sr.",
    "Sra.",
    "Sta."
  ],
  "suffix": [
    "Jr.",
    "Sr.",
    "I",
    "II",
    "III",
    "IV",
    "V",
    "MD",
    "DDS",
    "PhD",
    "DVM"
  ],
  "title": {
    "descriptor": [
      "Jefe",
      "Senior",
      "Directo",
      "Corporativo",
      "Dinánmico",
      "Futuro",
      "Producto",
      "Nacional",
      "Regional",
      "Distrito",
      "Central",
      "Global",
      "Cliente",
      "Inversor",
      "International",
      "Heredado",
      "Adelante",
      "Interno",
      "Humano",
      "Gerente",
      "Director"
    ],
    "level": [
      "Soluciones",
      "Programa",
      "Marca",
      "Seguridada",
      "Investigación",
      "Marketing",
      "Normas",
      "Implementación",
      "Integración",
      "Funcionalidad",
      "Respuesta",
      "Paradigma",
      "Tácticas",
      "Identidad",
      "Mercados",
      "Grupo",
      "División",
      "Aplicaciones",
      "Optimización",
      "Operaciones",
      "Infraestructura",
      "Intranet",
      "Comunicaciones",
      "Web",
      "Calidad",
      "Seguro",
      "Mobilidad",
      "Cuentas",
      "Datos",
      "Creativo",
      "Configuración",
      "Contabilidad",
      "Interacciones",
      "Factores",
      "Usabilidad",
      "Métricas"
    ],
    "job": [
      "Supervisor",
      "Asociado",
      "Ejecutivo",
      "Relacciones",
      "Oficial",
      "Gerente",
      "Ingeniero",
      "Especialista",
      "Director",
      "Coordinador",
      "Administrador",
      "Arquitecto",
      "Analista",
      "Diseñador",
      "Planificador",
      "Técnico",
      "Funcionario",
      "Desarrollador",
      "Productor",
      "Consultor",
      "Asistente",
      "Facilitador",
      "Agente",
      "Representante",
      "Estratega"
    ]
  },
  "name": [
    "#{prefix} #{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}"
  ]
};
es.phone_number = {
  "formats": [
    "9##-###-###",
    "9##.###.###",
    "9## ### ###",
    "9########"
  ]
};
es.cell_phone = {
  "formats": [
    "6##-###-###",
    "6##.###.###",
    "6## ### ###",
    "6########"
  ]
};

},{}],66:[function(require,module,exports){
var fa = {};
module["exports"] = fa;
fa.title = "Farsi";
fa.name = {
  "first_name": [
    "آبان دخت",
    "آبتین",
    "آتوسا",
    "آفر",
    "آفره دخت",
    "آذرنوش‌",
    "آذین",
    "آراه",
    "آرزو",
    "آرش",
    "آرتین",
    "آرتام",
    "آرتمن",
    "آرشام",
    "آرمان",
    "آرمین",
    "آرمیتا",
    "آریا فر",
    "آریا",
    "آریا مهر",
    "آرین",
    "آزاده",
    "آزرم",
    "آزرمدخت",
    "آزیتا",
    "آناهیتا",
    "آونگ",
    "آهو",
    "آیدا",
    "اتسز",
    "اختر",
    "ارد",
    "ارد شیر",
    "اردوان",
    "ارژن",
    "ارژنگ",
    "ارسلان",
    "ارغوان",
    "ارمغان",
    "ارنواز",
    "اروانه",
    "استر",
    "اسفندیار",
    "اشکان",
    "اشکبوس",
    "افسانه",
    "افسون",
    "افشین",
    "امید",
    "انوش (‌ آنوشا )",
    "انوشروان",
    "اورنگ",
    "اوژن",
    "اوستا",
    "اهورا",
    "ایاز",
    "ایران",
    "ایراندخت",
    "ایرج",
    "ایزدیار",
    "بابک",
    "باپوک",
    "باربد",
    "بارمان",
    "بامداد",
    "بامشاد",
    "بانو",
    "بختیار",
    "برانوش",
    "بردیا",
    "برزو",
    "برزویه",
    "برزین",
    "برمک",
    "بزرگمهر",
    "بنفشه",
    "بوژان",
    "بویان",
    "بهار",
    "بهارک",
    "بهاره",
    "بهتاش",
    "بهداد",
    "بهرام",
    "بهدیس",
    "بهرخ",
    "بهرنگ",
    "بهروز",
    "بهزاد",
    "بهشاد",
    "بهمن",
    "بهناز",
    "بهنام",
    "بهنود",
    "بهنوش",
    "بیتا",
    "بیژن",
    "پارسا",
    "پاکان",
    "پاکتن",
    "پاکدخت",
    "پانته آ",
    "پدرام",
    "پرتو",
    "پرشنگ",
    "پرتو",
    "پرستو",
    "پرویز",
    "پردیس",
    "پرهام",
    "پژمان",
    "پژوا",
    "پرنیا",
    "پشنگ",
    "پروانه",
    "پروین",
    "پری",
    "پریچهر",
    "پریدخت",
    "پریسا",
    "پرناز",
    "پریوش",
    "پریا",
    "پوپک",
    "پوران",
    "پوراندخت",
    "پوریا",
    "پولاد",
    "پویا",
    "پونه",
    "پیام",
    "پیروز",
    "پیمان",
    "تابان",
    "تاباندخت",
    "تاجی",
    "تارا",
    "تاویار",
    "ترانه",
    "تناز",
    "توران",
    "توراندخت",
    "تورج",
    "تورتک",
    "توفان",
    "توژال",
    "تیر داد",
    "تینا",
    "تینو",
    "جابان",
    "جامین",
    "جاوید",
    "جریره",
    "جمشید",
    "جوان",
    "جویا",
    "جهان",
    "جهانبخت",
    "جهانبخش",
    "جهاندار",
    "جهانگیر",
    "جهان بانو",
    "جهاندخت",
    "جهان ناز",
    "جیران",
    "چابک",
    "چالاک",
    "چاوش",
    "چترا",
    "چوبین",
    "چهرزاد",
    "خاوردخت",
    "خداداد",
    "خدایار",
    "خرم",
    "خرمدخت",
    "خسرو",
    "خشایار",
    "خورشید",
    "دادمهر",
    "دارا",
    "داراب",
    "داریا",
    "داریوش",
    "دانوش",
    "داور‌",
    "دایان",
    "دریا",
    "دل آرا",
    "دل آویز",
    "دلارام",
    "دل انگیز",
    "دلبر",
    "دلبند",
    "دلربا",
    "دلشاد",
    "دلکش",
    "دلناز",
    "دلنواز",
    "دورشاسب",
    "دنیا",
    "دیااکو",
    "دیانوش",
    "دیبا",
    "دیبا دخت",
    "رابو",
    "رابین",
    "رادبانو",
    "رادمان",
    "رازبان",
    "راژانه",
    "راسا",
    "رامتین",
    "رامش",
    "رامشگر",
    "رامونا",
    "رامیار",
    "رامیلا",
    "رامین",
    "راویار",
    "رژینا",
    "رخپاک",
    "رخسار",
    "رخشانه",
    "رخشنده",
    "رزمیار",
    "رستم",
    "رکسانا",
    "روبینا",
    "رودابه",
    "روزبه",
    "روشنک",
    "روناک",
    "رهام",
    "رهی",
    "ریبار",
    "راسپینا",
    "زادبخت",
    "زاد به",
    "زاد چهر",
    "زاد فر",
    "زال",
    "زادماسب",
    "زاوا",
    "زردشت",
    "زرنگار",
    "زری",
    "زرین",
    "زرینه",
    "زمانه",
    "زونا",
    "زیبا",
    "زیبار",
    "زیما",
    "زینو",
    "ژاله",
    "ژالان",
    "ژیار",
    "ژینا",
    "ژیوار",
    "سارا",
    "سارک",
    "سارنگ",
    "ساره",
    "ساسان",
    "ساغر",
    "سام",
    "سامان",
    "سانا",
    "ساناز",
    "سانیار",
    "ساویز",
    "ساهی",
    "ساینا",
    "سایه",
    "سپنتا",
    "سپند",
    "سپهر",
    "سپهرداد",
    "سپیدار",
    "سپید بانو",
    "سپیده",
    "ستاره",
    "ستی",
    "سرافراز",
    "سرور",
    "سروش",
    "سرور",
    "سوبا",
    "سوبار",
    "سنبله",
    "سودابه",
    "سوری",
    "سورن",
    "سورنا",
    "سوزان",
    "سوزه",
    "سوسن",
    "سومار",
    "سولان",
    "سولماز",
    "سوگند",
    "سهراب",
    "سهره",
    "سهند",
    "سیامک",
    "سیاوش",
    "سیبوبه ‌",
    "سیما",
    "سیمدخت",
    "سینا",
    "سیمین",
    "سیمین دخت",
    "شاپرک",
    "شادی",
    "شادمهر",
    "شاران",
    "شاهپور",
    "شاهدخت",
    "شاهرخ",
    "شاهین",
    "شاهیندخت",
    "شایسته",
    "شباهنگ",
    "شب بو",
    "شبدیز",
    "شبنم",
    "شراره",
    "شرمین",
    "شروین",
    "شکوفه",
    "شکفته",
    "شمشاد",
    "شمین",
    "شوان",
    "شمیلا",
    "شورانگیز",
    "شوری",
    "شهاب",
    "شهبار",
    "شهباز",
    "شهبال",
    "شهپر",
    "شهداد",
    "شهرآرا",
    "شهرام",
    "شهربانو",
    "شهرزاد",
    "شهرناز",
    "شهرنوش",
    "شهره",
    "شهریار",
    "شهرزاد",
    "شهلا",
    "شهنواز",
    "شهین",
    "شیبا",
    "شیدا",
    "شیده",
    "شیردل",
    "شیرزاد",
    "شیرنگ",
    "شیرو",
    "شیرین دخت",
    "شیما",
    "شینا",
    "شیرین",
    "شیوا",
    "طوس",
    "طوطی",
    "طهماسب",
    "طهمورث",
    "غوغا",
    "غنچه",
    "فتانه",
    "فدا",
    "فراز",
    "فرامرز",
    "فرانک",
    "فراهان",
    "فربد",
    "فربغ",
    "فرجاد",
    "فرخ",
    "فرخ پی",
    "فرخ داد",
    "فرخ رو",
    "فرخ زاد",
    "فرخ لقا",
    "فرخ مهر",
    "فرداد",
    "فردیس",
    "فرین",
    "فرزاد",
    "فرزام",
    "فرزان",
    "فرزانه",
    "فرزین",
    "فرشاد",
    "فرشته",
    "فرشید",
    "فرمان",
    "فرناز",
    "فرنگیس",
    "فرنود",
    "فرنوش",
    "فرنیا",
    "فروتن",
    "فرود",
    "فروز",
    "فروزان",
    "فروزش",
    "فروزنده",
    "فروغ",
    "فرهاد",
    "فرهنگ",
    "فرهود",
    "فربار",
    "فریبا",
    "فرید",
    "فریدخت",
    "فریدون",
    "فریمان",
    "فریناز",
    "فرینوش",
    "فریوش",
    "فیروز",
    "فیروزه",
    "قابوس",
    "قباد",
    "قدسی",
    "کابان",
    "کابوک",
    "کارا",
    "کارو",
    "کاراکو",
    "کامبخت",
    "کامبخش",
    "کامبیز",
    "کامجو",
    "کامدین",
    "کامران",
    "کامراوا",
    "کامک",
    "کامنوش",
    "کامیار",
    "کانیار",
    "کاووس",
    "کاوه",
    "کتایون",
    "کرشمه",
    "کسری",
    "کلاله",
    "کمبوجیه",
    "کوشا",
    "کهبد",
    "کهرام",
    "کهزاد",
    "کیارش",
    "کیان",
    "کیانا",
    "کیانچهر",
    "کیاندخت",
    "کیانوش",
    "کیاوش",
    "کیخسرو",
    "کیقباد",
    "کیکاووس",
    "کیوان",
    "کیوان دخت",
    "کیومرث",
    "کیهان",
    "کیاندخت",
    "کیهانه",
    "گرد آفرید",
    "گردان",
    "گرشا",
    "گرشاسب",
    "گرشین",
    "گرگین",
    "گزل",
    "گشتاسب",
    "گشسب",
    "گشسب بانو",
    "گل",
    "گل آذین",
    "گل آرا‌",
    "گلاره",
    "گل افروز",
    "گلاله",
    "گل اندام",
    "گلاویز",
    "گلباد",
    "گلبار",
    "گلبام",
    "گلبان",
    "گلبانو",
    "گلبرگ",
    "گلبو",
    "گلبهار",
    "گلبیز",
    "گلپاره",
    "گلپر",
    "گلپری",
    "گلپوش",
    "گل پونه",
    "گلچین",
    "گلدخت",
    "گلدیس",
    "گلربا",
    "گلرخ",
    "گلرنگ",
    "گلرو",
    "گلشن",
    "گلریز",
    "گلزاد",
    "گلزار",
    "گلسا",
    "گلشید",
    "گلنار",
    "گلناز",
    "گلنسا",
    "گلنواز",
    "گلنوش",
    "گلی",
    "گودرز",
    "گوماتو",
    "گهر چهر",
    "گوهر ناز",
    "گیتی",
    "گیسو",
    "گیلدا",
    "گیو",
    "لادن",
    "لاله",
    "لاله رخ",
    "لاله دخت",
    "لبخند",
    "لقاء",
    "لومانا",
    "لهراسب",
    "مارال",
    "ماری",
    "مازیار",
    "ماکان",
    "مامک",
    "مانا",
    "ماندانا",
    "مانوش",
    "مانی",
    "مانیا",
    "ماهان",
    "ماهاندخت",
    "ماه برزین",
    "ماه جهان",
    "ماهچهر",
    "ماهدخت",
    "ماهور",
    "ماهرخ",
    "ماهزاد",
    "مردآویز",
    "مرداس",
    "مرزبان",
    "مرمر",
    "مزدک",
    "مژده",
    "مژگان",
    "مستان",
    "مستانه",
    "مشکاندخت",
    "مشکناز",
    "مشکین دخت",
    "منیژه",
    "منوچهر",
    "مهبانو",
    "مهبد",
    "مه داد",
    "مهتاب",
    "مهدیس",
    "مه جبین",
    "مه دخت",
    "مهر آذر",
    "مهر آرا",
    "مهر آسا",
    "مهر آفاق",
    "مهر افرین",
    "مهرآب",
    "مهرداد",
    "مهر افزون",
    "مهرام",
    "مهران",
    "مهراندخت",
    "مهراندیش",
    "مهرانفر",
    "مهرانگیز",
    "مهرداد",
    "مهر دخت",
    "مهرزاده ‌",
    "مهرناز",
    "مهرنوش",
    "مهرنکار",
    "مهرنیا",
    "مهروز",
    "مهری",
    "مهریار",
    "مهسا",
    "مهستی",
    "مه سیما",
    "مهشاد",
    "مهشید",
    "مهنام",
    "مهناز",
    "مهنوش",
    "مهوش",
    "مهیار",
    "مهین",
    "مهین دخت",
    "میترا",
    "میخک",
    "مینا",
    "مینا دخت",
    "مینو",
    "مینودخت",
    "مینو فر",
    "نادر",
    "ناز آفرین",
    "نازبانو",
    "نازپرور",
    "نازچهر",
    "نازفر",
    "نازلی",
    "نازی",
    "نازیدخت",
    "نامور",
    "ناهید",
    "ندا",
    "نرسی",
    "نرگس",
    "نرمک",
    "نرمین",
    "نریمان",
    "نسترن",
    "نسرین",
    "نسرین دخت",
    "نسرین نوش",
    "نکیسا",
    "نگار",
    "نگاره",
    "نگارین",
    "نگین",
    "نوا",
    "نوش",
    "نوش آذر",
    "نوش آور",
    "نوشا",
    "نوش آفرین",
    "نوشدخت",
    "نوشروان",
    "نوشفر",
    "نوشناز",
    "نوشین",
    "نوید",
    "نوین",
    "نوین دخت",
    "نیش ا",
    "نیک بین",
    "نیک پی",
    "نیک چهر",
    "نیک خواه",
    "نیکداد",
    "نیکدخت",
    "نیکدل",
    "نیکزاد",
    "نیلوفر",
    "نیما",
    "وامق",
    "ورجاوند",
    "وریا",
    "وشمگیر",
    "وهرز",
    "وهسودان",
    "ویدا",
    "ویس",
    "ویشتاسب",
    "ویگن",
    "هژیر",
    "هخامنش",
    "هربد( هیربد )",
    "هرمز",
    "همایون",
    "هما",
    "همادخت",
    "همدم",
    "همراز",
    "همراه",
    "هنگامه",
    "هوتن",
    "هور",
    "هورتاش",
    "هورچهر",
    "هورداد",
    "هوردخت",
    "هورزاد",
    "هورمند",
    "هوروش",
    "هوشنگ",
    "هوشیار",
    "هومان",
    "هومن",
    "هونام",
    "هویدا",
    "هیتاسب",
    "هیرمند",
    "هیما",
    "هیوا",
    "یادگار",
    "یاسمن ( یاسمین )",
    "یاشار",
    "یاور",
    "یزدان",
    "یگانه",
    "یوشیتا"
  ],
  "last_name": [
    "عارف",
    "عاشوری",
    "عالی",
    "عبادی",
    "عبدالکریمی",
    "عبدالملکی",
    "عراقی",
    "عزیزی",
    "عصار",
    "عقیلی",
    "علم",
    "علم‌الهدی",
    "علی عسگری",
    "علی‌آبادی",
    "علیا",
    "علی‌پور",
    "علی‌زمانی",
    "عنایت",
    "غضنفری",
    "غنی",
    "فارسی",
    "فاطمی",
    "فانی",
    "فتاحی",
    "فرامرزی",
    "فرج",
    "فرشیدورد",
    "فرمانفرمائیان",
    "فروتن",
    "فرهنگ",
    "فریاد",
    "فنایی",
    "فنی‌زاده",
    "فولادوند",
    "فهمیده",
    "قاضی",
    "قانعی",
    "قانونی",
    "قمیشی",
    "قنبری",
    "قهرمان",
    "قهرمانی",
    "قهرمانیان",
    "قهستانی",
    "کاشی",
    "کاکاوند",
    "کامکار",
    "کاملی",
    "کاویانی",
    "کدیور",
    "کردبچه",
    "کرمانی",
    "کریمی",
    "کلباسی",
    "کمالی",
    "کوشکی",
    "کهنمویی",
    "کیان",
    "کیانی (نام خانوادگی)",
    "کیمیایی",
    "گل محمدی",
    "گلپایگانی",
    "گنجی",
    "لاجوردی",
    "لاچینی",
    "لاهوتی",
    "لنکرانی",
    "لوکس",
    "مجاهد",
    "مجتبایی",
    "مجتبوی",
    "مجتهد شبستری",
    "مجتهدی",
    "مجرد",
    "محجوب",
    "محجوبی",
    "محدثی",
    "محمدرضایی",
    "محمدی",
    "مددی",
    "مرادخانی",
    "مرتضوی",
    "مستوفی",
    "مشا",
    "مصاحب",
    "مصباح",
    "مصباح‌زاده",
    "مطهری",
    "مظفر",
    "معارف",
    "معروف",
    "معین",
    "مفتاح",
    "مفتح",
    "مقدم",
    "ملایری",
    "ملک",
    "ملکیان",
    "منوچهری",
    "موحد",
    "موسوی",
    "موسویان",
    "مهاجرانی",
    "مهدی‌پور",
    "میرباقری",
    "میردامادی",
    "میرزاده",
    "میرسپاسی",
    "میزبانی",
    "ناظری",
    "نامور",
    "نجفی",
    "ندوشن",
    "نراقی",
    "نعمت‌زاده",
    "نقدی",
    "نقیب‌زاده",
    "نواب",
    "نوبخت",
    "نوبختی",
    "نهاوندی",
    "نیشابوری",
    "نیلوفری",
    "واثقی",
    "واعظ",
    "واعظ‌زاده",
    "واعظی",
    "وکیلی",
    "هاشمی",
    "هاشمی رفسنجانی",
    "هاشمیان",
    "هامون",
    "هدایت",
    "هراتی",
    "هروی",
    "همایون",
    "همت",
    "همدانی",
    "هوشیار",
    "هومن",
    "یاحقی",
    "یادگار",
    "یثربی",
    "یلدا"
  ],
  "prefix": [
    "آقای",
    "خانم",
    "دکتر"
  ]
};

},{}],67:[function(require,module,exports){
var fr = {};
module["exports"] = fr;
fr.title = "French";
fr.address = {
  "building_number": [
    "####",
    "###",
    "##",
    "#"
  ],
  "street_prefix": [
    "Allée, Voie",
    "Rue",
    "Avenue",
    "Boulevard",
    "Quai",
    "Passage",
    "Impasse",
    "Place"
  ],
  "secondary_address": [
    "Apt. ###",
    "# étage"
  ],
  "postcode": [
    "#####"
  ],
  "state": [
    "Alsace",
    "Aquitaine",
    "Auvergne",
    "Basse-Normandie",
    "Bourgogne",
    "Bretagne",
    "Centre",
    "Champagne-Ardenne",
    "Corse",
    "Franche-Comté",
    "Haute-Normandie",
    "Île-de-France",
    "Languedoc-Roussillon",
    "Limousin",
    "Lorraine",
    "Midi-Pyrénées",
    "Nord-Pas-de-Calais",
    "Pays de la Loire",
    "Picardie",
    "Poitou-Charentes",
    "Provence-Alpes-Côte d'Azur",
    "Rhône-Alpes"
  ],
  "city_name": [
    "Paris",
    "Marseille",
    "Lyon",
    "Toulouse",
    "Nice",
    "Nantes",
    "Strasbourg",
    "Montpellier",
    "Bordeaux",
    "Lille13",
    "Rennes",
    "Reims",
    "Le Havre",
    "Saint-Étienne",
    "Toulon",
    "Grenoble",
    "Dijon",
    "Angers",
    "Saint-Denis",
    "Villeurbanne",
    "Le Mans",
    "Aix-en-Provence",
    "Brest",
    "Nîmes",
    "Limoges",
    "Clermont-Ferrand",
    "Tours",
    "Amiens",
    "Metz",
    "Perpignan",
    "Besançon",
    "Orléans",
    "Boulogne-Billancourt",
    "Mulhouse",
    "Rouen",
    "Caen",
    "Nancy",
    "Saint-Denis",
    "Saint-Paul",
    "Montreuil",
    "Argenteuil",
    "Roubaix",
    "Dunkerque14",
    "Tourcoing",
    "Nanterre",
    "Avignon",
    "Créteil",
    "Poitiers",
    "Fort-de-France",
    "Courbevoie",
    "Versailles",
    "Vitry-sur-Seine",
    "Colombes",
    "Pau",
    "Aulnay-sous-Bois",
    "Asnières-sur-Seine",
    "Rueil-Malmaison",
    "Saint-Pierre",
    "Antibes",
    "Saint-Maur-des-Fossés",
    "Champigny-sur-Marne",
    "La Rochelle",
    "Aubervilliers",
    "Calais",
    "Cannes",
    "Le Tampon",
    "Béziers",
    "Colmar",
    "Bourges",
    "Drancy",
    "Mérignac",
    "Saint-Nazaire",
    "Valence",
    "Ajaccio",
    "Issy-les-Moulineaux",
    "Villeneuve-d'Ascq",
    "Levallois-Perret",
    "Noisy-le-Grand",
    "Quimper",
    "La Seyne-sur-Mer",
    "Antony",
    "Troyes",
    "Neuilly-sur-Seine",
    "Sarcelles",
    "Les Abymes",
    "Vénissieux",
    "Clichy",
    "Lorient",
    "Pessac",
    "Ivry-sur-Seine",
    "Cergy",
    "Cayenne",
    "Niort",
    "Chambéry",
    "Montauban",
    "Saint-Quentin",
    "Villejuif",
    "Hyères",
    "Beauvais",
    "Cholet"
  ],
  "city": [
    "#{city_name}"
  ],
  "street_suffix": [
    "de l'Abbaye",
    "Adolphe Mille",
    "d'Alésia",
    "d'Argenteuil",
    "d'Assas",
    "du Bac",
    "de Paris",
    "La Boétie",
    "Bonaparte",
    "de la Bûcherie",
    "de Caumartin",
    "Charlemagne",
    "du Chat-qui-Pêche",
    "de la Chaussée-d'Antin",
    "du Dahomey",
    "Dauphine",
    "Delesseux",
    "du Faubourg Saint-Honoré",
    "du Faubourg-Saint-Denis",
    "de la Ferronnerie",
    "des Francs-Bourgeois",
    "des Grands Augustins",
    "de la Harpe",
    "du Havre",
    "de la Huchette",
    "Joubert",
    "Laffitte",
    "Lepic",
    "des Lombards",
    "Marcadet",
    "Molière",
    "Monsieur-le-Prince",
    "de Montmorency",
    "Montorgueil",
    "Mouffetard",
    "de Nesle",
    "Oberkampf",
    "de l'Odéon",
    "d'Orsel",
    "de la Paix",
    "des Panoramas",
    "Pastourelle",
    "Pierre Charron",
    "de la Pompe",
    "de Presbourg",
    "de Provence",
    "de Richelieu",
    "de Rivoli",
    "des Rosiers",
    "Royale",
    "d'Abbeville",
    "Saint-Honoré",
    "Saint-Bernard",
    "Saint-Denis",
    "Saint-Dominique",
    "Saint-Jacques",
    "Saint-Séverin",
    "des Saussaies",
    "de Seine",
    "de Solférino",
    "Du Sommerard",
    "de Tilsitt",
    "Vaneau",
    "de Vaugirard",
    "de la Victoire",
    "Zadkine"
  ],
  "street_name": [
    "#{street_prefix} #{street_suffix}"
  ],
  "street_address": [
    "#{building_number} #{street_name}"
  ],
  "default_country": [
    "France"
  ]
};
fr.company = {
  "suffix": [
    "SARL",
    "SA",
    "EURL",
    "SAS",
    "SEM",
    "SCOP",
    "GIE",
    "EI"
  ],
  "adjective": [
      "Adaptive",
      "Advanced",
      "Ameliorated",
      "Assimilated",
      "Automated",
      "Balanced",
      "Business-focused",
      "Centralized",
      "Cloned",
      "Compatible",
      "Configurable",
      "Cross-group",
      "Cross-platform",
      "Customer-focused",
      "Customizable",
      "Decentralized",
      "De-engineered",
      "Devolved",
      "Digitized",
      "Distributed",
      "Diverse",
      "Down-sized",
      "Enhanced",
      "Enterprise-wide",
      "Ergonomic",
      "Exclusive",
      "Expanded",
      "Extended",
      "Face to face",
      "Focused",
      "Front-line",
      "Fully-configurable",
      "Function-based",
      "Fundamental",
      "Future-proofed",
      "Grass-roots",
      "Horizontal",
      "Implemented",
      "Innovative",
      "Integrated",
      "Intuitive",
      "Inverse",
      "Managed",
      "Mandatory",
      "Monitored",
      "Multi-channelled",
      "Multi-lateral",
      "Multi-layered",
      "Multi-tiered",
      "Networked",
      "Object-based",
      "Open-architected",
      "Open-source",
      "Operative",
      "Optimized",
      "Optional",
      "Organic",
      "Organized",
      "Persevering",
      "Persistent",
      "Phased",
      "Polarised",
      "Pre-emptive",
      "Proactive",
      "Profit-focused",
      "Profound",
      "Programmable",
      "Progressive",
      "Public-key",
      "Quality-focused",
      "Reactive",
      "Realigned",
      "Re-contextualized",
      "Re-engineered",
      "Reduced",
      "Reverse-engineered",
      "Right-sized",
      "Robust",
      "Seamless",
      "Secured",
      "Self-enabling",
      "Sharable",
      "Stand-alone",
      "Streamlined",
      "Switchable",
      "Synchronised",
      "Synergistic",
      "Synergized",
      "Team-oriented",
      "Total",
      "Triple-buffered",
      "Universal",
      "Up-sized",
      "Upgradable",
      "User-centric",
      "User-friendly",
      "Versatile",
      "Virtual",
      "Visionary",
      "Vision-oriented"
    ],
    "descriptor":
    [
      "24 hour",
      "24/7",
      "3rd generation",
      "4th generation",
      "5th generation",
      "6th generation",
      "actuating",
      "analyzing",
      "asymmetric",
      "asynchronous",
      "attitude-oriented",
      "background",
      "bandwidth-monitored",
      "bi-directional",
      "bifurcated",
      "bottom-line",
      "clear-thinking",
      "client-driven",
      "client-server",
      "coherent",
      "cohesive",
      "composite",
      "context-sensitive",
      "contextually-based",
      "content-based",
      "dedicated",
      "demand-driven",
      "didactic",
      "directional",
      "discrete",
      "disintermediate",
      "dynamic",
      "eco-centric",
      "empowering",
      "encompassing",
      "even-keeled",
      "executive",
      "explicit",
      "exuding",
      "fault-tolerant",
      "foreground",
      "fresh-thinking",
      "full-range",
      "global",
      "grid-enabled",
      "heuristic",
      "high-level",
      "holistic",
      "homogeneous",
      "human-resource",
      "hybrid",
      "impactful",
      "incremental",
      "intangible",
      "interactive",
      "intermediate",
      "leading edge",
      "local",
      "logistical",
      "maximized",
      "methodical",
      "mission-critical",
      "mobile",
      "modular",
      "motivating",
      "multimedia",
      "multi-state",
      "multi-tasking",
      "national",
      "needs-based",
      "neutral",
      "next generation",
      "non-volatile",
      "object-oriented",
      "optimal",
      "optimizing",
      "radical",
      "real-time",
      "reciprocal",
      "regional",
      "responsive",
      "scalable",
      "secondary",
      "solution-oriented",
      "stable",
      "static",
      "systematic",
      "systemic",
      "system-worthy",
      "tangible",
      "tertiary",
      "transitional",
      "uniform",
      "upward-trending",
      "user-facing",
      "value-added",
      "web-enabled",
      "well-modulated",
      "zero administration",
      "zero defect",
      "zero tolerance"
    ],
    "noun":
    [
      "ability",
      "access",
      "adapter",
      "algorithm",
      "alliance",
      "analyzer",
      "application",
      "approach",
      "architecture",
      "archive",
      "artificial intelligence",
      "array",
      "attitude",
      "benchmark",
      "budgetary management",
      "capability",
      "capacity",
      "challenge",
      "circuit",
      "collaboration",
      "complexity",
      "concept",
      "conglomeration",
      "contingency",
      "core",
      "customer loyalty",
      "database",
      "data-warehouse",
      "definition",
      "emulation",
      "encoding",
      "encryption",
      "extranet",
      "firmware",
      "flexibility",
      "focus group",
      "forecast",
      "frame",
      "framework",
      "function",
      "functionalities",
      "Graphic Interface",
      "groupware",
      "Graphical User Interface",
      "hardware",
      "help-desk",
      "hierarchy",
      "hub",
      "implementation",
      "info-mediaries",
      "infrastructure",
      "initiative",
      "installation",
      "instruction set",
      "interface",
      "internet solution",
      "intranet",
      "knowledge user",
      "knowledge base",
      "local area network",
      "leverage",
      "matrices",
      "matrix",
      "methodology",
      "middleware",
      "migration",
      "model",
      "moderator",
      "monitoring",
      "moratorium",
      "neural-net",
      "open architecture",
      "open system",
      "orchestration",
      "paradigm",
      "parallelism",
      "policy",
      "portal",
      "pricing structure",
      "process improvement",
      "product",
      "productivity",
      "project",
      "projection",
      "protocol",
      "secured line",
      "service-desk",
      "software",
      "solution",
      "standardization",
      "strategy",
      "structure",
      "success",
      "superstructure",
      "support",
      "synergy",
      "system engine",
      "task-force",
      "throughput",
      "time-frame",
      "toolset",
      "utilisation",
      "website",
      "workforce"
  ],
  "bs_verb": [
      "implement",
      "utilize",
      "integrate",
      "streamline",
      "optimize",
      "evolve",
      "transform",
      "embrace",
      "enable",
      "orchestrate",
      "leverage",
      "reinvent",
      "aggregate",
      "architect",
      "enhance",
      "incentivize",
      "morph",
      "empower",
      "envisioneer",
      "monetize",
      "harness",
      "facilitate",
      "seize",
      "disintermediate",
      "synergize",
      "strategize",
      "deploy",
      "brand",
      "grow",
      "target",
      "syndicate",
      "synthesize",
      "deliver",
      "mesh",
      "incubate",
      "engage",
      "maximize",
      "benchmark",
      "expedite",
      "reintermediate",
      "whiteboard",
      "visualize",
      "repurpose",
      "innovate",
      "scale",
      "unleash",
      "drive",
      "extend",
      "engineer",
      "revolutionize",
      "generate",
      "exploit",
      "transition",
      "e-enable",
      "iterate",
      "cultivate",
      "matrix",
      "productize",
      "redefine",
      "recontextualize"
    ],
    "bs_adjective":
    [
      "clicks-and-mortar",
      "value-added",
      "vertical",
      "proactive",
      "robust",
      "revolutionary",
      "scalable",
      "leading-edge",
      "innovative",
      "intuitive",
      "strategic",
      "e-business",
      "mission-critical",
      "sticky",
      "one-to-one",
      "24/7",
      "end-to-end",
      "global",
      "B2B",
      "B2C",
      "granular",
      "frictionless",
      "virtual",
      "viral",
      "dynamic",
      "24/365",
      "best-of-breed",
      "killer",
      "magnetic",
      "bleeding-edge",
      "web-enabled",
      "interactive",
      "dot-com",
      "sexy",
      "back-end",
      "real-time",
      "efficient",
      "front-end",
      "distributed",
      "seamless",
      "extensible",
      "turn-key",
      "world-class",
      "open-source",
      "cross-platform",
      "cross-media",
      "synergistic",
      "bricks-and-clicks",
      "out-of-the-box",
      "enterprise",
      "integrated",
      "impactful",
      "wireless",
      "transparent",
      "next-generation",
      "cutting-edge",
      "user-centric",
      "visionary",
      "customized",
      "ubiquitous",
      "plug-and-play",
      "collaborative",
      "compelling",
      "holistic",
      "rich"
    ],
    "bs_noun": [
      "synergies",
      "web-readiness",
      "paradigms",
      "markets",
      "partnerships",
      "infrastructures",
      "platforms",
      "initiatives",
      "channels",
      "eyeballs",
      "communities",
      "ROI",
      "solutions",
      "e-tailers",
      "e-services",
      "action-items",
      "portals",
      "niches",
      "technologies",
      "content",
      "vortals",
      "supply-chains",
      "convergence",
      "relationships",
      "architectures",
      "interfaces",
      "e-markets",
      "e-commerce",
      "systems",
      "bandwidth",
      "infomediaries",
      "models",
      "mindshare",
      "deliverables",
      "users",
      "schemas",
      "networks",
      "applications",
      "metrics",
      "e-business",
      "functionalities",
      "experiences",
      "web services",
      "methodologies"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name} et #{Name.last_name}"
  ]
};
fr.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.fr",
    "hotmail.fr"
  ],
  "domain_suffix": [
    "com",
    "fr",
    "eu",
    "info",
    "name",
    "net",
    "org"
  ]
};
fr.lorem = {
  "words": [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ],
  "supplemental": [
    "abbas",
    "abduco",
    "abeo",
    "abscido",
    "absconditus",
    "absens",
    "absorbeo",
    "absque",
    "abstergo",
    "absum",
    "abundans",
    "abutor",
    "accedo",
    "accendo",
    "acceptus",
    "accipio",
    "accommodo",
    "accusator",
    "acer",
    "acerbitas",
    "acervus",
    "acidus",
    "acies",
    "acquiro",
    "acsi",
    "adamo",
    "adaugeo",
    "addo",
    "adduco",
    "ademptio",
    "adeo",
    "adeptio",
    "adfectus",
    "adfero",
    "adficio",
    "adflicto",
    "adhaero",
    "adhuc",
    "adicio",
    "adimpleo",
    "adinventitias",
    "adipiscor",
    "adiuvo",
    "administratio",
    "admiratio",
    "admitto",
    "admoneo",
    "admoveo",
    "adnuo",
    "adopto",
    "adsidue",
    "adstringo",
    "adsuesco",
    "adsum",
    "adulatio",
    "adulescens",
    "adultus",
    "aduro",
    "advenio",
    "adversus",
    "advoco",
    "aedificium",
    "aeger",
    "aegre",
    "aegrotatio",
    "aegrus",
    "aeneus",
    "aequitas",
    "aequus",
    "aer",
    "aestas",
    "aestivus",
    "aestus",
    "aetas",
    "aeternus",
    "ager",
    "aggero",
    "aggredior",
    "agnitio",
    "agnosco",
    "ago",
    "ait",
    "aiunt",
    "alienus",
    "alii",
    "alioqui",
    "aliqua",
    "alius",
    "allatus",
    "alo",
    "alter",
    "altus",
    "alveus",
    "amaritudo",
    "ambitus",
    "ambulo",
    "amicitia",
    "amiculum",
    "amissio",
    "amita",
    "amitto",
    "amo",
    "amor",
    "amoveo",
    "amplexus",
    "amplitudo",
    "amplus",
    "ancilla",
    "angelus",
    "angulus",
    "angustus",
    "animadverto",
    "animi",
    "animus",
    "annus",
    "anser",
    "ante",
    "antea",
    "antepono",
    "antiquus",
    "aperio",
    "aperte",
    "apostolus",
    "apparatus",
    "appello",
    "appono",
    "appositus",
    "approbo",
    "apto",
    "aptus",
    "apud",
    "aqua",
    "ara",
    "aranea",
    "arbitro",
    "arbor",
    "arbustum",
    "arca",
    "arceo",
    "arcesso",
    "arcus",
    "argentum",
    "argumentum",
    "arguo",
    "arma",
    "armarium",
    "armo",
    "aro",
    "ars",
    "articulus",
    "artificiose",
    "arto",
    "arx",
    "ascisco",
    "ascit",
    "asper",
    "aspicio",
    "asporto",
    "assentator",
    "astrum",
    "atavus",
    "ater",
    "atqui",
    "atrocitas",
    "atrox",
    "attero",
    "attollo",
    "attonbitus",
    "auctor",
    "auctus",
    "audacia",
    "audax",
    "audentia",
    "audeo",
    "audio",
    "auditor",
    "aufero",
    "aureus",
    "auris",
    "aurum",
    "aut",
    "autem",
    "autus",
    "auxilium",
    "avaritia",
    "avarus",
    "aveho",
    "averto",
    "avoco",
    "baiulus",
    "balbus",
    "barba",
    "bardus",
    "basium",
    "beatus",
    "bellicus",
    "bellum",
    "bene",
    "beneficium",
    "benevolentia",
    "benigne",
    "bestia",
    "bibo",
    "bis",
    "blandior",
    "bonus",
    "bos",
    "brevis",
    "cado",
    "caecus",
    "caelestis",
    "caelum",
    "calamitas",
    "calcar",
    "calco",
    "calculus",
    "callide",
    "campana",
    "candidus",
    "canis",
    "canonicus",
    "canto",
    "capillus",
    "capio",
    "capitulus",
    "capto",
    "caput",
    "carbo",
    "carcer",
    "careo",
    "caries",
    "cariosus",
    "caritas",
    "carmen",
    "carpo",
    "carus",
    "casso",
    "caste",
    "casus",
    "catena",
    "caterva",
    "cattus",
    "cauda",
    "causa",
    "caute",
    "caveo",
    "cavus",
    "cedo",
    "celebrer",
    "celer",
    "celo",
    "cena",
    "cenaculum",
    "ceno",
    "censura",
    "centum",
    "cerno",
    "cernuus",
    "certe",
    "certo",
    "certus",
    "cervus",
    "cetera",
    "charisma",
    "chirographum",
    "cibo",
    "cibus",
    "cicuta",
    "cilicium",
    "cimentarius",
    "ciminatio",
    "cinis",
    "circumvenio",
    "cito",
    "civis",
    "civitas",
    "clam",
    "clamo",
    "claro",
    "clarus",
    "claudeo",
    "claustrum",
    "clementia",
    "clibanus",
    "coadunatio",
    "coaegresco",
    "coepi",
    "coerceo",
    "cogito",
    "cognatus",
    "cognomen",
    "cogo",
    "cohaero",
    "cohibeo",
    "cohors",
    "colligo",
    "colloco",
    "collum",
    "colo",
    "color",
    "coma",
    "combibo",
    "comburo",
    "comedo",
    "comes",
    "cometes",
    "comis",
    "comitatus",
    "commemoro",
    "comminor",
    "commodo",
    "communis",
    "comparo",
    "compello",
    "complectus",
    "compono",
    "comprehendo",
    "comptus",
    "conatus",
    "concedo",
    "concido",
    "conculco",
    "condico",
    "conduco",
    "confero",
    "confido",
    "conforto",
    "confugo",
    "congregatio",
    "conicio",
    "coniecto",
    "conitor",
    "coniuratio",
    "conor",
    "conqueror",
    "conscendo",
    "conservo",
    "considero",
    "conspergo",
    "constans",
    "consuasor",
    "contabesco",
    "contego",
    "contigo",
    "contra",
    "conturbo",
    "conventus",
    "convoco",
    "copia",
    "copiose",
    "cornu",
    "corona",
    "corpus",
    "correptius",
    "corrigo",
    "corroboro",
    "corrumpo",
    "coruscus",
    "cotidie",
    "crapula",
    "cras",
    "crastinus",
    "creator",
    "creber",
    "crebro",
    "credo",
    "creo",
    "creptio",
    "crepusculum",
    "cresco",
    "creta",
    "cribro",
    "crinis",
    "cruciamentum",
    "crudelis",
    "cruentus",
    "crur",
    "crustulum",
    "crux",
    "cubicularis",
    "cubitum",
    "cubo",
    "cui",
    "cuius",
    "culpa",
    "culpo",
    "cultellus",
    "cultura",
    "cum",
    "cunabula",
    "cunae",
    "cunctatio",
    "cupiditas",
    "cupio",
    "cuppedia",
    "cupressus",
    "cur",
    "cura",
    "curatio",
    "curia",
    "curiositas",
    "curis",
    "curo",
    "curriculum",
    "currus",
    "cursim",
    "curso",
    "cursus",
    "curto",
    "curtus",
    "curvo",
    "curvus",
    "custodia",
    "damnatio",
    "damno",
    "dapifer",
    "debeo",
    "debilito",
    "decens",
    "decerno",
    "decet",
    "decimus",
    "decipio",
    "decor",
    "decretum",
    "decumbo",
    "dedecor",
    "dedico",
    "deduco",
    "defaeco",
    "defendo",
    "defero",
    "defessus",
    "defetiscor",
    "deficio",
    "defigo",
    "defleo",
    "defluo",
    "defungo",
    "degenero",
    "degero",
    "degusto",
    "deinde",
    "delectatio",
    "delego",
    "deleo",
    "delibero",
    "delicate",
    "delinquo",
    "deludo",
    "demens",
    "demergo",
    "demitto",
    "demo",
    "demonstro",
    "demoror",
    "demulceo",
    "demum",
    "denego",
    "denique",
    "dens",
    "denuncio",
    "denuo",
    "deorsum",
    "depereo",
    "depono",
    "depopulo",
    "deporto",
    "depraedor",
    "deprecator",
    "deprimo",
    "depromo",
    "depulso",
    "deputo",
    "derelinquo",
    "derideo",
    "deripio",
    "desidero",
    "desino",
    "desipio",
    "desolo",
    "desparatus",
    "despecto",
    "despirmatio",
    "infit",
    "inflammatio",
    "paens",
    "patior",
    "patria",
    "patrocinor",
    "patruus",
    "pauci",
    "paulatim",
    "pauper",
    "pax",
    "peccatus",
    "pecco",
    "pecto",
    "pectus",
    "pecunia",
    "pecus",
    "peior",
    "pel",
    "ocer",
    "socius",
    "sodalitas",
    "sol",
    "soleo",
    "solio",
    "solitudo",
    "solium",
    "sollers",
    "sollicito",
    "solum",
    "solus",
    "solutio",
    "solvo",
    "somniculosus",
    "somnus",
    "sonitus",
    "sono",
    "sophismata",
    "sopor",
    "sordeo",
    "sortitus",
    "spargo",
    "speciosus",
    "spectaculum",
    "speculum",
    "sperno",
    "spero",
    "spes",
    "spiculum",
    "spiritus",
    "spoliatio",
    "sponte",
    "stabilis",
    "statim",
    "statua",
    "stella",
    "stillicidium",
    "stipes",
    "stips",
    "sto",
    "strenuus",
    "strues",
    "studio",
    "stultus",
    "suadeo",
    "suasoria",
    "sub",
    "subito",
    "subiungo",
    "sublime",
    "subnecto",
    "subseco",
    "substantia",
    "subvenio",
    "succedo",
    "succurro",
    "sufficio",
    "suffoco",
    "suffragium",
    "suggero",
    "sui",
    "sulum",
    "sum",
    "summa",
    "summisse",
    "summopere",
    "sumo",
    "sumptus",
    "supellex",
    "super",
    "suppellex",
    "supplanto",
    "suppono",
    "supra",
    "surculus",
    "surgo",
    "sursum",
    "suscipio",
    "suspendo",
    "sustineo",
    "suus",
    "synagoga",
    "tabella",
    "tabernus",
    "tabesco",
    "tabgo",
    "tabula",
    "taceo",
    "tactus",
    "taedium",
    "talio",
    "talis",
    "talus",
    "tam",
    "tamdiu",
    "tamen",
    "tametsi",
    "tamisium",
    "tamquam",
    "tandem",
    "tantillus",
    "tantum",
    "tardus",
    "tego",
    "temeritas",
    "temperantia",
    "templum",
    "temptatio",
    "tempus",
    "tenax",
    "tendo",
    "teneo",
    "tener",
    "tenuis",
    "tenus",
    "tepesco",
    "tepidus",
    "ter",
    "terebro",
    "teres",
    "terga",
    "tergeo",
    "tergiversatio",
    "tergo",
    "tergum",
    "termes",
    "terminatio",
    "tero",
    "terra",
    "terreo",
    "territo",
    "terror",
    "tersus",
    "tertius",
    "testimonium",
    "texo",
    "textilis",
    "textor",
    "textus",
    "thalassinus",
    "theatrum",
    "theca",
    "thema",
    "theologus",
    "thermae",
    "thesaurus",
    "thesis",
    "thorax",
    "thymbra",
    "thymum",
    "tibi",
    "timidus",
    "timor",
    "titulus",
    "tolero",
    "tollo",
    "tondeo",
    "tonsor",
    "torqueo",
    "torrens",
    "tot",
    "totidem",
    "toties",
    "totus",
    "tracto",
    "trado",
    "traho",
    "trans",
    "tredecim",
    "tremo",
    "trepide",
    "tres",
    "tribuo",
    "tricesimus",
    "triduana",
    "triginta",
    "tripudio",
    "tristis",
    "triumphus",
    "trucido",
    "truculenter",
    "tubineus",
    "tui",
    "tum",
    "tumultus",
    "tunc",
    "turba",
    "turbo",
    "turpe",
    "turpis",
    "tutamen",
    "tutis",
    "tyrannus",
    "uberrime",
    "ubi",
    "ulciscor",
    "ullus",
    "ulterius",
    "ultio",
    "ultra",
    "umbra",
    "umerus",
    "umquam",
    "una",
    "unde",
    "undique",
    "universe",
    "unus",
    "urbanus",
    "urbs",
    "uredo",
    "usitas",
    "usque",
    "ustilo",
    "ustulo",
    "usus",
    "uter",
    "uterque",
    "utilis",
    "utique",
    "utor",
    "utpote",
    "utrimque",
    "utroque",
    "utrum",
    "uxor",
    "vaco",
    "vacuus",
    "vado",
    "vae",
    "valde",
    "valens",
    "valeo",
    "valetudo",
    "validus",
    "vallum",
    "vapulus",
    "varietas",
    "varius",
    "vehemens",
    "vel",
    "velociter",
    "velum",
    "velut",
    "venia",
    "venio",
    "ventito",
    "ventosus",
    "ventus",
    "venustas",
    "ver",
    "verbera",
    "verbum",
    "vere",
    "verecundia",
    "vereor",
    "vergo",
    "veritas",
    "vero",
    "versus",
    "verto",
    "verumtamen",
    "verus",
    "vesco",
    "vesica",
    "vesper",
    "vespillo",
    "vester",
    "vestigium",
    "vestrum",
    "vetus",
    "via",
    "vicinus",
    "vicissitudo",
    "victoria",
    "victus",
    "videlicet",
    "video",
    "viduata",
    "viduo",
    "vigilo",
    "vigor",
    "vilicus",
    "vilis",
    "vilitas",
    "villa",
    "vinco",
    "vinculum",
    "vindico",
    "vinitor",
    "vinum",
    "vir",
    "virga",
    "virgo",
    "viridis",
    "viriliter",
    "virtus",
    "vis",
    "viscus",
    "vita",
    "vitiosus",
    "vitium",
    "vito",
    "vivo",
    "vix",
    "vobis",
    "vociferor",
    "voco",
    "volaticus",
    "volo",
    "volubilis",
    "voluntarius",
    "volup",
    "volutabrum",
    "volva",
    "vomer",
    "vomica",
    "vomito",
    "vorago",
    "vorax",
    "voro",
    "vos",
    "votum",
    "voveo",
    "vox",
    "vulariter",
    "vulgaris",
    "vulgivagus",
    "vulgo",
    "vulgus",
    "vulnero",
    "vulnus",
    "vulpes",
    "vulticulus",
    "vultuosus",
    "xiphias"
  ]
};
fr.name = {
  "first_name": [
    "Enzo",
    "Lucas",
    "Mathis",
    "Nathan",
    "Thomas",
    "Hugo",
    "Théo",
    "Tom",
    "Louis",
    "Raphaël",
    "Clément",
    "Léo",
    "Mathéo",
    "Maxime",
    "Alexandre",
    "Antoine",
    "Yanis",
    "Paul",
    "Baptiste",
    "Alexis",
    "Gabriel",
    "Arthur",
    "Jules",
    "Ethan",
    "Noah",
    "Quentin",
    "Axel",
    "Evan",
    "Mattéo",
    "Romain",
    "Valentin",
    "Maxence",
    "Noa",
    "Adam",
    "Nicolas",
    "Julien",
    "Mael",
    "Pierre",
    "Rayan",
    "Victor",
    "Mohamed",
    "Adrien",
    "Kylian",
    "Sacha",
    "Benjamin",
    "Léa",
    "Clara",
    "Manon",
    "Chloé",
    "Camille",
    "Ines",
    "Sarah",
    "Jade",
    "Lola",
    "Anaïs",
    "Lucie",
    "Océane",
    "Lilou",
    "Marie",
    "Eva",
    "Romane",
    "Lisa",
    "Zoe",
    "Julie",
    "Mathilde",
    "Louise",
    "Juliette",
    "Clémence",
    "Célia",
    "Laura",
    "Lena",
    "Maëlys",
    "Charlotte",
    "Ambre",
    "Maeva",
    "Pauline",
    "Lina",
    "Jeanne",
    "Lou",
    "Noémie",
    "Justine",
    "Louna",
    "Elisa",
    "Alice",
    "Emilie",
    "Carla",
    "Maëlle",
    "Alicia",
    "Mélissa"
  ],
  "last_name": [
    "Martin",
    "Bernard",
    "Dubois",
    "Thomas",
    "Robert",
    "Richard",
    "Petit",
    "Durand",
    "Leroy",
    "Moreau",
    "Simon",
    "Laurent",
    "Lefebvre",
    "Michel",
    "Garcia",
    "David",
    "Bertrand",
    "Roux",
    "Vincent",
    "Fournier",
    "Morel",
    "Girard",
    "Andre",
    "Lefevre",
    "Mercier",
    "Dupont",
    "Lambert",
    "Bonnet",
    "Francois",
    "Martinez",
    "Legrand",
    "Garnier",
    "Faure",
    "Rousseau",
    "Blanc",
    "Guerin",
    "Muller",
    "Henry",
    "Roussel",
    "Nicolas",
    "Perrin",
    "Morin",
    "Mathieu",
    "Clement",
    "Gauthier",
    "Dumont",
    "Lopez",
    "Fontaine",
    "Chevalier",
    "Robin",
    "Masson",
    "Sanchez",
    "Gerard",
    "Nguyen",
    "Boyer",
    "Denis",
    "Lemaire",
    "Duval",
    "Joly",
    "Gautier",
    "Roger",
    "Roche",
    "Roy",
    "Noel",
    "Meyer",
    "Lucas",
    "Meunier",
    "Jean",
    "Perez",
    "Marchand",
    "Dufour",
    "Blanchard",
    "Marie",
    "Barbier",
    "Brun",
    "Dumas",
    "Brunet",
    "Schmitt",
    "Leroux",
    "Colin",
    "Fernandez",
    "Pierre",
    "Renard",
    "Arnaud",
    "Rolland",
    "Caron",
    "Aubert",
    "Giraud",
    "Leclerc",
    "Vidal",
    "Bourgeois",
    "Renaud",
    "Lemoine",
    "Picard",
    "Gaillard",
    "Philippe",
    "Leclercq",
    "Lacroix",
    "Fabre",
    "Dupuis",
    "Olivier",
    "Rodriguez",
    "Da silva",
    "Hubert",
    "Louis",
    "Charles",
    "Guillot",
    "Riviere",
    "Le gall",
    "Guillaume",
    "Adam",
    "Rey",
    "Moulin",
    "Gonzalez",
    "Berger",
    "Lecomte",
    "Menard",
    "Fleury",
    "Deschamps",
    "Carpentier",
    "Julien",
    "Benoit",
    "Paris",
    "Maillard",
    "Marchal",
    "Aubry",
    "Vasseur",
    "Le roux",
    "Renault",
    "Jacquet",
    "Collet",
    "Prevost",
    "Poirier",
    "Charpentier",
    "Royer",
    "Huet",
    "Baron",
    "Dupuy",
    "Pons",
    "Paul",
    "Laine",
    "Carre",
    "Breton",
    "Remy",
    "Schneider",
    "Perrot",
    "Guyot",
    "Barre",
    "Marty",
    "Cousin"
  ],
  "prefix": [
    "M",
    "Mme",
    "Mlle",
    "Dr",
    "Prof"
  ],
  "title": {
    "job": [
      "Superviseur",
      "Executif",
      "Manager",
      "Ingenieur",
      "Specialiste",
      "Directeur",
      "Coordinateur",
      "Administrateur",
      "Architecte",
      "Analyste",
      "Designer",
      "Technicien",
      "Developpeur",
      "Producteur",
      "Consultant",
      "Assistant",
      "Agent",
      "Stagiaire"
    ]
  },
  "name": [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{last_name} #{first_name}"
  ]
};
fr.phone_number = {
  "formats": [
    "01########",
    "02########",
    "03########",
    "04########",
    "05########",
    "06########",
    "07########",
    "+33 1########",
    "+33 2########",
    "+33 3########",
    "+33 4########",
    "+33 5########",
    "+33 6########",
    "+33 7########"
  ]
};

},{}],68:[function(require,module,exports){
var it = {};
module["exports"] = it;
it.title = "Italian";
it.address = {
  "city_prefix": [
    "San",
    "Borgo",
    "Sesto",
    "Quarto",
    "Settimo"
  ],
  "city_suffix": [
    "a mare",
    "lido",
    "ligure",
    "del friuli",
    "salentino",
    "calabro",
    "veneto",
    "nell'emilia",
    "umbro",
    "laziale",
    "terme",
    "sardo"
  ],
  "country": [
    "Afghanistan",
    "Albania",
    "Algeria",
    "American Samoa",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antartide (territori a sud del 60° parallelo)",
    "Antigua e Barbuda",
    "Argentina",
    "Armenia",
    "Aruba",
    "Australia",
    "Austria",
    "Azerbaijan",
    "Bahamas",
    "Bahrain",
    "Bangladesh",
    "Barbados",
    "Bielorussia",
    "Belgio",
    "Belize",
    "Benin",
    "Bermuda",
    "Bhutan",
    "Bolivia",
    "Bosnia e Herzegovina",
    "Botswana",
    "Bouvet Island (Bouvetoya)",
    "Brasile",
    "Territorio dell'arcipelago indiano",
    "Isole Vergini Britanniche",
    "Brunei Darussalam",
    "Bulgaria",
    "Burkina Faso",
    "Burundi",
    "Cambogia",
    "Cameroon",
    "Canada",
    "Capo Verde",
    "Isole Cayman",
    "Repubblica Centrale Africana",
    "Chad",
    "Cile",
    "Cina",
    "Isola di Pasqua",
    "Isola di Cocos (Keeling)",
    "Colombia",
    "Comoros",
    "Congo",
    "Isole Cook",
    "Costa Rica",
    "Costa d'Avorio",
    "Croazia",
    "Cuba",
    "Cipro",
    "Repubblica Ceca",
    "Danimarca",
    "Gibuti",
    "Repubblica Dominicana",
    "Equador",
    "Egitto",
    "El Salvador",
    "Guinea Equatoriale",
    "Eritrea",
    "Estonia",
    "Etiopia",
    "Isole Faroe",
    "Isole Falkland (Malvinas)",
    "Fiji",
    "Finlandia",
    "Francia",
    "Guyana Francese",
    "Polinesia Francese",
    "Territori Francesi del sud",
    "Gabon",
    "Gambia",
    "Georgia",
    "Germania",
    "Ghana",
    "Gibilterra",
    "Grecia",
    "Groenlandia",
    "Grenada",
    "Guadalupa",
    "Guam",
    "Guatemala",
    "Guernsey",
    "Guinea",
    "Guinea-Bissau",
    "Guyana",
    "Haiti",
    "Heard Island and McDonald Islands",
    "Città del Vaticano",
    "Honduras",
    "Hong Kong",
    "Ungheria",
    "Islanda",
    "India",
    "Indonesia",
    "Iran",
    "Iraq",
    "Irlanda",
    "Isola di Man",
    "Israele",
    "Italia",
    "Giamaica",
    "Giappone",
    "Jersey",
    "Giordania",
    "Kazakhstan",
    "Kenya",
    "Kiribati",
    "Korea",
    "Kuwait",
    "Republicca Kirgiza",
    "Repubblica del Laos",
    "Latvia",
    "Libano",
    "Lesotho",
    "Liberia",
    "Libyan Arab Jamahiriya",
    "Liechtenstein",
    "Lituania",
    "Lussemburgo",
    "Macao",
    "Macedonia",
    "Madagascar",
    "Malawi",
    "Malesia",
    "Maldive",
    "Mali",
    "Malta",
    "Isole Marshall",
    "Martinica",
    "Mauritania",
    "Mauritius",
    "Mayotte",
    "Messico",
    "Micronesia",
    "Moldova",
    "Principato di Monaco",
    "Mongolia",
    "Montenegro",
    "Montserrat",
    "Marocco",
    "Mozambico",
    "Myanmar",
    "Namibia",
    "Nauru",
    "Nepal",
    "Antille Olandesi",
    "Olanda",
    "Nuova Caledonia",
    "Nuova Zelanda",
    "Nicaragua",
    "Niger",
    "Nigeria",
    "Niue",
    "Isole Norfolk",
    "Northern Mariana Islands",
    "Norvegia",
    "Oman",
    "Pakistan",
    "Palau",
    "Palestina",
    "Panama",
    "Papua Nuova Guinea",
    "Paraguay",
    "Peru",
    "Filippine",
    "Pitcairn Islands",
    "Polonia",
    "Portogallo",
    "Porto Rico",
    "Qatar",
    "Reunion",
    "Romania",
    "Russia",
    "Rwanda",
    "San Bartolomeo",
    "Sant'Elena",
    "Saint Kitts and Nevis",
    "Saint Lucia",
    "Saint Martin",
    "Saint Pierre and Miquelon",
    "Saint Vincent and the Grenadines",
    "Samoa",
    "San Marino",
    "Sao Tome and Principe",
    "Arabia Saudita",
    "Senegal",
    "Serbia",
    "Seychelles",
    "Sierra Leone",
    "Singapore",
    "Slovenia",
    "Isole Solomon",
    "Somalia",
    "Sud Africa",
    "Georgia del sud e South Sandwich Islands",
    "Spagna",
    "Sri Lanka",
    "Sudan",
    "Suriname",
    "Svalbard & Jan Mayen Islands",
    "Swaziland",
    "Svezia",
    "Svizzera",
    "Siria",
    "Taiwan",
    "Tajikistan",
    "Tanzania",
    "Tailandia",
    "Timor-Leste",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidad e Tobago",
    "Tunisia",
    "Turchia",
    "Turkmenistan",
    "Isole di Turks and Caicos",
    "Tuvalu",
    "Uganda",
    "Ucraina",
    "Emirati Arabi Uniti",
    "Regno Unito",
    "Stati Uniti d'America",
    "United States Minor Outlying Islands",
    "Isole Vergini Statunitensi",
    "Uruguay",
    "Uzbekistan",
    "Vanuatu",
    "Venezuela",
    "Vietnam",
    "Wallis and Futuna",
    "Western Sahara",
    "Yemen",
    "Zambia",
    "Zimbabwe"
  ],
  "building_number": [
    "###",
    "##",
    "#"
  ],
  "street_suffix": [
    "Piazza",
    "Strada",
    "Via",
    "Borgo",
    "Contrada",
    "Rotonda",
    "Incrocio"
  ],
  "secondary_address": [
    "Appartamento ##",
    "Piano #"
  ],
  "postcode": [
    "#####"
  ],
  "state": [
    "Agrigento",
    "Alessandria",
    "Ancona",
    "Aosta",
    "Arezzo",
    "Ascoli Piceno",
    "Asti",
    "Avellino",
    "Bari",
    "Barletta-Andria-Trani",
    "Belluno",
    "Benevento",
    "Bergamo",
    "Biella",
    "Bologna",
    "Bolzano",
    "Brescia",
    "Brindisi",
    "Cagliari",
    "Caltanissetta",
    "Campobasso",
    "Carbonia-Iglesias",
    "Caserta",
    "Catania",
    "Catanzaro",
    "Chieti",
    "Como",
    "Cosenza",
    "Cremona",
    "Crotone",
    "Cuneo",
    "Enna",
    "Fermo",
    "Ferrara",
    "Firenze",
    "Foggia",
    "Forlì-Cesena",
    "Frosinone",
    "Genova",
    "Gorizia",
    "Grosseto",
    "Imperia",
    "Isernia",
    "La Spezia",
    "L'Aquila",
    "Latina",
    "Lecce",
    "Lecco",
    "Livorno",
    "Lodi",
    "Lucca",
    "Macerata",
    "Mantova",
    "Massa-Carrara",
    "Matera",
    "Messina",
    "Milano",
    "Modena",
    "Monza e della Brianza",
    "Napoli",
    "Novara",
    "Nuoro",
    "Olbia-Tempio",
    "Oristano",
    "Padova",
    "Palermo",
    "Parma",
    "Pavia",
    "Perugia",
    "Pesaro e Urbino",
    "Pescara",
    "Piacenza",
    "Pisa",
    "Pistoia",
    "Pordenone",
    "Potenza",
    "Prato",
    "Ragusa",
    "Ravenna",
    "Reggio Calabria",
    "Reggio Emilia",
    "Rieti",
    "Rimini",
    "Roma",
    "Rovigo",
    "Salerno",
    "Medio Campidano",
    "Sassari",
    "Savona",
    "Siena",
    "Siracusa",
    "Sondrio",
    "Taranto",
    "Teramo",
    "Terni",
    "Torino",
    "Ogliastra",
    "Trapani",
    "Trento",
    "Treviso",
    "Trieste",
    "Udine",
    "Varese",
    "Venezia",
    "Verbano-Cusio-Ossola",
    "Vercelli",
    "Verona",
    "Vibo Valentia",
    "Vicenza",
    "Viterbo"
  ],
  "state_abbr": [
    "AG",
    "AL",
    "AN",
    "AO",
    "AR",
    "AP",
    "AT",
    "AV",
    "BA",
    "BT",
    "BL",
    "BN",
    "BG",
    "BI",
    "BO",
    "BZ",
    "BS",
    "BR",
    "CA",
    "CL",
    "CB",
    "CI",
    "CE",
    "CT",
    "CZ",
    "CH",
    "CO",
    "CS",
    "CR",
    "KR",
    "CN",
    "EN",
    "FM",
    "FE",
    "FI",
    "FG",
    "FC",
    "FR",
    "GE",
    "GO",
    "GR",
    "IM",
    "IS",
    "SP",
    "AQ",
    "LT",
    "LE",
    "LC",
    "LI",
    "LO",
    "LU",
    "MC",
    "MN",
    "MS",
    "MT",
    "ME",
    "MI",
    "MO",
    "MB",
    "NA",
    "NO",
    "NU",
    "OT",
    "OR",
    "PD",
    "PA",
    "PR",
    "PV",
    "PG",
    "PU",
    "PE",
    "PC",
    "PI",
    "PT",
    "PN",
    "PZ",
    "PO",
    "RG",
    "RA",
    "RC",
    "RE",
    "RI",
    "RN",
    "RM",
    "RO",
    "SA",
    "VS",
    "SS",
    "SV",
    "SI",
    "SR",
    "SO",
    "TA",
    "TE",
    "TR",
    "TO",
    "OG",
    "TP",
    "TN",
    "TV",
    "TS",
    "UD",
    "VA",
    "VE",
    "VB",
    "VC",
    "VR",
    "VV",
    "VI",
    "VT"
  ],
  "city": [
    "#{city_prefix} #{Name.first_name} #{city_suffix}",
    "#{city_prefix} #{Name.first_name}",
    "#{Name.first_name} #{city_suffix}",
    "#{Name.last_name} #{city_suffix}"
  ],
  "street_name": [
    "#{street_suffix} #{Name.first_name}",
    "#{street_suffix} #{Name.last_name}"
  ],
  "street_address": [
    "#{street_name} #{building_number}",
    "#{street_name} #{building_number}, #{secondary_address}"
  ],
  "default_country": [
    "Italia"
  ]
};
it.company = {
  "suffix": [
    "SPA",
    "e figli",
    "Group",
    "s.r.l."
  ],
  "noun": [
      "Abilità",
      "Access",
      "Adattatore",
      "Algoritmo",
      "Alleanza",
      "Analizzatore",
      "Applicazione",
      "Approccio",
      "Architettura",
      "Archivio",
      "Intelligenza artificiale",
      "Array",
      "Attitudine",
      "Benchmark",
      "Capacità",
      "Sfida",
      "Circuito",
      "Collaborazione",
      "Complessità",
      "Concetto",
      "Conglomerato",
      "Contingenza",
      "Core",
      "Database",
      "Data-warehouse",
      "Definizione",
      "Emulazione",
      "Codifica",
      "Criptazione",
      "Firmware",
      "Flessibilità",
      "Previsione",
      "Frame",
      "framework",
      "Funzione",
      "Funzionalità",
      "Interfaccia grafica",
      "Hardware",
      "Help-desk",
      "Gerarchia",
      "Hub",
      "Implementazione",
      "Infrastruttura",
      "Iniziativa",
      "Installazione",
      "Set di istruzioni",
      "Interfaccia",
      "Soluzione internet",
      "Intranet",
      "Conoscenza base",
      "Matrici",
      "Matrice",
      "Metodologia",
      "Middleware",
      "Migrazione",
      "Modello",
      "Moderazione",
      "Monitoraggio",
      "Moratoria",
      "Rete",
      "Architettura aperta",
      "Sistema aperto",
      "Orchestrazione",
      "Paradigma",
      "Parallelismo",
      "Policy",
      "Portale",
      "Struttura di prezzo",
      "Prodotto",
      "Produttività",
      "Progetto",
      "Proiezione",
      "Protocollo",
      "Servizio clienti",
      "Software",
      "Soluzione",
      "Standardizzazione",
      "Strategia",
      "Struttura",
      "Successo",
      "Sovrastruttura",
      "Supporto",
      "Sinergia",
      "Task-force",
      "Finestra temporale",
      "Strumenti",
      "Utilizzazione",
      "Sito web",
      "Forza lavoro"
    ],
    "descriptor":[
      "adattiva",
      "avanzata",
      "migliorata",
      "assimilata",
      "automatizzata",
      "bilanciata",
      "centralizzata",
      "compatibile",
      "configurabile",
      "cross-platform",
      "decentralizzata",
      "digitalizzata",
      "distribuita",
      "piccola",
      "ergonomica",
      "esclusiva",
      "espansa",
      "estesa",
      "configurabile",
      "fondamentale",
      "orizzontale",
      "implementata",
      "innovativa",
      "integrata",
      "intuitiva",
      "inversa",
      "gestita",
      "obbligatoria",
      "monitorata",
      "multi-canale",
      "multi-laterale",
      "open-source",
      "operativa",
      "ottimizzata",
      "organica",
      "persistente",
      "polarizzata",
      "proattiva",
      "programmabile",
      "progressiva",
      "reattiva",
      "riallineata",
      "ricontestualizzata",
      "ridotta",
      "robusta",
      "sicura",
      "condivisibile",
      "stand-alone",
      "switchabile",
      "sincronizzata",
      "sinergica",
      "totale",
      "universale",
      "user-friendly",
      "versatile",
      "virtuale",
      "visionaria"
    ],
    "adjective":
    [
      "24 ore",
      "24/7",
      "terza generazione",
      "quarta generazione",
      "quinta generazione",
      "sesta generazione",
      "asimmetrica",
      "asincrona",
      "background",
      "bi-direzionale",
      "biforcata",
      "bottom-line",
      "coerente",
      "coesiva",
      "composita",
      "sensibile al contesto",
      "basta sul contesto",
      "basata sul contenuto",
      "dedicata",
      "didattica",
      "direzionale",
      "discreta",
      "dinamica",
      "eco-centrica",
      "esecutiva",
      "esplicita",
      "full-range",
      "globale",
      "euristica",
      "alto livello",
      "olistica",
      "omogenea",
      "ibrida",
      "impattante",
      "incrementale",
      "intangibile",
      "interattiva",
      "intermediaria",
      "locale",
      "logistica",
      "massimizzata",
      "metodica",
      "mission-critical",
      "mobile",
      "modulare",
      "motivazionale",
      "multimedia",
      "multi-tasking",
      "nazionale",
      "neutrale",
      "nextgeneration",
      "non-volatile",
      "object-oriented",
      "ottima",
      "ottimizzante",
      "radicale",
      "real-time",
      "reciproca",
      "regionale",
      "responsiva",
      "scalabile",
      "secondaria",
      "stabile",
      "statica",
      "sistematica",
      "sistemica",
      "tangibile",
      "terziaria",
      "uniforme",
      "valore aggiunto"
  ],
  "bs_noun": [
      "partnerships",
      "comunità",
      "ROI",
      "soluzioni",
      "e-services",
      "nicchie",
      "tecnologie",
      "contenuti",
      "supply-chains",
      "convergenze",
      "relazioni",
      "architetture",
      "interfacce",
      "mercati",
      "e-commerce",
      "sistemi",
      "modelli",
      "schemi",
      "reti",
      "applicazioni",
      "metriche",
      "e-business",
      "funzionalità",
      "esperienze",
      "webservices",
      "metodologie"
    ],
    "bs_verb":
    [
      "implementate",
      "utilizzo",
      "integrate",
      "ottimali",
      "evolutive",
      "abilitate",
      "reinventate",
      "aggregate",
      "migliorate",
      "incentivate",
      "monetizzate",
      "sinergizzate",
      "strategiche",
      "deploy",
      "marchi",
      "accrescitive",
      "target",
      "sintetizzate",
      "spedizioni",
      "massimizzate",
      "innovazione",
      "guida",
      "estensioni",
      "generate",
      "exploit",
      "transizionali",
      "matrici",
      "ricontestualizzate"
    ],
    "bs_adjective":
    [
      "valore aggiunto",
      "verticalizzate",
      "proattive",
      "forti",
      "rivoluzionari",
      "scalabili",
      "innovativi",
      "intuitivi",
      "strategici",
      "e-business",
      "mission-critical",
      "24/7",
      "globali",
      "B2B",
      "B2C",
      "granulari",
      "virtuali",
      "virali",
      "dinamiche",
      "magnetiche",
      "web",
      "interattive",
      "sexy",
      "back-end",
      "real-time",
      "efficienti",
      "front-end",
      "distributivi",
      "estensibili",
      "mondiali",
      "open-source",
      "cross-platform",
      "sinergiche",
      "out-of-the-box",
      "enterprise",
      "integrate",
      "di impatto",
      "wireless",
      "trasparenti",
      "next-generation",
      "cutting-edge",
      "visionari",
      "plug-and-play",
      "collaborative",
      "olistiche",
      "ricche"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name} #{suffix}",
    "#{Name.last_name}, #{Name.last_name} e #{Name.last_name} #{suffix}"
  ]
};
it.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.com",
    "hotmail.com",
    "email.it",
    "libero.it",
    "yahoo.it"
  ],
  "domain_suffix": [
    "com",
    "com",
    "com",
    "net",
    "org",
    "it",
    "it",
    "it"
  ]
};
it.name = {
  "first_name": [
    "Aaron",
    "Akira",
    "Alberto",
    "Alessandro",
    "Alighieri",
    "Amedeo",
    "Amos",
    "Anselmo",
    "Antonino",
    "Arcibaldo",
    "Armando",
    "Artes",
    "Audenico",
    "Ausonio",
    "Bacchisio",
    "Battista",
    "Bernardo",
    "Boris",
    "Caio",
    "Carlo",
    "Cecco",
    "Cirino",
    "Cleros",
    "Costantino",
    "Damiano",
    "Danny",
    "Davide",
    "Demian",
    "Dimitri",
    "Domingo",
    "Dylan",
    "Edilio",
    "Egidio",
    "Elio",
    "Emanuel",
    "Enrico",
    "Ercole",
    "Ermes",
    "Ethan",
    "Eusebio",
    "Evangelista",
    "Fabiano",
    "Ferdinando",
    "Fiorentino",
    "Flavio",
    "Fulvio",
    "Gabriele",
    "Gastone",
    "Germano",
    "Giacinto",
    "Gianantonio",
    "Gianleonardo",
    "Gianmarco",
    "Gianriccardo",
    "Gioacchino",
    "Giordano",
    "Giuliano",
    "Graziano",
    "Guido",
    "Harry",
    "Iacopo",
    "Ilario",
    "Ione",
    "Italo",
    "Jack",
    "Jari",
    "Joey",
    "Joseph",
    "Kai",
    "Kociss",
    "Laerte",
    "Lauro",
    "Leonardo",
    "Liborio",
    "Lorenzo",
    "Ludovico",
    "Maggiore",
    "Manuele",
    "Mariano",
    "Marvin",
    "Matteo",
    "Mauro",
    "Michael",
    "Mirco",
    "Modesto",
    "Muzio",
    "Nabil",
    "Nathan",
    "Nick",
    "Noah",
    "Odino",
    "Olo",
    "Oreste",
    "Osea",
    "Pablo",
    "Patrizio",
    "Piererminio",
    "Pierfrancesco",
    "Piersilvio",
    "Priamo",
    "Quarto",
    "Quirino",
    "Radames",
    "Raniero",
    "Renato",
    "Rocco",
    "Romeo",
    "Rosalino",
    "Rudy",
    "Sabatino",
    "Samuel",
    "Santo",
    "Sebastian",
    "Serse",
    "Silvano",
    "Sirio",
    "Tancredi",
    "Terzo",
    "Timoteo",
    "Tolomeo",
    "Trevis",
    "Ubaldo",
    "Ulrico",
    "Valdo",
    "Neri",
    "Vinicio",
    "Walter",
    "Xavier",
    "Yago",
    "Zaccaria",
    "Abramo",
    "Adriano",
    "Alan",
    "Albino",
    "Alessio",
    "Alighiero",
    "Amerigo",
    "Anastasio",
    "Antimo",
    "Antonio",
    "Arduino",
    "Aroldo",
    "Arturo",
    "Augusto",
    "Avide",
    "Baldassarre",
    "Bettino",
    "Bortolo",
    "Caligola",
    "Carmelo",
    "Celeste",
    "Ciro",
    "Costanzo",
    "Dante",
    "Danthon",
    "Davis",
    "Demis",
    "Dindo",
    "Domiziano",
    "Edipo",
    "Egisto",
    "Eliziario",
    "Emidio",
    "Enzo",
    "Eriberto",
    "Erminio",
    "Ettore",
    "Eustachio",
    "Fabio",
    "Fernando",
    "Fiorenzo",
    "Folco",
    "Furio",
    "Gaetano",
    "Gavino",
    "Gerlando",
    "Giacobbe",
    "Giancarlo",
    "Gianmaria",
    "Giobbe",
    "Giorgio",
    "Giulio",
    "Gregorio",
    "Hector",
    "Ian",
    "Ippolito",
    "Ivano",
    "Jacopo",
    "Jarno",
    "Joannes",
    "Joshua",
    "Karim",
    "Kris",
    "Lamberto",
    "Lazzaro",
    "Leone",
    "Lino",
    "Loris",
    "Luigi",
    "Manfredi",
    "Marco",
    "Marino",
    "Marzio",
    "Mattia",
    "Max",
    "Michele",
    "Mirko",
    "Moreno",
    "Nadir",
    "Nazzareno",
    "Nestore",
    "Nico",
    "Noel",
    "Odone",
    "Omar",
    "Orfeo",
    "Osvaldo",
    "Pacifico",
    "Pericle",
    "Pietro",
    "Primo",
    "Quasimodo",
    "Radio",
    "Raoul",
    "Renzo",
    "Rodolfo",
    "Romolo",
    "Rosolino",
    "Rufo",
    "Sabino",
    "Sandro",
    "Sasha",
    "Secondo",
    "Sesto",
    "Silverio",
    "Siro",
    "Tazio",
    "Teseo",
    "Timothy",
    "Tommaso",
    "Tristano",
    "Umberto",
    "Ariel",
    "Artemide",
    "Assia",
    "Azue",
    "Benedetta",
    "Bibiana",
    "Brigitta",
    "Carmela",
    "Cassiopea",
    "Cesidia",
    "Cira",
    "Clea",
    "Cleopatra",
    "Clodovea",
    "Concetta",
    "Cosetta",
    "Cristyn",
    "Damiana",
    "Danuta",
    "Deborah",
    "Demi",
    "Diamante",
    "Diana",
    "Donatella",
    "Doriana",
    "Edvige",
    "Elda",
    "Elga",
    "Elsa",
    "Emilia",
    "Enrica",
    "Erminia",
    "Eufemia",
    "Evita",
    "Fatima",
    "Felicia",
    "Filomena",
    "Flaviana",
    "Fortunata",
    "Gelsomina",
    "Genziana",
    "Giacinta",
    "Gilda",
    "Giovanna",
    "Giulietta",
    "Grazia",
    "Guendalina",
    "Helga",
    "Ileana",
    "Ingrid",
    "Irene",
    "Isabel",
    "Isira",
    "Ivonne",
    "Jelena",
    "Jole",
    "Claudia",
    "Kayla",
    "Kristel",
    "Laura",
    "Lucia",
    "Lia",
    "Lidia",
    "Lisa",
    "Loredana",
    "Loretta",
    "Luce",
    "Lucrezia",
    "Luna",
    "Maika",
    "Marcella",
    "Maria",
    "Mariagiulia",
    "Marianita",
    "Mariapia",
    "Marieva",
    "Marina",
    "Maristella",
    "Maruska",
    "Matilde",
    "Mecren",
    "Mercedes",
    "Mietta",
    "Miriana",
    "Miriam",
    "Monia",
    "Morgana",
    "Naomi",
    "Nayade",
    "Nicoletta",
    "Ninfa",
    "Noemi",
    "Nunzia",
    "Olimpia",
    "Oretta",
    "Ortensia",
    "Penelope",
    "Piccarda",
    "Prisca",
    "Rebecca",
    "Rita",
    "Rosalba",
    "Rosaria",
    "Rosita",
    "Ruth",
    "Samira",
    "Sarita",
    "Selvaggia",
    "Shaira",
    "Sibilla",
    "Soriana",
    "Thea",
    "Tosca",
    "Ursula",
    "Vania",
    "Vera",
    "Vienna",
    "Violante",
    "Vitalba",
    "Zelida"
  ],
  "last_name": [
    "Amato",
    "Barbieri",
    "Barone",
    "Basile",
    "Battaglia",
    "Bellini",
    "Benedetti",
    "Bernardi",
    "Bianc",
    "Bianchi",
    "Bruno",
    "Caputo",
    "Carbon",
    "Caruso",
    "Cattaneo",
    "Colombo",
    "Cont",
    "Conte",
    "Coppola",
    "Costa",
    "Costantin",
    "D'amico",
    "D'angelo",
    "Damico",
    "De Angelis",
    "De luca",
    "De rosa",
    "De Santis",
    "Donati",
    "Esposito",
    "Fabbri",
    "Farin",
    "Ferrara",
    "Ferrari",
    "Ferraro",
    "Ferretti",
    "Ferri",
    "Fior",
    "Fontana",
    "Galli",
    "Gallo",
    "Gatti",
    "Gentile",
    "Giordano",
    "Giuliani",
    "Grassi",
    "Grasso",
    "Greco",
    "Guerra",
    "Leone",
    "Lombardi",
    "Lombardo",
    "Longo",
    "Mancini",
    "Marchetti",
    "Marian",
    "Marini",
    "Marino",
    "Martinelli",
    "Martini",
    "Martino",
    "Mazza",
    "Messina",
    "Milani",
    "Montanari",
    "Monti",
    "Morelli",
    "Moretti",
    "Negri",
    "Neri",
    "Orlando",
    "Pagano",
    "Palmieri",
    "Palumbo",
    "Parisi",
    "Pellegrini",
    "Pellegrino",
    "Piras",
    "Ricci",
    "Rinaldi",
    "Riva",
    "Rizzi",
    "Rizzo",
    "Romano",
    "Ross",
    "Rossetti",
    "Ruggiero",
    "Russo",
    "Sala",
    "Sanna",
    "Santoro",
    "Sartori",
    "Serr",
    "Silvestri",
    "Sorrentino",
    "Testa",
    "Valentini",
    "Villa",
    "Vitale",
    "Vitali"
  ],
  "prefix": [
    "Sig.",
    "Dott.",
    "Dr.",
    "Ing."
  ],
  "suffix": [],
  "name": [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}"
  ]
};
it.phone_number = {
  "formats": [
    "+## ### ## ## ####",
    "+## ## #######",
    "+## ## ########",
    "+## ### #######",
    "+## ### ########",
    "+## #### #######",
    "+## #### ########",
    "0## ### ####",
    "+39 0## ### ###",
    "3## ### ###",
    "+39 3## ### ###"
  ]
};

},{}],69:[function(require,module,exports){
var ja = {};
module["exports"] = ja;
ja.title = "Japanese";
ja.address = {
  "postcode": [
    "###-####"
  ],
  "state": [
    "北海道",
    "青森県",
    "岩手県",
    "宮城県",
    "秋田県",
    "山形県",
    "福島県",
    "茨城県",
    "栃木県",
    "群馬県",
    "埼玉県",
    "千葉県",
    "東京都",
    "神奈川県",
    "新潟県",
    "富山県",
    "石川県",
    "福井県",
    "山梨県",
    "長野県",
    "岐阜県",
    "静岡県",
    "愛知県",
    "三重県",
    "滋賀県",
    "京都府",
    "大阪府",
    "兵庫県",
    "奈良県",
    "和歌山県",
    "鳥取県",
    "島根県",
    "岡山県",
    "広島県",
    "山口県",
    "徳島県",
    "香川県",
    "愛媛県",
    "高知県",
    "福岡県",
    "佐賀県",
    "長崎県",
    "熊本県",
    "大分県",
    "宮崎県",
    "鹿児島県",
    "沖縄県"
  ],
  "state_abbr": [
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "11",
    "12",
    "13",
    "14",
    "15",
    "16",
    "17",
    "18",
    "19",
    "20",
    "21",
    "22",
    "23",
    "24",
    "25",
    "26",
    "27",
    "28",
    "29",
    "30",
    "31",
    "32",
    "33",
    "34",
    "35",
    "36",
    "37",
    "38",
    "39",
    "40",
    "41",
    "42",
    "43",
    "44",
    "45",
    "46",
    "47"
  ],
  "city_prefix": [
    "北",
    "東",
    "西",
    "南",
    "新",
    "湖",
    "港"
  ],
  "city_suffix": [
    "市",
    "区",
    "町",
    "村"
  ],
  "city": [
    "#{city_prefix}#{Name.first_name}#{city_suffix}",
    "#{Name.first_name}#{city_suffix}",
    "#{city_prefix}#{Name.last_name}#{city_suffix}",
    "#{Name.last_name}#{city_suffix}"
  ],
  "street_name": [
    "#{Name.first_name}#{street_suffix}",
    "#{Name.last_name}#{street_suffix}"
  ]
};
ja.phone_number = {
  "formats": [
    "0####-#-####",
    "0###-##-####",
    "0##-###-####",
    "0#-####-####"
  ]
};
ja.cell_phone = {
  "formats": [
    "090-####-####",
    "080-####-####",
    "070-####-####"
  ]
};
ja.name = {
  "last_name": [
    "佐藤",
    "鈴木",
    "高橋",
    "田中",
    "渡辺",
    "伊藤",
    "山本",
    "中村",
    "小林",
    "加藤",
    "吉田",
    "山田",
    "佐々木",
    "山口",
    "斎藤",
    "松本",
    "井上",
    "木村",
    "林",
    "清水"
  ],
  "first_name": [
    "大翔",
    "蓮",
    "颯太",
    "樹",
    "大和",
    "陽翔",
    "陸斗",
    "太一",
    "海翔",
    "蒼空",
    "翼",
    "陽菜",
    "結愛",
    "結衣",
    "杏",
    "莉子",
    "美羽",
    "結菜",
    "心愛",
    "愛菜",
    "美咲"
  ],
  "name": [
    "#{last_name} #{first_name}"
  ]
};

},{}],70:[function(require,module,exports){
var ko = {};
module["exports"] = ko;
ko.title = "Korean";
ko.address = {
  "postcode": [
    "###-###"
  ],
  "state": [
    "강원",
    "경기",
    "경남",
    "경북",
    "광주",
    "대구",
    "대전",
    "부산",
    "서울",
    "울산",
    "인천",
    "전남",
    "전북",
    "제주",
    "충남",
    "충북",
    "세종"
  ],
  "state_abbr": [
    "강원",
    "경기",
    "경남",
    "경북",
    "광주",
    "대구",
    "대전",
    "부산",
    "서울",
    "울산",
    "인천",
    "전남",
    "전북",
    "제주",
    "충남",
    "충북",
    "세종"
  ],
  "city_suffix": [
    "구",
    "시",
    "군"
  ],
  "city_name": [
    "강릉",
    "양양",
    "인제",
    "광주",
    "구리",
    "부천",
    "밀양",
    "통영",
    "창원",
    "거창",
    "고성",
    "양산",
    "김천",
    "구미",
    "영주",
    "광산",
    "남",
    "북",
    "고창",
    "군산",
    "남원",
    "동작",
    "마포",
    "송파",
    "용산",
    "부평",
    "강화",
    "수성"
  ],
  "city": [
    "#{city_name}#{city_suffix}"
  ],
  "street_root": [
    "상계",
    "화곡",
    "신정",
    "목",
    "잠실",
    "면목",
    "주안",
    "안양",
    "중",
    "정왕",
    "구로",
    "신월",
    "연산",
    "부평",
    "창",
    "만수",
    "중계",
    "검단",
    "시흥",
    "상도",
    "방배",
    "장유",
    "상",
    "광명",
    "신길",
    "행신",
    "대명",
    "동탄"
  ],
  "street_suffix": [
    "읍",
    "면",
    "동"
  ],
  "street_name": [
    "#{street_root}#{street_suffix}"
  ]
};
ko.phone_number = {
  "formats": [
    "0#-#####-####",
    "0##-###-####",
    "0##-####-####"
  ]
};
ko.company = {
  "suffix": [
    "연구소",
    "게임즈",
    "그룹",
    "전자",
    "물산",
    "코리아"
  ],
  "prefix": [
    "주식회사",
    "한국"
  ],
  "name": [
    "#{prefix} #{Name.first_name}",
    "#{Name.first_name} #{suffix}"
  ]
};
ko.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.co.kr",
    "hanmail.net",
    "naver.com"
  ],
  "domain_suffix": [
    "co.kr",
    "com",
    "biz",
    "info",
    "ne.kr",
    "net",
    "or.kr",
    "org"
  ]
};
ko.lorem = {
  "words": [
    "국가는",
    "법률이",
    "정하는",
    "바에",
    "의하여",
    "재외국민을",
    "보호할",
    "의무를",
    "진다.",
    "모든",
    "국민은",
    "신체의",
    "자유를",
    "가진다.",
    "국가는",
    "전통문화의",
    "계승·발전과",
    "민족문화의",
    "창달에",
    "노력하여야",
    "한다.",
    "통신·방송의",
    "시설기준과",
    "신문의",
    "기능을",
    "보장하기",
    "위하여",
    "필요한",
    "사항은",
    "법률로",
    "정한다.",
    "헌법에",
    "의하여",
    "체결·공포된",
    "조약과",
    "일반적으로",
    "승인된",
    "국제법규는",
    "국내법과",
    "같은",
    "효력을",
    "가진다.",
    "다만,",
    "현행범인인",
    "경우와",
    "장기",
    "3년",
    "이상의",
    "형에",
    "해당하는",
    "죄를",
    "범하고",
    "도피",
    "또는",
    "증거인멸의",
    "염려가",
    "있을",
    "때에는",
    "사후에",
    "영장을",
    "청구할",
    "수",
    "있다.",
    "저작자·발명가·과학기술자와",
    "예술가의",
    "권리는",
    "법률로써",
    "보호한다.",
    "형사피고인은",
    "유죄의",
    "판결이",
    "확정될",
    "때까지는",
    "무죄로",
    "추정된다.",
    "모든",
    "국민은",
    "행위시의",
    "법률에",
    "의하여",
    "범죄를",
    "구성하지",
    "아니하는",
    "행위로",
    "소추되지",
    "아니하며,",
    "동일한",
    "범죄에",
    "대하여",
    "거듭",
    "처벌받지",
    "아니한다.",
    "국가는",
    "평생교육을",
    "진흥하여야",
    "한다.",
    "모든",
    "국민은",
    "사생활의",
    "비밀과",
    "자유를",
    "침해받지",
    "아니한다.",
    "의무교육은",
    "무상으로",
    "한다.",
    "저작자·발명가·과학기술자와",
    "예술가의",
    "권리는",
    "법률로써",
    "보호한다.",
    "국가는",
    "모성의",
    "보호를",
    "위하여",
    "노력하여야",
    "한다.",
    "헌법에",
    "의하여",
    "체결·공포된",
    "조약과",
    "일반적으로",
    "승인된",
    "국제법규는",
    "국내법과",
    "같은",
    "효력을",
    "가진다."
  ]
};
ko.name = {
  "last_name": [
    "김",
    "이",
    "박",
    "최",
    "정",
    "강",
    "조",
    "윤",
    "장",
    "임",
    "오",
    "한",
    "신",
    "서",
    "권",
    "황",
    "안",
    "송",
    "류",
    "홍"
  ],
  "first_name": [
    "서연",
    "민서",
    "서현",
    "지우",
    "서윤",
    "지민",
    "수빈",
    "하은",
    "예은",
    "윤서",
    "민준",
    "지후",
    "지훈",
    "준서",
    "현우",
    "예준",
    "건우",
    "현준",
    "민재",
    "우진",
    "은주"
  ],
  "name": [
    "#{last_name} #{first_name}"
  ]
};

},{}],71:[function(require,module,exports){
var nb_NO = {};
module["exports"] = nb_NO;
nb_NO.title = "Norwegian";
nb_NO.address = {
  "city_root": [
    "Fet",
    "Gjes",
    "Høy",
    "Inn",
    "Fager",
    "Lille",
    "Lo",
    "Mal",
    "Nord",
    "Nær",
    "Sand",
    "Sme",
    "Stav",
    "Stor",
    "Tand",
    "Ut",
    "Vest"
  ],
  "city_suffix": [
    "berg",
    "borg",
    "by",
    "bø",
    "dal",
    "eid",
    "fjell",
    "fjord",
    "foss",
    "grunn",
    "hamn",
    "havn",
    "helle",
    "mark",
    "nes",
    "odden",
    "sand",
    "sjøen",
    "stad",
    "strand",
    "strøm",
    "sund",
    "vik",
    "vær",
    "våg",
    "ø",
    "øy",
    "ås"
  ],
  "street_prefix": [
    "Øvre",
    "Nedre",
    "Søndre",
    "Gamle",
    "Østre",
    "Vestre"
  ],
  "street_root": [
    "Eike",
    "Bjørke",
    "Gran",
    "Vass",
    "Furu",
    "Litj",
    "Lille",
    "Høy",
    "Fosse",
    "Elve",
    "Ku",
    "Konvall",
    "Soldugg",
    "Hestemyr",
    "Granitt",
    "Hegge",
    "Rogne",
    "Fiol",
    "Sol",
    "Ting",
    "Malm",
    "Klokker",
    "Preste",
    "Dam",
    "Geiterygg",
    "Bekke",
    "Berg",
    "Kirke",
    "Kors",
    "Bru",
    "Blåveis",
    "Torg",
    "Sjø"
  ],
  "street_suffix": [
    "alléen",
    "bakken",
    "berget",
    "bråten",
    "eggen",
    "engen",
    "ekra",
    "faret",
    "flata",
    "gata",
    "gjerdet",
    "grenda",
    "gropa",
    "hagen",
    "haugen",
    "havna",
    "holtet",
    "høgda",
    "jordet",
    "kollen",
    "kroken",
    "lia",
    "lunden",
    "lyngen",
    "løkka",
    "marka",
    "moen",
    "myra",
    "plassen",
    "ringen",
    "roa",
    "røa",
    "skogen",
    "skrenten",
    "spranget",
    "stien",
    "stranda",
    "stubben",
    "stykket",
    "svingen",
    "tjernet",
    "toppen",
    "tunet",
    "vollen",
    "vika",
    "åsen"
  ],
  "common_street_suffix": [
    "sgate",
    "svei",
    "s Gate",
    "s Vei",
    "gata",
    "veien"
  ],
  "building_number": [
    "#",
    "##"
  ],
  "secondary_address": [
    "Leil. ###",
    "Oppgang A",
    "Oppgang B"
  ],
  "postcode": [
    "####",
    "####",
    "####",
    "0###"
  ],
  "state": [
    ""
  ],
  "city": [
    "#{city_root}#{city_suffix}"
  ],
  "street_name": [
    "#{street_root}#{street_suffix}",
    "#{street_prefix} #{street_root}#{street_suffix}",
    "#{Name.first_name}#{common_street_suffix}",
    "#{Name.last_name}#{common_street_suffix}"
  ],
  "street_address": [
    "#{street_name} #{building_number}"
  ],
  "default_country": [
    "Norge"
  ]
};
nb_NO.company = {
  "suffix": [
    "Gruppen",
    "AS",
    "ASA",
    "BA",
    "RFH",
    "og Sønner"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} og #{Name.last_name}"
  ]
};
nb_NO.internet = {
  "domain_suffix": [
    "no",
    "com",
    "net",
    "org"
  ]
};
nb_NO.name = {
  "first_name": [
    "Emma",
    "Sara",
    "Thea",
    "Ida",
    "Julie",
    "Nora",
    "Emilie",
    "Ingrid",
    "Hanna",
    "Maria",
    "Sofie",
    "Anna",
    "Malin",
    "Amalie",
    "Vilde",
    "Frida",
    "Andrea",
    "Tuva",
    "Victoria",
    "Mia",
    "Karoline",
    "Mathilde",
    "Martine",
    "Linnea",
    "Marte",
    "Hedda",
    "Marie",
    "Helene",
    "Silje",
    "Leah",
    "Maja",
    "Elise",
    "Oda",
    "Kristine",
    "Aurora",
    "Kaja",
    "Camilla",
    "Mari",
    "Maren",
    "Mina",
    "Selma",
    "Jenny",
    "Celine",
    "Eline",
    "Sunniva",
    "Natalie",
    "Tiril",
    "Synne",
    "Sandra",
    "Madeleine",
    "Markus",
    "Mathias",
    "Kristian",
    "Jonas",
    "Andreas",
    "Alexander",
    "Martin",
    "Sander",
    "Daniel",
    "Magnus",
    "Henrik",
    "Tobias",
    "Kristoffer",
    "Emil",
    "Adrian",
    "Sebastian",
    "Marius",
    "Elias",
    "Fredrik",
    "Thomas",
    "Sondre",
    "Benjamin",
    "Jakob",
    "Oliver",
    "Lucas",
    "Oskar",
    "Nikolai",
    "Filip",
    "Mats",
    "William",
    "Erik",
    "Simen",
    "Ole",
    "Eirik",
    "Isak",
    "Kasper",
    "Noah",
    "Lars",
    "Joakim",
    "Johannes",
    "Håkon",
    "Sindre",
    "Jørgen",
    "Herman",
    "Anders",
    "Jonathan",
    "Even",
    "Theodor",
    "Mikkel",
    "Aksel"
  ],
  "feminine_name": [
    "Emma",
    "Sara",
    "Thea",
    "Ida",
    "Julie",
    "Nora",
    "Emilie",
    "Ingrid",
    "Hanna",
    "Maria",
    "Sofie",
    "Anna",
    "Malin",
    "Amalie",
    "Vilde",
    "Frida",
    "Andrea",
    "Tuva",
    "Victoria",
    "Mia",
    "Karoline",
    "Mathilde",
    "Martine",
    "Linnea",
    "Marte",
    "Hedda",
    "Marie",
    "Helene",
    "Silje",
    "Leah",
    "Maja",
    "Elise",
    "Oda",
    "Kristine",
    "Aurora",
    "Kaja",
    "Camilla",
    "Mari",
    "Maren",
    "Mina",
    "Selma",
    "Jenny",
    "Celine",
    "Eline",
    "Sunniva",
    "Natalie",
    "Tiril",
    "Synne",
    "Sandra",
    "Madeleine"
  ],
  "masculine_name": [
    "Markus",
    "Mathias",
    "Kristian",
    "Jonas",
    "Andreas",
    "Alexander",
    "Martin",
    "Sander",
    "Daniel",
    "Magnus",
    "Henrik",
    "Tobias",
    "Kristoffer",
    "Emil",
    "Adrian",
    "Sebastian",
    "Marius",
    "Elias",
    "Fredrik",
    "Thomas",
    "Sondre",
    "Benjamin",
    "Jakob",
    "Oliver",
    "Lucas",
    "Oskar",
    "Nikolai",
    "Filip",
    "Mats",
    "William",
    "Erik",
    "Simen",
    "Ole",
    "Eirik",
    "Isak",
    "Kasper",
    "Noah",
    "Lars",
    "Joakim",
    "Johannes",
    "Håkon",
    "Sindre",
    "Jørgen",
    "Herman",
    "Anders",
    "Jonathan",
    "Even",
    "Theodor",
    "Mikkel",
    "Aksel"
  ],
  "last_name": [
    "Johansen",
    "Hansen",
    "Andersen",
    "Kristiansen",
    "Larsen",
    "Olsen",
    "Solberg",
    "Andresen",
    "Pedersen",
    "Nilsen",
    "Berg",
    "Halvorsen",
    "Karlsen",
    "Svendsen",
    "Jensen",
    "Haugen",
    "Martinsen",
    "Eriksen",
    "Sørensen",
    "Johnsen",
    "Myhrer",
    "Johannessen",
    "Nielsen",
    "Hagen",
    "Pettersen",
    "Bakke",
    "Skuterud",
    "Løken",
    "Gundersen",
    "Strand",
    "Jørgensen",
    "Kvarme",
    "Røed",
    "Sæther",
    "Stensrud",
    "Moe",
    "Kristoffersen",
    "Jakobsen",
    "Holm",
    "Aas",
    "Lie",
    "Moen",
    "Andreassen",
    "Vedvik",
    "Nguyen",
    "Jacobsen",
    "Torgersen",
    "Ruud",
    "Krogh",
    "Christiansen",
    "Bjerke",
    "Aalerud",
    "Borge",
    "Sørlie",
    "Berge",
    "Østli",
    "Ødegård",
    "Torp",
    "Henriksen",
    "Haukelidsæter",
    "Fjeld",
    "Danielsen",
    "Aasen",
    "Fredriksen",
    "Dahl",
    "Berntsen",
    "Arnesen",
    "Wold",
    "Thoresen",
    "Solheim",
    "Skoglund",
    "Bakken",
    "Amundsen",
    "Solli",
    "Smogeli",
    "Kristensen",
    "Glosli",
    "Fossum",
    "Evensen",
    "Eide",
    "Carlsen",
    "Østby",
    "Vegge",
    "Tangen",
    "Smedsrud",
    "Olstad",
    "Lunde",
    "Kleven",
    "Huseby",
    "Bjørnstad",
    "Ryan",
    "Rasmussen",
    "Nygård",
    "Nordskaug",
    "Nordby",
    "Mathisen",
    "Hopland",
    "Gran",
    "Finstad",
    "Edvardsen"
  ],
  "prefix": [
    "Dr.",
    "Prof."
  ],
  "suffix": [
    "Jr.",
    "Sr.",
    "I",
    "II",
    "III",
    "IV",
    "V"
  ],
  "name": [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name} #{suffix}",
    "#{feminine_name} #{feminine_name} #{last_name}",
    "#{masculine_name} #{masculine_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name}"
  ]
};
nb_NO.phone_number = {
  "formats": [
    "########",
    "## ## ## ##",
    "### ## ###",
    "+47 ## ## ## ##"
  ]
};

},{}],72:[function(require,module,exports){
var nep = {};
module["exports"] = nep;
nep.title = "Nepalese";
nep.name = {
  "first_name": [
    "Aarav",
    "Ajita",
    "Amit",
    "Amita",
    "Amrit",
    "Arijit",
    "Ashmi",
    "Asmita",
    "Bibek",
    "Bijay",
    "Bikash",
    "Bina",
    "Bishal",
    "Bishnu",
    "Buddha",
    "Deepika",
    "Dipendra",
    "Gagan",
    "Ganesh",
    "Khem",
    "Krishna",
    "Laxmi",
    "Manisha",
    "Nabin",
    "Nikita",
    "Niraj",
    "Nischal",
    "Padam",
    "Pooja",
    "Prabin",
    "Prakash",
    "Prashant",
    "Prem",
    "Purna",
    "Rajendra",
    "Rajina",
    "Raju",
    "Rakesh",
    "Ranjan",
    "Ratna",
    "Sagar",
    "Sandeep",
    "Sanjay",
    "Santosh",
    "Sarita",
    "Shilpa",
    "Shirisha",
    "Shristi",
    "Siddhartha",
    "Subash",
    "Sumeet",
    "Sunita",
    "Suraj",
    "Susan",
    "Sushant"
  ],
  "last_name": [
    "Adhikari",
    "Aryal",
    "Baral",
    "Basnet",
    "Bastola",
    "Basynat",
    "Bhandari",
    "Bhattarai",
    "Chettri",
    "Devkota",
    "Dhakal",
    "Dongol",
    "Ghale",
    "Gurung",
    "Gyawali",
    "Hamal",
    "Jung",
    "KC",
    "Kafle",
    "Karki",
    "Khadka",
    "Koirala",
    "Lama",
    "Limbu",
    "Magar",
    "Maharjan",
    "Niroula",
    "Pandey",
    "Pradhan",
    "Rana",
    "Raut",
    "Sai",
    "Shai",
    "Shakya",
    "Sherpa",
    "Shrestha",
    "Subedi",
    "Tamang",
    "Thapa"
  ]
};
nep.address = {
  "postcode": [
    0
  ],
  "state": [
    "Baglung",
    "Banke",
    "Bara",
    "Bardiya",
    "Bhaktapur",
    "Bhojupu",
    "Chitwan",
    "Dailekh",
    "Dang",
    "Dhading",
    "Dhankuta",
    "Dhanusa",
    "Dolakha",
    "Dolpha",
    "Gorkha",
    "Gulmi",
    "Humla",
    "Ilam",
    "Jajarkot",
    "Jhapa",
    "Jumla",
    "Kabhrepalanchok",
    "Kalikot",
    "Kapilvastu",
    "Kaski",
    "Kathmandu",
    "Lalitpur",
    "Lamjung",
    "Manang",
    "Mohottari",
    "Morang",
    "Mugu",
    "Mustang",
    "Myagdi",
    "Nawalparasi",
    "Nuwakot",
    "Palpa",
    "Parbat",
    "Parsa",
    "Ramechhap",
    "Rauswa",
    "Rautahat",
    "Rolpa",
    "Rupandehi",
    "Sankhuwasabha",
    "Sarlahi",
    "Sindhuli",
    "Sindhupalchok",
    "Sunsari",
    "Surket",
    "Syangja",
    "Tanahu",
    "Terhathum"
  ],
  "city": [
    "Bhaktapur",
    "Biratnagar",
    "Birendranagar",
    "Birgunj",
    "Butwal",
    "Damak",
    "Dharan",
    "Gaur",
    "Gorkha",
    "Hetauda",
    "Itahari",
    "Janakpur",
    "Kathmandu",
    "Lahan",
    "Nepalgunj",
    "Pokhara"
  ],
  "default_country": [
    "Nepal"
  ]
};
nep.internet = {
  "free_email": [
    "worldlink.com.np",
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ],
  "domain_suffix": [
    "np",
    "com",
    "info",
    "net",
    "org"
  ]
};
nep.company = {
  "suffix": [
    "Pvt Ltd",
    "Group",
    "Ltd",
    "Limited"
  ]
};
nep.phone_number = {
  "formats": [
    "##-#######",
    "+977-#-#######",
    "+977########"
  ]
};

},{}],73:[function(require,module,exports){
var nl = {};
module["exports"] = nl;
nl.title = "Dutch";
nl.address = {
  "city_prefix": [
    "Noord",
    "Oost",
    "West",
    "Zuid",
    "Nieuw",
    "Oud"
  ],
  "city_suffix": [
    "dam",
    "berg",
    " aan de Rijn",
    " aan de IJssel",
    "swaerd",
    "endrecht",
    "recht",
    "ambacht",
    "enmaes",
    "wijk",
    "sland",
    "stroom",
    "sluus",
    "dijk",
    "dorp",
    "burg",
    "veld",
    "sluis",
    "koop",
    "lek",
    "hout",
    "geest",
    "kerk",
    "woude",
    "hoven",
    "hoten",
    "ingen",
    "plas",
    "meer"
  ],
  "city": [
    "#{Name.first_name}#{city_suffix}",
    "#{Name.last_name}#{city_suffix}",
    "#{city_prefix} #{Name.first_name}#{city_suffix}",
    "#{city_prefix} #{Name.last_name}#{city_suffix}"
  ],
  "country": [
    "Afghanistan",
    "Akrotiri",
    "Albanië",
    "Algerije",
    "Amerikaanse Maagdeneilanden",
    "Amerikaans-Samoa",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antarctica",
    "Antigua en Barbuda",
    "Arctic Ocean",
    "Argentinië",
    "Armenië",
    "Aruba",
    "Ashmore and Cartier Islands",
    "Atlantic Ocean",
    "Australië",
    "Azerbeidzjan",
    "Bahama's",
    "Bahrein",
    "Bangladesh",
    "Barbados",
    "Belarus",
    "België",
    "Belize",
    "Benin",
    "Bermuda",
    "Bhutan",
    "Bolivië",
    "Bosnië-Herzegovina",
    "Botswana",
    "Bouvet Island",
    "Brazilië",
    "British Indian Ocean Territory",
    "Britse Maagdeneilanden",
    "Brunei",
    "Bulgarije",
    "Burkina Faso",
    "Burundi",
    "Cambodja",
    "Canada",
    "Caymaneilanden",
    "Centraal-Afrikaanse Republiek",
    "Chili",
    "China",
    "Christmas Island",
    "Clipperton Island",
    "Cocos (Keeling) Islands",
    "Colombia",
    "Comoren (Unie)",
    "Congo (Democratische Republiek)",
    "Congo (Volksrepubliek)",
    "Cook",
    "Coral Sea Islands",
    "Costa Rica",
    "Cuba",
    "Cyprus",
    "Denemarken",
    "Dhekelia",
    "Djibouti",
    "Dominica",
    "Dominicaanse Republiek",
    "Duitsland",
    "Ecuador",
    "Egypte",
    "El Salvador",
    "Equatoriaal-Guinea",
    "Eritrea",
    "Estland",
    "Ethiopië",
    "European Union",
    "Falkland",
    "Faroe Islands",
    "Fiji",
    "Filipijnen",
    "Finland",
    "Frankrijk",
    "Frans-Polynesië",
    "French Southern and Antarctic Lands",
    "Gabon",
    "Gambia",
    "Gaza Strip",
    "Georgië",
    "Ghana",
    "Gibraltar",
    "Grenada",
    "Griekenland",
    "Groenland",
    "Guam",
    "Guatemala",
    "Guernsey",
    "Guinea",
    "Guinee-Bissau",
    "Guyana",
    "Haïti",
    "Heard Island and McDonald Islands",
    "Heilige Stoel",
    "Honduras",
    "Hongarije",
    "Hongkong",
    "Ierland",
    "IJsland",
    "India",
    "Indian Ocean",
    "Indonesië",
    "Irak",
    "Iran",
    "Isle of Man",
    "Israël",
    "Italië",
    "Ivoorkust",
    "Jamaica",
    "Jan Mayen",
    "Japan",
    "Jemen",
    "Jersey",
    "Jordanië",
    "Kaapverdië",
    "Kameroen",
    "Kazachstan",
    "Kenia",
    "Kirgizstan",
    "Kiribati",
    "Koeweit",
    "Kroatië",
    "Laos",
    "Lesotho",
    "Letland",
    "Libanon",
    "Liberia",
    "Libië",
    "Liechtenstein",
    "Litouwen",
    "Luxemburg",
    "Macao",
    "Macedonië",
    "Madagaskar",
    "Malawi",
    "Maldiven",
    "Maleisië",
    "Mali",
    "Malta",
    "Marokko",
    "Marshall Islands",
    "Mauritanië",
    "Mauritius",
    "Mayotte",
    "Mexico",
    "Micronesia, Federated States of",
    "Moldavië",
    "Monaco",
    "Mongolië",
    "Montenegro",
    "Montserrat",
    "Mozambique",
    "Myanmar",
    "Namibië",
    "Nauru",
    "Navassa Island",
    "Nederland",
    "Nederlandse Antillen",
    "Nepal",
    "Ngwane",
    "Nicaragua",
    "Nieuw-Caledonië",
    "Nieuw-Zeeland",
    "Niger",
    "Nigeria",
    "Niue",
    "Noordelijke Marianen",
    "Noord-Korea",
    "Noorwegen",
    "Norfolk Island",
    "Oekraïne",
    "Oezbekistan",
    "Oman",
    "Oostenrijk",
    "Pacific Ocean",
    "Pakistan",
    "Palau",
    "Panama",
    "Papoea-Nieuw-Guinea",
    "Paracel Islands",
    "Paraguay",
    "Peru",
    "Pitcairn",
    "Polen",
    "Portugal",
    "Puerto Rico",
    "Qatar",
    "Roemenië",
    "Rusland",
    "Rwanda",
    "Saint Helena",
    "Saint Lucia",
    "Saint Vincent en de Grenadines",
    "Saint-Pierre en Miquelon",
    "Salomon",
    "Samoa",
    "San Marino",
    "São Tomé en Principe",
    "Saudi-Arabië",
    "Senegal",
    "Servië",
    "Seychellen",
    "Sierra Leone",
    "Singapore",
    "Sint-Kitts en Nevis",
    "Slovenië",
    "Slowakije",
    "Soedan",
    "Somalië",
    "South Georgia and the South Sandwich Islands",
    "Southern Ocean",
    "Spanje",
    "Spratly Islands",
    "Sri Lanka",
    "Suriname",
    "Svalbard",
    "Syrië",
    "Tadzjikistan",
    "Taiwan",
    "Tanzania",
    "Thailand",
    "Timor Leste",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidad en Tobago",
    "Tsjaad",
    "Tsjechië",
    "Tunesië",
    "Turkije",
    "Turkmenistan",
    "Turks-en Caicoseilanden",
    "Tuvalu",
    "Uganda",
    "Uruguay",
    "Vanuatu",
    "Venezuela",
    "Verenigd Koninkrijk",
    "Verenigde Arabische Emiraten",
    "Verenigde Staten van Amerika",
    "Vietnam",
    "Wake Island",
    "Wallis en Futuna",
    "Wereld",
    "West Bank",
    "Westelijke Sahara",
    "Zambia",
    "Zimbabwe",
    "Zuid-Afrika",
    "Zuid-Korea",
    "Zweden",
    "Zwitserland"
  ],
  "building_number": [
    "#",
    "##",
    "###",
    "###a",
    "###b",
    "###c",
    "### I",
    "### II",
    "### III"
  ],
  "street_suffix": [
    "straat",
    "laan",
    "weg",
    "plantsoen",
    "park"
  ],
  "secondary_address": [
    "1 hoog",
    "2 hoog",
    "3 hoog"
  ],
  "street_name": [
    "#{Name.first_name}#{street_suffix}",
    "#{Name.last_name}#{street_suffix}"
  ],
  "street_address": [
    "#{street_name} #{building_number}"
  ],
  "postcode": [
    "#### ??"
  ],
  "state": [
    "Noord-Holland",
    "Zuid-Holland",
    "Utrecht",
    "Zeeland",
    "Overijssel",
    "Gelderland",
    "Drenthe",
    "Friesland",
    "Groningen",
    "Noord-Brabant",
    "Limburg",
    "Flevoland"
  ],
  "default_country": [
    "Nederland"
  ]
};
nl.company = {
  "suffix": [
    "BV",
    "V.O.F.",
    "Group",
    "en Zonen"
  ]
};
nl.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ],
  "domain_suffix": [
    "nl",
    "com",
    "net",
    "org"
  ]
};
nl.lorem = {
  "words": [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ],
  "supplemental": [
    "abbas",
    "abduco",
    "abeo",
    "abscido",
    "absconditus",
    "absens",
    "absorbeo",
    "absque",
    "abstergo",
    "absum",
    "abundans",
    "abutor",
    "accedo",
    "accendo",
    "acceptus",
    "accipio",
    "accommodo",
    "accusator",
    "acer",
    "acerbitas",
    "acervus",
    "acidus",
    "acies",
    "acquiro",
    "acsi",
    "adamo",
    "adaugeo",
    "addo",
    "adduco",
    "ademptio",
    "adeo",
    "adeptio",
    "adfectus",
    "adfero",
    "adficio",
    "adflicto",
    "adhaero",
    "adhuc",
    "adicio",
    "adimpleo",
    "adinventitias",
    "adipiscor",
    "adiuvo",
    "administratio",
    "admiratio",
    "admitto",
    "admoneo",
    "admoveo",
    "adnuo",
    "adopto",
    "adsidue",
    "adstringo",
    "adsuesco",
    "adsum",
    "adulatio",
    "adulescens",
    "adultus",
    "aduro",
    "advenio",
    "adversus",
    "advoco",
    "aedificium",
    "aeger",
    "aegre",
    "aegrotatio",
    "aegrus",
    "aeneus",
    "aequitas",
    "aequus",
    "aer",
    "aestas",
    "aestivus",
    "aestus",
    "aetas",
    "aeternus",
    "ager",
    "aggero",
    "aggredior",
    "agnitio",
    "agnosco",
    "ago",
    "ait",
    "aiunt",
    "alienus",
    "alii",
    "alioqui",
    "aliqua",
    "alius",
    "allatus",
    "alo",
    "alter",
    "altus",
    "alveus",
    "amaritudo",
    "ambitus",
    "ambulo",
    "amicitia",
    "amiculum",
    "amissio",
    "amita",
    "amitto",
    "amo",
    "amor",
    "amoveo",
    "amplexus",
    "amplitudo",
    "amplus",
    "ancilla",
    "angelus",
    "angulus",
    "angustus",
    "animadverto",
    "animi",
    "animus",
    "annus",
    "anser",
    "ante",
    "antea",
    "antepono",
    "antiquus",
    "aperio",
    "aperte",
    "apostolus",
    "apparatus",
    "appello",
    "appono",
    "appositus",
    "approbo",
    "apto",
    "aptus",
    "apud",
    "aqua",
    "ara",
    "aranea",
    "arbitro",
    "arbor",
    "arbustum",
    "arca",
    "arceo",
    "arcesso",
    "arcus",
    "argentum",
    "argumentum",
    "arguo",
    "arma",
    "armarium",
    "armo",
    "aro",
    "ars",
    "articulus",
    "artificiose",
    "arto",
    "arx",
    "ascisco",
    "ascit",
    "asper",
    "aspicio",
    "asporto",
    "assentator",
    "astrum",
    "atavus",
    "ater",
    "atqui",
    "atrocitas",
    "atrox",
    "attero",
    "attollo",
    "attonbitus",
    "auctor",
    "auctus",
    "audacia",
    "audax",
    "audentia",
    "audeo",
    "audio",
    "auditor",
    "aufero",
    "aureus",
    "auris",
    "aurum",
    "aut",
    "autem",
    "autus",
    "auxilium",
    "avaritia",
    "avarus",
    "aveho",
    "averto",
    "avoco",
    "baiulus",
    "balbus",
    "barba",
    "bardus",
    "basium",
    "beatus",
    "bellicus",
    "bellum",
    "bene",
    "beneficium",
    "benevolentia",
    "benigne",
    "bestia",
    "bibo",
    "bis",
    "blandior",
    "bonus",
    "bos",
    "brevis",
    "cado",
    "caecus",
    "caelestis",
    "caelum",
    "calamitas",
    "calcar",
    "calco",
    "calculus",
    "callide",
    "campana",
    "candidus",
    "canis",
    "canonicus",
    "canto",
    "capillus",
    "capio",
    "capitulus",
    "capto",
    "caput",
    "carbo",
    "carcer",
    "careo",
    "caries",
    "cariosus",
    "caritas",
    "carmen",
    "carpo",
    "carus",
    "casso",
    "caste",
    "casus",
    "catena",
    "caterva",
    "cattus",
    "cauda",
    "causa",
    "caute",
    "caveo",
    "cavus",
    "cedo",
    "celebrer",
    "celer",
    "celo",
    "cena",
    "cenaculum",
    "ceno",
    "censura",
    "centum",
    "cerno",
    "cernuus",
    "certe",
    "certo",
    "certus",
    "cervus",
    "cetera",
    "charisma",
    "chirographum",
    "cibo",
    "cibus",
    "cicuta",
    "cilicium",
    "cimentarius",
    "ciminatio",
    "cinis",
    "circumvenio",
    "cito",
    "civis",
    "civitas",
    "clam",
    "clamo",
    "claro",
    "clarus",
    "claudeo",
    "claustrum",
    "clementia",
    "clibanus",
    "coadunatio",
    "coaegresco",
    "coepi",
    "coerceo",
    "cogito",
    "cognatus",
    "cognomen",
    "cogo",
    "cohaero",
    "cohibeo",
    "cohors",
    "colligo",
    "colloco",
    "collum",
    "colo",
    "color",
    "coma",
    "combibo",
    "comburo",
    "comedo",
    "comes",
    "cometes",
    "comis",
    "comitatus",
    "commemoro",
    "comminor",
    "commodo",
    "communis",
    "comparo",
    "compello",
    "complectus",
    "compono",
    "comprehendo",
    "comptus",
    "conatus",
    "concedo",
    "concido",
    "conculco",
    "condico",
    "conduco",
    "confero",
    "confido",
    "conforto",
    "confugo",
    "congregatio",
    "conicio",
    "coniecto",
    "conitor",
    "coniuratio",
    "conor",
    "conqueror",
    "conscendo",
    "conservo",
    "considero",
    "conspergo",
    "constans",
    "consuasor",
    "contabesco",
    "contego",
    "contigo",
    "contra",
    "conturbo",
    "conventus",
    "convoco",
    "copia",
    "copiose",
    "cornu",
    "corona",
    "corpus",
    "correptius",
    "corrigo",
    "corroboro",
    "corrumpo",
    "coruscus",
    "cotidie",
    "crapula",
    "cras",
    "crastinus",
    "creator",
    "creber",
    "crebro",
    "credo",
    "creo",
    "creptio",
    "crepusculum",
    "cresco",
    "creta",
    "cribro",
    "crinis",
    "cruciamentum",
    "crudelis",
    "cruentus",
    "crur",
    "crustulum",
    "crux",
    "cubicularis",
    "cubitum",
    "cubo",
    "cui",
    "cuius",
    "culpa",
    "culpo",
    "cultellus",
    "cultura",
    "cum",
    "cunabula",
    "cunae",
    "cunctatio",
    "cupiditas",
    "cupio",
    "cuppedia",
    "cupressus",
    "cur",
    "cura",
    "curatio",
    "curia",
    "curiositas",
    "curis",
    "curo",
    "curriculum",
    "currus",
    "cursim",
    "curso",
    "cursus",
    "curto",
    "curtus",
    "curvo",
    "curvus",
    "custodia",
    "damnatio",
    "damno",
    "dapifer",
    "debeo",
    "debilito",
    "decens",
    "decerno",
    "decet",
    "decimus",
    "decipio",
    "decor",
    "decretum",
    "decumbo",
    "dedecor",
    "dedico",
    "deduco",
    "defaeco",
    "defendo",
    "defero",
    "defessus",
    "defetiscor",
    "deficio",
    "defigo",
    "defleo",
    "defluo",
    "defungo",
    "degenero",
    "degero",
    "degusto",
    "deinde",
    "delectatio",
    "delego",
    "deleo",
    "delibero",
    "delicate",
    "delinquo",
    "deludo",
    "demens",
    "demergo",
    "demitto",
    "demo",
    "demonstro",
    "demoror",
    "demulceo",
    "demum",
    "denego",
    "denique",
    "dens",
    "denuncio",
    "denuo",
    "deorsum",
    "depereo",
    "depono",
    "depopulo",
    "deporto",
    "depraedor",
    "deprecator",
    "deprimo",
    "depromo",
    "depulso",
    "deputo",
    "derelinquo",
    "derideo",
    "deripio",
    "desidero",
    "desino",
    "desipio",
    "desolo",
    "desparatus",
    "despecto",
    "despirmatio",
    "infit",
    "inflammatio",
    "paens",
    "patior",
    "patria",
    "patrocinor",
    "patruus",
    "pauci",
    "paulatim",
    "pauper",
    "pax",
    "peccatus",
    "pecco",
    "pecto",
    "pectus",
    "pecunia",
    "pecus",
    "peior",
    "pel",
    "ocer",
    "socius",
    "sodalitas",
    "sol",
    "soleo",
    "solio",
    "solitudo",
    "solium",
    "sollers",
    "sollicito",
    "solum",
    "solus",
    "solutio",
    "solvo",
    "somniculosus",
    "somnus",
    "sonitus",
    "sono",
    "sophismata",
    "sopor",
    "sordeo",
    "sortitus",
    "spargo",
    "speciosus",
    "spectaculum",
    "speculum",
    "sperno",
    "spero",
    "spes",
    "spiculum",
    "spiritus",
    "spoliatio",
    "sponte",
    "stabilis",
    "statim",
    "statua",
    "stella",
    "stillicidium",
    "stipes",
    "stips",
    "sto",
    "strenuus",
    "strues",
    "studio",
    "stultus",
    "suadeo",
    "suasoria",
    "sub",
    "subito",
    "subiungo",
    "sublime",
    "subnecto",
    "subseco",
    "substantia",
    "subvenio",
    "succedo",
    "succurro",
    "sufficio",
    "suffoco",
    "suffragium",
    "suggero",
    "sui",
    "sulum",
    "sum",
    "summa",
    "summisse",
    "summopere",
    "sumo",
    "sumptus",
    "supellex",
    "super",
    "suppellex",
    "supplanto",
    "suppono",
    "supra",
    "surculus",
    "surgo",
    "sursum",
    "suscipio",
    "suspendo",
    "sustineo",
    "suus",
    "synagoga",
    "tabella",
    "tabernus",
    "tabesco",
    "tabgo",
    "tabula",
    "taceo",
    "tactus",
    "taedium",
    "talio",
    "talis",
    "talus",
    "tam",
    "tamdiu",
    "tamen",
    "tametsi",
    "tamisium",
    "tamquam",
    "tandem",
    "tantillus",
    "tantum",
    "tardus",
    "tego",
    "temeritas",
    "temperantia",
    "templum",
    "temptatio",
    "tempus",
    "tenax",
    "tendo",
    "teneo",
    "tener",
    "tenuis",
    "tenus",
    "tepesco",
    "tepidus",
    "ter",
    "terebro",
    "teres",
    "terga",
    "tergeo",
    "tergiversatio",
    "tergo",
    "tergum",
    "termes",
    "terminatio",
    "tero",
    "terra",
    "terreo",
    "territo",
    "terror",
    "tersus",
    "tertius",
    "testimonium",
    "texo",
    "textilis",
    "textor",
    "textus",
    "thalassinus",
    "theatrum",
    "theca",
    "thema",
    "theologus",
    "thermae",
    "thesaurus",
    "thesis",
    "thorax",
    "thymbra",
    "thymum",
    "tibi",
    "timidus",
    "timor",
    "titulus",
    "tolero",
    "tollo",
    "tondeo",
    "tonsor",
    "torqueo",
    "torrens",
    "tot",
    "totidem",
    "toties",
    "totus",
    "tracto",
    "trado",
    "traho",
    "trans",
    "tredecim",
    "tremo",
    "trepide",
    "tres",
    "tribuo",
    "tricesimus",
    "triduana",
    "triginta",
    "tripudio",
    "tristis",
    "triumphus",
    "trucido",
    "truculenter",
    "tubineus",
    "tui",
    "tum",
    "tumultus",
    "tunc",
    "turba",
    "turbo",
    "turpe",
    "turpis",
    "tutamen",
    "tutis",
    "tyrannus",
    "uberrime",
    "ubi",
    "ulciscor",
    "ullus",
    "ulterius",
    "ultio",
    "ultra",
    "umbra",
    "umerus",
    "umquam",
    "una",
    "unde",
    "undique",
    "universe",
    "unus",
    "urbanus",
    "urbs",
    "uredo",
    "usitas",
    "usque",
    "ustilo",
    "ustulo",
    "usus",
    "uter",
    "uterque",
    "utilis",
    "utique",
    "utor",
    "utpote",
    "utrimque",
    "utroque",
    "utrum",
    "uxor",
    "vaco",
    "vacuus",
    "vado",
    "vae",
    "valde",
    "valens",
    "valeo",
    "valetudo",
    "validus",
    "vallum",
    "vapulus",
    "varietas",
    "varius",
    "vehemens",
    "vel",
    "velociter",
    "velum",
    "velut",
    "venia",
    "venio",
    "ventito",
    "ventosus",
    "ventus",
    "venustas",
    "ver",
    "verbera",
    "verbum",
    "vere",
    "verecundia",
    "vereor",
    "vergo",
    "veritas",
    "vero",
    "versus",
    "verto",
    "verumtamen",
    "verus",
    "vesco",
    "vesica",
    "vesper",
    "vespillo",
    "vester",
    "vestigium",
    "vestrum",
    "vetus",
    "via",
    "vicinus",
    "vicissitudo",
    "victoria",
    "victus",
    "videlicet",
    "video",
    "viduata",
    "viduo",
    "vigilo",
    "vigor",
    "vilicus",
    "vilis",
    "vilitas",
    "villa",
    "vinco",
    "vinculum",
    "vindico",
    "vinitor",
    "vinum",
    "vir",
    "virga",
    "virgo",
    "viridis",
    "viriliter",
    "virtus",
    "vis",
    "viscus",
    "vita",
    "vitiosus",
    "vitium",
    "vito",
    "vivo",
    "vix",
    "vobis",
    "vociferor",
    "voco",
    "volaticus",
    "volo",
    "volubilis",
    "voluntarius",
    "volup",
    "volutabrum",
    "volva",
    "vomer",
    "vomica",
    "vomito",
    "vorago",
    "vorax",
    "voro",
    "vos",
    "votum",
    "voveo",
    "vox",
    "vulariter",
    "vulgaris",
    "vulgivagus",
    "vulgo",
    "vulgus",
    "vulnero",
    "vulnus",
    "vulpes",
    "vulticulus",
    "vultuosus",
    "xiphias"
  ]
};
nl.name = {
  "first_name": [
    "Amber",
    "Anna",
    "Anne",
    "Anouk",
    "Bas",
    "Bram",
    "Britt",
    "Daan",
    "Emma",
    "Eva",
    "Femke",
    "Finn",
    "Fleur",
    "Iris",
    "Isa",
    "Jan",
    "Jasper",
    "Jayden",
    "Jesse",
    "Johannes",
    "Julia",
    "Julian",
    "Kevin",
    "Lars",
    "Lieke",
    "Lisa",
    "Lotte",
    "Lucas",
    "Luuk",
    "Maud",
    "Max",
    "Mike",
    "Milan",
    "Nick",
    "Niels",
    "Noa",
    "Rick",
    "Roos",
    "Ruben",
    "Sander",
    "Sanne",
    "Sem",
    "Sophie",
    "Stijn",
    "Sven",
    "Thijs",
    "Thijs",
    "Thomas",
    "Tim",
    "Tom"
  ],
  "tussenvoegsel": [
    "van",
    "van de",
    "van den",
    "van 't",
    "van het",
    "de",
    "den"
  ],
  "last_name": [
    "Bakker",
    "Beek",
    "Berg",
    "Boer",
    "Bos",
    "Bosch",
    "Brink",
    "Broek",
    "Brouwer",
    "Bruin",
    "Dam",
    "Dekker",
    "Dijk",
    "Dijkstra",
    "Graaf",
    "Groot",
    "Haan",
    "Hendriks",
    "Heuvel",
    "Hoek",
    "Jacobs",
    "Jansen",
    "Janssen",
    "Jong",
    "Klein",
    "Kok",
    "Koning",
    "Koster",
    "Leeuwen",
    "Linden",
    "Maas",
    "Meer",
    "Meijer",
    "Mulder",
    "Peters",
    "Ruiter",
    "Schouten",
    "Smit",
    "Smits",
    "Stichting",
    "Veen",
    "Ven",
    "Vermeulen",
    "Visser",
    "Vliet",
    "Vos",
    "Vries",
    "Wal",
    "Willems",
    "Wit"
  ],
  "prefix": [
    "Dhr.",
    "Mevr. Dr.",
    "Bsc",
    "Msc",
    "Prof."
  ],
  "suffix": [
    "Jr.",
    "Sr.",
    "I",
    "II",
    "III",
    "IV",
    "V"
  ],
  "name": [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name} #{suffix}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{tussenvoegsel} #{last_name}",
    "#{first_name} #{tussenvoegsel} #{last_name}"
  ]
};
nl.phone_number = {
  "formats": [
    "(####) ######",
    "##########",
    "06########",
    "06 #### ####"
  ]
};

},{}],74:[function(require,module,exports){
var pl = {};
module["exports"] = pl;
pl.title = "Polish";
pl.name = {
  "first_name": [
    "Aaron",
    "Abraham",
    "Adam",
    "Adrian",
    "Atanazy",
    "Agaton",
    "Alan",
    "Albert",
    "Aleksander",
    "Aleksy",
    "Alfred",
    "Alwar",
    "Ambroży",
    "Anatol",
    "Andrzej",
    "Antoni",
    "Apollinary",
    "Apollo",
    "Arkady",
    "Arkadiusz",
    "Archibald",
    "Arystarch",
    "Arnold",
    "Arseniusz",
    "Artur",
    "August",
    "Baldwin",
    "Bazyli",
    "Benedykt",
    "Beniamin",
    "Bernard",
    "Bertrand",
    "Bertram",
    "Borys",
    "Brajan",
    "Bruno",
    "Cezary",
    "Cecyliusz",
    "Karol",
    "Krystian",
    "Krzysztof",
    "Klarencjusz",
    "Klaudiusz",
    "Klemens",
    "Konrad",
    "Konstanty",
    "Konstantyn",
    "Kornel",
    "Korneliusz",
    "Korneli",
    "Cyryl",
    "Cyrus",
    "Damian",
    "Daniel",
    "Dariusz",
    "Dawid",
    "Dionizy",
    "Demetriusz",
    "Dominik",
    "Donald",
    "Dorian",
    "Edgar",
    "Edmund",
    "Edward",
    "Edwin",
    "Efrem",
    "Efraim",
    "Eliasz",
    "Eleazar",
    "Emil",
    "Emanuel",
    "Erast",
    "Ernest",
    "Eugeniusz",
    "Eustracjusz",
    "Fabian",
    "Feliks",
    "Florian",
    "Franciszek",
    "Fryderyk",
    "Gabriel",
    "Gedeon",
    "Galfryd",
    "Jerzy",
    "Gerald",
    "Gerazym",
    "Gilbert",
    "Gonsalwy",
    "Grzegorz",
    "Gwido",
    "Harald",
    "Henryk",
    "Herbert",
    "Herman",
    "Hilary",
    "Horacy",
    "Hubert",
    "Hugo",
    "Ignacy",
    "Igor",
    "Hilarion",
    "Innocenty",
    "Hipolit",
    "Ireneusz",
    "Erwin",
    "Izaak",
    "Izajasz",
    "Izydor",
    "Jakub",
    "Jeremi",
    "Jeremiasz",
    "Hieronim",
    "Gerald",
    "Joachim",
    "Jan",
    "Janusz",
    "Jonatan",
    "Józef",
    "Jozue",
    "Julian",
    "Juliusz",
    "Justyn",
    "Kalistrat",
    "Kazimierz",
    "Wawrzyniec",
    "Laurenty",
    "Laurencjusz",
    "Łazarz",
    "Leon",
    "Leonard",
    "Leonid",
    "Leon",
    "Ludwik",
    "Łukasz",
    "Lucjan",
    "Magnus",
    "Makary",
    "Marceli",
    "Marek",
    "Marcin",
    "Mateusz",
    "Maurycy",
    "Maksym",
    "Maksymilian",
    "Michał",
    "Miron",
    "Modest",
    "Mojżesz",
    "Natan",
    "Natanael",
    "Nazariusz",
    "Nazary",
    "Nestor",
    "Mikołaj",
    "Nikodem",
    "Olaf",
    "Oleg",
    "Oliwier",
    "Onufry",
    "Orestes",
    "Oskar",
    "Ansgary",
    "Osmund",
    "Pankracy",
    "Pantaleon",
    "Patryk",
    "Patrycjusz",
    "Patrycy",
    "Paweł",
    "Piotr",
    "Filemon",
    "Filip",
    "Platon",
    "Polikarp",
    "Porfiry",
    "Porfiriusz",
    "Prokles",
    "Prokul",
    "Prokop",
    "Kwintyn",
    "Randolf",
    "Rafał",
    "Rajmund",
    "Reginald",
    "Rajnold",
    "Ryszard",
    "Robert",
    "Roderyk",
    "Roger",
    "Roland",
    "Roman",
    "Romeo",
    "Reginald",
    "Rudolf",
    "Samson",
    "Samuel",
    "Salwator",
    "Sebastian",
    "Serafin",
    "Sergiusz",
    "Seweryn",
    "Zygmunt",
    "Sylwester",
    "Szymon",
    "Salomon",
    "Spirydion",
    "Stanisław",
    "Szczepan",
    "Stefan",
    "Terencjusz",
    "Teodor",
    "Tomasz",
    "Tymoteusz",
    "Tobiasz",
    "Walenty",
    "Walentyn",
    "Walerian",
    "Walery",
    "Wiktor",
    "Wincenty",
    "Witalis",
    "Włodzimierz",
    "Władysław",
    "Błażej",
    "Walter",
    "Walgierz",
    "Wacław",
    "Wilfryd",
    "Wilhelm",
    "Ksawery",
    "Ksenofont",
    "Jerzy",
    "Zachariasz",
    "Zachary",
    "Ada",
    "Adelajda",
    "Agata",
    "Agnieszka",
    "Agrypina",
    "Aida",
    "Aleksandra",
    "Alicja",
    "Alina",
    "Amanda",
    "Anastazja",
    "Angela",
    "Andżelika",
    "Angelina",
    "Anna",
    "Hanna",
    "—",
    "Antonina",
    "Ariadna",
    "Aurora",
    "Barbara",
    "Beatrycze",
    "Berta",
    "Brygida",
    "Kamila",
    "Karolina",
    "Karolina",
    "Kornelia",
    "Katarzyna",
    "Cecylia",
    "Karolina",
    "Chloe",
    "Krystyna",
    "Klara",
    "Klaudia",
    "Klementyna",
    "Konstancja",
    "Koralia",
    "Daria",
    "Diana",
    "Dina",
    "Dorota",
    "Edyta",
    "Eleonora",
    "Eliza",
    "Elżbieta",
    "Izabela",
    "Elwira",
    "Emilia",
    "Estera",
    "Eudoksja",
    "Eudokia",
    "Eugenia",
    "Ewa",
    "Ewelina",
    "Ferdynanda",
    "Florencja",
    "Franciszka",
    "Gabriela",
    "Gertruda",
    "Gloria",
    "Gracja",
    "Jadwiga",
    "Helena",
    "Henryka",
    "Nadzieja",
    "Ida",
    "Ilona",
    "Helena",
    "Irena",
    "Irma",
    "Izabela",
    "Izolda",
    "Jakubina",
    "Joanna",
    "Janina",
    "Żaneta",
    "Joanna",
    "Ginewra",
    "Józefina",
    "Judyta",
    "Julia",
    "Julia",
    "Julita",
    "Justyna",
    "Kira",
    "Cyra",
    "Kleopatra",
    "Larysa",
    "Laura",
    "Laurencja",
    "Laurentyna",
    "Lea",
    "Leila",
    "Eleonora",
    "Liliana",
    "Lilianna",
    "Lilia",
    "Lilla",
    "Liza",
    "Eliza",
    "Laura",
    "Ludwika",
    "Luiza",
    "Łucja",
    "Lucja",
    "Lidia",
    "Amabela",
    "Magdalena",
    "Malwina",
    "Małgorzata",
    "Greta",
    "Marianna",
    "Maryna",
    "Marta",
    "Martyna",
    "Maria",
    "Matylda",
    "Maja",
    "Maja",
    "Melania",
    "Michalina",
    "Monika",
    "Nadzieja",
    "Noemi",
    "Natalia",
    "Nikola",
    "Nina",
    "Olga",
    "Olimpia",
    "Oliwia",
    "Ofelia",
    "Patrycja",
    "Paula",
    "Pelagia",
    "Penelopa",
    "Filipa",
    "Paulina",
    "Rachela",
    "Rebeka",
    "Regina",
    "Renata",
    "Rozalia",
    "Róża",
    "Roksana",
    "Rufina",
    "Ruta",
    "Sabina",
    "Sara",
    "Serafina",
    "Sybilla",
    "Sylwia",
    "Zofia",
    "Stella",
    "Stefania",
    "Zuzanna",
    "Tamara",
    "Tacjana",
    "Tekla",
    "Teodora",
    "Teresa",
    "Walentyna",
    "Waleria",
    "Wanesa",
    "Wiara",
    "Weronika",
    "Wiktoria",
    "Wirginia",
    "Bibiana",
    "Bibianna",
    "Wanda",
    "Wilhelmina",
    "Ksawera",
    "Ksenia",
    "Zoe"
  ],
  "last_name": [
    "Adamczak",
    "Adamczyk",
    "Adamek",
    "Adamiak",
    "Adamiec",
    "Adamowicz",
    "Adamski",
    "Adamus",
    "Aleksandrowicz",
    "Andrzejczak",
    "Andrzejewski",
    "Antczak",
    "Augustyn",
    "Augustyniak",
    "Bagiński",
    "Balcerzak",
    "Banach",
    "Banasiak",
    "Banasik",
    "Banaś",
    "Baran",
    "Baranowski",
    "Barański",
    "Bartczak",
    "Bartkowiak",
    "Bartnik",
    "Bartosik",
    "Bednarczyk",
    "Bednarek",
    "Bednarski",
    "Bednarz",
    "Białas",
    "Białek",
    "Białkowski",
    "Bielak",
    "Bielawski",
    "Bielecki",
    "Bielski",
    "Bieniek",
    "Biernacki",
    "Biernat",
    "Bieńkowski",
    "Bilski",
    "Bober",
    "Bochenek",
    "Bogucki",
    "Bogusz",
    "Borek",
    "Borkowski",
    "Borowiec",
    "Borowski",
    "Bożek",
    "Broda",
    "Brzeziński",
    "Brzozowski",
    "Buczek",
    "Buczkowski",
    "Buczyński",
    "Budziński",
    "Budzyński",
    "Bujak",
    "Bukowski",
    "Burzyński",
    "Bąk",
    "Bąkowski",
    "Błaszczak",
    "Błaszczyk",
    "Cebula",
    "Chmiel",
    "Chmielewski",
    "Chmura",
    "Chojnacki",
    "Chojnowski",
    "Cholewa",
    "Chrzanowski",
    "Chudzik",
    "Cichocki",
    "Cichoń",
    "Cichy",
    "Ciesielski",
    "Cieśla",
    "Cieślak",
    "Cieślik",
    "Ciszewski",
    "Cybulski",
    "Cygan",
    "Czaja",
    "Czajka",
    "Czajkowski",
    "Czapla",
    "Czarnecki",
    "Czech",
    "Czechowski",
    "Czekaj",
    "Czerniak",
    "Czerwiński",
    "Czyż",
    "Czyżewski",
    "Dec",
    "Dobosz",
    "Dobrowolski",
    "Dobrzyński",
    "Domagała",
    "Domański",
    "Dominiak",
    "Drabik",
    "Drozd",
    "Drozdowski",
    "Drzewiecki",
    "Dróżdż",
    "Dubiel",
    "Duda",
    "Dudek",
    "Dudziak",
    "Dudzik",
    "Dudziński",
    "Duszyński",
    "Dziedzic",
    "Dziuba",
    "Dąbek",
    "Dąbkowski",
    "Dąbrowski",
    "Dębowski",
    "Dębski",
    "Długosz",
    "Falkowski",
    "Fijałkowski",
    "Filipek",
    "Filipiak",
    "Filipowicz",
    "Flak",
    "Flis",
    "Florczak",
    "Florek",
    "Frankowski",
    "Frąckowiak",
    "Frączek",
    "Frątczak",
    "Furman",
    "Gadomski",
    "Gajda",
    "Gajewski",
    "Gaweł",
    "Gawlik",
    "Gawron",
    "Gawroński",
    "Gałka",
    "Gałązka",
    "Gil",
    "Godlewski",
    "Golec",
    "Gołąb",
    "Gołębiewski",
    "Gołębiowski",
    "Grabowski",
    "Graczyk",
    "Grochowski",
    "Grudzień",
    "Gruszczyński",
    "Gruszka",
    "Grzegorczyk",
    "Grzelak",
    "Grzesiak",
    "Grzesik",
    "Grześkowiak",
    "Grzyb",
    "Grzybowski",
    "Grzywacz",
    "Gutowski",
    "Guzik",
    "Gwóźdź",
    "Góra",
    "Góral",
    "Górecki",
    "Górka",
    "Górniak",
    "Górny",
    "Górski",
    "Gąsior",
    "Gąsiorowski",
    "Głogowski",
    "Głowacki",
    "Głąb",
    "Hajduk",
    "Herman",
    "Iwański",
    "Izdebski",
    "Jabłoński",
    "Jackowski",
    "Jagielski",
    "Jagiełło",
    "Jagodziński",
    "Jakubiak",
    "Jakubowski",
    "Janas",
    "Janiak",
    "Janicki",
    "Janik",
    "Janiszewski",
    "Jankowiak",
    "Jankowski",
    "Janowski",
    "Janus",
    "Janusz",
    "Januszewski",
    "Jaros",
    "Jarosz",
    "Jarząbek",
    "Jasiński",
    "Jastrzębski",
    "Jaworski",
    "Jaśkiewicz",
    "Jezierski",
    "Jurek",
    "Jurkiewicz",
    "Jurkowski",
    "Juszczak",
    "Jóźwiak",
    "Jóźwik",
    "Jędrzejczak",
    "Jędrzejczyk",
    "Jędrzejewski",
    "Kacprzak",
    "Kaczmarczyk",
    "Kaczmarek",
    "Kaczmarski",
    "Kaczor",
    "Kaczorowski",
    "Kaczyński",
    "Kaleta",
    "Kalinowski",
    "Kalisz",
    "Kamiński",
    "Kania",
    "Kaniewski",
    "Kapusta",
    "Karaś",
    "Karczewski",
    "Karpiński",
    "Karwowski",
    "Kasperek",
    "Kasprzak",
    "Kasprzyk",
    "Kaszuba",
    "Kawa",
    "Kawecki",
    "Kałuża",
    "Kaźmierczak",
    "Kiełbasa",
    "Kisiel",
    "Kita",
    "Klimczak",
    "Klimek",
    "Kmiecik",
    "Kmieć",
    "Knapik",
    "Kobus",
    "Kogut",
    "Kolasa",
    "Komorowski",
    "Konieczna",
    "Konieczny",
    "Konopka",
    "Kopczyński",
    "Koper",
    "Kopeć",
    "Korzeniowski",
    "Kos",
    "Kosiński",
    "Kosowski",
    "Kostecki",
    "Kostrzewa",
    "Kot",
    "Kotowski",
    "Kowal",
    "Kowalczuk",
    "Kowalczyk",
    "Kowalewski",
    "Kowalik",
    "Kowalski",
    "Koza",
    "Kozak",
    "Kozieł",
    "Kozioł",
    "Kozłowski",
    "Kołakowski",
    "Kołodziej",
    "Kołodziejczyk",
    "Kołodziejski",
    "Krajewski",
    "Krakowiak",
    "Krawczyk",
    "Krawiec",
    "Kruk",
    "Krukowski",
    "Krupa",
    "Krupiński",
    "Kruszewski",
    "Krysiak",
    "Krzemiński",
    "Krzyżanowski",
    "Król",
    "Królikowski",
    "Książek",
    "Kubacki",
    "Kubiak",
    "Kubica",
    "Kubicki",
    "Kubik",
    "Kuc",
    "Kucharczyk",
    "Kucharski",
    "Kuchta",
    "Kuciński",
    "Kuczyński",
    "Kujawa",
    "Kujawski",
    "Kula",
    "Kulesza",
    "Kulig",
    "Kulik",
    "Kuliński",
    "Kurek",
    "Kurowski",
    "Kuś",
    "Kwaśniewski",
    "Kwiatkowski",
    "Kwiecień",
    "Kwieciński",
    "Kędzierski",
    "Kędziora",
    "Kępa",
    "Kłos",
    "Kłosowski",
    "Lach",
    "Laskowski",
    "Lasota",
    "Lech",
    "Lenart",
    "Lesiak",
    "Leszczyński",
    "Lewandowski",
    "Lewicki",
    "Leśniak",
    "Leśniewski",
    "Lipiński",
    "Lipka",
    "Lipski",
    "Lis",
    "Lisiecki",
    "Lisowski",
    "Maciejewski",
    "Maciąg",
    "Mackiewicz",
    "Madej",
    "Maj",
    "Majcher",
    "Majchrzak",
    "Majewski",
    "Majka",
    "Makowski",
    "Malec",
    "Malicki",
    "Malinowski",
    "Maliszewski",
    "Marchewka",
    "Marciniak",
    "Marcinkowski",
    "Marczak",
    "Marek",
    "Markiewicz",
    "Markowski",
    "Marszałek",
    "Marzec",
    "Masłowski",
    "Matusiak",
    "Matuszak",
    "Matuszewski",
    "Matysiak",
    "Mazur",
    "Mazurek",
    "Mazurkiewicz",
    "Maćkowiak",
    "Małecki",
    "Małek",
    "Maślanka",
    "Michalak",
    "Michalczyk",
    "Michalik",
    "Michalski",
    "Michałek",
    "Michałowski",
    "Mielczarek",
    "Mierzejewski",
    "Mika",
    "Mikołajczak",
    "Mikołajczyk",
    "Mikulski",
    "Milczarek",
    "Milewski",
    "Miller",
    "Misiak",
    "Misztal",
    "Miśkiewicz",
    "Modzelewski",
    "Molenda",
    "Morawski",
    "Motyka",
    "Mroczek",
    "Mroczkowski",
    "Mrozek",
    "Mróz",
    "Mucha",
    "Murawski",
    "Musiał",
    "Muszyński",
    "Młynarczyk",
    "Napierała",
    "Nawrocki",
    "Nawrot",
    "Niedziela",
    "Niedzielski",
    "Niedźwiecki",
    "Niemczyk",
    "Niemiec",
    "Niewiadomski",
    "Noga",
    "Nowacki",
    "Nowaczyk",
    "Nowak",
    "Nowakowski",
    "Nowicki",
    "Nowiński",
    "Olczak",
    "Olejniczak",
    "Olejnik",
    "Olszewski",
    "Orzechowski",
    "Orłowski",
    "Osiński",
    "Ossowski",
    "Ostrowski",
    "Owczarek",
    "Paczkowski",
    "Pająk",
    "Pakuła",
    "Paluch",
    "Panek",
    "Partyka",
    "Pasternak",
    "Paszkowski",
    "Pawelec",
    "Pawlak",
    "Pawlicki",
    "Pawlik",
    "Pawlikowski",
    "Pawłowski",
    "Pałka",
    "Piasecki",
    "Piechota",
    "Piekarski",
    "Pietras",
    "Pietruszka",
    "Pietrzak",
    "Pietrzyk",
    "Pilarski",
    "Pilch",
    "Piotrowicz",
    "Piotrowski",
    "Piwowarczyk",
    "Piórkowski",
    "Piątek",
    "Piątkowski",
    "Piłat",
    "Pluta",
    "Podgórski",
    "Polak",
    "Popławski",
    "Porębski",
    "Prokop",
    "Prus",
    "Przybylski",
    "Przybysz",
    "Przybył",
    "Przybyła",
    "Ptak",
    "Puchalski",
    "Pytel",
    "Płonka",
    "Raczyński",
    "Radecki",
    "Radomski",
    "Rak",
    "Rakowski",
    "Ratajczak",
    "Robak",
    "Rogala",
    "Rogalski",
    "Rogowski",
    "Rojek",
    "Romanowski",
    "Rosa",
    "Rosiak",
    "Rosiński",
    "Ruciński",
    "Rudnicki",
    "Rudziński",
    "Rudzki",
    "Rusin",
    "Rutkowski",
    "Rybak",
    "Rybarczyk",
    "Rybicki",
    "Rzepka",
    "Różański",
    "Różycki",
    "Sadowski",
    "Sawicki",
    "Serafin",
    "Siedlecki",
    "Sienkiewicz",
    "Sieradzki",
    "Sikora",
    "Sikorski",
    "Sitek",
    "Siwek",
    "Skalski",
    "Skiba",
    "Skibiński",
    "Skoczylas",
    "Skowron",
    "Skowronek",
    "Skowroński",
    "Skrzypczak",
    "Skrzypek",
    "Skóra",
    "Smoliński",
    "Sobczak",
    "Sobczyk",
    "Sobieraj",
    "Sobolewski",
    "Socha",
    "Sochacki",
    "Sokołowski",
    "Sokół",
    "Sosnowski",
    "Sowa",
    "Sowiński",
    "Sołtys",
    "Sołtysiak",
    "Sroka",
    "Stachowiak",
    "Stachowicz",
    "Stachura",
    "Stachurski",
    "Stanek",
    "Staniszewski",
    "Stanisławski",
    "Stankiewicz",
    "Stasiak",
    "Staszewski",
    "Stawicki",
    "Stec",
    "Stefaniak",
    "Stefański",
    "Stelmach",
    "Stolarczyk",
    "Stolarski",
    "Strzelczyk",
    "Strzelecki",
    "Stępień",
    "Stępniak",
    "Surma",
    "Suski",
    "Szafrański",
    "Szatkowski",
    "Szczepaniak",
    "Szczepanik",
    "Szczepański",
    "Szczerba",
    "Szcześniak",
    "Szczygieł",
    "Szczęsna",
    "Szczęsny",
    "Szeląg",
    "Szewczyk",
    "Szostak",
    "Szulc",
    "Szwarc",
    "Szwed",
    "Szydłowski",
    "Szymański",
    "Szymczak",
    "Szymczyk",
    "Szymkowiak",
    "Szyszka",
    "Sławiński",
    "Słowik",
    "Słowiński",
    "Tarnowski",
    "Tkaczyk",
    "Tokarski",
    "Tomala",
    "Tomaszewski",
    "Tomczak",
    "Tomczyk",
    "Tracz",
    "Trojanowski",
    "Trzciński",
    "Trzeciak",
    "Turek",
    "Twardowski",
    "Urban",
    "Urbanek",
    "Urbaniak",
    "Urbanowicz",
    "Urbańczyk",
    "Urbański",
    "Walczak",
    "Walkowiak",
    "Warchoł",
    "Wasiak",
    "Wasilewski",
    "Wawrzyniak",
    "Wesołowski",
    "Wieczorek",
    "Wierzbicki",
    "Wilczek",
    "Wilczyński",
    "Wilk",
    "Winiarski",
    "Witczak",
    "Witek",
    "Witkowski",
    "Wiącek",
    "Więcek",
    "Więckowski",
    "Wiśniewski",
    "Wnuk",
    "Wojciechowski",
    "Wojtas",
    "Wojtasik",
    "Wojtczak",
    "Wojtkowiak",
    "Wolak",
    "Woliński",
    "Wolny",
    "Wolski",
    "Woś",
    "Woźniak",
    "Wrona",
    "Wroński",
    "Wróbel",
    "Wróblewski",
    "Wypych",
    "Wysocki",
    "Wyszyński",
    "Wójcicki",
    "Wójcik",
    "Wójtowicz",
    "Wąsik",
    "Węgrzyn",
    "Włodarczyk",
    "Włodarski",
    "Zaborowski",
    "Zabłocki",
    "Zagórski",
    "Zając",
    "Zajączkowski",
    "Zakrzewski",
    "Zalewski",
    "Zaremba",
    "Zarzycki",
    "Zaręba",
    "Zawada",
    "Zawadzki",
    "Zdunek",
    "Zieliński",
    "Zielonka",
    "Ziółkowski",
    "Zięba",
    "Ziętek",
    "Zwoliński",
    "Zych",
    "Zygmunt",
    "Łapiński",
    "Łuczak",
    "Łukasiewicz",
    "Łukasik",
    "Łukaszewski",
    "Śliwa",
    "Śliwiński",
    "Ślusarczyk",
    "Świderski",
    "Świerczyński",
    "Świątek",
    "Żak",
    "Żebrowski",
    "Żmuda",
    "Żuk",
    "Żukowski",
    "Żurawski",
    "Żurek",
    "Żyła"
  ],
  "prefix": [
    "Pan",
    "Pani"
  ],
  "title": {
    "descriptor": [
      "Lead",
      "Senior",
      "Direct",
      "Corporate",
      "Dynamic",
      "Future",
      "Product",
      "National",
      "Regional",
      "District",
      "Central",
      "Global",
      "Customer",
      "Investor",
      "Dynamic",
      "International",
      "Legacy",
      "Forward",
      "Internal",
      "Human",
      "Chief",
      "Principal"
    ],
    "level": [
      "Solutions",
      "Program",
      "Brand",
      "Security",
      "Research",
      "Marketing",
      "Directives",
      "Implementation",
      "Integration",
      "Functionality",
      "Response",
      "Paradigm",
      "Tactics",
      "Identity",
      "Markets",
      "Group",
      "Division",
      "Applications",
      "Optimization",
      "Operations",
      "Infrastructure",
      "Intranet",
      "Communications",
      "Web",
      "Branding",
      "Quality",
      "Assurance",
      "Mobility",
      "Accounts",
      "Data",
      "Creative",
      "Configuration",
      "Accountability",
      "Interactions",
      "Factors",
      "Usability",
      "Metrics"
    ],
    "job": [
      "Supervisor",
      "Associate",
      "Executive",
      "Liason",
      "Officer",
      "Manager",
      "Engineer",
      "Specialist",
      "Director",
      "Coordinator",
      "Administrator",
      "Architect",
      "Analyst",
      "Designer",
      "Planner",
      "Orchestrator",
      "Technician",
      "Developer",
      "Producer",
      "Consultant",
      "Assistant",
      "Facilitator",
      "Agent",
      "Representative",
      "Strategist"
    ]
  },
  "name": [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}"
  ]
};
pl.address = {
  "country": [
    "Afganistan",
    "Albania",
    "Algieria",
    "Andora",
    "Angola",
    "Antigua i Barbuda",
    "Arabia Saudyjska",
    "Argentyna",
    "Armenia",
    "Australia",
    "Austria",
    "Azerbejdżan",
    "Bahamy",
    "Bahrajn",
    "Bangladesz",
    "Barbados",
    "Belgia",
    "Belize",
    "Benin",
    "Bhutan",
    "Białoruś",
    "Birma",
    "Boliwia",
    "Sucre",
    "Bośnia i Hercegowina",
    "Botswana",
    "Brazylia",
    "Brunei",
    "Bułgaria",
    "Burkina Faso",
    "Burundi",
    "Chile",
    "Chiny",
    "Chorwacja",
    "Cypr",
    "Czad",
    "Czarnogóra",
    "Czechy",
    "Dania",
    "Demokratyczna Republika Konga",
    "Dominika",
    "Dominikana",
    "Dżibuti",
    "Egipt",
    "Ekwador",
    "Erytrea",
    "Estonia",
    "Etiopia",
    "Fidżi",
    "Filipiny",
    "Finlandia",
    "Francja",
    "Gabon",
    "Gambia",
    "Ghana",
    "Grecja",
    "Grenada",
    "Gruzja",
    "Gujana",
    "Gwatemala",
    "Gwinea",
    "Gwinea Bissau",
    "Gwinea Równikowa",
    "Haiti",
    "Hiszpania",
    "Holandia",
    "Haga",
    "Honduras",
    "Indie",
    "Indonezja",
    "Irak",
    "Iran",
    "Irlandia",
    "Islandia",
    "Izrael",
    "Jamajka",
    "Japonia",
    "Jemen",
    "Jordania",
    "Kambodża",
    "Kamerun",
    "Kanada",
    "Katar",
    "Kazachstan",
    "Kenia",
    "Kirgistan",
    "Kiribati",
    "Kolumbia",
    "Komory",
    "Kongo",
    "Korea Południowa",
    "Korea Północna",
    "Kostaryka",
    "Kuba",
    "Kuwejt",
    "Laos",
    "Lesotho",
    "Liban",
    "Liberia",
    "Libia",
    "Liechtenstein",
    "Litwa",
    "Luksemburg",
    "Łotwa",
    "Macedonia",
    "Madagaskar",
    "Malawi",
    "Malediwy",
    "Malezja",
    "Mali",
    "Malta",
    "Maroko",
    "Mauretania",
    "Mauritius",
    "Meksyk",
    "Mikronezja",
    "Mołdawia",
    "Monako",
    "Mongolia",
    "Mozambik",
    "Namibia",
    "Nauru",
    "Nepal",
    "Niemcy",
    "Niger",
    "Nigeria",
    "Nikaragua",
    "Norwegia",
    "Nowa Zelandia",
    "Oman",
    "Pakistan",
    "Palau",
    "Panama",
    "Papua-Nowa Gwinea",
    "Paragwaj",
    "Peru",
    "Polska",
    "322 575",
    "Portugalia",
    "Republika Południowej Afryki",
    "Republika Środkowoafrykańska",
    "Republika Zielonego Przylądka",
    "Rosja",
    "Rumunia",
    "Rwanda",
    "Saint Kitts i Nevis",
    "Saint Lucia",
    "Saint Vincent i Grenadyny",
    "Salwador",
    "Samoa",
    "San Marino",
    "Senegal",
    "Serbia",
    "Seszele",
    "Sierra Leone",
    "Singapur",
    "Słowacja",
    "Słowenia",
    "Somalia",
    "Sri Lanka",
    "Stany Zjednoczone",
    "Suazi",
    "Sudan",
    "Sudan Południowy",
    "Surinam",
    "Syria",
    "Szwajcaria",
    "Szwecja",
    "Tadżykistan",
    "Tajlandia",
    "Tanzania",
    "Timor Wschodni",
    "Togo",
    "Tonga",
    "Trynidad i Tobago",
    "Tunezja",
    "Turcja",
    "Turkmenistan",
    "Tuvalu",
    "Funafuti",
    "Uganda",
    "Ukraina",
    "Urugwaj",
    2008,
    "Uzbekistan",
    "Vanuatu",
    "Watykan",
    "Wenezuela",
    "Węgry",
    "Wielka Brytania",
    "Wietnam",
    "Włochy",
    "Wybrzeże Kości Słoniowej",
    "Wyspy Marshalla",
    "Wyspy Salomona",
    "Wyspy Świętego Tomasza i Książęca",
    "Zambia",
    "Zimbabwe",
    "Zjednoczone Emiraty Arabskie"
  ],
  "building_number": [
    "#####",
    "####",
    "###"
  ],
  "street_prefix": [
    "ul.",
    "al."
  ],
  "secondary_address": [
    "Apt. ###",
    "Suite ###"
  ],
  "postcode": [
    "##-###"
  ],
  "state": [
    "Dolnośląskie",
    "Kujawsko-pomorskie",
    "Lubelskie",
    "Lubuskie",
    "Łódzkie",
    "Małopolskie",
    "Mazowieckie",
    "Opolskie",
    "Podkarpackie",
    "Podlaskie",
    "Pomorskie",
    "Śląskie",
    "Świętokrzyskie",
    "Warmińsko-mazurskie",
    "Wielkopolskie",
    "Zachodniopomorskie"
  ],
  "state_abbr": [
    "DŚ",
    "KP",
    "LB",
    "LS",
    "ŁD",
    "MP",
    "MZ",
    "OP",
    "PK",
    "PL",
    "PM",
    "ŚL",
    "ŚK",
    "WM",
    "WP",
    "ZP"
  ],
  "city_name": [
    "Aleksandrów Kujawski",
    "Aleksandrów Łódzki",
    "Alwernia",
    "Andrychów",
    "Annopol",
    "Augustów",
    "Babimost",
    "Baborów",
    "Baranów Sandomierski",
    "Barcin",
    "Barczewo",
    "Bardo",
    "Barlinek",
    "Bartoszyce",
    "Barwice",
    "Bełchatów",
    "Bełżyce",
    "Będzin",
    "Biała",
    "Biała Piska",
    "Biała Podlaska",
    "Biała Rawska",
    "Białobrzegi",
    "Białogard",
    "Biały Bór",
    "Białystok",
    "Biecz",
    "Bielawa",
    "Bielsk Podlaski",
    "Bielsko-Biała",
    "Bieruń",
    "Bierutów",
    "Bieżuń",
    "Biłgoraj",
    "Biskupiec",
    "Bisztynek",
    "Blachownia",
    "Błaszki",
    "Błażowa",
    "Błonie",
    "Bobolice",
    "Bobowa",
    "Bochnia",
    "Bodzentyn",
    "Bogatynia",
    "Boguchwała",
    "Boguszów-Gorce",
    "Bojanowo",
    "Bolesławiec",
    "Bolków",
    "Borek Wielkopolski",
    "Borne Sulinowo",
    "Braniewo",
    "Brańsk",
    "Brodnica",
    "Brok",
    "Brusy",
    "Brwinów",
    "Brzeg",
    "Brzeg Dolny",
    "Brzesko",
    "Brzeszcze",
    "Brześć Kujawski",
    "Brzeziny",
    "Brzostek",
    "Brzozów",
    "Buk",
    "Bukowno",
    "Busko-Zdrój",
    "Bychawa",
    "Byczyna",
    "Bydgoszcz",
    "Bystrzyca Kłodzka",
    "Bytom",
    "Bytom Odrzański",
    "Bytów",
    "Cedynia",
    "Chełm",
    "Chełmek",
    "Chełmno",
    "Chełmża",
    "Chęciny",
    "Chmielnik",
    "Chocianów",
    "Chociwel",
    "Chodecz",
    "Chodzież",
    "Chojna",
    "Chojnice",
    "Chojnów",
    "Choroszcz",
    "Chorzele",
    "Chorzów",
    "Choszczno",
    "Chrzanów",
    "Ciechanowiec",
    "Ciechanów",
    "Ciechocinek",
    "Cieszanów",
    "Cieszyn",
    "Ciężkowice",
    "Cybinka",
    "Czaplinek",
    "Czarna Białostocka",
    "Czarna Woda",
    "Czarne",
    "Czarnków",
    "Czchów",
    "Czechowice-Dziedzice",
    "Czeladź",
    "Czempiń",
    "Czerniejewo",
    "Czersk",
    "Czerwieńsk",
    "Czerwionka-Leszczyny",
    "Częstochowa",
    "Człopa",
    "Człuchów",
    "Czyżew",
    "Ćmielów",
    "Daleszyce",
    "Darłowo",
    "Dąbie",
    "Dąbrowa Białostocka",
    "Dąbrowa Górnicza",
    "Dąbrowa Tarnowska",
    "Debrzno",
    "Dębica",
    "Dęblin",
    "Dębno",
    "Dobczyce",
    "Dobiegniew",
    "Dobra (powiat łobeski)",
    "Dobra (powiat turecki)",
    "Dobre Miasto",
    "Dobrodzień",
    "Dobrzany",
    "Dobrzyń nad Wisłą",
    "Dolsk",
    "Drawno",
    "Drawsko Pomorskie",
    "Drezdenko",
    "Drobin",
    "Drohiczyn",
    "Drzewica",
    "Dukla",
    "Duszniki-Zdrój",
    "Dynów",
    "Działdowo",
    "Działoszyce",
    "Działoszyn",
    "Dzierzgoń",
    "Dzierżoniów",
    "Dziwnów",
    "Elbląg",
    "Ełk",
    "Frampol",
    "Frombork",
    "Garwolin",
    "Gąbin",
    "Gdańsk",
    "Gdynia",
    "Giżycko",
    "Glinojeck",
    "Gliwice",
    "Głogów",
    "Głogów Małopolski",
    "Głogówek",
    "Głowno",
    "Głubczyce",
    "Głuchołazy",
    "Głuszyca",
    "Gniew",
    "Gniewkowo",
    "Gniezno",
    "Gogolin",
    "Golczewo",
    "Goleniów",
    "Golina",
    "Golub-Dobrzyń",
    "Gołańcz",
    "Gołdap",
    "Goniądz",
    "Gorlice",
    "Gorzów Śląski",
    "Gorzów Wielkopolski",
    "Gostynin",
    "Gostyń",
    "Gościno",
    "Gozdnica",
    "Góra",
    "Góra Kalwaria",
    "Górowo Iławeckie",
    "Górzno",
    "Grabów nad Prosną",
    "Grajewo",
    "Grodków",
    "Grodzisk Mazowiecki",
    "Grodzisk Wielkopolski",
    "Grójec",
    "Grudziądz",
    "Grybów",
    "Gryfice",
    "Gryfino",
    "Gryfów Śląski",
    "Gubin",
    "Hajnówka",
    "Halinów",
    "Hel",
    "Hrubieszów",
    "Iława",
    "Iłowa",
    "Iłża",
    "Imielin",
    "Inowrocław",
    "Ińsko",
    "Iwonicz-Zdrój",
    "Izbica Kujawska",
    "Jabłonowo Pomorskie",
    "Janikowo",
    "Janowiec Wielkopolski",
    "Janów Lubelski",
    "Jarocin",
    "Jarosław",
    "Jasień",
    "Jasło",
    "Jastarnia",
    "Jastrowie",
    "Jastrzębie-Zdrój",
    "Jawor",
    "Jaworzno",
    "Jaworzyna Śląska",
    "Jedlicze",
    "Jedlina-Zdrój",
    "Jedwabne",
    "Jelcz-Laskowice",
    "Jelenia Góra",
    "Jeziorany",
    "Jędrzejów",
    "Jordanów",
    "Józefów (powiat biłgorajski)",
    "Józefów (powiat otwocki)",
    "Jutrosin",
    "Kalety",
    "Kalisz",
    "Kalisz Pomorski",
    "Kalwaria Zebrzydowska",
    "Kałuszyn",
    "Kamienna Góra",
    "Kamień Krajeński",
    "Kamień Pomorski",
    "Kamieńsk",
    "Kańczuga",
    "Karczew",
    "Kargowa",
    "Karlino",
    "Karpacz",
    "Kartuzy",
    "Katowice",
    "Kazimierz Dolny",
    "Kazimierza Wielka",
    "Kąty Wrocławskie",
    "Kcynia",
    "Kędzierzyn-Koźle",
    "Kępice",
    "Kępno",
    "Kętrzyn",
    "Kęty",
    "Kielce",
    "Kietrz",
    "Kisielice",
    "Kleczew",
    "Kleszczele",
    "Kluczbork",
    "Kłecko",
    "Kłobuck",
    "Kłodawa",
    "Kłodzko",
    "Knurów",
    "Knyszyn",
    "Kobylin",
    "Kobyłka",
    "Kock",
    "Kolbuszowa",
    "Kolno",
    "Kolonowskie",
    "Koluszki",
    "Kołaczyce",
    "Koło",
    "Kołobrzeg",
    "Koniecpol",
    "Konin",
    "Konstancin-Jeziorna",
    "Konstantynów Łódzki",
    "Końskie",
    "Koprzywnica",
    "Korfantów",
    "Koronowo",
    "Korsze",
    "Kosów Lacki",
    "Kostrzyn",
    "Kostrzyn nad Odrą",
    "Koszalin",
    "Kościan",
    "Kościerzyna",
    "Kowal",
    "Kowalewo Pomorskie",
    "Kowary",
    "Koziegłowy",
    "Kozienice",
    "Koźmin Wielkopolski",
    "Kożuchów",
    "Kórnik",
    "Krajenka",
    "Kraków",
    "Krapkowice",
    "Krasnobród",
    "Krasnystaw",
    "Kraśnik",
    "Krobia",
    "Krosno",
    "Krosno Odrzańskie",
    "Krośniewice",
    "Krotoszyn",
    "Kruszwica",
    "Krynica Morska",
    "Krynica-Zdrój",
    "Krynki",
    "Krzanowice",
    "Krzepice",
    "Krzeszowice",
    "Krzywiń",
    "Krzyż Wielkopolski",
    "Książ Wielkopolski",
    "Kudowa-Zdrój",
    "Kunów",
    "Kutno",
    "Kuźnia Raciborska",
    "Kwidzyn",
    "Lądek-Zdrój",
    "Legionowo",
    "Legnica",
    "Lesko",
    "Leszno",
    "Leśna",
    "Leśnica",
    "Lewin Brzeski",
    "Leżajsk",
    "Lębork",
    "Lędziny",
    "Libiąż",
    "Lidzbark",
    "Lidzbark Warmiński",
    "Limanowa",
    "Lipiany",
    "Lipno",
    "Lipsk",
    "Lipsko",
    "Lubaczów",
    "Lubań",
    "Lubartów",
    "Lubawa",
    "Lubawka",
    "Lubień Kujawski",
    "Lubin",
    "Lublin",
    "Lubliniec",
    "Lubniewice",
    "Lubomierz",
    "Luboń",
    "Lubraniec",
    "Lubsko",
    "Lwówek",
    "Lwówek Śląski",
    "Łabiszyn",
    "Łańcut",
    "Łapy",
    "Łasin",
    "Łask",
    "Łaskarzew",
    "Łaszczów",
    "Łaziska Górne",
    "Łazy",
    "Łeba",
    "Łęczna",
    "Łęczyca",
    "Łęknica",
    "Łobez",
    "Łobżenica",
    "Łochów",
    "Łomianki",
    "Łomża",
    "Łosice",
    "Łowicz",
    "Łódź",
    "Łuków",
    "Maków Mazowiecki",
    "Maków Podhalański",
    "Malbork",
    "Małogoszcz",
    "Małomice",
    "Margonin",
    "Marki",
    "Maszewo",
    "Miasteczko Śląskie",
    "Miastko",
    "Michałowo",
    "Miechów",
    "Miejska Górka",
    "Mielec",
    "Mieroszów",
    "Mieszkowice",
    "Międzybórz",
    "Międzychód",
    "Międzylesie",
    "Międzyrzec Podlaski",
    "Międzyrzecz",
    "Międzyzdroje",
    "Mikołajki",
    "Mikołów",
    "Mikstat",
    "Milanówek",
    "Milicz",
    "Miłakowo",
    "Miłomłyn",
    "Miłosław",
    "Mińsk Mazowiecki",
    "Mirosławiec",
    "Mirsk",
    "Mława",
    "Młynary",
    "Mogielnica",
    "Mogilno",
    "Mońki",
    "Morąg",
    "Mordy",
    "Moryń",
    "Mosina",
    "Mrągowo",
    "Mrocza",
    "Mszana Dolna",
    "Mszczonów",
    "Murowana Goślina",
    "Muszyna",
    "Mysłowice",
    "Myszków",
    "Myszyniec",
    "Myślenice",
    "Myślibórz",
    "Nakło nad Notecią",
    "Nałęczów",
    "Namysłów",
    "Narol",
    "Nasielsk",
    "Nekla",
    "Nidzica",
    "Niemcza",
    "Niemodlin",
    "Niepołomice",
    "Nieszawa",
    "Nisko",
    "Nowa Dęba",
    "Nowa Ruda",
    "Nowa Sarzyna",
    "Nowa Sól",
    "Nowe",
    "Nowe Brzesko",
    "Nowe Miasteczko",
    "Nowe Miasto Lubawskie",
    "Nowe Miasto nad Pilicą",
    "Nowe Skalmierzyce",
    "Nowe Warpno",
    "Nowogard",
    "Nowogrodziec",
    "Nowogród",
    "Nowogród Bobrzański",
    "Nowy Dwór Gdański",
    "Nowy Dwór Mazowiecki",
    "Nowy Sącz",
    "Nowy Staw",
    "Nowy Targ",
    "Nowy Tomyśl",
    "Nowy Wiśnicz",
    "Nysa",
    "Oborniki",
    "Oborniki Śląskie",
    "Obrzycko",
    "Odolanów",
    "Ogrodzieniec",
    "Okonek",
    "Olecko",
    "Olesno",
    "Oleszyce",
    "Oleśnica",
    "Olkusz",
    "Olsztyn",
    "Olsztynek",
    "Olszyna",
    "Oława",
    "Opalenica",
    "Opatów",
    "Opoczno",
    "Opole",
    "Opole Lubelskie",
    "Orneta",
    "Orzesze",
    "Orzysz",
    "Osieczna",
    "Osiek",
    "Ostrołęka",
    "Ostroróg",
    "Ostrowiec Świętokrzyski",
    "Ostróda",
    "Ostrów Lubelski",
    "Ostrów Mazowiecka",
    "Ostrów Wielkopolski",
    "Ostrzeszów",
    "Ośno Lubuskie",
    "Oświęcim",
    "Otmuchów",
    "Otwock",
    "Ozimek",
    "Ozorków",
    "Ożarów",
    "Ożarów Mazowiecki",
    "Pabianice",
    "Paczków",
    "Pajęczno",
    "Pakość",
    "Parczew",
    "Pasłęk",
    "Pasym",
    "Pelplin",
    "Pełczyce",
    "Piaseczno",
    "Piaski",
    "Piastów",
    "Piechowice",
    "Piekary Śląskie",
    "Pieniężno",
    "Pieńsk",
    "Pieszyce",
    "Pilawa",
    "Pilica",
    "Pilzno",
    "Piła",
    "Piława Górna",
    "Pińczów",
    "Pionki",
    "Piotrków Kujawski",
    "Piotrków Trybunalski",
    "Pisz",
    "Piwniczna-Zdrój",
    "Pleszew",
    "Płock",
    "Płońsk",
    "Płoty",
    "Pniewy",
    "Pobiedziska",
    "Poddębice",
    "Podkowa Leśna",
    "Pogorzela",
    "Polanica-Zdrój",
    "Polanów",
    "Police",
    "Polkowice",
    "Połaniec",
    "Połczyn-Zdrój",
    "Poniatowa",
    "Poniec",
    "Poręba",
    "Poznań",
    "Prabuty",
    "Praszka",
    "Prochowice",
    "Proszowice",
    "Prószków",
    "Pruchnik",
    "Prudnik",
    "Prusice",
    "Pruszcz Gdański",
    "Pruszków",
    "Przasnysz",
    "Przecław",
    "Przedbórz",
    "Przedecz",
    "Przemków",
    "Przemyśl",
    "Przeworsk",
    "Przysucha",
    "Pszczyna",
    "Pszów",
    "Puck",
    "Puławy",
    "Pułtusk",
    "Puszczykowo",
    "Pyrzyce",
    "Pyskowice",
    "Pyzdry",
    "Rabka-Zdrój",
    "Raciąż",
    "Racibórz",
    "Radków",
    "Radlin",
    "Radłów",
    "Radom",
    "Radomsko",
    "Radomyśl Wielki",
    "Radymno",
    "Radziejów",
    "Radzionków",
    "Radzymin",
    "Radzyń Chełmiński",
    "Radzyń Podlaski",
    "Rajgród",
    "Rakoniewice",
    "Raszków",
    "Rawa Mazowiecka",
    "Rawicz",
    "Recz",
    "Reda",
    "Rejowiec Fabryczny",
    "Resko",
    "Reszel",
    "Rogoźno",
    "Ropczyce",
    "Różan",
    "Ruciane-Nida",
    "Ruda Śląska",
    "Rudnik nad Sanem",
    "Rumia",
    "Rybnik",
    "Rychwał",
    "Rydułtowy",
    "Rydzyna",
    "Ryglice",
    "Ryki",
    "Rymanów",
    "Ryn",
    "Rypin",
    "Rzepin",
    "Rzeszów",
    "Rzgów",
    "Sandomierz",
    "Sanok",
    "Sejny",
    "Serock",
    "Sędziszów",
    "Sędziszów Małopolski",
    "Sępopol",
    "Sępólno Krajeńskie",
    "Sianów",
    "Siechnice",
    "Siedlce",
    "Siemianowice Śląskie",
    "Siemiatycze",
    "Sieniawa",
    "Sieradz",
    "Sieraków",
    "Sierpc",
    "Siewierz",
    "Skalbmierz",
    "Skała",
    "Skarszewy",
    "Skaryszew",
    "Skarżysko-Kamienna",
    "Skawina",
    "Skępe",
    "Skierniewice",
    "Skoczów",
    "Skoki",
    "Skórcz",
    "Skwierzyna",
    "Sława",
    "Sławków",
    "Sławno",
    "Słomniki",
    "Słubice",
    "Słupca",
    "Słupsk",
    "Sobótka",
    "Sochaczew",
    "Sokołów Małopolski",
    "Sokołów Podlaski",
    "Sokółka",
    "Solec Kujawski",
    "Sompolno",
    "Sopot",
    "Sosnowiec",
    "Sośnicowice",
    "Stalowa Wola",
    "Starachowice",
    "Stargard Szczeciński",
    "Starogard Gdański",
    "Stary Sącz",
    "Staszów",
    "Stawiski",
    "Stawiszyn",
    "Stąporków",
    "Stęszew",
    "Stoczek Łukowski",
    "Stronie Śląskie",
    "Strumień",
    "Stryków",
    "Strzegom",
    "Strzelce Krajeńskie",
    "Strzelce Opolskie",
    "Strzelin",
    "Strzelno",
    "Strzyżów",
    "Sucha Beskidzka",
    "Suchań",
    "Suchedniów",
    "Suchowola",
    "Sulechów",
    "Sulejów",
    "Sulejówek",
    "Sulęcin",
    "Sulmierzyce",
    "Sułkowice",
    "Supraśl",
    "Suraż",
    "Susz",
    "Suwałki",
    "Swarzędz",
    "Syców",
    "Szadek",
    "Szamocin",
    "Szamotuły",
    "Szczawnica",
    "Szczawno-Zdrój",
    "Szczebrzeszyn",
    "Szczecin",
    "Szczecinek",
    "Szczekociny",
    "Szczucin",
    "Szczuczyn",
    "Szczyrk",
    "Szczytna",
    "Szczytno",
    "Szepietowo",
    "Szklarska Poręba",
    "Szlichtyngowa",
    "Szprotawa",
    "Sztum",
    "Szubin",
    "Szydłowiec",
    "Ścinawa",
    "Ślesin",
    "Śmigiel",
    "Śrem",
    "Środa Śląska",
    "Środa Wielkopolska",
    "Świątniki Górne",
    "Świdnica",
    "Świdnik",
    "Świdwin",
    "Świebodzice",
    "Świebodzin",
    "Świecie",
    "Świeradów-Zdrój",
    "Świerzawa",
    "Świętochłowice",
    "Świnoujście",
    "Tarczyn",
    "Tarnobrzeg",
    "Tarnogród",
    "Tarnowskie Góry",
    "Tarnów",
    "Tczew",
    "Terespol",
    "Tłuszcz",
    "Tolkmicko",
    "Tomaszów Lubelski",
    "Tomaszów Mazowiecki",
    "Toruń",
    "Torzym",
    "Toszek",
    "Trzcianka",
    "Trzciel",
    "Trzcińsko-Zdrój",
    "Trzebiatów",
    "Trzebinia",
    "Trzebnica",
    "Trzemeszno",
    "Tuchola",
    "Tuchów",
    "Tuczno",
    "Tuliszków",
    "Turek",
    "Tuszyn",
    "Twardogóra",
    "Tychowo",
    "Tychy",
    "Tyczyn",
    "Tykocin",
    "Tyszowce",
    "Ujazd",
    "Ujście",
    "Ulanów",
    "Uniejów",
    "Ustka",
    "Ustroń",
    "Ustrzyki Dolne",
    "Wadowice",
    "Wałbrzych",
    "Wałcz",
    "Warka",
    "Warszawa",
    "Warta",
    "Wasilków",
    "Wąbrzeźno",
    "Wąchock",
    "Wągrowiec",
    "Wąsosz",
    "Wejherowo",
    "Węgliniec",
    "Węgorzewo",
    "Węgorzyno",
    "Węgrów",
    "Wiązów",
    "Wieleń",
    "Wielichowo",
    "Wieliczka",
    "Wieluń",
    "Wieruszów",
    "Więcbork",
    "Wilamowice",
    "Wisła",
    "Witkowo",
    "Witnica",
    "Wleń",
    "Władysławowo",
    "Włocławek",
    "Włodawa",
    "Włoszczowa",
    "Wodzisław Śląski",
    "Wojcieszów",
    "Wojkowice",
    "Wojnicz",
    "Wolbórz",
    "Wolbrom",
    "Wolin",
    "Wolsztyn",
    "Wołczyn",
    "Wołomin",
    "Wołów",
    "Woźniki",
    "Wrocław",
    "Wronki",
    "Września",
    "Wschowa",
    "Wyrzysk",
    "Wysoka",
    "Wysokie Mazowieckie",
    "Wyszków",
    "Wyszogród",
    "Wyśmierzyce",
    "Zabłudów",
    "Zabrze",
    "Zagórów",
    "Zagórz",
    "Zakliczyn",
    "Zakopane",
    "Zakroczym",
    "Zalewo",
    "Zambrów",
    "Zamość",
    "Zator",
    "Zawadzkie",
    "Zawichost",
    "Zawidów",
    "Zawiercie",
    "Ząbki",
    "Ząbkowice Śląskie",
    "Zbąszynek",
    "Zbąszyń",
    "Zduny",
    "Zduńska Wola",
    "Zdzieszowice",
    "Zelów",
    "Zgierz",
    "Zgorzelec",
    "Zielona Góra",
    "Zielonka",
    "Ziębice",
    "Złocieniec",
    "Złoczew",
    "Złotoryja",
    "Złotów",
    "Złoty Stok",
    "Zwierzyniec",
    "Zwoleń",
    "Żabno",
    "Żagań",
    "Żarki",
    "Żarów",
    "Żary",
    "Żelechów",
    "Żerków",
    "Żmigród",
    "Żnin",
    "Żory",
    "Żukowo",
    "Żuromin",
    "Żychlin",
    "Żyrardów",
    "Żywiec"
  ],
  "city": [
    "#{city_name}"
  ],
  "street_name": [
    "#{street_prefix} #{Name.last_name}"
  ],
  "street_address": [
    "#{street_name} #{building_number}"
  ],
  "default_country": [
    "Polska"
  ]
};
pl.company = {
  "suffix": [
    "Inc",
    "and Sons",
    "LLC",
    "Group"
  ],
  "adjetive": [
      "Adaptive",
      "Advanced",
      "Ameliorated",
      "Assimilated",
      "Automated",
      "Balanced",
      "Business-focused",
      "Centralized",
      "Cloned",
      "Compatible",
      "Configurable",
      "Cross-group",
      "Cross-platform",
      "Customer-focused",
      "Customizable",
      "Decentralized",
      "De-engineered",
      "Devolved",
      "Digitized",
      "Distributed",
      "Diverse",
      "Down-sized",
      "Enhanced",
      "Enterprise-wide",
      "Ergonomic",
      "Exclusive",
      "Expanded",
      "Extended",
      "Face to face",
      "Focused",
      "Front-line",
      "Fully-configurable",
      "Function-based",
      "Fundamental",
      "Future-proofed",
      "Grass-roots",
      "Horizontal",
      "Implemented",
      "Innovative",
      "Integrated",
      "Intuitive",
      "Inverse",
      "Managed",
      "Mandatory",
      "Monitored",
      "Multi-channelled",
      "Multi-lateral",
      "Multi-layered",
      "Multi-tiered",
      "Networked",
      "Object-based",
      "Open-architected",
      "Open-source",
      "Operative",
      "Optimized",
      "Optional",
      "Organic",
      "Organized",
      "Persevering",
      "Persistent",
      "Phased",
      "Polarised",
      "Pre-emptive",
      "Proactive",
      "Profit-focused",
      "Profound",
      "Programmable",
      "Progressive",
      "Public-key",
      "Quality-focused",
      "Reactive",
      "Realigned",
      "Re-contextualized",
      "Re-engineered",
      "Reduced",
      "Reverse-engineered",
      "Right-sized",
      "Robust",
      "Seamless",
      "Secured",
      "Self-enabling",
      "Sharable",
      "Stand-alone",
      "Streamlined",
      "Switchable",
      "Synchronised",
      "Synergistic",
      "Synergized",
      "Team-oriented",
      "Total",
      "Triple-buffered",
      "Universal",
      "Up-sized",
      "Upgradable",
      "User-centric",
      "User-friendly",
      "Versatile",
      "Virtual",
      "Visionary",
      "Vision-oriented"
    ],
    "descriptor":[
      "24 hour",
      "24/7",
      "3rd generation",
      "4th generation",
      "5th generation",
      "6th generation",
      "actuating",
      "analyzing",
      "asymmetric",
      "asynchronous",
      "attitude-oriented",
      "background",
      "bandwidth-monitored",
      "bi-directional",
      "bifurcated",
      "bottom-line",
      "clear-thinking",
      "client-driven",
      "client-server",
      "coherent",
      "cohesive",
      "composite",
      "context-sensitive",
      "contextually-based",
      "content-based",
      "dedicated",
      "demand-driven",
      "didactic",
      "directional",
      "discrete",
      "disintermediate",
      "dynamic",
      "eco-centric",
      "empowering",
      "encompassing",
      "even-keeled",
      "executive",
      "explicit",
      "exuding",
      "fault-tolerant",
      "foreground",
      "fresh-thinking",
      "full-range",
      "global",
      "grid-enabled",
      "heuristic",
      "high-level",
      "holistic",
      "homogeneous",
      "human-resource",
      "hybrid",
      "impactful",
      "incremental",
      "intangible",
      "interactive",
      "intermediate",
      "leading edge",
      "local",
      "logistical",
      "maximized",
      "methodical",
      "mission-critical",
      "mobile",
      "modular",
      "motivating",
      "multimedia",
      "multi-state",
      "multi-tasking",
      "national",
      "needs-based",
      "neutral",
      "next generation",
      "non-volatile",
      "object-oriented",
      "optimal",
      "optimizing",
      "radical",
      "real-time",
      "reciprocal",
      "regional",
      "responsive",
      "scalable",
      "secondary",
      "solution-oriented",
      "stable",
      "static",
      "systematic",
      "systemic",
      "system-worthy",
      "tangible",
      "tertiary",
      "transitional",
      "uniform",
      "upward-trending",
      "user-facing",
      "value-added",
      "web-enabled",
      "well-modulated",
      "zero administration",
      "zero defect",
      "zero tolerance"
    ],
    "noun": [
      "ability",
      "access",
      "adapter",
      "algorithm",
      "alliance",
      "analyzer",
      "application",
      "approach",
      "architecture",
      "archive",
      "artificial intelligence",
      "array",
      "attitude",
      "benchmark",
      "budgetary management",
      "capability",
      "capacity",
      "challenge",
      "circuit",
      "collaboration",
      "complexity",
      "concept",
      "conglomeration",
      "contingency",
      "core",
      "customer loyalty",
      "database",
      "data-warehouse",
      "definition",
      "emulation",
      "encoding",
      "encryption",
      "extranet",
      "firmware",
      "flexibility",
      "focus group",
      "forecast",
      "frame",
      "framework",
      "function",
      "functionalities",
      "Graphic Interface",
      "groupware",
      "Graphical User Interface",
      "hardware",
      "help-desk",
      "hierarchy",
      "hub",
      "implementation",
      "info-mediaries",
      "infrastructure",
      "initiative",
      "installation",
      "instruction set",
      "interface",
      "internet solution",
      "intranet",
      "knowledge user",
      "knowledge base",
      "local area network",
      "leverage",
      "matrices",
      "matrix",
      "methodology",
      "middleware",
      "migration",
      "model",
      "moderator",
      "monitoring",
      "moratorium",
      "neural-net",
      "open architecture",
      "open system",
      "orchestration",
      "paradigm",
      "parallelism",
      "policy",
      "portal",
      "pricing structure",
      "process improvement",
      "product",
      "productivity",
      "project",
      "projection",
      "protocol",
      "secured line",
      "service-desk",
      "software",
      "solution",
      "standardization",
      "strategy",
      "structure",
      "success",
      "superstructure",
      "support",
      "synergy",
      "system engine",
      "task-force",
      "throughput",
      "time-frame",
      "toolset",
      "utilisation",
      "website",
      "workforce"
  ],
  "bs_verb": [
      "implement",
      "utilize",
      "integrate",
      "streamline",
      "optimize",
      "evolve",
      "transform",
      "embrace",
      "enable",
      "orchestrate",
      "leverage",
      "reinvent",
      "aggregate",
      "architect",
      "enhance",
      "incentivize",
      "morph",
      "empower",
      "envisioneer",
      "monetize",
      "harness",
      "facilitate",
      "seize",
      "disintermediate",
      "synergize",
      "strategize",
      "deploy",
      "brand",
      "grow",
      "target",
      "syndicate",
      "synthesize",
      "deliver",
      "mesh",
      "incubate",
      "engage",
      "maximize",
      "benchmark",
      "expedite",
      "reintermediate",
      "whiteboard",
      "visualize",
      "repurpose",
      "innovate",
      "scale",
      "unleash",
      "drive",
      "extend",
      "engineer",
      "revolutionize",
      "generate",
      "exploit",
      "transition",
      "e-enable",
      "iterate",
      "cultivate",
      "matrix",
      "productize",
      "redefine",
      "recontextualize"
    ],
    "bs_adjective": [
      "clicks-and-mortar",
      "value-added",
      "vertical",
      "proactive",
      "robust",
      "revolutionary",
      "scalable",
      "leading-edge",
      "innovative",
      "intuitive",
      "strategic",
      "e-business",
      "mission-critical",
      "sticky",
      "one-to-one",
      "24/7",
      "end-to-end",
      "global",
      "B2B",
      "B2C",
      "granular",
      "frictionless",
      "virtual",
      "viral",
      "dynamic",
      "24/365",
      "best-of-breed",
      "killer",
      "magnetic",
      "bleeding-edge",
      "web-enabled",
      "interactive",
      "dot-com",
      "sexy",
      "back-end",
      "real-time",
      "efficient",
      "front-end",
      "distributed",
      "seamless",
      "extensible",
      "turn-key",
      "world-class",
      "open-source",
      "cross-platform",
      "cross-media",
      "synergistic",
      "bricks-and-clicks",
      "out-of-the-box",
      "enterprise",
      "integrated",
      "impactful",
      "wireless",
      "transparent",
      "next-generation",
      "cutting-edge",
      "user-centric",
      "visionary",
      "customized",
      "ubiquitous",
      "plug-and-play",
      "collaborative",
      "compelling",
      "holistic",
      "rich"
    ],
    "bs_noun": [
      "synergies",
      "web-readiness",
      "paradigms",
      "markets",
      "partnerships",
      "infrastructures",
      "platforms",
      "initiatives",
      "channels",
      "eyeballs",
      "communities",
      "ROI",
      "solutions",
      "e-tailers",
      "e-services",
      "action-items",
      "portals",
      "niches",
      "technologies",
      "content",
      "vortals",
      "supply-chains",
      "convergence",
      "relationships",
      "architectures",
      "interfaces",
      "e-markets",
      "e-commerce",
      "systems",
      "bandwidth",
      "infomediaries",
      "models",
      "mindshare",
      "deliverables",
      "users",
      "schemas",
      "networks",
      "applications",
      "metrics",
      "e-business",
      "functionalities",
      "experiences",
      "web services",
      "methodologies"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} and #{Name.last_name}"
  ]
};
pl.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ],
  "domain_suffix": [
    "com",
    "pl",
    "com.pl",
    "net",
    "org"
  ]
};
pl.lorem = {
  "words": [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ],
  "supplemental": [
    "abbas",
    "abduco",
    "abeo",
    "abscido",
    "absconditus",
    "absens",
    "absorbeo",
    "absque",
    "abstergo",
    "absum",
    "abundans",
    "abutor",
    "accedo",
    "accendo",
    "acceptus",
    "accipio",
    "accommodo",
    "accusator",
    "acer",
    "acerbitas",
    "acervus",
    "acidus",
    "acies",
    "acquiro",
    "acsi",
    "adamo",
    "adaugeo",
    "addo",
    "adduco",
    "ademptio",
    "adeo",
    "adeptio",
    "adfectus",
    "adfero",
    "adficio",
    "adflicto",
    "adhaero",
    "adhuc",
    "adicio",
    "adimpleo",
    "adinventitias",
    "adipiscor",
    "adiuvo",
    "administratio",
    "admiratio",
    "admitto",
    "admoneo",
    "admoveo",
    "adnuo",
    "adopto",
    "adsidue",
    "adstringo",
    "adsuesco",
    "adsum",
    "adulatio",
    "adulescens",
    "adultus",
    "aduro",
    "advenio",
    "adversus",
    "advoco",
    "aedificium",
    "aeger",
    "aegre",
    "aegrotatio",
    "aegrus",
    "aeneus",
    "aequitas",
    "aequus",
    "aer",
    "aestas",
    "aestivus",
    "aestus",
    "aetas",
    "aeternus",
    "ager",
    "aggero",
    "aggredior",
    "agnitio",
    "agnosco",
    "ago",
    "ait",
    "aiunt",
    "alienus",
    "alii",
    "alioqui",
    "aliqua",
    "alius",
    "allatus",
    "alo",
    "alter",
    "altus",
    "alveus",
    "amaritudo",
    "ambitus",
    "ambulo",
    "amicitia",
    "amiculum",
    "amissio",
    "amita",
    "amitto",
    "amo",
    "amor",
    "amoveo",
    "amplexus",
    "amplitudo",
    "amplus",
    "ancilla",
    "angelus",
    "angulus",
    "angustus",
    "animadverto",
    "animi",
    "animus",
    "annus",
    "anser",
    "ante",
    "antea",
    "antepono",
    "antiquus",
    "aperio",
    "aperte",
    "apostolus",
    "apparatus",
    "appello",
    "appono",
    "appositus",
    "approbo",
    "apto",
    "aptus",
    "apud",
    "aqua",
    "ara",
    "aranea",
    "arbitro",
    "arbor",
    "arbustum",
    "arca",
    "arceo",
    "arcesso",
    "arcus",
    "argentum",
    "argumentum",
    "arguo",
    "arma",
    "armarium",
    "armo",
    "aro",
    "ars",
    "articulus",
    "artificiose",
    "arto",
    "arx",
    "ascisco",
    "ascit",
    "asper",
    "aspicio",
    "asporto",
    "assentator",
    "astrum",
    "atavus",
    "ater",
    "atqui",
    "atrocitas",
    "atrox",
    "attero",
    "attollo",
    "attonbitus",
    "auctor",
    "auctus",
    "audacia",
    "audax",
    "audentia",
    "audeo",
    "audio",
    "auditor",
    "aufero",
    "aureus",
    "auris",
    "aurum",
    "aut",
    "autem",
    "autus",
    "auxilium",
    "avaritia",
    "avarus",
    "aveho",
    "averto",
    "avoco",
    "baiulus",
    "balbus",
    "barba",
    "bardus",
    "basium",
    "beatus",
    "bellicus",
    "bellum",
    "bene",
    "beneficium",
    "benevolentia",
    "benigne",
    "bestia",
    "bibo",
    "bis",
    "blandior",
    "bonus",
    "bos",
    "brevis",
    "cado",
    "caecus",
    "caelestis",
    "caelum",
    "calamitas",
    "calcar",
    "calco",
    "calculus",
    "callide",
    "campana",
    "candidus",
    "canis",
    "canonicus",
    "canto",
    "capillus",
    "capio",
    "capitulus",
    "capto",
    "caput",
    "carbo",
    "carcer",
    "careo",
    "caries",
    "cariosus",
    "caritas",
    "carmen",
    "carpo",
    "carus",
    "casso",
    "caste",
    "casus",
    "catena",
    "caterva",
    "cattus",
    "cauda",
    "causa",
    "caute",
    "caveo",
    "cavus",
    "cedo",
    "celebrer",
    "celer",
    "celo",
    "cena",
    "cenaculum",
    "ceno",
    "censura",
    "centum",
    "cerno",
    "cernuus",
    "certe",
    "certo",
    "certus",
    "cervus",
    "cetera",
    "charisma",
    "chirographum",
    "cibo",
    "cibus",
    "cicuta",
    "cilicium",
    "cimentarius",
    "ciminatio",
    "cinis",
    "circumvenio",
    "cito",
    "civis",
    "civitas",
    "clam",
    "clamo",
    "claro",
    "clarus",
    "claudeo",
    "claustrum",
    "clementia",
    "clibanus",
    "coadunatio",
    "coaegresco",
    "coepi",
    "coerceo",
    "cogito",
    "cognatus",
    "cognomen",
    "cogo",
    "cohaero",
    "cohibeo",
    "cohors",
    "colligo",
    "colloco",
    "collum",
    "colo",
    "color",
    "coma",
    "combibo",
    "comburo",
    "comedo",
    "comes",
    "cometes",
    "comis",
    "comitatus",
    "commemoro",
    "comminor",
    "commodo",
    "communis",
    "comparo",
    "compello",
    "complectus",
    "compono",
    "comprehendo",
    "comptus",
    "conatus",
    "concedo",
    "concido",
    "conculco",
    "condico",
    "conduco",
    "confero",
    "confido",
    "conforto",
    "confugo",
    "congregatio",
    "conicio",
    "coniecto",
    "conitor",
    "coniuratio",
    "conor",
    "conqueror",
    "conscendo",
    "conservo",
    "considero",
    "conspergo",
    "constans",
    "consuasor",
    "contabesco",
    "contego",
    "contigo",
    "contra",
    "conturbo",
    "conventus",
    "convoco",
    "copia",
    "copiose",
    "cornu",
    "corona",
    "corpus",
    "correptius",
    "corrigo",
    "corroboro",
    "corrumpo",
    "coruscus",
    "cotidie",
    "crapula",
    "cras",
    "crastinus",
    "creator",
    "creber",
    "crebro",
    "credo",
    "creo",
    "creptio",
    "crepusculum",
    "cresco",
    "creta",
    "cribro",
    "crinis",
    "cruciamentum",
    "crudelis",
    "cruentus",
    "crur",
    "crustulum",
    "crux",
    "cubicularis",
    "cubitum",
    "cubo",
    "cui",
    "cuius",
    "culpa",
    "culpo",
    "cultellus",
    "cultura",
    "cum",
    "cunabula",
    "cunae",
    "cunctatio",
    "cupiditas",
    "cupio",
    "cuppedia",
    "cupressus",
    "cur",
    "cura",
    "curatio",
    "curia",
    "curiositas",
    "curis",
    "curo",
    "curriculum",
    "currus",
    "cursim",
    "curso",
    "cursus",
    "curto",
    "curtus",
    "curvo",
    "curvus",
    "custodia",
    "damnatio",
    "damno",
    "dapifer",
    "debeo",
    "debilito",
    "decens",
    "decerno",
    "decet",
    "decimus",
    "decipio",
    "decor",
    "decretum",
    "decumbo",
    "dedecor",
    "dedico",
    "deduco",
    "defaeco",
    "defendo",
    "defero",
    "defessus",
    "defetiscor",
    "deficio",
    "defigo",
    "defleo",
    "defluo",
    "defungo",
    "degenero",
    "degero",
    "degusto",
    "deinde",
    "delectatio",
    "delego",
    "deleo",
    "delibero",
    "delicate",
    "delinquo",
    "deludo",
    "demens",
    "demergo",
    "demitto",
    "demo",
    "demonstro",
    "demoror",
    "demulceo",
    "demum",
    "denego",
    "denique",
    "dens",
    "denuncio",
    "denuo",
    "deorsum",
    "depereo",
    "depono",
    "depopulo",
    "deporto",
    "depraedor",
    "deprecator",
    "deprimo",
    "depromo",
    "depulso",
    "deputo",
    "derelinquo",
    "derideo",
    "deripio",
    "desidero",
    "desino",
    "desipio",
    "desolo",
    "desparatus",
    "despecto",
    "despirmatio",
    "infit",
    "inflammatio",
    "paens",
    "patior",
    "patria",
    "patrocinor",
    "patruus",
    "pauci",
    "paulatim",
    "pauper",
    "pax",
    "peccatus",
    "pecco",
    "pecto",
    "pectus",
    "pecunia",
    "pecus",
    "peior",
    "pel",
    "ocer",
    "socius",
    "sodalitas",
    "sol",
    "soleo",
    "solio",
    "solitudo",
    "solium",
    "sollers",
    "sollicito",
    "solum",
    "solus",
    "solutio",
    "solvo",
    "somniculosus",
    "somnus",
    "sonitus",
    "sono",
    "sophismata",
    "sopor",
    "sordeo",
    "sortitus",
    "spargo",
    "speciosus",
    "spectaculum",
    "speculum",
    "sperno",
    "spero",
    "spes",
    "spiculum",
    "spiritus",
    "spoliatio",
    "sponte",
    "stabilis",
    "statim",
    "statua",
    "stella",
    "stillicidium",
    "stipes",
    "stips",
    "sto",
    "strenuus",
    "strues",
    "studio",
    "stultus",
    "suadeo",
    "suasoria",
    "sub",
    "subito",
    "subiungo",
    "sublime",
    "subnecto",
    "subseco",
    "substantia",
    "subvenio",
    "succedo",
    "succurro",
    "sufficio",
    "suffoco",
    "suffragium",
    "suggero",
    "sui",
    "sulum",
    "sum",
    "summa",
    "summisse",
    "summopere",
    "sumo",
    "sumptus",
    "supellex",
    "super",
    "suppellex",
    "supplanto",
    "suppono",
    "supra",
    "surculus",
    "surgo",
    "sursum",
    "suscipio",
    "suspendo",
    "sustineo",
    "suus",
    "synagoga",
    "tabella",
    "tabernus",
    "tabesco",
    "tabgo",
    "tabula",
    "taceo",
    "tactus",
    "taedium",
    "talio",
    "talis",
    "talus",
    "tam",
    "tamdiu",
    "tamen",
    "tametsi",
    "tamisium",
    "tamquam",
    "tandem",
    "tantillus",
    "tantum",
    "tardus",
    "tego",
    "temeritas",
    "temperantia",
    "templum",
    "temptatio",
    "tempus",
    "tenax",
    "tendo",
    "teneo",
    "tener",
    "tenuis",
    "tenus",
    "tepesco",
    "tepidus",
    "ter",
    "terebro",
    "teres",
    "terga",
    "tergeo",
    "tergiversatio",
    "tergo",
    "tergum",
    "termes",
    "terminatio",
    "tero",
    "terra",
    "terreo",
    "territo",
    "terror",
    "tersus",
    "tertius",
    "testimonium",
    "texo",
    "textilis",
    "textor",
    "textus",
    "thalassinus",
    "theatrum",
    "theca",
    "thema",
    "theologus",
    "thermae",
    "thesaurus",
    "thesis",
    "thorax",
    "thymbra",
    "thymum",
    "tibi",
    "timidus",
    "timor",
    "titulus",
    "tolero",
    "tollo",
    "tondeo",
    "tonsor",
    "torqueo",
    "torrens",
    "tot",
    "totidem",
    "toties",
    "totus",
    "tracto",
    "trado",
    "traho",
    "trans",
    "tredecim",
    "tremo",
    "trepide",
    "tres",
    "tribuo",
    "tricesimus",
    "triduana",
    "triginta",
    "tripudio",
    "tristis",
    "triumphus",
    "trucido",
    "truculenter",
    "tubineus",
    "tui",
    "tum",
    "tumultus",
    "tunc",
    "turba",
    "turbo",
    "turpe",
    "turpis",
    "tutamen",
    "tutis",
    "tyrannus",
    "uberrime",
    "ubi",
    "ulciscor",
    "ullus",
    "ulterius",
    "ultio",
    "ultra",
    "umbra",
    "umerus",
    "umquam",
    "una",
    "unde",
    "undique",
    "universe",
    "unus",
    "urbanus",
    "urbs",
    "uredo",
    "usitas",
    "usque",
    "ustilo",
    "ustulo",
    "usus",
    "uter",
    "uterque",
    "utilis",
    "utique",
    "utor",
    "utpote",
    "utrimque",
    "utroque",
    "utrum",
    "uxor",
    "vaco",
    "vacuus",
    "vado",
    "vae",
    "valde",
    "valens",
    "valeo",
    "valetudo",
    "validus",
    "vallum",
    "vapulus",
    "varietas",
    "varius",
    "vehemens",
    "vel",
    "velociter",
    "velum",
    "velut",
    "venia",
    "venio",
    "ventito",
    "ventosus",
    "ventus",
    "venustas",
    "ver",
    "verbera",
    "verbum",
    "vere",
    "verecundia",
    "vereor",
    "vergo",
    "veritas",
    "vero",
    "versus",
    "verto",
    "verumtamen",
    "verus",
    "vesco",
    "vesica",
    "vesper",
    "vespillo",
    "vester",
    "vestigium",
    "vestrum",
    "vetus",
    "via",
    "vicinus",
    "vicissitudo",
    "victoria",
    "victus",
    "videlicet",
    "video",
    "viduata",
    "viduo",
    "vigilo",
    "vigor",
    "vilicus",
    "vilis",
    "vilitas",
    "villa",
    "vinco",
    "vinculum",
    "vindico",
    "vinitor",
    "vinum",
    "vir",
    "virga",
    "virgo",
    "viridis",
    "viriliter",
    "virtus",
    "vis",
    "viscus",
    "vita",
    "vitiosus",
    "vitium",
    "vito",
    "vivo",
    "vix",
    "vobis",
    "vociferor",
    "voco",
    "volaticus",
    "volo",
    "volubilis",
    "voluntarius",
    "volup",
    "volutabrum",
    "volva",
    "vomer",
    "vomica",
    "vomito",
    "vorago",
    "vorax",
    "voro",
    "vos",
    "votum",
    "voveo",
    "vox",
    "vulariter",
    "vulgaris",
    "vulgivagus",
    "vulgo",
    "vulgus",
    "vulnero",
    "vulnus",
    "vulpes",
    "vulticulus",
    "vultuosus",
    "xiphias"
  ]
};
pl.phone_number = {
  "formats": [
    "12-###-##-##",
    "13-###-##-##",
    "14-###-##-##",
    "15-###-##-##",
    "16-###-##-##",
    "17-###-##-##",
    "18-###-##-##",
    "22-###-##-##",
    "23-###-##-##",
    "24-###-##-##",
    "25-###-##-##",
    "29-###-##-##",
    "32-###-##-##",
    "33-###-##-##",
    "34-###-##-##",
    "41-###-##-##",
    "42-###-##-##",
    "43-###-##-##",
    "44-###-##-##",
    "46-###-##-##",
    "48-###-##-##",
    "52-###-##-##",
    "54-###-##-##",
    "55-###-##-##",
    "56-###-##-##",
    "58-###-##-##",
    "59-###-##-##",
    "61-###-##-##",
    "62-###-##-##",
    "63-###-##-##",
    "65-###-##-##",
    "67-###-##-##",
    "68-###-##-##",
    "71-###-##-##",
    "74-###-##-##",
    "75-###-##-##",
    "76-###-##-##",
    "77-###-##-##",
    "81-###-##-##",
    "82-###-##-##",
    "83-###-##-##",
    "84-###-##-##",
    "85-###-##-##",
    "86-###-##-##",
    "87-###-##-##",
    "89-###-##-##",
    "91-###-##-##",
    "94-###-##-##",
    "95-###-##-##"
  ]
};
pl.cell_phone = {
  "formats": [
    "50-###-##-##",
    "51-###-##-##",
    "53-###-##-##",
    "57-###-##-##",
    "60-###-##-##",
    "66-###-##-##",
    "69-###-##-##",
    "72-###-##-##",
    "73-###-##-##",
    "78-###-##-##",
    "79-###-##-##",
    "88-###-##-##"
  ]
};

},{}],75:[function(require,module,exports){
var pt_BR = {};
module["exports"] = pt_BR;
pt_BR.title = "Portuguese (Brazil)";
pt_BR.address = {
  "city_prefix": [
    "Nova",
    "Velha",
    "Grande",
    "Vila",
    "Município de"
  ],
  "city_suffix": [
    "do Descoberto",
    "de Nossa Senhora",
    "do Norte",
    "do Sul"
  ],
  "country": [
    "Afeganistão",
    "Albânia",
    "Algéria",
    "Samoa",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antigua and Barbada",
    "Argentina",
    "Armênia",
    "Aruba",
    "Austrália",
    "Áustria",
    "Alzerbajão",
    "Bahamas",
    "Barém",
    "Bangladesh",
    "Barbado",
    "Belgrado",
    "Bélgica",
    "Belize",
    "Benin",
    "Bermuda",
    "Bhutan",
    "Bolívia",
    "Bôsnia",
    "Botuasuna",
    "Bouvetoia",
    "Brasil",
    "Arquipélago de Chagos",
    "Ilhas Virgens",
    "Brunei",
    "Bulgária",
    "Burkina Faso",
    "Burundi",
    "Cambójia",
    "Camarões",
    "Canadá",
    "Cabo Verde",
    "Ilhas Caiman",
    "República da África Central",
    "Chad",
    "Chile",
    "China",
    "Ilhas Natal",
    "Ilhas Cocos",
    "Colômbia",
    "Comoros",
    "Congo",
    "Ilhas Cook",
    "Costa Rica",
    "Costa do Marfim",
    "Croácia",
    "Cuba",
    "Cyprus",
    "República Tcheca",
    "Dinamarca",
    "Djibouti",
    "Dominica",
    "República Dominicana",
    "Equador",
    "Egito",
    "El Salvador",
    "Guiné Equatorial",
    "Eritrea",
    "Estônia",
    "Etiópia",
    "Ilhas Faroe",
    "Malvinas",
    "Fiji",
    "Finlândia",
    "França",
    "Guiné Francesa",
    "Polinésia Francesa",
    "Gabão",
    "Gâmbia",
    "Georgia",
    "Alemanha",
    "Gana",
    "Gibraltar",
    "Grécia",
    "Groelândia",
    "Granada",
    "Guadalupe",
    "Guano",
    "Guatemala",
    "Guernsey",
    "Guiné",
    "Guiné-Bissau",
    "Guiana",
    "Haiti",
    "Heard Island and McDonald Islands",
    "Vaticano",
    "Honduras",
    "Hong Kong",
    "Hungria",
    "Iceland",
    "Índia",
    "Indonésia",
    "Irã",
    "Iraque",
    "Irlanda",
    "Ilha de Man",
    "Israel",
    "Itália",
    "Jamaica",
    "Japão",
    "Jersey",
    "Jordânia",
    "Cazaquistão",
    "Quênia",
    "Kiribati",
    "Coreia do Norte",
    "Coreia do Sul",
    "Kuwait",
    "Kyrgyz Republic",
    "República Democrática de Lao People",
    "Latvia",
    "Líbano",
    "Lesotho",
    "Libéria",
    "Libyan Arab Jamahiriya",
    "Liechtenstein",
    "Lituânia",
    "Luxemburgo",
    "Macao",
    "Macedônia",
    "Madagascar",
    "Malawi",
    "Malásia",
    "Maldives",
    "Mali",
    "Malta",
    "Ilhas Marshall",
    "Martinica",
    "Mauritânia",
    "Mauritius",
    "Mayotte",
    "México",
    "Micronésia",
    "Moldova",
    "Mônaco",
    "Mongólia",
    "Montenegro",
    "Montserrat",
    "Marrocos",
    "Moçambique",
    "Myanmar",
    "Namibia",
    "Nauru",
    "Nepal",
    "Antilhas Holandesas",
    "Holanda",
    "Nova Caledonia",
    "Nova Zelândia",
    "Nicarágua",
    "Nigéria",
    "Niue",
    "Ilha Norfolk",
    "Northern Mariana Islands",
    "Noruega",
    "Oman",
    "Paquistão",
    "Palau",
    "Território da Palestina",
    "Panamá",
    "Nova Guiné Papua",
    "Paraguai",
    "Peru",
    "Filipinas",
    "Polônia",
    "Portugal",
    "Puerto Rico",
    "Qatar",
    "Romênia",
    "Rússia",
    "Ruanda",
    "São Bartolomeu",
    "Santa Helena",
    "Santa Lúcia",
    "Saint Martin",
    "Saint Pierre and Miquelon",
    "Saint Vincent and the Grenadines",
    "Samoa",
    "San Marino",
    "Sao Tomé e Príncipe",
    "Arábia Saudita",
    "Senegal",
    "Sérvia",
    "Seychelles",
    "Serra Leoa",
    "Singapura",
    "Eslováquia",
    "Eslovênia",
    "Ilhas Salomão",
    "Somália",
    "África do Sul",
    "South Georgia and the South Sandwich Islands",
    "Spanha",
    "Sri Lanka",
    "Sudão",
    "Suriname",
    "Svalbard & Jan Mayen Islands",
    "Swaziland",
    "Suécia",
    "Suíça",
    "Síria",
    "Taiwan",
    "Tajiquistão",
    "Tanzânia",
    "Tailândia",
    "Timor-Leste",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidá e Tobago",
    "Tunísia",
    "Turquia",
    "Turcomenistão",
    "Turks and Caicos Islands",
    "Tuvalu",
    "Uganda",
    "Ucrânia",
    "Emirados Árabes Unidos",
    "Reino Unido",
    "Estados Unidos da América",
    "Estados Unidos das Ilhas Virgens",
    "Uruguai",
    "Uzbequistão",
    "Vanuatu",
    "Venezuela",
    "Vietnã",
    "Wallis and Futuna",
    "Sahara",
    "Yemen",
    "Zâmbia",
    "Zimbábue"
  ],
  "building_number": [
    "#####",
    "####",
    "###"
  ],
  "street_suffix": [
    "Rua",
    "Avenida",
    "Travessa",
    "Ponte",
    "Alameda",
    "Marginal",
    "Viela",
    "Rodovia"
  ],
  "secondary_address": [
    "Apto. ###",
    "Sobrado ##",
    "Casa #",
    "Lote ##",
    "Quadra ##"
  ],
  "postcode": [
    "#####",
    "#####-###"
  ],
  "state": [
    "Acre",
    "Alagoas",
    "Amapá",
    "Amazonas",
    "Bahia",
    "Ceará",
    "Distrito Federal",
    "Espírito Santo",
    "Goiás",
    "Maranhão",
    "Mato Grosso",
    "Mato Grosso do Sul",
    "Minas Gerais",
    "Pará",
    "Paraíba",
    "Paraná",
    "Pernambuco",
    "Piauí",
    "Rio de Janeiro",
    "Rio Grande do Norte",
    "Rio Grande do Sul",
    "Rondônia",
    "Roraima",
    "Santa Catarina",
    "São Paulo",
    "Sergipe",
    "Tocantins"
  ],
  "state_abbr": [
    "AC",
    "AL",
    "AP",
    "AM",
    "BA",
    "CE",
    "DF",
    "ES",
    "GO",
    "MA",
    "MT",
    "MS",
    "PA",
    "PB",
    "PR",
    "PE",
    "PI",
    "RJ",
    "RN",
    "RS",
    "RO",
    "RR",
    "SC",
    "SP"
  ],
  "default_country": [
    "Brasil"
  ]
};
pt_BR.company = {
  "suffix": [
    "S.A.",
    "LTDA",
    "e Associados",
    "Comércio"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} e #{Name.last_name}"
  ]
};
pt_BR.internet = {
  "free_email": [
    "gmail.com",
    "yahoo.com",
    "hotmail.com",
    "live.com",
    "bol.com.br"
  ],
  "domain_suffix": [
    "br",
    "com",
    "biz",
    "info",
    "name",
    "net",
    "org"
  ]
};
pt_BR.lorem = {
  "words": [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ]
};
pt_BR.name = {
  "first_name": [
    "Alessandro",
    "Alessandra",
    "Alexandre",
    "Aline",
    "Antônio",
    "Breno",
    "Bruna",
    "Carlos",
    "Carla",
    "Célia",
    "Cecília",
    "César",
    "Danilo",
    "Dalila",
    "Deneval",
    "Eduardo",
    "Eduarda",
    "Esther",
    "Elísio",
    "Fábio",
    "Fabrício",
    "Fabrícia",
    "Félix",
    "Felícia",
    "Feliciano",
    "Frederico",
    "Fabiano",
    "Gustavo",
    "Guilherme",
    "Gúbio",
    "Heitor",
    "Hélio",
    "Hugo",
    "Isabel",
    "Isabela",
    "Ígor",
    "João",
    "Joana",
    "Júlio César",
    "Júlio",
    "Júlia",
    "Janaína",
    "Karla",
    "Kléber",
    "Lucas",
    "Lorena",
    "Lorraine",
    "Larissa",
    "Ladislau",
    "Marcos",
    "Meire",
    "Marcelo",
    "Marcela",
    "Margarida",
    "Mércia",
    "Márcia",
    "Marli",
    "Morgana",
    "Maria",
    "Norberto",
    "Natália",
    "Nataniel",
    "Núbia",
    "Ofélia",
    "Paulo",
    "Paula",
    "Pablo",
    "Pedro",
    "Raul",
    "Rafael",
    "Rafaela",
    "Ricardo",
    "Roberto",
    "Roberta",
    "Sílvia",
    "Sílvia",
    "Silas",
    "Suélen",
    "Sara",
    "Salvador",
    "Sirineu",
    "Talita",
    "Tertuliano",
    "Vicente",
    "Víctor",
    "Vitória",
    "Yango",
    "Yago",
    "Yuri",
    "Washington",
    "Warley"
  ],
  "last_name": [
    "Silva",
    "Souza",
    "Carvalho",
    "Santos",
    "Reis",
    "Xavier",
    "Franco",
    "Braga",
    "Macedo",
    "Batista",
    "Barros",
    "Moraes",
    "Costa",
    "Pereira",
    "Carvalho",
    "Melo",
    "Saraiva",
    "Nogueira",
    "Oliveira",
    "Martins",
    "Moreira",
    "Albuquerque"
  ],
  "prefix": [
    "Sr.",
    "Sra.",
    "Srta.",
    "Dr."
  ],
  "suffix": [
    "Jr.",
    "Neto",
    "Filho"
  ]
};
pt_BR.phone_number = {
  "formats": [
    "(##) ####-####",
    "+55 (##) ####-####",
    "(##) #####-####"
  ]
};

},{}],76:[function(require,module,exports){
var ru = {};
module["exports"] = ru;
ru.title = "Russian";
ru.separator = " и ";
ru.address = {
  "country": [
    "Австралия",
    "Австрия",
    "Азербайджан",
    "Албания",
    "Алжир",
    "Американское Самоа (не признана)",
    "Ангилья",
    "Ангола",
    "Андорра",
    "Антарктика (не признана)",
    "Антигуа и Барбуда",
    "Антильские Острова (не признана)",
    "Аомынь (не признана)",
    "Аргентина",
    "Армения",
    "Афганистан",
    "Багамские Острова",
    "Бангладеш",
    "Барбадос",
    "Бахрейн",
    "Беларусь",
    "Белиз",
    "Бельгия",
    "Бенин",
    "Болгария",
    "Боливия",
    "Босния и Герцеговина",
    "Ботсвана",
    "Бразилия",
    "Бруней",
    "Буркина-Фасо",
    "Бурунди",
    "Бутан",
    "Вануату",
    "Ватикан",
    "Великобритания",
    "Венгрия",
    "Венесуэла",
    "Восточный Тимор",
    "Вьетнам",
    "Габон",
    "Гаити",
    "Гайана",
    "Гамбия",
    "Гана",
    "Гваделупа (не признана)",
    "Гватемала",
    "Гвиана (не признана)",
    "Гвинея",
    "Гвинея-Бисау",
    "Германия",
    "Гондурас",
    "Гренада",
    "Греция",
    "Грузия",
    "Дания",
    "Джибути",
    "Доминика",
    "Доминиканская Республика",
    "Египет",
    "Замбия",
    "Зимбабве",
    "Израиль",
    "Индия",
    "Индонезия",
    "Иордания",
    "Ирак",
    "Иран",
    "Ирландия",
    "Исландия",
    "Испания",
    "Италия",
    "Йемен",
    "Кабо-Верде",
    "Казахстан",
    "Камбоджа",
    "Камерун",
    "Канада",
    "Катар",
    "Кения",
    "Кипр",
    "Кирибати",
    "Китай",
    "Колумбия",
    "Коморские Острова",
    "Конго",
    "Демократическая Республика",
    "Корея (Северная)",
    "Корея (Южная)",
    "Косово",
    "Коста-Рика",
    "Кот-д'Ивуар",
    "Куба",
    "Кувейт",
    "Кука острова",
    "Кыргызстан",
    "Лаос",
    "Латвия",
    "Лесото",
    "Либерия",
    "Ливан",
    "Ливия",
    "Литва",
    "Лихтенштейн",
    "Люксембург",
    "Маврикий",
    "Мавритания",
    "Мадагаскар",
    "Македония",
    "Малави",
    "Малайзия",
    "Мали",
    "Мальдивы",
    "Мальта",
    "Маршалловы Острова",
    "Мексика",
    "Микронезия",
    "Мозамбик",
    "Молдова",
    "Монако",
    "Монголия",
    "Марокко",
    "Мьянма",
    "Намибия",
    "Науру",
    "Непал",
    "Нигер",
    "Нигерия",
    "Нидерланды",
    "Никарагуа",
    "Новая Зеландия",
    "Норвегия",
    "Объединенные Арабские Эмираты",
    "Оман",
    "Пакистан",
    "Палау",
    "Панама",
    "Папуа — Новая Гвинея",
    "Парагвай",
    "Перу",
    "Польша",
    "Португалия",
    "Республика Конго",
    "Россия",
    "Руанда",
    "Румыния",
    "Сальвадор",
    "Самоа",
    "Сан-Марино",
    "Сан-Томе и Принсипи",
    "Саудовская Аравия",
    "Свазиленд",
    "Сейшельские острова",
    "Сенегал",
    "Сент-Винсент и Гренадины",
    "Сент-Киттс и Невис",
    "Сент-Люсия",
    "Сербия",
    "Сингапур",
    "Сирия",
    "Словакия",
    "Словения",
    "Соединенные Штаты Америки",
    "Соломоновы Острова",
    "Сомали",
    "Судан",
    "Суринам",
    "Сьерра-Леоне",
    "Таджикистан",
    "Таиланд",
    "Тайвань (не признана)",
    "Тамил-Илам (не признана)",
    "Танзания",
    "Тёркс и Кайкос (не признана)",
    "Того",
    "Токелау (не признана)",
    "Тонга",
    "Тринидад и Тобаго",
    "Тувалу",
    "Тунис",
    "Турецкая Республика Северного Кипра (не признана)",
    "Туркменистан",
    "Турция",
    "Уганда",
    "Узбекистан",
    "Украина",
    "Уругвай",
    "Фарерские Острова (не признана)",
    "Фиджи",
    "Филиппины",
    "Финляндия",
    "Франция",
    "Французская Полинезия (не признана)",
    "Хорватия",
    "Центральноафриканская Республика",
    "Чад",
    "Черногория",
    "Чехия",
    "Чили",
    "Швейцария",
    "Швеция",
    "Шри-Ланка",
    "Эквадор",
    "Экваториальная Гвинея",
    "Эритрея",
    "Эстония",
    "Эфиопия",
    "Южно-Африканская Республика",
    "Ямайка",
    "Япония"
  ],
  "building_number": [
    "###"
  ],
  "street_suffix": [
    "ул.",
    "улица",
    "проспект",
    "пр.",
    "площадь",
    "пл."
  ],
  "secondary_address": [
    "кв. ###"
  ],
  "postcode": [
    "######"
  ],
  "state": [
    "Республика Адыгея",
    "Республика Башкортостан",
    "Республика Бурятия",
    "Республика Алтай Республика Дагестан",
    "Республика Ингушетия",
    "Кабардино-Балкарская Республика",
    "Республика Калмыкия",
    "Республика Карачаево-Черкессия",
    "Республика Карелия",
    "Республика Коми",
    "Республика Марий Эл",
    "Республика Мордовия",
    "Республика Саха (Якутия)",
    "Республика Северная Осетия-Алания",
    "Республика Татарстан",
    "Республика Тыва",
    "Удмуртская Республика",
    "Республика Хакасия",
    "Чувашская Республика",
    "Алтайский край",
    "Краснодарский край",
    "Красноярский край",
    "Приморский край",
    "Ставропольский край",
    "Хабаровский край",
    "Амурская область",
    "Архангельская область",
    "Астраханская область",
    "Белгородская область",
    "Брянская область",
    "Владимирская область",
    "Волгоградская область",
    "Вологодская область",
    "Воронежская область",
    "Ивановская область",
    "Иркутская область",
    "Калиниградская область",
    "Калужская область",
    "Камчатская область",
    "Кемеровская область",
    "Кировская область",
    "Костромская область",
    "Курганская область",
    "Курская область",
    "Ленинградская область",
    "Липецкая область",
    "Магаданская область",
    "Московская область",
    "Мурманская область",
    "Нижегородская область",
    "Новгородская область",
    "Новосибирская область",
    "Омская область",
    "Оренбургская область",
    "Орловская область",
    "Пензенская область",
    "Пермская область",
    "Псковская область",
    "Ростовская область",
    "Рязанская область",
    "Самарская область",
    "Саратовская область",
    "Сахалинская область",
    "Свердловская область",
    "Смоленская область",
    "Тамбовская область",
    "Тверская область",
    "Томская область",
    "Тульская область",
    "Тюменская область",
    "Ульяновская область",
    "Челябинская область",
    "Читинская область",
    "Ярославская область",
    "Еврейская автономная область",
    "Агинский Бурятский авт. округ",
    "Коми-Пермяцкий автономный округ",
    "Корякский автономный округ",
    "Ненецкий автономный округ",
    "Таймырский (Долгано-Ненецкий) автономный округ",
    "Усть-Ордынский Бурятский автономный округ",
    "Ханты-Мансийский автономный округ",
    "Чукотский автономный округ",
    "Эвенкийский автономный округ",
    "Ямало-Ненецкий автономный округ",
    "Чеченская Республика"
  ],
  "street_title": [
    "Советская",
    "Молодежная",
    "Центральная",
    "Школьная",
    "Новая",
    "Садовая",
    "Лесная",
    "Набережная",
    "Ленина",
    "Мира",
    "Октябрьская",
    "Зеленая",
    "Комсомольская",
    "Заречная",
    "Первомайская",
    "Гагарина",
    "Полевая",
    "Луговая",
    "Пионерская",
    "Кирова",
    "Юбилейная",
    "Северная",
    "Пролетарская",
    "Степная",
    "Пушкина",
    "Калинина",
    "Южная",
    "Колхозная",
    "Рабочая",
    "Солнечная",
    "Железнодорожная",
    "Восточная",
    "Заводская",
    "Чапаева",
    "Нагорная",
    "Строителей",
    "Береговая",
    "Победы",
    "Горького",
    "Кооперативная",
    "Красноармейская",
    "Совхозная",
    "Речная",
    "Школьный",
    "Спортивная",
    "Озерная",
    "Строительная",
    "Парковая",
    "Чкалова",
    "Мичурина",
    "речень улиц",
    "Подгорная",
    "Дружбы",
    "Почтовая",
    "Партизанская",
    "Вокзальная",
    "Лермонтова",
    "Свободы",
    "Дорожная",
    "Дачная",
    "Маяковского",
    "Западная",
    "Фрунзе",
    "Дзержинского",
    "Московская",
    "Свердлова",
    "Некрасова",
    "Гоголя",
    "Красная",
    "Трудовая",
    "Шоссейная",
    "Чехова",
    "Коммунистическая",
    "Труда",
    "Комарова",
    "Матросова",
    "Островского",
    "Сосновая",
    "Клубная",
    "Куйбышева",
    "Крупской",
    "Березовая",
    "Карла Маркса",
    "8 Марта",
    "Больничная",
    "Садовый",
    "Интернациональная",
    "Суворова",
    "Цветочная",
    "Трактовая",
    "Ломоносова",
    "Горная",
    "Космонавтов",
    "Энергетиков",
    "Шевченко",
    "Весенняя",
    "Механизаторов",
    "Коммунальная",
    "Лесной",
    "40 лет Победы",
    "Майская"
  ],
  "city_name": [
    "Москва",
    "Владимир",
    "Санкт-Петербург",
    "Новосибирск",
    "Екатеринбург",
    "Нижний Новгород",
    "Самара",
    "Казань",
    "Омск",
    "Челябинск",
    "Ростов-на-Дону",
    "Уфа",
    "Волгоград",
    "Пермь",
    "Красноярск",
    "Воронеж",
    "Саратов",
    "Краснодар",
    "Тольятти",
    "Ижевск",
    "Барнаул",
    "Ульяновск",
    "Тюмень",
    "Иркутск",
    "Владивосток",
    "Ярославль",
    "Хабаровск",
    "Махачкала",
    "Оренбург",
    "Новокузнецк",
    "Томск",
    "Кемерово",
    "Рязань",
    "Астрахань",
    "Пенза",
    "Липецк",
    "Тула",
    "Киров",
    "Чебоксары",
    "Курск",
    "Брянскm Магнитогорск",
    "Иваново",
    "Тверь",
    "Ставрополь",
    "Белгород",
    "Сочи"
  ],
  "city": [
    "#{Address.city_name}"
  ],
  "street_name": [
    "#{street_suffix} #{Address.street_title}",
    "#{Address.street_title} #{street_suffix}"
  ],
  "street_address": [
    "#{street_name}, #{building_number}"
  ],
  "default_country": [
    "Россия"
  ]
};
ru.internet = {
  "free_email": [
    "yandex.ru",
    "ya.ru",
    "mail.ru",
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ],
  "domain_suffix": [
    "com",
    "ru",
    "info",
    "рф",
    "net",
    "org"
  ]
};
ru.name = {
  "male_first_name": [
    "Александр",
    "Алексей",
    "Альберт",
    "Анатолий",
    "Андрей",
    "Антон",
    "Аркадий",
    "Арсений",
    "Артём",
    "Борис",
    "Вадим",
    "Валентин",
    "Валерий",
    "Василий",
    "Виктор",
    "Виталий",
    "Владимир",
    "Владислав",
    "Вячеслав",
    "Геннадий",
    "Георгий",
    "Герман",
    "Григорий",
    "Даниил",
    "Денис",
    "Дмитрий",
    "Евгений",
    "Егор",
    "Иван",
    "Игнатий",
    "Игорь",
    "Илья",
    "Константин",
    "Лаврентий",
    "Леонид",
    "Лука",
    "Макар",
    "Максим",
    "Матвей",
    "Михаил",
    "Никита",
    "Николай",
    "Олег",
    "Роман",
    "Семён",
    "Сергей",
    "Станислав",
    "Степан",
    "Фёдор",
    "Эдуард",
    "Юрий",
    "Ярослав"
  ],
  "male_middle_name": [
    "Александрович",
    "Алексеевич",
    "Альбертович",
    "Анатольевич",
    "Андреевич",
    "Антонович",
    "Аркадьевич",
    "Арсеньевич",
    "Артёмович",
    "Борисович",
    "Вадимович",
    "Валентинович",
    "Валерьевич",
    "Васильевич",
    "Викторович",
    "Витальевич",
    "Владимирович",
    "Владиславович",
    "Вячеславович",
    "Геннадьевич",
    "Георгиевич",
    "Германович",
    "Григорьевич",
    "Даниилович",
    "Денисович",
    "Дмитриевич",
    "Евгеньевич",
    "Егорович",
    "Иванович",
    "Игнатьевич",
    "Игоревич",
    "Ильич",
    "Константинович",
    "Лаврентьевич",
    "Леонидович",
    "Лукич",
    "Макарович",
    "Максимович",
    "Матвеевич",
    "Михайлович",
    "Никитич",
    "Николаевич",
    "Олегович",
    "Романович",
    "Семёнович",
    "Сергеевич",
    "Станиславович",
    "Степанович",
    "Фёдорович",
    "Эдуардович",
    "Юрьевич",
    "Ярославович"
  ],
  "male_last_name": [
    "Смирнов",
    "Иванов",
    "Кузнецов",
    "Попов",
    "Соколов",
    "Лебедев",
    "Козлов",
    "Новиков",
    "Морозов",
    "Петров",
    "Волков",
    "Соловьев",
    "Васильев",
    "Зайцев",
    "Павлов",
    "Семенов",
    "Голубев",
    "Виноградов",
    "Богданов",
    "Воробьев",
    "Федоров",
    "Михайлов",
    "Беляев",
    "Тарасов",
    "Белов",
    "Комаров",
    "Орлов",
    "Киселев",
    "Макаров",
    "Андреев",
    "Ковалев",
    "Ильин",
    "Гусев",
    "Титов",
    "Кузьмин",
    "Кудрявцев",
    "Баранов",
    "Куликов",
    "Алексеев",
    "Степанов",
    "Яковлев",
    "Сорокин",
    "Сергеев",
    "Романов",
    "Захаров",
    "Борисов",
    "Королев",
    "Герасимов",
    "Пономарев",
    "Григорьев",
    "Лазарев",
    "Медведев",
    "Ершов",
    "Никитин",
    "Соболев",
    "Рябов",
    "Поляков",
    "Цветков",
    "Данилов",
    "Жуков",
    "Фролов",
    "Журавлев",
    "Николаев",
    "Крылов",
    "Максимов",
    "Сидоров",
    "Осипов",
    "Белоусов",
    "Федотов",
    "Дорофеев",
    "Егоров",
    "Матвеев",
    "Бобров",
    "Дмитриев",
    "Калинин",
    "Анисимов",
    "Петухов",
    "Антонов",
    "Тимофеев",
    "Никифоров",
    "Веселов",
    "Филиппов",
    "Марков",
    "Большаков",
    "Суханов",
    "Миронов",
    "Ширяев",
    "Александров",
    "Коновалов",
    "Шестаков",
    "Казаков",
    "Ефимов",
    "Денисов",
    "Громов",
    "Фомин",
    "Давыдов",
    "Мельников",
    "Щербаков",
    "Блинов",
    "Колесников",
    "Карпов",
    "Афанасьев",
    "Власов",
    "Маслов",
    "Исаков",
    "Тихонов",
    "Аксенов",
    "Гаврилов",
    "Родионов",
    "Котов",
    "Горбунов",
    "Кудряшов",
    "Быков",
    "Зуев",
    "Третьяков",
    "Савельев",
    "Панов",
    "Рыбаков",
    "Суворов",
    "Абрамов",
    "Воронов",
    "Мухин",
    "Архипов",
    "Трофимов",
    "Мартынов",
    "Емельянов",
    "Горшков",
    "Чернов",
    "Овчинников",
    "Селезнев",
    "Панфилов",
    "Копылов",
    "Михеев",
    "Галкин",
    "Назаров",
    "Лобанов",
    "Лукин",
    "Беляков",
    "Потапов",
    "Некрасов",
    "Хохлов",
    "Жданов",
    "Наумов",
    "Шилов",
    "Воронцов",
    "Ермаков",
    "Дроздов",
    "Игнатьев",
    "Савин",
    "Логинов",
    "Сафонов",
    "Капустин",
    "Кириллов",
    "Моисеев",
    "Елисеев",
    "Кошелев",
    "Костин",
    "Горбачев",
    "Орехов",
    "Ефремов",
    "Исаев",
    "Евдокимов",
    "Калашников",
    "Кабанов",
    "Носков",
    "Юдин",
    "Кулагин",
    "Лапин",
    "Прохоров",
    "Нестеров",
    "Харитонов",
    "Агафонов",
    "Муравьев",
    "Ларионов",
    "Федосеев",
    "Зимин",
    "Пахомов",
    "Шубин",
    "Игнатов",
    "Филатов",
    "Крюков",
    "Рогов",
    "Кулаков",
    "Терентьев",
    "Молчанов",
    "Владимиров",
    "Артемьев",
    "Гурьев",
    "Зиновьев",
    "Гришин",
    "Кононов",
    "Дементьев",
    "Ситников",
    "Симонов",
    "Мишин",
    "Фадеев",
    "Комиссаров",
    "Мамонтов",
    "Носов",
    "Гуляев",
    "Шаров",
    "Устинов",
    "Вишняков",
    "Евсеев",
    "Лаврентьев",
    "Брагин",
    "Константинов",
    "Корнилов",
    "Авдеев",
    "Зыков",
    "Бирюков",
    "Шарапов",
    "Никонов",
    "Щукин",
    "Дьячков",
    "Одинцов",
    "Сазонов",
    "Якушев",
    "Красильников",
    "Гордеев",
    "Самойлов",
    "Князев",
    "Беспалов",
    "Уваров",
    "Шашков",
    "Бобылев",
    "Доронин",
    "Белозеров",
    "Рожков",
    "Самсонов",
    "Мясников",
    "Лихачев",
    "Буров",
    "Сысоев",
    "Фомичев",
    "Русаков",
    "Стрелков",
    "Гущин",
    "Тетерин",
    "Колобов",
    "Субботин",
    "Фокин",
    "Блохин",
    "Селиверстов",
    "Пестов",
    "Кондратьев",
    "Силин",
    "Меркушев",
    "Лыткин",
    "Туров"
  ],
  "female_first_name": [
    "Анна",
    "Алёна",
    "Алевтина",
    "Александра",
    "Алина",
    "Алла",
    "Анастасия",
    "Ангелина",
    "Анжела",
    "Анжелика",
    "Антонида",
    "Антонина",
    "Анфиса",
    "Арина",
    "Валентина",
    "Валерия",
    "Варвара",
    "Василиса",
    "Вера",
    "Вероника",
    "Виктория",
    "Галина",
    "Дарья",
    "Евгения",
    "Екатерина",
    "Елена",
    "Елизавета",
    "Жанна",
    "Зинаида",
    "Зоя",
    "Ирина",
    "Кира",
    "Клавдия",
    "Ксения",
    "Лариса",
    "Лидия",
    "Любовь",
    "Людмила",
    "Маргарита",
    "Марина",
    "Мария",
    "Надежда",
    "Наталья",
    "Нина",
    "Оксана",
    "Ольга",
    "Раиса",
    "Регина",
    "Римма",
    "Светлана",
    "София",
    "Таисия",
    "Тамара",
    "Татьяна",
    "Ульяна",
    "Юлия"
  ],
  "female_middle_name": [
    "Александровна",
    "Алексеевна",
    "Альбертовна",
    "Анатольевна",
    "Андреевна",
    "Антоновна",
    "Аркадьевна",
    "Арсеньевна",
    "Артёмовна",
    "Борисовна",
    "Вадимовна",
    "Валентиновна",
    "Валерьевна",
    "Васильевна",
    "Викторовна",
    "Витальевна",
    "Владимировна",
    "Владиславовна",
    "Вячеславовна",
    "Геннадьевна",
    "Георгиевна",
    "Германовна",
    "Григорьевна",
    "Данииловна",
    "Денисовна",
    "Дмитриевна",
    "Евгеньевна",
    "Егоровна",
    "Ивановна",
    "Игнатьевна",
    "Игоревна",
    "Ильинична",
    "Константиновна",
    "Лаврентьевна",
    "Леонидовна",
    "Макаровна",
    "Максимовна",
    "Матвеевна",
    "Михайловна",
    "Никитична",
    "Николаевна",
    "Олеговна",
    "Романовна",
    "Семёновна",
    "Сергеевна",
    "Станиславовна",
    "Степановна",
    "Фёдоровна",
    "Эдуардовна",
    "Юрьевна",
    "Ярославовна"
  ],
  "female_last_name": [
    "Смирнова",
    "Иванова",
    "Кузнецова",
    "Попова",
    "Соколова",
    "Лебедева",
    "Козлова",
    "Новикова",
    "Морозова",
    "Петрова",
    "Волкова",
    "Соловьева",
    "Васильева",
    "Зайцева",
    "Павлова",
    "Семенова",
    "Голубева",
    "Виноградова",
    "Богданова",
    "Воробьева",
    "Федорова",
    "Михайлова",
    "Беляева",
    "Тарасова",
    "Белова",
    "Комарова",
    "Орлова",
    "Киселева",
    "Макарова",
    "Андреева",
    "Ковалева",
    "Ильина",
    "Гусева",
    "Титова",
    "Кузьмина",
    "Кудрявцева",
    "Баранова",
    "Куликова",
    "Алексеева",
    "Степанова",
    "Яковлева",
    "Сорокина",
    "Сергеева",
    "Романова",
    "Захарова",
    "Борисова",
    "Королева",
    "Герасимова",
    "Пономарева",
    "Григорьева",
    "Лазарева",
    "Медведева",
    "Ершова",
    "Никитина",
    "Соболева",
    "Рябова",
    "Полякова",
    "Цветкова",
    "Данилова",
    "Жукова",
    "Фролова",
    "Журавлева",
    "Николаева",
    "Крылова",
    "Максимова",
    "Сидорова",
    "Осипова",
    "Белоусова",
    "Федотова",
    "Дорофеева",
    "Егорова",
    "Матвеева",
    "Боброва",
    "Дмитриева",
    "Калинина",
    "Анисимова",
    "Петухова",
    "Антонова",
    "Тимофеева",
    "Никифорова",
    "Веселова",
    "Филиппова",
    "Маркова",
    "Большакова",
    "Суханова",
    "Миронова",
    "Ширяева",
    "Александрова",
    "Коновалова",
    "Шестакова",
    "Казакова",
    "Ефимова",
    "Денисова",
    "Громова",
    "Фомина",
    "Давыдова",
    "Мельникова",
    "Щербакова",
    "Блинова",
    "Колесникова",
    "Карпова",
    "Афанасьева",
    "Власова",
    "Маслова",
    "Исакова",
    "Тихонова",
    "Аксенова",
    "Гаврилова",
    "Родионова",
    "Котова",
    "Горбунова",
    "Кудряшова",
    "Быкова",
    "Зуева",
    "Третьякова",
    "Савельева",
    "Панова",
    "Рыбакова",
    "Суворова",
    "Абрамова",
    "Воронова",
    "Мухина",
    "Архипова",
    "Трофимова",
    "Мартынова",
    "Емельянова",
    "Горшкова",
    "Чернова",
    "Овчинникова",
    "Селезнева",
    "Панфилова",
    "Копылова",
    "Михеева",
    "Галкина",
    "Назарова",
    "Лобанова",
    "Лукина",
    "Белякова",
    "Потапова",
    "Некрасова",
    "Хохлова",
    "Жданова",
    "Наумова",
    "Шилова",
    "Воронцова",
    "Ермакова",
    "Дроздова",
    "Игнатьева",
    "Савина",
    "Логинова",
    "Сафонова",
    "Капустина",
    "Кириллова",
    "Моисеева",
    "Елисеева",
    "Кошелева",
    "Костина",
    "Горбачева",
    "Орехова",
    "Ефремова",
    "Исаева",
    "Евдокимова",
    "Калашникова",
    "Кабанова",
    "Носкова",
    "Юдина",
    "Кулагина",
    "Лапина",
    "Прохорова",
    "Нестерова",
    "Харитонова",
    "Агафонова",
    "Муравьева",
    "Ларионова",
    "Федосеева",
    "Зимина",
    "Пахомова",
    "Шубина",
    "Игнатова",
    "Филатова",
    "Крюкова",
    "Рогова",
    "Кулакова",
    "Терентьева",
    "Молчанова",
    "Владимирова",
    "Артемьева",
    "Гурьева",
    "Зиновьева",
    "Гришина",
    "Кононова",
    "Дементьева",
    "Ситникова",
    "Симонова",
    "Мишина",
    "Фадеева",
    "Комиссарова",
    "Мамонтова",
    "Носова",
    "Гуляева",
    "Шарова",
    "Устинова",
    "Вишнякова",
    "Евсеева",
    "Лаврентьева",
    "Брагина",
    "Константинова",
    "Корнилова",
    "Авдеева",
    "Зыкова",
    "Бирюкова",
    "Шарапова",
    "Никонова",
    "Щукина",
    "Дьячкова",
    "Одинцова",
    "Сазонова",
    "Якушева",
    "Красильникова",
    "Гордеева",
    "Самойлова",
    "Князева",
    "Беспалова",
    "Уварова",
    "Шашкова",
    "Бобылева",
    "Доронина",
    "Белозерова",
    "Рожкова",
    "Самсонова",
    "Мясникова",
    "Лихачева",
    "Бурова",
    "Сысоева",
    "Фомичева",
    "Русакова",
    "Стрелкова",
    "Гущина",
    "Тетерина",
    "Колобова",
    "Субботина",
    "Фокина",
    "Блохина",
    "Селиверстова",
    "Пестова",
    "Кондратьева",
    "Силина",
    "Меркушева",
    "Лыткина",
    "Турова"
  ],
  "name": [
    "#{male_first_name} #{male_last_name}",
    "#{male_last_name} #{male_first_name}",
    "#{male_first_name} #{male_middle_name} #{male_last_name}",
    "#{male_last_name} #{male_first_name} #{male_middle_name}",
    "#{female_first_name} #{female_last_name}",
    "#{female_last_name} #{female_first_name}",
    "#{female_first_name} #{female_middle_name} #{female_last_name}",
    "#{female_last_name} #{female_first_name} #{female_middle_name}"
  ]
};
ru.phone_number = {
  "formats": [
    "(9##)###-##-##"
  ]
};
ru.commerce = {
  "color": [
    "красный",
    "зеленый",
    "синий",
    "желтый",
    "багровый",
    "мятный",
    "зеленовато-голубой",
    "белый",
    "черный",
    "оранжевый",
    "розовый",
    "серый",
    "красно-коричневый",
    "фиолетовый",
    "бирюзовый",
    "желто-коричневый",
    "небесно голубой",
    "оранжево-розовый",
    "темно-фиолетовый",
    "орхидный",
    "оливковый",
    "пурпурный",
    "лимонный",
    "кремовый",
    "сине-фиолетовый",
    "золотой",
    "красно-пурпурный",
    "голубой",
    "лазурный",
    "лиловый",
    "серебряный"
  ],
  "department": [
    "Книги",
    "Фильмы",
    "музыка",
    "игры",
    "Электроника",
    "компьютеры",
    "Дом",
    "садинструмент",
    "Бакалея",
    "здоровье",
    "красота",
    "Игрушки",
    "детское",
    "для малышей",
    "Одежда",
    "обувь",
    "украшения",
    "Спорт",
    "туризм",
    "Автомобильное",
    "промышленное"
  ],
  "product_name": {
    "adjective": [
      "Маленький",
      "Эргономичный",
      "Грубый",
      "Интеллектуальный",
      "Великолепный",
      "Невероятный",
      "Фантастический",
      "Практчиный",
      "Лоснящийся",
      "Потрясающий"
    ],
    "material": [
      "Стальной",
      "Деревянный",
      "Бетонный",
      "Пластиковый",
      "Хлопковый",
      "Гранитный",
      "Резиновый"
    ],
    "product": [
      "Стул",
      "Автомобиль",
      "Компьютер",
      "Берет",
      "Кулон",
      "Стол",
      "Свитер",
      "Ремень",
      "Ботинок"
    ]
  }
};
ru.company = {
  "prefix": [
    "ИП",
    "ООО",
    "ЗАО",
    "ОАО",
    "НКО",
    "ТСЖ",
    "ОП"
  ],
  "suffix": [
    "Снаб",
    "Торг",
    "Пром",
    "Трейд",
    "Сбыт"
  ],
  "name": [
    "#{prefix} #{Name.female_first_name}",
    "#{prefix} #{Name.male_first_name}",
    "#{prefix} #{Name.male_last_name}",
    "#{prefix} #{suffix}#{suffix}",
    "#{prefix} #{suffix}#{suffix}#{suffix}",
    "#{prefix} #{Address.city_name}#{suffix}",
    "#{prefix} #{Address.city_name}#{suffix}#{suffix}",
    "#{prefix} #{Address.city_name}#{suffix}#{suffix}#{suffix}"
  ]
};

},{}],77:[function(require,module,exports){
var sk = {};
module["exports"] = sk;
sk.title = "Slovakian";
sk.address = {
  "city_prefix": [
    "North",
    "East",
    "West",
    "South",
    "New",
    "Lake",
    "Port"
  ],
  "city_suffix": [
    "town",
    "ton",
    "land",
    "ville",
    "berg",
    "burgh",
    "borough",
    "bury",
    "view",
    "port",
    "mouth",
    "stad",
    "furt",
    "chester",
    "mouth",
    "fort",
    "haven",
    "side",
    "shire"
  ],
  "country": [
    "Afganistan",
    "Afgánsky islamský štát",
    "Albánsko",
    "Albánska republika",
    "Alžírsko",
    "Alžírska demokratická ľudová republika",
    "Andorra",
    "Andorrské kniežatsvo",
    "Angola",
    "Angolská republika",
    "Antigua a Barbuda",
    "Antigua a Barbuda",
    "Argentína",
    "Argentínska republika",
    "Arménsko",
    "Arménska republika",
    "Austrália",
    "Austrálsky zväz",
    "Azerbajdžan",
    "Azerbajdžanská republika",
    "Bahamy",
    "Bahamské spoločenstvo",
    "Bahrajn",
    "Bahrajnské kráľovstvo",
    "Bangladéš",
    "Bangladéšska ľudová republika",
    "Barbados",
    "Barbados",
    "Belgicko",
    "Belgické kráľovstvo",
    "Belize",
    "Belize",
    "Benin",
    "Beninská republika",
    "Bhután",
    "Bhutánske kráľovstvo",
    "Bielorusko",
    "Bieloruská republika",
    "Bolívia",
    "Bolívijská republika",
    "Bosna a Hercegovina",
    "Republika Bosny a Hercegoviny",
    "Botswana",
    "Botswanská republika",
    "Brazília",
    "Brazílska federatívna republika",
    "Brunej",
    "Brunejský sultanát",
    "Bulharsko",
    "Bulharská republika",
    "Burkina Faso",
    "Burkina Faso",
    "Burundi",
    "Burundská republika",
    "Cyprus",
    "Cyperská republika",
    "Čad",
    "Republika Čad",
    "Česko",
    "Česká republika",
    "Čína",
    "Čínska ľudová republika",
    "Dánsko",
    "Dánsko kráľovstvo",
    "Dominika",
    "Spoločenstvo Dominika",
    "Dominikánska republika",
    "Dominikánska republika",
    "Džibutsko",
    "Džibutská republika",
    "Egypt",
    "Egyptská arabská republika",
    "Ekvádor",
    "Ekvádorská republika",
    "Eritrea",
    "Eritrejský štát",
    "Estónsko",
    "Estónska republika",
    "Etiópia",
    "Etiópska federatívna demokratická republika",
    "Fidži",
    "Republika ostrovy Fidži",
    "Filipíny",
    "Filipínska republika",
    "Fínsko",
    "Fínska republika",
    "Francúzsko",
    "Francúzska republika",
    "Gabon",
    "Gabonská republika",
    "Gambia",
    "Gambijská republika",
    "Ghana",
    "Ghanská republika",
    "Grécko",
    "Helénska republika",
    "Grenada",
    "Grenada",
    "Gruzínsko",
    "Gruzínsko",
    "Guatemala",
    "Guatemalská republika",
    "Guinea",
    "Guinejská republika",
    "Guinea-Bissau",
    "Republika Guinea-Bissau",
    "Guayana",
    "Guayanská republika",
    "Haiti",
    "Republika Haiti",
    "Holandsko",
    "Holandské kráľovstvo",
    "Honduras",
    "Honduraská republika",
    "Chile",
    "Čílska republika",
    "Chorvátsko",
    "Chorvátska republika",
    "India",
    "Indická republika",
    "Indonézia",
    "Indonézska republika",
    "Irak",
    "Iracká republika",
    "Irán",
    "Iránska islamská republika",
    "Island",
    "Islandská republika",
    "Izrael",
    "Štát Izrael",
    "Írsko",
    "Írska republika",
    "Jamajka",
    "Jamajka",
    "Japonsko",
    "Japonsko",
    "Jemen",
    "Jemenská republika",
    "Jordánsko",
    "Jordánske hášimovské kráľovstvo",
    "Južná Afrika",
    "Juhoafrická republika",
    "Kambodža",
    "Kambodžské kráľovstvo",
    "Kamerun",
    "Kamerunská republika",
    "Kanada",
    "Kanada",
    "Kapverdy",
    "Kapverdská republika",
    "Katar",
    "Štát Katar",
    "Kazachstan",
    "Kazašská republika",
    "Keňa",
    "Kenská republika",
    "Kirgizsko",
    "Kirgizská republika",
    "Kiribati",
    "Kiribatská republika",
    "Kolumbia",
    "Kolumbijská republika",
    "Komory",
    "Komorská únia",
    "Kongo",
    "Konžská demokratická republika",
    "Kongo (\"Brazzaville\")",
    "Konžská republika",
    "Kórea (\"Južná\")",
    "Kórejská republika",
    "Kórea (\"Severná\")",
    "Kórejská ľudovodemokratická republika",
    "Kostarika",
    "Kostarická republika",
    "Kuba",
    "Kubánska republika",
    "Kuvajt",
    "Kuvajtský štát",
    "Laos",
    "Laoská ľudovodemokratická republika",
    "Lesotho",
    "Lesothské kráľovstvo",
    "Libanon",
    "Libanonská republika",
    "Libéria",
    "Libérijská republika",
    "Líbya",
    "Líbyjská arabská ľudová socialistická džamáhírija",
    "Lichtenštajnsko",
    "Lichtenštajnské kniežatstvo",
    "Litva",
    "Litovská republika",
    "Lotyšsko",
    "Lotyšská republika",
    "Luxembursko",
    "Luxemburské veľkovojvodstvo",
    "Macedónsko",
    "Macedónska republika",
    "Madagaskar",
    "Madagaskarská republika",
    "Maďarsko",
    "Maďarská republika",
    "Malajzia",
    "Malajzia",
    "Malawi",
    "Malawijská republika",
    "Maldivy",
    "Maldivská republika",
    "Mali",
    "Malijská republika",
    "Malta",
    "Malta",
    "Maroko",
    "Marocké kráľovstvo",
    "Marshallove ostrovy",
    "Republika Marshallových ostrovy",
    "Mauritánia",
    "Mauritánska islamská republika",
    "Maurícius",
    "Maurícijská republika",
    "Mexiko",
    "Spojené štáty mexické",
    "Mikronézia",
    "Mikronézske federatívne štáty",
    "Mjanmarsko",
    "Mjanmarský zväz",
    "Moldavsko",
    "Moldavská republika",
    "Monako",
    "Monacké kniežatstvo",
    "Mongolsko",
    "Mongolsko",
    "Mozambik",
    "Mozambická republika",
    "Namíbia",
    "Namíbijská republika",
    "Nauru",
    "Naurská republika",
    "Nemecko",
    "Nemecká spolková republika",
    "Nepál",
    "Nepálske kráľovstvo",
    "Niger",
    "Nigerská republika",
    "Nigéria",
    "Nigérijská federatívna republika",
    "Nikaragua",
    "Nikaragujská republika",
    "Nový Zéland",
    "Nový Zéland",
    "Nórsko",
    "Nórske kráľovstvo",
    "Omán",
    "Ománsky sultanát",
    "Pakistan",
    "Pakistanská islamská republika",
    "Palau",
    "Palauská republika",
    "Panama",
    "Panamská republika",
    "Papua-Nová Guinea",
    "Nezávislý štát Papua-Nová Guinea",
    "Paraguaj",
    "Paraguajská republika",
    "Peru",
    "Peruánska republika",
    "Pobrežie Slonoviny",
    "Republika Pobrežie Slonoviny",
    "Poľsko",
    "Poľská republika",
    "Portugalsko",
    "Portugalská republika",
    "Rakúsko",
    "Rakúska republika",
    "Rovníková Guinea",
    "Republika Rovníková Guinea",
    "Rumunsko",
    "Rumunsko",
    "Rusko",
    "Ruská federácia",
    "Rwanda",
    "Rwandská republika",
    "Salvádor",
    "Salvádorská republika",
    "Samoa",
    "Nezávislý štát Samoa",
    "San Maríno",
    "Sanmarínska republika",
    "Saudská Arábia",
    "Kráľovstvo Saudskej Arábie",
    "Senegal",
    "Senegalská republika",
    "Seychely",
    "Seychelská republika",
    "Sierra Leone",
    "Republika Sierra Leone",
    "Singapur",
    "Singapurska republika",
    "Slovensko",
    "Slovenská republika",
    "Slovinsko",
    "Slovinská republika",
    "Somálsko",
    "Somálska demokratická republika",
    "Spojené arabské emiráty",
    "Spojené arabské emiráty",
    "Spojené štáty americké",
    "Spojené štáty americké",
    "Srbsko a Čierna Hora",
    "Srbsko a Čierna Hora",
    "Srí Lanka",
    "Demokratická socialistická republika Srí Lanka",
    "Stredoafrická republika",
    "Stredoafrická republika",
    "Sudán",
    "Sudánska republika",
    "Surinam",
    "Surinamská republika",
    "Svazijsko",
    "Svazijské kráľovstvo",
    "Svätá Lucia",
    "Svätá Lucia",
    "Svätý Krištof a Nevis",
    "Federácia Svätý Krištof a Nevis",
    "Sv. Tomáš a Princov Ostrov",
    "Demokratická republika Svätý Tomáš a Princov Ostrov",
    "Sv. Vincent a Grenadíny",
    "Svätý Vincent a Grenadíny",
    "Sýria",
    "Sýrska arabská republika",
    "Šalamúnove ostrovy",
    "Šalamúnove ostrovy",
    "Španielsko",
    "Španielske kráľovstvo",
    "Švajčiarsko",
    "Švajčiarska konfederácia",
    "Švédsko",
    "Švédske kráľovstvo",
    "Tadžikistan",
    "Tadžická republika",
    "Taliansko",
    "Talianska republika",
    "Tanzánia",
    "Tanzánijská zjednotená republika",
    "Thajsko",
    "Thajské kráľovstvo",
    "Togo",
    "Tožská republika",
    "Tonga",
    "Tonžské kráľovstvo",
    "Trinidad a Tobago",
    "Republika Trinidad a Tobago",
    "Tunisko",
    "Tuniská republika",
    "Turecko",
    "Turecká republika",
    "Turkménsko",
    "Turkménsko",
    "Tuvalu",
    "Tuvalu",
    "Uganda",
    "Ugandská republika",
    "Ukrajina",
    "Uruguaj",
    "Uruguajská východná republika",
    "Uzbekistan",
    "Vanuatu",
    "Vanuatská republika",
    "Vatikán",
    "Svätá Stolica",
    "Veľká Británia",
    "Spojené kráľovstvo Veľkej Británie a Severného Írska",
    "Venezuela",
    "Venezuelská bolívarovská republika",
    "Vietnam",
    "Vietnamská socialistická republika",
    "Východný Timor",
    "Demokratická republika Východný Timor",
    "Zambia",
    "Zambijská republika",
    "Zimbabwe",
    "Zimbabwianska republika"
  ],
  "building_number": [
    "#",
    "##",
    "###"
  ],
  "secondary_address": [
    "Apt. ###",
    "Suite ###"
  ],
  "postcode": [
    "#####",
    "### ##",
    "## ###"
  ],
  "state": [],
  "state_abbr": [],
  "time_zone": [
    "Pacific/Midway",
    "Pacific/Pago_Pago",
    "Pacific/Honolulu",
    "America/Juneau",
    "America/Los_Angeles",
    "America/Tijuana",
    "America/Denver",
    "America/Phoenix",
    "America/Chihuahua",
    "America/Mazatlan",
    "America/Chicago",
    "America/Regina",
    "America/Mexico_City",
    "America/Mexico_City",
    "America/Monterrey",
    "America/Guatemala",
    "America/New_York",
    "America/Indiana/Indianapolis",
    "America/Bogota",
    "America/Lima",
    "America/Lima",
    "America/Halifax",
    "America/Caracas",
    "America/La_Paz",
    "America/Santiago",
    "America/St_Johns",
    "America/Sao_Paulo",
    "America/Argentina/Buenos_Aires",
    "America/Guyana",
    "America/Godthab",
    "Atlantic/South_Georgia",
    "Atlantic/Azores",
    "Atlantic/Cape_Verde",
    "Europe/Dublin",
    "Europe/London",
    "Europe/Lisbon",
    "Europe/London",
    "Africa/Casablanca",
    "Africa/Monrovia",
    "Etc/UTC",
    "Europe/Belgrade",
    "Europe/Bratislava",
    "Europe/Budapest",
    "Europe/Ljubljana",
    "Europe/Prague",
    "Europe/Sarajevo",
    "Europe/Skopje",
    "Europe/Warsaw",
    "Europe/Zagreb",
    "Europe/Brussels",
    "Europe/Copenhagen",
    "Europe/Madrid",
    "Europe/Paris",
    "Europe/Amsterdam",
    "Europe/Berlin",
    "Europe/Berlin",
    "Europe/Rome",
    "Europe/Stockholm",
    "Europe/Vienna",
    "Africa/Algiers",
    "Europe/Bucharest",
    "Africa/Cairo",
    "Europe/Helsinki",
    "Europe/Kiev",
    "Europe/Riga",
    "Europe/Sofia",
    "Europe/Tallinn",
    "Europe/Vilnius",
    "Europe/Athens",
    "Europe/Istanbul",
    "Europe/Minsk",
    "Asia/Jerusalem",
    "Africa/Harare",
    "Africa/Johannesburg",
    "Europe/Moscow",
    "Europe/Moscow",
    "Europe/Moscow",
    "Asia/Kuwait",
    "Asia/Riyadh",
    "Africa/Nairobi",
    "Asia/Baghdad",
    "Asia/Tehran",
    "Asia/Muscat",
    "Asia/Muscat",
    "Asia/Baku",
    "Asia/Tbilisi",
    "Asia/Yerevan",
    "Asia/Kabul",
    "Asia/Yekaterinburg",
    "Asia/Karachi",
    "Asia/Karachi",
    "Asia/Tashkent",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kathmandu",
    "Asia/Dhaka",
    "Asia/Dhaka",
    "Asia/Colombo",
    "Asia/Almaty",
    "Asia/Novosibirsk",
    "Asia/Rangoon",
    "Asia/Bangkok",
    "Asia/Bangkok",
    "Asia/Jakarta",
    "Asia/Krasnoyarsk",
    "Asia/Shanghai",
    "Asia/Chongqing",
    "Asia/Hong_Kong",
    "Asia/Urumqi",
    "Asia/Kuala_Lumpur",
    "Asia/Singapore",
    "Asia/Taipei",
    "Australia/Perth",
    "Asia/Irkutsk",
    "Asia/Ulaanbaatar",
    "Asia/Seoul",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Yakutsk",
    "Australia/Darwin",
    "Australia/Adelaide",
    "Australia/Melbourne",
    "Australia/Melbourne",
    "Australia/Sydney",
    "Australia/Brisbane",
    "Australia/Hobart",
    "Asia/Vladivostok",
    "Pacific/Guam",
    "Pacific/Port_Moresby",
    "Asia/Magadan",
    "Asia/Magadan",
    "Pacific/Noumea",
    "Pacific/Fiji",
    "Asia/Kamchatka",
    "Pacific/Majuro",
    "Pacific/Auckland",
    "Pacific/Auckland",
    "Pacific/Tongatapu",
    "Pacific/Fakaofo",
    "Pacific/Apia"
  ],
  "city_name": [
    "Bánovce nad Bebravou",
    "Banská Bystrica",
    "Banská Štiavnica",
    "Bardejov",
    "Bratislava I",
    "Bratislava II",
    "Bratislava III",
    "Bratislava IV",
    "Bratislava V",
    "Brezno",
    "Bytča",
    "Čadca",
    "Detva",
    "Dolný Kubín",
    "Dunajská Streda",
    "Galanta",
    "Gelnica",
    "Hlohovec",
    "Humenné",
    "Ilava",
    "Kežmarok",
    "Komárno",
    "Košice I",
    "Košice II",
    "Košice III",
    "Košice IV",
    "Košice-okolie",
    "Krupina",
    "Kysucké Nové Mesto",
    "Levice",
    "Levoča",
    "Liptovský Mikuláš",
    "Lučenec",
    "Malacky",
    "Martin",
    "Medzilaborce",
    "Michalovce",
    "Myjava",
    "Námestovo",
    "Nitra",
    "Nové Mesto n.Váhom",
    "Nové Zámky",
    "Partizánske",
    "Pezinok",
    "Piešťany",
    "Poltár",
    "Poprad",
    "Považská Bystrica",
    "Prešov",
    "Prievidza",
    "Púchov",
    "Revúca",
    "Rimavská Sobota",
    "Rožňava",
    "Ružomberok",
    "Sabinov",
    "Šaľa",
    "Senec",
    "Senica",
    "Skalica",
    "Snina",
    "Sobrance",
    "Spišská Nová Ves",
    "Stará Ľubovňa",
    "Stropkov",
    "Svidník",
    "Topoľčany",
    "Trebišov",
    "Trenčín",
    "Trnava",
    "Turčianske Teplice",
    "Tvrdošín",
    "Veľký Krtíš",
    "Vranov nad Topľou",
    "Žarnovica",
    "Žiar nad Hronom",
    "Žilina",
    "Zlaté Moravce",
    "Zvolen"
  ],
  "city": [
    "#{city_name}"
  ],
  "street": [
    "Adámiho",
    "Ahoj",
    "Albína Brunovského",
    "Albrechtova",
    "Alejová",
    "Alešova",
    "Alibernetová",
    "Alžbetínska",
    "Alžbety Gwerkovej",
    "Ambroseho",
    "Ambrušova",
    "Americká",
    "Americké námestie",
    "Americké námestie",
    "Andreja Mráza",
    "Andreja Plávku",
    "Andrusovova",
    "Anenská",
    "Anenská",
    "Antolská",
    "Astronomická",
    "Astrová",
    "Azalková",
    "Azovská",
    "Babuškova",
    "Bachova",
    "Bajkalská",
    "Bajkalská",
    "Bajkalská",
    "Bajkalská",
    "Bajkalská",
    "Bajkalská",
    "Bajzova",
    "Bancíkovej",
    "Banícka",
    "Baníkova",
    "Banskobystrická",
    "Banšelova",
    "Bardejovská",
    "Bartókova",
    "Bartoňova",
    "Bartoškova",
    "Baštová",
    "Bazová",
    "Bažantia",
    "Beblavého",
    "Beckovská",
    "Bedľová",
    "Belániková",
    "Belehradská",
    "Belinského",
    "Belopotockého",
    "Beňadická",
    "Bencúrova",
    "Benediktiho",
    "Beniakova",
    "Bernolákova",
    "Beskydská",
    "Betliarska",
    "Bezručova",
    "Biela",
    "Bielkova",
    "Björnsonova",
    "Blagoevova",
    "Blatnická",
    "Blumentálska",
    "Blyskáčová",
    "Bočná",
    "Bohrova",
    "Bohúňova",
    "Bojnická",
    "Borodáčova",
    "Borská",
    "Bosákova",
    "Botanická",
    "Bottova",
    "Boženy Němcovej",
    "Bôrik",
    "Bradáčova",
    "Bradlianska",
    "Brančská",
    "Bratská",
    "Brestová",
    "Brezovská",
    "Briežky",
    "Brnianska",
    "Brodná",
    "Brodská",
    "Broskyňová",
    "Břeclavská",
    "Budatínska",
    "Budatínska",
    "Budatínska",
    "Búdkova  cesta",
    "Budovateľská",
    "Budyšínska",
    "Budyšínska",
    "Buková",
    "Bukureštská",
    "Bulharská",
    "Bulíkova",
    "Bystrého",
    "Bzovícka",
    "Cablkova",
    "Cesta na Červený most",
    "Cesta na Červený most",
    "Cesta na Senec",
    "Cikkerova",
    "Cintorínska",
    "Cintulova",
    "Cukrová",
    "Cyrilova",
    "Čajakova",
    "Čajkovského",
    "Čaklovská",
    "Čalovská",
    "Čapajevova",
    "Čapkova",
    "Čárskeho",
    "Čavojského",
    "Čečinová",
    "Čelakovského",
    "Čerešňová",
    "Černyševského",
    "Červeňova",
    "Česká",
    "Československých par",
    "Čipkárska",
    "Čmelíkova",
    "Čmeľovec",
    "Čulenova",
    "Daliborovo námestie",
    "Dankovského",
    "Dargovská",
    "Ďatelinová",
    "Daxnerovo námestie",
    "Devínska cesta",
    "Dlhé diely I.",
    "Dlhé diely II.",
    "Dlhé diely III.",
    "Dobrovičova",
    "Dobrovičova",
    "Dobrovského",
    "Dobšinského",
    "Dohnalova",
    "Dohnányho",
    "Doležalova",
    "Dolná",
    "Dolnozemská cesta",
    "Domkárska",
    "Domové role",
    "Donnerova",
    "Donovalova",
    "Dostojevského rad",
    "Dr. Vladimíra Clemen",
    "Drevená",
    "Drieňová",
    "Drieňová",
    "Drieňová",
    "Drotárska cesta",
    "Drotárska cesta",
    "Drotárska cesta",
    "Družicová",
    "Družstevná",
    "Dubnická",
    "Dubová",
    "Dúbravská cesta",
    "Dudova",
    "Dulovo námestie",
    "Dulovo námestie",
    "Dunajská",
    "Dvořákovo nábrežie",
    "Edisonova",
    "Einsteinova",
    "Elektrárenská",
    "Exnárova",
    "F. Kostku",
    "Fadruszova",
    "Fajnorovo nábrežie",
    "Fándlyho",
    "Farebná",
    "Farská",
    "Farského",
    "Fazuľová",
    "Fedinova",
    "Ferienčíkova",
    "Fialkové údolie",
    "Fibichova",
    "Filiálne nádražie",
    "Flöglova",
    "Floriánske námestie",
    "Fraňa Kráľa",
    "Francisciho",
    "Francúzskych partizá",
    "Františkánska",
    "Františkánske námest",
    "Furdekova",
    "Furdekova",
    "Gabčíkova",
    "Gagarinova",
    "Gagarinova",
    "Gagarinova",
    "Gajova",
    "Galaktická",
    "Galandova",
    "Gallova",
    "Galvaniho",
    "Gašparíkova",
    "Gaštanová",
    "Gavlovičova",
    "Gemerská",
    "Gercenova",
    "Gessayova",
    "Gettingová",
    "Godrova",
    "Gogoľova",
    "Goláňova",
    "Gondova",
    "Goralská",
    "Gorazdova",
    "Gorkého",
    "Gregorovej",
    "Grösslingova",
    "Gruzínska",
    "Gunduličova",
    "Gusevova",
    "Haanova",
    "Haburská",
    "Halašova",
    "Hálkova",
    "Hálova",
    "Hamuliakova",
    "Hanácka",
    "Handlovská",
    "Hany Meličkovej",
    "Harmanecká",
    "Hasičská",
    "Hattalova",
    "Havlíčkova",
    "Havrania",
    "Haydnova",
    "Herlianska",
    "Herlianska",
    "Heydukova",
    "Hlaváčikova",
    "Hlavatého",
    "Hlavné námestie",
    "Hlboká cesta",
    "Hlboká cesta",
    "Hlivová",
    "Hlučínska",
    "Hodálova",
    "Hodžovo námestie",
    "Holekova",
    "Holíčska",
    "Hollého",
    "Holubyho",
    "Hontianska",
    "Horárska",
    "Horné Židiny",
    "Horská",
    "Horská",
    "Hrad",
    "Hradné údolie",
    "Hrachová",
    "Hraničná",
    "Hrebendova",
    "Hríbová",
    "Hriňovská",
    "Hrobákova",
    "Hrobárska",
    "Hroboňova",
    "Hudecova",
    "Humenské námestie",
    "Hummelova",
    "Hurbanovo námestie",
    "Hurbanovo námestie",
    "Hviezdoslavovo námes",
    "Hýrošova",
    "Chalupkova",
    "Chemická",
    "Chlumeckého",
    "Chorvátska",
    "Chorvátska",
    "Iľjušinova",
    "Ilkovičova",
    "Inovecká",
    "Inovecká",
    "Iskerníková",
    "Ivana Horvátha",
    "Ivánska cesta",
    "J.C.Hronského",
    "Jabloňová",
    "Jadrová",
    "Jakabova",
    "Jakubovo námestie",
    "Jamnického",
    "Jána Stanislava",
    "Janáčkova",
    "Jančova",
    "Janíkove role",
    "Jankolova",
    "Jánošíkova",
    "Jánoškova",
    "Janotova",
    "Jánska",
    "Jantárová cesta",
    "Jarabinková",
    "Jarná",
    "Jaroslavova",
    "Jarošova",
    "Jaseňová",
    "Jasná",
    "Jasovská",
    "Jastrabia",
    "Jašíkova",
    "Javorinská",
    "Javorová",
    "Jazdecká",
    "Jedlíkova",
    "Jégého",
    "Jelačičova",
    "Jelenia",
    "Jesenná",
    "Jesenského",
    "Jiráskova",
    "Jiskrova",
    "Jozefská",
    "Junácka",
    "Jungmannova",
    "Jurigovo námestie",
    "Jurovského",
    "Jurská",
    "Justičná",
    "K lomu",
    "K Železnej studienke",
    "Kalinčiakova",
    "Kamenárska",
    "Kamenné námestie",
    "Kapicova",
    "Kapitulská",
    "Kapitulský dvor",
    "Kapucínska",
    "Kapušianska",
    "Karadžičova",
    "Karadžičova",
    "Karadžičova",
    "Karadžičova",
    "Karloveská",
    "Karloveské rameno",
    "Karpatská",
    "Kašmírska",
    "Kaštielska",
    "Kaukazská",
    "Kempelenova",
    "Kežmarské námestie",
    "Kladnianska",
    "Klariská",
    "Kláštorská",
    "Klatovská",
    "Klatovská",
    "Klemensova",
    "Klincová",
    "Klobučnícka",
    "Klokočova",
    "Kľukatá",
    "Kmeťovo námestie",
    "Koceľova",
    "Kočánkova",
    "Kohútova",
    "Kolárska",
    "Kolískova",
    "Kollárovo námestie",
    "Kollárovo námestie",
    "Kolmá",
    "Komárňanská",
    "Komárnická",
    "Komárnická",
    "Komenského námestie",
    "Kominárska",
    "Komonicová",
    "Konopná",
    "Konvalinková",
    "Konventná",
    "Kopanice",
    "Kopčianska",
    "Koperníkova",
    "Korabinského",
    "Koreničova",
    "Kostlivého",
    "Kostolná",
    "Košická",
    "Košická",
    "Košická",
    "Kováčska",
    "Kovorobotnícka",
    "Kozia",
    "Koziarka",
    "Kozmonautická",
    "Krajná",
    "Krakovská",
    "Kráľovské údolie",
    "Krasinského",
    "Kraskova",
    "Krásna",
    "Krásnohorská",
    "Krasovského",
    "Krátka",
    "Krčméryho",
    "Kremnická",
    "Kresánkova",
    "Krivá",
    "Križkova",
    "Krížna",
    "Krížna",
    "Krížna",
    "Krížna",
    "Krmanova",
    "Krompašská",
    "Krupinská",
    "Krupkova",
    "Kubániho",
    "Kubínska",
    "Kuklovská",
    "Kukučínova",
    "Kukuričná",
    "Kulíškova",
    "Kultúrna",
    "Kupeckého",
    "Kúpeľná",
    "Kutlíkova",
    "Kutuzovova",
    "Kuzmányho",
    "Kvačalova",
    "Kvetná",
    "Kýčerského",
    "Kyjevská",
    "Kysucká",
    "Laborecká",
    "Lackova",
    "Ladislava Sáru",
    "Ľadová",
    "Lachova",
    "Ľaliová",
    "Lamačská cesta",
    "Lamačská cesta",
    "Lamanského",
    "Landererova",
    "Langsfeldova",
    "Ľanová",
    "Laskomerského",
    "Laučekova",
    "Laurinská",
    "Lazaretská",
    "Lazaretská",
    "Legerského",
    "Legionárska",
    "Legionárska",
    "Lehockého",
    "Lehockého",
    "Lenardova",
    "Lermontovova",
    "Lesná",
    "Leškova",
    "Letecká",
    "Letisko M.R.Štefánik",
    "Letná",
    "Levárska",
    "Levická",
    "Levočská",
    "Lidická",
    "Lietavská",
    "Lichardova",
    "Lipová",
    "Lipovinová",
    "Liptovská",
    "Listová",
    "Líščie nivy",
    "Líščie údolie",
    "Litovská",
    "Lodná",
    "Lombardiniho",
    "Lomonosovova",
    "Lopenícka",
    "Lovinského",
    "Ľubietovská",
    "Ľubinská",
    "Ľubľanská",
    "Ľubochnianska",
    "Ľubovnianska",
    "Lúčna",
    "Ľudové námestie",
    "Ľudovíta Fullu",
    "Luhačovická",
    "Lužická",
    "Lužná",
    "Lýcejná",
    "Lykovcová",
    "M. Hella",
    "Magnetová",
    "Macharova",
    "Majakovského",
    "Majerníkova",
    "Májkova",
    "Májová",
    "Makovického",
    "Malá",
    "Malé pálenisko",
    "Malinová",
    "Malý Draždiak",
    "Malý trh",
    "Mamateyova",
    "Mamateyova",
    "Mánesovo námestie",
    "Mariánska",
    "Marie Curie-Sklodows",
    "Márie Medveďovej",
    "Markova",
    "Marótyho",
    "Martákovej",
    "Martinčekova",
    "Martinčekova",
    "Martinengova",
    "Martinská",
    "Mateja Bela",
    "Matejkova",
    "Matičná",
    "Matúšova",
    "Medená",
    "Medzierka",
    "Medzilaborecká",
    "Merlotová",
    "Mesačná",
    "Mestská",
    "Meteorová",
    "Metodova",
    "Mickiewiczova",
    "Mierová",
    "Michalská",
    "Mikovíniho",
    "Mikulášska",
    "Miletičova",
    "Miletičova",
    "Mišíkova",
    "Mišíkova",
    "Mišíkova",
    "Mliekárenská",
    "Mlynarovičova",
    "Mlynská dolina",
    "Mlynská dolina",
    "Mlynská dolina",
    "Mlynské luhy",
    "Mlynské nivy",
    "Mlynské nivy",
    "Mlynské nivy",
    "Mlynské nivy",
    "Mlynské nivy",
    "Mlyny",
    "Modranská",
    "Mojmírova",
    "Mokráň záhon",
    "Mokrohájska cesta",
    "Moldavská",
    "Molecova",
    "Moravská",
    "Moskovská",
    "Most SNP",
    "Mostová",
    "Mošovského",
    "Motýlia",
    "Moyzesova",
    "Mozartova",
    "Mraziarenská",
    "Mudroňova",
    "Mudroňova",
    "Mudroňova",
    "Muchovo námestie",
    "Murgašova",
    "Muškátová",
    "Muštová",
    "Múzejná",
    "Myjavská",
    "Mýtna",
    "Mýtna",
    "Na Baránku",
    "Na Brezinách",
    "Na Hrebienku",
    "Na Kalvárii",
    "Na Kampárke",
    "Na kopci",
    "Na križovatkách",
    "Na lánoch",
    "Na paši",
    "Na piesku",
    "Na Riviére",
    "Na Sitine",
    "Na Slavíne",
    "Na stráni",
    "Na Štyridsiatku",
    "Na úvrati",
    "Na vŕšku",
    "Na výslní",
    "Nábělkova",
    "Nábrežie arm. gen. L",
    "Nábrežná",
    "Nad Dunajom",
    "Nad lomom",
    "Nad lúčkami",
    "Nad lúčkami",
    "Nad ostrovom",
    "Nad Sihoťou",
    "Námestie 1. mája",
    "Námestie Alexandra D",
    "Námestie Biely kríž",
    "Námestie Hraničiarov",
    "Námestie Jána Pavla",
    "Námestie Ľudovíta Št",
    "Námestie Martina Ben",
    "Nám. M.R.Štefánika",
    "Námestie slobody",
    "Námestie slobody",
    "Námestie SNP",
    "Námestie SNP",
    "Námestie sv. Františ",
    "Narcisová",
    "Nedbalova",
    "Nekrasovova",
    "Neronetová",
    "Nerudova",
    "Nevädzová",
    "Nezábudková",
    "Niťová",
    "Nitrianska",
    "Nížinná",
    "Nobelova",
    "Nobelovo námestie",
    "Nová",
    "Nová Rožňavská",
    "Novackého",
    "Nové pálenisko",
    "Nové záhrady I",
    "Nové záhrady II",
    "Nové záhrady III",
    "Nové záhrady IV",
    "Nové záhrady V",
    "Nové záhrady VI",
    "Nové záhrady VII",
    "Novinárska",
    "Novobanská",
    "Novohradská",
    "Novosvetská",
    "Novosvetská",
    "Novosvetská",
    "Obežná",
    "Obchodná",
    "Očovská",
    "Odbojárov",
    "Odborárska",
    "Odborárske námestie",
    "Odborárske námestie",
    "Ohnicová",
    "Okánikova",
    "Okružná",
    "Olbrachtova",
    "Olejkárska",
    "Ondavská",
    "Ondrejovova",
    "Oravská",
    "Orechová cesta",
    "Orechový rad",
    "Oriešková",
    "Ormisova",
    "Osadná",
    "Ostravská",
    "Ostredková",
    "Osuského",
    "Osvetová",
    "Otonelská",
    "Ovručská",
    "Ovsištské námestie",
    "Pajštúnska",
    "Palackého",
    "Palárikova",
    "Palárikova",
    "Pálavská",
    "Palisády",
    "Palisády",
    "Palisády",
    "Palkovičova",
    "Panenská",
    "Pankúchova",
    "Panónska cesta",
    "Panská",
    "Papánkovo námestie",
    "Papraďová",
    "Páričkova",
    "Parková",
    "Partizánska",
    "Pasienky",
    "Paulínyho",
    "Pavlovičova",
    "Pavlovova",
    "Pavlovská",
    "Pažického",
    "Pažítková",
    "Pečnianska",
    "Pernecká",
    "Pestovateľská",
    "Peterská",
    "Petzvalova",
    "Pezinská",
    "Piesočná",
    "Piešťanská",
    "Pifflova",
    "Pilárikova",
    "Pionierska",
    "Pivoňková",
    "Planckova",
    "Planét",
    "Plátenícka",
    "Pluhová",
    "Plynárenská",
    "Plzenská",
    "Pobrežná",
    "Pod Bôrikom",
    "Pod Kalváriou",
    "Pod lesom",
    "Pod Rovnicami",
    "Pod vinicami",
    "Podhorského",
    "Podjavorinskej",
    "Podlučinského",
    "Podniková",
    "Podtatranského",
    "Pohronská",
    "Polárna",
    "Poloreckého",
    "Poľná",
    "Poľská",
    "Poludníková",
    "Porubského",
    "Poštová",
    "Považská",
    "Povraznícka",
    "Povraznícka",
    "Pražská",
    "Predstaničné námesti",
    "Prepoštská",
    "Prešernova",
    "Prešovská",
    "Prešovská",
    "Prešovská",
    "Pri Bielom kríži",
    "Pri dvore",
    "Pri Dynamitke",
    "Pri Habánskom mlyne",
    "Pri hradnej studni",
    "Pri seči",
    "Pri Starej Prachárni",
    "Pri Starom háji",
    "Pri Starom Mýte",
    "Pri strelnici",
    "Pri Suchom mlyne",
    "Pri zvonici",
    "Pribinova",
    "Pribinova",
    "Pribinova",
    "Pribišova",
    "Pribylinská",
    "Priečna",
    "Priekopy",
    "Priemyselná",
    "Priemyselná",
    "Prievozská",
    "Prievozská",
    "Prievozská",
    "Príkopova",
    "Primaciálne námestie",
    "Prístav",
    "Prístavná",
    "Prokofievova",
    "Prokopa Veľkého",
    "Prokopova",
    "Prúdová",
    "Prvosienková",
    "Púpavová",
    "Pustá",
    "Puškinova",
    "Račianska",
    "Račianska",
    "Račianske mýto",
    "Radarová",
    "Rádiová",
    "Radlinského",
    "Radničná",
    "Radničné námestie",
    "Radvanská",
    "Rajská",
    "Raketová",
    "Rákosová",
    "Rastislavova",
    "Rázusovo nábrežie",
    "Repná",
    "Rešetkova",
    "Revolučná",
    "Révová",
    "Revúcka",
    "Rezedová",
    "Riazanská",
    "Riazanská",
    "Ribayová",
    "Riečna",
    "Rigeleho",
    "Rízlingová",
    "Riznerova",
    "Robotnícka",
    "Romanova",
    "Röntgenova",
    "Rosná",
    "Rovná",
    "Rovniankova",
    "Rovníková",
    "Rozmarínová",
    "Rožňavská",
    "Rožňavská",
    "Rožňavská",
    "Rubinsteinova",
    "Rudnayovo námestie",
    "Rumančeková",
    "Rusovská cesta",
    "Ružičková",
    "Ružinovská",
    "Ružinovská",
    "Ružinovská",
    "Ružomberská",
    "Ružová dolina",
    "Ružová dolina",
    "Rybárska brána",
    "Rybné námestie",
    "Rýdziková",
    "Sabinovská",
    "Sabinovská",
    "Sad Janka Kráľa",
    "Sadová",
    "Sartorisova",
    "Sasinkova",
    "Seberíniho",
    "Sečovská",
    "Sedlárska",
    "Sedmokrásková",
    "Segnerova",
    "Sekulská",
    "Semianova",
    "Senická",
    "Senná",
    "Schillerova",
    "Schody pri starej vo",
    "Sibírska",
    "Sienkiewiczova",
    "Silvánska",
    "Sinokvetná",
    "Skalická cesta",
    "Skalná",
    "Sklenárova",
    "Sklenárska",
    "Sládkovičova",
    "Sladová",
    "Slávičie údolie",
    "Slavín",
    "Slepá",
    "Sliačska",
    "Sliezska",
    "Slivková",
    "Slnečná",
    "Slovanská",
    "Slovinská",
    "Slovnaftská",
    "Slowackého",
    "Smetanova",
    "Smikova",
    "Smolenická",
    "Smolnícka",
    "Smrečianska",
    "Soferove schody",
    "Socháňova",
    "Sokolská",
    "Solivarská",
    "Sološnická",
    "Somolického",
    "Somolického",
    "Sosnová",
    "Spišská",
    "Spojná",
    "Spoločenská",
    "Sputniková",
    "Sreznevského",
    "Srnčia",
    "Stachanovská",
    "Stálicová",
    "Staničná",
    "Stará Černicová",
    "Stará Ivánska cesta",
    "Stará Prievozská",
    "Stará Vajnorská",
    "Stará vinárska",
    "Staré Grunty",
    "Staré ihrisko",
    "Staré záhrady",
    "Starhradská",
    "Starohájska",
    "Staromestská",
    "Staroturský chodník",
    "Staviteľská",
    "Stodolova",
    "Stoklasová",
    "Strakova",
    "Strážnická",
    "Strážny dom",
    "Strečnianska",
    "Stredná",
    "Strelecká",
    "Strmá cesta",
    "Strojnícka",
    "Stropkovská",
    "Struková",
    "Studená",
    "Stuhová",
    "Súbežná",
    "Súhvezdná",
    "Suché mýto",
    "Suchohradská",
    "Súkennícka",
    "Súľovská",
    "Sumbalova",
    "Súmračná",
    "Súťažná",
    "Svätého Vincenta",
    "Svätoplukova",
    "Svätoplukova",
    "Svätovojtešská",
    "Svetlá",
    "Svíbová",
    "Svidnícka",
    "Svoradova",
    "Svrčia",
    "Syslia",
    "Šafárikovo námestie",
    "Šafárikovo námestie",
    "Šafránová",
    "Šagátova",
    "Šalviová",
    "Šancová",
    "Šancová",
    "Šancová",
    "Šancová",
    "Šándorova",
    "Šarišská",
    "Šášovská",
    "Šaštínska",
    "Ševčenkova",
    "Šintavská",
    "Šípková",
    "Škarniclova",
    "Školská",
    "Škovránčia",
    "Škultétyho",
    "Šoltésovej",
    "Špieszova",
    "Špitálska",
    "Športová",
    "Šrobárovo námestie",
    "Šťastná",
    "Štedrá",
    "Štefánikova",
    "Štefánikova",
    "Štefánikova",
    "Štefanovičova",
    "Štefunkova",
    "Štetinova",
    "Štiavnická",
    "Štúrova",
    "Štyndlova",
    "Šulekova",
    "Šulekova",
    "Šulekova",
    "Šumavská",
    "Šuňavcova",
    "Šustekova",
    "Švabinského",
    "Tabaková",
    "Tablicova",
    "Táborská",
    "Tajovského",
    "Tallerova",
    "Tehelná",
    "Technická",
    "Tekovská",
    "Telocvičná",
    "Tematínska",
    "Teplická",
    "Terchovská",
    "Teslova",
    "Tetmayerova",
    "Thurzova",
    "Tichá",
    "Tilgnerova",
    "Timravina",
    "Tobrucká",
    "Tokajícka",
    "Tolstého",
    "Tománkova",
    "Tomášikova",
    "Tomášikova",
    "Tomášikova",
    "Tomášikova",
    "Tomášikova",
    "Topoľčianska",
    "Topoľová",
    "Továrenská",
    "Trebišovská",
    "Trebišovská",
    "Trebišovská",
    "Trenčianska",
    "Treskoňova",
    "Trnavská cesta",
    "Trnavská cesta",
    "Trnavská cesta",
    "Trnavská cesta",
    "Trnavská cesta",
    "Trnavské mýto",
    "Tŕňová",
    "Trojdomy",
    "Tučkova",
    "Tupolevova",
    "Turbínova",
    "Turčianska",
    "Turnianska",
    "Tvarožkova",
    "Tylova",
    "Tyršovo nábrežie",
    "Údernícka",
    "Údolná",
    "Uhorková",
    "Ukrajinská",
    "Ulica 29. augusta",
    "Ulica 29. augusta",
    "Ulica 29. augusta",
    "Ulica 29. augusta",
    "Ulica Imricha Karvaš",
    "Ulica Jozefa Krónera",
    "Ulica Viktora Tegelh",
    "Úprkova",
    "Úradnícka",
    "Uránová",
    "Urbánkova",
    "Ursínyho",
    "Uršulínska",
    "Úzka",
    "V záhradách",
    "Vajanského nábrežie",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Valašská",
    "Valchárska",
    "Vansovej",
    "Vápenná",
    "Varínska",
    "Varšavská",
    "Varšavská",
    "Vavilovova",
    "Vavrínova",
    "Vazovova",
    "Včelárska",
    "Velehradská",
    "Veltlínska",
    "Ventúrska",
    "Veterná",
    "Veternicová",
    "Vetvová",
    "Viedenská cesta",
    "Viedenská cesta",
    "Vietnamská",
    "Vígľašská",
    "Vihorlatská",
    "Viktorínova",
    "Vilová",
    "Vincenta Hložníka",
    "Vínna",
    "Vlastenecké námestie",
    "Vlčkova",
    "Vlčkova",
    "Vlčkova",
    "Vodný vrch",
    "Votrubova",
    "Vrábeľská",
    "Vrakunská cesta",
    "Vranovská",
    "Vretenová",
    "Vrchná",
    "Vrútocká",
    "Vyhliadka",
    "Vyhnianska cesta",
    "Vysoká",
    "Vyšehradská",
    "Vyšná",
    "Wattova",
    "Wilsonova",
    "Wolkrova",
    "Za Kasárňou",
    "Za sokolovňou",
    "Za Stanicou",
    "Za tehelňou",
    "Záborského",
    "Zadunajská cesta",
    "Záhorácka",
    "Záhradnícka",
    "Záhradnícka",
    "Záhradnícka",
    "Záhradnícka",
    "Záhrebská",
    "Záhrebská",
    "Zálužická",
    "Zámocká",
    "Zámocké schody",
    "Zámočnícka",
    "Západná",
    "Západný rad",
    "Záporožská",
    "Zátišie",
    "Závodníkova",
    "Zelená",
    "Zelinárska",
    "Zimná",
    "Zlaté piesky",
    "Zlaté schody",
    "Znievska",
    "Zohorská",
    "Zochova",
    "Zrinského",
    "Zvolenská",
    "Žabí majer",
    "Žabotova",
    "Žehrianska",
    "Železná",
    "Železničiarska",
    "Žellova",
    "Žiarska",
    "Židovská",
    "Žilinská",
    "Žilinská",
    "Živnostenská",
    "Žižkova",
    "Župné námestie"
  ],
  "street_name": [
    "#{street}"
  ],
  "street_address": [
    "#{street_name} #{building_number}"
  ],
  "default_country": [
    "Slovensko"
  ]
};
sk.company = {
  "suffix": [
    "s.r.o.",
    "a.s.",
    "v.o.s."
  ],
  "adjective": [
      "Adaptive",
      "Advanced",
      "Ameliorated",
      "Assimilated",
      "Automated",
      "Balanced",
      "Business-focused",
      "Centralized",
      "Cloned",
      "Compatible",
      "Configurable",
      "Cross-group",
      "Cross-platform",
      "Customer-focused",
      "Customizable",
      "Decentralized",
      "De-engineered",
      "Devolved",
      "Digitized",
      "Distributed",
      "Diverse",
      "Down-sized",
      "Enhanced",
      "Enterprise-wide",
      "Ergonomic",
      "Exclusive",
      "Expanded",
      "Extended",
      "Face to face",
      "Focused",
      "Front-line",
      "Fully-configurable",
      "Function-based",
      "Fundamental",
      "Future-proofed",
      "Grass-roots",
      "Horizontal",
      "Implemented",
      "Innovative",
      "Integrated",
      "Intuitive",
      "Inverse",
      "Managed",
      "Mandatory",
      "Monitored",
      "Multi-channelled",
      "Multi-lateral",
      "Multi-layered",
      "Multi-tiered",
      "Networked",
      "Object-based",
      "Open-architected",
      "Open-source",
      "Operative",
      "Optimized",
      "Optional",
      "Organic",
      "Organized",
      "Persevering",
      "Persistent",
      "Phased",
      "Polarised",
      "Pre-emptive",
      "Proactive",
      "Profit-focused",
      "Profound",
      "Programmable",
      "Progressive",
      "Public-key",
      "Quality-focused",
      "Reactive",
      "Realigned",
      "Re-contextualized",
      "Re-engineered",
      "Reduced",
      "Reverse-engineered",
      "Right-sized",
      "Robust",
      "Seamless",
      "Secured",
      "Self-enabling",
      "Sharable",
      "Stand-alone",
      "Streamlined",
      "Switchable",
      "Synchronised",
      "Synergistic",
      "Synergized",
      "Team-oriented",
      "Total",
      "Triple-buffered",
      "Universal",
      "Up-sized",
      "Upgradable",
      "User-centric",
      "User-friendly",
      "Versatile",
      "Virtual",
      "Visionary",
      "Vision-oriented"
    ],
    "descriptor":
    [
      "24 hour",
      "24/7",
      "3rd generation",
      "4th generation",
      "5th generation",
      "6th generation",
      "actuating",
      "analyzing",
      "asymmetric",
      "asynchronous",
      "attitude-oriented",
      "background",
      "bandwidth-monitored",
      "bi-directional",
      "bifurcated",
      "bottom-line",
      "clear-thinking",
      "client-driven",
      "client-server",
      "coherent",
      "cohesive",
      "composite",
      "context-sensitive",
      "contextually-based",
      "content-based",
      "dedicated",
      "demand-driven",
      "didactic",
      "directional",
      "discrete",
      "disintermediate",
      "dynamic",
      "eco-centric",
      "empowering",
      "encompassing",
      "even-keeled",
      "executive",
      "explicit",
      "exuding",
      "fault-tolerant",
      "foreground",
      "fresh-thinking",
      "full-range",
      "global",
      "grid-enabled",
      "heuristic",
      "high-level",
      "holistic",
      "homogeneous",
      "human-resource",
      "hybrid",
      "impactful",
      "incremental",
      "intangible",
      "interactive",
      "intermediate",
      "leading edge",
      "local",
      "logistical",
      "maximized",
      "methodical",
      "mission-critical",
      "mobile",
      "modular",
      "motivating",
      "multimedia",
      "multi-state",
      "multi-tasking",
      "national",
      "needs-based",
      "neutral",
      "next generation",
      "non-volatile",
      "object-oriented",
      "optimal",
      "optimizing",
      "radical",
      "real-time",
      "reciprocal",
      "regional",
      "responsive",
      "scalable",
      "secondary",
      "solution-oriented",
      "stable",
      "static",
      "systematic",
      "systemic",
      "system-worthy",
      "tangible",
      "tertiary",
      "transitional",
      "uniform",
      "upward-trending",
      "user-facing",
      "value-added",
      "web-enabled",
      "well-modulated",
      "zero administration",
      "zero defect",
      "zero tolerance"
    ],
    "noun":
    [
      "ability",
      "access",
      "adapter",
      "algorithm",
      "alliance",
      "analyzer",
      "application",
      "approach",
      "architecture",
      "archive",
      "artificial intelligence",
      "array",
      "attitude",
      "benchmark",
      "budgetary management",
      "capability",
      "capacity",
      "challenge",
      "circuit",
      "collaboration",
      "complexity",
      "concept",
      "conglomeration",
      "contingency",
      "core",
      "customer loyalty",
      "database",
      "data-warehouse",
      "definition",
      "emulation",
      "encoding",
      "encryption",
      "extranet",
      "firmware",
      "flexibility",
      "focus group",
      "forecast",
      "frame",
      "framework",
      "function",
      "functionalities",
      "Graphic Interface",
      "groupware",
      "Graphical User Interface",
      "hardware",
      "help-desk",
      "hierarchy",
      "hub",
      "implementation",
      "info-mediaries",
      "infrastructure",
      "initiative",
      "installation",
      "instruction set",
      "interface",
      "internet solution",
      "intranet",
      "knowledge user",
      "knowledge base",
      "local area network",
      "leverage",
      "matrices",
      "matrix",
      "methodology",
      "middleware",
      "migration",
      "model",
      "moderator",
      "monitoring",
      "moratorium",
      "neural-net",
      "open architecture",
      "open system",
      "orchestration",
      "paradigm",
      "parallelism",
      "policy",
      "portal",
      "pricing structure",
      "process improvement",
      "product",
      "productivity",
      "project",
      "projection",
      "protocol",
      "secured line",
      "service-desk",
      "software",
      "solution",
      "standardization",
      "strategy",
      "structure",
      "success",
      "superstructure",
      "support",
      "synergy",
      "system engine",
      "task-force",
      "throughput",
      "time-frame",
      "toolset",
      "utilisation",
      "website",
      "workforce"
  ],
  "bs_verb": [
      "implement",
      "utilize",
      "integrate",
      "streamline",
      "optimize",
      "evolve",
      "transform",
      "embrace",
      "enable",
      "orchestrate",
      "leverage",
      "reinvent",
      "aggregate",
      "architect",
      "enhance",
      "incentivize",
      "morph",
      "empower",
      "envisioneer",
      "monetize",
      "harness",
      "facilitate",
      "seize",
      "disintermediate",
      "synergize",
      "strategize",
      "deploy",
      "brand",
      "grow",
      "target",
      "syndicate",
      "synthesize",
      "deliver",
      "mesh",
      "incubate",
      "engage",
      "maximize",
      "benchmark",
      "expedite",
      "reintermediate",
      "whiteboard",
      "visualize",
      "repurpose",
      "innovate",
      "scale",
      "unleash",
      "drive",
      "extend",
      "engineer",
      "revolutionize",
      "generate",
      "exploit",
      "transition",
      "e-enable",
      "iterate",
      "cultivate",
      "matrix",
      "productize",
      "redefine",
      "recontextualize"
    ],
    "bs_noun": [
      "clicks-and-mortar",
      "value-added",
      "vertical",
      "proactive",
      "robust",
      "revolutionary",
      "scalable",
      "leading-edge",
      "innovative",
      "intuitive",
      "strategic",
      "e-business",
      "mission-critical",
      "sticky",
      "one-to-one",
      "24/7",
      "end-to-end",
      "global",
      "B2B",
      "B2C",
      "granular",
      "frictionless",
      "virtual",
      "viral",
      "dynamic",
      "24/365",
      "best-of-breed",
      "killer",
      "magnetic",
      "bleeding-edge",
      "web-enabled",
      "interactive",
      "dot-com",
      "sexy",
      "back-end",
      "real-time",
      "efficient",
      "front-end",
      "distributed",
      "seamless",
      "extensible",
      "turn-key",
      "world-class",
      "open-source",
      "cross-platform",
      "cross-media",
      "synergistic",
      "bricks-and-clicks",
      "out-of-the-box",
      "enterprise",
      "integrated",
      "impactful",
      "wireless",
      "transparent",
      "next-generation",
      "cutting-edge",
      "user-centric",
      "visionary",
      "customized",
      "ubiquitous",
      "plug-and-play",
      "collaborative",
      "compelling",
      "holistic",
      "rich",
      "synergies",
      "web-readiness",
      "paradigms",
      "markets",
      "partnerships",
      "infrastructures",
      "platforms",
      "initiatives",
      "channels",
      "eyeballs",
      "communities",
      "ROI",
      "solutions",
      "e-tailers",
      "e-services",
      "action-items",
      "portals",
      "niches",
      "technologies",
      "content",
      "vortals",
      "supply-chains",
      "convergence",
      "relationships",
      "architectures",
      "interfaces",
      "e-markets",
      "e-commerce",
      "systems",
      "bandwidth",
      "infomediaries",
      "models",
      "mindshare",
      "deliverables",
      "users",
      "schemas",
      "networks",
      "applications",
      "metrics",
      "e-business",
      "functionalities",
      "experiences",
      "web services",
      "methodologies"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name} #{suffix}",
    "#{Name.man_last_name} a #{Name.man_last_name} #{suffix}"
  ]
};
sk.internet = {
  "free_email": [
    "gmail.com",
    "zoznam.sk",
    "azet.sk"
  ],
  "domain_suffix": [
    "sk",
    "com",
    "net",
    "eu",
    "org"
  ]
};
sk.lorem = {
  "words": [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ],
  "supplemental": [
    "abbas",
    "abduco",
    "abeo",
    "abscido",
    "absconditus",
    "absens",
    "absorbeo",
    "absque",
    "abstergo",
    "absum",
    "abundans",
    "abutor",
    "accedo",
    "accendo",
    "acceptus",
    "accipio",
    "accommodo",
    "accusator",
    "acer",
    "acerbitas",
    "acervus",
    "acidus",
    "acies",
    "acquiro",
    "acsi",
    "adamo",
    "adaugeo",
    "addo",
    "adduco",
    "ademptio",
    "adeo",
    "adeptio",
    "adfectus",
    "adfero",
    "adficio",
    "adflicto",
    "adhaero",
    "adhuc",
    "adicio",
    "adimpleo",
    "adinventitias",
    "adipiscor",
    "adiuvo",
    "administratio",
    "admiratio",
    "admitto",
    "admoneo",
    "admoveo",
    "adnuo",
    "adopto",
    "adsidue",
    "adstringo",
    "adsuesco",
    "adsum",
    "adulatio",
    "adulescens",
    "adultus",
    "aduro",
    "advenio",
    "adversus",
    "advoco",
    "aedificium",
    "aeger",
    "aegre",
    "aegrotatio",
    "aegrus",
    "aeneus",
    "aequitas",
    "aequus",
    "aer",
    "aestas",
    "aestivus",
    "aestus",
    "aetas",
    "aeternus",
    "ager",
    "aggero",
    "aggredior",
    "agnitio",
    "agnosco",
    "ago",
    "ait",
    "aiunt",
    "alienus",
    "alii",
    "alioqui",
    "aliqua",
    "alius",
    "allatus",
    "alo",
    "alter",
    "altus",
    "alveus",
    "amaritudo",
    "ambitus",
    "ambulo",
    "amicitia",
    "amiculum",
    "amissio",
    "amita",
    "amitto",
    "amo",
    "amor",
    "amoveo",
    "amplexus",
    "amplitudo",
    "amplus",
    "ancilla",
    "angelus",
    "angulus",
    "angustus",
    "animadverto",
    "animi",
    "animus",
    "annus",
    "anser",
    "ante",
    "antea",
    "antepono",
    "antiquus",
    "aperio",
    "aperte",
    "apostolus",
    "apparatus",
    "appello",
    "appono",
    "appositus",
    "approbo",
    "apto",
    "aptus",
    "apud",
    "aqua",
    "ara",
    "aranea",
    "arbitro",
    "arbor",
    "arbustum",
    "arca",
    "arceo",
    "arcesso",
    "arcus",
    "argentum",
    "argumentum",
    "arguo",
    "arma",
    "armarium",
    "armo",
    "aro",
    "ars",
    "articulus",
    "artificiose",
    "arto",
    "arx",
    "ascisco",
    "ascit",
    "asper",
    "aspicio",
    "asporto",
    "assentator",
    "astrum",
    "atavus",
    "ater",
    "atqui",
    "atrocitas",
    "atrox",
    "attero",
    "attollo",
    "attonbitus",
    "auctor",
    "auctus",
    "audacia",
    "audax",
    "audentia",
    "audeo",
    "audio",
    "auditor",
    "aufero",
    "aureus",
    "auris",
    "aurum",
    "aut",
    "autem",
    "autus",
    "auxilium",
    "avaritia",
    "avarus",
    "aveho",
    "averto",
    "avoco",
    "baiulus",
    "balbus",
    "barba",
    "bardus",
    "basium",
    "beatus",
    "bellicus",
    "bellum",
    "bene",
    "beneficium",
    "benevolentia",
    "benigne",
    "bestia",
    "bibo",
    "bis",
    "blandior",
    "bonus",
    "bos",
    "brevis",
    "cado",
    "caecus",
    "caelestis",
    "caelum",
    "calamitas",
    "calcar",
    "calco",
    "calculus",
    "callide",
    "campana",
    "candidus",
    "canis",
    "canonicus",
    "canto",
    "capillus",
    "capio",
    "capitulus",
    "capto",
    "caput",
    "carbo",
    "carcer",
    "careo",
    "caries",
    "cariosus",
    "caritas",
    "carmen",
    "carpo",
    "carus",
    "casso",
    "caste",
    "casus",
    "catena",
    "caterva",
    "cattus",
    "cauda",
    "causa",
    "caute",
    "caveo",
    "cavus",
    "cedo",
    "celebrer",
    "celer",
    "celo",
    "cena",
    "cenaculum",
    "ceno",
    "censura",
    "centum",
    "cerno",
    "cernuus",
    "certe",
    "certo",
    "certus",
    "cervus",
    "cetera",
    "charisma",
    "chirographum",
    "cibo",
    "cibus",
    "cicuta",
    "cilicium",
    "cimentarius",
    "ciminatio",
    "cinis",
    "circumvenio",
    "cito",
    "civis",
    "civitas",
    "clam",
    "clamo",
    "claro",
    "clarus",
    "claudeo",
    "claustrum",
    "clementia",
    "clibanus",
    "coadunatio",
    "coaegresco",
    "coepi",
    "coerceo",
    "cogito",
    "cognatus",
    "cognomen",
    "cogo",
    "cohaero",
    "cohibeo",
    "cohors",
    "colligo",
    "colloco",
    "collum",
    "colo",
    "color",
    "coma",
    "combibo",
    "comburo",
    "comedo",
    "comes",
    "cometes",
    "comis",
    "comitatus",
    "commemoro",
    "comminor",
    "commodo",
    "communis",
    "comparo",
    "compello",
    "complectus",
    "compono",
    "comprehendo",
    "comptus",
    "conatus",
    "concedo",
    "concido",
    "conculco",
    "condico",
    "conduco",
    "confero",
    "confido",
    "conforto",
    "confugo",
    "congregatio",
    "conicio",
    "coniecto",
    "conitor",
    "coniuratio",
    "conor",
    "conqueror",
    "conscendo",
    "conservo",
    "considero",
    "conspergo",
    "constans",
    "consuasor",
    "contabesco",
    "contego",
    "contigo",
    "contra",
    "conturbo",
    "conventus",
    "convoco",
    "copia",
    "copiose",
    "cornu",
    "corona",
    "corpus",
    "correptius",
    "corrigo",
    "corroboro",
    "corrumpo",
    "coruscus",
    "cotidie",
    "crapula",
    "cras",
    "crastinus",
    "creator",
    "creber",
    "crebro",
    "credo",
    "creo",
    "creptio",
    "crepusculum",
    "cresco",
    "creta",
    "cribro",
    "crinis",
    "cruciamentum",
    "crudelis",
    "cruentus",
    "crur",
    "crustulum",
    "crux",
    "cubicularis",
    "cubitum",
    "cubo",
    "cui",
    "cuius",
    "culpa",
    "culpo",
    "cultellus",
    "cultura",
    "cum",
    "cunabula",
    "cunae",
    "cunctatio",
    "cupiditas",
    "cupio",
    "cuppedia",
    "cupressus",
    "cur",
    "cura",
    "curatio",
    "curia",
    "curiositas",
    "curis",
    "curo",
    "curriculum",
    "currus",
    "cursim",
    "curso",
    "cursus",
    "curto",
    "curtus",
    "curvo",
    "curvus",
    "custodia",
    "damnatio",
    "damno",
    "dapifer",
    "debeo",
    "debilito",
    "decens",
    "decerno",
    "decet",
    "decimus",
    "decipio",
    "decor",
    "decretum",
    "decumbo",
    "dedecor",
    "dedico",
    "deduco",
    "defaeco",
    "defendo",
    "defero",
    "defessus",
    "defetiscor",
    "deficio",
    "defigo",
    "defleo",
    "defluo",
    "defungo",
    "degenero",
    "degero",
    "degusto",
    "deinde",
    "delectatio",
    "delego",
    "deleo",
    "delibero",
    "delicate",
    "delinquo",
    "deludo",
    "demens",
    "demergo",
    "demitto",
    "demo",
    "demonstro",
    "demoror",
    "demulceo",
    "demum",
    "denego",
    "denique",
    "dens",
    "denuncio",
    "denuo",
    "deorsum",
    "depereo",
    "depono",
    "depopulo",
    "deporto",
    "depraedor",
    "deprecator",
    "deprimo",
    "depromo",
    "depulso",
    "deputo",
    "derelinquo",
    "derideo",
    "deripio",
    "desidero",
    "desino",
    "desipio",
    "desolo",
    "desparatus",
    "despecto",
    "despirmatio",
    "infit",
    "inflammatio",
    "paens",
    "patior",
    "patria",
    "patrocinor",
    "patruus",
    "pauci",
    "paulatim",
    "pauper",
    "pax",
    "peccatus",
    "pecco",
    "pecto",
    "pectus",
    "pecunia",
    "pecus",
    "peior",
    "pel",
    "ocer",
    "socius",
    "sodalitas",
    "sol",
    "soleo",
    "solio",
    "solitudo",
    "solium",
    "sollers",
    "sollicito",
    "solum",
    "solus",
    "solutio",
    "solvo",
    "somniculosus",
    "somnus",
    "sonitus",
    "sono",
    "sophismata",
    "sopor",
    "sordeo",
    "sortitus",
    "spargo",
    "speciosus",
    "spectaculum",
    "speculum",
    "sperno",
    "spero",
    "spes",
    "spiculum",
    "spiritus",
    "spoliatio",
    "sponte",
    "stabilis",
    "statim",
    "statua",
    "stella",
    "stillicidium",
    "stipes",
    "stips",
    "sto",
    "strenuus",
    "strues",
    "studio",
    "stultus",
    "suadeo",
    "suasoria",
    "sub",
    "subito",
    "subiungo",
    "sublime",
    "subnecto",
    "subseco",
    "substantia",
    "subvenio",
    "succedo",
    "succurro",
    "sufficio",
    "suffoco",
    "suffragium",
    "suggero",
    "sui",
    "sulum",
    "sum",
    "summa",
    "summisse",
    "summopere",
    "sumo",
    "sumptus",
    "supellex",
    "super",
    "suppellex",
    "supplanto",
    "suppono",
    "supra",
    "surculus",
    "surgo",
    "sursum",
    "suscipio",
    "suspendo",
    "sustineo",
    "suus",
    "synagoga",
    "tabella",
    "tabernus",
    "tabesco",
    "tabgo",
    "tabula",
    "taceo",
    "tactus",
    "taedium",
    "talio",
    "talis",
    "talus",
    "tam",
    "tamdiu",
    "tamen",
    "tametsi",
    "tamisium",
    "tamquam",
    "tandem",
    "tantillus",
    "tantum",
    "tardus",
    "tego",
    "temeritas",
    "temperantia",
    "templum",
    "temptatio",
    "tempus",
    "tenax",
    "tendo",
    "teneo",
    "tener",
    "tenuis",
    "tenus",
    "tepesco",
    "tepidus",
    "ter",
    "terebro",
    "teres",
    "terga",
    "tergeo",
    "tergiversatio",
    "tergo",
    "tergum",
    "termes",
    "terminatio",
    "tero",
    "terra",
    "terreo",
    "territo",
    "terror",
    "tersus",
    "tertius",
    "testimonium",
    "texo",
    "textilis",
    "textor",
    "textus",
    "thalassinus",
    "theatrum",
    "theca",
    "thema",
    "theologus",
    "thermae",
    "thesaurus",
    "thesis",
    "thorax",
    "thymbra",
    "thymum",
    "tibi",
    "timidus",
    "timor",
    "titulus",
    "tolero",
    "tollo",
    "tondeo",
    "tonsor",
    "torqueo",
    "torrens",
    "tot",
    "totidem",
    "toties",
    "totus",
    "tracto",
    "trado",
    "traho",
    "trans",
    "tredecim",
    "tremo",
    "trepide",
    "tres",
    "tribuo",
    "tricesimus",
    "triduana",
    "triginta",
    "tripudio",
    "tristis",
    "triumphus",
    "trucido",
    "truculenter",
    "tubineus",
    "tui",
    "tum",
    "tumultus",
    "tunc",
    "turba",
    "turbo",
    "turpe",
    "turpis",
    "tutamen",
    "tutis",
    "tyrannus",
    "uberrime",
    "ubi",
    "ulciscor",
    "ullus",
    "ulterius",
    "ultio",
    "ultra",
    "umbra",
    "umerus",
    "umquam",
    "una",
    "unde",
    "undique",
    "universe",
    "unus",
    "urbanus",
    "urbs",
    "uredo",
    "usitas",
    "usque",
    "ustilo",
    "ustulo",
    "usus",
    "uter",
    "uterque",
    "utilis",
    "utique",
    "utor",
    "utpote",
    "utrimque",
    "utroque",
    "utrum",
    "uxor",
    "vaco",
    "vacuus",
    "vado",
    "vae",
    "valde",
    "valens",
    "valeo",
    "valetudo",
    "validus",
    "vallum",
    "vapulus",
    "varietas",
    "varius",
    "vehemens",
    "vel",
    "velociter",
    "velum",
    "velut",
    "venia",
    "venio",
    "ventito",
    "ventosus",
    "ventus",
    "venustas",
    "ver",
    "verbera",
    "verbum",
    "vere",
    "verecundia",
    "vereor",
    "vergo",
    "veritas",
    "vero",
    "versus",
    "verto",
    "verumtamen",
    "verus",
    "vesco",
    "vesica",
    "vesper",
    "vespillo",
    "vester",
    "vestigium",
    "vestrum",
    "vetus",
    "via",
    "vicinus",
    "vicissitudo",
    "victoria",
    "victus",
    "videlicet",
    "video",
    "viduata",
    "viduo",
    "vigilo",
    "vigor",
    "vilicus",
    "vilis",
    "vilitas",
    "villa",
    "vinco",
    "vinculum",
    "vindico",
    "vinitor",
    "vinum",
    "vir",
    "virga",
    "virgo",
    "viridis",
    "viriliter",
    "virtus",
    "vis",
    "viscus",
    "vita",
    "vitiosus",
    "vitium",
    "vito",
    "vivo",
    "vix",
    "vobis",
    "vociferor",
    "voco",
    "volaticus",
    "volo",
    "volubilis",
    "voluntarius",
    "volup",
    "volutabrum",
    "volva",
    "vomer",
    "vomica",
    "vomito",
    "vorago",
    "vorax",
    "voro",
    "vos",
    "votum",
    "voveo",
    "vox",
    "vulariter",
    "vulgaris",
    "vulgivagus",
    "vulgo",
    "vulgus",
    "vulnero",
    "vulnus",
    "vulpes",
    "vulticulus",
    "vultuosus",
    "xiphias"
  ]
};
sk.name = {
  "man_first_name": [
    "Drahoslav",
    "Severín",
    "Alexej",
    "Ernest",
    "Rastislav",
    "Radovan",
    "Dobroslav",
    "Dalibor",
    "Vincent",
    "Miloš",
    "Timotej",
    "Gejza",
    "Bohuš",
    "Alfonz",
    "Gašpar",
    "Emil",
    "Erik",
    "Blažej",
    "Zdenko",
    "Dezider",
    "Arpád",
    "Valentín",
    "Pravoslav",
    "Jaromír",
    "Roman",
    "Matej",
    "Frederik",
    "Viktor",
    "Alexander",
    "Radomír",
    "Albín",
    "Bohumil",
    "Kazimír",
    "Fridrich",
    "Radoslav",
    "Tomáš",
    "Alan",
    "Branislav",
    "Bruno",
    "Gregor",
    "Vlastimil",
    "Boleslav",
    "Eduard",
    "Jozef",
    "Víťazoslav",
    "Blahoslav",
    "Beňadik",
    "Adrián",
    "Gabriel",
    "Marián",
    "Emanuel",
    "Miroslav",
    "Benjamín",
    "Hugo",
    "Richard",
    "Izidor",
    "Zoltán",
    "Albert",
    "Igor",
    "Július",
    "Aleš",
    "Fedor",
    "Rudolf",
    "Valér",
    "Marcel",
    "Ervín",
    "Slavomír",
    "Vojtech",
    "Juraj",
    "Marek",
    "Jaroslav",
    "Žigmund",
    "Florián",
    "Roland",
    "Pankrác",
    "Servác",
    "Bonifác",
    "Svetozár",
    "Bernard",
    "Júlia",
    "Urban",
    "Dušan",
    "Viliam",
    "Ferdinand",
    "Norbert",
    "Róbert",
    "Medard",
    "Zlatko",
    "Anton",
    "Vasil",
    "Vít",
    "Adolf",
    "Vratislav",
    "Alfréd",
    "Alojz",
    "Ján",
    "Tadeáš",
    "Ladislav",
    "Peter",
    "Pavol",
    "Miloslav",
    "Prokop",
    "Cyril",
    "Metod",
    "Patrik",
    "Oliver",
    "Ivan",
    "Kamil",
    "Henrich",
    "Drahomír",
    "Bohuslav",
    "Iľja",
    "Daniel",
    "Vladimír",
    "Jakub",
    "Krištof",
    "Ignác",
    "Gustáv",
    "Jerguš",
    "Dominik",
    "Oskar",
    "Vavrinec",
    "Ľubomír",
    "Mojmír",
    "Leonard",
    "Tichomír",
    "Filip",
    "Bartolomej",
    "Ľudovít",
    "Samuel",
    "Augustín",
    "Belo",
    "Oleg",
    "Bystrík",
    "Ctibor",
    "Ľudomil",
    "Konštantín",
    "Ľuboslav",
    "Matúš",
    "Móric",
    "Ľuboš",
    "Ľubor",
    "Vladislav",
    "Cyprián",
    "Václav",
    "Michal",
    "Jarolím",
    "Arnold",
    "Levoslav",
    "František",
    "Dionýz",
    "Maximilián",
    "Koloman",
    "Boris",
    "Lukáš",
    "Kristián",
    "Vendelín",
    "Sergej",
    "Aurel",
    "Demeter",
    "Denis",
    "Hubert",
    "Karol",
    "Imrich",
    "René",
    "Bohumír",
    "Teodor",
    "Tibor",
    "Maroš",
    "Martin",
    "Svätopluk",
    "Stanislav",
    "Leopold",
    "Eugen",
    "Félix",
    "Klement",
    "Kornel",
    "Milan",
    "Vratko",
    "Ondrej",
    "Andrej",
    "Edmund",
    "Oldrich",
    "Oto",
    "Mikuláš",
    "Ambróz",
    "Radúz",
    "Bohdan",
    "Adam",
    "Štefan",
    "Dávid",
    "Silvester"
  ],
  "woman_first_name": [
    "Alexandra",
    "Karina",
    "Daniela",
    "Andrea",
    "Antónia",
    "Bohuslava",
    "Dáša",
    "Malvína",
    "Kristína",
    "Nataša",
    "Bohdana",
    "Drahomíra",
    "Sára",
    "Zora",
    "Tamara",
    "Ema",
    "Tatiana",
    "Erika",
    "Veronika",
    "Agáta",
    "Dorota",
    "Vanda",
    "Zoja",
    "Gabriela",
    "Perla",
    "Ida",
    "Liana",
    "Miloslava",
    "Vlasta",
    "Lívia",
    "Eleonóra",
    "Etela",
    "Romana",
    "Zlatica",
    "Anežka",
    "Bohumila",
    "Františka",
    "Angela",
    "Matilda",
    "Svetlana",
    "Ľubica",
    "Alena",
    "Soňa",
    "Vieroslava",
    "Zita",
    "Miroslava",
    "Irena",
    "Milena",
    "Estera",
    "Justína",
    "Dana",
    "Danica",
    "Jela",
    "Jaroslava",
    "Jarmila",
    "Lea",
    "Anastázia",
    "Galina",
    "Lesana",
    "Hermína",
    "Monika",
    "Ingrida",
    "Viktória",
    "Blažena",
    "Žofia",
    "Sofia",
    "Gizela",
    "Viola",
    "Gertrúda",
    "Zina",
    "Júlia",
    "Juliana",
    "Želmíra",
    "Ela",
    "Vanesa",
    "Iveta",
    "Vilma",
    "Petronela",
    "Žaneta",
    "Xénia",
    "Karolína",
    "Lenka",
    "Laura",
    "Stanislava",
    "Margaréta",
    "Dobroslava",
    "Blanka",
    "Valéria",
    "Paulína",
    "Sidónia",
    "Adriána",
    "Beáta",
    "Petra",
    "Melánia",
    "Diana",
    "Berta",
    "Patrícia",
    "Lujza",
    "Amália",
    "Milota",
    "Nina",
    "Margita",
    "Kamila",
    "Dušana",
    "Magdaléna",
    "Oľga",
    "Anna",
    "Hana",
    "Božena",
    "Marta",
    "Libuša",
    "Božidara",
    "Dominika",
    "Hortenzia",
    "Jozefína",
    "Štefánia",
    "Ľubomíra",
    "Zuzana",
    "Darina",
    "Marcela",
    "Milica",
    "Elena",
    "Helena",
    "Lýdia",
    "Anabela",
    "Jana",
    "Silvia",
    "Nikola",
    "Ružena",
    "Nora",
    "Drahoslava",
    "Linda",
    "Melinda",
    "Rebeka",
    "Rozália",
    "Regína",
    "Alica",
    "Marianna",
    "Miriama",
    "Martina",
    "Mária",
    "Jolana",
    "Ľudomila",
    "Ľudmila",
    "Olympia",
    "Eugénia",
    "Ľuboslava",
    "Zdenka",
    "Edita",
    "Michaela",
    "Stela",
    "Viera",
    "Natália",
    "Eliška",
    "Brigita",
    "Valentína",
    "Terézia",
    "Vladimíra",
    "Hedviga",
    "Uršuľa",
    "Alojza",
    "Kvetoslava",
    "Sabína",
    "Dobromila",
    "Klára",
    "Simona",
    "Aurélia",
    "Denisa",
    "Renáta",
    "Irma",
    "Agnesa",
    "Klaudia",
    "Alžbeta",
    "Elvíra",
    "Cecília",
    "Emília",
    "Katarína",
    "Henrieta",
    "Bibiána",
    "Barbora",
    "Marína",
    "Izabela",
    "Hilda",
    "Otília",
    "Lucia",
    "Branislava",
    "Bronislava",
    "Ivica",
    "Albína",
    "Kornélia",
    "Sláva",
    "Slávka",
    "Judita",
    "Dagmara",
    "Adela",
    "Nadežda",
    "Eva",
    "Filoména",
    "Ivana",
    "Milada"
  ],
  "man_last_name": [
    "Antal",
    "Babka",
    "Bahna",
    "Bahno",
    "Baláž",
    "Baran",
    "Baranka",
    "Bartovič",
    "Bartoš",
    "Bača",
    "Bernolák",
    "Beňo",
    "Bicek",
    "Bielik",
    "Blaho",
    "Bondra",
    "Bosák",
    "Boška",
    "Brezina",
    "Bukovský",
    "Chalupka",
    "Chudík",
    "Cibula",
    "Cibulka",
    "Cibuľa",
    "Cyprich",
    "Cíger",
    "Danko",
    "Daňko",
    "Daňo",
    "Debnár",
    "Dej",
    "Dekýš",
    "Doležal",
    "Dočolomanský",
    "Droppa",
    "Dubovský",
    "Dudek",
    "Dula",
    "Dulla",
    "Dusík",
    "Dvonč",
    "Dzurjanin",
    "Dávid",
    "Fabian",
    "Fabián",
    "Fajnor",
    "Farkašovský",
    "Fico",
    "Filc",
    "Filip",
    "Finka",
    "Ftorek",
    "Gašpar",
    "Gašparovič",
    "Gocník",
    "Gregor",
    "Greguš",
    "Grznár",
    "Hablák",
    "Habšuda",
    "Halda",
    "Haluška",
    "Halák",
    "Hanko",
    "Hanzal",
    "Haščák",
    "Heretik",
    "Hečko",
    "Hlaváček",
    "Hlinka",
    "Holub",
    "Holuby",
    "Hossa",
    "Hoza",
    "Hraško",
    "Hric",
    "Hrmo",
    "Hrušovský",
    "Huba",
    "Ihnačák",
    "Janeček",
    "Janoška",
    "Jantošovič",
    "Janík",
    "Janček",
    "Jedľovský",
    "Jendek",
    "Jonata",
    "Jurina",
    "Jurkovič",
    "Jurík",
    "Jánošík",
    "Kafenda",
    "Kaliský",
    "Karul",
    "Keníž",
    "Klapka",
    "Kmeť",
    "Kolesár",
    "Kollár",
    "Kolnik",
    "Kolník",
    "Kolár",
    "Korec",
    "Kostka",
    "Kostrec",
    "Kováč",
    "Kováčik",
    "Koza",
    "Kočiš",
    "Krajíček",
    "Krajči",
    "Krajčo",
    "Krajčovič",
    "Krajčír",
    "Králik",
    "Krúpa",
    "Kubík",
    "Kyseľ",
    "Kállay",
    "Labuda",
    "Lepšík",
    "Lipták",
    "Lisický",
    "Lubina",
    "Lukáč",
    "Lupták",
    "Líška",
    "Madej",
    "Majeský",
    "Malachovský",
    "Malíšek",
    "Mamojka",
    "Marcinko",
    "Marián",
    "Masaryk",
    "Maslo",
    "Matiaško",
    "Medveď",
    "Melcer",
    "Mečiar",
    "Michalík",
    "Mihalik",
    "Mihál",
    "Mihálik",
    "Mikloško",
    "Mikulík",
    "Mikuš",
    "Mikúš",
    "Milota",
    "Mináč",
    "Mišík",
    "Mojžiš",
    "Mokroš",
    "Mora",
    "Moravčík",
    "Mydlo",
    "Nemec",
    "Nitra",
    "Novák",
    "Obšut",
    "Ondruš",
    "Otčenáš",
    "Pauko",
    "Pavlikovský",
    "Pavúk",
    "Pašek",
    "Paška",
    "Paško",
    "Pelikán",
    "Petrovický",
    "Petruška",
    "Peško",
    "Plch",
    "Plekanec",
    "Podhradský",
    "Podkonický",
    "Poliak",
    "Pupák",
    "Rak",
    "Repiský",
    "Romančík",
    "Rus",
    "Ružička",
    "Rybníček",
    "Rybár",
    "Rybárik",
    "Samson",
    "Sedliak",
    "Senko",
    "Sklenka",
    "Skokan",
    "Skutecký",
    "Slašťan",
    "Sloboda",
    "Slobodník",
    "Slota",
    "Slovák",
    "Smrek",
    "Stodola",
    "Straka",
    "Strnisko",
    "Svrbík",
    "Sámel",
    "Sýkora",
    "Tatar",
    "Tatarka",
    "Tatár",
    "Tatárka",
    "Thomka",
    "Tomeček",
    "Tomka",
    "Tomko",
    "Truben",
    "Turčok",
    "Uram",
    "Urblík",
    "Vajcík",
    "Vajda",
    "Valach",
    "Valachovič",
    "Valent",
    "Valuška",
    "Vanek",
    "Vesel",
    "Vicen",
    "Višňovský",
    "Vlach",
    "Vojtek",
    "Vydarený",
    "Zajac",
    "Zima",
    "Zimka",
    "Záborský",
    "Zúbrik",
    "Čapkovič",
    "Čaplovič",
    "Čarnogurský",
    "Čierny",
    "Čobrda",
    "Ďaďo",
    "Ďurica",
    "Ďuriš",
    "Šidlo",
    "Šimonovič",
    "Škriniar",
    "Škultéty",
    "Šmajda",
    "Šoltés",
    "Šoltýs",
    "Štefan",
    "Štefanka",
    "Šulc",
    "Šurka",
    "Švehla",
    "Šťastný"
  ],
  "woman_last_name": [
    "Antalová",
    "Babková",
    "Bahnová",
    "Balážová",
    "Baranová",
    "Baranková",
    "Bartovičová",
    "Bartošová",
    "Bačová",
    "Bernoláková",
    "Beňová",
    "Biceková",
    "Bieliková",
    "Blahová",
    "Bondrová",
    "Bosáková",
    "Bošková",
    "Brezinová",
    "Bukovská",
    "Chalupková",
    "Chudíková",
    "Cibulová",
    "Cibulková",
    "Cyprichová",
    "Cígerová",
    "Danková",
    "Daňková",
    "Daňová",
    "Debnárová",
    "Dejová",
    "Dekýšová",
    "Doležalová",
    "Dočolomanská",
    "Droppová",
    "Dubovská",
    "Dudeková",
    "Dulová",
    "Dullová",
    "Dusíková",
    "Dvončová",
    "Dzurjaninová",
    "Dávidová",
    "Fabianová",
    "Fabiánová",
    "Fajnorová",
    "Farkašovská",
    "Ficová",
    "Filcová",
    "Filipová",
    "Finková",
    "Ftoreková",
    "Gašparová",
    "Gašparovičová",
    "Gocníková",
    "Gregorová",
    "Gregušová",
    "Grznárová",
    "Habláková",
    "Habšudová",
    "Haldová",
    "Halušková",
    "Haláková",
    "Hanková",
    "Hanzalová",
    "Haščáková",
    "Heretiková",
    "Hečková",
    "Hlaváčeková",
    "Hlinková",
    "Holubová",
    "Holubyová",
    "Hossová",
    "Hozová",
    "Hrašková",
    "Hricová",
    "Hrmová",
    "Hrušovská",
    "Hubová",
    "Ihnačáková",
    "Janečeková",
    "Janošková",
    "Jantošovičová",
    "Janíková",
    "Jančeková",
    "Jedľovská",
    "Jendeková",
    "Jonatová",
    "Jurinová",
    "Jurkovičová",
    "Juríková",
    "Jánošíková",
    "Kafendová",
    "Kaliská",
    "Karulová",
    "Kenížová",
    "Klapková",
    "Kmeťová",
    "Kolesárová",
    "Kollárová",
    "Kolniková",
    "Kolníková",
    "Kolárová",
    "Korecová",
    "Kostkaová",
    "Kostrecová",
    "Kováčová",
    "Kováčiková",
    "Kozová",
    "Kočišová",
    "Krajíčeková",
    "Krajčová",
    "Krajčovičová",
    "Krajčírová",
    "Králiková",
    "Krúpová",
    "Kubíková",
    "Kyseľová",
    "Kállayová",
    "Labudová",
    "Lepšíková",
    "Liptáková",
    "Lisická",
    "Lubinová",
    "Lukáčová",
    "Luptáková",
    "Líšková",
    "Madejová",
    "Majeská",
    "Malachovská",
    "Malíšeková",
    "Mamojková",
    "Marcinková",
    "Mariánová",
    "Masaryková",
    "Maslová",
    "Matiašková",
    "Medveďová",
    "Melcerová",
    "Mečiarová",
    "Michalíková",
    "Mihaliková",
    "Mihálová",
    "Miháliková",
    "Miklošková",
    "Mikulíková",
    "Mikušová",
    "Mikúšová",
    "Milotová",
    "Mináčová",
    "Mišíková",
    "Mojžišová",
    "Mokrošová",
    "Morová",
    "Moravčíková",
    "Mydlová",
    "Nemcová",
    "Nováková",
    "Obšutová",
    "Ondrušová",
    "Otčenášová",
    "Pauková",
    "Pavlikovská",
    "Pavúková",
    "Pašeková",
    "Pašková",
    "Pelikánová",
    "Petrovická",
    "Petrušková",
    "Pešková",
    "Plchová",
    "Plekanecová",
    "Podhradská",
    "Podkonická",
    "Poliaková",
    "Pupáková",
    "Raková",
    "Repiská",
    "Romančíková",
    "Rusová",
    "Ružičková",
    "Rybníčeková",
    "Rybárová",
    "Rybáriková",
    "Samsonová",
    "Sedliaková",
    "Senková",
    "Sklenková",
    "Skokanová",
    "Skutecká",
    "Slašťanová",
    "Slobodová",
    "Slobodníková",
    "Slotová",
    "Slováková",
    "Smreková",
    "Stodolová",
    "Straková",
    "Strnisková",
    "Svrbíková",
    "Sámelová",
    "Sýkorová",
    "Tatarová",
    "Tatarková",
    "Tatárová",
    "Tatárkaová",
    "Thomková",
    "Tomečeková",
    "Tomková",
    "Trubenová",
    "Turčoková",
    "Uramová",
    "Urblíková",
    "Vajcíková",
    "Vajdová",
    "Valachová",
    "Valachovičová",
    "Valentová",
    "Valušková",
    "Vaneková",
    "Veselová",
    "Vicenová",
    "Višňovská",
    "Vlachová",
    "Vojteková",
    "Vydarená",
    "Zajacová",
    "Zimová",
    "Zimková",
    "Záborská",
    "Zúbriková",
    "Čapkovičová",
    "Čaplovičová",
    "Čarnogurská",
    "Čierná",
    "Čobrdová",
    "Ďaďová",
    "Ďuricová",
    "Ďurišová",
    "Šidlová",
    "Šimonovičová",
    "Škriniarová",
    "Škultétyová",
    "Šmajdová",
    "Šoltésová",
    "Šoltýsová",
    "Štefanová",
    "Štefanková",
    "Šulcová",
    "Šurková",
    "Švehlová",
    "Šťastná"
  ],
  "prefix": [
    "Ing.",
    "Mgr.",
    "JUDr.",
    "MUDr."
  ],
  "suffix": [
    "Phd."
  ],
  "title": {
    "descriptor": [
      "Lead",
      "Senior",
      "Direct",
      "Corporate",
      "Dynamic",
      "Future",
      "Product",
      "National",
      "Regional",
      "District",
      "Central",
      "Global",
      "Customer",
      "Investor",
      "Dynamic",
      "International",
      "Legacy",
      "Forward",
      "Internal",
      "Human",
      "Chief",
      "Principal"
    ],
    "level": [
      "Solutions",
      "Program",
      "Brand",
      "Security",
      "Research",
      "Marketing",
      "Directives",
      "Implementation",
      "Integration",
      "Functionality",
      "Response",
      "Paradigm",
      "Tactics",
      "Identity",
      "Markets",
      "Group",
      "Division",
      "Applications",
      "Optimization",
      "Operations",
      "Infrastructure",
      "Intranet",
      "Communications",
      "Web",
      "Branding",
      "Quality",
      "Assurance",
      "Mobility",
      "Accounts",
      "Data",
      "Creative",
      "Configuration",
      "Accountability",
      "Interactions",
      "Factors",
      "Usability",
      "Metrics"
    ],
    "job": [
      "Supervisor",
      "Associate",
      "Executive",
      "Liason",
      "Officer",
      "Manager",
      "Engineer",
      "Specialist",
      "Director",
      "Coordinator",
      "Administrator",
      "Architect",
      "Analyst",
      "Designer",
      "Planner",
      "Orchestrator",
      "Technician",
      "Developer",
      "Producer",
      "Consultant",
      "Assistant",
      "Facilitator",
      "Agent",
      "Representative",
      "Strategist"
    ]
  },
  "name": [
    "#{prefix} #{man_first_name} #{man_last_name}",
    "#{prefix} #{woman_first_name} #{woman_last_name}",
    "#{man_first_name} #{man_last_name} #{suffix}",
    "#{woman_first_name} #{woman_last_name} #{suffix}",
    "#{man_first_name} #{man_last_name}",
    "#{man_first_name} #{man_last_name}",
    "#{man_first_name} #{man_last_name}",
    "#{woman_first_name} #{woman_last_name}",
    "#{woman_first_name} #{woman_last_name}",
    "#{woman_first_name} #{woman_last_name}"
  ]
};
sk.phone_number = {
  "formats": [
    "09## ### ###",
    "0## #### ####",
    "0# #### ####",
    "+421 ### ### ###"
  ]
};

},{}],78:[function(require,module,exports){
var sv = {};
module["exports"] = sv;
sv.title = "Swedish";
sv.address = {
  "city_prefix": [
    "Söder",
    "Norr",
    "Väst",
    "Öster",
    "Aling",
    "Ar",
    "Av",
    "Bo",
    "Br",
    "Bå",
    "Ek",
    "En",
    "Esk",
    "Fal",
    "Gäv",
    "Göte",
    "Ha",
    "Helsing",
    "Karl",
    "Krist",
    "Kram",
    "Kung",
    "Kö",
    "Lyck",
    "Ny"
  ],
  "city_suffix": [
    "stad",
    "land",
    "sås",
    "ås",
    "holm",
    "tuna",
    "sta",
    "berg",
    "löv",
    "borg",
    "mora",
    "hamn",
    "fors",
    "köping",
    "by",
    "hult",
    "torp",
    "fred",
    "vik"
  ],
  "country": [
    "Ryssland",
    "Kanada",
    "Kina",
    "USA",
    "Brasilien",
    "Australien",
    "Indien",
    "Argentina",
    "Kazakstan",
    "Algeriet",
    "DR Kongo",
    "Danmark",
    "Färöarna",
    "Grönland",
    "Saudiarabien",
    "Mexiko",
    "Indonesien",
    "Sudan",
    "Libyen",
    "Iran",
    "Mongoliet",
    "Peru",
    "Tchad",
    "Niger",
    "Angola",
    "Mali",
    "Sydafrika",
    "Colombia",
    "Etiopien",
    "Bolivia",
    "Mauretanien",
    "Egypten",
    "Tanzania",
    "Nigeria",
    "Venezuela",
    "Namibia",
    "Pakistan",
    "Moçambique",
    "Turkiet",
    "Chile",
    "Zambia",
    "Marocko",
    "Västsahara",
    "Burma",
    "Afghanistan",
    "Somalia",
    "Centralafrikanska republiken",
    "Sydsudan",
    "Ukraina",
    "Botswana",
    "Madagaskar",
    "Kenya",
    "Frankrike",
    "Franska Guyana",
    "Jemen",
    "Thailand",
    "Spanien",
    "Turkmenistan",
    "Kamerun",
    "Papua Nya Guinea",
    "Sverige",
    "Uzbekistan",
    "Irak",
    "Paraguay",
    "Zimbabwe",
    "Japan",
    "Tyskland",
    "Kongo",
    "Finland",
    "Malaysia",
    "Vietnam",
    "Norge",
    "Svalbard",
    "Jan Mayen",
    "Elfenbenskusten",
    "Polen",
    "Italien",
    "Filippinerna",
    "Ecuador",
    "Burkina Faso",
    "Nya Zeeland",
    "Gabon",
    "Guinea",
    "Storbritannien",
    "Ghana",
    "Rumänien",
    "Laos",
    "Uganda",
    "Guyana",
    "Oman",
    "Vitryssland",
    "Kirgizistan",
    "Senegal",
    "Syrien",
    "Kambodja",
    "Uruguay",
    "Tunisien",
    "Surinam",
    "Nepal",
    "Bangladesh",
    "Tadzjikistan",
    "Grekland",
    "Nicaragua",
    "Eritrea",
    "Nordkorea",
    "Malawi",
    "Benin",
    "Honduras",
    "Liberia",
    "Bulgarien",
    "Kuba",
    "Guatemala",
    "Island",
    "Sydkorea",
    "Ungern",
    "Portugal",
    "Jordanien",
    "Serbien",
    "Azerbajdzjan",
    "Österrike",
    "Förenade Arabemiraten",
    "Tjeckien",
    "Panama",
    "Sierra Leone",
    "Irland",
    "Georgien",
    "Sri Lanka",
    "Litauen",
    "Lettland",
    "Togo",
    "Kroatien",
    "Bosnien och Hercegovina",
    "Costa Rica",
    "Slovakien",
    "Dominikanska republiken",
    "Bhutan",
    "Estland",
    "Danmark",
    "Färöarna",
    "Grönland",
    "Nederländerna",
    "Schweiz",
    "Guinea-Bissau",
    "Taiwan",
    "Moldavien",
    "Belgien",
    "Lesotho",
    "Armenien",
    "Albanien",
    "Salomonöarna",
    "Ekvatorialguinea",
    "Burundi",
    "Haiti",
    "Rwanda",
    "Makedonien",
    "Djibouti",
    "Belize",
    "Israel",
    "El Salvador",
    "Slovenien",
    "Fiji",
    "Kuwait",
    "Swaziland",
    "Timor-Leste",
    "Montenegro",
    "Bahamas",
    "Vanuatu",
    "Qatar",
    "Gambia",
    "Jamaica",
    "Kosovo",
    "Libanon",
    "Cypern",
    "Brunei",
    "Trinidad och Tobago",
    "Kap Verde",
    "Samoa",
    "Luxemburg",
    "Komorerna",
    "Mauritius",
    "São Tomé och Príncipe",
    "Kiribati",
    "Dominica",
    "Tonga",
    "Mikronesiens federerade stater",
    "Singapore",
    "Bahrain",
    "Saint Lucia",
    "Andorra",
    "Palau",
    "Seychellerna",
    "Antigua och Barbuda",
    "Barbados",
    "Saint Vincent och Grenadinerna",
    "Grenada",
    "Malta",
    "Maldiverna",
    "Saint Kitts och Nevis",
    "Marshallöarna",
    "Liechtenstein",
    "San Marino",
    "Tuvalu",
    "Nauru",
    "Monaco",
    "Vatikanstaten"
  ],
  "common_street_suffix": [
    "s Väg",
    "s Gata"
  ],
  "street_prefix": [
    "Västra",
    "Östra",
    "Norra",
    "Södra",
    "Övre",
    "Undre"
  ],
  "street_root": [
    "Björk",
    "Järnvägs",
    "Ring",
    "Skol",
    "Skogs",
    "Ny",
    "Gran",
    "Idrotts",
    "Stor",
    "Kyrk",
    "Industri",
    "Park",
    "Strand",
    "Skol",
    "Trädgård",
    "Ängs",
    "Kyrko",
    "Villa",
    "Ek",
    "Kvarn",
    "Stations",
    "Back",
    "Furu",
    "Gen",
    "Fabriks",
    "Åker",
    "Bäck",
    "Asp"
  ],
  "street_suffix": [
    "vägen",
    "gatan",
    "gränden",
    "gärdet",
    "allén"
  ],
  "state": [
    "Blekinge",
    "Dalarna",
    "Gotland",
    "Gävleborg",
    "Göteborg",
    "Halland",
    "Jämtland",
    "Jönköping",
    "Kalmar",
    "Kronoberg",
    "Norrbotten",
    "Skaraborg",
    "Skåne",
    "Stockholm",
    "Södermanland",
    "Uppsala",
    "Värmland",
    "Västerbotten",
    "Västernorrland",
    "Västmanland",
    "Älvsborg",
    "Örebro",
    "Östergötland"
  ],
  "city": [
    "#{city_prefix}#{city_suffix}"
  ],
  "street_name": [
    "#{street_root}#{street_suffix}",
    "#{street_prefix} #{street_root}#{street_suffix}",
    "#{Name.first_name}#{common_street_suffix}",
    "#{Name.last_name}#{common_street_suffix}"
  ],
  "postcode": [
    "#####"
  ],
  "building_number": [
    "###",
    "##",
    "#"
  ],
  "secondary_address": [
    "Lgh. ###",
    "Hus ###"
  ],
  "street_address": [
    "#{street_name} #{building_number}"
  ],
  "default_country": [
    "Sverige"
  ]
};
sv.company = {
  "suffix": [
    "Gruppen",
    "AB",
    "HB",
    "Group",
    "Investment",
    "Kommanditbolag",
    "Aktiebolag"
  ],
  "name": [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} #{suffix}"
  ]
};
sv.internet = {
  "domain_suffix": [
    "se",
    "nu",
    "info",
    "com",
    "org"
  ]
};
sv.name = {
  "first_name_women": [
    "Maria",
    "Anna",
    "Margareta",
    "Elisabeth",
    "Eva",
    "Birgitta",
    "Kristina",
    "Karin",
    "Elisabet",
    "Marie"
  ],
  "first_name_men": [
    "Erik",
    "Lars",
    "Karl",
    "Anders",
    "Per",
    "Johan",
    "Nils",
    "Lennart",
    "Emil",
    "Hans"
  ],
  "last_name": [
    "Johansson",
    "Andersson",
    "Karlsson",
    "Nilsson",
    "Eriksson",
    "Larsson",
    "Olsson",
    "Persson",
    "Svensson",
    "Gustafsson"
  ],
  "prefix": [
    "Dr.",
    "Prof.",
    "PhD."
  ],
  "title": {
    "descriptor": [
      "Lead",
      "Senior",
      "Direct",
      "Corporate",
      "Dynamic",
      "Future",
      "Product",
      "National",
      "Regional",
      "District",
      "Central",
      "Global",
      "Customer",
      "Investor",
      "Dynamic",
      "International",
      "Legacy",
      "Forward",
      "Internal",
      "Human",
      "Chief",
      "Principal"
    ],
    "level": [
      "Solutions",
      "Program",
      "Brand",
      "Security",
      "Research",
      "Marketing",
      "Directives",
      "Implementation",
      "Integration",
      "Functionality",
      "Response",
      "Paradigm",
      "Tactics",
      "Identity",
      "Markets",
      "Group",
      "Division",
      "Applications",
      "Optimization",
      "Operations",
      "Infrastructure",
      "Intranet",
      "Communications",
      "Web",
      "Branding",
      "Quality",
      "Assurance",
      "Mobility",
      "Accounts",
      "Data",
      "Creative",
      "Configuration",
      "Accountability",
      "Interactions",
      "Factors",
      "Usability",
      "Metrics"
    ],
    "job": [
      "Supervisor",
      "Associate",
      "Executive",
      "Liason",
      "Officer",
      "Manager",
      "Engineer",
      "Specialist",
      "Director",
      "Coordinator",
      "Administrator",
      "Architect",
      "Analyst",
      "Designer",
      "Planner",
      "Orchestrator",
      "Technician",
      "Developer",
      "Producer",
      "Consultant",
      "Assistant",
      "Facilitator",
      "Agent",
      "Representative",
      "Strategist"
    ]
  },
  "name": [
    "#{first_name_women} #{last_name}",
    "#{first_name_men} #{last_name}",
    "#{first_name_women} #{last_name}",
    "#{first_name_men} #{last_name}",
    "#{first_name_women} #{last_name}",
    "#{first_name_men} #{last_name}",
    "#{prefix} #{first_name_men} #{last_name}",
    "#{prefix} #{first_name_women} #{last_name}"
  ]
};
sv.phone_number = {
  "formats": [
    "####-#####",
    "####-######"
  ]
};
sv.cell_phone = {
  "common_cell_prefix": [
    56,
    62,
    59
  ],
  "formats": [
    "#{common_cell_prefix}-###-####"
  ]
};
sv.commerce = {
  "color": [
    "vit",
    "silver",
    "grå",
    "svart",
    "röd",
    "grön",
    "blå",
    "gul",
    "lila",
    "indigo",
    "guld",
    "brun",
    "rosa",
    "purpur",
    "korall"
  ],
  "department": [
    "Böcker",
    "Filmer",
    "Musik",
    "Spel",
    "Elektronik",
    "Datorer",
    "Hem",
    "Trädgård",
    "Verktyg",
    "Livsmedel",
    "Hälsa",
    "Skönhet",
    "Leksaker",
    "Klädsel",
    "Skor",
    "Smycken",
    "Sport"
  ],
  "product_name": {
    "adjective": [
      "Liten",
      "Ergonomisk",
      "Robust",
      "Intelligent",
      "Söt",
      "Otrolig",
      "Fatastisk",
      "Praktisk",
      "Slimmad",
      "Grym"
    ],
    "material": [
      "Stål",
      "Metall",
      "Trä",
      "Betong",
      "Plast",
      "Bomul",
      "Grnit",
      "Gummi",
      "Latex"
    ],
    "product": [
      "Stol",
      "Bil",
      "Dator",
      "Handskar",
      "Pants",
      "Shirt",
      "Table",
      "Shoes",
      "Hat"
    ]
  }
};
sv.team = {
  "suffix": [
    "IF",
    "FF",
    "BK",
    "HK",
    "AIF",
    "SK",
    "FC",
    "SK",
    "BoIS",
    "FK",
    "BIS",
    "FIF",
    "IK"
  ],
  "name": [
    "#{Address.city} #{suffix}"
  ]
};

},{}],79:[function(require,module,exports){
var vi = {};
module["exports"] = vi;
vi.title = "Vietnamese";
vi.address = {
  "city_root": [
    "Bắc Giang",
    "Bắc Kạn",
    "Bắc Ninh",
    "Cao Bằng",
    "Điện Biên",
    "Hà Giang",
    "Hà Nam",
    "Hà Tây",
    "Hải Dương",
    "TP Hải Phòng",
    "Hòa Bình",
    "Hưng Yên",
    "Lai Châu",
    "Lào Cai",
    "Lạng Sơn",
    "Nam Định",
    "Ninh Bình",
    "Phú Thọ",
    "Quảng Ninh",
    "Sơn La",
    "Thái Bình",
    "Thái Nguyên",
    "Tuyên Quang",
    "Vĩnh Phúc",
    "Yên Bái",
    "TP Đà Nẵng",
    "Bình Định",
    "Đắk Lắk",
    "Đắk Nông",
    "Gia Lai",
    "Hà Tĩnh",
    "Khánh Hòa",
    "Kon Tum",
    "Nghệ An",
    "Phú Yên",
    "Quảng Bình",
    "Quảng Nam",
    "Quảng Ngãi",
    "Quảng Trị",
    "Thanh Hóa",
    "Thừa Thiên Huế",
    "TP TP. Hồ Chí Minh",
    "An Giang",
    "Bà Rịa Vũng Tàu",
    "Bạc Liêu",
    "Bến Tre",
    "Bình Dương",
    "Bình Phước",
    "Bình Thuận",
    "Cà Mau",
    "TP Cần Thơ",
    "Đồng Nai",
    "Đồng Tháp",
    "Hậu Giang",
    "Kiên Giang",
    "Lâm Đồng",
    "Long An",
    "Ninh Thuận",
    "Sóc Trăng",
    "Tây Ninh",
    "Tiền Giang",
    "Trà Vinh",
    "Vĩnh Long"
  ],
  "city": [
    "#{city_root}"
  ],
  "postcode": "/[A-PR-UWYZ0-9][A-HK-Y0-9][AEHMNPRTVXY0-9]?[ABEHMNPRVWXY0-9]? {1,2}[0-9][ABD-HJLN-UW-Z]{2}/",
  "county": [
    "Avon",
    "Bedfordshire",
    "Berkshire",
    "Borders",
    "Buckinghamshire",
    "Cambridgeshire",
    "Central",
    "Cheshire",
    "Cleveland",
    "Clwyd",
    "Cornwall",
    "County Antrim",
    "County Armagh",
    "County Down",
    "County Fermanagh",
    "County Londonderry",
    "County Tyrone",
    "Cumbria",
    "Derbyshire",
    "Devon",
    "Dorset",
    "Dumfries and Galloway",
    "Durham",
    "Dyfed",
    "East Sussex",
    "Essex",
    "Fife",
    "Gloucestershire",
    "Grampian",
    "Greater Manchester",
    "Gwent",
    "Gwynedd County",
    "Hampshire",
    "Herefordshire",
    "Hertfordshire",
    "Highlands and Islands",
    "Humberside",
    "Isle of Wight",
    "Kent",
    "Lancashire",
    "Leicestershire",
    "Lincolnshire",
    "Lothian",
    "Merseyside",
    "Mid Glamorgan",
    "Norfolk",
    "North Yorkshire",
    "Northamptonshire",
    "Northumberland",
    "Nottinghamshire",
    "Oxfordshire",
    "Powys",
    "Rutland",
    "Shropshire",
    "Somerset",
    "South Glamorgan",
    "South Yorkshire",
    "Staffordshire",
    "Strathclyde",
    "Suffolk",
    "Surrey",
    "Tayside",
    "Tyne and Wear",
    "Việt Nam",
    "Warwickshire",
    "West Glamorgan",
    "West Midlands",
    "West Sussex",
    "West Yorkshire",
    "Wiltshire",
    "Worcestershire"
  ],
  "default_country": [
    "Việt Nam"
  ]
};
vi.internet = {
  "domain_suffix": [
    "com",
    "net",
    "info",
    "vn",
    "com.vn"
  ]
};
vi.phone_number = {
  "formats": [
    "01#### #####",
    "01### ######",
    "01#1 ### ####",
    "011# ### ####",
    "02# #### ####",
    "03## ### ####",
    "055 #### ####",
    "056 #### ####",
    "0800 ### ####",
    "08## ### ####",
    "09## ### ####",
    "016977 ####",
    "01### #####",
    "0500 ######",
    "0800 ######"
  ]
};
vi.cell_phone = {
  "formats": [
    "074## ######",
    "075## ######",
    "076## ######",
    "077## ######",
    "078## ######",
    "079## ######"
  ]
};
vi.name = {
  "first_name": [
    "Phạm",
    "Nguyễn",
    "Trần",
    "Lê",
    "Lý",
    "Hoàng",
    "Phan",
    "Vũ",
    "Tăng",
    "Đặng",
    "Bùi",
    "Đỗ",
    "Hồ",
    "Ngô",
    "Dương",
    "Đào",
    "Đoàn",
    "Vương",
    "Trịnh",
    "Đinh",
    "Lâm",
    "Phùng",
    "Mai",
    "Tô",
    "Trương",
    "Hà"
  ],
  "last_name": [
    "Nam",
    "Trung",
    "Thanh",
    "Thị",
    "Văn",
    "Dương",
    "Tăng",
    "Quốc",
    "Như",
    "Phạm",
    "Nguyễn",
    "Trần",
    "Lê",
    "Lý",
    "Hoàng",
    "Phan",
    "Vũ",
    "Tăng",
    "Đặng",
    "Bùi",
    "Đỗ",
    "Hồ",
    "Ngô",
    "Dương",
    "Đào",
    "Đoàn",
    "Vương",
    "Trịnh",
    "Đinh",
    "Lâm",
    "Phùng",
    "Mai",
    "Tô",
    "Trương",
    "Hà",
    "Vinh",
    "Nhung",
    "Hòa",
    "Tiến",
    "Tâm",
    "Bửu",
    "Loan",
    "Hiền",
    "Hải",
    "Vân",
    "Kha",
    "Minh",
    "Nhân",
    "Triệu",
    "Tuân",
    "Hữu",
    "Đức",
    "Phú",
    "Khoa",
    "Thắgn",
    "Sơn",
    "Dung",
    "Tú",
    "Trinh",
    "Thảo",
    "Sa",
    "Kim",
    "Long",
    "Thi",
    "Cường",
    "Ngọc",
    "Sinh",
    "Khang",
    "Phong",
    "Thắm",
    "Thu",
    "Thủy",
    "Nhàn"
  ],
  "name": [
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name} #{last_name}"
  ]
};
vi.company = {
  "prefix": [
    "Công ty",
    "Cty TNHH",
    "Cty",
    "Cửa hàng",
    "Trung tâm",
    "Chi nhánh"
  ],
  "name": [
    "#{prefix} #{Name.last_name}"
  ]
};
vi.lorem = {
  "words": [
    "đã",
    "đang",
    "ừ",
    "ờ",
    "á",
    "không",
    "biết",
    "gì",
    "hết",
    "đâu",
    "nha",
    "thế",
    "thì",
    "là",
    "đánh",
    "đá",
    "đập",
    "phá",
    "viết",
    "vẽ",
    "tô",
    "thuê",
    "mướn",
    "mượn",
    "mua",
    "một",
    "hai",
    "ba",
    "bốn",
    "năm",
    "sáu",
    "bảy",
    "tám",
    "chín",
    "mười",
    "thôi",
    "việc",
    "nghỉ",
    "làm",
    "nhà",
    "cửa",
    "xe",
    "đạp",
    "ác",
    "độc",
    "khoảng",
    "khoan",
    "thuyền",
    "tàu",
    "bè",
    "lầu",
    "xanh",
    "đỏ",
    "tím",
    "vàng",
    "kim",
    "chỉ",
    "khâu",
    "may",
    "vá",
    "em",
    "anh",
    "yêu",
    "thương",
    "thích",
    "con",
    "cái",
    "bàn",
    "ghế",
    "tủ",
    "quần",
    "áo",
    "nón",
    "dép",
    "giày",
    "lỗi",
    "được",
    "ghét",
    "giết",
    "chết",
    "hết",
    "tôi",
    "bạn",
    "tui",
    "trời",
    "trăng",
    "mây",
    "gió",
    "máy",
    "hàng",
    "hóa",
    "leo",
    "núi",
    "bơi",
    "biển",
    "chìm",
    "xuồng",
    "nước",
    "ngọt",
    "ruộng",
    "đồng",
    "quê",
    "hương"
  ]
};

},{}],80:[function(require,module,exports){
var zh_CN = {};
module["exports"] = zh_CN;
zh_CN.title = "Chinese";
zh_CN.address = {
  "city_prefix": [
    "长",
    "上",
    "南",
    "西",
    "北",
    "诸",
    "宁",
    "珠",
    "武",
    "衡",
    "成",
    "福",
    "厦",
    "贵",
    "吉",
    "海",
    "太",
    "济",
    "安",
    "吉",
    "包"
  ],
  "city_suffix": [
    "沙市",
    "京市",
    "宁市",
    "安市",
    "乡县",
    "海市",
    "码市",
    "汉市",
    "阳市",
    "都市",
    "州市",
    "门市",
    "阳市",
    "口市",
    "原市",
    "南市",
    "徽市",
    "林市",
    "头市"
  ],
  "building_number": [
    "#####",
    "####",
    "###",
    "##",
    "#"
  ],
  "street_suffix": [
    "巷",
    "街",
    "路",
    "桥",
    "侬",
    "旁",
    "中心",
    "栋"
  ],
  "postcode": [
    "######"
  ],
  "state": [
    "北京市",
    "上海市",
    "天津市",
    "重庆市",
    "黑龙江省",
    "吉林省",
    "辽宁省",
    "内蒙古",
    "河北省",
    "新疆",
    "甘肃省",
    "青海省",
    "陕西省",
    "宁夏",
    "河南省",
    "山东省",
    "山西省",
    "安徽省",
    "湖北省",
    "湖南省",
    "江苏省",
    "四川省",
    "贵州省",
    "云南省",
    "广西省",
    "西藏",
    "浙江省",
    "江西省",
    "广东省",
    "福建省",
    "台湾省",
    "海南省",
    "香港",
    "澳门"
  ],
  "state_abbr": [
    "京",
    "沪",
    "津",
    "渝",
    "黑",
    "吉",
    "辽",
    "蒙",
    "冀",
    "新",
    "甘",
    "青",
    "陕",
    "宁",
    "豫",
    "鲁",
    "晋",
    "皖",
    "鄂",
    "湘",
    "苏",
    "川",
    "黔",
    "滇",
    "桂",
    "藏",
    "浙",
    "赣",
    "粤",
    "闽",
    "台",
    "琼",
    "港",
    "澳"
  ],
  "city": [
    "#{city_prefix}#{city_suffix}"
  ],
  "street_name": [
    "#{Name.last_name}#{street_suffix}"
  ],
  "street_address": [
    "#{street_name}#{building_number}号"
  ],
  "default_country": [
    "中国"
  ]
};
zh_CN.name = {
  "first_name": [
    "王",
    "李",
    "张",
    "刘",
    "陈",
    "杨",
    "黄",
    "吴",
    "赵",
    "周",
    "徐",
    "孙",
    "马",
    "朱",
    "胡",
    "林",
    "郭",
    "何",
    "高",
    "罗",
    "郑",
    "梁",
    "谢",
    "宋",
    "唐",
    "许",
    "邓",
    "冯",
    "韩",
    "曹",
    "曾",
    "彭",
    "萧",
    "蔡",
    "潘",
    "田",
    "董",
    "袁",
    "于",
    "余",
    "叶",
    "蒋",
    "杜",
    "苏",
    "魏",
    "程",
    "吕",
    "丁",
    "沈",
    "任",
    "姚",
    "卢",
    "傅",
    "钟",
    "姜",
    "崔",
    "谭",
    "廖",
    "范",
    "汪",
    "陆",
    "金",
    "石",
    "戴",
    "贾",
    "韦",
    "夏",
    "邱",
    "方",
    "侯",
    "邹",
    "熊",
    "孟",
    "秦",
    "白",
    "江",
    "阎",
    "薛",
    "尹",
    "段",
    "雷",
    "黎",
    "史",
    "龙",
    "陶",
    "贺",
    "顾",
    "毛",
    "郝",
    "龚",
    "邵",
    "万",
    "钱",
    "严",
    "赖",
    "覃",
    "洪",
    "武",
    "莫",
    "孔"
  ],
  "last_name": [
    "绍齐",
    "博文",
    "梓晨",
    "胤祥",
    "瑞霖",
    "明哲",
    "天翊",
    "凯瑞",
    "健雄",
    "耀杰",
    "潇然",
    "子涵",
    "越彬",
    "钰轩",
    "智辉",
    "致远",
    "俊驰",
    "雨泽",
    "烨磊",
    "晟睿",
    "文昊",
    "修洁",
    "黎昕",
    "远航",
    "旭尧",
    "鸿涛",
    "伟祺",
    "荣轩",
    "越泽",
    "浩宇",
    "瑾瑜",
    "皓轩",
    "擎苍",
    "擎宇",
    "志泽",
    "子轩",
    "睿渊",
    "弘文",
    "哲瀚",
    "雨泽",
    "楷瑞",
    "建辉",
    "晋鹏",
    "天磊",
    "绍辉",
    "泽洋",
    "鑫磊",
    "鹏煊",
    "昊强",
    "伟宸",
    "博超",
    "君浩",
    "子骞",
    "鹏涛",
    "炎彬",
    "鹤轩",
    "越彬",
    "风华",
    "靖琪",
    "明辉",
    "伟诚",
    "明轩",
    "健柏",
    "修杰",
    "志泽",
    "弘文",
    "峻熙",
    "嘉懿",
    "煜城",
    "懿轩",
    "烨伟",
    "苑博",
    "伟泽",
    "熠彤",
    "鸿煊",
    "博涛",
    "烨霖",
    "烨华",
    "煜祺",
    "智宸",
    "正豪",
    "昊然",
    "明杰",
    "立诚",
    "立轩",
    "立辉",
    "峻熙",
    "弘文",
    "熠彤",
    "鸿煊",
    "烨霖",
    "哲瀚",
    "鑫鹏",
    "昊天",
    "思聪",
    "展鹏",
    "笑愚",
    "志强",
    "炫明",
    "雪松",
    "思源",
    "智渊",
    "思淼",
    "晓啸",
    "天宇",
    "浩然",
    "文轩",
    "鹭洋",
    "振家",
    "乐驹",
    "晓博",
    "文博",
    "昊焱",
    "立果",
    "金鑫",
    "锦程",
    "嘉熙",
    "鹏飞",
    "子默",
    "思远",
    "浩轩",
    "语堂",
    "聪健",
    "明",
    "文",
    "果",
    "思",
    "鹏",
    "驰",
    "涛",
    "琪",
    "浩",
    "航",
    "彬"
  ],
  "name": [
    "#{first_name}#{last_name}"
  ]
};
zh_CN.phone_number = {
  "formats": [
    "###-########",
    "####-########",
    "###########"
  ]
};

},{}],81:[function(require,module,exports){
var faker = require('../index');
var Helpers = require('./helpers');

var lorem = {
    words: function (num) {
        if (typeof num == 'undefined') { num = 3; }
        return Helpers.shuffle(faker.definitions.lorem.words).slice(0, num);
    },

    sentence: function (wordCount, range) {
        if (typeof wordCount == 'undefined') { wordCount = 3; }
        if (typeof range == 'undefined') { range = 7; }

        // strange issue with the node_min_test failing for captialize, please fix and add faker.lorem.back
        //return  faker.lorem.words(wordCount + Helpers.randomNumber(range)).join(' ').capitalize();

        return  faker.lorem.words(wordCount + faker.random.number(range)).join(' ');
    },

    sentences: function (sentenceCount) {
        if (typeof sentenceCount == 'undefined') { sentenceCount = 3; }
        var sentences = [];
        for (sentenceCount; sentenceCount > 0; sentenceCount--) {
            sentences.push(faker.lorem.sentence());
        }
        return sentences.join("\n");
    },

    paragraph: function (sentenceCount) {
        if (typeof sentenceCount == 'undefined') { sentenceCount = 3; }
        return faker.lorem.sentences(sentenceCount + faker.random.number(3));
    },

    paragraphs: function (paragraphCount) {
        if (typeof paragraphCount == 'undefined') { paragraphCount = 3; }
        var paragraphs = [];
        for (paragraphCount; paragraphCount > 0; paragraphCount--) {
            paragraphs.push(faker.lorem.paragraph());
        }
        return paragraphs.join("\n \r\t");
    }
};

module.exports = lorem;

},{"../index":44,"./helpers":50}],82:[function(require,module,exports){
var faker = require('../index');

var _name = {

    firstName: function () {
      if (typeof faker.definitions.name.male_first_name !== "undefined" && typeof faker.definitions.name.female_first_name !== "undefined") {
        // some locale datasets ( like ru ) have first_name split by gender. since the name.first_name field does not exist in these datasets,
        // we must randomly pick a name from either gender array so faker.name.firstName will return the correct locale data ( and not fallback )
        var rand = faker.random.number(1);
        if (rand === 0) {
          return faker.random.array_element(faker.locales[faker.locale].name.male_first_name)
        } else {
          return faker.random.array_element(faker.locales[faker.locale].name.female_first_name)
        }
      }
      return faker.random.array_element(faker.definitions.name.first_name)
    },

    lastName: function () {
      if (typeof faker.definitions.name.male_last_name !== "undefined" && typeof faker.defintions.name.female_last_name !== "undefined") {
        // some locale datasets ( like ru ) have last_name split by gender. i have no idea how last names can have genders, but also i do not speak russian
        // see above comment of firstName method
        var rand = faker.random.number(1);
        if (rand === 0) {
          return faker.random.array_element(faker.locales[faker.locale].name.male_last_name);
        } else {
          return faker.random.array_element(faker.locales[faker.locale].name.female_last_name);
        }
      }
      return faker.random.array_element(faker.definitions.name.last_name);
    },

    findName: function (firstName, lastName) {
        var r = faker.random.number(8);
        firstName = firstName || faker.name.firstName();
        lastName = lastName || faker.name.lastName();
        switch (r) {
        case 0:
            return faker.name.prefix() + " " + firstName + " " + lastName;
        case 1:
            return firstName + " " + lastName + " " + faker.name.suffix();
        }

        return firstName + " " + lastName;
    },

    prefix: function () {
        return faker.random.array_element(faker.definitions.name.prefix);
    },

    suffix: function () {
        return faker.random.array_element(faker.definitions.name.suffix);
    },

};

module.exports = _name;

},{"../index":44}],83:[function(require,module,exports){
var faker = require('../index');

var phone = {
    phoneNumber: function (format) {
        format = format || faker.phone.phoneFormats();
        return faker.helpers.replaceSymbolWithNumber(format);
    },

    // FIXME: this is strange passing in an array index.
    phoneNumberFormat: function (phoneFormatsArrayIndex) {
        phoneFormatsArrayIndex = phoneFormatsArrayIndex || 0;
        return faker.helpers.replaceSymbolWithNumber(faker.definitions.phone_number.formats[phoneFormatsArrayIndex]);
    },

    phoneFormats: function () {
      return faker.random.array_element(faker.definitions.phone_number.formats);
    }

};

module.exports = phone;

},{"../index":44}],84:[function(require,module,exports){
var mersenne = require('../vendor/mersenne');
var faker = require('../index');

var random = {
    // returns a single random number based on a max number or range
    number: function (options) {

        if (typeof options === "number") {
          options = {
            max: options
          };
        }

        options = options || {};

        if (typeof options.min === "undefined") {
          options.min = 0;
        }

        if (typeof options.max === "undefined") {
          options.max = 1;
        }
        if (typeof options.precision === "undefined") {
          options.precision = 1;
        }

        // Make the range inclusive of the max value
        var max = options.max;
        if (max > 0) {
          max += options.precision;
        } 
          
        var randomNumber = options.precision * Math.floor(
          mersenne.rand(max / options.precision, options.min / options.precision));

        return randomNumber;

    },

    // takes an array and returns a random element of the array
    array_element: function (array) {
        array = array || ["a", "b", "c"];
        var r = faker.random.number({ max: array.length - 1 });
        return array[r];
    },

    // takes an object and returns the randomly key or value
    object_element: function (object, field) {
        object = object || {};
        var array = Object.keys(object);
        var key = faker.random.array_element(array);

        return field === "key" ? key : object[key];
    },

    uuid : function () {
        var RFC4122_TEMPLATE = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
        var replacePlaceholders = function (placeholder) {
            var random = Math.random()*16|0;
            var value = placeholder == 'x' ? random : (random &0x3 | 0x8);
            return value.toString(16);
        };
        return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders);
    }
};

module.exports = random;

},{"../index":44,"../vendor/mersenne":85}],85:[function(require,module,exports){
// this program is a JavaScript version of Mersenne Twister, with concealment and encapsulation in class,
// an almost straight conversion from the original program, mt19937ar.c,
// translated by y. okada on July 17, 2006.
// and modified a little at july 20, 2006, but there are not any substantial differences.
// in this program, procedure descriptions and comments of original source code were not removed.
// lines commented with //c// were originally descriptions of c procedure. and a few following lines are appropriate JavaScript descriptions.
// lines commented with /* and */ are original comments.
// lines commented with // are additional comments in this JavaScript version.
// before using this version, create at least one instance of MersenneTwister19937 class, and initialize the each state, given below in c comments, of all the instances.
/*
   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.

   Before using, initialize the state by using init_genrand(seed)
   or init_by_array(init_key, key_length).

   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
*/

function MersenneTwister19937()
{
	/* constants should be scoped inside the class */
	var N, M, MATRIX_A, UPPER_MASK, LOWER_MASK;
	/* Period parameters */
	//c//#define N 624
	//c//#define M 397
	//c//#define MATRIX_A 0x9908b0dfUL   /* constant vector a */
	//c//#define UPPER_MASK 0x80000000UL /* most significant w-r bits */
	//c//#define LOWER_MASK 0x7fffffffUL /* least significant r bits */
	N = 624;
	M = 397;
	MATRIX_A = 0x9908b0df;   /* constant vector a */
	UPPER_MASK = 0x80000000; /* most significant w-r bits */
	LOWER_MASK = 0x7fffffff; /* least significant r bits */
	//c//static unsigned long mt[N]; /* the array for the state vector  */
	//c//static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
	var mt = new Array(N);   /* the array for the state vector  */
	var mti = N+1;           /* mti==N+1 means mt[N] is not initialized */

	function unsigned32 (n1) // returns a 32-bits unsiged integer from an operand to which applied a bit operator.
	{
		return n1 < 0 ? (n1 ^ UPPER_MASK) + UPPER_MASK : n1;
	}

	function subtraction32 (n1, n2) // emulates lowerflow of a c 32-bits unsiged integer variable, instead of the operator -. these both arguments must be non-negative integers expressible using unsigned 32 bits.
	{
		return n1 < n2 ? unsigned32((0x100000000 - (n2 - n1)) & 0xffffffff) : n1 - n2;
	}

	function addition32 (n1, n2) // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator +. these both arguments must be non-negative integers expressible using unsigned 32 bits.
	{
		return unsigned32((n1 + n2) & 0xffffffff)
	}

	function multiplication32 (n1, n2) // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator *. these both arguments must be non-negative integers expressible using unsigned 32 bits.
	{
		var sum = 0;
		for (var i = 0; i < 32; ++i){
			if ((n1 >>> i) & 0x1){
				sum = addition32(sum, unsigned32(n2 << i));
			}
		}
		return sum;
	}

	/* initializes mt[N] with a seed */
	//c//void init_genrand(unsigned long s)
	this.init_genrand = function (s)
	{
		//c//mt[0]= s & 0xffffffff;
		mt[0]= unsigned32(s & 0xffffffff);
		for (mti=1; mti<N; mti++) {
			mt[mti] = 
			//c//(1812433253 * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti);
			addition32(multiplication32(1812433253, unsigned32(mt[mti-1] ^ (mt[mti-1] >>> 30))), mti);
			/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
			/* In the previous versions, MSBs of the seed affect   */
			/* only MSBs of the array mt[].                        */
			/* 2002/01/09 modified by Makoto Matsumoto             */
			//c//mt[mti] &= 0xffffffff;
			mt[mti] = unsigned32(mt[mti] & 0xffffffff);
			/* for >32 bit machines */
		}
	}

	/* initialize by an array with array-length */
	/* init_key is the array for initializing keys */
	/* key_length is its length */
	/* slight change for C++, 2004/2/26 */
	//c//void init_by_array(unsigned long init_key[], int key_length)
	this.init_by_array = function (init_key, key_length)
	{
		//c//int i, j, k;
		var i, j, k;
		//c//init_genrand(19650218);
		this.init_genrand(19650218);
		i=1; j=0;
		k = (N>key_length ? N : key_length);
		for (; k; k--) {
			//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525))
			//c//	+ init_key[j] + j; /* non linear */
			mt[i] = addition32(addition32(unsigned32(mt[i] ^ multiplication32(unsigned32(mt[i-1] ^ (mt[i-1] >>> 30)), 1664525)), init_key[j]), j);
			mt[i] = 
			//c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
			unsigned32(mt[i] & 0xffffffff);
			i++; j++;
			if (i>=N) { mt[0] = mt[N-1]; i=1; }
			if (j>=key_length) j=0;
		}
		for (k=N-1; k; k--) {
			//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1566083941))
			//c//- i; /* non linear */
			mt[i] = subtraction32(unsigned32((dbg=mt[i]) ^ multiplication32(unsigned32(mt[i-1] ^ (mt[i-1] >>> 30)), 1566083941)), i);
			//c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
			mt[i] = unsigned32(mt[i] & 0xffffffff);
			i++;
			if (i>=N) { mt[0] = mt[N-1]; i=1; }
		}
		mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
	}

    /* moved outside of genrand_int32() by jwatte 2010-11-17; generate less garbage */
    var mag01 = [0x0, MATRIX_A];

	/* generates a random number on [0,0xffffffff]-interval */
	//c//unsigned long genrand_int32(void)
	this.genrand_int32 = function ()
	{
		//c//unsigned long y;
		//c//static unsigned long mag01[2]={0x0UL, MATRIX_A};
		var y;
		/* mag01[x] = x * MATRIX_A  for x=0,1 */

		if (mti >= N) { /* generate N words at one time */
			//c//int kk;
			var kk;

			if (mti == N+1)   /* if init_genrand() has not been called, */
				//c//init_genrand(5489); /* a default initial seed is used */
				this.init_genrand(5489); /* a default initial seed is used */

			for (kk=0;kk<N-M;kk++) {
				//c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
				//c//mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
				y = unsigned32((mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK));
				mt[kk] = unsigned32(mt[kk+M] ^ (y >>> 1) ^ mag01[y & 0x1]);
			}
			for (;kk<N-1;kk++) {
				//c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
				//c//mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
				y = unsigned32((mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK));
				mt[kk] = unsigned32(mt[kk+(M-N)] ^ (y >>> 1) ^ mag01[y & 0x1]);
			}
			//c//y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
			//c//mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
			y = unsigned32((mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK));
			mt[N-1] = unsigned32(mt[M-1] ^ (y >>> 1) ^ mag01[y & 0x1]);
			mti = 0;
		}

		y = mt[mti++];

		/* Tempering */
		//c//y ^= (y >> 11);
		//c//y ^= (y << 7) & 0x9d2c5680;
		//c//y ^= (y << 15) & 0xefc60000;
		//c//y ^= (y >> 18);
		y = unsigned32(y ^ (y >>> 11));
		y = unsigned32(y ^ ((y << 7) & 0x9d2c5680));
		y = unsigned32(y ^ ((y << 15) & 0xefc60000));
		y = unsigned32(y ^ (y >>> 18));

		return y;
	}

	/* generates a random number on [0,0x7fffffff]-interval */
	//c//long genrand_int31(void)
	this.genrand_int31 = function ()
	{
		//c//return (genrand_int32()>>1);
		return (this.genrand_int32()>>>1);
	}

	/* generates a random number on [0,1]-real-interval */
	//c//double genrand_real1(void)
	this.genrand_real1 = function ()
	{
		//c//return genrand_int32()*(1.0/4294967295.0);
		return this.genrand_int32()*(1.0/4294967295.0);
		/* divided by 2^32-1 */
	}

	/* generates a random number on [0,1)-real-interval */
	//c//double genrand_real2(void)
	this.genrand_real2 = function ()
	{
		//c//return genrand_int32()*(1.0/4294967296.0);
		return this.genrand_int32()*(1.0/4294967296.0);
		/* divided by 2^32 */
	}

	/* generates a random number on (0,1)-real-interval */
	//c//double genrand_real3(void)
	this.genrand_real3 = function ()
	{
		//c//return ((genrand_int32()) + 0.5)*(1.0/4294967296.0);
		return ((this.genrand_int32()) + 0.5)*(1.0/4294967296.0);
		/* divided by 2^32 */
	}

	/* generates a random number on [0,1) with 53-bit resolution*/
	//c//double genrand_res53(void)
	this.genrand_res53 = function ()
	{
		//c//unsigned long a=genrand_int32()>>5, b=genrand_int32()>>6;
		var a=this.genrand_int32()>>>5, b=this.genrand_int32()>>>6;
		return(a*67108864.0+b)*(1.0/9007199254740992.0);
	}
	/* These real versions are due to Isaku Wada, 2002/01/09 added */
}

//  Exports: Public API

//  Export the twister class
exports.MersenneTwister19937 = MersenneTwister19937;

//  Export a simplified function to generate random numbers
var gen = new MersenneTwister19937;
gen.init_genrand((new Date).getTime() % 1000000000);

// Added max, min range functionality, Marak Squires Sept 11 2014
exports.rand = function(max, min) {
    if (!max)
        {
        min = 0;
        max = 32768;
        }
    return Math.floor(gen.genrand_real2() * (max - min) + min);
}
exports.seed = function(S) {
    if (typeof(S) != 'number')
        {
        throw new Error("seed(S) must take numeric argument; is " + typeof(S));
        }
    gen.init_genrand(S);
}
exports.seed_array = function(A) {
    if (typeof(A) != 'object')
        {
        throw new Error("seed_array(A) must take array of numbers; is " + typeof(A));
        }
    gen.init_by_array(A);
}


},{}],86:[function(require,module,exports){
/*
 * password-generator
 * Copyright(c) 2011-2013 Bermi Ferrer <bermi@bermilabs.com>
 * MIT Licensed
 */
(function (root) {

  var localName, consonant, letter, password, vowel;
  letter = /[a-zA-Z]$/;
  vowel = /[aeiouAEIOU]$/;
  consonant = /[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$/;


  // Defines the name of the local variable the passwordGenerator library will use
  // this is specially useful if window.passwordGenerator is already being used
  // by your application and you want a different name. For example:
  //    // Declare before including the passwordGenerator library
  //    var localPasswordGeneratorLibraryName = 'pass';
  localName = root.localPasswordGeneratorLibraryName || "generatePassword",

  password = function (length, memorable, pattern, prefix) {
    var char, n;
    if (length == null) {
      length = 10;
    }
    if (memorable == null) {
      memorable = true;
    }
    if (pattern == null) {
      pattern = /\w/;
    }
    if (prefix == null) {
      prefix = '';
    }
    if (prefix.length >= length) {
      return prefix;
    }
    if (memorable) {
      if (prefix.match(consonant)) {
        pattern = vowel;
      } else {
        pattern = consonant;
      }
    }
    n = Math.floor(Math.random() * 94) + 33;
    char = String.fromCharCode(n);
    if (memorable) {
      char = char.toLowerCase();
    }
    if (!char.match(pattern)) {
      return password(length, memorable, pattern, prefix);
    }
    return password(length, memorable, pattern, "" + prefix + char);
  };


  ((typeof exports !== 'undefined') ? exports : root)[localName] = password;
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      module.exports = password;
    }
  }

  // Establish the root object, `window` in the browser, or `global` on the server.
}(this));
},{}],87:[function(require,module,exports){
/*

Copyright (c) 2012-2014 Jeffrey Mealo

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

------------------------------------------------------------------------------------------------------------------------

Based loosely on Luka Pusic's PHP Script: http://360percents.com/posts/php-random-user-agent-generator/

The license for that script is as follows:

"THE BEER-WARE LICENSE" (Revision 42):

<pusic93@gmail.com> wrote this file. As long as you retain this notice you can do whatever you want with this stuff.
If we meet some day, and you think this stuff is worth it, you can buy me a beer in return. Luka Pusic
*/

function rnd(a, b) {
    //calling rnd() with no arguments is identical to rnd(0, 100)
    a = a || 0;
    b = b || 100;

    if (typeof b === 'number' && typeof a === 'number') {
        //rnd(int min, int max) returns integer between min, max
        return (function (min, max) {
            if (min > max) {
                throw new RangeError('expected min <= max; got min = ' + min + ', max = ' + max);
            }
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }(a, b));
    }

    if (Object.prototype.toString.call(a) === "[object Array]") {
        //returns a random element from array (a), even weighting
        return a[Math.floor(Math.random() * a.length)];
    }

    if (a && typeof a === 'object') {
        //returns a random key from the passed object; keys are weighted by the decimal probability in their value
        return (function (obj) {
            var rand = rnd(0, 100) / 100, min = 0, max = 0, key, return_val;

            for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                    max = obj[key] + min;
                    return_val = key;
                    if (rand >= min && rand <= max) {
                        break;
                    }
                    min = min + obj[key];
                }
            }

            return return_val;
        }(a));
    }

    throw new TypeError('Invalid arguments passed to rnd. (' + (b ? a + ', ' + b : a) + ')');
}

function randomLang() {
    return rnd(['AB', 'AF', 'AN', 'AR', 'AS', 'AZ', 'BE', 'BG', 'BN', 'BO', 'BR', 'BS', 'CA', 'CE', 'CO', 'CS',
                'CU', 'CY', 'DA', 'DE', 'EL', 'EN', 'EO', 'ES', 'ET', 'EU', 'FA', 'FI', 'FJ', 'FO', 'FR', 'FY',
                'GA', 'GD', 'GL', 'GV', 'HE', 'HI', 'HR', 'HT', 'HU', 'HY', 'ID', 'IS', 'IT', 'JA', 'JV', 'KA',
                'KG', 'KO', 'KU', 'KW', 'KY', 'LA', 'LB', 'LI', 'LN', 'LT', 'LV', 'MG', 'MK', 'MN', 'MO', 'MS',
                'MT', 'MY', 'NB', 'NE', 'NL', 'NN', 'NO', 'OC', 'PL', 'PT', 'RM', 'RO', 'RU', 'SC', 'SE', 'SK',
                'SL', 'SO', 'SQ', 'SR', 'SV', 'SW', 'TK', 'TR', 'TY', 'UK', 'UR', 'UZ', 'VI', 'VO', 'YI', 'ZH']);
}

function randomBrowserAndOS() {
    var browser = rnd({
        chrome:    .45132810566,
        iexplorer: .27477061836,
        firefox:   .19384170608,
        safari:    .06186781118,
        opera:     .01574236955
    }),
    os = {
        chrome:  {win: .89,  mac: .09 , lin: .02},
        firefox: {win: .83,  mac: .16,  lin: .01},
        opera:   {win: .91,  mac: .03 , lin: .06},
        safari:  {win: .04 , mac: .96  },
        iexplorer: ['win']
    };

    return [browser, rnd(os[browser])];
}

function randomProc(arch) {
    var procs = {
        lin:['i686', 'x86_64'],
        mac: {'Intel' : .48, 'PPC': .01, 'U; Intel':.48, 'U; PPC' :.01},
        win:['', 'WOW64', 'Win64; x64']
    };
    return rnd(procs[arch]);
}

function randomRevision(dots) {
    var return_val = '';
    //generate a random revision
    //dots = 2 returns .x.y where x & y are between 0 and 9
    for (var x = 0; x < dots; x++) {
        return_val += '.' + rnd(0, 9);
    }
    return return_val;
}

var version_string = {
    net: function () {
        return [rnd(1, 4), rnd(0, 9), rnd(10000, 99999), rnd(0, 9)].join('.');
    },
    nt: function () {
        return rnd(5, 6) + '.' + rnd(0, 3);
    },
    ie: function () {
        return rnd(7, 11);
    },
    trident: function () {
        return rnd(3, 7) + '.' + rnd(0, 1);
    },
    osx: function (delim) {
        return [10, rnd(5, 10), rnd(0, 9)].join(delim || '.');
    },
    chrome: function () {
        return [rnd(13, 39), 0, rnd(800, 899), 0].join('.');
    },
    presto: function () {
        return '2.9.' + rnd(160, 190);
    },
    presto2: function () {
        return rnd(10, 12) + '.00';
    },
    safari: function () {
        return rnd(531, 538) + '.' + rnd(0, 2) + '.' + rnd(0,2);
    }
};

var browser = {
    firefox: function firefox(arch) {
        //https://developer.mozilla.org/en-US/docs/Gecko_user_agent_string_reference
        var firefox_ver = rnd(5, 15) + randomRevision(2),
            gecko_ver = 'Gecko/20100101 Firefox/' + firefox_ver,
            proc = randomProc(arch),
            os_ver = (arch === 'win') ? '(Windows NT ' + version_string.nt() + ((proc) ? '; ' + proc : '')
            : (arch === 'mac') ? '(Macintosh; ' + proc + ' Mac OS X ' + version_string.osx()
            : '(X11; Linux ' + proc;

        return 'Mozilla/5.0 ' + os_ver + '; rv:' + firefox_ver.slice(0, -2) + ') ' + gecko_ver;
    },

    iexplorer: function iexplorer() {
        var ver = version_string.ie();

        if (ver >= 11) {
            //http://msdn.microsoft.com/en-us/library/ie/hh869301(v=vs.85).aspx
            return 'Mozilla/5.0 (Windows NT 6.' + rnd(1,3) + '; Trident/7.0; ' + rnd(['Touch; ', '']) + 'rv:11.0) like Gecko';
        }

        //http://msdn.microsoft.com/en-us/library/ie/ms537503(v=vs.85).aspx
        return 'Mozilla/5.0 (compatible; MSIE ' + ver + '.0; Windows NT ' + version_string.nt() + '; Trident/' +
            version_string.trident() + ((rnd(0, 1) === 1) ? '; .NET CLR ' + version_string.net() : '') + ')';
    },

    opera: function opera(arch) {
        //http://www.opera.com/docs/history/
        var presto_ver = ' Presto/' + version_string.presto() + ' Version/' + version_string.presto2() + ')',
            os_ver = (arch === 'win') ? '(Windows NT ' + version_string.nt() + '; U; ' + randomLang() + presto_ver
            : (arch === 'lin') ? '(X11; Linux ' + randomProc(arch) + '; U; ' + randomLang() + presto_ver
            : '(Macintosh; Intel Mac OS X ' + version_string.osx() + ' U; ' + randomLang() + ' Presto/' +
            version_string.presto() + ' Version/' + version_string.presto2() + ')';

        return 'Opera/' + rnd(9, 14) + '.' + rnd(0, 99) + ' ' + os_ver;
    },

    safari: function safari(arch) {
        var safari = version_string.safari(),
            ver = rnd(4, 7) + '.' + rnd(0,1) + '.' + rnd(0,10),
            os_ver = (arch === 'mac') ? '(Macintosh; ' + randomProc('mac') + ' Mac OS X '+ version_string.osx('_') + ' rv:' + rnd(2, 6) + '.0; '+ randomLang() + ') '
            : '(Windows; U; Windows NT ' + version_string.nt() + ')';

        return 'Mozilla/5.0 ' + os_ver + 'AppleWebKit/' + safari + ' (KHTML, like Gecko) Version/' + ver + ' Safari/' + safari;
    },

    chrome: function chrome(arch) {
        var safari = version_string.safari(),
            os_ver = (arch === 'mac') ? '(Macintosh; ' + randomProc('mac') + ' Mac OS X ' + version_string.osx('_') + ') '
            : (arch === 'win') ? '(Windows; U; Windows NT ' + version_string.nt() + ')'
            : '(X11; Linux ' + randomProc(arch);

        return 'Mozilla/5.0 ' + os_ver + ' AppleWebKit/' + safari + ' (KHTML, like Gecko) Chrome/' + version_string.chrome() + ' Safari/' + safari;
    }
};

exports.generate = function generate() {
    var random = randomBrowserAndOS();
    return browser[random[0]](random[1]);
};

},{}],88:[function(require,module,exports){
var ret = require('ret');
var DRange = require('discontinuous-range');
var types = ret.types;


/**
 * If code is alphabetic, converts to other case.
 * If not alphabetic, returns back code.
 *
 * @param {Number} code
 * @return {Number}
 */
function toOtherCase(code) {
  return code + (97 <= code && code <= 122 ? -32 :
                 65 <= code && code <= 90  ?  32 : 0);
}


/**
 * Randomly returns a true or false value.
 *
 * @return {Boolean}
 */
function randBool() {
  return !this.randInt(0, 1);
};


/**
 * Randomly selects and returns a value from the array.
 *
 * @param {Array.<Object>} arr
 * @return {Object}
 */
function randSelect(arr) {
  if (arr instanceof DRange) {
    return arr.index(this.randInt(0, arr.length - 1));
  }
  return arr[this.randInt(0, arr.length - 1)];
};


/**
 * Determines if a character code is alphabetic and decide
 * to switch case randomly.
 *
 * @param {Number} code
 * @param {Boolean} ignoreCase
 * @return {String}
 */
function char(code, ignoreCase) {
  code = ignoreCase && randBool.call(this) ? toOtherCase(code) : code;
  return String.fromCharCode(code);
};


/**
 * expands a token to a DiscontinuousRange of characters which has a 
 * length and an index function (for random selecting)
 *
 * @param {Object} token
 * @return {DiscontinuousRange}
 */
function expand(token) {
  if (token.type === ret.types.CHAR) return new DRange(token.value);
  if (token.type === ret.types.RANGE) return new DRange(token.from, token.to);
  if (token.type === ret.types.SET) {
    var drange = new DRange();
    for (var i = 0; i < token.set.length; i++) {
      drange.add(expand.call(this, token.set[i]));
    }
    if (token.not) {
      return this.defaultRange.clone().subtract(drange);
    } else {
      return drange;
    }
  }
  throw new Error('unexpandable token type: ' + token.type);
};


/**
 * @constructor
 * @param {RegExp|String} regexp
 * @param {String} m
 */
var RandExp = module.exports = function(regexp, m) {
  this.defaultRange = this.defaultRange.clone();
  if (regexp instanceof RegExp) {
    this.ignoreCase = regexp.ignoreCase;
    this.multiline = regexp.multiline;
    if (typeof regexp.max === 'number') {
      this.max = regexp.max;
    }
    regexp = regexp.source;

  } else if (typeof regexp === 'string') {
    this.ignoreCase = m && m.indexOf('i') !== -1;
    this.multiline = m && m.indexOf('m') !== -1;
  } else {
    throw new Error('Expected a regexp or string');
  }

  this.tokens = ret(regexp);
};


// When a repetitional token has its max set to Infinite,
// randexp won't actually generate a random amount between min and Infinite
// instead it will see Infinite as min + 100.
RandExp.prototype.max = 100;


// Generates the random string.
RandExp.prototype.gen = function() {
  return gen.call(this, this.tokens, []);
};


// Enables use of randexp with a shorter call.
RandExp.randexp = function(regexp, m) {
  var randexp;

  if (regexp._randexp === undefined) {
    randexp = new RandExp(regexp, m);
    regexp._randexp = randexp;
  } else {
    randexp = regexp._randexp;
    if (typeof regexp.max === 'number') {
      randexp.max = regexp.max;
    }
    if (regexp.defaultRange instanceof DRange) {
      randexp.defaultRange = regexp.defaultRange;
    }
    if (typeof regexp.randInt === 'function') {
      randexp.randInt = regexp.randInt;
    }
  }

  return randexp.gen();
};


// This enables sugary /regexp/.gen syntax.
RandExp.sugar = function() {
  /* jshint freeze:false */
  RegExp.prototype.gen = function() {
    return RandExp.randexp(this);
  };
};

// This allows expanding to include additional characters
// for instance: RandExp.defaultRange.add(0, 65535);
RandExp.prototype.defaultRange = new DRange(32, 126);






/**
 * Randomly generates and returns a number between a and b (inclusive).
 *
 * @param {Number} a
 * @param {Number} b
 * @return {Number}
 */
RandExp.prototype.randInt = function(a, b) {
  return a + Math.floor(Math.random() * (1 + b - a));
};


/**
 * Generate random string modeled after given tokens.
 *
 * @param {Object} token
 * @param {Array.<String>} groups
 * @return {String}
 */
function gen(token, groups) {
  var stack, str, n, i, l;

  switch (token.type) {


    case types.ROOT:
    case types.GROUP:
      if (token.notFollowedBy) { return ''; }

      // Insert placeholder until group string is generated.
      if (token.remember && token.groupNumber === undefined) {
        token.groupNumber = groups.push(null) - 1;
      }

      stack = token.options ? randSelect.call(this, token.options) : token.stack;

      str = '';
      for (i = 0, l = stack.length; i < l; i++) {
        str += gen.call(this, stack[i], groups);
      }

      if (token.remember) {
        groups[token.groupNumber] = str;
      }
      return str;


    case types.POSITION:
      // Do nothing for now.
      return '';


    case types.SET:

      var expanded_set = expand.call(this, token);
      if (!expanded_set.length) return '';
      return char.call(this, randSelect.call(this, expanded_set), this.ignoreCase);

    case types.RANGE:
      return char.call(this, this.randInt(token.from, token.to), this.ignoreCase);


    case types.REPETITION:
      // Randomly generate number between min and max.
      n = this.randInt(token.min,
              token.max === Infinity ? token.min + this.max : token.max);

      str = '';
      for (i = 0; i < n; i++) {
        str += gen.call(this, token.value, groups);
      }

      return str;


    case types.REFERENCE:
      return groups[token.value - 1] || '';


    case types.CHAR:
      return char.call(this, token.value, this.ignoreCase);
  }
}



},{"discontinuous-range":89,"ret":90}],89:[function(require,module,exports){
//protected helper class
function _SubRange(low, high) {
    this.low = low;
    this.high = high;
    this.length = 1 + high - low;
}

_SubRange.prototype.overlaps = function (range) {
    return !(this.high < range.low || this.low > range.high);
};

_SubRange.prototype.touches = function (range) {
    return !(this.high + 1 < range.low || this.low - 1 > range.high);
};

//returns inclusive combination of _SubRanges as a _SubRange
_SubRange.prototype.add = function (range) {
    return this.touches(range) && new _SubRange(Math.min(this.low, range.low), Math.max(this.high, range.high));
};

//returns subtraction of _SubRanges as an array of _SubRanges (there's a case where subtraction divides it in 2)
_SubRange.prototype.subtract = function (range) {
    if (!this.overlaps(range)) return false;
    if (range.low <= this.low && range.high >= this.high) return [];
    if (range.low > this.low && range.high < this.high) return [new _SubRange(this.low, range.low - 1), new _SubRange(range.high + 1, this.high)];
    if (range.low <= this.low) return [new _SubRange(range.high + 1, this.high)];
    return [new _SubRange(this.low, range.low - 1)];
};

_SubRange.prototype.toString = function () {
    if (this.low == this.high) return this.low.toString();
    return this.low + '-' + this.high;
};

_SubRange.prototype.clone = function () {
    return new _SubRange(this.low, this.high);
};




function DiscontinuousRange(a, b) {
    if (this instanceof DiscontinuousRange) {
        this.ranges = [];
        this.length = 0;
        if (a !== undefined) this.add(a, b);
    } else {
        return new DiscontinuousRange(a, b);
    }
}

function _update_length(self) {
    self.length = self.ranges.reduce(function (previous, range) {return previous + range.length}, 0);
}

DiscontinuousRange.prototype.add = function (a, b) {
    var self = this;
    function _add(subrange) {
        var new_ranges = [];
        var i = 0;
        while (i < self.ranges.length && !subrange.touches(self.ranges[i])) {
            new_ranges.push(self.ranges[i].clone());
            i++;
        }
        while (i < self.ranges.length && subrange.touches(self.ranges[i])) {
            subrange = subrange.add(self.ranges[i]);
            i++;
        }
        new_ranges.push(subrange);
        while (i < self.ranges.length) {
            new_ranges.push(self.ranges[i].clone());
            i++;
        }
        self.ranges = new_ranges;
        _update_length(self);
    }

    if (a instanceof DiscontinuousRange) {
        a.ranges.forEach(_add);
    } else {
        if (a instanceof _SubRange) {
            _add(a);
        } else {
            if (b === undefined) b = a;
            _add(new _SubRange(a, b));
        }
    }
    return this;
};

DiscontinuousRange.prototype.subtract = function (a, b) {
    var self = this;
    function _subtract(subrange) {
        var new_ranges = [];
        var i = 0;
        while (i < self.ranges.length && !subrange.overlaps(self.ranges[i])) {
            new_ranges.push(self.ranges[i].clone());
            i++;
        }
        while (i < self.ranges.length && subrange.overlaps(self.ranges[i])) {
            new_ranges = new_ranges.concat(self.ranges[i].subtract(subrange));
            i++;
        }
        while (i < self.ranges.length) {
            new_ranges.push(self.ranges[i].clone());
            i++;
        }
        self.ranges = new_ranges;
        _update_length(self);
    }
    if (a instanceof DiscontinuousRange) {
        a.ranges.forEach(_subtract);
    } else {
        if (a instanceof _SubRange) {
            _subtract(a);
        } else {
            if (b === undefined) b = a;
            _subtract(new _SubRange(a, b));
        }
    }
    return this;
};


DiscontinuousRange.prototype.index = function (index) {
    var i = 0;
    while (i < this.ranges.length && this.ranges[i].length <= index) {
        index -= this.ranges[i].length;
        i++;
    }
    if (i >= this.ranges.length) return null;
    return this.ranges[i].low + index;
};


DiscontinuousRange.prototype.toString = function () {
    return '[ ' + this.ranges.join(', ') + ' ]'
};

DiscontinuousRange.prototype.clone = function () {
    return new DiscontinuousRange(this);
};

module.exports = DiscontinuousRange;

},{}],90:[function(require,module,exports){
var util      = require('./util');
var types     = require('./types');
var sets      = require('./sets');
var positions = require('./positions');


module.exports = function(regexpStr) {
  var i = 0, l, c,
      start = { type: types.ROOT, stack: []},

      // Keep track of last clause/group and stack.
      lastGroup = start,
      last = start.stack,
      groupStack = [];


  var repeatErr = function(i) {
    util.error(regexpStr, 'Nothing to repeat at column ' + (i - 1));
  };

  // Decode a few escaped characters.
  var str = util.strToChars(regexpStr);
  l = str.length;

  // Iterate through each character in string.
  while (i < l) {
    c = str[i++];

    switch (c) {
      // Handle escaped characters, inclues a few sets.
      case '\\':
        c = str[i++];

        switch (c) {
          case 'b':
            last.push(positions.wordBoundary());
            break;

          case 'B':
            last.push(positions.nonWordBoundary());
            break;

          case 'w':
            last.push(sets.words());
            break;

          case 'W':
            last.push(sets.notWords());
            break;

          case 'd':
            last.push(sets.ints());
            break;

          case 'D':
            last.push(sets.notInts());
            break;

          case 's':
            last.push(sets.whitespace());
            break;

          case 'S':
            last.push(sets.notWhitespace());
            break;

          default:
            // Check if c is integer.
            // In which case it's a reference.
            if (/\d/.test(c)) {
              last.push({ type: types.REFERENCE, value: parseInt(c, 10) });

            // Escaped character.
            } else {
              last.push({ type: types.CHAR, value: c.charCodeAt(0) });
            }
        }

        break;


      // Positionals.
      case '^':
          last.push(positions.begin());
        break;

      case '$':
          last.push(positions.end());
        break;


      // Handle custom sets.
      case '[':
        // Check if this class is 'anti' i.e. [^abc].
        var not;
        if (str[i] === '^') {
          not = true;
          i++;
        } else {
          not = false;
        }

        // Get all the characters in class.
        var classTokens = util.tokenizeClass(str.slice(i), regexpStr);

        // Increase index by length of class.
        i += classTokens[1];
        last.push({
            type: types.SET
          , set: classTokens[0]
          , not: not
        });

        break;


      // Class of any character except \n.
      case '.':
        last.push(sets.anyChar());
        break;


      // Push group onto stack.
      case '(':
        // Create group.
        var group = {
            type: types.GROUP
          , stack: []
          , remember: true
        };

        c = str[i];

        // if if this is a special kind of group.
        if (c === '?') {
          c = str[i + 1];
          i += 2;

          // Match if followed by.
          if (c === '=') {
            group.followedBy = true;

          // Match if not followed by.
          } else if (c === '!') {
            group.notFollowedBy = true;

          } else if (c !== ':') {
            util.error(regexpStr,
                'Invalid group, character \'' + c + '\' after \'?\' at column ' +
                (i - 1));
          }

          group.remember = false;
        }

        // Insert subgroup into current group stack.
        last.push(group);

        // Remember the current group for when the group closes.
        groupStack.push(lastGroup);

        // Make this new group the current group.
        lastGroup = group;
        last = group.stack;
        break;


      // Pop group out of stack.
      case ')':
        if (groupStack.length === 0) {
          util.error(regexpStr, 'Unmatched ) at column ' + (i - 1));
        }
        lastGroup = groupStack.pop();

        // Check if this group has a PIPE.
        // To get back the correct last stack.
        last = lastGroup.options ? lastGroup.options[lastGroup.options.length - 1] : lastGroup.stack;
        break;


      // Use pipe character to give more choices.
      case '|':
        // Create array where options are if this is the first PIPE
        // in this clause.
        if (!lastGroup.options) {
          lastGroup.options = [lastGroup.stack];
          delete lastGroup.stack;
        }

        // Create a new stack and add to options for rest of clause.
        var stack = [];
        lastGroup.options.push(stack);
        last = stack;
        break;


      // Repetition.
      // For every repetition, remove last element from last stack
      // then insert back a RANGE object.
      // This design is chosen because there could be more than
      // one repetition symbols in a regex i.e. `a?+{2,3}`.
      case '{':
        var rs = /^(\d+)(,(\d+)?)?\}/.exec(str.slice(i)), min, max;
        if (rs !== null) {
          min = parseInt(rs[1], 10);
          max = rs[2] ? rs[3] ? parseInt(rs[3], 10) : Infinity : min;
          i += rs[0].length;

          last.push({
              type: types.REPETITION
            , min: min
            , max: max
            , value: last.pop()
          });
        } else {
          last.push({
              type: types.CHAR
            , value: 123
          });
        }
        break;

      case '?':
        if (last.length === 0) {
          repeatErr(i);
        }
        last.push({
            type: types.REPETITION
          , min: 0
          , max: 1
          , value: last.pop()
        });
        break;

      case '+':
        if (last.length === 0) {
          repeatErr(i);
        }
        last.push({
            type: types.REPETITION
          , min: 1
          , max: Infinity
          , value: last.pop()
        });
        break;

      case '*':
        if (last.length === 0) {
          repeatErr(i);
        }
        last.push({
            type: types.REPETITION
          , min: 0
          , max: Infinity
          , value: last.pop()
        });
        break;


      // Default is a character that is not `\[](){}?+*^$`.
      default:
        last.push({
            type: types.CHAR
          , value: c.charCodeAt(0)
        });
    }

  }

  // Check if any groups have not been closed.
  if (groupStack.length !== 0) {
    util.error(regexpStr, 'Unterminated group');
  }

  return start;
};

module.exports.types = types;

},{"./positions":91,"./sets":92,"./types":93,"./util":94}],91:[function(require,module,exports){
var types = require('./types');

exports.wordBoundary = function() {
  return { type: types.POSITION, value: 'b' };
};

exports.nonWordBoundary = function() {
  return { type: types.POSITION, value: 'B' };
};

exports.begin = function() {
  return { type: types.POSITION, value: '^' };
};

exports.end = function() {
  return { type: types.POSITION, value: '$' };
};

},{"./types":93}],92:[function(require,module,exports){
var types = require('./types');

var INTS = function() {
 return [{ type: types.RANGE , from: 48, to: 57 }];
};

var WORDS = function() {
 return [
      { type: types.CHAR, value: 95 }
    , { type: types.RANGE, from: 97, to: 122 }
    , { type: types.RANGE, from: 65, to: 90 }
  ].concat(INTS());
};

var WHITESPACE = function() {
 return [
      { type: types.CHAR, value: 9 }
    , { type: types.CHAR, value: 10 }
    , { type: types.CHAR, value: 11 }
    , { type: types.CHAR, value: 12 }
    , { type: types.CHAR, value: 13 }
    , { type: types.CHAR, value: 32 }
    , { type: types.CHAR, value: 160 }
    , { type: types.CHAR, value: 5760 }
    , { type: types.CHAR, value: 6158 }
    , { type: types.CHAR, value: 8192 }
    , { type: types.CHAR, value: 8193 }
    , { type: types.CHAR, value: 8194 }
    , { type: types.CHAR, value: 8195 }
    , { type: types.CHAR, value: 8196 }
    , { type: types.CHAR, value: 8197 }
    , { type: types.CHAR, value: 8198 }
    , { type: types.CHAR, value: 8199 }
    , { type: types.CHAR, value: 8200 }
    , { type: types.CHAR, value: 8201 }
    , { type: types.CHAR, value: 8202 }
    , { type: types.CHAR, value: 8232 }
    , { type: types.CHAR, value: 8233 }
    , { type: types.CHAR, value: 8239 }
    , { type: types.CHAR, value: 8287 }
    , { type: types.CHAR, value: 12288 }
    , { type: types.CHAR, value: 65279 }
  ];
};

var NOTANYCHAR = function() {
 return [
      { type: types.CHAR, value: 10 }
    , { type: types.CHAR, value: 13 }
    , { type: types.CHAR, value: 8232 }
    , { type: types.CHAR, value: 8233 }
  ];
};

// predefined class objects
exports.words = function() {
  return { type: types.SET, set: WORDS(), not: false };
};

exports.notWords = function() {
  return { type: types.SET, set: WORDS(), not: true };
};

exports.ints = function() {
  return { type: types.SET, set: INTS(), not: false };
};

exports.notInts = function() {
  return { type: types.SET, set: INTS(), not: true };
};

exports.whitespace = function() {
  return { type: types.SET, set: WHITESPACE(), not: false };
};

exports.notWhitespace = function() {
  return { type: types.SET, set: WHITESPACE(), not: true };
};

exports.anyChar = function() {
  return { type: types.SET, set: NOTANYCHAR(), not: true };
};

},{"./types":93}],93:[function(require,module,exports){
module.exports = {
    ROOT       : 0
  , GROUP      : 1
  , POSITION   : 2
  , SET        : 3
  , RANGE      : 4
  , REPETITION : 5
  , REFERENCE  : 6
  , CHAR       : 7
};

},{}],94:[function(require,module,exports){
var types = require('./types');
var sets  = require('./sets');


// All of these are private and only used by randexp.
// It's assumed that they will always be called with the correct input.

var CTRL = '@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^ ?';
var SLSH = { '0': 0, 't': 9, 'n': 10, 'v': 11, 'f': 12, 'r': 13 };

/**
 * Finds character representations in str and convert all to
 * their respective characters
 *
 * @param {String} str
 * @return {String}
 */
exports.strToChars = function(str) {
  var chars_regex = /(\[\\b\])|\\(?:u([A-F0-9]{4})|x([A-F0-9]{2})|(0?[0-7]{2})|c([@A-Z\[\\\]\^?])|([0tnvfr]))/g;
  str = str.replace(chars_regex, function(s, b, a16, b16, c8, dctrl, eslsh) {
    var code = b     ? 8 :
               a16   ? parseInt(a16, 16) :
               b16   ? parseInt(b16, 16) :
               c8    ? parseInt(c8,   8) :
               dctrl ? CTRL.indexOf(dctrl) :
               eslsh ? SLSH[eslsh] : undefined;
    
    var c = String.fromCharCode(code);

    // Escape special regex characters.
    if (/[\[\]{}\^$.|?*+()]/.test(c)) {
      c = '\\' + c;
    }

    return c;
  });

  return str;
};


/**
 * turns class into tokens
 * reads str until it encounters a ] not preceeded by a \
 *
 * @param {String} str
 * @param {String} regexpStr
 * @return {Array.<Array.<Object>, Number>}
 */
exports.tokenizeClass = function(str, regexpStr) {
  var tokens = []
    , regexp = /\\(?:(w)|(d)|(s)|(W)|(D)|(S))|((?:(?:\\)(.)|([^\]\\]))-(?:\\)?([^\]]))|(\])|(?:\\)?(.)/g
    , rs, c
    ;


  while ((rs = regexp.exec(str)) != null) {
    if (rs[1]) {
      tokens.push(sets.words());

    } else if (rs[2]) {
      tokens.push(sets.ints());

    } else if (rs[3]) {
      tokens.push(sets.whitespace());

    } else if (rs[4]) {
      tokens.push(sets.notWords());

    } else if (rs[5]) {
      tokens.push(sets.notInts());

    } else if (rs[6]) {
      tokens.push(sets.notWhitespace());

    } else if (rs[7]) {
      tokens.push({
          type: types.RANGE
        , from: (rs[8] || rs[9]).charCodeAt(0)
        ,   to: rs[10].charCodeAt(0)
      });

    } else if (c = rs[12]) {
      tokens.push({
          type: types.CHAR
        , value: c.charCodeAt(0)
      });

    } else {
      return [tokens, regexp.lastIndex];
    }
  }

  exports.error(regexpStr, 'Unterminated character class');
};


/**
 * Shortcut to throw errors.
 *
 * @param {String} regexp
 * @param {String} msg
 */
exports.error = function(regexp, msg) {
  throw new SyntaxError('Invalid regular expression: /' + regexp + '/: ' + msg);
};

},{"./sets":92,"./types":93}],95:[function(require,module,exports){
(function (global){
/*! Native Promise Only
    v0.7.8-a (c) Kyle Simpson
    MIT License: http://getify.mit-license.org
*/
!function(t,n,e){n[t]=n[t]||e(),"undefined"!=typeof module&&module.exports?module.exports=n[t]:"function"==typeof define&&define.amd&&define(function(){return n[t]})}("Promise","undefined"!=typeof global?global:this,function(){"use strict";function t(t,n){l.add(t,n),h||(h=y(l.drain))}function n(t){var n,e=typeof t;return null==t||"object"!=e&&"function"!=e||(n=t.then),"function"==typeof n?n:!1}function e(){for(var t=0;t<this.chain.length;t++)o(this,1===this.state?this.chain[t].success:this.chain[t].failure,this.chain[t]);this.chain.length=0}function o(t,e,o){var r,i;try{e===!1?o.reject(t.msg):(r=e===!0?t.msg:e.call(void 0,t.msg),r===o.promise?o.reject(TypeError("Promise-chain cycle")):(i=n(r))?i.call(r,o.resolve,o.reject):o.resolve(r))}catch(c){o.reject(c)}}function r(o){var c,u,a=this;if(!a.triggered){a.triggered=!0,a.def&&(a=a.def);try{(c=n(o))?(u=new f(a),c.call(o,function(){r.apply(u,arguments)},function(){i.apply(u,arguments)})):(a.msg=o,a.state=1,a.chain.length>0&&t(e,a))}catch(s){i.call(u||new f(a),s)}}}function i(n){var o=this;o.triggered||(o.triggered=!0,o.def&&(o=o.def),o.msg=n,o.state=2,o.chain.length>0&&t(e,o))}function c(t,n,e,o){for(var r=0;r<n.length;r++)!function(r){t.resolve(n[r]).then(function(t){e(r,t)},o)}(r)}function f(t){this.def=t,this.triggered=!1}function u(t){this.promise=t,this.state=0,this.triggered=!1,this.chain=[],this.msg=void 0}function a(n){if("function"!=typeof n)throw TypeError("Not a function");if(0!==this.__NPO__)throw TypeError("Not a promise");this.__NPO__=1;var o=new u(this);this.then=function(n,r){var i={success:"function"==typeof n?n:!0,failure:"function"==typeof r?r:!1};return i.promise=new this.constructor(function(t,n){if("function"!=typeof t||"function"!=typeof n)throw TypeError("Not a function");i.resolve=t,i.reject=n}),o.chain.push(i),0!==o.state&&t(e,o),i.promise},this["catch"]=function(t){return this.then(void 0,t)};try{n.call(void 0,function(t){r.call(o,t)},function(t){i.call(o,t)})}catch(c){i.call(o,c)}}var s,h,l,p=Object.prototype.toString,y="undefined"!=typeof setImmediate?function(t){return setImmediate(t)}:setTimeout;try{Object.defineProperty({},"x",{}),s=function(t,n,e,o){return Object.defineProperty(t,n,{value:e,writable:!0,configurable:o!==!1})}}catch(d){s=function(t,n,e){return t[n]=e,t}}l=function(){function t(t,n){this.fn=t,this.self=n,this.next=void 0}var n,e,o;return{add:function(r,i){o=new t(r,i),e?e.next=o:n=o,e=o,o=void 0},drain:function(){var t=n;for(n=e=h=void 0;t;)t.fn.call(t.self),t=t.next}}}();var g=s({},"constructor",a,!1);return a.prototype=g,s(g,"__NPO__",0,!1),s(a,"resolve",function(t){var n=this;return t&&"object"==typeof t&&1===t.__NPO__?t:new n(function(n,e){if("function"!=typeof n||"function"!=typeof e)throw TypeError("Not a function");n(t)})}),s(a,"reject",function(t){return new this(function(n,e){if("function"!=typeof n||"function"!=typeof e)throw TypeError("Not a function");e(t)})}),s(a,"all",function(t){var n=this;return"[object Array]"!=p.call(t)?n.reject(TypeError("Not an array")):0===t.length?n.resolve([]):new n(function(e,o){if("function"!=typeof e||"function"!=typeof o)throw TypeError("Not a function");var r=t.length,i=Array(r),f=0;c(n,t,function(t,n){i[t]=n,++f===r&&e(i)},o)})}),s(a,"race",function(t){var n=this;return"[object Array]"!=p.call(t)?n.reject(TypeError("Not an array")):new n(function(e,o){if("function"!=typeof e||"function"!=typeof o)throw TypeError("Not a function");c(n,t,function(t,n){e(n)},o)})}),a});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],96:[function(require,module,exports){
/*!
 * Copyright (c) 2015 Chris O'Hara <cohara87@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

(function (name, definition) {
    if (typeof exports !== 'undefined' && typeof module !== 'undefined') {
        module.exports = definition();
    } else if (typeof define === 'function' && typeof define.amd === 'object') {
        define(definition);
    } else {
        this[name] = definition();
    }
})('validator', function (validator) {

    'use strict';

    validator = { version: '3.40.1' };

    var emailUser = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e])|(\\[\x01-\x09\x0b\x0c\x0d-\x7f])))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))$/i;

    var emailUserUtf8 = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))$/i;

    var displayName = /^(?:[a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~\.]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(?:[a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~\.]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|\s)*<(.+)>$/i;

    var creditCard = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/;

    var isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/;

    var isbn10Maybe = /^(?:[0-9]{9}X|[0-9]{10})$/
      , isbn13Maybe = /^(?:[0-9]{13})$/;

    var ipv4Maybe = /^(\d+)\.(\d+)\.(\d+)\.(\d+)$/
      , ipv6Block = /^[0-9A-F]{1,4}$/i;

    var uuid = {
        '3': /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i
      , '4': /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i
      , '5': /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i
      , all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i
    };

    var alpha = /^[A-Z]+$/i
      , alphanumeric = /^[0-9A-Z]+$/i
      , numeric = /^[-+]?[0-9]+$/
      , int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/
      , float = /^(?:[-+]?(?:[0-9]+))?(?:\.[0-9]*)?(?:[eE][\+\-]?(?:[0-9]+))?$/
      , hexadecimal = /^[0-9A-F]+$/i
      , hexcolor = /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i;

    var ascii = /^[\x00-\x7F]+$/
      , multibyte = /[^\x00-\x7F]/
      , fullWidth = /[^\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/
      , halfWidth = /[\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;

    var surrogatePair = /[\uD800-\uDBFF][\uDC00-\uDFFF]/;

    var base64 = /^(?:[A-Z0-9+\/]{4})*(?:[A-Z0-9+\/]{2}==|[A-Z0-9+\/]{3}=|[A-Z0-9+\/]{4})$/i;

    var phones = {
      'zh-CN': /^(\+?0?86\-?)?1[345789]\d{9}$/,
      'en-ZA': /^(\+?27|0)\d{9}$/,
      'en-AU': /^(\+?61|0)4\d{8}$/,
      'en-HK': /^(\+?852\-?)?[569]\d{3}\-?\d{4}$/,
      'fr-FR': /^(\+?33|0)[67]\d{8}$/,
      'pt-PT': /^(\+351)?9[1236]\d{7}$/,
      'el-GR': /^(\+30)?((2\d{9})|(69\d{8}))$/,
      'en-GB': /^(\+?44|0)7\d{9}$/,
      'en-US': /^(\+?1)?[2-9]\d{2}[2-9](?!11)\d{6}$/,
      'en-ZM': /^(\+26)?09[567]\d{7}$/
    };

    validator.extend = function (name, fn) {
        validator[name] = function () {
            var args = Array.prototype.slice.call(arguments);
            args[0] = validator.toString(args[0]);
            return fn.apply(validator, args);
        };
    };

    //Right before exporting the validator object, pass each of the builtins
    //through extend() so that their first argument is coerced to a string
    validator.init = function () {
        for (var name in validator) {
            if (typeof validator[name] !== 'function' || name === 'toString' ||
                    name === 'toDate' || name === 'extend' || name === 'init') {
                continue;
            }
            validator.extend(name, validator[name]);
        }
    };

    validator.toString = function (input) {
        if (typeof input === 'object' && input !== null && input.toString) {
            input = input.toString();
        } else if (input === null || typeof input === 'undefined' || (isNaN(input) && !input.length)) {
            input = '';
        } else if (typeof input !== 'string') {
            input += '';
        }
        return input;
    };

    validator.toDate = function (date) {
        if (Object.prototype.toString.call(date) === '[object Date]') {
            return date;
        }
        date = Date.parse(date);
        return !isNaN(date) ? new Date(date) : null;
    };

    validator.toFloat = function (str) {
        return parseFloat(str);
    };

    validator.toInt = function (str, radix) {
        return parseInt(str, radix || 10);
    };

    validator.toBoolean = function (str, strict) {
        if (strict) {
            return str === '1' || str === 'true';
        }
        return str !== '0' && str !== 'false' && str !== '';
    };

    validator.equals = function (str, comparison) {
        return str === validator.toString(comparison);
    };

    validator.contains = function (str, elem) {
        return str.indexOf(validator.toString(elem)) >= 0;
    };

    validator.matches = function (str, pattern, modifiers) {
        if (Object.prototype.toString.call(pattern) !== '[object RegExp]') {
            pattern = new RegExp(pattern, modifiers);
        }
        return pattern.test(str);
    };

    var default_email_options = {
        allow_display_name: false,
        allow_utf8_local_part: true,
        require_tld: true
    };

    validator.isEmail = function (str, options) {
        options = merge(options, default_email_options);

        if (options.allow_display_name) {
            var display_email = str.match(displayName);
            if (display_email) {
                str = display_email[1];
            }
        } else if (/\s/.test(str)) {
            return false;
        }

        var parts = str.split('@')
          , domain = parts.pop()
          , user = parts.join('@');

        if (!validator.isFQDN(domain, {require_tld: options.require_tld})) {
            return false;
        }

        return options.allow_utf8_local_part ?
            emailUserUtf8.test(user) :
            emailUser.test(user);
    };

    var default_url_options = {
        protocols: [ 'http', 'https', 'ftp' ]
      , require_tld: true
      , require_protocol: false
      , allow_underscores: false
      , allow_trailing_dot: false
      , allow_protocol_relative_urls: false
    };

    validator.isURL = function (url, options) {
        if (!url || url.length >= 2083 || /\s/.test(url)) {
            return false;
        }
        if (url.indexOf('mailto:') === 0) {
            return false;
        }
        options = merge(options, default_url_options);
        var protocol, auth, host, hostname, port,
            port_str, split;
        split = url.split('://');
        if (split.length > 1) {
            protocol = split.shift();
            if (options.protocols.indexOf(protocol) === -1) {
                return false;
            }
        } else if (options.require_protocol) {
            return false;
        }  else if (options.allow_protocol_relative_urls && url.substr(0, 2) === '//') {
            split[0] = url.substr(2);
        }
        url = split.join('://');
        split = url.split('#');
        url = split.shift();

        split = url.split('?');
        url = split.shift();

        split = url.split('/');
        url = split.shift();
        split = url.split('@');
        if (split.length > 1) {
            auth = split.shift();
            if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {
                return false;
            }
        }
        hostname = split.join('@');
        split = hostname.split(':');
        host = split.shift();
        if (split.length) {
            port_str = split.join(':');
            port = parseInt(port_str, 10);
            if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
                return false;
            }
        }
        if (!validator.isIP(host) && !validator.isFQDN(host, options) &&
                host !== 'localhost') {
            return false;
        }
        if (options.host_whitelist &&
                options.host_whitelist.indexOf(host) === -1) {
            return false;
        }
        if (options.host_blacklist &&
                options.host_blacklist.indexOf(host) !== -1) {
            return false;
        }
        return true;
    };

    validator.isIP = function (str, version) {
        version = validator.toString(version);
        if (!version) {
            return validator.isIP(str, 4) || validator.isIP(str, 6);
        } else if (version === '4') {
            if (!ipv4Maybe.test(str)) {
                return false;
            }
            var parts = str.split('.').sort(function (a, b) {
                return a - b;
            });
            return parts[3] <= 255;
        } else if (version === '6') {
            var blocks = str.split(':');
            var foundOmissionBlock = false; // marker to indicate ::
            
            // At least some OS accept the last 32 bits of an IPv6 address
            // (i.e. 2 of the blocks) in IPv4 notation, and RFC 3493 says
            // that '::ffff:a.b.c.d' is valid for IPv4-mapped IPv6 addresses,
            // and '::a.b.c.d' is deprecated, but also valid.
            var foundIPv4TransitionBlock = validator.isIP(blocks[blocks.length - 1], 4);
            var expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;

            if (blocks.length > expectedNumberOfBlocks)
                return false;

            // initial or final ::
            if (str === '::') {
                return true;
            } else if (str.substr(0, 2) === '::') {
                blocks.shift();
                blocks.shift();
                foundOmissionBlock = true;
            } else if (str.substr(str.length - 2) === '::') {
                blocks.pop();
                blocks.pop();
                foundOmissionBlock = true;
            }

            for (var i = 0; i < blocks.length; ++i) {
                // test for a :: which can not be at the string start/end
                // since those cases have been handled above
                if (blocks[i] === '' && i > 0 && i < blocks.length -1) {
                    if (foundOmissionBlock)
                        return false; // multiple :: in address
                    foundOmissionBlock = true;
                } else if (foundIPv4TransitionBlock && i == blocks.length - 1) {
                    // it has been checked before that the last
                    // block is a valid IPv4 address
                } else if (!ipv6Block.test(blocks[i])) {
                    return false;
                }
            }

            if (foundOmissionBlock) {
                return blocks.length >= 1;
            } else {
                return blocks.length === expectedNumberOfBlocks;
            }
        }
        return false;
    };

    var default_fqdn_options = {
        require_tld: true
      , allow_underscores: false
      , allow_trailing_dot: false
    };

    validator.isFQDN = function (str, options) {
        options = merge(options, default_fqdn_options);

        /* Remove the optional trailing dot before checking validity */
        if (options.allow_trailing_dot && str[str.length - 1] === '.') {
            str = str.substring(0, str.length - 1);
        }
        var parts = str.split('.');
        if (options.require_tld) {
            var tld = parts.pop();
            if (!parts.length || !/^([a-z\u00a1-\uffff]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
                return false;
            }
        }
        for (var part, i = 0; i < parts.length; i++) {
            part = parts[i];
            if (options.allow_underscores) {
                if (part.indexOf('__') >= 0) {
                    return false;
                }
                part = part.replace(/_/g, '');
            }
            if (!/^[a-z\u00a1-\uffff0-9-]+$/i.test(part)) {
                return false;
            }
            if (part[0] === '-' || part[part.length - 1] === '-' ||
                    part.indexOf('---') >= 0) {
                return false;
            }
        }
        return true;
    };

    validator.isBoolean = function(str) {
        return (['true', 'false', '1', '0'].indexOf(str) >= 0);
    };

    validator.isAlpha = function (str) {
        return alpha.test(str);
    };

    validator.isAlphanumeric = function (str) {
        return alphanumeric.test(str);
    };

    validator.isNumeric = function (str) {
        return numeric.test(str);
    };

    validator.isHexadecimal = function (str) {
        return hexadecimal.test(str);
    };

    validator.isHexColor = function (str) {
        return hexcolor.test(str);
    };

    validator.isLowercase = function (str) {
        return str === str.toLowerCase();
    };

    validator.isUppercase = function (str) {
        return str === str.toUpperCase();
    };

    validator.isInt = function (str, options) {
        options = options || {};
        return int.test(str) && (!options.hasOwnProperty('min') || str >= options.min) && (!options.hasOwnProperty('max') || str <= options.max);
    };

    validator.isFloat = function (str, options) {
        options = options || {};
        return str !== '' && float.test(str) && (!options.hasOwnProperty('min') || str >= options.min) && (!options.hasOwnProperty('max') || str <= options.max);
    };

    validator.isDivisibleBy = function (str, num) {
        return validator.toFloat(str) % validator.toInt(num) === 0;
    };

    validator.isNull = function (str) {
        return str.length === 0;
    };

    validator.isLength = function (str, min, max) {
        var surrogatePairs = str.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g) || [];
        var len = str.length - surrogatePairs.length;
        return len >= min && (typeof max === 'undefined' || len <= max);
    };

    validator.isByteLength = function (str, min, max) {
        return str.length >= min && (typeof max === 'undefined' || str.length <= max);
    };

    validator.isUUID = function (str, version) {
        var pattern = uuid[version ? version : 'all'];
        return pattern && pattern.test(str);
    };

    validator.isDate = function (str) {
        return !isNaN(Date.parse(str));
    };

    validator.isAfter = function (str, date) {
        var comparison = validator.toDate(date || new Date())
          , original = validator.toDate(str);
        return !!(original && comparison && original > comparison);
    };

    validator.isBefore = function (str, date) {
        var comparison = validator.toDate(date || new Date())
          , original = validator.toDate(str);
        return original && comparison && original < comparison;
    };

    validator.isIn = function (str, options) {
        var i;
        if (Object.prototype.toString.call(options) === '[object Array]') {
            var array = [];
            for (i in options) {
                array[i] = validator.toString(options[i]);
            }
            return array.indexOf(str) >= 0;
        } else if (typeof options === 'object') {
            return options.hasOwnProperty(str);
        } else if (options && typeof options.indexOf === 'function') {
            return options.indexOf(str) >= 0;
        }
        return false;
    };

    validator.isCreditCard = function (str) {
        var sanitized = str.replace(/[^0-9]+/g, '');
        if (!creditCard.test(sanitized)) {
            return false;
        }
        var sum = 0, digit, tmpNum, shouldDouble;
        for (var i = sanitized.length - 1; i >= 0; i--) {
            digit = sanitized.substring(i, (i + 1));
            tmpNum = parseInt(digit, 10);
            if (shouldDouble) {
                tmpNum *= 2;
                if (tmpNum >= 10) {
                    sum += ((tmpNum % 10) + 1);
                } else {
                    sum += tmpNum;
                }
            } else {
                sum += tmpNum;
            }
            shouldDouble = !shouldDouble;
        }
        return !!((sum % 10) === 0 ? sanitized : false);
    };

    validator.isISIN = function (str) {
        if (!isin.test(str)) {
            return false;
        }

        var checksumStr = str.replace(/[A-Z]/g, function(character) {
            return parseInt(character, 36);
        });

        var sum = 0, digit, tmpNum, shouldDouble = true;
        for (var i = checksumStr.length - 2; i >= 0; i--) {
            digit = checksumStr.substring(i, (i + 1));
            tmpNum = parseInt(digit, 10);
            if (shouldDouble) {
                tmpNum *= 2;
                if (tmpNum >= 10) {
                    sum += tmpNum + 1;
                } else {
                    sum += tmpNum;
                }
            } else {
                sum += tmpNum;
            }
            shouldDouble = !shouldDouble;
        }

        return parseInt(str.substr(str.length - 1), 10) === (10000 - sum) % 10;
    };

    validator.isISBN = function (str, version) {
        version = validator.toString(version);
        if (!version) {
            return validator.isISBN(str, 10) || validator.isISBN(str, 13);
        }
        var sanitized = str.replace(/[\s-]+/g, '')
          , checksum = 0, i;
        if (version === '10') {
            if (!isbn10Maybe.test(sanitized)) {
                return false;
            }
            for (i = 0; i < 9; i++) {
                checksum += (i + 1) * sanitized.charAt(i);
            }
            if (sanitized.charAt(9) === 'X') {
                checksum += 10 * 10;
            } else {
                checksum += 10 * sanitized.charAt(9);
            }
            if ((checksum % 11) === 0) {
                return !!sanitized;
            }
        } else  if (version === '13') {
            if (!isbn13Maybe.test(sanitized)) {
                return false;
            }
            var factor = [ 1, 3 ];
            for (i = 0; i < 12; i++) {
                checksum += factor[i % 2] * sanitized.charAt(i);
            }
            if (sanitized.charAt(12) - ((10 - (checksum % 10)) % 10) === 0) {
                return !!sanitized;
            }
        }
        return false;
    };

    validator.isMobilePhone = function(str, locale) {
        if (locale in phones) {
            return phones[locale].test(str);
        }
        return false;
    };

    var default_currency_options = {
        symbol: '$'
      , require_symbol: false
      , allow_space_after_symbol: false
      , symbol_after_digits: false
      , allow_negatives: true
      , parens_for_negatives: false
      , negative_sign_before_digits: false
      , negative_sign_after_digits: false
      , allow_negative_sign_placeholder: false
      , thousands_separator: ','
      , decimal_separator: '.'
      , allow_space_after_digits: false
    };

    validator.isCurrency = function (str, options) {
        options = merge(options, default_currency_options);

        return currencyRegex(options).test(str);
    };

    validator.isJSON = function (str) {
        try {
            JSON.parse(str);
        } catch (e) {
            return false;
        }
        return true;
    };

    validator.isMultibyte = function (str) {
        return multibyte.test(str);
    };

    validator.isAscii = function (str) {
        return ascii.test(str);
    };

    validator.isFullWidth = function (str) {
        return fullWidth.test(str);
    };

    validator.isHalfWidth = function (str) {
        return halfWidth.test(str);
    };

    validator.isVariableWidth = function (str) {
        return fullWidth.test(str) && halfWidth.test(str);
    };

    validator.isSurrogatePair = function (str) {
        return surrogatePair.test(str);
    };

    validator.isBase64 = function (str) {
        return base64.test(str);
    };

    validator.isMongoId = function (str) {
        return validator.isHexadecimal(str) && str.length === 24;
    };

    validator.ltrim = function (str, chars) {
        var pattern = chars ? new RegExp('^[' + chars + ']+', 'g') : /^\s+/g;
        return str.replace(pattern, '');
    };

    validator.rtrim = function (str, chars) {
        var pattern = chars ? new RegExp('[' + chars + ']+$', 'g') : /\s+$/g;
        return str.replace(pattern, '');
    };

    validator.trim = function (str, chars) {
        var pattern = chars ? new RegExp('^[' + chars + ']+|[' + chars + ']+$', 'g') : /^\s+|\s+$/g;
        return str.replace(pattern, '');
    };

    validator.escape = function (str) {
        return (str.replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#x27;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/\//g, '&#x2F;')
            .replace(/\`/g, '&#96;'));
    };

    validator.stripLow = function (str, keep_new_lines) {
        var chars = keep_new_lines ? '\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F' : '\\x00-\\x1F\\x7F';
        return validator.blacklist(str, chars);
    };

    validator.whitelist = function (str, chars) {
        return str.replace(new RegExp('[^' + chars + ']+', 'g'), '');
    };

    validator.blacklist = function (str, chars) {
        return str.replace(new RegExp('[' + chars + ']+', 'g'), '');
    };

    var default_normalize_email_options = {
        lowercase: true
    };

    validator.normalizeEmail = function (email, options) {
        options = merge(options, default_normalize_email_options);
        if (!validator.isEmail(email)) {
            return false;
        }
        var parts = email.split('@', 2);
        parts[1] = parts[1].toLowerCase();
        if (parts[1] === 'gmail.com' || parts[1] === 'googlemail.com') {
            parts[0] = parts[0].toLowerCase().replace(/\./g, '');
            if (parts[0][0] === '+') {
                return false;
            }
            parts[0] = parts[0].split('+')[0];
            parts[1] = 'gmail.com';
        } else if (options.lowercase) {
            parts[0] = parts[0].toLowerCase();
        }
        return parts.join('@');
    };

    function merge(obj, defaults) {
        obj = obj || {};
        for (var key in defaults) {
            if (typeof obj[key] === 'undefined') {
                obj[key] = defaults[key];
            }
        }
        return obj;
    }

    function currencyRegex(options) {
        var symbol = '(\\' + options.symbol.replace(/\./g, '\\.') + ')' + (options.require_symbol ? '' : '?')
            , negative = '-?'
            , whole_dollar_amount_without_sep = '[1-9]\\d*'
            , whole_dollar_amount_with_sep = '[1-9]\\d{0,2}(\\' + options.thousands_separator + '\\d{3})*'
            , valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep]
            , whole_dollar_amount = '(' + valid_whole_dollar_amounts.join('|') + ')?'
            , decimal_amount = '(\\' + options.decimal_separator + '\\d{2})?';
        var pattern = whole_dollar_amount + decimal_amount;
        // default is negative sign before symbol, but there are two other options (besides parens)
        if (options.allow_negatives && !options.parens_for_negatives) {
            if (options.negative_sign_after_digits) {
                pattern += negative;
            }
            else if (options.negative_sign_before_digits) {
                pattern = negative + pattern;
            }
        }
        // South African Rand, for example, uses R 123 (space) and R-123 (no space)
        if (options.allow_negative_sign_placeholder) {
            pattern = '( (?!\\-))?' + pattern;
        }
        else if (options.allow_space_after_symbol) {
            pattern = ' ?' + pattern;
        }
        else if (options.allow_space_after_digits) {
            pattern += '( (?!$))?';
        }
        if (options.symbol_after_digits) {
            pattern += symbol;
        } else {
            pattern = symbol + pattern;
        }
        if (options.allow_negatives) {
            if (options.parens_for_negatives) {
                pattern = '(\\(' + pattern + '\\)|' + pattern + ')';
            }
            else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {
                pattern = negative + pattern;
            }
        }
        return new RegExp(
            '^' +
            // ensure there's a dollar and/or decimal amount, and that it doesn't start with a space or a negative sign followed by a space
            '(?!-? )(?=.*\\d)' +
            pattern +
            '$'
        );
    }

    validator.init();

    return validator;

});

},{}],97:[function(require,module,exports){
"use strict";

module.exports = {

    INVALID_TYPE:                           "Expected type {0} but found type {1}",
    INVALID_FORMAT:                         "Object didn't pass validation for format {0}: {1}",
    ENUM_MISMATCH:                          "No enum match for: {0}",
    ANY_OF_MISSING:                         "Data does not match any schemas from 'anyOf'",
    ONE_OF_MISSING:                         "Data does not match any schemas from 'oneOf'",
    ONE_OF_MULTIPLE:                        "Data is valid against more than one schema from 'oneOf'",
    NOT_PASSED:                             "Data matches schema from 'not'",

    // Array errors
    ARRAY_LENGTH_SHORT:                     "Array is too short ({0}), minimum {1}",
    ARRAY_LENGTH_LONG:                      "Array is too long ({0}), maximum {1}",
    ARRAY_UNIQUE:                           "Array items are not unique (indexes {0} and {1})",
    ARRAY_ADDITIONAL_ITEMS:                 "Additional items not allowed",

    // Numeric errors
    MULTIPLE_OF:                            "Value {0} is not a multiple of {1}",
    MINIMUM:                                "Value {0} is less than minimum {1}",
    MINIMUM_EXCLUSIVE:                      "Value {0} is equal or less than exclusive minimum {1}",
    MAXIMUM:                                "Value {0} is greater than maximum {1}",
    MAXIMUM_EXCLUSIVE:                      "Value {0} is equal or greater than exclusive maximum {1}",

    // Object errors
    OBJECT_PROPERTIES_MINIMUM:              "Too few properties defined ({0}), minimum {1}",
    OBJECT_PROPERTIES_MAXIMUM:              "Too many properties defined ({0}), maximum {1}",
    OBJECT_MISSING_REQUIRED_PROPERTY:       "Missing required property: {0}",
    OBJECT_ADDITIONAL_PROPERTIES:           "Additional properties not allowed: {0}",
    OBJECT_DEPENDENCY_KEY:                  "Dependency failed - key must exist: {0} (due to key: {1})",

    // String errors
    MIN_LENGTH:                             "String is too short ({0} chars), minimum {1}",
    MAX_LENGTH:                             "String is too long ({0} chars), maximum {1}",
    PATTERN:                                "String does not match pattern {0}: {1}",

    // Schema validation errors
    KEYWORD_TYPE_EXPECTED:                  "Keyword '{0}' is expected to be of type '{1}'",
    KEYWORD_UNDEFINED_STRICT:               "Keyword '{0}' must be defined in strict mode",
    KEYWORD_UNEXPECTED:                     "Keyword '{0}' is not expected to appear in the schema",
    KEYWORD_MUST_BE:                        "Keyword '{0}' must be {1}",
    KEYWORD_DEPENDENCY:                     "Keyword '{0}' requires keyword '{1}'",
    KEYWORD_PATTERN:                        "Keyword '{0}' is not a valid RegExp pattern: {1}",
    KEYWORD_VALUE_TYPE:                     "Each element of keyword '{0}' array must be a '{1}'",
    UNKNOWN_FORMAT:                         "There is no validation function for format '{0}'",
    CUSTOM_MODE_FORCE_PROPERTIES:           "{0} must define at least one property if present",

    // Remote errors
    REF_UNRESOLVED:                         "Reference has not been resolved during compilation: {0}",
    UNRESOLVABLE_REFERENCE:                 "Reference could not be resolved: {0}",
    SCHEMA_NOT_REACHABLE:                   "Validator was not able to read schema with uri: {0}",
    SCHEMA_TYPE_EXPECTED:                   "Schema is expected to be of type 'object'",
    SCHEMA_NOT_AN_OBJECT:                   "Schema is not an object: {0}",
    ASYNC_TIMEOUT:                          "{0} asynchronous task(s) have timed out after {1} ms",
    PARENT_SCHEMA_VALIDATION_FAILED:        "Schema failed to validate against its parent schema, see inner errors for details.",
    REMOTE_NOT_VALID:                       "Remote reference didn't compile successfully: {0}"

};

},{}],98:[function(require,module,exports){
/*jshint maxlen: false*/

var validator = require("validator");

var FormatValidators = {
    "date": function (date) {
        if (typeof date !== "string") {
            return true;
        }
        // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
        var matches = /^([0-9]{4})-([0-9]{2})-([0-9]{2})$/.exec(date);
        if (matches === null) {
            return false;
        }
        // var year = matches[1];
        // var month = matches[2];
        // var day = matches[3];
        if (matches[2] < "01" || matches[2] > "12" || matches[3] < "01" || matches[3] > "31") {
            return false;
        }
        return true;
    },
    "date-time": function (dateTime) {
        if (typeof dateTime !== "string") {
            return true;
        }
        // date-time from http://tools.ietf.org/html/rfc3339#section-5.6
        var s = dateTime.toLowerCase().split("t");
        if (!FormatValidators.date(s[0])) {
            return false;
        }
        var matches = /^([0-9]{2}):([0-9]{2}):([0-9]{2})(.[0-9]+)?(z|([+-][0-9]{2}:[0-9]{2}))$/.exec(s[1]);
        if (matches === null) {
            return false;
        }
        // var hour = matches[1];
        // var minute = matches[2];
        // var second = matches[3];
        // var fraction = matches[4];
        // var timezone = matches[5];
        if (matches[1] > "23" || matches[2] > "59" || matches[3] > "59") {
            return false;
        }
        return true;
    },
    "email": function (email) {
        if (typeof email !== "string") {
            return true;
        }
        return validator.isEmail(email, { "require_tld": true });
    },
    "hostname": function (hostname) {
        if (typeof hostname !== "string") {
            return true;
        }
        /*
            http://json-schema.org/latest/json-schema-validation.html#anchor114
            A string instance is valid against this attribute if it is a valid
            representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034].

            http://tools.ietf.org/html/rfc1034#section-3.5

            <digit> ::= any one of the ten digits 0 through 9
            var digit = /[0-9]/;

            <letter> ::= any one of the 52 alphabetic characters A through Z in upper case and a through z in lower case
            var letter = /[a-zA-Z]/;

            <let-dig> ::= <letter> | <digit>
            var letDig = /[0-9a-zA-Z]/;

            <let-dig-hyp> ::= <let-dig> | "-"
            var letDigHyp = /[-0-9a-zA-Z]/;

            <ldh-str> ::= <let-dig-hyp> | <let-dig-hyp> <ldh-str>
            var ldhStr = /[-0-9a-zA-Z]+/;

            <label> ::= <letter> [ [ <ldh-str> ] <let-dig> ]
            var label = /[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?/;

            <subdomain> ::= <label> | <subdomain> "." <label>
            var subdomain = /^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$/;

            <domain> ::= <subdomain> | " "
            var domain = null;
        */
        var valid = /^[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?(\.[a-zA-Z](([-0-9a-zA-Z]+)?[0-9a-zA-Z])?)*$/.test(hostname);
        if (valid) {
            // the sum of all label octets and label lengths is limited to 255.
            if (hostname.length > 255) { return false; }
            // Each node has a label, which is zero to 63 octets in length
            var labels = hostname.split(".");
            for (var i = 0; i < labels.length; i++) { if (labels[i].length > 63) { return false; } }
        }
        return valid;
    },
    "host-name": function (hostname) {
        return FormatValidators.hostname.call(this, hostname);
    },
    "ipv4": function (ipv4) {
        if (typeof ipv4 !== "string") { return true; }
        return validator.isIP(ipv4, 4);
    },
    "ipv6": function (ipv6) {
        if (typeof ipv6 !== "string") { return true; }
        return validator.isIP(ipv6, 6);
    },
    "regex": function (str) {
        try {
            RegExp(str);
            return true;
        } catch (e) {
            return false;
        }
    },
    "uri": function (uri) {
        if (this.options.strictUris) {
            return FormatValidators["strict-uri"].apply(this, arguments);
        }
        // https://github.com/zaggino/z-schema/issues/18
        // RegExp from http://tools.ietf.org/html/rfc3986#appendix-B
        return typeof uri !== "string" || RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?").test(uri);
    },
    "strict-uri": function (uri) {
        return typeof uri !== "string" || validator.isURL(uri);
    }
};

module.exports = FormatValidators;

},{"validator":96}],99:[function(require,module,exports){
"use strict";

var FormatValidators  = require("./FormatValidators"),
    Report            = require("./Report"),
    Utils             = require("./Utils");

var JsonValidators = {
    multipleOf: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.1.1.2
        if (typeof json !== "number") {
            return;
        }
        if (Utils.whatIs(json / schema.multipleOf) !== "integer") {
            report.addError("MULTIPLE_OF", [json, schema.multipleOf], null, schema.description);
        }
    },
    maximum: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.1.2.2
        if (typeof json !== "number") {
            return;
        }
        if (schema.exclusiveMaximum !== true) {
            if (json > schema.maximum) {
                report.addError("MAXIMUM", [json, schema.maximum], null, schema.description);
            }
        } else {
            if (json >= schema.maximum) {
                report.addError("MAXIMUM_EXCLUSIVE", [json, schema.maximum], null, schema.description);
            }
        }
    },
    exclusiveMaximum: function () {
        // covered in maximum
    },
    minimum: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.1.3.2
        if (typeof json !== "number") {
            return;
        }
        if (schema.exclusiveMinimum !== true) {
            if (json < schema.minimum) {
                report.addError("MINIMUM", [json, schema.minimum], null, schema.description);
            }
        } else {
            if (json <= schema.minimum) {
                report.addError("MINIMUM_EXCLUSIVE", [json, schema.minimum], null, schema.description);
            }
        }
    },
    exclusiveMinimum: function () {
        // covered in minimum
    },
    maxLength: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.2.1.2
        if (typeof json !== "string") {
            return;
        }
        if (Utils.ucs2decode(json).length > schema.maxLength) {
            report.addError("MAX_LENGTH", [json.length, schema.maxLength], null, schema.description);
        }
    },
    minLength: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.2.2.2
        if (typeof json !== "string") {
            return;
        }
        if (Utils.ucs2decode(json).length < schema.minLength) {
            report.addError("MIN_LENGTH", [json.length, schema.minLength], null, schema.description);
        }
    },
    pattern: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.2.3.2
        if (typeof json !== "string") {
            return;
        }
        if (RegExp(schema.pattern).test(json) === false) {
            report.addError("PATTERN", [schema.pattern, json], null, schema.description);
        }
    },
    additionalItems: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.3.1.2
        if (!Array.isArray(json)) {
            return;
        }
        // if the value of "additionalItems" is boolean value false and the value of "items" is an array,
        // the json is valid if its size is less than, or equal to, the size of "items".
        if (schema.additionalItems === false && Array.isArray(schema.items)) {
            if (json.length > schema.items.length) {
                report.addError("ARRAY_ADDITIONAL_ITEMS", null, null, schema.description);
            }
        }
    },
    items: function () { /*report, schema, json*/
        // covered in additionalItems
    },
    maxItems: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.3.2.2
        if (!Array.isArray(json)) {
            return;
        }
        if (json.length > schema.maxItems) {
            report.addError("ARRAY_LENGTH_LONG", [json.length, schema.maxItems], null, schema.description);
        }
    },
    minItems: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.3.3.2
        if (!Array.isArray(json)) {
            return;
        }
        if (json.length < schema.minItems) {
            report.addError("ARRAY_LENGTH_SHORT", [json.length, schema.minItems], null, schema.description);
        }
    },
    uniqueItems: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.3.4.2
        if (!Array.isArray(json)) {
            return;
        }
        if (schema.uniqueItems === true) {
            var matches = [];
            if (Utils.isUniqueArray(json, matches) === false) {
                report.addError("ARRAY_UNIQUE", matches, null, schema.description);
            }
        }
    },
    maxProperties: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.4.1.2
        if (Utils.whatIs(json) !== "object") {
            return;
        }
        var keysCount = Object.keys(json).length;
        if (keysCount > schema.maxProperties) {
            report.addError("OBJECT_PROPERTIES_MAXIMUM", [keysCount, schema.maxProperties], null, schema.description);
        }
    },
    minProperties: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.4.2.2
        if (Utils.whatIs(json) !== "object") {
            return;
        }
        var keysCount = Object.keys(json).length;
        if (keysCount < schema.minProperties) {
            report.addError("OBJECT_PROPERTIES_MINIMUM", [keysCount, schema.minProperties], null, schema.description);
        }
    },
    required: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.4.3.2
        if (Utils.whatIs(json) !== "object") {
            return;
        }
        var idx = schema.required.length;
        while (idx--) {
            var requiredPropertyName = schema.required[idx];
            if (json[requiredPropertyName] === undefined) {
                report.addError("OBJECT_MISSING_REQUIRED_PROPERTY", [requiredPropertyName], null, schema.description);
            }
        }
    },
    additionalProperties: function (report, schema, json) {
        // covered in properties and patternProperties
        if (schema.properties === undefined && schema.patternProperties === undefined) {
            return JsonValidators.properties.call(this, report, schema, json);
        }
    },
    patternProperties: function (report, schema, json) {
        // covered in properties
        if (schema.properties === undefined) {
            return JsonValidators.properties.call(this, report, schema, json);
        }
    },
    properties: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.4.4.2
        if (Utils.whatIs(json) !== "object") {
            return;
        }
        var properties = schema.properties !== undefined ? schema.properties : {};
        var patternProperties = schema.patternProperties !== undefined ? schema.patternProperties : {};
        if (schema.additionalProperties === false) {
            // The property set of the json to validate.
            var s = Object.keys(json);
            // The property set from "properties".
            var p = Object.keys(properties);
            // The property set from "patternProperties".
            var pp = Object.keys(patternProperties);
            // remove from "s" all elements of "p", if any;
            s = Utils.difference(s, p);
            // for each regex in "pp", remove all elements of "s" which this regex matches.
            var idx = pp.length;
            while (idx--) {
                var regExp = RegExp(pp[idx]),
                    idx2 = s.length;
                while (idx2--) {
                    if (regExp.test(s[idx2]) === true) {
                        s.splice(idx2, 1);
                    }
                }
            }
            // Validation of the json succeeds if, after these two steps, set "s" is empty.
            if (s.length > 0) {
                report.addError("OBJECT_ADDITIONAL_PROPERTIES", [s], null, schema.description);
            }
        }
    },
    dependencies: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.4.5.2
        if (Utils.whatIs(json) !== "object") {
            return;
        }

        var keys = Object.keys(schema.dependencies),
            idx = keys.length;

        while (idx--) {
            // iterate all dependencies
            var dependencyName = keys[idx];
            if (json[dependencyName]) {
                var dependencyDefinition = schema.dependencies[dependencyName];
                if (Utils.whatIs(dependencyDefinition) === "object") {
                    // if dependency is a schema, validate against this schema
                    exports.validate.call(this, report, dependencyDefinition, json);
                } else { // Array
                    // if dependency is an array, object needs to have all properties in this array
                    var idx2 = dependencyDefinition.length;
                    while (idx2--) {
                        var requiredPropertyName = dependencyDefinition[idx2];
                        if (json[requiredPropertyName] === undefined) {
                            report.addError("OBJECT_DEPENDENCY_KEY", [requiredPropertyName, dependencyName], null, schema.description);
                        }
                    }
                }
            }
        }
    },
    enum: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.5.1.2
        var match = false,
            idx = schema.enum.length;
        while (idx--) {
            if (Utils.areEqual(json, schema.enum[idx])) {
                match = true;
                break;
            }
        }
        if (match === false) {
            report.addError("ENUM_MISMATCH", [json], null, schema.description);
        }
    },
    /*
    type: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.5.2.2
        // type is handled before this is called so ignore
    },
    */
    allOf: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.5.3.2
        var idx = schema.allOf.length;
        while (idx--) {
            if (exports.validate.call(this, report, schema.allOf[idx], json) === false) {
                break;
            }
        }
    },
    anyOf: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.5.4.2
        var subReports = [],
            passed = false,
            idx = schema.anyOf.length;

        while (idx-- && passed === false) {
            var subReport = new Report(report);
            subReports.push(subReport);
            passed = exports.validate.call(this, subReport, schema.anyOf[idx], json);
        }

        if (passed === false) {
            report.addError("ANY_OF_MISSING", undefined, subReports, schema.description);
        }
    },
    oneOf: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.5.5.2
        var passes = 0,
            subReports = [],
            idx = schema.oneOf.length;

        while (idx--) {
            var subReport = new Report(report, { maxErrors: 1 });
            subReports.push(subReport);
            if (exports.validate.call(this, subReport, schema.oneOf[idx], json) === true) {
                passes++;
            }
        }

        if (passes === 0) {
            report.addError("ONE_OF_MISSING", undefined, subReports, schema.description);
        } else if (passes > 1) {
            report.addError("ONE_OF_MULTIPLE", null, null, schema.description);
        }
    },
    not: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.5.6.2
        var subReport = new Report(report);
        if (exports.validate.call(this, subReport, schema.not, json) === true) {
            report.addError("NOT_PASSED", null, null, schema.description);
        }
    },
    definitions: function () { /*report, schema, json*/
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.5.7.2
        // nothing to do here
    },
    format: function (report, schema, json) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.7.2
        var formatValidatorFn = FormatValidators[schema.format];
        if (typeof formatValidatorFn === "function") {
            if (formatValidatorFn.length === 2) {
                // async
                report.addAsyncTask(formatValidatorFn, [json], function (result) {
                    if (result !== true) {
                        report.addError("INVALID_FORMAT", [schema.format, json], null, schema.description);
                    }
                });
            } else {
                // sync
                if (formatValidatorFn.call(this, json) !== true) {
                    report.addError("INVALID_FORMAT", [schema.format, json], null, schema.description);
                }
            }
        } else {
            report.addError("UNKNOWN_FORMAT", [schema.format], null, schema.description);
        }
    }
};

var recurseArray = function (report, schema, json) {
    // http://json-schema.org/latest/json-schema-validation.html#rfc.section.8.2

    var idx = json.length;

    // If "items" is an array, this situation, the schema depends on the index:
    // if the index is less than, or equal to, the size of "items",
    // the child instance must be valid against the corresponding schema in the "items" array;
    // otherwise, it must be valid against the schema defined by "additionalItems".
    if (Array.isArray(schema.items)) {

        while (idx--) {
            // equal to doesnt make sense here
            if (idx < schema.items.length) {
                report.path.push(idx.toString());
                exports.validate.call(this, report, schema.items[idx], json[idx]);
                report.path.pop();
            } else {
                // might be boolean, so check that it's an object
                if (typeof schema.additionalItems === "object") {
                    report.path.push(idx.toString());
                    exports.validate.call(this, report, schema.additionalItems, json[idx]);
                    report.path.pop();
                }
            }
        }

    } else if (typeof schema.items === "object") {

        // If items is a schema, then the child instance must be valid against this schema,
        // regardless of its index, and regardless of the value of "additionalItems".
        while (idx--) {
            report.path.push(idx.toString());
            exports.validate.call(this, report, schema.items, json[idx]);
            report.path.pop();
        }

    }
};

var recurseObject = function (report, schema, json) {
    // http://json-schema.org/latest/json-schema-validation.html#rfc.section.8.3

    // If "additionalProperties" is absent, it is considered present with an empty schema as a value.
    // In addition, boolean value true is considered equivalent to an empty schema.
    var additionalProperties = schema.additionalProperties;
    if (additionalProperties === true || additionalProperties === undefined) {
        additionalProperties = {};
    }

    // p - The property set from "properties".
    var p = schema.properties ? Object.keys(schema.properties) : [];

    // pp - The property set from "patternProperties". Elements of this set will be called regexes for convenience.
    var pp = schema.patternProperties ? Object.keys(schema.patternProperties) : [];

    // m - The property name of the child.
    var keys = Object.keys(json),
        idx = keys.length;

    while (idx--) {
        var m = keys[idx],
            propertyValue = json[m];

        // s - The set of schemas for the child instance.
        var s = [];

        // 1. If set "p" contains value "m", then the corresponding schema in "properties" is added to "s".
        if (p.indexOf(m) !== -1) {
            s.push(schema.properties[m]);
        }

        // 2. For each regex in "pp", if it matches "m" successfully, the corresponding schema in "patternProperties" is added to "s".
        var idx2 = pp.length;
        while (idx2--) {
            var regexString = pp[idx2];
            if (RegExp(regexString).test(m) === true) {
                s.push(schema.patternProperties[regexString]);
            }
        }

        // 3. The schema defined by "additionalProperties" is added to "s" if and only if, at this stage, "s" is empty.
        if (s.length === 0 && additionalProperties !== false) {
            s.push(additionalProperties);
        }

        // we are passing tests even without this assert because this is covered by properties check
        // if s is empty in this stage, no additionalProperties are allowed
        // report.expect(s.length !== 0, 'E001', m);

        // Instance property value must pass all schemas from s
        idx2 = s.length;
        while (idx2--) {
            report.path.push(m);
            exports.validate.call(this, report, s[idx2], propertyValue);
            report.path.pop();
        }
    }
};

exports.validate = function (report, schema, json) {

    report.commonErrorMessage = "JSON_OBJECT_VALIDATION_FAILED";

    // check if schema is an object
    var to = Utils.whatIs(schema);
    if (to !== "object") {
        report.addError("SCHEMA_NOT_AN_OBJECT", [to], null, schema.description);
        return false;
    }

    // check if schema is empty, everything is valid against empty schema
    var keys = Object.keys(schema);
    if (keys.length === 0) {
        return true;
    }

    // this method can be called recursively, so we need to remember our root
    var isRoot = false;
    if (!report.rootSchema) {
        report.rootSchema = schema;
        isRoot = true;
    }

    // follow schema.$ref keys
    if (schema.$ref !== undefined) {
        // avoid infinite loop with maxRefs
        var maxRefs = 99;
        while (schema.$ref && maxRefs > 0) {
            if (!schema.__$refResolved) {
                report.addError("REF_UNRESOLVED", [schema.$ref], null, schema.description);
                break;
            } else if (schema.__$refResolved === schema) {
                break;
            } else {
                schema = schema.__$refResolved;
                keys = Object.keys(schema);
            }
            maxRefs--;
        }
        if (maxRefs === 0) {
            throw new Error("Circular dependency by $ref references!");
        }
    }

    // type checking first
    // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.5.2.2
    var jsonType = Utils.whatIs(json);
    if (schema.type) {
        if (typeof schema.type === "string") {
            if (jsonType !== schema.type && (jsonType !== "integer" || schema.type !== "number")) {
                report.addError("INVALID_TYPE", [schema.type, jsonType], null, schema.description);
                if (this.options.breakOnFirstError) {
                    return false;
                }
            }
        } else {
            if (schema.type.indexOf(jsonType) === -1 && (jsonType !== "integer" || schema.type.indexOf("number") === -1)) {
                report.addError("INVALID_TYPE", [schema.type, jsonType], null, schema.description);
                if (this.options.breakOnFirstError) {
                    return false;
                }
            }
        }
    }

    // now iterate all the keys in schema and execute validation methods
    var idx = keys.length;
    while (idx--) {
        if (JsonValidators[keys[idx]]) {
            JsonValidators[keys[idx]].call(this, report, schema, json);
            if (report.errors.length && this.options.breakOnFirstError) { break; }
        }
    }

    if (report.errors.length === 0 || this.options.breakOnFirstError === false) {
        if (jsonType === "array") {
            recurseArray.call(this, report, schema, json);
        } else if (jsonType === "object") {
            recurseObject.call(this, report, schema, json);
        }
    }

    // we don't need the root pointer anymore
    if (isRoot) {
        report.rootSchema = undefined;
    }

    // return valid just to be able to break at some code points
    return report.errors.length === 0;

};

},{"./FormatValidators":98,"./Report":101,"./Utils":105}],100:[function(require,module,exports){
// Number.isFinite polyfill
// http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isfinite
if (typeof Number.isFinite !== "function") {
    Number.isFinite = function isFinite(value) {
        // 1. If Type(number) is not Number, return false.
        if (typeof value !== "number") {
            return false;
        }
        // 2. If number is NaN, +∞, or −∞, return false.
        if (value !== value || value === Infinity || value === -Infinity) {
            return false;
        }
        // 3. Otherwise, return true.
        return true;
    };
}

},{}],101:[function(require,module,exports){
(function (process){
"use strict";

var Errors = require("./Errors");
var Utils  = require("./Utils");

function Report(parentOrOptions, reportOptions) {
    this.parentReport = parentOrOptions instanceof Report ?
                            parentOrOptions :
                            undefined;

    this.options = parentOrOptions instanceof Report ?
                       parentOrOptions.options :
                       parentOrOptions || {};

    this.reportOptions = reportOptions || {};

    this.errors = [];
    this.path = [];
    this.asyncTasks = [];
}

Report.prototype.isValid = function () {
    if (this.asyncTasks.length > 0) {
        throw new Error("Async tasks pending, can't answer isValid");
    }
    return this.errors.length === 0;
};

Report.prototype.addAsyncTask = function (fn, args, asyncTaskResultProcessFn) {
    this.asyncTasks.push([fn, args, asyncTaskResultProcessFn]);
};

Report.prototype.processAsyncTasks = function (timeout, callback) {

    var validationTimeout = timeout || 2000,
        tasksCount        = this.asyncTasks.length,
        idx               = tasksCount,
        timedOut          = false,
        self              = this;

    function finish() {
        process.nextTick(function () {
            var valid = self.errors.length === 0,
                err   = valid ? undefined : self.errors;
            callback(err, valid);
        });
    }

    function respond(asyncTaskResultProcessFn) {
        return function (asyncTaskResult) {
            if (timedOut) { return; }
            asyncTaskResultProcessFn(asyncTaskResult);
            if (--tasksCount === 0) {
                finish();
            }
        };
    }

    if (tasksCount === 0 || this.errors.length > 0) {
        finish();
        return;
    }

    while (idx--) {
        var task = this.asyncTasks[idx];
        task[0].apply(null, task[1].concat(respond(task[2])));
    }

    setTimeout(function () {
        if (tasksCount > 0) {
            timedOut = true;
            self.addError("ASYNC_TIMEOUT", [tasksCount, validationTimeout]);
            callback(self.errors, false);
        }
    }, validationTimeout);

};

Report.prototype.getPath = function () {
    var path = [];
    if (this.parentReport) {
        path = path.concat(this.parentReport.path);
    }
    path = path.concat(this.path);

    if (this.options.reportPathAsArray !== true) {
        // Sanitize the path segments (http://tools.ietf.org/html/rfc6901#section-4)
        path = "#/" + path.map(function (segment) {

            if (Utils.isAbsoluteUri(segment)) {
                return "uri(" + segment + ")";
            }

            return segment.replace("~", "~0").replace("/", "~1");
        }).join("/");
    }
    return path;
};

Report.prototype.addError = function (errorCode, params, subReports, schemaDescription) {
    if (this.errors.length >= this.reportOptions.maxErrors) {
        return;
    }

    if (!errorCode) { throw new Error("No errorCode passed into addError()"); }
    if (!Errors[errorCode]) { throw new Error("No errorMessage known for code " + errorCode); }

    params = params || [];

    var idx = params.length,
        errorMessage = Errors[errorCode];
    while (idx--) {
        var whatIs = Utils.whatIs(params[idx]);
        var param = (whatIs === "object" || whatIs === "null") ? JSON.stringify(params[idx]) : params[idx];
        errorMessage = errorMessage.replace("{" + idx + "}", param);
    }

    var err = {
        code: errorCode,
        params: params,
        message: errorMessage,
        path: this.getPath()
    };

    if (schemaDescription) {
        err.description = schemaDescription;
    }

    if (subReports != null) {
        if (!Array.isArray(subReports)) {
            subReports = [subReports];
        }
        err.inner = [];
        idx = subReports.length;
        while (idx--) {
            var subReport = subReports[idx],
                idx2 = subReport.errors.length;
            while (idx2--) {
                err.inner.push(subReport.errors[idx2]);
            }
        }
        if (err.inner.length === 0) {
            err.inner = undefined;
        }
    }

    this.errors.push(err);
};

module.exports = Report;

}).call(this,require('_process'))

},{"./Errors":97,"./Utils":105,"_process":15}],102:[function(require,module,exports){
"use strict";

var Report              = require("./Report");
var SchemaCompilation   = require("./SchemaCompilation");
var SchemaValidation    = require("./SchemaValidation");
var Utils               = require("./Utils");

function decodeJSONPointer(str) {
    // http://tools.ietf.org/html/draft-ietf-appsawg-json-pointer-07#section-3
    return decodeURIComponent(str).replace(/~[0-1]/g, function (x) {
        return x === "~1" ? "/" : "~";
    });
}

function getRemotePath(uri) {
    var io = uri.indexOf("#");
    return io === -1 ? uri : uri.slice(0, io);
}

function getQueryPath(uri) {
    var io = uri.indexOf("#");
    var res = io === -1 ? undefined : uri.slice(io + 1);
    // WARN: do not slice slash, #/ means take root and go down from it
    // if (res && res[0] === "/") { res = res.slice(1); }
    return res;
}

function findId(schema, id) {
    // process only arrays and objects
    if (typeof schema !== "object" || schema === null) {
        return;
    }

    // no id means root so return itself
    if (!id) {
        return schema;
    }

    if (schema.id) {
        if (schema.id === id || schema.id[0] === "#" && schema.id.substring(1) === id) {
            return schema;
        }
    }

    var idx, result;
    if (Array.isArray(schema)) {
        idx = schema.length;
        while (idx--) {
            result = findId(schema[idx], id);
            if (result) { return result; }
        }
    } else {
        var keys = Object.keys(schema);
        idx = keys.length;
        while (idx--) {
            var k = keys[idx];
            if (k.indexOf("__$") === 0) {
                continue;
            }
            result = findId(schema[k], id);
            if (result) { return result; }
        }
    }
}

exports.cacheSchemaByUri = function (uri, schema) {
    var remotePath = getRemotePath(uri);
    if (remotePath) {
        this.cache[remotePath] = schema;
    }
};

exports.removeFromCacheByUri = function (uri) {
    var remotePath = getRemotePath(uri);
    if (remotePath) {
        this.cache[remotePath] = undefined;
    }
};

exports.checkCacheForUri = function (uri) {
    var remotePath = getRemotePath(uri);
    return remotePath ? this.cache[remotePath] != null : false;
};

exports.getSchema = function (report, schema) {
    if (typeof schema === "object") {
        schema = exports.getSchemaByReference.call(this, report, schema);
    }
    if (typeof schema === "string") {
        schema = exports.getSchemaByUri.call(this, report, schema);
    }
    return schema;
};

exports.getSchemaByReference = function (report, key) {
    var i = this.referenceCache.length;
    while (i--) {
        if (this.referenceCache[i][0] === key) {
            return this.referenceCache[i][1];
        }
    }
    // not found
    var schema = Utils.cloneDeep(key);
    this.referenceCache.push([key, schema]);
    return schema;
};

exports.getSchemaByUri = function (report, uri, root) {
    var remotePath = getRemotePath(uri),
        queryPath = getQueryPath(uri),
        result = remotePath ? this.cache[remotePath] : root;

    if (result && remotePath) {
        // we need to avoid compiling schemas in a recursive loop
        var compileRemote = result !== root;
        // now we need to compile and validate resolved schema (in case it's not already)
        if (compileRemote) {

            report.path.push(remotePath);

            var remoteReport = new Report(report);
            if (SchemaCompilation.compileSchema.call(this, remoteReport, result)) {
                SchemaValidation.validateSchema.call(this, remoteReport, result);
            }
            var remoteReportIsValid = remoteReport.isValid();
            if (!remoteReportIsValid) {
                report.addError("REMOTE_NOT_VALID", [uri], remoteReport);
            }

            report.path.pop();

            if (!remoteReportIsValid) {
                return undefined;
            }
        }
    }

    if (result && queryPath) {
        var parts = queryPath.split("/");
        for (var idx = 0, lim = parts.length; idx < lim; idx++) {
            var key = decodeJSONPointer(parts[idx]);
            if (idx === 0) { // it's an id
                result = findId(result, key);
            } else { // it's a path behind id
                result = result[key];
            }
        }
    }

    return result;
};

exports.getRemotePath = getRemotePath;

},{"./Report":101,"./SchemaCompilation":103,"./SchemaValidation":104,"./Utils":105}],103:[function(require,module,exports){
"use strict";

var Report      = require("./Report");
var SchemaCache = require("./SchemaCache");
var Utils       = require("./Utils");

function mergeReference(scope, ref) {
    if (Utils.isAbsoluteUri(ref)) {
        return ref;
    }

    var joinedScope = scope.join(""),
        isScopeAbsolute = Utils.isAbsoluteUri(joinedScope),
        isScopeRelative = Utils.isRelativeUri(joinedScope),
        isRefRelative = Utils.isRelativeUri(ref),
        toRemove;

    if (isScopeAbsolute && isRefRelative) {
        toRemove = joinedScope.match(/\/[^\/]*$/);
        if (toRemove) {
            joinedScope = joinedScope.slice(0, toRemove.index + 1);
        }
    } else if (isScopeRelative && isRefRelative) {
        joinedScope = "";
    } else {
        toRemove = joinedScope.match(/[^#/]+$/);
        if (toRemove) {
            joinedScope = joinedScope.slice(0, toRemove.index);
        }
    }

    var res = joinedScope + ref;
    res = res.replace(/##/, "#");
    return res;
}

function collectReferences(obj, results, scope, path) {
    results = results || [];
    scope = scope || [];
    path = path || [];

    if (typeof obj !== "object" || obj === null) {
        return results;
    }

    if (typeof obj.id === "string") {
        scope.push(obj.id);
    }

    if (typeof obj.$ref === "string" && typeof obj.__$refResolved === "undefined") {
        results.push({
            ref: mergeReference(scope, obj.$ref),
            key: "$ref",
            obj: obj,
            path: path.slice(0)
        });
    }
    if (typeof obj.$schema === "string" && typeof obj.__$schemaResolved === "undefined") {
        results.push({
            ref: mergeReference(scope, obj.$schema),
            key: "$schema",
            obj: obj,
            path: path.slice(0)
        });
    }

    var idx;
    if (Array.isArray(obj)) {
        idx = obj.length;
        while (idx--) {
            path.push(idx.toString());
            collectReferences(obj[idx], results, scope, path);
            path.pop();
        }
    } else {
        var keys = Object.keys(obj);
        idx = keys.length;
        while (idx--) {
            // do not recurse through resolved references and other z-schema props
            if (keys[idx].indexOf("__$") === 0) { continue; }
            path.push(keys[idx]);
            collectReferences(obj[keys[idx]], results, scope, path);
            path.pop();
        }
    }

    if (typeof obj.id === "string") {
        scope.pop();
    }

    return results;
}

var compileArrayOfSchemasLoop = function (mainReport, arr) {
    var idx = arr.length,
        compiledCount = 0;

    while (idx--) {

        // try to compile each schema separately
        var report = new Report(mainReport);
        var isValid = exports.compileSchema.call(this, report, arr[idx]);
        if (isValid) { compiledCount++; }

        // copy errors to report
        mainReport.errors = mainReport.errors.concat(report.errors);

    }

    return compiledCount;
};

function findId(arr, id) {
    var idx = arr.length;
    while (idx--) {
        if (arr[idx].id === id) {
            return arr[idx];
        }
    }
    return null;
}

var compileArrayOfSchemas = function (report, arr) {

    var compiled = 0,
        lastLoopCompiled;

    do {

        // remove all UNRESOLVABLE_REFERENCE errors before compiling array again
        var idx = report.errors.length;
        while (idx--) {
            if (report.errors[idx].code === "UNRESOLVABLE_REFERENCE") {
                report.errors.splice(idx, 1);
            }
        }

        // remember how many were compiled in the last loop
        lastLoopCompiled = compiled;

        // count how many are compiled now
        compiled = compileArrayOfSchemasLoop.call(this, report, arr);

        // fix __$missingReferences if possible
        idx = arr.length;
        while (idx--) {
            var sch = arr[idx];
            if (sch.__$missingReferences) {
                var idx2 = sch.__$missingReferences.length;
                while (idx2--) {
                    var refObj = sch.__$missingReferences[idx2];
                    var response = findId(arr, refObj.ref);
                    if (response) {
                        // this might create circular references
                        refObj.obj["__" + refObj.key + "Resolved"] = response;
                        // it's resolved now so delete it
                        sch.__$missingReferences.splice(idx2, 1);
                    }
                }
                if (sch.__$missingReferences.length === 0) {
                    delete sch.__$missingReferences;
                }
            }
        }

        // keep repeating if not all compiled and at least one more was compiled in the last loop
    } while (compiled !== arr.length && compiled !== lastLoopCompiled);

    return report.isValid();

};

exports.compileSchema = function (report, schema) {

    report.commonErrorMessage = "SCHEMA_COMPILATION_FAILED";

    // if schema is a string, assume it's a uri
    if (typeof schema === "string") {
        var loadedSchema = SchemaCache.getSchemaByUri.call(this, report, schema);
        if (!loadedSchema) {
            report.addError("SCHEMA_NOT_REACHABLE", [schema]);
            return false;
        }
        schema = loadedSchema;
    }

    // if schema is an array, assume it's an array of schemas
    if (Array.isArray(schema)) {
        return compileArrayOfSchemas.call(this, report, schema);
    }

    // if we have an id than it should be cached already (if this instance has compiled it)
    if (schema.__$compiled && schema.id && SchemaCache.checkCacheForUri.call(this, schema.id) === false) {
        schema.__$compiled = undefined;
    }

    // do not re-compile schemas
    if (schema.__$compiled) {
        return true;
    }

    if (schema.id) {
        // add this to our schemaCache (before compilation in case we have references including id)
        SchemaCache.cacheSchemaByUri.call(this, schema.id, schema);
    }

    // delete all __$missingReferences from previous compilation attempts
    var isValidExceptReferences = report.isValid();
    delete schema.__$missingReferences;

    // collect all references that need to be resolved - $ref and $schema
    var refs = collectReferences.call(this, schema),
        idx = refs.length;
    while (idx--) {
        // resolve all the collected references into __xxxResolved pointer
        var refObj = refs[idx];
        var response = SchemaCache.getSchemaByUri.call(this, report, refObj.ref, schema);

        // we can try to use custom schemaReader if available
        if (!response) {
            var schemaReader = this.getSchemaReader();
            if (schemaReader) {
                // it's supposed to return a valid schema
                var s = schemaReader(refObj.ref);
                if (s) {
                    // it needs to have the id
                    s.id = refObj.ref;
                    // try to compile the schema
                    var subreport = new Report(report);
                    if (!exports.compileSchema.call(this, subreport, s)) {
                        // copy errors to report
                        report.errors = report.errors.concat(subreport.errors);
                    } else {
                        response = SchemaCache.getSchemaByUri.call(this, report, refObj.ref, schema);
                    }
                }
            }
        }

        if (!response) {

            var isAbsolute = Utils.isAbsoluteUri(refObj.ref);
            var isDownloaded = false;
            var ignoreUnresolvableRemotes = this.options.ignoreUnresolvableReferences === true;

            if (isAbsolute) {
                // we shouldn't add UNRESOLVABLE_REFERENCE for schemas we already have downloaded
                // and set through setRemoteReference method
                isDownloaded = SchemaCache.checkCacheForUri.call(this, refObj.ref);
            }

            if (!isAbsolute || !isDownloaded && !ignoreUnresolvableRemotes) {
                Array.prototype.push.apply(report.path, refObj.path);
                report.addError("UNRESOLVABLE_REFERENCE", [refObj.ref]);
                report.path.slice(0, -refObj.path.length);

                // pusblish unresolved references out
                if (isValidExceptReferences) {
                    schema.__$missingReferences = schema.__$missingReferences || [];
                    schema.__$missingReferences.push(refObj);
                }
            }
        }
        // this might create circular references
        refObj.obj["__" + refObj.key + "Resolved"] = response;
    }

    var isValid = report.isValid();
    if (isValid) {
        schema.__$compiled = true;
    } else {
        if (schema.id) {
            // remove this schema from schemaCache because it failed to compile
            SchemaCache.removeFromCacheByUri.call(this, schema.id);
        }
    }
    return isValid;

};

},{"./Report":101,"./SchemaCache":102,"./Utils":105}],104:[function(require,module,exports){
"use strict";

var FormatValidators = require("./FormatValidators"),
    JsonValidation   = require("./JsonValidation"),
    Report           = require("./Report"),
    Utils            = require("./Utils");

var SchemaValidators = {
    $ref: function (report, schema) {
        // http://tools.ietf.org/html/draft-ietf-appsawg-json-pointer-07
        // http://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03
        if (typeof schema.$ref !== "string") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["$ref", "string"]);
        }
    },
    $schema: function (report, schema) {
        // http://json-schema.org/latest/json-schema-core.html#rfc.section.6
        if (typeof schema.$schema !== "string") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["$schema", "string"]);
        }
    },
    multipleOf: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.1.1.1
        if (typeof schema.multipleOf !== "number") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["multipleOf", "number"]);
        } else if (schema.multipleOf <= 0) {
            report.addError("KEYWORD_MUST_BE", ["multipleOf", "strictly greater than 0"]);
        }
    },
    maximum: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.1.2.1
        if (typeof schema.maximum !== "number") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["maximum", "number"]);
        }
    },
    exclusiveMaximum: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.1.2.1
        if (typeof schema.exclusiveMaximum !== "boolean") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["exclusiveMaximum", "boolean"]);
        } else if (schema.maximum === undefined) {
            report.addError("KEYWORD_DEPENDENCY", ["exclusiveMaximum", "maximum"]);
        }
    },
    minimum: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.1.3.1
        if (typeof schema.minimum !== "number") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["minimum", "number"]);
        }
    },
    exclusiveMinimum: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.1.3.1
        if (typeof schema.exclusiveMinimum !== "boolean") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["exclusiveMinimum", "boolean"]);
        } else if (schema.minimum === undefined) {
            report.addError("KEYWORD_DEPENDENCY", ["exclusiveMinimum", "minimum"]);
        }
    },
    maxLength: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.2.1.1
        if (Utils.whatIs(schema.maxLength) !== "integer") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["maxLength", "integer"]);
        } else if (schema.maxLength < 0) {
            report.addError("KEYWORD_MUST_BE", ["maxLength", "greater than, or equal to 0"]);
        }
    },
    minLength: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.2.2.1
        if (Utils.whatIs(schema.minLength) !== "integer") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["minLength", "integer"]);
        } else if (schema.minLength < 0) {
            report.addError("KEYWORD_MUST_BE", ["minLength", "greater than, or equal to 0"]);
        }
    },
    pattern: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.2.3.1
        if (typeof schema.pattern !== "string") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["pattern", "string"]);
        } else {
            try {
                RegExp(schema.pattern);
            } catch (e) {
                report.addError("KEYWORD_PATTERN", ["pattern", schema.pattern]);
            }
        }
    },
    additionalItems: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.3.1.1
        var type = Utils.whatIs(schema.additionalItems);
        if (type !== "boolean" && type !== "object") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["additionalItems", ["boolean", "object"]]);
        } else if (type === "object") {
            report.path.push("additionalItems");
            exports.validateSchema.call(this, report, schema.additionalItems);
            report.path.pop();
        }
    },
    items: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.3.1.1
        var type = Utils.whatIs(schema.items);

        if (type === "object") {
            report.path.push("items");
            exports.validateSchema.call(this, report, schema.items);
            report.path.pop();
        } else if (type === "array") {
            var idx = schema.items.length;
            while (idx--) {
                report.path.push("items");
                report.path.push(idx.toString());
                exports.validateSchema.call(this, report, schema.items[idx]);
                report.path.pop();
                report.path.pop();
            }
        } else {
            report.addError("KEYWORD_TYPE_EXPECTED", ["items", ["array", "object"]]);
        }

        // custom - strict mode
        if (this.options.forceAdditional === true && schema.additionalItems === undefined && Array.isArray(schema.items)) {
            report.addError("KEYWORD_UNDEFINED_STRICT", ["additionalItems"]);
        }
        // custome - assume defined false mode
        if (this.options.assumeAdditional === true && schema.additionalItems === undefined && Array.isArray(schema.items)) {
            schema.additionalItems = false;
        }
    },
    maxItems: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.3.2.1
        if (typeof schema.maxItems !== "number") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["maxItems", "integer"]);
        } else if (schema.maxItems < 0) {
            report.addError("KEYWORD_MUST_BE", ["maxItems", "greater than, or equal to 0"]);
        }
    },
    minItems: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.3.3.1
        if (Utils.whatIs(schema.minItems) !== "integer") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["minItems", "integer"]);
        } else if (schema.minItems < 0) {
            report.addError("KEYWORD_MUST_BE", ["minItems", "greater than, or equal to 0"]);
        }
    },
    uniqueItems: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.3.4.1
        if (typeof schema.uniqueItems !== "boolean") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["uniqueItems", "boolean"]);
        }
    },
    maxProperties: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.4.1.1
        if (Utils.whatIs(schema.maxProperties) !== "integer") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["maxProperties", "integer"]);
        } else if (schema.maxProperties < 0) {
            report.addError("KEYWORD_MUST_BE", ["maxProperties", "greater than, or equal to 0"]);
        }
    },
    minProperties: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.4.2.1
        if (Utils.whatIs(schema.minProperties) !== "integer") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["minProperties", "integer"]);
        } else if (schema.minProperties < 0) {
            report.addError("KEYWORD_MUST_BE", ["minProperties", "greater than, or equal to 0"]);
        }
    },
    required: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.4.3.1
        if (Utils.whatIs(schema.required) !== "array") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["required", "array"]);
        } else if (schema.required.length === 0) {
            report.addError("KEYWORD_MUST_BE", ["required", "an array with at least one element"]);
        } else {
            var idx = schema.required.length;
            while (idx--) {
                if (typeof schema.required[idx] !== "string") {
                    report.addError("KEYWORD_VALUE_TYPE", ["required", "string"]);
                }
            }
            if (Utils.isUniqueArray(schema.required) === false) {
                report.addError("KEYWORD_MUST_BE", ["required", "an array with unique items"]);
            }
        }
    },
    additionalProperties: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.4.4.1
        var type = Utils.whatIs(schema.additionalProperties);
        if (type !== "boolean" && type !== "object") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["additionalProperties", ["boolean", "object"]]);
        } else if (type === "object") {
            report.path.push("additionalProperties");
            exports.validateSchema.call(this, report, schema.additionalProperties);
            report.path.pop();
        }
    },
    properties: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.4.4.1
        if (Utils.whatIs(schema.properties) !== "object") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["properties", "object"]);
            return;
        }

        var keys = Object.keys(schema.properties),
            idx = keys.length;
        while (idx--) {
            var key = keys[idx],
                val = schema.properties[key];
            report.path.push("properties");
            report.path.push(key);
            exports.validateSchema.call(this, report, val);
            report.path.pop();
            report.path.pop();
        }

        // custom - strict mode
        if (this.options.forceAdditional === true && schema.additionalProperties === undefined) {
            report.addError("KEYWORD_UNDEFINED_STRICT", ["additionalProperties"]);
        }
        // custome - assume defined false mode
        if (this.options.assumeAdditional === true && schema.additionalProperties === undefined) {
            schema.additionalProperties = false;
        }
        // custom - forceProperties
        if (this.options.forceProperties === true && keys.length === 0) {
            report.addError("CUSTOM_MODE_FORCE_PROPERTIES", ["properties"]);
        }
    },
    patternProperties: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.4.4.1
        if (Utils.whatIs(schema.patternProperties) !== "object") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["patternProperties", "object"]);
            return;
        }

        var keys = Object.keys(schema.patternProperties),
            idx = keys.length;
        while (idx--) {
            var key = keys[idx],
                val = schema.patternProperties[key];
            try {
                RegExp(key);
            } catch (e) {
                report.addError("KEYWORD_PATTERN", ["patternProperties", key]);
            }
            report.path.push("patternProperties");
            report.path.push(key.toString());
            exports.validateSchema.call(this, report, val);
            report.path.pop();
            report.path.pop();
        }

        // custom - forceProperties
        if (this.options.forceProperties === true && keys.length === 0) {
            report.addError("CUSTOM_MODE_FORCE_PROPERTIES", ["patternProperties"]);
        }
    },
    dependencies: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.4.5.1
        if (Utils.whatIs(schema.dependencies) !== "object") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["dependencies", "object"]);
        } else {
            var keys = Object.keys(schema.dependencies),
                idx = keys.length;
            while (idx--) {
                var schemaKey = keys[idx],
                    schemaDependency = schema.dependencies[schemaKey],
                    type = Utils.whatIs(schemaDependency);

                if (type === "object") {
                    report.path.push("dependencies");
                    report.path.push(schemaKey);
                    exports.validateSchema.call(this, report, schemaDependency);
                    report.path.pop();
                    report.path.pop();
                } else if (type === "array") {
                    var idx2 = schemaDependency.length;
                    if (idx2 === 0) {
                        report.addError("KEYWORD_MUST_BE", ["dependencies", "not empty array"]);
                    }
                    while (idx2--) {
                        if (typeof schemaDependency[idx2] !== "string") {
                            report.addError("KEYWORD_VALUE_TYPE", ["dependensices", "string"]);
                        }
                    }
                    if (Utils.isUniqueArray(schemaDependency) === false) {
                        report.addError("KEYWORD_MUST_BE", ["dependencies", "an array with unique items"]);
                    }
                } else {
                    report.addError("KEYWORD_VALUE_TYPE", ["dependencies", "object or array"]);
                }
            }
        }
    },
    enum: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.5.1.1
        if (Array.isArray(schema.enum) === false) {
            report.addError("KEYWORD_TYPE_EXPECTED", ["enum", "array"]);
        } else if (schema.enum.length === 0) {
            report.addError("KEYWORD_MUST_BE", ["enum", "an array with at least one element"]);
        } else if (Utils.isUniqueArray(schema.enum) === false) {
            report.addError("KEYWORD_MUST_BE", ["enum", "an array with unique elements"]);
        }
    },
    type: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.5.2.1
        var primitiveTypes = ["array", "boolean", "integer", "number", "null", "object", "string"],
            primitiveTypeStr = primitiveTypes.join(","),
            isArray = Array.isArray(schema.type);

        if (isArray) {
            var idx = schema.type.length;
            while (idx--) {
                if (primitiveTypes.indexOf(schema.type[idx]) === -1) {
                    report.addError("KEYWORD_TYPE_EXPECTED", ["type", primitiveTypeStr]);
                }
            }
            if (Utils.isUniqueArray(schema.type) === false) {
                report.addError("KEYWORD_MUST_BE", ["type", "an object with unique properties"]);
            }
        } else if (typeof schema.type === "string") {
            if (primitiveTypes.indexOf(schema.type) === -1) {
                report.addError("KEYWORD_TYPE_EXPECTED", ["type", primitiveTypeStr]);
            }
        } else {
            report.addError("KEYWORD_TYPE_EXPECTED", ["type", ["string", "array"]]);
        }

        if (this.options.noEmptyStrings === true) {
            if (schema.type === "string" || isArray && schema.type.indexOf("string") !== -1) {
                if (schema.minLength === undefined &&
                    schema.enum === undefined &&
                    schema.format === undefined) {

                    schema.minLength = 1;
                }
            }
        }
        if (this.options.noEmptyArrays === true) {
            if (schema.type === "array" || isArray && schema.type.indexOf("array") !== -1) {
                if (schema.minItems === undefined) {
                    schema.minItems = 1;
                }
            }
        }
        if (this.options.forceProperties === true) {
            if (schema.type === "object" || isArray && schema.type.indexOf("object") !== -1) {
                if (schema.properties === undefined && schema.patternProperties === undefined) {
                    report.addError("KEYWORD_UNDEFINED_STRICT", ["properties"]);
                }
            }
        }
        if (this.options.forceItems === true) {
            if (schema.type === "array" || isArray && schema.type.indexOf("array") !== -1) {
                if (schema.items === undefined) {
                    report.addError("KEYWORD_UNDEFINED_STRICT", ["items"]);
                }
            }
        }
        if (this.options.forceMinItems === true) {
            if (schema.type === "array" || isArray && schema.type.indexOf("array") !== -1) {
                if (schema.minItems === undefined) {
                    report.addError("KEYWORD_UNDEFINED_STRICT", ["minItems"]);
                }
            }
        }
        if (this.options.forceMaxItems === true) {
            if (schema.type === "array" || isArray && schema.type.indexOf("array") !== -1) {
                if (schema.maxItems === undefined) {
                    report.addError("KEYWORD_UNDEFINED_STRICT", ["maxItems"]);
                }
            }
        }
        if (this.options.forceMinLength === true) {
            if (schema.type === "string" || isArray && schema.type.indexOf("string") !== -1) {
                if (schema.minLength === undefined &&
                    schema.format === undefined &&
                    schema.enum === undefined &&
                    schema.pattern === undefined) {
                    report.addError("KEYWORD_UNDEFINED_STRICT", ["minLength"]);
                }
            }
        }
        if (this.options.forceMaxLength === true) {
            if (schema.type === "string" || isArray && schema.type.indexOf("string") !== -1) {
                if (schema.maxLength === undefined &&
                    schema.format === undefined &&
                    schema.enum === undefined &&
                    schema.pattern === undefined) {
                    report.addError("KEYWORD_UNDEFINED_STRICT", ["maxLength"]);
                }
            }
        }
    },
    allOf: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.5.3.1
        if (Array.isArray(schema.allOf) === false) {
            report.addError("KEYWORD_TYPE_EXPECTED", ["allOf", "array"]);
        } else if (schema.allOf.length === 0) {
            report.addError("KEYWORD_MUST_BE", ["allOf", "an array with at least one element"]);
        } else {
            var idx = schema.allOf.length;
            while (idx--) {
                report.path.push("allOf");
                report.path.push(idx.toString());
                exports.validateSchema.call(this, report, schema.allOf[idx]);
                report.path.pop();
                report.path.pop();
            }
        }
    },
    anyOf: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.5.4.1
        if (Array.isArray(schema.anyOf) === false) {
            report.addError("KEYWORD_TYPE_EXPECTED", ["anyOf", "array"]);
        } else if (schema.anyOf.length === 0) {
            report.addError("KEYWORD_MUST_BE", ["anyOf", "an array with at least one element"]);
        } else {
            var idx = schema.anyOf.length;
            while (idx--) {
                report.path.push("anyOf");
                report.path.push(idx.toString());
                exports.validateSchema.call(this, report, schema.anyOf[idx]);
                report.path.pop();
                report.path.pop();
            }
        }
    },
    oneOf: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.5.5.1
        if (Array.isArray(schema.oneOf) === false) {
            report.addError("KEYWORD_TYPE_EXPECTED", ["oneOf", "array"]);
        } else if (schema.oneOf.length === 0) {
            report.addError("KEYWORD_MUST_BE", ["oneOf", "an array with at least one element"]);
        } else {
            var idx = schema.oneOf.length;
            while (idx--) {
                report.path.push("oneOf");
                report.path.push(idx.toString());
                exports.validateSchema.call(this, report, schema.oneOf[idx]);
                report.path.pop();
                report.path.pop();
            }
        }
    },
    not: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.5.6.1
        if (Utils.whatIs(schema.not) !== "object") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["not", "object"]);
        } else {
            report.path.push("not");
            exports.validateSchema.call(this, report, schema.not);
            report.path.pop();
        }
    },
    definitions: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.5.5.7.1
        if (Utils.whatIs(schema.definitions) !== "object") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["definitions", "object"]);
        } else {
            var keys = Object.keys(schema.definitions),
                idx = keys.length;
            while (idx--) {
                var key = keys[idx],
                    val = schema.definitions[key];
                report.path.push("definitions");
                report.path.push(key);
                exports.validateSchema.call(this, report, val);
                report.path.pop();
                report.path.pop();
            }
        }
    },
    format: function (report, schema) {
        if (typeof schema.format !== "string") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["format", "string"]);
        } else {
            if (FormatValidators[schema.format] === undefined) {
                report.addError("UNKNOWN_FORMAT", [schema.format]);
            }
        }
    },
    id: function (report, schema) {
        // http://json-schema.org/latest/json-schema-core.html#rfc.section.7.2
        if (typeof schema.id !== "string") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["id", "string"]);
        }
    },
    title: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.1
        if (typeof schema.title !== "string") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["title", "string"]);
        }
    },
    description: function (report, schema) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.1
        if (typeof schema.description !== "string") {
            report.addError("KEYWORD_TYPE_EXPECTED", ["description", "string"]);
        }
    },
    "default": function (/* report, schema */) {
        // http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.2
        // There are no restrictions placed on the value of this keyword.
    }
};

var validateArrayOfSchemas = function (report, arr) {
    var idx = arr.length;
    while (idx--) {
        exports.validateSchema.call(this, report, arr[idx]);
    }
    return report.isValid();
};

exports.validateSchema = function (report, schema) {

    report.commonErrorMessage = "SCHEMA_VALIDATION_FAILED";

    // if schema is an array, assume it's an array of schemas
    if (Array.isArray(schema)) {
        return validateArrayOfSchemas.call(this, report, schema);
    }

    // do not revalidate schema that has already been validated once
    if (schema.__$validated) {
        return true;
    }

    // if $schema is present, this schema should validate against that $schema
    var hasParentSchema = schema.$schema && schema.id !== schema.$schema;
    if (hasParentSchema) {
        if (schema.__$schemaResolved && schema.__$schemaResolved !== schema) {
            var subReport = new Report(report);
            var valid = JsonValidation.validate.call(this, subReport, schema.__$schemaResolved, schema);
            if (valid === false) {
                report.addError("PARENT_SCHEMA_VALIDATION_FAILED", null, subReport);
            }
        } else {
            if (this.options.ignoreUnresolvableReferences !== true) {
                report.addError("REF_UNRESOLVED", [schema.$schema]);
            }
        }
    }

    if (this.options.noTypeless === true) {
        // issue #36 - inherit type to anyOf, oneOf, allOf if noTypeless is defined
        if (schema.type !== undefined) {
            var schemas = [];
            if (Array.isArray(schema.anyOf)) { schemas = schemas.concat(schema.anyOf); }
            if (Array.isArray(schema.oneOf)) { schemas = schemas.concat(schema.oneOf); }
            if (Array.isArray(schema.allOf)) { schemas = schemas.concat(schema.allOf); }
            schemas.forEach(function (sch) {
                if (!sch.type) { sch.type = schema.type; }
            });
        }
        // end issue #36
        if (schema.enum === undefined &&
            schema.type === undefined &&
            schema.anyOf === undefined &&
            schema.oneOf === undefined &&
            schema.not === undefined &&
            schema.$ref === undefined) {
            report.addError("KEYWORD_UNDEFINED_STRICT", ["type"]);
        }
    }

    var keys = Object.keys(schema),
        idx = keys.length;
    while (idx--) {
        var key = keys[idx];
        if (key.indexOf("__") === 0) { continue; }
        if (SchemaValidators[key] !== undefined) {
            SchemaValidators[key].call(this, report, schema);
        } else if (!hasParentSchema) {
            if (this.options.noExtraKeywords === true) {
                report.addError("KEYWORD_UNEXPECTED", [key]);
            }
        }
    }

    if (this.options.pedanticCheck === true) {
        if (schema.enum) {
            // break recursion
            var tmpSchema = Utils.clone(schema);
            delete tmpSchema.enum;
            delete tmpSchema.default;

            report.path.push("enum");
            idx = schema.enum.length;
            while (idx--) {
                report.path.push(idx.toString());
                JsonValidation.validate.call(this, report, tmpSchema, schema.enum[idx]);
                report.path.pop();
            }
            report.path.pop();
        }

        if (schema.default) {
            report.path.push("default");
            JsonValidation.validate.call(this, report, schema, schema.default);
            report.path.pop();
        }
    }

    var isValid = report.isValid();
    if (isValid) {
        schema.__$validated = true;
    }
    return isValid;
};

},{"./FormatValidators":98,"./JsonValidation":99,"./Report":101,"./Utils":105}],105:[function(require,module,exports){
"use strict";

exports.isAbsoluteUri = function (uri) {
    return /^https?:\/\//.test(uri);
};

exports.isRelativeUri = function (uri) {
    // relative URIs that end with a hash sign, issue #56
    return /.+#/.test(uri);
};

exports.whatIs = function (what) {

    var to = typeof what;

    if (to === "object") {
        if (what === null) {
            return "null";
        }
        if (Array.isArray(what)) {
            return "array";
        }
        return "object"; // typeof what === 'object' && what === Object(what) && !Array.isArray(what);
    }

    if (to === "number") {
        if (Number.isFinite(what)) {
            if (what % 1 === 0) {
                return "integer";
            } else {
                return "number";
            }
        }
        if (Number.isNaN(what)) {
            return "not-a-number";
        }
        return "unknown-number";
    }

    return to; // undefined, boolean, string, function

};

exports.areEqual = function areEqual(json1, json2) {
    // http://json-schema.org/latest/json-schema-core.html#rfc.section.3.6

    // Two JSON values are said to be equal if and only if:
    // both are nulls; or
    // both are booleans, and have the same value; or
    // both are strings, and have the same value; or
    // both are numbers, and have the same mathematical value; or
    if (json1 === json2) {
        return true;
    }

    var i, len;

    // both are arrays, and:
    if (Array.isArray(json1) && Array.isArray(json2)) {
        // have the same number of items; and
        if (json1.length !== json2.length) {
            return false;
        }
        // items at the same index are equal according to this definition; or
        len = json1.length;
        for (i = 0; i < len; i++) {
            if (!areEqual(json1[i], json2[i])) {
                return false;
            }
        }
        return true;
    }

    // both are objects, and:
    if (exports.whatIs(json1) === "object" && exports.whatIs(json2) === "object") {
        // have the same set of property names; and
        var keys1 = Object.keys(json1);
        var keys2 = Object.keys(json2);
        if (!areEqual(keys1, keys2)) {
            return false;
        }
        // values for a same property name are equal according to this definition.
        len = keys1.length;
        for (i = 0; i < len; i++) {
            if (!areEqual(json1[keys1[i]], json2[keys1[i]])) {
                return false;
            }
        }
        return true;
    }

    return false;
};

exports.isUniqueArray = function (arr, indexes) {
    var i, j, l = arr.length;
    for (i = 0; i < l; i++) {
        for (j = i + 1; j < l; j++) {
            if (exports.areEqual(arr[i], arr[j])) {
                if (indexes) { indexes.push(i, j); }
                return false;
            }
        }
    }
    return true;
};

exports.difference = function (bigSet, subSet) {
    var arr = [],
        idx = bigSet.length;
    while (idx--) {
        if (subSet.indexOf(bigSet[idx]) === -1) {
            arr.push(bigSet[idx]);
        }
    }
    return arr;
};

// NOT a deep version of clone
exports.clone = function (src) {
    if (typeof src !== "object" || src === null) { return src; }
    var res, idx;
    if (Array.isArray(src)) {
        res = [];
        idx = src.length;
        while (idx--) {
            res[idx] = src[idx];
        }
    } else {
        res = {};
        var keys = Object.keys(src);
        idx = keys.length;
        while (idx--) {
            var key = keys[idx];
            res[key] = src[key];
        }
    }
    return res;
};

exports.cloneDeep = function (src) {
    var visited = [], cloned = [];
    function cloneDeep(src) {
        if (typeof src !== "object" || src === null) { return src; }
        var res, idx, cidx;

        cidx = visited.indexOf(src);
        if (cidx !== -1) { return cloned[cidx]; }

        visited.push(src);
        if (Array.isArray(src)) {
            res = [];
            cloned.push(res);
            idx = src.length;
            while (idx--) {
                res[idx] = cloneDeep(src[idx]);
            }
        } else {
            res = {};
            cloned.push(res);
            var keys = Object.keys(src);
            idx = keys.length;
            while (idx--) {
                var key = keys[idx];
                res[key] = cloneDeep(src[key]);
            }
        }
        return res;
    }
    return cloneDeep(src);
};

/*
  following function comes from punycode.js library
  see: https://github.com/bestiejs/punycode.js
*/
/*jshint -W016*/
/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 * @see `punycode.ucs2.encode`
 * @see <https://mathiasbynens.be/notes/javascript-encoding>
 * @memberOf punycode.ucs2
 * @name decode
 * @param {String} string The Unicode input string (UCS-2).
 * @returns {Array} The new array of code points.
 */
exports.ucs2decode = function (string) {
    var output = [],
        counter = 0,
        length = string.length,
        value,
        extra;
    while (counter < length) {
        value = string.charCodeAt(counter++);
        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
            // high surrogate, and there is a next character
            extra = string.charCodeAt(counter++);
            if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
            } else {
                // unmatched surrogate; only append this code unit, in case the next
                // code unit is the high surrogate of a surrogate pair
                output.push(value);
                counter--;
            }
        } else {
            output.push(value);
        }
    }
    return output;
};
/*jshint +W016*/

},{}],106:[function(require,module,exports){
(function (process){
"use strict";

require("./Polyfills");
var Report            = require("./Report");
var FormatValidators  = require("./FormatValidators");
var JsonValidation    = require("./JsonValidation");
var SchemaCache       = require("./SchemaCache");
var SchemaCompilation = require("./SchemaCompilation");
var SchemaValidation  = require("./SchemaValidation");
var Utils             = require("./Utils");
var Draft4Schema      = require("./schemas/schema.json");
var Draft4HyperSchema = require("./schemas/hyper-schema.json");

/*
    default options
*/
var defaultOptions = {
    // default timeout for all async tasks
    asyncTimeout: 2000,
    // force additionalProperties and additionalItems to be defined on "object" and "array" types
    forceAdditional: false,
    // assume additionalProperties and additionalItems are defined as "false" where appropriate
    assumeAdditional: false,
    // force items to be defined on "array" types
    forceItems: false,
    // force minItems to be defined on "array" types
    forceMinItems: false,
    // force maxItems to be defined on "array" types
    forceMaxItems: false,
    // force minLength to be defined on "string" types
    forceMinLength: false,
    // force maxLength to be defined on "string" types
    forceMaxLength: false,
    // force properties or patternProperties to be defined on "object" types
    forceProperties: false,
    // ignore references that cannot be resolved (remote schemas) // TODO: make sure this is only for remote schemas, not local ones
    ignoreUnresolvableReferences: false,
    // disallow usage of keywords that this validator can't handle
    noExtraKeywords: false,
    // disallow usage of schema's without "type" defined
    noTypeless: false,
    // disallow zero length strings in validated objects
    noEmptyStrings: false,
    // disallow zero length arrays in validated objects
    noEmptyArrays: false,
    // forces "uri" format to be in fully rfc3986 compliant
    strictUris: false,
    // turn on some of the above
    strictMode: false,
    // report error paths as an array of path segments to get to the offending node
    reportPathAsArray: false,
    // stops validation as soon as an error is found, true by default but can be turned off
    breakOnFirstError: true,
    // check if schema follow best practices and common sence
    pedanticCheck: false
};

/*
    constructor
*/
function ZSchema(options) {
    this.cache = {};
    this.referenceCache = [];

    this.setRemoteReference("http://json-schema.org/draft-04/schema", Draft4Schema);
    this.setRemoteReference("http://json-schema.org/draft-04/hyper-schema", Draft4HyperSchema);

    // options
    if (typeof options === "object") {
        var keys = Object.keys(options),
            idx = keys.length;
        while (idx--) {
            var key = keys[idx];
            if (defaultOptions[key] === undefined) {
                throw new Error("Unexpected option passed to constructor: " + key);
            }
        }
        this.options = options;
    } else {
        this.options = Utils.clone(defaultOptions);
    }

    if (this.options.strictMode === true) {
        this.options.forceAdditional  = true;
        this.options.forceItems       = true;
        this.options.forceMaxLength   = true;
        this.options.forceProperties  = true;
        this.options.noExtraKeywords  = true;
        this.options.noTypeless       = true;
        this.options.noEmptyStrings   = true;
        this.options.noEmptyArrays    = true;
    }

}

/*
    instance methods
*/
ZSchema.prototype.compileSchema = function (schema) {
    var report = new Report(this.options);

    schema = SchemaCache.getSchema.call(this, report, schema);

    SchemaCompilation.compileSchema.call(this, report, schema);

    this.lastReport = report;
    return report.isValid();
};
ZSchema.prototype.validateSchema = function (schema) {
    if (Array.isArray(schema) && schema.length === 0) {
        throw new Error(".validateSchema was called with an empty array");
    }

    var report = new Report(this.options);

    schema = SchemaCache.getSchema.call(this, report, schema);

    var compiled = SchemaCompilation.compileSchema.call(this, report, schema);
    if (compiled) { SchemaValidation.validateSchema.call(this, report, schema); }

    this.lastReport = report;
    return report.isValid();
};
ZSchema.prototype.validate = function (json, schema, callback) {
    var whatIs = Utils.whatIs(schema);
    if (whatIs !== "string" && whatIs !== "object") {
        var e = new Error("Invalid .validate call - schema must be an string or object but " + whatIs + " was passed!");
        if (callback) {
            process.nextTick(function () {
                callback(e, false);
            });
            return;
        }
        throw e;
    }

    var foundError = false;
    var report = new Report(this.options);

    schema = SchemaCache.getSchema.call(this, report, schema);

    var compiled = false;
    if (!foundError) {
        compiled = SchemaCompilation.compileSchema.call(this, report, schema);
    }
    if (!compiled) {
        this.lastReport = report;
        foundError = true;
    }

    var validated = false;
    if (!foundError) {
        validated = SchemaValidation.validateSchema.call(this, report, schema);
    }
    if (!validated) {
        this.lastReport = report;
        foundError = true;
    }

    if (!foundError) {
        JsonValidation.validate.call(this, report, schema, json);
    }

    if (callback) {
        report.processAsyncTasks(this.options.asyncTimeout, callback);
        return;
    } else if (report.asyncTasks.length > 0) {
        throw new Error("This validation has async tasks and cannot be done in sync mode, please provide callback argument.");
    }

    // assign lastReport so errors are retrievable in sync mode
    this.lastReport = report;
    return report.isValid();
};
ZSchema.prototype.getLastError = function () {
    if (this.lastReport.errors.length === 0) {
        return null;
    }
    var e = new Error();
    e.name = "z-schema validation error";
    e.message = this.lastReport.commonErrorMessage;
    e.details = this.lastReport.errors;
    return e;
};
ZSchema.prototype.getLastErrors = function () {
    return this.lastReport.errors.length > 0 ? this.lastReport.errors : undefined;
};
ZSchema.prototype.getMissingReferences = function () {
    var res = [],
        idx = this.lastReport.errors.length;
    while (idx--) {
        var error = this.lastReport.errors[idx];
        if (error.code === "UNRESOLVABLE_REFERENCE") {
            var reference = error.params[0];
            if (res.indexOf(reference) === -1) {
                res.push(reference);
            }
        }
    }
    return res;
};
ZSchema.prototype.getMissingRemoteReferences = function () {
    var missingReferences = this.getMissingReferences(),
        missingRemoteReferences = [],
        idx = missingReferences.length;
    while (idx--) {
        var remoteReference = SchemaCache.getRemotePath(missingReferences[idx]);
        if (remoteReference && missingRemoteReferences.indexOf(remoteReference) === -1) {
            missingRemoteReferences.push(remoteReference);
        }
    }
    return missingRemoteReferences;
};
ZSchema.prototype.setRemoteReference = function (uri, schema) {
    if (typeof schema === "string") {
        schema = JSON.parse(schema);
    }
    SchemaCache.cacheSchemaByUri.call(this, uri, schema);
};
ZSchema.prototype.getResolvedSchema = function (schema) {
    var report = new Report(this.options);
    schema = SchemaCache.getSchema.call(this, report, schema);

    // clone before making any modifications
    schema = Utils.cloneDeep(schema);

    var visited = [];

    // clean-up the schema and resolve references
    var cleanup = function (schema) {
        var key,
            typeOf = Utils.whatIs(schema);
        if (typeOf !== "object" && typeOf !== "array") {
            return;
        }

        if (schema.___$visited) {
            return;
        }

        schema.___$visited = true;
        visited.push(schema);

        if (schema.$ref && schema.__$refResolved) {
            var from = schema.__$refResolved;
            var to = schema;
            delete schema.$ref;
            delete schema.__$refResolved;
            for (key in from) {
                if (from.hasOwnProperty(key)) {
                    to[key] = from[key];
                }
            }
        }
        for (key in schema) {
            if (schema.hasOwnProperty(key)) {
                if (key.indexOf("__$") === 0) {
                    delete schema[key];
                } else {
                    cleanup(schema[key]);
                }
            }
        }
    };

    cleanup(schema);
    visited.forEach(function (s) {
        delete s.___$visited;
    });

    this.lastReport = report;
    if (report.isValid()) {
        return schema;
    } else {
        throw this.getLastError();
    }
};
ZSchema.prototype.setSchemaReader = function (schemaReader) {
    return ZSchema.setSchemaReader(schemaReader);
};
ZSchema.prototype.getSchemaReader = function () {
    return ZSchema.schemaReader;
};

/*
    static methods
*/
ZSchema.setSchemaReader = function (schemaReader) {
    ZSchema.schemaReader = schemaReader;
};
ZSchema.registerFormat = function (formatName, validatorFunction) {
    FormatValidators[formatName] = validatorFunction;
};
ZSchema.getRegisteredFormats = function () {
    return Object.keys(FormatValidators);
};
ZSchema.getDefaultOptions = function () {
    return Utils.cloneDeep(defaultOptions);
};

module.exports = ZSchema;

}).call(this,require('_process'))

},{"./FormatValidators":98,"./JsonValidation":99,"./Polyfills":100,"./Report":101,"./SchemaCache":102,"./SchemaCompilation":103,"./SchemaValidation":104,"./Utils":105,"./schemas/hyper-schema.json":107,"./schemas/schema.json":108,"_process":15}],107:[function(require,module,exports){
module.exports={
    "$schema": "http://json-schema.org/draft-04/hyper-schema#",
    "id": "http://json-schema.org/draft-04/hyper-schema#",
    "title": "JSON Hyper-Schema",
    "allOf": [
        {
            "$ref": "http://json-schema.org/draft-04/schema#"
        }
    ],
    "properties": {
        "additionalItems": {
            "anyOf": [
                {
                    "type": "boolean"
                },
                {
                    "$ref": "#"
                }
            ]
        },
        "additionalProperties": {
            "anyOf": [
                {
                    "type": "boolean"
                },
                {
                    "$ref": "#"
                }
            ]
        },
        "dependencies": {
            "additionalProperties": {
                "anyOf": [
                    {
                        "$ref": "#"
                    },
                    {
                        "type": "array"
                    }
                ]
            }
        },
        "items": {
            "anyOf": [
                {
                    "$ref": "#"
                },
                {
                    "$ref": "#/definitions/schemaArray"
                }
            ]
        },
        "definitions": {
            "additionalProperties": {
                "$ref": "#"
            }
        },
        "patternProperties": {
            "additionalProperties": {
                "$ref": "#"
            }
        },
        "properties": {
            "additionalProperties": {
                "$ref": "#"
            }
        },
        "allOf": {
            "$ref": "#/definitions/schemaArray"
        },
        "anyOf": {
            "$ref": "#/definitions/schemaArray"
        },
        "oneOf": {
            "$ref": "#/definitions/schemaArray"
        },
        "not": {
            "$ref": "#"
        },

        "links": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/linkDescription"
            }
        },
        "fragmentResolution": {
            "type": "string"
        },
        "media": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "A media type, as described in RFC 2046",
                    "type": "string"
                },
                "binaryEncoding": {
                    "description": "A content encoding scheme, as described in RFC 2045",
                    "type": "string"
                }
            }
        },
        "pathStart": {
            "description": "Instances' URIs must start with this value for this schema to apply to them",
            "type": "string",
            "format": "uri"
        }
    },
    "definitions": {
        "schemaArray": {
            "type": "array",
            "items": {
                "$ref": "#"
            }
        },
        "linkDescription": {
            "title": "Link Description Object",
            "type": "object",
            "required": [ "href", "rel" ],
            "properties": {
                "href": {
                    "description": "a URI template, as defined by RFC 6570, with the addition of the $, ( and ) characters for pre-processing",
                    "type": "string"
                },
                "rel": {
                    "description": "relation to the target resource of the link",
                    "type": "string"
                },
                "title": {
                    "description": "a title for the link",
                    "type": "string"
                },
                "targetSchema": {
                    "description": "JSON Schema describing the link target",
                    "$ref": "#"
                },
                "mediaType": {
                    "description": "media type (as defined by RFC 2046) describing the link target",
                    "type": "string"
                },
                "method": {
                    "description": "method for requesting the target of the link (e.g. for HTTP this might be \"GET\" or \"DELETE\")",
                    "type": "string"
                },
                "encType": {
                    "description": "The media type in which to submit data along with the request",
                    "type": "string",
                    "default": "application/json"
                },
                "schema": {
                    "description": "Schema describing the data to submit along with the request",
                    "$ref": "#"
                }
            }
        }
    }
}


},{}],108:[function(require,module,exports){
arguments[4][3][0].apply(exports,arguments)
},{"dup":3}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
